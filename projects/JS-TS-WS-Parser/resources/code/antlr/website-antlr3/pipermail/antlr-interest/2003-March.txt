From parrt at jguru.com  Sat Mar  1 13:20:20 2003
From: parrt at jguru.com (Terence Parr)
Date: Mon Dec 20 16:15:25 2004
Subject: [antlr-interest] [BUG] Java generator produces useless conditionals
In-Reply-To: <85340099.20030222081202@hunsicker.de>
Message-ID: <9B19BFC4-4C2B-11D7-B052-000393BB647E@jguru.com>


On Friday, February 21, 2003, at 11:12 PM, Marco Hunsicker wrote:
> TP>  I'm also frightened by consequences of changing code generator ;)
>
> I'd thought you have some unit tests at hand?

unfortunately not :(  [can u believe it?  I still can't] ;)

> I'd like to recommend the Clover coverage tool in this regard (another
> product which uses an ANTLR generated parser to process Java source
> files, see http://www.thecortex.net/clover/index.html; maybe a
> candidate for the links section?). They support Open Source projects,
> you may a obtain a free license! Version 1.1 is due for release in the
> next two weeks.

Added to the showcase:  http://www.antlr.org/showcase.html

Ter
--
Co-founder, http://www.jguru.com
Creator, ANTLR Parser Generator: http://www.antlr.org
Lecturer in Comp. Sci., University of San Francisco


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From parrt at jguru.com  Sat Mar  1 13:26:12 2003
From: parrt at jguru.com (Terence Parr)
Date: Mon Dec 20 16:15:25 2004
Subject: [antlr-interest] updated ada grammar
Message-ID: <6D7E3246-4C2C-11D7-B052-000393BB647E@jguru.com>

Thanks to Oliver Kellogg, we have an updated Ada grammar.  Check out:

http://www.antlr.org/grammars/ada

Terence
--
Co-founder, http://www.jguru.com
Creator, ANTLR Parser Generator: http://www.antlr.org
Lecturer in Comp. Sci., University of San Francisco


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From parrt at jguru.com  Sat Mar  1 14:04:52 2003
From: parrt at jguru.com (Terence Parr)
Date: Mon Dec 20 16:15:25 2004
Subject: [antlr-interest] added lots more lecture audio
Message-ID: <D43F416A-4C31-11D7-B052-000393BB647E@jguru.com>

Folks,

Just added audio for the following

Garbage Collection Overview

An Introduction To ANTLR

Lexical Analysis With ANTLR, Token Streams

Worksheet 0
	how to build a C preprocessor
	how to distinguish ForTran array / function call   syntax
	how to distinguish C++ declarations from expressions

http://nexus.cs.usfca.edu/~parrt/course/652/index.html

Terence
--
Co-founder, http://www.jguru.com
Creator, ANTLR Parser Generator: http://www.antlr.org
Lecturer in Comp. Sci., University of San Francisco


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From radup_ro at yahoo.com  Sat Mar  1 14:04:55 2003
From: radup_ro at yahoo.com (Radu Popa <radup_ro@yahoo.com>)
Date: Mon Dec 20 16:15:25 2004
Subject: [antlr-interest] xmlSerialize problem (bug?)
Message-ID: <b3raq7+oanc@eGroups.com>

Hi all,

I'm new to anlr and I am trying to serialize my AST in XML. The AST 
is constructed correctly but I really don't like the "look" of the 
XML generated by xmlSerialize.
On one hand I don't need the class name of the node in the XML doc 
and on the other hand I cannot figure out a way to insert 
the "string" type of the token and not it's integer representation.
Even using BaseAST.setVerboseStringConversion, xmlSerialize is still 
outputing teh integer velue of token type (because is not using 
BaseAST.toString but directly Token.getText and Token.getType). Also, 
BaseAST.tokenNames is private so I cannot access it from my AST class.
Of course there are workarounds for this, but I feel that 
xmlSerialize needs some polish.
Am I missing smth or it is really a bug?

Thanks in advance,
Radu


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From jibin.han at xilinx.com  Sun Mar  2 10:13:26 2003
From: jibin.han at xilinx.com (Jibin Han)
Date: Mon Dec 20 16:15:25 2004
Subject: [antlr-interest] How to make Antlr2.7.2 working with VC6
Message-ID: <3E6249C6.4CA75164@Xilinx.com>

Hi,
    I followed a tutorial, "How to get started with Antlr and VC++ 6.0."
at http://www.imada.sdu.dk/~morling/issue1.htm to make Antlr working
with VC6. I downloaded 2.7.2 instead of the 2.7.1 mentioned in the
tutorial and my JDK is 1.3.
    First, in setting CLASSPATH, I do not see such file in my JDK, <JDK
path>\lib\classes.zip, but I added it anyway.
    Then in compiling the Antlr source code, I think there maybe some
directory structure difference between 2.7.1 and 2.7.2, but I add the
source code from <antlr2.7.2>\lib\cpp\src and headers from
<antlr2.7.2>\lib\cpp\antlr to the VC project, The problem is when I
build it, there are 4 errors,

h:\antlr-2.7.2\lib\cpp\src\baseast.cpp(312) : error C2201: 'nullASTptr'
: must have external linkage in order to be exported/imported
h:\antlr-2.7.2\lib\cpp\src\token.cpp(18) : error C2720: 'badToken' :
'__declspec(dllimport ) ' storage-class specifier illegal on members
h:\antlr-2.7.2\lib\cpp\src\token.cpp(18) : error C2491:
'Token::badToken' : definition of dllimport static data member
h:\antlr-2.7.2\lib\cpp\src\treeparser.cpp(39) : error C2491:
'TreeParser::ASTNULL' : definition of dllimport static data member not
allowed

    Could you point me what's wrong here?
    Is there somewhere a tutorial for Antlr2.7.2 and VC6?

Thanks!



 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From ajpb at yahoo.com  Sat Mar  1 19:07:50 2003
From: ajpb at yahoo.com (Addi Jamshidi)
Date: Mon Dec 20 16:15:25 2004
Subject: [antlr-interest] Any ANTLR based parser for the English language?
In-Reply-To: <D43F416A-4C31-11D7-B052-000393BB647E@jguru.com>
Message-ID: <20030302030750.91721.qmail@web11505.mail.yahoo.com>

Is there (or actually has anyone tried) writing a
parser for the English Language (or for that matter
any language - e.g. French, German, etc.) with ANTLR?



__________________________________________________
Do you Yahoo!?
Yahoo! Tax Center - forms, calculators, tips, more
http://taxes.yahoo.com/

 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From iank at bearcave.com  Sun Mar  2 19:28:56 2003
From: iank at bearcave.com (iank@bearcave.com)
Date: Mon Dec 20 16:15:25 2004
Subject: [antlr-interest] Any ANTLR based parser for the English language?
Message-ID: <200303030328.h233Sum0016915@idiom.com>


> Is there (or actually has anyone tried) writing a
> parser for the English Language (or for that matter
> any language - e.g. French, German, etc.) with ANTLR?

  I just purchased an excellent book "Foundations of Statistical
  Natural Language Processing" by Manning and Schutze (there is an
  umlaut over the u), MIT Press, 2000.  To be guilty of massive
  understatement, building a parse tree for a language like English is
  very different from building a parse tree for Java or any other
  programming language.  Programming languages are designed to be
  compiled (well, OK, there's C++ and Verilog).  The grammar rules for
  a natural language are much more complex and you would have to have
  a very sophisticated scanner (parser front end).

  The attraction of parser generators is that they save you time and
  make changes easier when building parsers for programming languages.
  I'm not sure that ANTLR would provide much savings in natural
  language processing, considering all of the support software you
  would need.

  Ian
  www.bearcave.com

 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From parrt at jguru.com  Sun Mar  2 21:01:29 2003
From: parrt at jguru.com (Terence Parr)
Date: Mon Dec 20 16:15:25 2004
Subject: [antlr-interest] Any ANTLR based parser for the English language?
In-Reply-To: <20030302030750.91721.qmail@web11505.mail.yahoo.com>
Message-ID: <31897648-4D35-11D7-A2AF-000393BB647E@jguru.com>


On Saturday, March 1, 2003, at 07:07 PM, Addi Jamshidi wrote:

> Is there (or actually has anyone tried) writing a
> parser for the English Language (or for that matter
> any language - e.g. French, German, etc.) with ANTLR?

ANTLR is designed specifically to handle the non-ambiguous case; i.e., 
the non-natural language case. ;)  There are parser generators that 
will build all possible parse trees for you and then it's up to you to 
figure out which is the "right" one.  ;)

Terence
--
Co-founder, http://www.jguru.com
Creator, ANTLR Parser Generator: http://www.antlr.org
Lecturer in Comp. Sci., University of San Francisco


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From dvleonid at land.ru  Mon Mar  3 04:39:14 2003
From: dvleonid at land.ru (Dvoryansky Leonid)
Date: Mon Dec 20 16:15:25 2004
Subject: [antlr-interest] Wazzup with natural language?
In-Reply-To: <31897648-4D35-11D7-A2AF-000393BB647E@jguru.com>
Message-ID: <BLEAJDOHPMCDLGAGFDMPGEGGCCAA.DVLeonid@land.ru>

Hi All.

I just want to know what can science do with natural languages for a current
moment?
Are there any institutes which making research in that direction?
And which class of grammars cover natural languages?
And are there many differences in various languages from the science
standpoint?

It will be a big step to ai to recognize natural speaking.

Terr, plz help if you can.

SFME - i'm to sleepy now.
--Dvoryansky Leonid


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From mzukowski at yci.com  Mon Mar  3 08:12:37 2003
From: mzukowski at yci.com (mzukowski@yci.com)
Date: Mon Dec 20 16:15:25 2004
Subject: [antlr-interest] Performance Question
Message-ID: <170826586F3BD511910D0200C110AAA8054021B0@memail03.bco-home.com>

Look ahead is probably quicker, but check the generated source and decide
for yourself.

Monty
-----Original Message-----
From: Trey Spiva [mailto:Trey.Spiva@embarcadero.com]
Sent: Thursday, February 27, 2003 5:49 AM
To: antlr-interest@yahoogroups.com
Subject: [antlr-interest] Performance Question


Is it better to increase the look ahead or is it better use semantic
predicates?
 
Example:
options
{
   ... 
   k = 2;
}
 
...
 
someRule
  : IDENT LPAREN
  | IDENT LBRACK
  ;
 
or is it better to do:
 
someRule
  : (IDENT LPAREN)=>IDENT LPAREN
  | IDENT LBRACK
  ;
 
 
 

Your use of Yahoo! Groups is subject to the Yahoo! Terms of Service. 

 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From mzukowski at yci.com  Mon Mar  3 08:23:33 2003
From: mzukowski at yci.com (mzukowski@yci.com)
Date: Mon Dec 20 16:15:25 2004
Subject: [antlr-interest] Help w/Complicated lexer/parser
Message-ID: <170826586F3BD511910D0200C110AAA8054021B1@memail03.bco-home.com>

I think the multiple lexers/parsers is the right way.  If it's really tricky
you could do something like my filter example:
www.codetransform.com/filterexample.html

Monty

-----Original Message-----
From: Andrew Deren [mailto:andrew@adersoftware.com]
Sent: Thursday, February 27, 2003 8:43 PM
To: antlr-interest@yahoogroups.com
Subject: [antlr-interest] Help w/Complicated lexer/parser


I don't know if it's really complicated, but can't figure it out.
Basically I'm writing parser for a language called cold fusion. It's like
HTML with embeded code in it (like PHP or JSP).

The language looks like this:
each construct starts with <CF followed by tag name (ex. <CFLOOP)
after the beginning tag there are name=value attributes like html. However
each value could itself be an expression. Expressions are enclosed in ##
(ex. #function(x + 3)#)
So an example attribute could be from="#someFunction(x - 2 * f(x))#"
Another complicated thing is that a function could accept a string, and a
string could have an expression inside of it.
ex. #left("this is x:#x# and y:#y#", 3)
Additionally regular text (outside of tags) could have expressions in it
(enclosed in ##)

First I tried using Disambiguating predicates, but that turned out to be too
cumbersome.
My second attempt was to use multiple lexers, but I can't find much
documentation and examples on it (except a small java/javadoc example).
Besides, I think I would have to have too many lexers/parsers.
The way I was thinking, I would need:
Inside of tag parser (starts when <CF is seen)
Inside of expression parser (starts when # is seen)
Regular parser (for text, switches to tag or expression parsers)

Is that the right direction?
Thanks,
Andrew



 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From iank at bearcave.com  Mon Mar  3 08:56:13 2003
From: iank at bearcave.com (iank@bearcave.com)
Date: Mon Dec 20 16:15:25 2004
Subject: [antlr-interest] Wazzup with natural language?
Message-ID: <200303031656.h23GuDtl013436@idiom.com>


> I just want to know what can science do with natural languages for a
> current moment?  Are there any institutes which making research in
> that direction?

  The University of Utah has a pretty active group in Natural Language
Processing.  Take a look at:

    http://www.cs.utah.edu/nlp/

I'm sure that there are many other groups.  I've only just started
reading in this area.

  Again, my impression is that this is very different from computer
language processing.

  Ian


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From parrt at jguru.com  Mon Mar  3 10:03:26 2003
From: parrt at jguru.com (Terence Parr)
Date: Mon Dec 20 16:15:25 2004
Subject: [antlr-interest] Wazzup with natural language?
In-Reply-To: <BLEAJDOHPMCDLGAGFDMPGEGGCCAA.DVLeonid@land.ru>
Message-ID: <6E4343F8-4DA2-11D7-A2AF-000393BB647E@jguru.com>


On Monday, March 3, 2003, at 04:39  AM, Dvoryansky Leonid wrote:

> Hi All.
>
> I just want to know what can science do with natural languages for a 
> current
> moment?
> Are there any institutes which making research in that direction?
> And which class of grammars cover natural languages?
> And are there many differences in various languages from the science
> standpoint?
>
> It will be a big step to ai to recognize natural speaking.
>
> Terr, plz help if you can.

Xerox PARC and Fuji labs both have active groups in this area; I just 
had lunch with one of the smart guys down there in Palo Alto.  Natural 
languages are probably in the chomsky type 0 category.  Chomsky I 
*think* showed how at a certain level all languages follow a certain 
over-grammar (my dumb term).

Getting all possible interpretations of "I once shot an elephant in my 
pajamas" is pretty easy.  Figuring out which one makes sense is another 
story ;)

Ter
--
Co-founder, http://www.jguru.com
Creator, ANTLR Parser Generator: http://www.antlr.org
Lecturer in Comp. Sci., University of San Francisco


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From dvleonid at land.ru  Mon Mar  3 13:12:12 2003
From: dvleonid at land.ru (Dvoryansky Leonid)
Date: Mon Dec 20 16:15:25 2004
Subject: [antlr-interest] Wazzup with natural language?
In-Reply-To: <6E4343F8-4DA2-11D7-A2AF-000393BB647E@jguru.com>
Message-ID: <BLEAJDOHPMCDLGAGFDMPEEGICCAA.DVLeonid@land.ru>

Tnx guys for links and answer.

>Getting all possible interpretations of "I once shot an elephant in my 
>pajamas" is pretty easy.  Figuring out which one makes sense is another 
>story ;)

I offer to declare new Chomsky grammar 0.5 class - elephant-free.

Seriously - probably fuzzy logic and complex parsing can do that.

 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From David.Benn at motorola.com  Mon Mar  3 15:23:26 2003
From: David.Benn at motorola.com (David Benn)
Date: Mon Dec 20 16:15:25 2004
Subject: [antlr-interest] Any ANTLR based parser for the English language?
References: <200303030328.h233Sum0016915@idiom.com>
Message-ID: <3E63E3EE.3B9936EF@asc.corp.mot.com>

Projects like Attempto controlled English:

	http://www.ifi.unizh.ch/groups/req/ftp/papers/ACE_Manual.pdf

go some way towards this kind of thing.

Rgds,

DJB

iank@bearcave.com wrote:
> 
> > Is there (or actually has anyone tried) writing a
> > parser for the English Language (or for that matter
> > any language - e.g. French, German, etc.) with ANTLR?
> 
>   I just purchased an excellent book "Foundations of Statistical
>   Natural Language Processing" by Manning and Schutze (there is an
>   umlaut over the u), MIT Press, 2000.  To be guilty of massive
>   understatement, building a parse tree for a language like English is
>   very different from building a parse tree for Java or any other
>   programming language.  Programming languages are designed to be
>   compiled (well, OK, there's C++ and Verilog).  The grammar rules for
>   a natural language are much more complex and you would have to have
>   a very sophisticated scanner (parser front end).
> 
>   The attraction of parser generators is that they save you time and
>   make changes easier when building parsers for programming languages.
>   I'm not sure that ANTLR would provide much savings in natural
>   language processing, considering all of the support software you
>   would need.
> 
>   Ian
>   www.bearcave.com
> 
> 
> 
> Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/
 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

-------------- next part --------------
A non-text attachment was scrubbed...
Name: dbenn.vcf
Type: text/x-vcard
Size: 254 bytes
Desc: Card for David Benn
Url : http://www.antlr.org/pipermail/antlr-interest/attachments/20030304/706d5b1e/dbenn.vcf
From ajpb at yahoo.com  Mon Mar  3 16:04:26 2003
From: ajpb at yahoo.com (Addi Jamshidi)
Date: Mon Dec 20 16:15:25 2004
Subject: [antlr-interest] Natural language and ANTLR...
In-Reply-To: <6E4343F8-4DA2-11D7-A2AF-000393BB647E@jguru.com>
Message-ID: <20030304000426.88588.qmail@web11507.mail.yahoo.com>

I agree with your statement of"

"Getting all possible interpretations of "I once shot
an elephant in my  pajamas" is pretty easy.  Figuring
out which one makes sense is another  story ;)"

However what my original question with being able to
use ANTLR as the basis of having a grammar for the
English language was, had to do with the following:

1) Currently we translate our tools/products into 16
other languages (besides English). For every string
that we use in our classes or GUI widgets, we
basically create a string/message in English and put
it in some type of resource file and ship it to our
translators to translate them for us. IN turn we get
the translated strings in newly created resource
files, and bundle them with our products/tools.

2) The problem is I want to automate most of this
process. That is to transform the function of our
translation centers from that of "implementers" to one
that is more in the capacity of "advisory" and
"reviewers". 
Basically what I want to do is:

1) Run the English strings and messages through
auomtated machine translation engines (there are quite
a few of them out there).

2) The resulted strings can then further be analyzed
before shipping them to our translation centers for
their new role of being "reviewers" as oppose to
actually translating them. And this is where I was
thinking of perhaps using ANTLR for better formulating
the translations.

You see, the strings that are being translated are not
complicated (i.e. they are not Sheakspearan type
literature but rather strings and messages such as
:"Please enter the name of your Database", or simple
1-2 word sentences such as "Connection Name",,
"Database name", or something like "Welcome to Our
Stored Procedure Wizard", etc.

The problem is the automated translation engines
translate something like "Welcome to our Stored
Procedure Wizard" to "Welcome to our Saved procedure
magician" !
Since we are dealing within a very limited context
putting these translated strings into more intelligent
context would require:

1) Proper usage of words (e.g. Wizard = "Assistant
Tool" as oppose to "magician").

2) Knowing how to formulate the new sentence after
figuring out what the proper wording should be. This
is where I was hoping perhaps ANTLR can come handy.

Your thoughts are appreciated.

Regards,

Addi Jamshidi




--- Terence Parr <parrt@jguru.com> wrote:
> 
> On Monday, March 3, 2003, at 04:39  AM, Dvoryansky
> Leonid wrote:
> 
> > Hi All.
> >
> > I just want to know what can science do with
> natural languages for a 
> > current
> > moment?
> > Are there any institutes which making research in
> that direction?
> > And which class of grammars cover natural
> languages?
> > And are there many differences in various
> languages from the science
> > standpoint?
> >
> > It will be a big step to ai to recognize natural
> speaking.
> >
> > Terr, plz help if you can.
> 
> Xerox PARC and Fuji labs both have active groups in
> this area; I just 
> had lunch with one of the smart guys down there in
> Palo Alto.  Natural 
> languages are probably in the chomsky type 0
> category.  Chomsky I 
> *think* showed how at a certain level all languages
> follow a certain 
> over-grammar (my dumb term).
> 
> Getting all possible interpretations of "I once shot
> an elephant in my 
> pajamas" is pretty easy.  Figuring out which one
> makes sense is another 
> story ;)
> 
> Ter
> --
> Co-founder, http://www.jguru.com
> Creator, ANTLR Parser Generator:
> http://www.antlr.org
> Lecturer in Comp. Sci., University of San Francisco
> 
> 
>  
> 
> Your use of Yahoo! Groups is subject to
> http://docs.yahoo.com/info/terms/ 
> 
> 


__________________________________________________
Do you Yahoo!?
Yahoo! Tax Center - forms, calculators, tips, more
http://taxes.yahoo.com/

 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From dvleonid at land.ru  Tue Mar  4 08:35:57 2003
From: dvleonid at land.ru (Dvoryansky Leonid)
Date: Mon Dec 20 16:15:25 2004
Subject: [antlr-interest] SDL, MSC, ASN.1
In-Reply-To: <20030304000426.88588.qmail@web11507.mail.yahoo.com>
Message-ID: <BLEAJDOHPMCDLGAGFDMPAEGJCCAA.DVLeonid@land.ru>

Is there any implementation of SDL ITU.T Z.100 state machine on ANTLR?
Even only text notation implemented.
Or MSC?

Tnx.

 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From deshmane at pmc-sierra.com  Tue Mar  4 09:37:55 2003
From: deshmane at pmc-sierra.com (deshmane <deshmane@pmc-sierra.com>)
Date: Mon Dec 20 16:15:25 2004
Subject: [antlr-interest] more installation problems
Message-ID: <b42o9j+jfm0@eGroups.com>

Hi,
First of all, thanks to Gary for your earlier reply.

Now during the "make" I am seeing compilation
errors. I am running make on SunOS5.7.
I have seen links for compiling ANTLR lib using
VC++ 6.0.
Has anyone compiled the cpp src code for SunOs
successfully ?
Any help is appreciated.

thanks,
-harsh


The relevant part:

Building ANTLRUtil.o
In file included from ANTLRUtil.cpp:9:
../antlr/IOException.hpp:25: syntax error before `;'
../antlr/IOException.hpp:27: parse error before `&'
../antlr/IOException.hpp:30: missing ';' before right brace
../antlr/IOException.hpp:32: semicolon missing after declaration of
`class antlr::IOException'
../antlr/IOException.hpp: In function `int antlr::IOException(const
string &)':
../antlr/IOException.hpp:32: base initializers not allowed for
non-member functions
../antlr/IOException.hpp:34: warning: control reaches end of non-void
function `antlr::IOException(const string &)'
../antlr/IOException.hpp: At top level:
../antlr/IOException.hpp:36: destructors must be member functions
../antlr/IOException.hpp:36: virtual outside class declaration
../antlr/IOException.hpp:41: parse error before `}'
ANTLRUtil.cpp: In function `class string antlr::read_string(istream
&)':
ANTLRUtil.cpp:54: implicit declaration of function `int
antlr::eatwhite(...)'
ANTLRUtil.cpp:54: warning: cannot pass objects of type `istream'
through `...'
ANTLRUtil.cpp:63: implicit declaration of function `int
antlr::IOException(...)'
ANTLRUtil.cpp:104: warning: cannot pass objects of type
`basic_string<char,string_char_traits<char>,__default_alloc_template<false,0>
>' through `...'
ANTLRUtil.cpp: In function `class string
antlr::read_identifier(istream &)':
ANTLRUtil.cpp:117: warning: cannot pass objects of type `istream'
through `...'
ANTLRUtil.cpp: In function `void antlr::read_AttributeNValue(istream
&, string &, string &)':
ANTLRUtil.cpp:152: implicit declaration of function `int
antlr::read_identifier(...)'
ANTLRUtil.cpp:152: warning: cannot pass objects of type `istream'
through `...'
ANTLRUtil.cpp:156: implicit declaration of function `int
antlr::read_string(...)'
ANTLRUtil.cpp:156: warning: cannot pass objects of type `istream'
through `...'
ANTLRUtil.cpp:158: warning: cannot pass objects of type
`basic_string<char,string_char_traits<char>,__default_alloc_template<false,0>
>' through `...'
make: *** [ANTLRUtil.o] Error 1


-------------------------------------------




 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From parrt at jguru.com  Tue Mar  4 12:24:15 2003
From: parrt at jguru.com (Terence Parr)
Date: Mon Dec 20 16:15:25 2004
Subject: [antlr-interest] yet more lecture audio (problem solving style lectures)
Message-ID: <44D05B94-4E7F-11D7-ABA9-000393BB647E@jguru.com>

Folks,

Added two more lecture audios:  "ANTLR in it's own words" and 
"Generating stack code from ASTs" (Part of worksheet 0).

http://nexus.cs.usfca.edu/~parrt/course/652/index.html

Ter
--
Co-founder, http://www.jguru.com
Creator, ANTLR Parser Generator: http://www.antlr.org
Lecturer in Comp. Sci., University of San Francisco


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From Jonathan.Sprinkle at vanderbilt.edu  Tue Mar  4 16:17:38 2003
From: Jonathan.Sprinkle at vanderbilt.edu (ee_doright)
Date: Mon Dec 20 16:15:25 2004
Subject: [antlr-interest] STLPort and EOF (from the TODO in $\lib\cpp)
Message-ID: <b43fn2+t5h9@eGroups.com>

Hello all,

After several hours of sackcloth and ashes, I have realized that it 
is an existing bug that ANTLR doesn't work with STLPort.  I really 
want to abandon SGI's STL because it is such a pain in the butt, so I 
was experimenting w/ STLPort, but have run into a problem with this 
EOF thing:

(from the TODO in $\lib\cpp):
* On Thu, Sep 21, 2000 at 12:33:48AM -0700, John Lambert 
<JohnL@jBASE.com> wrote:
  > 1) The literal EOF is not defined and causes the define of 
EOF_CHAR  in
  > CharScanner.hpp to fail.

  ANTLR with STL Port. Changing the EOF define to 
char_traits<char>::eof()
  breaks things for gcc-2.95.2. Fix this in next release portably.
  http://www.egroups.com/message/antlr-interest/2520

(end of snippet)

In the 2.7.0 and 2.7.1 release, there is a "Fix this in the next 
release" which I am afraid will never happen.  Is there a fix I can 
do on my end, or is there a mere configuration switch I need to do, 
or are there any plans to ever fix this?  I am new to the STL world, 
but I had heard that everyone uses STLPort...obviously, not, because 
at least some of us use antlr.  ;)

Should i be worried that this post is 30 months old, and it is still 
not fixed??

Jon Sprinkle


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From kim at tiede.dk  Wed Mar  5 01:47:19 2003
From: kim at tiede.dk (Kim Tiedemann)
Date: Mon Dec 20 16:15:25 2004
Subject: [antlr-interest] Is there a C# grammar for ANTLR ??
Message-ID: <CBEKLOBPPGILEDDNLKFJAEKACBAA.kim@tiede.dk>

Hi there,

We are a group studying computer science at the university of Aalborg,
Denmark and we are considering doing a project where it would be possible to
reverse engineer C# files and show them as an UML-diagram in ArgoUML.

So we were wondering if there already exists a C# grammar for ANTLR ??

Best regards

Kim Tiedemann

"The road to wisdom? - Well, it's plain and simple to express: Err and err
and err again - but less and less and less."
Piet Hein
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20030305/30a8ce9f/attachment.html
From klaren at cs.utwente.nl  Wed Mar  5 02:09:06 2003
From: klaren at cs.utwente.nl (Ric Klaren)
Date: Mon Dec 20 16:15:25 2004
Subject: [antlr-interest] STLPort and EOF (from the TODO in $\lib\cpp)
In-Reply-To: <b43fn2+t5h9@eGroups.com>; from Jonathan.Sprinkle@vanderbilt.edu on Wed, Mar 05, 2003 at 12:17:38AM -0000
References: <b43fn2+t5h9@eGroups.com>
Message-ID: <20030305110905.B7046@cs.utwente.nl>

Hi,

On Wed, Mar 05, 2003 at 12:17:38AM -0000, ee_doright wrote:
> After several hours of sackcloth and ashes, I have realized that it 
> is an existing bug that ANTLR doesn't work with STLPort.  I really 
> want to abandon SGI's STL because it is such a pain in the butt, so I 
> was experimenting w/ STLPort, but have run into a problem with this 
> EOF thing:
> 
> (from the TODO in $\lib\cpp):
> * On Thu, Sep 21, 2000 at 12:33:48AM -0700, John Lambert 
> <JohnL@jBASE.com> wrote:
>   > 1) The literal EOF is not defined and causes the define of 
> EOF_CHAR  in
>   > CharScanner.hpp to fail.
> 
>   ANTLR with STL Port. Changing the EOF define to 
> char_traits<char>::eof()
>   breaks things for gcc-2.95.2. Fix this in next release portably.
>   http://www.egroups.com/message/antlr-interest/2520
> 
> (end of snippet)
> 
> In the 2.7.0 and 2.7.1 release, there is a "Fix this in the next 
> release" which I am afraid will never happen.  Is there a fix I can 
> do on my end, or is there a mere configuration switch I need to do, 
> or are there any plans to ever fix this?  I am new to the STL world, 
> but I had heard that everyone uses STLPort...obviously, not, because 
> at least some of us use antlr.  ;)

Well there are ppl using STLPort with antlr afaik. I'm not one of them
gcc's STL version works well enough for me.

> Should i be worried that this post is 30 months old, and it is still 
> not fixed??

Well fixing this portably turns out not to be that easy. Did you at least
try following the snippet and changing the EOF define to
char_traits<char>::eof() ? Would be nice if it's now supported on some more
platforms. If everything else fails wriggle in a #define of EOF to -1
somewhere. Or find out what STLPort uses for EOF anyway. Problem is that
almost all compiler builders are doing something different with this EOF
stuff. So basically if not many ppl complain don't fix it. And must say
you're the second or so.

Bug reports are also that much easier if information is supplied of say
compiler, platform, STLPort version. Though chances are not very high that
I have time to mess around with installing an STLPort version. So if you
email me with more detailed information I might help in resolving the issue
and indeed fixing it in a later release.

Cheers,

Ric
--
-----+++++*****************************************************+++++++++-------
    ---- Ric Klaren ----- j.klaren@utwente.nl ----- +31 53 4893722  ----
-----+++++*****************************************************+++++++++-------
  "You know how to use that thing?" [pointing to the sword]
  "Sure.. The pointy end goes into the other guy."
  --- The Mask of Zorro


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From klaren at cs.utwente.nl  Wed Mar  5 02:14:38 2003
From: klaren at cs.utwente.nl (Ric Klaren)
Date: Mon Dec 20 16:15:25 2004
Subject: [antlr-interest] more installation problems
In-Reply-To: <b42o9j+jfm0@eGroups.com>; from deshmane@pmc-sierra.com on Tue, Mar 04, 2003 at 05:37:55PM -0000
References: <b42o9j+jfm0@eGroups.com>
Message-ID: <20030305111438.C7046@cs.utwente.nl>

On Tue, Mar 04, 2003 at 05:37:55PM -0000, deshmane <deshmane@pmc-sierra.com> wrote:
> Now during the "make" I am seeing compilation
> errors. I am running make on SunOS5.7.
> Has anyone compiled the cpp src code for SunOs
> successfully ?

Do it quite often ;) Anyway change the top of IOException.hpp to:

#include <antlr/config.hpp>
#include <antlr/ANTLRException.hpp>
#include <exception>		// <- added

Cheers,

Ric
-- 
-----+++++*****************************************************+++++++++-------
    ---- Ric Klaren ----- j.klaren@utwente.nl ----- +31 53 4893722  ----
-----+++++*****************************************************+++++++++-------
  "I think we better split up."
  "Good idea. We can do more damage that way."
  --- Ghostbusters


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From yuva at excite.com  Wed Mar  5 02:19:18 2003
From: yuva at excite.com (yuvaraj_a_r)
Date: Mon Dec 20 16:15:25 2004
Subject: [antlr-interest] Language Refactoring??
Message-ID: <b44iv6+u2c1@eGroups.com>

Hello,
With the idea of refactoring showing up in other areas of software - 
we have code refactoring, data refactoring etc - I was wondering if 
we can think of Language Refactoring. 

Lets take an example. Assume I have a 4GL Language X which I want to 
transform to Java. However, I face the problem that X has been 
delivered to a whole load of customers and there is a HUGE amount of 
code written in X. So, I would like to provide a sequence 
of "computer language refactoring" steps to move from language X to 
Java. This would mean that there might be an intermediate stage where 
the language is not recognizable as X or Java but is essentially a 
mixture of the two.

Question : Is such a language transformation from one programming 
language to another possible by small reversible (refactoring) steps?

However the problem does not end there. Due to the fact that X has 
survived in the market for some years, supporting libraries and 
semantic constructs peculiar to X have evolved. 

Question : How to take the whole system from X based to Java based?

In this respect, I appreciate the MS .NET strategy of a CLR 
specification. Instead of fighting the problem after it hits us, the 
CLR strategy builds such transformation possibilities directly into 
the language definition....

So, what do you think?

Regards,
yuva




 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From tomdz at cs.tu-berlin.de  Wed Mar  5 03:22:03 2003
From: tomdz at cs.tu-berlin.de (Thomas Dudziak)
Date: Mon Dec 20 16:15:25 2004
Subject: [antlr-interest] STLPort and EOF (from the TODO in $\lib\cpp)
Message-ID: <Pine.SOL.4.53.0303051055020.5295@reticuli>

Hi,

can that be a version problem with STLPort ? I've had quite
some problems getting the latest stable build to run at all (on Windows,
that is) whereas CVS drops (nightly builds I believe) worked without
problems so far (in ANTLR).

It can also depend on how STLPort was compiled. Newer versions include a
input stream library (you know that you use this when you have to link
against STLPort libraries as the STL part is headers-only) which might not
work with ANTLR (never tried it).
BTW, isn't EOF also defiened in stdio.h. Perhaps a simple #include
<stdio.h> helps ?

Tom



 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From wiggjd at sbu.ac.uk  Wed Mar  5 05:44:00 2003
From: wiggjd at sbu.ac.uk (David Wigg)
Date: Mon Dec 20 16:15:25 2004
Subject: [antlr-interest] C++ grammar - namespaces
Message-ID: <3E65FF20.9020009@sbu.ac.uk>

Thanks for loading my updated version of a C++ grammar onto 
http://www.antlr.org/grammars.

However, I only found it there by an act of serendipty. I can't 
see how to get there from http://www.antlr.org or anywhere else 
for that matter, or am I missing something?

I am still working on this grammar making significant 
improvements to bring it up to date.

In particular I hope I have now accounted for "namespaces" as 
described on pages 634-638 in the Second Edition of Bjarne 
Stroustrup's book, The C++ Programming Language, as follows,

decl_namespace   // alternative in external-declaration
     :	
         "namespace"
         (
             (ns:ID{_sc = scTYPEDEF;
                    declaratorID((ns->getText()).data());}
             )?
             LCURLY (external_declaration)* RCURLY
         |
             ASSIGNEQUAL qualified_id SEMICOLON {end_of_stmt();}
         )
     ;

using_statement   // alternative in declaration
     :
         "using"
         (
             "namespace" qualified_id  // Using-directive
         |
             qualified_id              // Using-declaration
         )
         SEMICOLON {end_of_stmt();}
     ;

However, I still have a problem about the correct type for a 
namespace. The parser works on my test data by using 
declaratorId to set it as a 'typedef' but I think it would be 
better classed as 'class' since it introduces a new scope. What 
do you think?

What type should I use Terence?

David.



 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From merrells at sleepycat.com  Wed Mar  5 07:50:53 2003
From: merrells at sleepycat.com (John Merrells)
Date: Mon Dec 20 16:15:25 2004
Subject: [antlr-interest] Re: XML/XSD parser  generators and processing
In-Reply-To: <200302241747.h1OHlxWx014920@idiom.com>
Message-ID: <3ED8721F-4F22-11D7-B436-000A95770846@sleepycat.com>


On Monday, February 24, 2003, at 09:47  AM, iank@bearcave.com wrote:

>   As someone pointed out, similar tools seem to have been built for
>   XML Document Type Descriptions (DTDs).  So far, such a tool does not
>   seem to exist for XML schemas, which represent a more powerful
>   grammar that DTDs.

I just stumbled over this. I haven't downloaded an eval,
but it sounds very much like what you're suggesting.

http://www.roguewave.com/developer/evaluations/xol/

John


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From gudnabrsam at yahoo.com  Wed Mar  5 08:16:45 2003
From: gudnabrsam at yahoo.com (Matt Benson)
Date: Mon Dec 20 16:15:25 2004
Subject: [antlr-interest] C++ grammar - namespaces
In-Reply-To: <3E65FF20.9020009@sbu.ac.uk>
Message-ID: <20030305161645.9276.qmail@web20414.mail.yahoo.com>

Hmmm... I went to the Antlr site, then went to
resources and grammars and found it immediately.

--- David Wigg <wiggjd@sbu.ac.uk> wrote:
> Thanks for loading my updated version of a C++
> grammar onto 
> http://www.antlr.org/grammars.
> 
> However, I only found it there by an act of
> serendipty. I can't 
> see how to get there from http://www.antlr.org or
> anywhere else 
> for that matter, or am I missing something?
> 
> I am still working on this grammar making
> significant 
> improvements to bring it up to date.
> 
> In particular I hope I have now accounted for
> "namespaces" as 
> described on pages 634-638 in the Second Edition of
> Bjarne 
> Stroustrup's book, The C++ Programming Language, as
> follows,
> 
> decl_namespace   // alternative in
> external-declaration
>      :	
>          "namespace"
>          (
>              (ns:ID{_sc = scTYPEDEF;
>                    
> declaratorID((ns->getText()).data());}
>              )?
>              LCURLY (external_declaration)* RCURLY
>          |
>              ASSIGNEQUAL qualified_id SEMICOLON
> {end_of_stmt();}
>          )
>      ;
> 
> using_statement   // alternative in declaration
>      :
>          "using"
>          (
>              "namespace" qualified_id  //
> Using-directive
>          |
>              qualified_id              //
> Using-declaration
>          )
>          SEMICOLON {end_of_stmt();}
>      ;
> 
> However, I still have a problem about the correct
> type for a 
> namespace. The parser works on my test data by using
> 
> declaratorId to set it as a 'typedef' but I think it
> would be 
> better classed as 'class' since it introduces a new
> scope. What 
> do you think?
> 
> What type should I use Terence?
> 
> David.
> 
> 
> 
>  
> 
> Your use of Yahoo! Groups is subject to
> http://docs.yahoo.com/info/terms/ 
> 
> 


__________________________________________________
Do you Yahoo!?
Yahoo! Tax Center - forms, calculators, tips, more
http://taxes.yahoo.com/

 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From mzukowski at yci.com  Wed Mar  5 08:48:23 2003
From: mzukowski at yci.com (mzukowski@yci.com)
Date: Mon Dec 20 16:15:25 2004
Subject: [antlr-interest] Language Refactoring??
Message-ID: <170826586F3BD511910D0200C110AAA8054021C3@memail03.bco-home.com>

See my description of translating a 4GL to Visual Basic at
www.codetransform.com/fun_with_antlr.html.  Tools like Eclipse would make it
possible to have some manual supervision of each pass if needed.  My belief
is that the transformation process is best automated and the focus should be
on the user altering either the original 4GL code, the resulting Java code,
or the translation process itself.  I'm not sure how adept a normal
programmer would be at modifying the translations, but it would be much
easier than them trying to modify the parser directly.

In general though, a translation pass is much like a refactoring.  You might
be moving variables around, factoring into other functions, etc.  But you
also do some global stuff like data flow and control flow analysis.  

My concept was to have Eclipse or something show the original code side by
side with the translated code.  If needed you could see how each step of the
translation munged the code, but more importantly you could modify a pass
and see the effect on the code you are inspecting, as well as see how it
affects your unit tests.  In fact you want two sets of tests.  Tests of the
transformation to make sure this program is transformed into this java.  And
then you need real unit tests of the old and new code to make sure they are
doing the same thing.  If you can't test it you'll never know that it is
really working....

It would be a lot of fun to have such an interactive way to develop a
translator.  

On my translation project above the best way to describe what the translator
should do was to have them give me a code fragment and then what they would
have translated it to by hand, explaining to me why.  These turn into tests
quite easily.

In fact there are plenty of refactorings which you would want to run either
before or after the translation, and it would be nice to specify them so
they would be automatic instead of manual.  Manual is for exploration,
refining the strategy.  Automatic is for consistency once the strategy is in
place.

I guess I'm calling refactoring a manual process and translation an
automatic one.

The thing is you don't know the right strategy until you are done.  You
don't want to have refactored half of your code only to discover a better
way to do it all and be faced with starting again from scratch.

My ramblometer is pegging now so I better throttle back.  I hope my
explanation is clear.

Monty

-----Original Message-----
From: yuvaraj_a_r [mailto:yuva@excite.com]
Sent: Wednesday, March 05, 2003 2:19 AM
To: antlr-interest@yahoogroups.com
Subject: [antlr-interest] Language Refactoring??


Hello,
With the idea of refactoring showing up in other areas of software - 
we have code refactoring, data refactoring etc - I was wondering if 
we can think of Language Refactoring. 

Lets take an example. Assume I have a 4GL Language X which I want to 
transform to Java. However, I face the problem that X has been 
delivered to a whole load of customers and there is a HUGE amount of 
code written in X. So, I would like to provide a sequence 
of "computer language refactoring" steps to move from language X to 
Java. This would mean that there might be an intermediate stage where 
the language is not recognizable as X or Java but is essentially a 
mixture of the two.

Question : Is such a language transformation from one programming 
language to another possible by small reversible (refactoring) steps?

However the problem does not end there. Due to the fact that X has 
survived in the market for some years, supporting libraries and 
semantic constructs peculiar to X have evolved. 

Question : How to take the whole system from X based to Java based?

In this respect, I appreciate the MS .NET strategy of a CLR 
specification. Instead of fighting the problem after it hits us, the 
CLR strategy builds such transformation possibilities directly into 
the language definition....

So, what do you think?

Regards,
yuva




 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From blade_x123 at yahoo.com  Wed Mar  5 09:00:07 2003
From: blade_x123 at yahoo.com (BLade X)
Date: Mon Dec 20 16:15:25 2004
Subject: [antlr-interest] Newbie: Multiple Inheritance Error.
Message-ID: <20030305170007.3167.qmail@web40712.mail.yahoo.com>

Hi,
 I am trying to write a directx .X file parser using
antlr.
1. I am using antlr 2.7.2 with GCC 3.x on MinGW. I am
getting multiple inheritance errors when I try to
compile the code generated by my program. I am trying
to parse the directx .X format. I seem to have been
able to trubleshoot most of the errors but this one
really has me stumped.

Here are the errors...
----------------------------------------------------------
g++ -g -o dxparse main.cpp DXLexer.cpp
DXFileParser.cpp -I/usr/
local/include -lantlr -L/usr/local/lib

DXFileParser.cpp: In member function `void
DXFileParser::file()':
DXFileParser.cpp:43: request for member `LT' is
ambiguous in multiple 
   inheritance lattice
DXFileParserTokenTypes.hpp:36: candidates are: 
   DXFileParserTokenTypes::<anonymous enum>
DXFileParserTokenTypes::LT
C:/MSYS/local/include/antlr/LLkParser.hpp:50:         
       virtual 
   antlr::RefToken antlr::LLkParser::LT(int)
DXFileParser.cpp: In member function `void
DXFileParser::statements()':
DXFileParser.cpp:130: request for member `LT' is
ambiguous in multiple 
   inheritance lattice
DXFileParserTokenTypes.hpp:36: candidates are: 
   DXFileParserTokenTypes::<anonymous enum>
DXFileParserTokenTypes::LT
C:/MSYS/local/include/antlr/LLkParser.hpp:50:         
       virtual 
   antlr::RefToken antlr::LLkParser::LT(int)
DXFileParser.cpp: In member function `void
DXFileParser::templateDef()':

...
--------------------------------------------------------

Any suggestions will be very welcome. I have attached
the dxlexer.g and dxfile.g to this e-mail in case one
needs it.

2. My second suggestion is to give the users the
ability to build and install only the cpp libraries, I
do not have jdk installed and it cannot find
javac.exe. I don't need java libraries. This is just a
suggestion.

3. In the directx format, there are these things
called templates, which are equivalent to variable
declarations. 

For example I can say
--------------------------------------------
Template DancingMonkey {
 Shake behind;
}

DancingMonkey niceMonkey;
--------------------------------------------
My question is when I am parsing I want to give an
error message if I see some template that has not been
declared before, I am not exactly sure how to do that.
Any suggestions or pointers to example where that kind
of stuff is done (preferrably C++).

Forgive my english it is 3 AM and I am currently
thinking only antlr grammar.

Thanks in advance,
Manju

__________________________________________________
Do you Yahoo!?
Yahoo! Tax Center - forms, calculators, tips, more
http://taxes.yahoo.com/
 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

-------------- next part --------------
A non-text attachment was scrubbed...
Name: dxlexer.g
Type: application/octet-stream
Size: 5456 bytes
Desc: dxlexer.g
Url : http://www.antlr.org/pipermail/antlr-interest/attachments/20030305/8b88baf9/dxlexer.obj
-------------- next part --------------
A non-text attachment was scrubbed...
Name: dxfile.g
Type: application/octet-stream
Size: 3442 bytes
Desc: dxfile.g
Url : http://www.antlr.org/pipermail/antlr-interest/attachments/20030305/8b88baf9/dxfile.obj
From klaren at cs.utwente.nl  Wed Mar  5 09:21:28 2003
From: klaren at cs.utwente.nl (Ric Klaren)
Date: Mon Dec 20 16:15:25 2004
Subject: [antlr-interest] Newbie: Multiple Inheritance Error.
In-Reply-To: <20030305170007.3167.qmail@web40712.mail.yahoo.com>; from blade_x123@yahoo.com on Wed, Mar 05, 2003 at 09:00:07AM -0800
References: <20030305170007.3167.qmail@web40712.mail.yahoo.com>
Message-ID: <20030305182128.D7046@cs.utwente.nl>

Hi,

On Wed, Mar 05, 2003 at 09:00:07AM -0800, BLade X wrote:
> DXFileParser::file()':
> DXFileParser.cpp:43: request for member `LT' is
> ambiguous in multiple
>    inheritance lattice
> DXFileParserTokenTypes.hpp:36: candidates are:
>    DXFileParserTokenTypes::<anonymous enum>
> DXFileParserTokenTypes::LT
> C:/MSYS/local/include/antlr/LLkParser.hpp:50:
>        virtual
>    antlr::RefToken antlr::LLkParser::LT(int)
> DXFileParser.cpp: In member function `void
> DXFileParser::statements()':
> DXFileParser.cpp:130: request for member `LT' is
> ambiguous in multiple
>    inheritance lattice
> DXFileParserTokenTypes.hpp:36: candidates are:
>    DXFileParserTokenTypes::<anonymous enum>
> DXFileParserTokenTypes::LT

You probably have a LT token somewhere in your lexer/parser? Rename it to
something else and it will fix this.

> 2. My second suggestion is to give the users the
> ability to build and install only the cpp libraries, I
> do not have jdk installed and it cannot find
> javac.exe. I don't need java libraries. This is just a
> suggestion.

Just run configure and a submake in the lib/cpp directory. Afterwards
install by hand. E.g. copy the lib/cpp/antlr/* to /usr/include/antlr/* and the
libantlr.a to /usr/lib.

> 3. In the directx format, there are these things
> called templates, which are equivalent to variable
> declarations.
>
> For example I can say
> --------------------------------------------
> Template DancingMonkey {
>  Shake behind;
> }
>
> DancingMonkey niceMonkey;
> --------------------------------------------
> My question is when I am parsing I want to give an
> error message if I see some template that has not been
> declared before, I am not exactly sure how to do that.
> Any suggestions or pointers to example where that kind
> of stuff is done (preferrably C++).

Track definition of a template in a set or something. And when you see a
reference to one check the set. (if there's scope like things you might
have to make something of a nested structure for correct resolving)

Very rough setup (but it should give you the general idea):

// define this in your parser as attribute. (see the C++ specific part of
// docs)
std::set<std::string> template_defs;

// then in your template definition rule
template_def: "Template" id:ID "{" ...stuff... "}"
	{
		if( ! template_defs.insert(id->getText()).second )
			throw antlr::RecognitionException("double definition of template",id->getFilename(),id->getLine(),id->getColumn());
	}
;

// rule where the template is referenced 
template_ref: id:ID
	{
		if( template_defs.find(id->getText()) == template_defs.end() )
			throw antlr::RecognitionException("Undefined template",id->getFilename(),id->getLine(),id->getColumn());
	}
;

Cheers,

Ric
--
-----+++++*****************************************************+++++++++-------
    ---- Ric Klaren ----- j.klaren@utwente.nl ----- +31 53 4893722  ----
-----+++++*****************************************************+++++++++-------
  "You know how to use that thing?" [pointing to the sword]
  "Sure.. The pointy end goes into the other guy."
  --- The Mask of Zorro


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From iank at bearcave.com  Wed Mar  5 09:36:44 2003
From: iank at bearcave.com (iank@bearcave.com)
Date: Mon Dec 20 16:15:25 2004
Subject: [antlr-interest] Re: XML/XSD parser  generators and processing
Message-ID: <200303051736.h25HaiE3046352@idiom.com>


>>   As someone pointed out, similar tools seem to have been built for
>>   XML Document Type Descriptions (DTDs).  So far, such a tool does not
>>   seem to exist for XML schemas, which represent a more powerful
>>   grammar that DTDs.
>
> I just stumbled over this. I haven't downloaded an eval,
> but it sounds very much like what you're suggesting.
>
> http://www.roguewave.com/developer/evaluations/xol/

  Thanks for posting this.  RogueWave's XML Object Link looks
  interesting.  "Object Link" is sort of an XML ANTLR, where it reads
  an XML Schema (rather than the ANTLR grammar) and generates a C++
  parser.  I'm thinking of an XML YACC - an XML schema is read and a
  state table is created which is used by a DFA to parse the XML
  described by the schema.  This allows dynamic loading of schemas
  without a compilation step, but still supports very fast parsing.

  This whole idea is kind of "high concept".  That is, concept without
  details and as we all know, the Devil is in the details.

  I wrote my original note before I had dived deeply into XML
  schemas.  I bought the book "The XML Schema Complete Reference" by
  Binstock et al which is over 900 pages of documentation on schemas.
  Schemas are far more complicated than parser generator grammars.  So
  creating a parser generator for XML schemas is a major task.

  Sometimes I wonder if parser generator issues ever occured to the
  people who designed the schemas.  For example, just as it is
  possible to create an ambiguous grammar with ANTLR, an ambiguous
  schema can be created for an XML document.  I have not seen any
  discussion on this issue (that is not say that it does not exist,
  just that I have not seen it).  Given that creating an error free
  grammar for a language like Java is a lot of work, it seems that
  schemas might be even worse, since the "grammar" is so complicated.
  I have not used validation on Xerces (or any other XML processor),
  so I don't know how they handle errors for ambiguous "grammars".

  Ian


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From parrt at jguru.com  Wed Mar  5 10:25:01 2003
From: parrt at jguru.com (Terence Parr)
Date: Mon Dec 20 16:15:25 2004
Subject: [antlr-interest] Is there a C# grammar for ANTLR ??
In-Reply-To: <CBEKLOBPPGILEDDNLKFJAEKACBAA.kim@tiede.dk>
Message-ID: <C74A5B40-4F37-11D7-ABA9-000393BB647E@jguru.com>

Hi.  I'm unaware of a C# grammar, but there the "mono" project may have 
a yacc grammar or something that you could port to ANTLR easily :)  
(especially if you use the Java grammar as a guide).

Terence

On Wednesday, March 5, 2003, at 01:47  AM, Kim Tiedemann wrote:

> Hi there,
> ?
> We are a group studying computer science at the university of Aalborg, 
> Denmark and we are considering doing a project where it would be 
> possible to?reverse engineer C# files?and show them as?an UML-diagram 
> in ArgoUML.
> ?
> So we were wondering if there already exists a C# grammar for ANTLR ??
> ?
> Best regards
> ?
> Kim Tiedemann
> ?
> "The road to wisdom? - Well, it's plain and simple to express: Err and 
> err and err again - but less and less and less."
> Piet Hein
>
> Your use of Yahoo! Groups is subject to the Yahoo! Terms of Service.
--
Co-founder, http://www.jguru.com
Creator, ANTLR Parser Generator: http://www.antlr.org
Lecturer in Comp. Sci., University of San Francisco


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From parrt at jguru.com  Wed Mar  5 10:26:57 2003
From: parrt at jguru.com (Terence Parr)
Date: Mon Dec 20 16:15:25 2004
Subject: [antlr-interest] C++ grammar - namespaces
In-Reply-To: <3E65FF20.9020009@sbu.ac.uk>
Message-ID: <0C74B456-4F38-11D7-ABA9-000393BB647E@jguru.com>


On Wednesday, March 5, 2003, at 05:44  AM, David Wigg wrote:
> In particular I hope I have now accounted for "namespaces" as
> described on pages 634-638 in the Second Edition of Bjarne
> Stroustrup's book, The C++ Programming Language, as follows,
>
> decl_namespace   // alternative in external-declaration
>      :	
>          "namespace"
>          (
>              (ns:ID{_sc = scTYPEDEF;
>                     declaratorID((ns->getText()).data());}
>              )?
>              LCURLY (external_declaration)* RCURLY
>          |
>              ASSIGNEQUAL qualified_id SEMICOLON {end_of_stmt();}
>          )
>      ;
>
> using_statement   // alternative in declaration
>      :
>          "using"
>          (
>              "namespace" qualified_id  // Using-directive
>          |
>              qualified_id              // Using-declaration
>          )
>          SEMICOLON {end_of_stmt();}
>      ;
>
> However, I still have a problem about the correct type for a
> namespace. The parser works on my test data by using
> declaratorId to set it as a 'typedef' but I think it would be
> better classed as 'class' since it introduces a new scope. What
> do you think?
>
> What type should I use Terence?

HI David,

Hmm...well, C++ is not my strong point anymore.  I think Ric can have 
something to say here.

Terence
--
Co-founder, http://www.jguru.com
Creator, ANTLR Parser Generator: http://www.antlr.org
Lecturer in Comp. Sci., University of San Francisco


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From mphartman at yahoo.com  Wed Mar  5 12:00:34 2003
From: mphartman at yahoo.com (Michael Hartman)
Date: Mon Dec 20 16:15:25 2004
Subject: [antlr-interest] help with a logical query-like expression grammar
Message-ID: <b45l12+ridj@eGroups.com>

I need a grammar to describe logical query-like expression like the
kinds you'd see in a SQL WHERE clause.  For example,

A = 1

A = 1 AND B >= 2

A = 1 AND (B <= 2)

A = 1 AND (B != 2 OR C = 3)

A = 1 AND (B = 2 AND NOT (C = 3 OR D = 4))

where A, B, C, and D would be identifiers and 1, 2, 3, and 4 would be
values (essentially quoted strings or numbers but again, just identifiers)

I don't need to evaluate these expressions but rather parse them into
an object model I have.

I can't seem to make the mental connection as to where in the parser
or lexer I make calls to my object model to create and associate
objects that represent the elements of the expression.

For example, A = 1 would translate into an instance of type Expression
with an object of type Operator representing the equals sign.  Another
Expression would represent B <= 2 and yet another would represent the
whole expression A = 1 AND B <= 2 with Operator representing the AND
and two references to the first two Expression instances.

I'm not a computer scientist and I've reviewed the ANTLR doc and
samples but it is very difficult to grasp.  

THis is what I have so far:

class FilterParser extends Parser;

startRule
    :   
    ;

class FilterLexer extends Lexer;

LPAREN:	'('
	;

RPAREN:	')'
	;

EQUALS: '='
  ;

NOTEQUALS: "!="
  ;

GT: '>'
  ;

GTE: '>='
  ;

LT: '<'
  ;

LTE: '<='
  ;

AND: "AND"
  ;

OR: "OR"
  ;

ANDNOT: "AND NOT"
  ;

ORNOT:  "OR NOT"
  ;

ID
options {
	testLiterals = true;
}
	:	('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*
	;


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From cintyram at yahoo.com  Wed Mar  5 12:23:00 2003
From: cintyram at yahoo.com (cintyram)
Date: Mon Dec 20 16:15:25 2004
Subject: [antlr-interest] programmar.com
Message-ID: <b45mb4+4s0u@eGroups.com>

hi ,
i just saw an ad of programmar.com in cuj 
and the tool seems to look good ;
i tried some VHDL examples with the grammar they gave and it is very
fast , and the tree is convenient ..
yet to figure out how to put actions etc .. or how to change the
structure of the AST;
sad part is it costs 300 bucks per person ..
cheers
ram






 


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From mzukowski at yci.com  Wed Mar  5 13:24:27 2003
From: mzukowski at yci.com (mzukowski@yci.com)
Date: Mon Dec 20 16:15:25 2004
Subject: [antlr-interest] help with a logical query-like expression gr
	ammar
Message-ID: <170826586F3BD511910D0200C110AAA8054021C9@memail03.bco-home.com>

There is an Oracle SQL grammar available from antlr.org.  Your best bet
might be to steal from it.  

In fact your examples are very much like the calculator example included in
the distribution.  I recommend starting there.

Also don't forget Ter's recent lectures at
http://www.cs.usfca.edu/~parrt/course/652/index.html

Monty

-----Original Message-----
From: Michael Hartman [mailto:mphartman@yahoo.com]
Sent: Wednesday, March 05, 2003 12:01 PM
To: antlr-interest@yahoogroups.com
Subject: [antlr-interest] help with a logical query-like expression
grammar


I need a grammar to describe logical query-like expression like the
kinds you'd see in a SQL WHERE clause.  For example,

A = 1

A = 1 AND B >= 2

A = 1 AND (B <= 2)

A = 1 AND (B != 2 OR C = 3)

A = 1 AND (B = 2 AND NOT (C = 3 OR D = 4))

where A, B, C, and D would be identifiers and 1, 2, 3, and 4 would be
values (essentially quoted strings or numbers but again, just identifiers)

I don't need to evaluate these expressions but rather parse them into
an object model I have.

I can't seem to make the mental connection as to where in the parser
or lexer I make calls to my object model to create and associate
objects that represent the elements of the expression.

For example, A = 1 would translate into an instance of type Expression
with an object of type Operator representing the equals sign.  Another
Expression would represent B <= 2 and yet another would represent the
whole expression A = 1 AND B <= 2 with Operator representing the AND
and two references to the first two Expression instances.

I'm not a computer scientist and I've reviewed the ANTLR doc and
samples but it is very difficult to grasp.  

THis is what I have so far:

class FilterParser extends Parser;

startRule
    :   
    ;

class FilterLexer extends Lexer;

LPAREN:	'('
	;

RPAREN:	')'
	;

EQUALS: '='
  ;

NOTEQUALS: "!="
  ;

GT: '>'
  ;

GTE: '>='
  ;

LT: '<'
  ;

LTE: '<='
  ;

AND: "AND"
  ;

OR: "OR"
  ;

ANDNOT: "AND NOT"
  ;

ORNOT:  "OR NOT"
  ;

ID
options {
	testLiterals = true;
}
	:	('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*
	;


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From brian-l-smith at uiowa.edu  Wed Mar  5 15:33:36 2003
From: brian-l-smith at uiowa.edu (Brian Smith)
Date: Mon Dec 20 16:15:25 2004
Subject: [antlr-interest] help with a logical query-like expression grammar
In-Reply-To: <b45l12+ridj@eGroups.com>
References: <b45l12+ridj@eGroups.com>
Message-ID: <3E668950.90204@uiowa.edu>

Please see the attached example. It is the beginning of an 
ANTLR/Java-based parser for grammars defined in the standard IEEE BNF 
notation. It parses the BNF expressions into an abstract syntax tree 
defined by a class hierarchy. It is by no means complete but it is a 
small and simple example. This example isn't exactly what you asked for 
but I think it might help. Let me know if you have any questions.

I have included the object model as well. The classes are actually 
defined in a programming language called Nice (nice.sf.net). Nice is is 
its own programming language, but it runs on the JVM. You can think of 
it also as Java with multiple dispatch (ala MultiJava, Cecil, CLOS), 
parametric polymorphism, closures, funtions, and other extra features. 
it is designed to be similar and compatible with Java, so it should be 
simple enough to figure out what it does by reading it (in particular, 
read bnf.g and ast.nice).

- Brian


Michael Hartman wrote:
> I need a grammar to describe logical query-like expression like the
> kinds you'd see in a SQL WHERE clause.  For example,
> 
> A = 1
> 
> A = 1 AND B >= 2
> 
> A = 1 AND (B <= 2)
> 
> A = 1 AND (B != 2 OR C = 3)
> 
> A = 1 AND (B = 2 AND NOT (C = 3 OR D = 4))
> 
> where A, B, C, and D would be identifiers and 1, 2, 3, and 4 would be
> values (essentially quoted strings or numbers but again, just identifiers)
> 
> I don't need to evaluate these expressions but rather parse them into
> an object model I have.
> 
> I can't seem to make the mental connection as to where in the parser
> or lexer I make calls to my object model to create and associate
> objects that represent the elements of the expression.
> 
> For example, A = 1 would translate into an instance of type Expression
> with an object of type Operator representing the equals sign.  Another
> Expression would represent B <= 2 and yet another would represent the
> whole expression A = 1 AND B <= 2 with Operator representing the AND
> and two references to the first two Expression instances.
> 
> I'm not a computer scientist and I've reviewed the ANTLR doc and
> samples but it is very difficult to grasp.  
> 
> THis is what I have so far:
> 
> class FilterParser extends Parser;
> 
> startRule
>     :   
>     ;
> 
> class FilterLexer extends Lexer;
> 
> LPAREN:	'('
> 	;
> 
> RPAREN:	')'
> 	;
> 
> EQUALS: '='
>   ;
> 
> NOTEQUALS: "!="
>   ;
> 
> GT: '>'
>   ;
> 
> GTE: '>='
>   ;
> 
> LT: '<'
>   ;
> 
> LTE: '<='
>   ;
> 
> AND: "AND"
>   ;
> 
> OR: "OR"
>   ;
> 
> ANDNOT: "AND NOT"
>   ;
> 
> ORNOT:  "OR NOT"
>   ;
> 
> ID
> options {
> 	testLiterals = true;
> }
> 	:	('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*
> 	;
> 
> 
>  
> 
> Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 
> 

 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

-------------- next part --------------
package org.brianlsmith.bnf.parser;

import org.brianlsmith.bnf.*;
import java.io.*;

public class ParserTest {
    public static void main(String [] args) throws FileNotFoundException, IOException,
            antlr.ANTLRException {
        FileInputStream fis = new FileInputStream(args[0]);
        try {
            BnfLexer lexer = new BnfLexer(fis);
            BnfParser parser = new BnfParser(lexer, true);
            java.util.List rules = parser.grammar();
            for (java.util.Iterator i = rules.iterator(); i.hasNext(); ) {
                Rule r = (Rule) i.next();
                System.out.println(org.brianlsmith.bnf.dispatch.prettyprintRule(r));
            }
        } finally {
            fis.close();
        }
    }
}
-------------- next part --------------
header {
    package org.brianlsmith.bnf.parser;
    import org.brianlsmith.bnf.*;
}

class BnfParser extends Parser;

{
    public BnfParser(TokenStream lexer, boolean mustBeTrue) {
        this(filterLexer(lexer));
        tokenNames[BnfParserTokenTypes.EOF] = "end of file";
    }

    private static TokenStream filterLexer(TokenStream lexer) {
        final antlr.TokenStreamBasicFilter filter = new antlr.TokenStreamBasicFilter(lexer);
        filter.discard(BnfParserTokenTypes.WS);
        return filter;
    }

    private static final EpsilonExp epsilon = new EpsilonExp();
}

grammar     returns [java.util.List l = new java.util.ArrayList();]
            { Production r; }
            : ( r=rule  { l.add(r); } )+
            ;

rule        returns [Production r = null]
            : n:NAME EQUALS { Exp e; } e=exp SEMI { r = new Production(n.getText(), e); }
            ;

exp         returns [Exp e = null]
            : e=concatExp  ( { Exp tl; } OR tl=exp    { e = new ChoiceExp(e, tl); } )?
            ;

concatExp   returns [Exp e = null]
            : e=groupedExp ( { Exp tl; } tl=concatExp { e = new ConcatExp(e, tl); } )?
            ;

groupedExp  returns [Exp e = null]
            : LBRACKET e=exp RBRACKET   { e = new OptionalExp(e); }
            | LBRACE e=exp   RBRACE     { e = new RepeatedExp(e); }
            | LPAREN e=exp   RPAREN
            | n:NAME                    { e = new RefExp(n.getText());    }
            | EPSILON                   { e = epsilon;       }
            | s:STRING                  { e = new StringExp(s.getText()); }
            ;


class BnfLexer extends Lexer;
options {
    charVocabulary = '\u0000'..'\uFFFE';
}

protected LETTER : ('a'..'z' | 'A'..'Z');
NAME             : (LETTER)+;

EPSILON options { paraphrase="'#'"  ; } : '#';

LBRACE        options { paraphrase="'{'";  }  : '{';
RBRACE        options { paraphrase="'}'";  }  : '}';
LPAREN        options { paraphrase="'('";  }  : '(';
RPAREN        options { paraphrase="')'";  }  : ')';
LBRACKET      options { paraphrase="'['";  }  : '[';
RBRACKET      options { paraphrase="']'";  }  : ']';
EQUALS        options { paraphrase="'='";  }  : '=';
SEMI          options { paraphrase="';'";  }  : ';';
OR            options { paraphrase="'|'";  }  : '|';

WS          options { paraphrase="whitespace"; }
    :   ( ' ' | '\t' | '\f'
        | ( '\n' (options {greedy=true;} : '\r')?
          | '\r' (options {greedy=true;} : '\n')?
          ) { newline(); }
        )+
        ;

// This is taken directly from the OCL 1.4 specification.
// The bad thing is that it should be using Unicode (and decimal or hex) escapes!!
// difficult syntax to understand: "\12345" -> "\123" "45", "\67890" -> "\67" "890"
// Thus the reason for use of the greedy option.
STRING options { paraphrase="a string literal"; }
    :      '"' ( QUOTED_CHARACTER | '\'' )* '"'
    ;

// Note that QUOTED-CHARACTER doesn't allow single OR double quotes.
protected QUOTED_CHARACTER
                   : (~( '\'' | '"' | '\r'  | '\n' | '\\' ))
             | '\\' ( ( '\'' | '"' | 'n' |  'r'  | 't'  |  'b' |  'f' | '\\' )
                | OCTAL_DIGIT
                  (options {greedy=true;} : OCTAL_DIGIT)?
                  (options {greedy=true;} : OCTAL_DIGIT)?
                )
                   ;

protected OCTAL_DIGIT: '0'..'7'
        ;
-------------- next part --------------
package org.brianlsmith.bnf;

public class Grammar {
    final HashMap<String, Production> productions;
}

public class Production {
    final String name;
    final Exp    definition;
}

public abstract class Exp  { }
public abstract class AtomicExp extends Exp { }

public abstract class ExpContainer extends Exp {
    final Exp fst;
    final Exp snd;
}

public abstract class ExpWrapper extends Exp {
    final Exp exp;
}

public class StringExp extends AtomicExp {
    final String text;
}

public class ConcatExp extends ExpContainer { }
public class ChoiceExp extends ExpContainer { }

public class RefExp extends AtomicExp{
    final String ruleName;
}

public class OptionalExp extends ExpWrapper {
}

public class RepeatedExp extends ExpWrapper {
}

public class EpsilonExp extends AtomicExp { }

-------------- next part --------------
package org.brianlsmith.bnf;

String paren(Exp container, Exp e) =
    precedence(container) > precedence(e)
        ? "( " + prettyprint(e) + " )"
        : prettyprint(e)
        ;

String prettyprint(Exp e);

prettyprint(s@StringExp)  = s.text;
prettyprint(s@RefExp)     = s.ruleName;
prettyprint(s@EpsilonExp) = "\u1d75";
prettyprint(c@ChoiceExp)  = prettyInfix(c, " | ");
prettyprint(c@ConcatExp)  = prettyInfix(c, " ");
prettyprint(c@OptionalExp)= "[ " + prettyprint(exp(c)) + " ]";
prettyprint(c@RepeatedExp)= "{ " + prettyprint(exp(c)) + " }";

String prettyprintProduction(Production r);
prettyprintProduction(r) {
    String prefix = name(r) + " = ";
    return prefixedChoice(definition(r), prefix) + '\n'
        + spaces(prefix.length() - 2) + ";\n";
}

String toString(StringBuffer s) = native String StringBuffer.toString();

String prefixedChoice(Exp e, String prefix);
prefixedChoice(e, prefix) = prefix + prettyprint(e);
prefixedChoice(e@ChoiceExp, prefix) {
    return prefixedChoice(fst(e), prefix) + '\n'
         + prefixedChoice(snd(e), spaces(prefix.length() - 2) + "| ");
}

private String prettyInfix(ExpContainer c, String op) {
    return paren(c, fst(c)) + op + paren(c, snd(c));
}
    
String spaces(int n) {
    StringBuffer sb = new StringBuffer(n);
    for (int i = 0; i < n; ++i) sb.append(' ');
    return sb.toString();
}
-------------- next part --------------
package org.brianlsmith.bnf;

int precedence(Exp e);

precedence(s@AtomicExp)     = 100;
precedence(r@ExpWrapper)    = 100;
precedence(c@ConcatExp)     = 50;
precedence(c@ChoiceExp)     = 25;


From mphartman at yahoo.com  Wed Mar  5 15:50:59 2003
From: mphartman at yahoo.com (Michael Hartman)
Date: Mon Dec 20 16:15:25 2004
Subject: [antlr-interest] Re: help with a logical query-like expression grammar
In-Reply-To: <3E668950.90204@uiowa.edu>
Message-ID: <b462h3+cp3p@eGroups.com>

Thanks.

I'm afraid that this a bit more than I need though.  Plus, I'm new to
ANTLR and language recognition so this is fairly difficult for me grasp.

This is what I have so far.  Stripped down from what I originally posted.

class FilterParser extends Parser;

options {
  k=4;
}

expr
	:	mexpr ((AND|OR) mexpr)*
	;

mexpr
	:	atom ((EG|GT|LT) atom)+
	;

atom
  :	ID
  | LPAREN expr RPAREN
	;

class FilterLexer extends Lexer;

WS	:	(' '
	|	'\t'
	|	'\n'
	|	'\r')
		{ _ttype = Token.SKIP; }
	;

LPAREN:	'('
	;

RPAREN:	')'
	;

AND:	"AND"
	;

OR: "OR"
	;

GT: '>'
  ;

LT: '<'
  ;

EG: '='
  ;

ID
  : ('a'..'z'|'A'..'Z'|'_'|'0'..'9')+
  ;


--- In antlr-interest@yahoogroups.com, Brian Smith
<brian-l-smith@u...> wrote:
> Please see the attached example. It is the beginning of an 
> ANTLR/Java-based parser for grammars defined in the standard IEEE BNF 
> notation. It parses the BNF expressions into an abstract syntax tree 
> defined by a class hierarchy. It is by no means complete but it is a 
> small and simple example. This example isn't exactly what you asked for 
> but I think it might help. Let me know if you have any questions.
> 
> I have included the object model as well. The classes are actually 
> defined in a programming language called Nice (nice.sf.net). Nice is is 
> its own programming language, but it runs on the JVM. You can think of 
> it also as Java with multiple dispatch (ala MultiJava, Cecil, CLOS), 
> parametric polymorphism, closures, funtions, and other extra features. 
> it is designed to be similar and compatible with Java, so it should be 
> simple enough to figure out what it does by reading it (in particular, 
> read bnf.g and ast.nice).
> 
> - Brian
> 
> 
> Michael Hartman wrote:
> > I need a grammar to describe logical query-like expression like the
> > kinds you'd see in a SQL WHERE clause.  For example,
> > 
> > A = 1
> > 
> > A = 1 AND B >= 2
> > 
> > A = 1 AND (B <= 2)
> > 
> > A = 1 AND (B != 2 OR C = 3)
> > 
> > A = 1 AND (B = 2 AND NOT (C = 3 OR D = 4))
> > 
> > where A, B, C, and D would be identifiers and 1, 2, 3, and 4 would be
> > values (essentially quoted strings or numbers but again, just
identifiers)
> > 
> > I don't need to evaluate these expressions but rather parse them into
> > an object model I have.
> > 
> > I can't seem to make the mental connection as to where in the parser
> > or lexer I make calls to my object model to create and associate
> > objects that represent the elements of the expression.
> > 
> > For example, A = 1 would translate into an instance of type Expression
> > with an object of type Operator representing the equals sign.  Another
> > Expression would represent B <= 2 and yet another would represent the
> > whole expression A = 1 AND B <= 2 with Operator representing the AND
> > and two references to the first two Expression instances.
> > 
> > I'm not a computer scientist and I've reviewed the ANTLR doc and
> > samples but it is very difficult to grasp.  
> > 
> > THis is what I have so far:
> > 
> > class FilterParser extends Parser;
> > 
> > startRule
> >     :   
> >     ;
> > 
> > class FilterLexer extends Lexer;
> > 
> > LPAREN:	'('
> > 	;
> > 
> > RPAREN:	')'
> > 	;
> > 
> > EQUALS: '='
> >   ;
> > 
> > NOTEQUALS: "!="
> >   ;
> > 
> > GT: '>'
> >   ;
> > 
> > GTE: '>='
> >   ;
> > 
> > LT: '<'
> >   ;
> > 
> > LTE: '<='
> >   ;
> > 
> > AND: "AND"
> >   ;
> > 
> > OR: "OR"
> >   ;
> > 
> > ANDNOT: "AND NOT"
> >   ;
> > 
> > ORNOT:  "OR NOT"
> >   ;
> > 
> > ID
> > options {
> > 	testLiterals = true;
> > }
> > 	:	('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*
> > 	;
> > 
> > 
> >  
> > 
> > Your use of Yahoo! Groups is subject to
http://docs.yahoo.com/info/terms/ 
> > 
> 
> package org.brianlsmith.bnf.parser;
> 
> import org.brianlsmith.bnf.*;
> import java.io.*;
> 
> public class ParserTest {
>     public static void main(String [] args) throws
FileNotFoundException, IOException,
>             antlr.ANTLRException {
>         FileInputStream fis = new FileInputStream(args[0]);
>         try {
>             BnfLexer lexer = new BnfLexer(fis);
>             BnfParser parser = new BnfParser(lexer, true);
>             java.util.List rules = parser.grammar();
>             for (java.util.Iterator i = rules.iterator();
i.hasNext(); ) {
>                 Rule r = (Rule) i.next();
>                
System.out.println(org.brianlsmith.bnf.dispatch.prettyprintRule(r));
>             }
>         } finally {
>             fis.close();
>         }
>     }
> }
> 
> header {
>     package org.brianlsmith.bnf.parser;
>     import org.brianlsmith.bnf.*;
> }
> 
> class BnfParser extends Parser;
> 
> {
>     public BnfParser(TokenStream lexer, boolean mustBeTrue) {
>         this(filterLexer(lexer));
>         tokenNames[BnfParserTokenTypes.EOF] = "end of file";
>     }
> 
>     private static TokenStream filterLexer(TokenStream lexer) {
>         final antlr.TokenStreamBasicFilter filter = new
antlr.TokenStreamBasicFilter(lexer);
>         filter.discard(BnfParserTokenTypes.WS);
>         return filter;
>     }
> 
>     private static final EpsilonExp epsilon = new EpsilonExp();
> }
> 
> grammar     returns [java.util.List l = new java.util.ArrayList();]
>             { Production r; }
>             : ( r=rule  { l.add(r); } )+
>             ;
> 
> rule        returns [Production r = null]
>             : n:NAME EQUALS { Exp e; } e=exp SEMI { r = new
Production(n.getText(), e); }
>             ;
> 
> exp         returns [Exp e = null]
>             : e=concatExp  ( { Exp tl; } OR tl=exp    { e = new
ChoiceExp(e, tl); } )?
>             ;
> 
> concatExp   returns [Exp e = null]
>             : e=groupedExp ( { Exp tl; } tl=concatExp { e = new
ConcatExp(e, tl); } )?
>             ;
> 
> groupedExp  returns [Exp e = null]
>             : LBRACKET e=exp RBRACKET   { e = new OptionalExp(e); }
>             | LBRACE e=exp   RBRACE     { e = new RepeatedExp(e); }
>             | LPAREN e=exp   RPAREN
>             | n:NAME                    { e = new
RefExp(n.getText());    }
>             | EPSILON                   { e = epsilon;       }
>             | s:STRING                  { e = new
StringExp(s.getText()); }
>             ;
> 
> 
> class BnfLexer extends Lexer;
> options {
>     charVocabulary = '\u0000'..'\uFFFE';
> }
> 
> protected LETTER : ('a'..'z' | 'A'..'Z');
> NAME             : (LETTER)+;
> 
> EPSILON options { paraphrase="'#'"  ; } : '#';
> 
> LBRACE        options { paraphrase="'{'";  }  : '{';
> RBRACE        options { paraphrase="'}'";  }  : '}';
> LPAREN        options { paraphrase="'('";  }  : '(';
> RPAREN        options { paraphrase="')'";  }  : ')';
> LBRACKET      options { paraphrase="'['";  }  : '[';
> RBRACKET      options { paraphrase="']'";  }  : ']';
> EQUALS        options { paraphrase="'='";  }  : '=';
> SEMI          options { paraphrase="';'";  }  : ';';
> OR            options { paraphrase="'|'";  }  : '|';
> 
> WS          options { paraphrase="whitespace"; }
>     :   ( ' ' | '\t' | '\f'
>         | ( '\n' (options {greedy=true;} : '\r')?
>           | '\r' (options {greedy=true;} : '\n')?
>           ) { newline(); }
>         )+
>         ;
> 
> // This is taken directly from the OCL 1.4 specification.
> // The bad thing is that it should be using Unicode (and decimal or
hex) escapes!!
> // difficult syntax to understand: "\12345" -> "\123" "45", "\67890"
-> "\67" "890"
> // Thus the reason for use of the greedy option.
> STRING options { paraphrase="a string literal"; }
>     :      '"' ( QUOTED_CHARACTER | '\'' )* '"'
>     ;
> 
> // Note that QUOTED-CHARACTER doesn't allow single OR double quotes.
> protected QUOTED_CHARACTER
>                    : (~( '\'' | '"' | '\r'  | '\n' | '\\' ))
>              | '\\' ( ( '\'' | '"' | 'n' |  'r'  | 't'  |  'b' | 
'f' | '\\' )
>                 | OCTAL_DIGIT
>                   (options {greedy=true;} : OCTAL_DIGIT)?
>                   (options {greedy=true;} : OCTAL_DIGIT)?
>                 )
>                    ;
> 
> protected OCTAL_DIGIT: '0'..'7'
>         ;
> 
> package org.brianlsmith.bnf;
> 
> public class Grammar {
>     final HashMap<String, Production> productions;
> }
> 
> public class Production {
>     final String name;
>     final Exp    definition;
> }
> 
> public abstract class Exp  { }
> public abstract class AtomicExp extends Exp { }
> 
> public abstract class ExpContainer extends Exp {
>     final Exp fst;
>     final Exp snd;
> }
> 
> public abstract class ExpWrapper extends Exp {
>     final Exp exp;
> }
> 
> public class StringExp extends AtomicExp {
>     final String text;
> }
> 
> public class ConcatExp extends ExpContainer { }
> public class ChoiceExp extends ExpContainer { }
> 
> public class RefExp extends AtomicExp{
>     final String ruleName;
> }
> 
> public class OptionalExp extends ExpWrapper {
> }
> 
> public class RepeatedExp extends ExpWrapper {
> }
> 
> public class EpsilonExp extends AtomicExp { }
> 
> 
> package org.brianlsmith.bnf;
> 
> String paren(Exp container, Exp e) =
>     precedence(container) > precedence(e)
>         ? "( " + prettyprint(e) + " )"
>         : prettyprint(e)
>         ;
> 
> String prettyprint(Exp e);
> 
> prettyprint(s@StringExp)  = s.text;
> prettyprint(s@RefExp)     = s.ruleName;
> prettyprint(s@EpsilonExp) = "\u1d75";
> prettyprint(c@ChoiceExp)  = prettyInfix(c, " | ");
> prettyprint(c@ConcatExp)  = prettyInfix(c, " ");
> prettyprint(c@OptionalExp)= "[ " + prettyprint(exp(c)) + " ]";
> prettyprint(c@RepeatedExp)= "{ " + prettyprint(exp(c)) + " }";
> 
> String prettyprintProduction(Production r);
> prettyprintProduction(r) {
>     String prefix = name(r) + " = ";
>     return prefixedChoice(definition(r), prefix) + '\n'
>         + spaces(prefix.length() - 2) + ";\n";
> }
> 
> String toString(StringBuffer s) = native String StringBuffer.toString();
> 
> String prefixedChoice(Exp e, String prefix);
> prefixedChoice(e, prefix) = prefix + prettyprint(e);
> prefixedChoice(e@ChoiceExp, prefix) {
>     return prefixedChoice(fst(e), prefix) + '\n'
>          + prefixedChoice(snd(e), spaces(prefix.length() - 2) + "| ");
> }
> 
> private String prettyInfix(ExpContainer c, String op) {
>     return paren(c, fst(c)) + op + paren(c, snd(c));
> }
>     
> String spaces(int n) {
>     StringBuffer sb = new StringBuffer(n);
>     for (int i = 0; i < n; ++i) sb.append(' ');
>     return sb.toString();
> }
> 
> package org.brianlsmith.bnf;
> 
> int precedence(Exp e);
> 
> precedence(s@AtomicExp)     = 100;
> precedence(r@ExpWrapper)    = 100;
> precedence(c@ConcatExp)     = 50;
> precedence(c@ChoiceExp)     = 25;


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From brian-l-smith at uiowa.edu  Wed Mar  5 16:01:43 2003
From: brian-l-smith at uiowa.edu (Brian Smith)
Date: Mon Dec 20 16:15:25 2004
Subject: [antlr-interest] Re: help with a logical query-like expression
 grammar
In-Reply-To: <b462h3+cp3p@eGroups.com>
References: <b462h3+cp3p@eGroups.com>
Message-ID: <3E668FE7.5010908@uiowa.edu>

Well, try something like this fragment (untested). The idea is that each 
rule will return an instance of a class in your already-defined class 
hierarchy. So, the start rule (the entry point into the grammar) will 
return an object that represents the entire parsed input.

expr	returns [Expr result = null]
	{	Expr rhs = null; }
	:	result=mexpr (AND rhs=expr { result = new Operator(
                                              Operator.AND,
                                              result, rhs); }
                              |OR  rhs=expr { result = new Operator(
                                              Operator.OR,
                                              result, rhs); }
                              )*
	;

mexpr returns [Expr result = null]
	{ Expr rhs = null; }
	:	result=atom (EG rhs=atom { result = new Operator(
                                                Operator.EG,
                                                result, rhs); }
                             |GT rhs=atom { result = new Operator(
                                                Operator.GT,
                                                result, rhs); }
                             |LT rhs=atom { result = new Operator(
                                                Operator.LT,
                                                result, rhs); }
                             )
	;

atom returns [Expr result = null]
	: id:ID       { result = new Variable(id.getText()); }
         | LPAREN result=expr RPAREN
	;



Michael Hartman wrote:
> Thanks.
> 
> I'm afraid that this a bit more than I need though.  Plus, I'm new to
> ANTLR and language recognition so this is fairly difficult for me grasp.
> 
> This is what I have so far.  Stripped down from what I originally posted.
> 
> class FilterParser extends Parser;
> 
> options {
>   k=4;
> }
> 
> expr
> 	:	mexpr ((AND|OR) mexpr)*
> 	;
> 
> mexpr
> 	:	atom ((EG|GT|LT) atom)+
> 	;
> 
> atom
>   :	ID
>   | LPAREN expr RPAREN
> 	;
> 
> class FilterLexer extends Lexer;
> 
> WS	:	(' '
> 	|	'\t'
> 	|	'\n'
> 	|	'\r')
> 		{ _ttype = Token.SKIP; }
> 	;
> 
> LPAREN:	'('
> 	;
> 
> RPAREN:	')'
> 	;
> 
> AND:	"AND"
> 	;
> 
> OR: "OR"
> 	;
> 
> GT: '>'
>   ;
> 
> LT: '<'
>   ;
> 
> EG: '='
>   ;
> 
> ID
>   : ('a'..'z'|'A'..'Z'|'_'|'0'..'9')+
>   ;
> 
> 
> --- In antlr-interest@yahoogroups.com, Brian Smith
> <brian-l-smith@u...> wrote:
> 
>>Please see the attached example. It is the beginning of an 
>>ANTLR/Java-based parser for grammars defined in the standard IEEE BNF 
>>notation. It parses the BNF expressions into an abstract syntax tree 
>>defined by a class hierarchy. It is by no means complete but it is a 
>>small and simple example. This example isn't exactly what you asked for 
>>but I think it might help. Let me know if you have any questions.
>>
>>I have included the object model as well. The classes are actually 
>>defined in a programming language called Nice (nice.sf.net). Nice is is 
>>its own programming language, but it runs on the JVM. You can think of 
>>it also as Java with multiple dispatch (ala MultiJava, Cecil, CLOS), 
>>parametric polymorphism, closures, funtions, and other extra features. 
>>it is designed to be similar and compatible with Java, so it should be 
>>simple enough to figure out what it does by reading it (in particular, 
>>read bnf.g and ast.nice).
>>
>>- Brian
>>
>>
>>Michael Hartman wrote:
>>
>>>I need a grammar to describe logical query-like expression like the
>>>kinds you'd see in a SQL WHERE clause.  For example,
>>>
>>>A = 1
>>>
>>>A = 1 AND B >= 2
>>>
>>>A = 1 AND (B <= 2)
>>>
>>>A = 1 AND (B != 2 OR C = 3)
>>>
>>>A = 1 AND (B = 2 AND NOT (C = 3 OR D = 4))
>>>
>>>where A, B, C, and D would be identifiers and 1, 2, 3, and 4 would be
>>>values (essentially quoted strings or numbers but again, just
> 
> identifiers)
> 
>>>I don't need to evaluate these expressions but rather parse them into
>>>an object model I have.
>>>
>>>I can't seem to make the mental connection as to where in the parser
>>>or lexer I make calls to my object model to create and associate
>>>objects that represent the elements of the expression.
>>>
>>>For example, A = 1 would translate into an instance of type Expression
>>>with an object of type Operator representing the equals sign.  Another
>>>Expression would represent B <= 2 and yet another would represent the
>>>whole expression A = 1 AND B <= 2 with Operator representing the AND
>>>and two references to the first two Expression instances.
>>>
>>>I'm not a computer scientist and I've reviewed the ANTLR doc and
>>>samples but it is very difficult to grasp.  
>>>
>>>THis is what I have so far:
>>>
>>>class FilterParser extends Parser;
>>>
>>>startRule
>>>    :   
>>>    ;
>>>
>>>class FilterLexer extends Lexer;
>>>
>>>LPAREN:	'('
>>>	;
>>>
>>>RPAREN:	')'
>>>	;
>>>
>>>EQUALS: '='
>>>  ;
>>>
>>>NOTEQUALS: "!="
>>>  ;
>>>
>>>GT: '>'
>>>  ;
>>>
>>>GTE: '>='
>>>  ;
>>>
>>>LT: '<'
>>>  ;
>>>
>>>LTE: '<='
>>>  ;
>>>
>>>AND: "AND"
>>>  ;
>>>
>>>OR: "OR"
>>>  ;
>>>
>>>ANDNOT: "AND NOT"
>>>  ;
>>>
>>>ORNOT:  "OR NOT"
>>>  ;
>>>
>>>ID
>>>options {
>>>	testLiterals = true;
>>>}
>>>	:	('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*
>>>	;
>>>
>>>
>>> 
>>>
>>>Your use of Yahoo! Groups is subject to
> 
> http://docs.yahoo.com/info/terms/ 
> 
>>package org.brianlsmith.bnf.parser;
>>
>>import org.brianlsmith.bnf.*;
>>import java.io.*;
>>
>>public class ParserTest {
>>    public static void main(String [] args) throws
> 
> FileNotFoundException, IOException,
> 
>>            antlr.ANTLRException {
>>        FileInputStream fis = new FileInputStream(args[0]);
>>        try {
>>            BnfLexer lexer = new BnfLexer(fis);
>>            BnfParser parser = new BnfParser(lexer, true);
>>            java.util.List rules = parser.grammar();
>>            for (java.util.Iterator i = rules.iterator();
> 
> i.hasNext(); ) {
> 
>>                Rule r = (Rule) i.next();
>>               
> 
> System.out.println(org.brianlsmith.bnf.dispatch.prettyprintRule(r));
> 
>>            }
>>        } finally {
>>            fis.close();
>>        }
>>    }
>>}
>>
>>header {
>>    package org.brianlsmith.bnf.parser;
>>    import org.brianlsmith.bnf.*;
>>}
>>
>>class BnfParser extends Parser;
>>
>>{
>>    public BnfParser(TokenStream lexer, boolean mustBeTrue) {
>>        this(filterLexer(lexer));
>>        tokenNames[BnfParserTokenTypes.EOF] = "end of file";
>>    }
>>
>>    private static TokenStream filterLexer(TokenStream lexer) {
>>        final antlr.TokenStreamBasicFilter filter = new
> 
> antlr.TokenStreamBasicFilter(lexer);
> 
>>        filter.discard(BnfParserTokenTypes.WS);
>>        return filter;
>>    }
>>
>>    private static final EpsilonExp epsilon = new EpsilonExp();
>>}
>>
>>grammar     returns [java.util.List l = new java.util.ArrayList();]
>>            { Production r; }
>>            : ( r=rule  { l.add(r); } )+
>>            ;
>>
>>rule        returns [Production r = null]
>>            : n:NAME EQUALS { Exp e; } e=exp SEMI { r = new
> 
> Production(n.getText(), e); }
> 
>>            ;
>>
>>exp         returns [Exp e = null]
>>            : e=concatExp  ( { Exp tl; } OR tl=exp    { e = new
> 
> ChoiceExp(e, tl); } )?
> 
>>            ;
>>
>>concatExp   returns [Exp e = null]
>>            : e=groupedExp ( { Exp tl; } tl=concatExp { e = new
> 
> ConcatExp(e, tl); } )?
> 
>>            ;
>>
>>groupedExp  returns [Exp e = null]
>>            : LBRACKET e=exp RBRACKET   { e = new OptionalExp(e); }
>>            | LBRACE e=exp   RBRACE     { e = new RepeatedExp(e); }
>>            | LPAREN e=exp   RPAREN
>>            | n:NAME                    { e = new
> 
> RefExp(n.getText());    }
> 
>>            | EPSILON                   { e = epsilon;       }
>>            | s:STRING                  { e = new
> 
> StringExp(s.getText()); }
> 
>>            ;
>>
>>
>>class BnfLexer extends Lexer;
>>options {
>>    charVocabulary = '\u0000'..'\uFFFE';
>>}
>>
>>protected LETTER : ('a'..'z' | 'A'..'Z');
>>NAME             : (LETTER)+;
>>
>>EPSILON options { paraphrase="'#'"  ; } : '#';
>>
>>LBRACE        options { paraphrase="'{'";  }  : '{';
>>RBRACE        options { paraphrase="'}'";  }  : '}';
>>LPAREN        options { paraphrase="'('";  }  : '(';
>>RPAREN        options { paraphrase="')'";  }  : ')';
>>LBRACKET      options { paraphrase="'['";  }  : '[';
>>RBRACKET      options { paraphrase="']'";  }  : ']';
>>EQUALS        options { paraphrase="'='";  }  : '=';
>>SEMI          options { paraphrase="';'";  }  : ';';
>>OR            options { paraphrase="'|'";  }  : '|';
>>
>>WS          options { paraphrase="whitespace"; }
>>    :   ( ' ' | '\t' | '\f'
>>        | ( '\n' (options {greedy=true;} : '\r')?
>>          | '\r' (options {greedy=true;} : '\n')?
>>          ) { newline(); }
>>        )+
>>        ;
>>
>>// This is taken directly from the OCL 1.4 specification.
>>// The bad thing is that it should be using Unicode (and decimal or
> 
> hex) escapes!!
> 
>>// difficult syntax to understand: "\12345" -> "\123" "45", "\67890"
> 
> -> "\67" "890"
> 
>>// Thus the reason for use of the greedy option.
>>STRING options { paraphrase="a string literal"; }
>>    :      '"' ( QUOTED_CHARACTER | '\'' )* '"'
>>    ;
>>
>>// Note that QUOTED-CHARACTER doesn't allow single OR double quotes.
>>protected QUOTED_CHARACTER
>>                   : (~( '\'' | '"' | '\r'  | '\n' | '\\' ))
>>             | '\\' ( ( '\'' | '"' | 'n' |  'r'  | 't'  |  'b' | 
> 
> 'f' | '\\' )
> 
>>                | OCTAL_DIGIT
>>                  (options {greedy=true;} : OCTAL_DIGIT)?
>>                  (options {greedy=true;} : OCTAL_DIGIT)?
>>                )
>>                   ;
>>
>>protected OCTAL_DIGIT: '0'..'7'
>>        ;
>>
>>package org.brianlsmith.bnf;
>>
>>public class Grammar {
>>    final HashMap<String, Production> productions;
>>}
>>
>>public class Production {
>>    final String name;
>>    final Exp    definition;
>>}
>>
>>public abstract class Exp  { }
>>public abstract class AtomicExp extends Exp { }
>>
>>public abstract class ExpContainer extends Exp {
>>    final Exp fst;
>>    final Exp snd;
>>}
>>
>>public abstract class ExpWrapper extends Exp {
>>    final Exp exp;
>>}
>>
>>public class StringExp extends AtomicExp {
>>    final String text;
>>}
>>
>>public class ConcatExp extends ExpContainer { }
>>public class ChoiceExp extends ExpContainer { }
>>
>>public class RefExp extends AtomicExp{
>>    final String ruleName;
>>}
>>
>>public class OptionalExp extends ExpWrapper {
>>}
>>
>>public class RepeatedExp extends ExpWrapper {
>>}
>>
>>public class EpsilonExp extends AtomicExp { }
>>
>>
>>package org.brianlsmith.bnf;
>>
>>String paren(Exp container, Exp e) =
>>    precedence(container) > precedence(e)
>>        ? "( " + prettyprint(e) + " )"
>>        : prettyprint(e)
>>        ;
>>
>>String prettyprint(Exp e);
>>
>>prettyprint(s@StringExp)  = s.text;
>>prettyprint(s@RefExp)     = s.ruleName;
>>prettyprint(s@EpsilonExp) = "\u1d75";
>>prettyprint(c@ChoiceExp)  = prettyInfix(c, " | ");
>>prettyprint(c@ConcatExp)  = prettyInfix(c, " ");
>>prettyprint(c@OptionalExp)= "[ " + prettyprint(exp(c)) + " ]";
>>prettyprint(c@RepeatedExp)= "{ " + prettyprint(exp(c)) + " }";
>>
>>String prettyprintProduction(Production r);
>>prettyprintProduction(r) {
>>    String prefix = name(r) + " = ";
>>    return prefixedChoice(definition(r), prefix) + '\n'
>>        + spaces(prefix.length() - 2) + ";\n";
>>}
>>
>>String toString(StringBuffer s) = native String StringBuffer.toString();
>>
>>String prefixedChoice(Exp e, String prefix);
>>prefixedChoice(e, prefix) = prefix + prettyprint(e);
>>prefixedChoice(e@ChoiceExp, prefix) {
>>    return prefixedChoice(fst(e), prefix) + '\n'
>>         + prefixedChoice(snd(e), spaces(prefix.length() - 2) + "| ");
>>}
>>
>>private String prettyInfix(ExpContainer c, String op) {
>>    return paren(c, fst(c)) + op + paren(c, snd(c));
>>}
>>    
>>String spaces(int n) {
>>    StringBuffer sb = new StringBuffer(n);
>>    for (int i = 0; i < n; ++i) sb.append(' ');
>>    return sb.toString();
>>}
>>
>>package org.brianlsmith.bnf;
>>
>>int precedence(Exp e);
>>
>>precedence(s@AtomicExp)     = 100;
>>precedence(r@ExpWrapper)    = 100;
>>precedence(c@ConcatExp)     = 50;
>>precedence(c@ChoiceExp)     = 25;
> 
> 
> 
>  
> 
> Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 
> 



 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From jbb at acm.org  Wed Mar  5 16:37:01 2003
From: jbb at acm.org (jbb@acm.org)
Date: Mon Dec 20 16:15:25 2004
Subject: [antlr-interest] help with a logical query-like expression grammar
Message-ID: <E18qjNd-0006LB-00@gecko.home.org>


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From jbb at acm.org  Wed Mar  5 17:09:41 2003
From: jbb at acm.org (John B. Brodie)
Date: Mon Dec 20 16:15:25 2004
Subject: [antlr-interest] help with a logical query-like expression grammar [2nd try, sorry]
Message-ID: <E18qjtF-0007rZ-00@gecko.home.org>

Content-Type: multipart/mixed;
 boundary="------------3430973B69AE2B0E3C9DC7B5"

This is a multi-part message in MIME format.
--------------3430973B69AE2B0E3C9DC7B5
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit

Mr. Hartman :-

You asked (in part):
>I don't need to evaluate these expressions but rather parse them into
>an object model I have.

Which I understand to mean that, for whatever reason, use of Antlr's
Abstract Syntax Tree (AST) data structure is not suitable to you.

Fine. Perfectly Reasonable. Antlr should be (and is) flexible enough
for you to utilize your own intermediate data structure for
representing the results of the Antlr parsing activity (but of course
you might have to do some extra work over the use of AST's).

I have attached a zip file containing a small example of parsing
expressions in the form you desire into my own intermediate data
structure. Note that I do not claim that this structure is the best
(or even good) - it is just an example that is meant to help you.

I think the key concept here is the ability for rules to return
values. In this example, these returned values represent partially
built expression sub-trees.  These are usually called, I believe,
Synthetic Attributes in the Compiler Literature.  Note that you may
also pass values into rules - Inherited Attributes - but my example
didn't need to do that.

Hope this helps ... feel free to use any or all of the attached code.

--
       -jbb
----------------+----------------------------
 John B. Brodie | Email : jbrodie@cs.fit.edu
----------------+----------------------------


--------------3430973B69AE2B0E3C9DC7B5
Content-Type: application/zip;
 name="expr.zip"
Content-Transfer-Encoding: base64
Content-Disposition: inline;
 filename="expr.zip"

UEsDBBQAAAAIAO2JZS5IH3lSnAAAAEUBAAALABUAQmluYXJ5LmphdmFVVAkAA/12Zj6sgGY+
VXgEAOgDZAB1jsEKwjAQRM/mK/aWlkp/oHgRPHvwC2INGghJmGxLRfrvhsZiI7infTvszPRW
xUhH4xSepCfW7hbpNAXoGI139BKUJsCMijWdg4ZiD/KhK4TNh/2roBNZGq7W9J/QauO5L3wK
Qp2q7PhhYusDHZYCGW0iuwISIBeYi7ALw7g7sc9LtdhB8wBHspKNbb9SI0k2PvxeUBxqucbM
4g1QSwMEFAAAAAgAFo9lLuf8DA6YAwAAqgkAAAYAFQBFeHByLmdVVAkAA6uAZj6rgGY+VXgE
AOgDZACdVm1v2zYQ/iz9ipu/SOpSZei3SXUBF9ECY46dyg4KbB4CTqZlNjKpkXRe5rS/fUfq
xXKjAPX8weK9PPfcncijsoIoBcljKa+JVFQCfdSUrxRUYuy6ShOp011B3b31o0oxwYHCEPiu
KGL46gL+IvCtjh5c5snVGPYwf1KabkOx02EpGdcF92mAMAh+hmT2m0UjTwcoqd5JruDPY8K/
MNhLWqNZMfVlxzONfk24jur0eJngbTzHh6PCZQfhGIiQ0Sy16iOYMe1dx7EM9AE+Mk7kk2+W
s5JKooX0hQxzqhfYcz8IzuiZDOIKiKGDN00pnbCnl8JpTn6sDsJX0Wh6URla1CtlwFEdCP2R
Qpqop1XxXdo2Xy50NJ0t6q5vSyKZMtnuK9Ym2ZueXBHazdVmWlE91+++Ddf2v9GclvjkepQm
0+9PRWq1NeFRafcEi2vyBFHGXWPBtK0cnTAe/jPyd0HRCyXRYNDJGosdfdGL+sWJ8gzBZ+h5
KBxrtJjTd1eTR10Oj6Y3Vx+TFPYN63S3pZJltxOmMcfC553ex03bVTRfpOPp5e1kvEjS0eQA
n2ucGHmLVi/RNve6GSelz6LxBRyYxivKNVszKn3Wy9I2+cByeFeWQ7xs0T9R8qmxdDchWg4k
EDQI7CCNpkkvgtN+RK6jy0UvItevIGh02c+Rv8JR6GjSz1G8hqDRpJ+jH2GOWXsVTehj5yay
Uoz9N6ND4TAy/ncY913sOM75OegHAdmGSJLhLlEg1lAIcUc2lKzcr66rxR1tcWbADWGAj0Fs
FTi6UZ6ltWiGCsr4QAWCMfznDe4+VZKMwtu3wHIuJF2Br7QoKIe1FFvQGwojvNlM0mRbFlSd
fyH35LwkKiNFmMOaFTRwP88BmrvSAw+n6rPjLXWzWJsFEm5wnOJuxrYVjFNlrb4zWMolHwCg
Q3LPCriYzdFigdIzUdFwRTK8YIXaNBbeWG44ewTf5ClZvtHwQJ4C42T/9g2Xb99Hpd3DrdZP
pTkfC9PBcP77+NqaY9sWZY+mGTnmaKr/1ZDjY+86EXhLzwN/sMTnALfRN98oAvxSME9Lbb8q
0DH2zKapZyzKvpXTVg6sjMcP10O7xoMVweCn4cAIeGbQ8MEaLq3hQ2WYWMP7Kro1vK8M9WjD
l+f94kEYgverh4mhZXzR2Z0ObhY9aboyBC131GwlJ3J8j3hh6P3rPXsjs/gDF7deAP36Z6RB
AUnemML/A1BLAwQKAAAAAAA4iGUutCUENxUAAAAVAAAADwAVAEV4cHJlc3Npb24uamF2YVVU
CQADy3NmPqyAZj5VeAQA6ANkAGNsYXNzIEV4cHJlc3Npb24gewp9ClBLAwQUAAAACABBh2Uu
xz5SvIAAAADAAAAADwAVAElkZW50aWZpZXIuamF2YVVUCQAD6nJmPqyAZj5VeAQA6ANkAFXM
vQ6CUAwF4Nn7FA0LGBIeQOPo4OxoHJBWPQm5kLYYEsO7i+Bvp6Y936nq0ox2LNFxhihJ7xLZ
aNu3KmZoIt0DjdMqbqUL7V0RLwReh/nenWpUPxXZJ7Ec6cKvsAJMm4k8xfAHX2lv5iWbkIp3
Gik5gFdJDi6+7zw9pu+eITwAUEsDBBQAAAAIAKKJZS7DmPKcygAAADIBAAAJABUATWFpbi5q
YXZhVVQJAANvdmY+rIBmPlV4BADoA2QARZCxjsIwDIbn5ikspvSQ8gAgtmM4CSQEI2IwOQuC
0jRyXChCfXfSlooM/hX7z2c7roo1C9zwjsbV5meplPWYEmzRBXgpyCc2Z+8sJEHJcq/dP1S5
qg/CLlyOJ0C+pDKbC+FnL/2jdRt5Qy0x+CGuVFEEenzzur/9ouBfiI1kFmGlD88kVBkXynL5
5eyQU0bEUVYwcca8HhpM/tFk8rAs+8aT7gsdWBR71evWUhRXB6ByGvTTkphNzPuID3pGk28B
szkNhOEnOtWpN1BLAwQUAAAACABSh2UuzDHErYYAAADLAAAAFAAVAE51bWVyaWNfTGl0ZXJh
bC5qYXZhVVQJAAMLc2Y+rIBmPlV4BADoA2QAXcxNCsJADAXgtXOK0E0rhR5AcelO3LgUkXEM
GkjTkslIQXp3a+sPmlVI3vcC+xhhm2pUCscNGapnwM5QzhHWXasYIzUCdwfDtEo3bwg7U5IL
CC/ddE8npvDfU3xi88HP7EqxEobV6J6s/9GvtDXTUoxI0ZIKZHtJ9SIrhavvv8wP+buodw9Q
SwMEFAAAAAgAD4ZlLl9Xf1xaAAAAiAAAAA0AFQBPcGVyYXRvci5qYXZhVVQJAAOucGY+rIBm
PlV4BADoA2QAS85JLC5W8C9ILUosyS9SqOZSAIKCosyyxJJUheCSosy8dIX8AmuIcGlSTmYy
XLEGXFpToVqhJCOzWC+/QMEWpFyhFlkDVF1JPoShAVJelFpSWpQHVVvLxQUAUEsDBBQAAAAI
ACiIZS5BL1zrgAAAAMkAAAATABUAU3RyaW5nX0xpdGVyYWwuamF2YVVUCQADq3NmPqyAZj5V
eAQA6ANkAEvOSSwuVgguKcrMS4/3ySxJLUrMUUitKEnNSylWcK0oKEotLs7Mz1Oo5lIAgoKi
zLLEklSoeoXiHGsuiHhpUk5mMpoxGnBVmkDtnCUZmcV6xTkKtmBtIF21WDQrlORDGBpgTUWp
JaVFeQpK0cUlRVZK2sU5egh5bfVYdZhBtVwAUEsDBBQAAAAIAPOJZS4wt/v+jgAAAP0AAAAK
ABUAVW5hcnkuamF2YVVUCQADCXdmPqyAZj5VeAQA6ANkAFWNMQ7CMAxFZ3IKb0kV1AtUjMwM
iAOEEkGkKrEcuypCvTtRI0Tjyd/f//1xcjnDLTp6g1/Yx0eG84Lkcw4pwkdBGaQwO/ZwQU+O
E0HCoTF2CRlUteQ+hbGSzS54bJ670nDgV8h9Qjht3CqlKKklawO8MoX4BE51MRuBPAtF0Ebb
hP3fsxq0lebQ6R91VV9QSwMEFAAAAAgAYpJlLhr0GHtFAAAAVAAAAA8AFQBleHByX2NvbXBp
bGUuc2hVVAkAA+iFZj7ohWY+VXgEAOgDZADLSixLVEjMK8kp0gvJz89RcK0oKNJL58oCCicr
aOmBaDBHwTcxM0/BRiEVKB9fklpcoldSUaJgB+VWlMTnl5YUlIJFuQBQSwMEFAAAAAgAJX9l
LgrRbeJAAAAAewAAAA0AFQBleHByX3Rlc3QudHh0VVQJAAOlZGY+rYBmPlV4BADoA2QAc1Sw
VTBUsOZyBNOOfi4KTgp2tgpGKEIaTgo2QDFNdEFFkEL/IAVnoKAxhixIEsT08w9R0AArAal1
ATJMNEGKAVBLAwQUAAAACAAXj2UuT2ZI3VYAAAAVAQAAFAAVAGV4cHJfdGV4dF9vdXRwdXQu
dHh0VVQJAAOtgGY+soBmPlV4BADoA2QA04jOTLFyjFWwVYjOK821MozV5NLQwBBTcPRzUQAL
O8Uq2EHFjWI1CSu2IUoxTLUiQrWCfxDEEGe4cmOgGUQYgmQGWNzPPwQqiWIU3AIXuKgJyAKg
FQBQSwECFwMUAAAACADtiWUuSB95UpwAAABFAQAACwANAAAAAAABAAAApIEAAAAAQmluYXJ5
LmphdmFVVAUAA/12Zj5VeAAAUEsBAhcDFAAAAAgAFo9lLuf8DA6YAwAAqgkAAAYADQAAAAAA
AQAAAKSB2gAAAEV4cHIuZ1VUBQADq4BmPlV4AABQSwECFwMKAAAAAAA4iGUutCUENxUAAAAV
AAAADwANAAAAAAABAAAApIGrBAAARXhwcmVzc2lvbi5qYXZhVVQFAAPLc2Y+VXgAAFBLAQIX
AxQAAAAIAEGHZS7HPlK8gAAAAMAAAAAPAA0AAAAAAAEAAACkgQIFAABJZGVudGlmaWVyLmph
dmFVVAUAA+pyZj5VeAAAUEsBAhcDFAAAAAgAoollLsOY8pzKAAAAMgEAAAkADQAAAAAAAQAA
AKSBxAUAAE1haW4uamF2YVVUBQADb3ZmPlV4AABQSwECFwMUAAAACABSh2UuzDHErYYAAADL
AAAAFAANAAAAAAABAAAApIHKBgAATnVtZXJpY19MaXRlcmFsLmphdmFVVAUAAwtzZj5VeAAA
UEsBAhcDFAAAAAgAD4ZlLl9Xf1xaAAAAiAAAAA0ADQAAAAAAAQAAAKSBlwcAAE9wZXJhdG9y
LmphdmFVVAUAA65wZj5VeAAAUEsBAhcDFAAAAAgAKIhlLkEvXOuAAAAAyQAAABMADQAAAAAA
AQAAAKSBMQgAAFN0cmluZ19MaXRlcmFsLmphdmFVVAUAA6tzZj5VeAAAUEsBAhcDFAAAAAgA
84llLjC3+/6OAAAA/QAAAAoADQAAAAAAAQAAAKSB9wgAAFVuYXJ5LmphdmFVVAUAAwl3Zj5V
eAAAUEsBAhcDFAAAAAgAYpJlLhr0GHtFAAAAVAAAAA8ADQAAAAAAAQAAAO2BwgkAAGV4cHJf
Y29tcGlsZS5zaFVUBQAD6IVmPlV4AABQSwECFwMUAAAACAAlf2UuCtFt4kAAAAB7AAAADQAN
AAAAAAABAAAApIFJCgAAZXhwcl90ZXN0LnR4dFVUBQADpWRmPlV4AABQSwECFwMUAAAACAAX
j2UuT2ZI3VYAAAAVAQAAFAANAAAAAAABAAAApIHJCgAAZXhwcl90ZXh0X291dHB1dC50eHRV
VAUAA62AZj5VeAAAUEsFBgAAAAAMAAwAagMAAGYLAAAAAA==
--------------3430973B69AE2B0E3C9DC7B5--


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From jpark at constanttime.com  Thu Mar  6 01:57:10 2003
From: jpark at constanttime.com (James Park)
Date: Mon Dec 20 16:15:25 2004
Subject: [antlr-interest] Problems using ! in lexer with C# output
Message-ID: <b4761m+eg8c@eGroups.com>

I'm having problems generating C# code that compiles when I use ! in 
a lexer rule. I'm trying to figure out whether I am doing something 
incorrectly or whether there is a bug in the C# generator.

I have the following rule in my lexer definition:

REFERENCE :
	(		'$'! (IDENTIFIER) 
		|	"${"! (IDENTIFIER) '}'!
	)
	;


The C# output generated is below:

if ((LA(1)=='$') && (tokenSet_0_.member(LA(2))))
{
    int _saveIndex = 0;
    _saveIndex = text.Length; 
    match('$');
    text.Length = _saveIndex;
    {
        mIDENTIFIER(false);
    }
}
else if ((LA(1)=='$') && (LA(2)=='{')) 
{
    _saveIndex = text.Length;
    match("${");
    text.Length = _saveIndex;
    {
        mIDENTIFIER(false);
    }
    _saveIndex = text.Length;
    match('}');
    text.Length = _saveIndex;
}

This bit of code does not compile because there is no _saveIndex 
defined in the else if block. Do I need to do something differently 
in my rule or is this a bug?

thanks for any help.
jp

--
James Park
jpark@constanttime.com
http://dynamicdns.constanttime.com


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From neukirchen at itm.mu-luebeck.de  Thu Mar  6 02:37:51 2003
From: neukirchen at itm.mu-luebeck.de (Helmut Neukirchen)
Date: Mon Dec 20 16:15:25 2004
Subject: [antlr-interest] Re: SDL, MSC, ASN.1
References: <1046816309.319.94516.m12@yahoogroups.com>
Message-ID: <3E6724FF.7030901@itm.mu-luebeck.de>

"Dvoryansky Leonid" <dvleonid@land.ru> wrote:
> 
> Is there any implementation of SDL ITU.T Z.100 state machine on ANTLR?
> Even only text notation implemented.
> Or MSC?

Unfortunatly, I do not understand your question:
Why do you want to implement the state machine based semantics of SDL
using ANTLR? ANTLR is more related to the syntax of a language, not its semantics.

(BTW.: since the semantics of SDL is formally described, it is even possible
to derive in a (semi-)automatic way a compiler/simulator for SDL, but this
does not involve ANTLR, but some tools which have been developed for the
underlying Abstract State Machine semantics:
Eschbach, R., Gl?sser, U., Gotzhein, R., von L?wis, M., Prinz, A.:
Formal Definition of SDL-2000: Compiling and Running SDL Specifications as ASM Models,
Journal of Universal Computer Science 7 (11), 2001, Springer, pp. 1025-1050)

In case you are just looking for an ANTLR-based parser for SDL, MSC and ASN.1,
have a look at:
SDL: <http://www.teststep.org/>
MSC: <http://www.itm.mu-luebeck.de/research/main_projects/projects/single_projects/index.php?lang=en&pj_nr=8&opj_nr=2>
ASN.1: <http://www.antlr.org/grammars/ASN.1/ASN1_grammar.g/>

HTH,
Helmut
-- 
Helmut Neukirchen                  mailto:neukirchen@itm.uni-luebeck.de
Institute for Telematics                  http://www.itm.uni-luebeck.de
University of Luebeck                           phone: +49 451 500 4867
Ratzeburger Allee 160, D-23538 Luebeck, Germany   fax: +49 451 500 3722


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From Anthony.Youngman at ECA-International.com  Thu Mar  6 03:11:40 2003
From: Anthony.Youngman at ECA-International.com (Anthony W. Youngman)
Date: Mon Dec 20 16:15:25 2004
Subject: [antlr-interest] Language Independence
Message-ID: <0EF9DEABA42FE547BAE43D0298F146B23DD502@ESP.eca-international.local>

Skipped content of type multipart/alternative
From klaren at cs.utwente.nl  Thu Mar  6 05:19:34 2003
From: klaren at cs.utwente.nl (Ric Klaren)
Date: Mon Dec 20 16:15:25 2004
Subject: [antlr-interest] Language Independence
In-Reply-To: <0EF9DEABA42FE547BAE43D0298F146B23DD502@ESP.eca-international.local>; from Anthony.Youngman@ECA-International.com on Thu, Mar 06, 2003 at 11:11:40AM -0000
References: <0EF9DEABA42FE547BAE43D0298F146B23DD502@ESP.eca-international.local>
Message-ID: <20030306141934.F7046@cs.utwente.nl>

Hi,

On Thu, Mar 06, 2003 at 11:11:40AM -0000, Anthony W. Youngman wrote:
> Actually, $setType(Token.SKIP) doesn't work! At least it didn't (although I
> think I was using 2.7.1, so it may be fixed in 2.7.2).

I've been using $setType judiciously since 2.7.0 no problems. (C++ mode
though) If you have a example demonstrating the problem please feel free to
share it.

Cheers,

Ric
-- 
-----+++++*****************************************************+++++++++-------
    ---- Ric Klaren ----- j.klaren@utwente.nl ----- +31 53 4893722  ----
-----+++++*****************************************************+++++++++-------
  Chaos always defeats order because it is better organized.
  --- Terry Pratchet


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From hok_gld at yahoo.com  Thu Mar  6 05:28:41 2003
From: hok_gld at yahoo.com (Vishwanth Hokrani)
Date: Mon Dec 20 16:15:25 2004
Subject: [antlr-interest] hello
Message-ID: <20030306132841.46646.qmail@web13306.mail.yahoo.com>


Hi !!!

any one tell me how to use parser generator in vc++ 

Bye

Hokrani

 

 

 



---------------------------------
Do you Yahoo!?
Yahoo! Tax Center - forms, calculators, tips, and more
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20030306/4dbbfebc/attachment.html
From Anthony.Youngman at ECA-International.com  Thu Mar  6 05:38:26 2003
From: Anthony.Youngman at ECA-International.com (Anthony W. Youngman)
Date: Mon Dec 20 16:15:25 2004
Subject: [antlr-interest] Language Independence
Message-ID: <0EF9DEABA42FE547BAE43D0298F146B23DD504@ESP.eca-international.local>

Skipped content of type multipart/alternative
From klaren at cs.utwente.nl  Thu Mar  6 06:24:55 2003
From: klaren at cs.utwente.nl (Ric Klaren)
Date: Mon Dec 20 16:15:26 2004
Subject: [antlr-interest] Language Independence
In-Reply-To: <0EF9DEABA42FE547BAE43D0298F146B23DD504@ESP.eca-international.local>; from Anthony.Youngman@ECA-International.com on Thu, Mar 06, 2003 at 01:38:26PM -0000
References: <0EF9DEABA42FE547BAE43D0298F146B23DD504@ESP.eca-international.local>
Message-ID: <20030306152455.G7046@cs.utwente.nl>

Hi,

On Thu, Mar 06, 2003 at 01:38:26PM -0000, Anthony W. Youngman wrote:
> (replied with grammar off-list)

Thanks!

> Actually, having investigated/remembered what happened, firstly it should
> read "doesn't *always* work", and secondly, I think it is "$setType( xxx )"
> doesn't work either for certain values of xxx, or certain locations of
> $setType.

Basically it boils down to the fact that the action parser of antlr is a
bit too simple for some uses. For C++ mode I had to extend it a bit.

The only thing that needed a workaround was this one:

   _ttype = testLiteralsTable($getText.toUpperCase(), _ttype);

Initial attempt:
   $setType(testLiteralsTable($getText.toUpperCase(), _ttype));

What works:
   String t = $getText;
   $setType(testLiteralsTable(t.toUpperCase(), _ttype));

Kinda weird there's no $getType in ANTLR actually...

Fixing that kind of use could be tricky.. The action parser is basically
only a sed type replacement on the provided action text. It does the trick
quite often but sometimes it just doesn't cope :(

Cheers,

Ric
--
-----+++++*****************************************************+++++++++-------
    ---- Ric Klaren ----- j.klaren@utwente.nl ----- +31 53 4893722  ----
-----+++++*****************************************************+++++++++-------
  Chaos always defeats order because it is better organized.
  --- Terry Pratchet


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From Anthony.Youngman at ECA-International.com  Thu Mar  6 07:30:34 2003
From: Anthony.Youngman at ECA-International.com (Anthony W. Youngman)
Date: Mon Dec 20 16:15:26 2004
Subject: [antlr-interest] Wazzup with natural language?
Message-ID: <0EF9DEABA42FE547BAE43D0298F146B23DD508@ESP.eca-international.local>

Skipped content of type multipart/alternative
From dvleonid at land.ru  Thu Mar  6 12:53:16 2003
From: dvleonid at land.ru (Dvoryansky Leonid)
Date: Mon Dec 20 16:15:26 2004
Subject: [antlr-interest] Re: SDL, MSC, ASN.1
In-Reply-To: <3E6724FF.7030901@itm.mu-luebeck.de>
References: <1046816309.319.94516.m12@yahoogroups.com>
 <3E6724FF.7030901@itm.mu-luebeck.de>
Message-ID: <312469410.20030306235316@land.ru>

Hello Helmut,

My English not so clear, but You trully understand what I want.
I've found a SITE project which implemented SDL2000-parser on yacc.

Could You tell me where I can find article You gave, please.

Thursday, March 6, 2003, 1:37:51 PM, you wrote:

HN> Unfortunatly, I do not understand your question:
HN> Why do you want to implement the state machine based semantics of SDL
HN> using ANTLR? ANTLR is more related to the syntax of a language, not its semantics.

-- 
Best regards,
 Dvoryansky                            mailto:dvleonid@land.ru


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From dvleonid at land.ru  Thu Mar  6 13:08:52 2003
From: dvleonid at land.ru (Dvoryansky Leonid)
Date: Mon Dec 20 16:15:26 2004
Subject: [antlr-interest] Wazzup with natural language?
In-Reply-To: <0EF9DEABA42FE547BAE43D0298F146B23DD508@ESP.eca-international.local>
References: <0EF9DEABA42FE547BAE43D0298F146B23DD508@ESP.eca-international.local>
Message-ID: <03405556.20030307000852@land.ru>

Hello Anthony,

Thursday, March 6, 2003, 6:30:34 PM, you wrote:

AWY> "Time flies like an arrow. Fruit flies like a banana."

Anthony likes some stupid flies. :)

For example fruit banana couldn't fly so flies is animals.
And ... flies cannot be "time" so ... you got it.

Lexical analysing have to be mixed w/ fuzzy logic.
Hmm.. maybe start a research in that direction.

-- 
Best regards,
 Dvoryansky                            mailto:dvleonid@land.ru


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From gudnabrsam at yahoo.com  Thu Mar  6 13:13:54 2003
From: gudnabrsam at yahoo.com (Matt Benson)
Date: Mon Dec 20 16:15:26 2004
Subject: [antlr-interest] Wazzup with natural language?
In-Reply-To: <03405556.20030307000852@land.ru>
Message-ID: <20030306211354.661.qmail@web20421.mail.yahoo.com>

Actually it strikes me that "fruit flies like a
banana" is technically valid no matter how you
interpret it.  Since a banana is a fruit, it would fly
in the same way as a fruit, which would probably be
not at all, unless thrown.  Conversely, fruit should
fly in the same way as a banana.

-Matt

--- Dvoryansky Leonid <dvleonid@land.ru> wrote:
> Hello Anthony,
> 
> Thursday, March 6, 2003, 6:30:34 PM, you wrote:
> 
> AWY> "Time flies like an arrow. Fruit flies like a
> banana."
> 
> Anthony likes some stupid flies. :)
> 
> For example fruit banana couldn't fly so flies is
> animals.
> And ... flies cannot be "time" so ... you got it.
> 
> Lexical analysing have to be mixed w/ fuzzy logic.
> Hmm.. maybe start a research in that direction.
> 
> -- 
> Best regards,
>  Dvoryansky                           
> mailto:dvleonid@land.ru
> 
> 
>  
> 
> Your use of Yahoo! Groups is subject to
> http://docs.yahoo.com/info/terms/ 
> 
> 


__________________________________________________
Do you Yahoo!?
Yahoo! Tax Center - forms, calculators, tips, more
http://taxes.yahoo.com/

 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From hushlee83 at yahoo.com.sg  Thu Mar  6 15:53:02 2003
From: hushlee83 at yahoo.com.sg (=?iso-8859-1?q?Sharon=20Li?=)
Date: Mon Dec 20 16:15:26 2004
Subject: [antlr-interest] New to Abstract syntax trees
Message-ID: <20030306235302.80967.qmail@web40907.mail.yahoo.com>


hello all,

I'm using java and I'm trying to build Antlr grammar to recognize expressions like :
e.g.  8*4-LEN/(WIDTH+1)
or a while expression while(expr) where the expr can be : LEN+1<=5

I do not need to evaluate the expression as I am reading the input but would like to put the expression into a data structure from which I can retrieve each token for evaluating later on. An example would be an Expression object where i will keep an array of tokens read and variable names like LEN and WIDTH will be kept in a symbol table. I've looked at the Antlr grammar for C and found it relevant to what I will be needing. Would anybody recommend me using a Abstract Syntax Tree? I'm very new to AST and would like some advice on that. What does it actually generate and would form would the data generated be in?

Thanks in advance for any help.

Cheers,
Sharon 

 Yahoo! Biztools
- Promote your business from just $5 a month!
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20030307/45cffd68/attachment.html
From ajpb at yahoo.com  Thu Mar  6 17:19:32 2003
From: ajpb at yahoo.com (Addi Jamshidi)
Date: Mon Dec 20 16:15:26 2004
Subject: [antlr-interest] Wazzup with natural language?
In-Reply-To: <0EF9DEABA42FE547BAE43D0298F146B23DD508@ESP.eca-international.local>
Message-ID: <20030307011932.48112.qmail@web11507.mail.yahoo.com>

I can understand why that would be complicated..
But how about a controlled environment where all we
have contains strings such as:

'Please enter the name of your Procedure"
"Welcome to our Data Adapter Wiard Tool"
"Enter the name of your Database",
etc. etc.

----

--- "Anthony W. Youngman"
<Anthony.Youngman@ECA-International.com> wrote:
> Okay. Let's see fuzzy logic and complex parsing make
> sense of this...
> 
> "Time flies like an arrow. Fruit flies like a
> banana."
> 
> That's my favourite "computer natural language
> problem" :-)
> 
> Cheers,
> Wol
> 
> -----Original Message-----
> From: Dvoryansky Leonid [mailto:dvleonid@land.ru] 
> Sent: 03 March 2003 21:12
> To: antlr-interest@yahoogroups.com
> Subject: RE: [antlr-interest] Wazzup with natural
> language?
> 
> 
> Tnx guys for links and answer.
> 
> >Getting all possible interpretations of "I once
> shot an elephant in my 
> >pajamas" is pretty easy.  Figuring out which one
> makes sense is another 
> >story ;)
> 
> I offer to declare new Chomsky grammar 0.5 class -
> elephant-free.
> 
> Seriously - probably fuzzy logic and complex parsing
> can do that.
> 
>  
> 
> Your use of Yahoo! Groups is subject to
> http://docs.yahoo.com/info/terms/ 
> 
> 
> 
> This transmission is intended for the named
> recipient only. It may contain
> private and confidential information. If this has
> come to you in error you
> must not act on anything disclosed in it, nor must
> you copy it, modify it,
> disseminate it in any way, or show it to anyone.
> Please e-mail the sender to
> inform us of the transmission error or telephone ECA
> International
> immediately and delete the e-mail from your
> information system.
> Telephone numbers for ECA International offices are:
> Sydney +61 (0)2 9911
> 7799, Hong Kong + 852 2121 2388, London +44 (0)20
> 7351 5000 and New York +1
> 212 582 2333.
> 
> 


__________________________________________________
Do you Yahoo!?
Yahoo! Tax Center - forms, calculators, tips, more
http://taxes.yahoo.com/

 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From jpark at constanttime.com  Thu Mar  6 20:40:08 2003
From: jpark at constanttime.com (James Park)
Date: Mon Dec 20 16:15:26 2004
Subject: [antlr-interest] Problems with C# output when using semantic predicates
Message-ID: <b497r8+9lb2@eGroups.com>

If I use semantic predicates in my lexer rules, the resulting C# 
output will not compile with complaints of "The type or 
namespace 'SemanticException' could not be found. I can add this 
manually to get it to compile, but shouldn't Antlr be generating 
this?

thanks
jp

--
James Park
jpark@constanttime.com
http://dynamicdns.constanttime.com


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From Anthony.Youngman at ECA-International.com  Thu Mar  6 23:58:07 2003
From: Anthony.Youngman at ECA-International.com (Anthony W. Youngman)
Date: Mon Dec 20 16:15:26 2004
Subject: [antlr-interest] Wazzup with natural language?
Message-ID: <0EF9DEABA42FE547BAE43D0298F146B23DD50D@ESP.eca-international.local>

Skipped content of type multipart/alternative
From neukirchen at itm.mu-luebeck.de  Fri Mar  7 02:55:05 2003
From: neukirchen at itm.mu-luebeck.de (Helmut Neukirchen)
Date: Mon Dec 20 16:15:26 2004
Subject: [antlr-interest] Re: SDL, MSC, ASN.1
References: <1046991908.434.31283.m12@yahoogroups.com>
Message-ID: <3E687A89.4050106@itm.mu-luebeck.de>

Dvoryansky Leonid <dvleonid@land.ru> wrote:

> I've found a SITE project which implemented SDL2000-parser on yacc.

If you want to use yacc instead of ANTLR, SITE is probably a good source.

>> Eschbach, R., Gl?sser, U., Gotzhein, R., von L?wis, M., Prinz, A.:
>> Formal Definition of SDL-2000: Compiling and Running SDL Specifications as ASM Models,
>> Journal of Universal Computer Science 7 (11), 2001, Springer, pp. 1025-1050)

> Could You tell me where I can find article You gave, please.

You have to be either subscribed to that journal
http://www.jucs.org/jucs_7_11/formal_definition_of_sdl
or simply send an e-mail to one of the authors (the Berlin authors are
from the same research groups that works also on the SITE project).

HTH,
Helmut
-- 
Helmut Neukirchen                  mailto:neukirchen@itm.uni-luebeck.de
Institute for Telematics                  http://www.itm.uni-luebeck.de
University of Luebeck                           phone: +49 451 500 4867
Ratzeburger Allee 160, D-23538 Luebeck, Germany   fax: +49 451 500 3722


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From dude at darkfigure.org  Fri Mar  7 11:35:12 2003
From: dude at darkfigure.org (Paul J. Lucas)
Date: Mon Dec 20 16:15:26 2004
Subject: [antlr-interest] Putting antlr into a different package?
Message-ID: <b4as9g+or66@eGroups.com>

I've looked through the documentation but see no way to make the generated Java code from antlr use import statements for antlr from a different package.  For conflict reasons on a large project, we need to have it generated something like "import my.antlr.whatever;" rather than the standard "import antlr.whatever;".

Is there any way to do that with the code out of the box?  Or do I have to hack the source?

- Paul


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From brian-l-smith at uiowa.edu  Fri Mar  7 12:05:09 2003
From: brian-l-smith at uiowa.edu (Brian Smith)
Date: Mon Dec 20 16:15:26 2004
Subject: [antlr-interest] Putting antlr into a different package?
In-Reply-To: <b4as9g+or66@eGroups.com>
References: <b4as9g+or66@eGroups.com>
Message-ID: <3E68FB75.6070403@uiowa.edu>

Paul,

You need to hack the source if you want ANTLR to live in another 
package. If you simply want to use two versions of ANTLR in the same 
program, you might be able to load each version of ANTLR with different 
classloaders, as long as the code that uses each version is isolated.

- Brian

Paul J. Lucas wrote:
> I've looked through the documentation but see no way to make the generated Java code from antlr use import statements for antlr from a different package.  For conflict reasons on a large project, we need to have it generated something like "import my.antlr.whatever;" rather than the standard "import antlr.whatever;".
> 
> Is there any way to do that with the code out of the box?  Or do I have to hack the source?
> 
> - Paul
> 
> 
>  
> 
> Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 
> 



 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From parrt at jguru.com  Fri Mar  7 12:10:01 2003
From: parrt at jguru.com (Terence Parr)
Date: Mon Dec 20 16:15:26 2004
Subject: [antlr-interest] Putting antlr into a different package?
In-Reply-To: <b4as9g+or66@eGroups.com>
Message-ID: <C7249770-50D8-11D7-ABA9-000393BB647E@jguru.com>

Hi.  That is an atypical requirement for using external packages, 
but...easy to do in IntelliJ IDEA; one refactor command :)

Ter
On Friday, March 7, 2003, at 11:35  AM, Paul J. Lucas wrote:

> I've looked through the documentation but see no way to make the 
> generated Java code from antlr use import statements for antlr from a 
> different package.  For conflict reasons on a large project, we need 
> to have it generated something like "import my.antlr.whatever;" rather 
> than the standard "import antlr.whatever;".
>
> Is there any way to do that with the code out of the box?  Or do I 
> have to hack the source?
>
> - Paul
>
>
>
>
> Your use of Yahoo! Groups is subject to 
> http://docs.yahoo.com/info/terms/
>
>
--
Co-founder, http://www.jguru.com
Creator, ANTLR Parser Generator: http://www.antlr.org
Lecturer in Comp. Sci., University of San Francisco


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From dude at darkfigure.org  Fri Mar  7 16:49:46 2003
From: dude at darkfigure.org (Paul J. Lucas)
Date: Mon Dec 20 16:15:26 2004
Subject: [antlr-interest] Re: Putting antlr into a different package?
In-Reply-To: <C7249770-50D8-11D7-ABA9-000393BB647E@jguru.com>
Message-ID: <b4bena+525t@eGroups.com>

--- In antlr-interest@yahoogroups.com, Terence Parr <parrt@j...> wrote:
> Hi.  That is an atypical requirement for using external packages, 
> but...easy to do in IntelliJ IDEA; one refactor command :)

FYI: Big-hunk-o-project-1 uses older ANTLR; big-hunk-o-project-2 uses latest ANTLR.  Hunk 1 breaks with new ANTLR; hunk 2 breaks with old ANTLR.  Hunk 1 can't be upgraded easily; hunk 2 can't be downgraded.

It would be a simple option to add to ANTLR to allow one to specify the ANTLR package.

- Paul


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From parrt at jguru.com  Fri Mar  7 17:12:27 2003
From: parrt at jguru.com (Terence Parr)
Date: Mon Dec 20 16:15:26 2004
Subject: [antlr-interest] Re: Putting antlr into a different package?
In-Reply-To: <b4bena+525t@eGroups.com>
Message-ID: <06FAADED-5103-11D7-ABA9-000393BB647E@jguru.com>


On Friday, March 7, 2003, at 04:49  PM, Paul J. Lucas wrote:

> --- In antlr-interest@yahoogroups.com, Terence Parr <parrt@j...> wrote:
>> Hi.  That is an atypical requirement for using external packages,
>> but...easy to do in IntelliJ IDEA; one refactor command :)
>
> FYI: Big-hunk-o-project-1 uses older ANTLR; big-hunk-o-project-2 uses 
> latest ANTLR.  Hunk 1 breaks with new ANTLR; hunk 2 breaks with old 
> ANTLR.  Hunk 1 can't be upgraded easily; hunk 2 can't be downgraded.

Ah.  Makes sense.

> It would be a simple option to add to ANTLR to allow one to specify 
> the ANTLR package.

How you figure?  Perl script (which version) that changed the package 
on every file in every directory including .g files?

Ter
--
Co-founder, http://www.jguru.com
Creator, ANTLR Parser Generator: http://www.antlr.org
Lecturer in Comp. Sci., University of San Francisco


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From kreismeister at yahoo.de  Sat Mar  8 05:10:05 2003
From: kreismeister at yahoo.de (Gunnar Wagenknecht)
Date: Mon Dec 20 16:15:26 2004
Subject: [antlr-interest] Lexer non-determinisme
Message-ID: <b4cq3d+t9a2@eGroups.com>

Hi!

I have a -maybe simple- problem with my Lexer. I created a simple 
grammar which compiles with no warnings. Now I want to enhance the 
lexer to recognize special "macro" text but I currently don't have an 
idea of how to make this without getting non-determinisme.

Currently  I have the following rules which might affects the macro 
rules. The language is case insensitive and the lookahead is k=2.

IDENTIFIER   : ('a'..'z'|'_')('a'..'z'|'_'|'0'..'9')*;
COMMENT_LINE : ("//" | "&&") (~('n'))*;
DOT          : '.'
               ( "and." {$setType(AND);}
               | "or." {$setType(OR);}
               | "not." {$setType(NOT);}
               | ("t."|"y.") {$setType(TRUE);}
               | ("f."|"n.") {$setType(FALSE);}
               )?;
MACROOP      : '&';

I need to recognize the following tokens:
MACROVAR  : '&' IDENTIFIER ('.')?;
MACROTEXT : ( '&' 
              IDENTIFIER 
              '.' 
              ('a'..'z'|'_'|'0'..'9')+ 
            )
          | ( IDENTIFIER 
              ( '&' 
                IDENTIFIER 
                ( '.' 
                  ('a'..'z'|'_'|'0'..'9')+
                )?
              )+
            )
          ;

The MACROVAR is easy because I can extend the MACROOP rule.

MACROOP : '&' ( IDENTIFIER ('.'!)? {$setType(MACROVAR);} )?;

But how to compose the MACROTEXT rule? I can't recognize it in the 
parser because it isn't allowed to have whitespaces inside the macro 
tokens.

Anyone has a good idea?

Thanks, KM



 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From dvleonid at land.ru  Sat Mar  8 07:20:09 2003
From: dvleonid at land.ru (Dvoryansky Leonid)
Date: Mon Dec 20 16:15:26 2004
Subject: [antlr-interest] Wazzup with natural language?
In-Reply-To: <0EF9DEABA42FE547BAE43D0298F146B23DD50D@ESP.eca-international.local>
References: <0EF9DEABA42FE547BAE43D0298F146B23DD50D@ESP.eca-international.local>
Message-ID: <7818932203.20030308182009@land.ru>


By the fact how do you think how man's mind do recognize?
Is it nasty or not but semantics play a role.


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From edcjones at yahoo.com  Sat Mar  8 14:11:41 2003
From: edcjones at yahoo.com (edcjones)
Date: Mon Dec 20 16:15:26 2004
Subject: [antlr-interest] Problem getting all tokens in AST for GnuCParser.g
Message-ID: <b4dpqt+7pd6@eGroups.com>

I want GnuCParser.g to send all tokens (except preprocessor directives
and comments) to the AST. I removed a number of "!"s from the grammar.
If I remove the "!" from

|!       "for"
         LPAREN ( e1:expr )? SEMI ( e2:expr )? SEMI ( e3:expr )? RPAREN
         s:statement
         ...

antlr appears to go into an infinite loop. How can I get the "(", ";",
";", and ")" included in the AST?



 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From jpark at constanttime.com  Sun Mar  9 01:12:16 2003
From: jpark at constanttime.com (James Park)
Date: Mon Dec 20 16:15:26 2004
Subject: [antlr-interest] Case of getType() with C# output
Message-ID: <b4f0hg+6qhk@eGroups.com>

The antlr C# assembly seems to define AST.getType with the case 
GetType() instead of getType().

Yet, it also defines AST.setType() and AST.getText().

Is there a reason for this inconsistency?

thanks
James


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From parrt at jguru.com  Sun Mar  9 12:28:23 2003
From: parrt at jguru.com (Terence Parr)
Date: Mon Dec 20 16:15:26 2004
Subject: [antlr-interest] added 3 new lecture audios
Message-ID: <AC8C62E8-526D-11D7-8DBE-000393BB647E@jguru.com>

Howdy.

Added lecture audio at

http://nexus.cs.usfca.edu/~parrt/course/652/index.html

on keywords as variables, building a link checker for HTML, and 
handling include files.

Ter
PS	I'm off to France on Tues and will be back the 20th.
--
Co-founder, http://www.jguru.com
Creator, ANTLR Parser Generator: http://www.antlr.org
Lecturer in Comp. Sci., University of San Francisco


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From levylambert at tiscali-dsl.de  Sun Mar  9 12:48:07 2003
From: levylambert at tiscali-dsl.de (antoinelevyde)
Date: Mon Dec 20 16:15:26 2004
Subject: [antlr-interest] Re: ANTLR build and package layout
In-Reply-To: <m2vg0ge38k.fsf@speakeasy.org>
Message-ID: <b4g9a7+7at6@eGroups.com>

suggested fix for configure to make it run under cygwin :




put this starting line 2609 of configure :




cygwin=false;


case "`uname`" in


  CYGWIN*) cygwin=true ;;


esac


if [ $cygwin ]; then


    CLASSPATH=$CLASSPATH;.


else


    CLASSPATH=$CLASSPATH:.


fi




instead of 




CLASSPATH=$CLASSPATH:.





 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From edcjones at yahoo.com  Sun Mar  9 19:01:43 2003
From: edcjones at yahoo.com (edcjones)
Date: Mon Dec 20 16:15:26 2004
Subject: [antlr-interest] Re: Making the C grammar in cgram.tgz
In-Reply-To: <170826586F3BD511910D0200C110AAA80540218B@memail03.bco-home.com>
Message-ID: <b4gv6n+lcmg@eGroups.com>

I have now discovered what the problem is.

1. It is better to use full path names in a CLASSPATH. My
".bash_profile" now says:

     CLASSPATH=/usr/local/src/antlr-2.7.2
     CLASSPATH=$CLASSPATH:/home/.../cgram/grammars
     CLASSPATH=$CLASSPATH:/home/.../cgram/examples:.
     export CLASSPATH

2. In the .java files in cgram/grammars, comment out "import CToken;"
and "import LineObject;". One cannot shorten a one-token name.

Here is how this Python user and Java / antlr newbie got confused:
"import" means different things in Java and Python. In Python, "import
sys" makes the contents of module "sys" available for use. In Java,
"import antlr.SemanticException;" allows the use of the name
"SemanticException" instead of "antlr.SemanticException".

--- In antlr-interest@yahoogroups.com, mzukowski@y... wrote:
> This doesn't make sense to me.  It's like it's confused between
having both
> . and ../grammars be the same directory.  Did you try it without
../grammars
> in your classpath?
> 
> Sorry for the late reply, I was in the middle of the Pacific as of
late,
> just starting to slog through the hundreds of antlr messages I
missed....
> 
> Monty

> --- In antlr-interest@yahoogroups.com, "edcjones <edcjones@y...>"
> <edcjones@y...> wrote:
> > I have installed Blackdown Java Version 1.4.1-beta (based on Sun's
> > 1.4.1-pre-rc-b17) and antlr-2.7.2 on my Gentoo Linux PC.
> > 
> > In the antlr resources, there is a grammar for C in a file
> > "cgram.tgz". I have set the classpath to
> > 
> >     /usr/local/src/antlr-2.7.2:../grammars:../examples:.
> > 
> > I am having trouble getting cgram to compile. I cd to "grammars"
and
> > do "make". I get the error message:
> > 
> >     javac StdCParser.java
> >     ../grammars/TNode.java:9: '.' expected
> >     import CToken;
> >              ^
> >     1 error
> >     make: *** [StdCParser.class] Error 1


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From open.zone at virgin.net  Sun Mar  9 21:16:45 2003
From: open.zone at virgin.net (micheal_jor)
Date: Mon Dec 20 16:15:26 2004
Subject: [antlr-interest] Re: Problems using ! in lexer with C# output
In-Reply-To: <b4761m+eg8c@eGroups.com>
Message-ID: <b4h73t+q0id@eGroups.com>

--- In antlr-interest@yahoogroups.com, "James Park" <jpark@c...> 
wrote:
> I'm having problems generating C# code that compiles when I use ! 
in 
> a lexer rule. I'm trying to figure out whether I am doing something 
> incorrectly or whether there is a bug in the C# generator.

Thanks for the report, we'll look into this.

Micheal



 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From open.zone at virgin.net  Sun Mar  9 21:25:22 2003
From: open.zone at virgin.net (micheal_jor)
Date: Mon Dec 20 16:15:26 2004
Subject: [antlr-interest] Re: Case of getType() with C# output
In-Reply-To: <b4f0hg+6qhk@eGroups.com>
Message-ID: <b4h7k2+488b@eGroups.com>

--- In antlr-interest@yahoogroups.com, "James Park" <jpark@c...> 
wrote:
> The antlr C# assembly seems to define AST.getType with the case 
> GetType() instead of getType().

Actually GetType() is already defined for every object in C#. All 
objects derived directly or indirectly from System.Object. GetType() 
is inherited from System.Object.

Java's AST.getType()/setType() are mapped to the AST.Type property in 
C#. AST.getType() isn't defined because CLS compliance forbids having 
GetType() and getType() on the same object.

> Yet, it also defines AST.setType() and AST.getText().
> 
> Is there a reason for this inconsistency?

AST.setType() is supported for "cross-language backwards 
consistency" ;-)

AST.getText()/setText() are fully supported.

Cheers,

Micheal



 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From open.zone at virgin.net  Sun Mar  9 21:29:41 2003
From: open.zone at virgin.net (micheal_jor)
Date: Mon Dec 20 16:15:26 2004
Subject: [antlr-interest] Re: Problems with C# output when using semantic predicates
In-Reply-To: <b497r8+9lb2@eGroups.com>
Message-ID: <b4h7s5+6b97@eGroups.com>

--- In antlr-interest@yahoogroups.com, "James Park" <jpark@c...> 
wrote:
> If I use semantic predicates in my lexer rules, the resulting C# 
> output will not compile with complaints of "The type or 
> namespace 'SemanticException' could not be found. I can add this 
> manually to get it to compile, but shouldn't Antlr be generating 
> this?

Thanks for the report. This is already on our list and will be 
included in the next 2.7.2 C# update.

In the meantime, we recommend adding the appropriate "using" 
directive to the "header {...}" section at the top of your grammar 
files.

Cherrs,

Micheal



 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From cintyram at yahoo.com  Mon Mar 10 08:01:40 2003
From: cintyram at yahoo.com (cintyram)
Date: Mon Dec 20 16:15:26 2004
Subject: [antlr-interest] TreeParser doubt
Message-ID: <b4ict4+7dqh@eGroups.com>

hi,
 i had a tree parser lilke this ..


rule1 : # ( ID ID rule2 ) ;
rule2 : # ( ASSIGN ID ( COMMA ID )* ) ;

but because i have to extract the values of the matched text, 
 into the data structures in the main program i modified the rules as
follows ..

 rule1 
 [ 
   std::string & name  ,
   std::string & value ,
   std::vector<std::string> & list
 ] 
  : #( nam:ID {name = nam->getText() ; }
       val:ID {value = nam->getText() ; }
      { rule2(list) ; }
     ) /// wrong code .. tule2 shud get the tree it should mtch ..
  ;
 rule2
 [
  std::vector<std::string> & list
 ]
  : # ( ASSIGN i:ID{list.push_back(i->getText() );}
       ( COMMA id:ID {list.push_back(id->getText() );}
       )* 
     )
  ;


as stated in the comment, rule2 has to be passed the tree it is
supposed to match, if used as a function .. 
so what should i do now?
Thanks in advance
cheers
ram





 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From mzukowski at yci.com  Mon Mar 10 08:05:48 2003
From: mzukowski at yci.com (mzukowski@yci.com)
Date: Mon Dec 20 16:15:26 2004
Subject: [antlr-interest] Problem getting all tokens in AST for GnuCPa
	rser.g
Message-ID: <170826586F3BD511910D0200C110AAA8054021DE@memail03.bco-home.com>

You are going to have a heck of a time preserving all tokens in the AST.
Writing the tree parser for that will make be difficult because you will be
introducing many many ambiguities.  

With the fragment below you will notice the for loop being built in an
action.  Removing the ! causes it to be build automatically and then again
in the action making some nodes children of themselves, introducing your
infinite loop.

Why are you trying to preserve all tokens in the AST?  I guarantee there is
a better way to accomplish your goal than that.

Monty

-----Original Message-----
From: edcjones [mailto:edcjones@yahoo.com]
Sent: Saturday, March 08, 2003 2:12 PM
To: antlr-interest@yahoogroups.com
Subject: [antlr-interest] Problem getting all tokens in AST for
GnuCParser.g


I want GnuCParser.g to send all tokens (except preprocessor directives
and comments) to the AST. I removed a number of "!"s from the grammar.
If I remove the "!" from

|!       "for"
         LPAREN ( e1:expr )? SEMI ( e2:expr )? SEMI ( e3:expr )? RPAREN
         s:statement
         ...

antlr appears to go into an infinite loop. How can I get the "(", ";",
";", and ")" included in the AST?



 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From mzukowski at yci.com  Mon Mar 10 08:23:41 2003
From: mzukowski at yci.com (mzukowski@yci.com)
Date: Mon Dec 20 16:15:26 2004
Subject: [antlr-interest] Re: Making the C grammar in cgram.tgz
Message-ID: <170826586F3BD511910D0200C110AAA8054021E0@memail03.bco-home.com>

Heh, I got a kick out of being called a Java / antlr newbie :)  Zen Mind,
Beginners Mind....

CToken and LineObject aren't in packages, so "import CToken;" is correct.
Arguably they should be in a package though.  I'll get around to it some
day.

I'm curious to know what you want to build with my toolkit....

Monty

-----Original Message-----
From: edcjones [mailto:edcjones@yahoo.com]
Sent: Sunday, March 09, 2003 7:02 PM
To: antlr-interest@yahoogroups.com
Subject: [antlr-interest] Re: Making the C grammar in cgram.tgz


I have now discovered what the problem is.

1. It is better to use full path names in a CLASSPATH. My
".bash_profile" now says:

     CLASSPATH=/usr/local/src/antlr-2.7.2
     CLASSPATH=$CLASSPATH:/home/.../cgram/grammars
     CLASSPATH=$CLASSPATH:/home/.../cgram/examples:.
     export CLASSPATH

2. In the .java files in cgram/grammars, comment out "import CToken;"
and "import LineObject;". One cannot shorten a one-token name.

Here is how this Python user and Java / antlr newbie got confused:
"import" means different things in Java and Python. In Python, "import
sys" makes the contents of module "sys" available for use. In Java,
"import antlr.SemanticException;" allows the use of the name
"SemanticException" instead of "antlr.SemanticException".

--- In antlr-interest@yahoogroups.com, mzukowski@y... wrote:
> This doesn't make sense to me.  It's like it's confused between
having both
> . and ../grammars be the same directory.  Did you try it without
../grammars
> in your classpath?
> 
> Sorry for the late reply, I was in the middle of the Pacific as of
late,
> just starting to slog through the hundreds of antlr messages I
missed....
> 
> Monty

> --- In antlr-interest@yahoogroups.com, "edcjones <edcjones@y...>"
> <edcjones@y...> wrote:
> > I have installed Blackdown Java Version 1.4.1-beta (based on Sun's
> > 1.4.1-pre-rc-b17) and antlr-2.7.2 on my Gentoo Linux PC.
> > 
> > In the antlr resources, there is a grammar for C in a file
> > "cgram.tgz". I have set the classpath to
> > 
> >     /usr/local/src/antlr-2.7.2:../grammars:../examples:.
> > 
> > I am having trouble getting cgram to compile. I cd to "grammars"
and
> > do "make". I get the error message:
> > 
> >     javac StdCParser.java
> >     ../grammars/TNode.java:9: '.' expected
> >     import CToken;
> >              ^
> >     1 error
> >     make: *** [StdCParser.class] Error 1


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From parrt at jguru.com  Mon Mar 10 10:08:55 2003
From: parrt at jguru.com (Terence Parr)
Date: Mon Dec 20 16:15:26 2004
Subject: [antlr-interest] Re: Making the C grammar in cgram.tgz
In-Reply-To: <170826586F3BD511910D0200C110AAA8054021E0@memail03.bco-home.com>
Message-ID: <5BC39E06-5323-11D7-8DBE-000393BB647E@jguru.com>


On Monday, March 10, 2003, at 08:23  AM, mzukowski@yci.com wrote:

> Heh, I got a kick out of being called a Java / antlr newbie :)  Zen 
> Mind,
> Beginners Mind....

Wow...if you're a newbie, am i a furbie?  Maybe a teletubby. ;)

Ter

> -----Original Message-----
> From: edcjones [mailto:edcjones@yahoo.com]
> Sent: Sunday, March 09, 2003 7:02 PM
> To: antlr-interest@yahoogroups.com
> Subject: [antlr-interest] Re: Making the C grammar in cgram.tgz
>
>
> I have now discovered what the problem is.
>
> 1. It is better to use full path names in a CLASSPATH. My
> ".bash_profile" now says:
>
>      CLASSPATH=/usr/local/src/antlr-2.7.2
>      CLASSPATH=$CLASSPATH:/home/.../cgram/grammars
>      CLASSPATH=$CLASSPATH:/home/.../cgram/examples:.
>      export CLASSPATH
>
> 2. In the .java files in cgram/grammars, comment out "import CToken;"
> and "import LineObject;". One cannot shorten a one-token name.
>
> Here is how this Python user and Java / antlr newbie got confused:
> "import" means different things in Java and Python. In Python, "import
> sys" makes the contents of module "sys" available for use. In Java,
> "import antlr.SemanticException;" allows the use of the name
> "SemanticException" instead of "antlr.SemanticException".
>
> --- In antlr-interest@yahoogroups.com, mzukowski@y... wrote:
>> This doesn't make sense to me.  It's like it's confused between
> having both
>> . and ../grammars be the same directory.  Did you try it without
> ../grammars
>> in your classpath?
>>
>> Sorry for the late reply, I was in the middle of the Pacific as of
> late,
>> just starting to slog through the hundreds of antlr messages I
> missed....
>>
>> Monty
>
>> --- In antlr-interest@yahoogroups.com, "edcjones <edcjones@y...>"
>> <edcjones@y...> wrote:
>>> I have installed Blackdown Java Version 1.4.1-beta (based on Sun's
>>> 1.4.1-pre-rc-b17) and antlr-2.7.2 on my Gentoo Linux PC.
>>>
>>> In the antlr resources, there is a grammar for C in a file
>>> "cgram.tgz". I have set the classpath to
>>>
>>>     /usr/local/src/antlr-2.7.2:../grammars:../examples:.
>>>
>>> I am having trouble getting cgram to compile. I cd to "grammars"
> and
>>> do "make". I get the error message:
>>>
>>>     javac StdCParser.java
>>>     ../grammars/TNode.java:9: '.' expected
>>>     import CToken;
>>>              ^
>>>     1 error
>>>     make: *** [StdCParser.class] Error 1
>
>
>
>
> Your use of Yahoo! Groups is subject to 
> http://docs.yahoo.com/info/terms/
>
>
>
>
> Your use of Yahoo! Groups is subject to 
> http://docs.yahoo.com/info/terms/
>
>
--
Co-founder, http://www.jguru.com
Creator, ANTLR Parser Generator: http://www.antlr.org
Lecturer in Comp. Sci., University of San Francisco


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From fedot at stockworm.com  Mon Mar 10 13:21:43 2003
From: fedot at stockworm.com (fedot)
Date: Mon Dec 20 16:15:26 2004
Subject: [antlr-interest] need help designing a simple calculator
Message-ID: <b4ivl7+s5jr@eGroups.com>

Having read through just about all ANTLR documentation I could lay 
my hands on, I am sorry to say that I am more frustrated than 
enlightened at this point. I would be greatly thankful if anyone 
experienced enough with ANTLR could lend me a hand with the 
following task:

I need to design a parser capable of evaluating one-liner boolean 
equations, such as:

    "F1(A, 5) AND F2(B)"
    "A <= 0.4 AND F1(B, 1) OR F2(C, 2)"
    "NOT (A <> 10 AND B < 0.5)"

Or more specifically, being able to perform the following operations 
(in order of precedence):

OR
AND
= <>
< <= > >=
+ -
* /
NOT

Variables are given as a map of name/value pairs, and list of 
functions is fixed and known ahead of time.

Attached is my first shot at lexer/parser to do the job. I am still 
not sure what direction I should take next, as I am not at all 
comfortable yet with ANTLR and not familiar with all of its 
capabilities. Specifically, I have the following questions to answer:

1) do I need to build an AST and use a TreeParser to actually 
evaluate my expressions? or do I just do it all within the parser?

2) i know why I am getting ambiguity warnings about conflicts 
between "AND/OR/NOT" operators and ID identifiers, but what should I 
do about eliminating that ambuguity?

3) i don't think i did the right thing with unary_expression being a 
NUMBER constant, a parenthesized "expression", an ID (variable), or 
a function call. or did i? it seems that ID and function should be 
two separate rules instead of one with optional function arguments.

Like I said, you would be doing me a GREAT favor if you could point 
me in the right direction.

Thank you!

---------------------------

// Parser
class SignalParser extends Parser;

options {
    buildAST = true;
}

expression:
    logical_or_expression
;

logical_or_expression:
    logical_and_expression (OR^ logical_and_expression)*
;

logical_and_expression:
    equality_expression (AND^ equality_expression)*
;

equality_expression:
    relational_expression ((EQ^ | NE^) relational_expression)*
;

relational_expression:
    additive_expression ((LT^ | LE^ | GT^ | GE^) additive_expression)
*
;

additive_expression:
    multiplicative_expression ((ADD^ | SUBTRACT^) 
multiplicative_expression)*
;

multiplicative_expression:
    unary_expression ((MULTIPLY^ | DIVIDE^) unary_expression)*
;

unary_expression:
    NUMBER
    |
    LPAREN! expression RPAREN!
    |
    ID (LPAREN! (expression (COMMA! expression)*)? RPAREN!)?
;

// Lexer
class SignalLexer extends Lexer;

options {
    k = 2;
}

WHITESPACE:
    (' ' | '\t' | '\n' { newline(); } | '\r') { $setType
(Token.SKIP); }
;

NUMBER:
    (DIGIT)+  ('.' (DIGIT)*)? (EXPONENT)? | '.' (DIGIT)+ (EXPONENT)?
;

ID:
    ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' 
| '0'..'9')*
;

protected
DIGIT:
    '0'..'9'
;

protected
EXPONENT:
    ('e' | 'E') ('+' | '-')? (DIGIT)+
;

LPAREN: "(" ;
RPAREN: ")" ;
COMMA: "," ;

OR: "OR" ;
AND: "AND" ;

EQ: "=" ;
NE: "<>" ;

LT: "<" ;
LE: "<=" ;
GT: ">" ;
GE: ">=" ;

ADD: "+" ;
SUBTRACT: "-" ;

MULTIPLY: "*" ;
DIVIDE: "/" ;

NOT: "NOT" ;



 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From edcjones at yahoo.com  Mon Mar 10 19:09:24 2003
From: edcjones at yahoo.com (edcjones)
Date: Mon Dec 20 16:15:26 2004
Subject: [antlr-interest] Re: Making the C grammar in cgram.tgz
In-Reply-To: <170826586F3BD511910D0200C110AAA8054021E0@memail03.bco-home.com>
Message-ID: <b4jk14+5ob1@eGroups.com>

--- In antlr-interest@yahoogroups.com, mzukowski@y... wrote:
> Heh, I got a kick out of being called a Java / antlr newbie :)  Zen 
> Mind, Beginners Mind....

I was talking about myself. I program in Python, C, and C++. I am new
to Java and know little about compilers.

> CToken and LineObject aren't in packages, so "import CToken;" is 
> correct.

When I uncommented the "import CToken;" in "GnuCParser.g", I got the error

    GnuCLexer.java:27: '.' expected
            import CToken;
                     ^
    1 error
    make: *** [GnuCLexer.class] Error 1

> I'm curious to know what you want to build with my toolkit....

In the past I have wrapped the OpenCV image processing system so one
can call it from Python. I used SWIG. Recently Greg Ewing has invented
a new nearly Python language, Pyrex. Wrapping something using Pyrex
may be easier to automate than using SWIG.

The question is: To what extent is it possible to automate the
production of Python wrappers for complex systems of C code? I didn't
understand TXL. The flaky CPU in my computer wouldn't let me compile
Stratego (The machine is being replaced). So I am trying antlr.

So far, I am using antlr to help me with the preliminary stages of
doing the wrapping by hand.

Python
  http://www.python.org/
SWIG
  http://www.swig.org/
Pyrex
  http://www.cosc.canterbury.ac.nz/~greg/python/Pyrex/
TXL
  http://www.txl.ca/
Stratego
  http://www.stratego-language.org/twiki/bin/view/Stratego/



 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From andrew at adersoftware.com  Mon Mar 10 19:20:06 2003
From: andrew at adersoftware.com (Andrew Deren)
Date: Mon Dec 20 16:15:26 2004
Subject: [antlr-interest] need help designing a simple calculator
References: <b4ivl7+s5jr@eGroups.com>
Message-ID: <001d01c2e77d$1d91fc30$6501a8c0@andrew>

You can look at my calculator example/implenentation. I used antlr for that
application and have implementation in java and C#. I have a very simple
example (calculator with variables and functions) and then took that into
more of a language. I do not use the antlr tree building, but I'm building
my own custom made AST.
You can download it from http://www.adersoftware.com/?page=compilers
Andrew

----- Original Message -----
From: "fedot" <fedot@stockworm.com>
To: <antlr-interest@yahoogroups.com>
Sent: Monday, March 10, 2003 3:21 PM
Subject: [antlr-interest] need help designing a simple calculator


> Having read through just about all ANTLR documentation I could lay
> my hands on, I am sorry to say that I am more frustrated than
> enlightened at this point. I would be greatly thankful if anyone
> experienced enough with ANTLR could lend me a hand with the
> following task:
>
> I need to design a parser capable of evaluating one-liner boolean
> equations, such as:
>
>     "F1(A, 5) AND F2(B)"
>     "A <= 0.4 AND F1(B, 1) OR F2(C, 2)"
>     "NOT (A <> 10 AND B < 0.5)"
>
> Or more specifically, being able to perform the following operations
> (in order of precedence):
>
> OR
> AND
> = <>
> < <= > >=
> + -
> * /
> NOT
>
> Variables are given as a map of name/value pairs, and list of
> functions is fixed and known ahead of time.
>
> Attached is my first shot at lexer/parser to do the job. I am still
> not sure what direction I should take next, as I am not at all
> comfortable yet with ANTLR and not familiar with all of its
> capabilities. Specifically, I have the following questions to answer:
>
> 1) do I need to build an AST and use a TreeParser to actually
> evaluate my expressions? or do I just do it all within the parser?
>
> 2) i know why I am getting ambiguity warnings about conflicts
> between "AND/OR/NOT" operators and ID identifiers, but what should I
> do about eliminating that ambuguity?
>
> 3) i don't think i did the right thing with unary_expression being a
> NUMBER constant, a parenthesized "expression", an ID (variable), or
> a function call. or did i? it seems that ID and function should be
> two separate rules instead of one with optional function arguments.
>
> Like I said, you would be doing me a GREAT favor if you could point
> me in the right direction.
>
> Thank you!
>
> ---------------------------
>
> // Parser
> class SignalParser extends Parser;
>
> options {
>     buildAST = true;
> }
>
> expression:
>     logical_or_expression
> ;
>
> logical_or_expression:
>     logical_and_expression (OR^ logical_and_expression)*
> ;
>
> logical_and_expression:
>     equality_expression (AND^ equality_expression)*
> ;
>
> equality_expression:
>     relational_expression ((EQ^ | NE^) relational_expression)*
> ;
>
> relational_expression:
>     additive_expression ((LT^ | LE^ | GT^ | GE^) additive_expression)
> *
> ;
>
> additive_expression:
>     multiplicative_expression ((ADD^ | SUBTRACT^)
> multiplicative_expression)*
> ;
>
> multiplicative_expression:
>     unary_expression ((MULTIPLY^ | DIVIDE^) unary_expression)*
> ;
>
> unary_expression:
>     NUMBER
>     |
>     LPAREN! expression RPAREN!
>     |
>     ID (LPAREN! (expression (COMMA! expression)*)? RPAREN!)?
> ;
>
> // Lexer
> class SignalLexer extends Lexer;
>
> options {
>     k = 2;
> }
>
> WHITESPACE:
>     (' ' | '\t' | '\n' { newline(); } | '\r') { $setType
> (Token.SKIP); }
> ;
>
> NUMBER:
>     (DIGIT)+  ('.' (DIGIT)*)? (EXPONENT)? | '.' (DIGIT)+ (EXPONENT)?
> ;
>
> ID:
>     ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_'
> | '0'..'9')*
> ;
>
> protected
> DIGIT:
>     '0'..'9'
> ;
>
> protected
> EXPONENT:
>     ('e' | 'E') ('+' | '-')? (DIGIT)+
> ;
>
> LPAREN: "(" ;
> RPAREN: ")" ;
> COMMA: "," ;
>
> OR: "OR" ;
> AND: "AND" ;
>
> EQ: "=" ;
> NE: "<>" ;
>
> LT: "<" ;
> LE: "<=" ;
> GT: ">" ;
> GE: ">=" ;
>
> ADD: "+" ;
> SUBTRACT: "-" ;
>
> MULTIPLY: "*" ;
> DIVIDE: "/" ;
>
> NOT: "NOT" ;
>
>
>
>
>
> Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/
>
>
>
>



 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From linkspeed2000 at yahoo.com  Tue Mar 11 01:47:00 2003
From: linkspeed2000 at yahoo.com (X f)
Date: Mon Dec 20 16:15:26 2004
Subject: [antlr-interest] Verbatim string literal in C#
In-Reply-To: <001d01c2e77d$1d91fc30$6501a8c0@andrew>
Message-ID: <20030311094700.46430.qmail@web40701.mail.yahoo.com>

Hi, All:
  How can I express a lexer rule to parse verbatime
  literal string in C#? This literal starts by '@"'
  and stop by '"'. It can not have a single " in
between, but can have double quote ("") as quote
escape. 

   I used:
VERBATIM_LITERAL 
  : '@' '"' ( (~'"' ~'"') | '"' '"'  )* '"'	
  ;

   It seems it can only work on @"""", If I put 
  @" aaa ", it will treat the last " as illegal
character

Cheers
linkspeed

__________________________________________________
Do you Yahoo!?
Yahoo! Web Hosting - establish your business online
http://webhosting.yahoo.com

 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From cintyram at yahoo.com  Tue Mar 11 09:03:38 2003
From: cintyram at yahoo.com (cintyram)
Date: Mon Dec 20 16:15:26 2004
Subject: [antlr-interest] Re: TreeParser doubt
In-Reply-To: <b4ict4+7dqh@eGroups.com>
Message-ID: <b4l4ta+17m7@eGroups.com>

Sorry for replying to my own post!!
 To avoid the problme cited below, i included the rules in rule2 in
rule1 ;
but pretty soon it will becom every complex;
so i hope some one will help me by suggesting what to do;
cheers
ram

--- In antlr-interest@yahoogroups.com, "cintyram" <cintyram@y...> wrote:
> hi,
>  i had a tree parser lilke this ..
> 
> 
> rule1 : # ( ID ID rule2 ) ;
> rule2 : # ( ASSIGN ID ( COMMA ID )* ) ;
> 
> but because i have to extract the values of the matched text, 
>  into the data structures in the main program i modified the rules as
> follows ..
> 
>  rule1 
>  [ 
>    std::string & name  ,
>    std::string & value ,
>    std::vector<std::string> & list
>  ] 
>   : #( nam:ID {name = nam->getText() ; }
>        val:ID {value = nam->getText() ; }
>       { rule2(list) ; }
>      ) /// wrong code .. tule2 shud get the tree it should mtch ..
>   ;
>  rule2
>  [
>   std::vector<std::string> & list
>  ]
>   : # ( ASSIGN i:ID{list.push_back(i->getText() );}
>        ( COMMA id:ID {list.push_back(id->getText() );}
>        )* 
>      )
>   ;
> 
> 
> as stated in the comment, rule2 has to be passed the tree it is
> supposed to match, if used as a function .. 
> so what should i do now?
> Thanks in advance
> cheers
> ram


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From cintyram at yahoo.com  Tue Mar 11 09:43:43 2003
From: cintyram at yahoo.com (cintyram)
Date: Mon Dec 20 16:15:26 2004
Subject: [antlr-interest] error message
Message-ID: <b4l78f+u14o@eGroups.com>

<AST>: Mismatched Token: expecting any AST node

i am trying to get a subtree through getNextSibling,
 and pass it to a tree parser ,
but i get the above error message ;
this is due to a recognition exception being caught, but i am not able
to identify what went wrong;
any hlp is greatfully appreciated
thanks
ram



 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From kreismeister at yahoo.de  Tue Mar 11 11:26:20 2003
From: kreismeister at yahoo.de (Gunnar Wagenknecht)
Date: Mon Dec 20 16:15:26 2004
Subject: [antlr-interest] syn pred / lookahaed doesn't work
Message-ID: <b4ld8s+joom@eGroups.com>

Hi!

I have a grammar where the syn. pred. doesn't seem to work. I can 
post the whole grammar but the following example should be ok to 
recognize the problem.

compilationUnit : statementList (function)*;

function : ("static"|"init"|"exit")? "function" identName crlf
           statementList;

identName : IDENTIFIER;

crlf : SEMICOLON | NEWLINE;

statementList: (statement)*;  // <<< here I get non-determinisme 
                              // warning upon
                              // k=1 "static"|"exit"
                              // k=2 
IDENTIFIER|"function"|NEWLINE|SEMICOLON

statement: ...
         | variableDeclaration
         | ...
         | "exit" crlf
         | ...
         ;

variableDeclaration : ("public"|"private"|"local"|"static") identName 
crlf;


I tried to reslove things with syn. pred. but whatever I do I 
couldn't remove the warning. The generated parser also doen't work 
correct.

What can I do to resolve the warning?

Thanks, Gunnar


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From mzukowski at yci.com  Tue Mar 11 11:33:32 2003
From: mzukowski at yci.com (mzukowski@yci.com)
Date: Mon Dec 20 16:15:26 2004
Subject: [antlr-interest] syn pred / lookahaed doesn't work
Message-ID: <170826586F3BD511910D0200C110AAA8054021F2@memail03.bco-home.com>

There's not quite enough information there to see what the problem is.  Be
sure to inspect the generated code to see what antlr is "thinking".  This
can often help you decide where a syntactic predicate is needed.

Sometimes there are true ambiguities, such as the classic if/else ambiguity.
Antlr warns about that but handles it properly too.  There should be
something about that in the docs about ambiguites.

Monty

-----Original Message-----
From: Gunnar Wagenknecht [mailto:kreismeister@yahoo.de]
Sent: Tuesday, March 11, 2003 11:26 AM
To: antlr-interest@yahoogroups.com
Subject: [antlr-interest] syn pred / lookahaed doesn't work


Hi!

I have a grammar where the syn. pred. doesn't seem to work. I can 
post the whole grammar but the following example should be ok to 
recognize the problem.

compilationUnit : statementList (function)*;

function : ("static"|"init"|"exit")? "function" identName crlf
           statementList;

identName : IDENTIFIER;

crlf : SEMICOLON | NEWLINE;

statementList: (statement)*;  // <<< here I get non-determinisme 
                              // warning upon
                              // k=1 "static"|"exit"
                              // k=2 
IDENTIFIER|"function"|NEWLINE|SEMICOLON

statement: ...
         | variableDeclaration
         | ...
         | "exit" crlf
         | ...
         ;

variableDeclaration : ("public"|"private"|"local"|"static") identName 
crlf;


I tried to reslove things with syn. pred. but whatever I do I 
couldn't remove the warning. The generated parser also doen't work 
correct.

What can I do to resolve the warning?

Thanks, Gunnar


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From cintyram at yahoo.com  Tue Mar 11 11:52:56 2003
From: cintyram at yahoo.com (cintyram)
Date: Mon Dec 20 16:15:26 2004
Subject: [antlr-interest] Re: syn pred / lookahaed doesn't work
In-Reply-To: <b4ld8s+joom@eGroups.com>
Message-ID: <b4leqo+77or@eGroups.com>

--- In antlr-interest@yahoogroups.com, "Gunnar Wagenknecht"
<kreismeister@y...> wrote:
> Hi!
> 
> I have a grammar where the syn. pred. doesn't seem to work. I can 
> post the whole grammar but the following example should be ok to 
> recognize the problem.
> 
> compilationUnit : statementList (function)*;
> 
> function : ("static"|"init"|"exit")? "function" identName crlf
>            statementList;
> 
> identName : IDENTIFIER;
> 
> crlf : SEMICOLON | NEWLINE;
> 
> statementList: (statement)*;  // <<< here I get non-determinisme 
>                               // warning upon
>                               // k=1 "static"|"exit"
>                               // k=2 
> IDENTIFIER|"function"|NEWLINE|SEMICOLON
> 
> statement: ...
>          | variableDeclaration
>          | ...
>          | "exit" crlf
>          | ...
>          ;
> 
> variableDeclaration : ("public"|"private"|"local"|"static") identName 
> crlf;
> 
> 


from what you have given i assume the follwoing :
1. a compilation unit is a statement list followed by zero or more
functions 
2. a statementlist is a list of zero or more statements
3. and a statement is a variable declaration or "exit" or something
else ..

in this case it is clear that for a look ahead of 1, ie  at k=1 ,

the symbol can be "public" , "private" .. etc ..

but it is not sure which rule to use to match if the first symbol is
"exit" as it can appear in both a statement and in a function .
so the ambiguity 
similarly for "static" it can be a variable declaration of a function ..
if you use the same analysis, you will know why you are getting the
other ambiguity warnings .. 
also  i am asking out of personal suspicion did you have an alt which
means that a statement rule can match a function also?
like
  statement : other alts
               | function    /// do you have this in your grammar?
               | other alts 
          ;


> I tried to reslove things with syn. pred. but whatever I do I 
> couldn't remove the warning. The generated parser also doen't work 
> correct.
> 

however i suggest that you should post the actual predicates that you
used, to know why they dont seem to work ;

cheers
ram
ps: reading the code generated can give you a good idea of whats
happening "behind the scenes" :)
> What can I do to resolve the warning?
> 
> Thanks, Gunnar


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From kreismeister at yahoo.de  Tue Mar 11 11:55:40 2003
From: kreismeister at yahoo.de (Gunnar Wagenknecht)
Date: Mon Dec 20 16:15:26 2004
Subject: [antlr-interest] Re: syn pred / lookahaed doesn't work
In-Reply-To: <170826586F3BD511910D0200C110AAA8054021F2@memail03.bco-home.com>
Message-ID: <b4levs+92ug@eGroups.com>

The problem is the "static" or "exit"

In the language the following is a valid statement:
---
static myVar
---

Also the following is valid as a function declaration

---
static function myFun
---

The parser is configured to use a fix lookahead of k=2. Now after a 
function is matched, it looks for statements. If it comes to 
a "static" it tries to match a variable declaration. This fails and 
the parser throws an exception (expecting IDENTIFIER 
found "function").

I tried to setup syn. pred "("static" IDENTIFIER) =>" before the 
variable declaration in the statement rule but the generated parser 
ignores this completly - still the same exception. Thus I know ANTLR 
doesn't handle it right. 

Cu, Gunnar


--- In antlr-interest@yahoogroups.com, mzukowski@y... wrote:
> There's not quite enough information there to see what the problem 
is.  Be
> sure to inspect the generated code to see what antlr 
is "thinking".  This
> can often help you decide where a syntactic predicate is needed.
> 
> Sometimes there are true ambiguities, such as the classic if/else 
ambiguity.
> Antlr warns about that but handles it properly too.  There should be
> something about that in the docs about ambiguites.
> 
> Monty
> 
> -----Original Message-----
> From: Gunnar Wagenknecht [mailto:kreismeister@y...]
> Sent: Tuesday, March 11, 2003 11:26 AM
> To: antlr-interest@yahoogroups.com
> Subject: [antlr-interest] syn pred / lookahaed doesn't work
> 
> 
> Hi!
> 
> I have a grammar where the syn. pred. doesn't seem to work. I can 
> post the whole grammar but the following example should be ok to 
> recognize the problem.
> 
> compilationUnit : statementList (function)*;
> 
> function : ("static"|"init"|"exit")? "function" identName crlf
>            statementList;
> 
> identName : IDENTIFIER;
> 
> crlf : SEMICOLON | NEWLINE;
> 
> statementList: (statement)*;  // <<< here I get non-determinisme 
>                               // warning upon
>                               // k=1 "static"|"exit"
>                               // k=2 
> IDENTIFIER|"function"|NEWLINE|SEMICOLON
> 
> statement: ...
>          | variableDeclaration
>          | ...
>          | "exit" crlf
>          | ...
>          ;
> 
> variableDeclaration : ("public"|"private"|"local"|"static") 
identName 
> crlf;
> 
> 
> I tried to reslove things with syn. pred. but whatever I do I 
> couldn't remove the warning. The generated parser also doen't work 
> correct.
> 
> What can I do to resolve the warning?
> 
> Thanks, Gunnar
> 
> 
>  
> 
> Your use of Yahoo! Groups is subject to 
http://docs.yahoo.com/info/terms/


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From mzukowski at yci.com  Tue Mar 11 12:00:04 2003
From: mzukowski at yci.com (mzukowski@yci.com)
Date: Mon Dec 20 16:15:26 2004
Subject: [antlr-interest] Re: syn pred / lookahaed doesn't work
Message-ID: <170826586F3BD511910D0200C110AAA8054021F4@memail03.bco-home.com>

You need the syn pred higher up, where the decision is being made to try and
match a statement.  That would be in the statementList rule.  Try this to
start:

statementList: ((statement)=>statement)* ;

Monty

-----Original Message-----
From: Gunnar Wagenknecht [mailto:kreismeister@yahoo.de]
Sent: Tuesday, March 11, 2003 11:56 AM
To: antlr-interest@yahoogroups.com
Subject: [antlr-interest] Re: syn pred / lookahaed doesn't work


The problem is the "static" or "exit"

In the language the following is a valid statement:
---
static myVar
---

Also the following is valid as a function declaration

---
static function myFun
---

The parser is configured to use a fix lookahead of k=2. Now after a 
function is matched, it looks for statements. If it comes to 
a "static" it tries to match a variable declaration. This fails and 
the parser throws an exception (expecting IDENTIFIER 
found "function").

I tried to setup syn. pred "("static" IDENTIFIER) =>" before the 
variable declaration in the statement rule but the generated parser 
ignores this completly - still the same exception. Thus I know ANTLR 
doesn't handle it right. 

Cu, Gunnar


--- In antlr-interest@yahoogroups.com, mzukowski@y... wrote:
> There's not quite enough information there to see what the problem 
is.  Be
> sure to inspect the generated code to see what antlr 
is "thinking".  This
> can often help you decide where a syntactic predicate is needed.
> 
> Sometimes there are true ambiguities, such as the classic if/else 
ambiguity.
> Antlr warns about that but handles it properly too.  There should be
> something about that in the docs about ambiguites.
> 
> Monty
> 
> -----Original Message-----
> From: Gunnar Wagenknecht [mailto:kreismeister@y...]
> Sent: Tuesday, March 11, 2003 11:26 AM
> To: antlr-interest@yahoogroups.com
> Subject: [antlr-interest] syn pred / lookahaed doesn't work
> 
> 
> Hi!
> 
> I have a grammar where the syn. pred. doesn't seem to work. I can 
> post the whole grammar but the following example should be ok to 
> recognize the problem.
> 
> compilationUnit : statementList (function)*;
> 
> function : ("static"|"init"|"exit")? "function" identName crlf
>            statementList;
> 
> identName : IDENTIFIER;
> 
> crlf : SEMICOLON | NEWLINE;
> 
> statementList: (statement)*;  // <<< here I get non-determinisme 
>                               // warning upon
>                               // k=1 "static"|"exit"
>                               // k=2 
> IDENTIFIER|"function"|NEWLINE|SEMICOLON
> 
> statement: ...
>          | variableDeclaration
>          | ...
>          | "exit" crlf
>          | ...
>          ;
> 
> variableDeclaration : ("public"|"private"|"local"|"static") 
identName 
> crlf;
> 
> 
> I tried to reslove things with syn. pred. but whatever I do I 
> couldn't remove the warning. The generated parser also doen't work 
> correct.
> 
> What can I do to resolve the warning?
> 
> Thanks, Gunnar
> 
> 
>  
> 
> Your use of Yahoo! Groups is subject to 
http://docs.yahoo.com/info/terms/


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From kreismeister at yahoo.de  Tue Mar 11 12:06:14 2003
From: kreismeister at yahoo.de (Gunnar Wagenknecht)
Date: Mon Dec 20 16:15:26 2004
Subject: [antlr-interest] Re: syn pred / lookahaed doesn't work
In-Reply-To: <b4leqo+77or@eGroups.com>
Message-ID: <b4lfjm+1005r@eGroups.com>

--- In antlr-interest@yahoogroups.com, "cintyram" <cintyram@y...> 
wrote:

> from what you have given i assume the follwoing :
> 1. a compilation unit is a statement list followed by zero or more
> functions 
> 2. a statementlist is a list of zero or more statements
> 3. and a statement is a variable declaration or "exit" or something
> else ..

That is right. The functions are function declarations. All 
statements before the first function declaration belongs to a non-
declared "main" function and all statements after a function 
declaration belongs to the declared function.
 

> in this case it is clear that for a look ahead of 1, ie  at k=1 ,

That's why I configured a lookahead of "k=2".

> also  i am asking out of personal suspicion did you have an alt 
which
> means that a statement rule can match a function also?
> like
>   statement : other alts
>                | function    /// do you have this in your grammar?
>                | other alts 
>           ;

No, this is not allowed. A statement is not allowed to have a 
function declaration.
 
> however i suggest that you should post the actual predicates that 
you
> used, to know why they dont seem to work ;

I tried LA in the statement rule to ensure a variable declaration is 
only matched if (("static"|"public"|...) IDENTIFIER) is found. But 
the generated parser ignores this completly.

The parser only contains a switch-case block in the statement rule 
similar to:

switch(LA(1))
{
...
case LITERAL_static:
   variableDeclaration();

...
}

So any "static" causes the parser to matched asvariable declaration. 
It doesn't care about a "function" or IDENTIFIER after this.

Cu, Gunnar




 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From kreismeister at yahoo.de  Tue Mar 11 12:09:20 2003
From: kreismeister at yahoo.de (Gunnar Wagenknecht)
Date: Mon Dec 20 16:15:26 2004
Subject: [antlr-interest] Re: syn pred / lookahaed doesn't work
In-Reply-To: <170826586F3BD511910D0200C110AAA8054021F4@memail03.bco-home.com>
Message-ID: <b4lfpg+bpn0@eGroups.com>


> statementList: ((statement)=>statement)* ;

I tried this but the non-determinisme warning is still there and 
there is another warning saying somthing gist to "single syn. pred. 
that doesn't make sence".

Cu, Gunnar


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From mzukowski at yci.com  Tue Mar 11 12:13:46 2003
From: mzukowski at yci.com (mzukowski@yci.com)
Date: Mon Dec 20 16:15:26 2004
Subject: [antlr-interest] Re: syn pred / lookahaed doesn't work
Message-ID: <170826586F3BD511910D0200C110AAA8054021F5@memail03.bco-home.com>

Look at the code, and try it out too.  The single syn pred is a bogus
warning.

Monty

-----Original Message-----
From: Gunnar Wagenknecht [mailto:kreismeister@yahoo.de]
Sent: Tuesday, March 11, 2003 12:09 PM
To: antlr-interest@yahoogroups.com
Subject: [antlr-interest] Re: syn pred / lookahaed doesn't work



> statementList: ((statement)=>statement)* ;

I tried this but the non-determinisme warning is still there and 
there is another warning saying somthing gist to "single syn. pred. 
that doesn't make sence".

Cu, Gunnar


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From cintyram at yahoo.com  Tue Mar 11 13:49:23 2003
From: cintyram at yahoo.com (cintyram)
Date: Mon Dec 20 16:15:26 2004
Subject: [antlr-interest] Re: syn pred / lookahaed doesn't work
In-Reply-To: <170826586F3BD511910D0200C110AAA8054021F5@memail03.bco-home.com>
Message-ID: <b4lll4+omhq@eGroups.com>

hi gunnar,
 actually though you get some warnings .. the parser is generated ..
and you can go ahead and try usin git;
if it crashes on any data sets.. then you can work backwards to see
where the error is and fix it;
also to turn of this bogus warning you have two options .. one is
explicitly turn  it off by setting the appropriate option
or by providing an alternative which can be used in case the predicate
fails ..
but if you have stopped using the parser because some warnings are
still there, you might want to start using it ..
cheers
ram

--- In antlr-interest@yahoogroups.com, mzukowski@y... wrote:
> Look at the code, and try it out too.  The single syn pred is a bogus
> warning.
> 
> Monty
> 
> -----Original Message-----
> From: Gunnar Wagenknecht [mailto:kreismeister@y...]
> Sent: Tuesday, March 11, 2003 12:09 PM
> To: antlr-interest@yahoogroups.com
> Subject: [antlr-interest] Re: syn pred / lookahaed doesn't work
> 
> 
> 
> > statementList: ((statement)=>statement)* ;
> 
> I tried this but the non-determinisme warning is still there and 
> there is another warning saying somthing gist to "single syn. pred. 
> that doesn't make sence".
> 
> Cu, Gunnar
> 
> 
>  
> 
> Your use of Yahoo! Groups is subject to
http://docs.yahoo.com/info/terms/


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From cintyram at yahoo.com  Tue Mar 11 13:56:56 2003
From: cintyram at yahoo.com (cintyram)
Date: Mon Dec 20 16:15:26 2004
Subject: [antlr-interest] Re: error message
In-Reply-To: <b4l78f+u14o@eGroups.com>
Message-ID: <b4lm38+elqf@eGroups.com>

sorry for replying to my own post agian!!
 this error ocurred as i was passing a subtree to the rule which could
not match it ;
it was gone after the mismatch in the tree structure and the tree
grammar was removed ..
thanks
cheers
ram


--- In antlr-interest@yahoogroups.com, "cintyram" <cintyram@y...> wrote:
> <AST>: Mismatched Token: expecting any AST node
> 
> i am trying to get a subtree through getNextSibling,
>  and pass it to a tree parser ,
> but i get the above error message ;
> this is due to a recognition exception being caught, but i am not able
> to identify what went wrong;
> any hlp is greatfully appreciated
> thanks
> ram


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From reserve78705 at yahoo.com  Tue Mar 11 14:33:08 2003
From: reserve78705 at yahoo.com (reserve78705)
Date: Mon Dec 20 16:15:26 2004
Subject: [antlr-interest] How to deal with subset characters for letter-Thanks in advance
Message-ID: <b4lo74+p2g1@eGroups.com>

Hi,
I have been trying to use the following grammar rule:
marker: E | S | L;

Then, in the lexer, I have two rules:
LETTER: (a..z| A.. Z);
E: 'e';
S: 's';
L: 'l';

But the antlr give the nondeterminism error for that. Does anyone 
have some ideas for it? Thanks in advance.

Yu-



 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From mzukowski at yci.com  Tue Mar 11 14:34:56 2003
From: mzukowski at yci.com (mzukowski@yci.com)
Date: Mon Dec 20 16:15:26 2004
Subject: [antlr-interest] How to deal with subset characters for lette
	r-Thanks in advance
Message-ID: <170826586F3BD511910D0200C110AAA8054021FA@memail03.bco-home.com>

E, S and L need to be keywords, not separate lexer rules.

Monty

-----Original Message-----
From: reserve78705 [mailto:reserve78705@yahoo.com]
Sent: Tuesday, March 11, 2003 2:33 PM
To: antlr-interest@yahoogroups.com
Subject: [antlr-interest] How to deal with subset characters for
letter-Thanks in advance


Hi,
I have been trying to use the following grammar rule:
marker: E | S | L;

Then, in the lexer, I have two rules:
LETTER: (a..z| A.. Z);
E: 'e';
S: 's';
L: 'l';

But the antlr give the nondeterminism error for that. Does anyone 
have some ideas for it? Thanks in advance.

Yu-



 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From albert.huh at embarcadero-ca.com  Tue Mar 11 16:16:34 2003
From: albert.huh at embarcadero-ca.com (Albert Huh)
Date: Mon Dec 20 16:15:26 2004
Subject: [antlr-interest] Re: syn pred / lookahaed doesn't work
Message-ID: <0881AC7F2F339C40BC6F7983D1E0BEC97683B8@mail2k.embarcadero-ca.com>

simply using a syntactic predicate in a loop will not work here.

Ambiguity with k=1
------------------
1) if you see the word "static", it can belong to BOTH the function rule and the variableDeclaration rule.
2) similarly, if you see the word "exit", it can belong to both the function rule and the statement rule.
3) the variableDeclaration rule reduces to the statement rule i.e. they are the same rule.
4) so a statement looks exactly like a function at k=1

ambiguity with k=2
------------------
1) the second token of a function can be either an IDENTIFIER or "function"
2) the second token of a variableDeclaration is an IDENTIFIER
3) we know that variableDeclaration is a statement
4) so a statement looks exactly like a function at k=2


i'm probably not stating anything new here to anybody.  i *think* this is a linear approximation issue, can somebody else confirm this?

in any case, it is pretty clear that a variableDeclaration can't be confused with a function (to us humans anyways =).

i think this was already suggested, but one strategy is to just test it to make sure it does the right thing.  odds are, you can just ignore this warning and turn it off and antlr will do the right thing.

alternatively, you can get rid of teh warning with a combination of recursion and syntactic predicates.  try rewriting your statementList rule like this:

statementList:
  (statement statement)=>statement statementList
  |(statement)=>statement
  | //empty rule, do nothing
;


p's
albert

-----Original Message-----
From: Gunnar Wagenknecht [mailto:kreismeister@yahoo.de]
Sent: Tuesday, March 11, 2003 3:09 PM
To: antlr-interest@yahoogroups.com
Subject: [antlr-interest] Re: syn pred / lookahaed doesn't work



> statementList: ((statement)=>statement)* ;

I tried this but the non-determinisme warning is still there and 
there is another warning saying somthing gist to "single syn. pred. 
that doesn't make sence".

Cu, Gunnar


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 



 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From lgc at mail1.jpl.nasa.gov  Tue Mar 11 17:03:16 2003
From: lgc at mail1.jpl.nasa.gov (lgcraymer)
Date: Mon Dec 20 16:15:26 2004
Subject: [antlr-interest] Re: syn pred / lookahaed doesn't work
In-Reply-To: <b4ld8s+joom@eGroups.com>
Message-ID: <b4m10k+7kjo@eGroups.com>

This is one of those situations where recursion works.  Try

statementList:
      (statement)=> (statement statementList)
      |
      ;

--Loring

--- In antlr-interest@yahoogroups.com, "Gunnar Wagenknecht" 
<kreismeister@y...> wrote:
> Hi!
> 
> I have a grammar where the syn. pred. doesn't seem to work. I can 
> post the whole grammar but the following example should be ok to 
> recognize the problem.
> 
> compilationUnit : statementList (function)*;
> 
> function : ("static"|"init"|"exit")? "function" identName crlf
>            statementList;
> 
> identName : IDENTIFIER;
> 
> crlf : SEMICOLON | NEWLINE;
> 
> statementList: (statement)*;  // <<< here I get non-determinisme 
>                               // warning upon
>                               // k=1 "static"|"exit"
>                               // k=2 
> IDENTIFIER|"function"|NEWLINE|SEMICOLON
> 
> statement: ...
>          | variableDeclaration
>          | ...
>          | "exit" crlf
>          | ...
>          ;
> 
> variableDeclaration : ("public"|"private"|"local"|"static") 
identName 
> crlf;
> 
> 
> I tried to reslove things with syn. pred. but whatever I do I 
> couldn't remove the warning. The generated parser also doen't work 
> correct.
> 
> What can I do to resolve the warning?
> 
> Thanks, Gunnar


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From rcreekmore_2003 at yahoo.com  Tue Mar 11 20:47:28 2003
From: rcreekmore_2003 at yahoo.com (rcreekmore_2003)
Date: Mon Dec 20 16:15:26 2004
Subject: [antlr-interest] Examples of ANTLR Grammars for Parsing W3C Log Files
Message-ID: <b4me50+rmvv@eGroups.com>

New user here...

Does anyone know where I can find an example of an ANTLR grammar for 
parsing W3C log files?

I checked the samples in ANTLR 2.7.2 but couldn't find anything 
similar to what I am looking for.

Thanks!

RC


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From kreismeister at yahoo.de  Tue Mar 11 21:25:56 2003
From: kreismeister at yahoo.de (Gunnar Wagenknecht)
Date: Mon Dec 20 16:15:26 2004
Subject: [antlr-interest] Re: syn pred / lookahaed doesn't work
In-Reply-To: <0881AC7F2F339C40BC6F7983D1E0BEC97683B8@mail2k.embarcadero-ca.com>
Message-ID: <b4mgd4+tg40@eGroups.com>


--- In antlr-interest@yahoogroups.com, "Albert Huh" <albert.huh@e...> 
wrote:

> ambiguity with k=2
> ------------------
> 1) the second token of a function can be either an IDENTIFIER 
or "function"
> 2) the second token of a variableDeclaration is an IDENTIFIER
> 3) we know that variableDeclaration is a statement
> 4) so a statement looks exactly like a function at k=2

Mhm, but I thought this is not an ambiguity because if the second 
token of a function is an IDENTIFIER than the first token of a 
function is NOT "static" or "ecit".

> i'm probably not stating anything new here to anybody.  i *think* 
this is a linear approximation issue, can somebody else confirm this?

What the hack is that?

> alternatively, you can get rid of teh warning with a combination of 
recursion and syntactic predicates.  try rewriting your statementList 
rule like this:
> 
> statementList:
>   (statement statement)=>statement statementList
>   |(statement)=>statement
>   | //empty rule, do nothing
> ;


Thank you, that was something I was trying without getting warnings 
but I couldn't finished it. Now I will try it. I'm wondering if this 
construct slows down the generated parser in a very bad way. That's 
why I threw away this solution.

Cu, Gunnar


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From fedot at stockworm.com  Wed Mar 12 07:46:21 2003
From: fedot at stockworm.com (fedot)
Date: Mon Dec 20 16:15:26 2004
Subject: [antlr-interest] Re: need help designing a simple calculator
In-Reply-To: <001d01c2e77d$1d91fc30$6501a8c0@andrew>
Message-ID: <b4nkod+lo4h@eGroups.com>

Andrew,

Thank you for pointing me at your web site. Looking at your grammar 
files turned out to be a great inspiration. Being new to ANTLR, 
grammars included with the package itself were a bit too much for 
me. Yours were simple enough to understand yet complex enough to be 
useful.

I would recommend that anyone fresh trying to get a grasp of ANTLR 
should look at Andrew's calculator sources.

Thanks again!

--- In antlr-interest@yahoogroups.com, "Andrew Deren" <andrew@a...> 
wrote:
> You can look at my calculator example/implenentation. I used antlr 
for that
> application and have implementation in java and C#. I have a very 
simple
> example (calculator with variables and functions) and then took 
that into
> more of a language. I do not use the antlr tree building, but I'm 
building
> my own custom made AST.
> You can download it from http://www.adersoftware.com/?
page=compilers
> Andrew


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From andrew at adersoftware.com  Wed Mar 12 07:50:37 2003
From: andrew at adersoftware.com (Andrew Deren)
Date: Mon Dec 20 16:15:26 2004
Subject: [antlr-interest] Re: need help designing a simple calculator
References: <b4nkod+lo4h@eGroups.com>
Message-ID: <000b01c2e8af$209b6190$6501a8c0@andrew>

Thank You. I was new to antlr as well when I started doing it. It seems
antlr comes with good number of grammars, but not enough for learning how to
use them.
Andrew

----- Original Message -----
From: "fedot" <fedot@stockworm.com>
To: <antlr-interest@yahoogroups.com>
Sent: Wednesday, March 12, 2003 9:46 AM
Subject: [antlr-interest] Re: need help designing a simple calculator


> Andrew,
>
> Thank you for pointing me at your web site. Looking at your grammar
> files turned out to be a great inspiration. Being new to ANTLR,
> grammars included with the package itself were a bit too much for
> me. Yours were simple enough to understand yet complex enough to be
> useful.
>
> I would recommend that anyone fresh trying to get a grasp of ANTLR
> should look at Andrew's calculator sources.
>
> Thanks again!
>
> --- In antlr-interest@yahoogroups.com, "Andrew Deren" <andrew@a...>
> wrote:
> > You can look at my calculator example/implenentation. I used antlr
> for that
> > application and have implementation in java and C#. I have a very
> simple
> > example (calculator with variables and functions) and then took
> that into
> > more of a language. I do not use the antlr tree building, but I'm
> building
> > my own custom made AST.
> > You can download it from http://www.adersoftware.com/?
> page=compilers
> > Andrew
>
>
>
>
> Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/
>
>
>
>



 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From albert.huh at embarcadero-ca.com  Wed Mar 12 08:00:36 2003
From: albert.huh at embarcadero-ca.com (Albert Huh)
Date: Mon Dec 20 16:15:26 2004
Subject: [antlr-interest] Re: syn pred / lookahaed doesn't work
Message-ID: <0881AC7F2F339C40BC6F7983D1E0BEC97683B9@mail2k.embarcadero-ca.com>

You're right about it not being ambiguous.  It's an issue with the antlr code generation.

lgcraymer actually posted a version that is better than mine.  you should use his.

But ya, you're right about it not being ambiguous.  It's the way antlr generates code.  Check out http://www.antlr.org/doc/lexer.html#Limitations_of_Nongreedy_Subrules for an example.

The problem here is that the first thing can be either a function or a statement.  Look at the generated code and you will see how antlr decides to exit the loop.




-----Original Message-----
From: Gunnar Wagenknecht [mailto:kreismeister@yahoo.de]
Sent: Wednesday, March 12, 2003 12:26 AM
To: antlr-interest@yahoogroups.com
Subject: [antlr-interest] Re: syn pred / lookahaed doesn't work



--- In antlr-interest@yahoogroups.com, "Albert Huh" <albert.huh@e...> 
wrote:

> ambiguity with k=2
> ------------------
> 1) the second token of a function can be either an IDENTIFIER 
or "function"
> 2) the second token of a variableDeclaration is an IDENTIFIER
> 3) we know that variableDeclaration is a statement
> 4) so a statement looks exactly like a function at k=2

Mhm, but I thought this is not an ambiguity because if the second 
token of a function is an IDENTIFIER than the first token of a 
function is NOT "static" or "ecit".

> i'm probably not stating anything new here to anybody.  i *think* 
this is a linear approximation issue, can somebody else confirm this?

What the hack is that?

> alternatively, you can get rid of teh warning with a combination of 
recursion and syntactic predicates.  try rewriting your statementList 
rule like this:
> 
> statementList:
>   (statement statement)=>statement statementList
>   |(statement)=>statement
>   | //empty rule, do nothing
> ;


Thank you, that was something I was trying without getting warnings 
but I couldn't finished it. Now I will try it. I'm wondering if this 
construct slows down the generated parser in a very bad way. That's 
why I threw away this solution.

Cu, Gunnar


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 



 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From lgc at mail1.jpl.nasa.gov  Wed Mar 12 11:43:28 2003
From: lgc at mail1.jpl.nasa.gov (lgcraymer)
Date: Mon Dec 20 16:15:26 2004
Subject: [antlr-interest] Re: syn pred / lookahaed doesn't work
In-Reply-To: <0881AC7F2F339C40BC6F7983D1E0BEC97683B9@mail2k.embarcadero-ca.com>
Message-ID: <b4o2l0+opqq@eGroups.com>

One comment on code generation here:  internally, ANTLR rewrites
    ((foo)=>foo)*
as
    )    ((foo)=>foo)+
    | //nothing
    )

In the second form, the foo synpred does not make any sense and the 
error message that you get reports that face.  This could be fixed, 
but that is not likely to happen in ANTLR 2.

As far as a performance difference between the iterative version and 
the recursive version, the difference is negligible--the big penalty 
is  (statement)=>statement  which forces you to match statement twice 
for each call.

--Loring


--- In antlr-interest@yahoogroups.com, "Albert Huh" <albert.huh@e...> 
wrote:
> You're right about it not being ambiguous.  It's an issue with the 
antlr code generation.
> 
> lgcraymer actually posted a version that is better than mine.  you 
should use his.
> 
> But ya, you're right about it not being ambiguous.  It's the way 
antlr generates code.  Check out 
http://www.antlr.org/doc/lexer.html#Limitations_of_Nongreedy_Subrules 
for an example.
> 
> The problem here is that the first thing can be either a function or 
a statement.  Look at the generated code and you will see how antlr 
decides to exit the loop.
> 
> 
> 
> 
> -----Original Message-----
> From: Gunnar Wagenknecht [mailto:kreismeister@y...]
> Sent: Wednesday, March 12, 2003 12:26 AM
> To: antlr-interest@yahoogroups.com
> Subject: [antlr-interest] Re: syn pred / lookahaed doesn't work
> 
> 
> 
> --- In antlr-interest@yahoogroups.com, "Albert Huh" 
<albert.huh@e...> 
> wrote:
> 
> > ambiguity with k=2
> > ------------------
> > 1) the second token of a function can be either an IDENTIFIER 
> or "function"
> > 2) the second token of a variableDeclaration is an IDENTIFIER
> > 3) we know that variableDeclaration is a statement
> > 4) so a statement looks exactly like a function at k=2
> 
> Mhm, but I thought this is not an ambiguity because if the second 
> token of a function is an IDENTIFIER than the first token of a 
> function is NOT "static" or "ecit".
> 
> > i'm probably not stating anything new here to anybody.  i *think* 
> this is a linear approximation issue, can somebody else confirm 
this?
> 
> What the hack is that?
> 
> > alternatively, you can get rid of teh warning with a combination 
of 
> recursion and syntactic predicates.  try rewriting your 
statementList 
> rule like this:
> > 
> > statementList:
> >   (statement statement)=>statement statementList
> >   |(statement)=>statement
> >   | //empty rule, do nothing
> > ;
> 
> 
> Thank you, that was something I was trying without getting warnings 
> but I couldn't finished it. Now I will try it. I'm wondering if this 
> construct slows down the generated parser in a very bad way. That's 
> why I threw away this solution.
> 
> Cu, Gunnar
> 
> 
>  
> 
> Your use of Yahoo! Groups is subject to 
http://docs.yahoo.com/info/terms/


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From kreismeister at yahoo.de  Wed Mar 12 12:59:19 2003
From: kreismeister at yahoo.de (Gunnar Wagenknecht)
Date: Mon Dec 20 16:15:26 2004
Subject: [antlr-interest] Re: syn pred / lookahaed doesn't work
In-Reply-To: <b4mgd4+tg40@eGroups.com>
Message-ID: <b4o737+92am@eGroups.com>

--- In antlr-interest@yahoogroups.com, "Gunnar Wagenknecht" 

> > statementList:
> >   (statement statement)=>statement statementList
> >   |(statement)=>statement
> >   | //empty rule, do nothing
> > ;

As expected, recursion solved the problem.

Cu, Gunnar


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From rcreekmore_2003 at yahoo.com  Wed Mar 12 14:01:29 2003
From: rcreekmore_2003 at yahoo.com (rcreekmore_2003)
Date: Mon Dec 20 16:15:26 2004
Subject: [antlr-interest] Building the ANTLR C# Runtime using Visual Studio .NET
Message-ID: <b4oanp+oc0f@eGroups.com>

Has anyone ever done this? The link from the main ANTLR page is dead.


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From richard.ney at aspect.com  Wed Mar 12 15:06:59 2003
From: richard.ney at aspect.com (Ney, Richard)
Date: Mon Dec 20 16:15:26 2004
Subject: [antlr-interest] Building the ANTLR C# Runtime using Visual S
	tudio .NET
Message-ID: <0F9CBE7F81945C4BB7A32BE6E7656EE072292C@sac1exch3.aspect.com>

The C# generator for ANTLR is now included in the release version of 2.7.2
at http://www.antlr.org/download

-Richard

-----Original Message-----
From: rcreekmore_2003 [mailto:rcreekmore_2003@yahoo.com] 
Sent: Wednesday, March 12, 2003 2:01 PM
To: antlr-interest@yahoogroups.com
Subject: [antlr-interest] Building the ANTLR C# Runtime using Visual Studio
.NET

Has anyone ever done this? The link from the main ANTLR page is dead.


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From richard.ney at aspect.com  Wed Mar 12 15:10:08 2003
From: richard.ney at aspect.com (Ney, Richard)
Date: Mon Dec 20 16:15:26 2004
Subject: [antlr-interest] Changing AST order in a complex rule
Message-ID: <0F9CBE7F81945C4BB7A32BE6E7656EE072292D@sac1exch3.aspect.com>

I have a simple SQL grammar that has the top rule of:

 

select_statement 

      :     (select_clause table_reference_list (whereClause)?
(group_clause)? (order_clause)?)

      ;

 

Now this creates a basic AST with the elements as the root nodes. Now I want
to change the order of the AST so me tree parser hits the
table_reference_list as its first element. How would I change this rule to
make the AST outcome?

 

-Richard

 

----------------------------------------------------------------------------
------------------------

Richard Ney                                                    Aspect
Communications

Principal Software Engineer

< <http://www.aspect.com/> http://www.aspect.com>
Main:  408.325.2200

< <mailto:richard.ney@aspect.com> mailto:richard.ney@aspect.com>
SJ Office: 408.325.2464

 
Home Office: 916.797.9602

----------------------------------------------------------------------------
------------------------

 

The Three Laws of Infernal Dynamics:
1. An object in motion will always be headed in the wrong direction.
2. An object at rest will always be in the wrong place.
3. The energy required to change either of these states will always be more
than you wish to expend, but never so much as to make the task appear
prospectively impossible.

 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20030312/eb598d67/attachment.html
From richard.ney at aspect.com  Wed Mar 12 16:52:44 2003
From: richard.ney at aspect.com (Ney, Richard)
Date: Mon Dec 20 16:15:26 2004
Subject: [antlr-interest] Changing AST order in a complex rule
Message-ID: <0F9CBE7F81945C4BB7A32BE6E7656EE072292F@sac1exch3.aspect.com>

Never mind, I should have done a little more RTFM. Taking over tree
construction works well for this.

 

select_statement! 

      :     (sc:select_clause trl:table_reference_list (wc:whereClause)?
(gc:group_clause)? (oc:order_clause)?)

      {

            #select_statement = #(select_statement, trl, sc, wc, gc, oc);

      }

      ;

 

-Richard

 

-----Original Message-----
From: Ney, Richard [mailto:richard.ney@aspect.com] 
Sent: Wednesday, March 12, 2003 3:10 PM
To: antlr-interest@yahoogroups.com
Subject: [antlr-interest] Changing AST order in a complex rule

 

I have a simple SQL grammar that has the top rule of:

 

select_statement 

      :     (select_clause table_reference_list (whereClause)?
(group_clause)? (order_clause)?)

      ;

 

Now this creates a basic AST with the elements as the root nodes. Now I want
to change the order of the AST so me tree parser hits the
table_reference_list as its first element. How would I change this rule to
make the AST outcome?

 

-Richard

 

----------------------------------------------------------------------------
------------------------

Richard Ney                                                    Aspect
Communications

Principal Software Engineer

< <http://www.aspect.com/> http://www.aspect.com>
Main:  408.325.2200

< <mailto:richard.ney@aspect.com> mailto:richard.ney@aspect.com>
SJ Office: 408.325.2464

 
Home Office: 916.797.9602

----------------------------------------------------------------------------
------------------------

 

The Three Laws of Infernal Dynamics:
1. An object in motion will always be headed in the wrong direction.
2. An object at rest will always be in the wrong place.
3. The energy required to change either of these states will always be more
than you wish to expend, but never so much as to make the task appear
prospectively impossible.

 


Your use of Yahoo! Groups is subject to the Yahoo! Terms of Service
<http://docs.yahoo.com/info/terms/> . 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20030312/91438840/attachment.html
From matt at cortexebusiness.com.au  Wed Mar 12 19:20:06 2003
From: matt at cortexebusiness.com.au (Matt Quail)
Date: Mon Dec 20 16:15:26 2004
Subject: [antlr-interest] Help needed upgrading java.g to support Generics
Message-ID: <3E6FF8E6.7090801@cortexebusiness.com.au>

Hi all,

I'm trying to update the java.g grammar with support for Generics (as defined 
by JSR14, grab the pdf spec at 
http://www.jcp.org/aboutJava/communityprocess/review/jsr014/index.html ). My 
intent is to upgrade the grammar and submit a patch back to the "offical" 
java.g; so any help will hopefully help us all.

The MAJOR problem is that JDK1.5 will allow this:

List<List<String>> x = ...;
                 ^^
The problem is that the lexer will match ">>" as a shift-right token, but we 
really want to parse it as two GT tokens in this context. The JSR pdf has a BNF 
grammar that solves this problem, at it is that pattern that I am trying to 
implement in ANTLR. (A re-cap of this trick is given at the end of the email.)

(Note that there is also a problem lexing ">>>", but lets just confine 
ourselves to ">>" for the moment.)

Okay, after a few false starts, I've come up with the following grammar (note 
that it is not the full JavaRecogniser parser, just enough to parse a SEMICOLON 
seperated list of types) (it uses the standard JavaLexer):

--------
compilationUnit
	:
         ( type SEMI ) *
		EOF!
	;

type
	:	referenceType
	|	builtInType (arrayDecl)?
	;

referenceType:
         identifier
         (  arrayDecl
         |  LT referenceTypeList1
         )?
     ;

referenceTypeList1:
         (referenceType1)=> referenceType1
     |
         (options{greedy=false;}: referenceType COMMA)+
         referenceType1
     ;

referenceType1:
         (referenceType GT)=> referenceType GT
     |
         identifier LT referenceTypeList2
     ;

referenceTypeList2 :
         (referenceType2)=> referenceType2
     |
         (options{greedy=false;}: referenceType COMMA)+
         referenceType2
     ;

referenceType2:
         referenceType SR
     ;

arrayDecl:
         (LBRACK RBRACK)+
     ;
// The primitive types.
builtInType
	:	"void"
	|	"boolean"
	|	"byte"
	|	"char"
	|	"short"
	|	"int"
	|	"float"
	|	"long"
	|	"double"
	;

identifier
	:	IDENT ( DOT^ IDENT)*
	;
--------

This grammar will sucessfully parse these constructs:
--------
String;
java.lang.String;
int;
float;
int[];
String[];
float[][][];
List<String>;
List<String[]>;
List<List<String[]> >;
List<List<String[]>>;

Map<String,Integer>;
Map<String,List<Integer> >;
Map<String,List<Integer>>;
Map<List<Integer>,String>;
Map<List<Integer>,List<String>>;

Map3<String,Integer,Float>;

Map<Map<String,String>,Map3<String,Integer,Float>>;
Map<List<String>,List<Integer>>;
--------

But it will not parse these:
Map3<List<String>,List<Integer>,List<Float>>;
Map3<String,List<Integer>,Float>;

The errors are:
G1.java:20:18: unexpected token: Integer
and
G1.java:24:24: unexpected token: Integer

Now, I can see why this is happening, it is caused by my non-greedy rules in 
referenceTypeList1 and referenceTypeList2. But I need them to be non-greedy (in 
some fashion), because I don't want them to match the last "referenceType" that 
  preceeds the next GT or SR token.

(Making them both greedy means that it matches too many times...)

I'm starting to get to the limits of my understanding of ANTLR... I started 
thinking it was a look-ahead problem... but it really requires "lots" of 
lookahead, that's why I have those syntactic predicates everywhere).

Any help will be greatly appreciated! Have I gone down the wrong track?

=Matt

PS: The 'trick' JSR14 uses to parse ">>" and ">>>":
The 'naive' grammar for parameterized type declarations (using the notation 
used in the JLS) is:

ReferenceType ::= ClassOrInterfaceType
                 | ArrayType
                 | TypeVariable

TypeVariable ::= Identifier

ClassOrInterfaceType ::= ClassOrInterface TypeArgumentsOpt

ClassOrInterface ::= Identifier
                    | ClassOrInterfaceType . Identifier

TypeArguments ::= < ReferenceTypeList >

ReferenceTypeList ::= ReferenceType
                     | ReferenceTypeList , ReferenceType


The "trick" is as folows (copied verbatim from the JSR14 spec)

ReferenceType ::= ClassOrInterfaceType
                 | ArrayType
                 | TypeVariable

ClassOrInterfaceType ::= Name
                        | Name < ReferenceTypeList1

ReferenceTypeList1 ::= ReferenceType1
                      | ReferenceTypeList , ReferenceType1

ReferenceType1 ::= ReferenceType >
                  | Name < ReferenceTypeList2

ReferenceTypeList2 ::= ReferenceType2
                      | ReferenceTypeList , ReferenceType2

ReferenceType2 ::= ReferenceType >>
                  | Name < ReferenceTypeList3

ReferenceTypeList3 ::= ReferenceType3
                      | ReferenceTypeList , ReferenceType3

ReferenceType3 ::= ReferenceType >>>



 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From rcreekmore_2003 at yahoo.com  Wed Mar 12 20:37:47 2003
From: rcreekmore_2003 at yahoo.com (rcreekmore_2003)
Date: Mon Dec 20 16:15:27 2004
Subject: [antlr-interest] Linking to the ANTLR C# Runtime
Message-ID: <b4p1ur+ioqd@eGroups.com>

Ok, now that I've got the ANTLR C# runtime, I need to be able to 
link to it. The directions in C:\antlr-2.7.2\doc\csharp-runtime.html 
don't seem clear to me on this. Am I missing something (other 
documentation maybe)?

I am assuming that the directory I need to link to is the lib/csharp 
subdirectory of the ANTLR distribution. Unfortunately, I'm a little 
fuzzy on the details.

Thanks!


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From kyungsunh at yahoo.com  Wed Mar 12 20:44:40 2003
From: kyungsunh at yahoo.com (kyungsunh)
Date: Mon Dec 20 16:15:27 2004
Subject: [antlr-interest] Nondeterminism error for high rules
Message-ID: <b4p2bo+1065m@eGroups.com>

Hi,
Antlr continuously shows me the nondeterminism error for high rules. 

For example, 
command_or_definition
		:	command
		|	definition
 		|	syntax_definition
		;
The three alternative rules starts with the same token and further 
some of the subrules also have the same tokens and so on. 
How can I solve this kind of errors?



 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From gitadut at yahoo.co.uk  Thu Mar 13 05:22:08 2003
From: gitadut at yahoo.co.uk (gitadut)
Date: Mon Dec 20 16:15:27 2004
Subject: [antlr-interest] (unknown)
Message-ID: <b4q0m0+i3gr@eGroups.com>

Antlr behaves abnormally when I want to describe the production rules 
in Lexer part reusing some of the rules already defined by me. 

Like METASTRING :
                 ((POP) | (STRING) | "/")
                 ;
When I have defined POP in some way. 

Next is how can I parse some reserve words by Antlr?
I've describes in Parser part 

Reserved :
          (CIRCUIT)
          ;
Then in Lexer 

CIRCUIT
       : "Circuit"
        ;
But it is not solving my problem. 
Are there any suggestions or comments from anyone?
Thanks in advance. 

Gita



 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From albert.huh at embarcadero-ca.com  Thu Mar 13 08:03:12 2003
From: albert.huh at embarcadero-ca.com (Albert Huh)
Date: Mon Dec 20 16:15:27 2004
Subject: [antlr-interest] Nondeterminism error for high rules
Message-ID: <0881AC7F2F339C40BC6F7983D1E0BEC9730814@mail2k.embarcadero-ca.com>

Try using syntactic predicates,

command_or_definition:
	(command)=>command
	|(definition)=>definition
 	|syntax_definition
;


-----Original Message-----
From: kyungsunh [mailto:kyungsunh@yahoo.com]
Sent: Wednesday, March 12, 2003 11:45 PM
To: antlr-interest@yahoogroups.com
Subject: [antlr-interest] Nondeterminism error for high rules


Hi,
Antlr continuously shows me the nondeterminism error for high rules. 

For example, 
command_or_definition
		:	command
		|	definition
 		|	syntax_definition
		;
The three alternative rules starts with the same token and further 
some of the subrules also have the same tokens and so on. 
How can I solve this kind of errors?



 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 



 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From mzukowski at yci.com  Thu Mar 13 08:15:26 2003
From: mzukowski at yci.com (mzukowski@yci.com)
Date: Mon Dec 20 16:15:27 2004
Subject: [antlr-interest] Nondeterminism error for high rules
Message-ID: <170826586F3BD511910D0200C110AAA805402209@memail03.bco-home.com>

Using syntactic predicates:

command_or_definition
		:	(command)=>command
		|	(definition)=>definition
 		|	syntax_definition
		;

Also be sure to study the generated code to see the lookahead tests which
antlr calculated to decide which alternative to choose.  From there you can
sometimes figure out a simpler syntactic predicate to use.

Monty

-----Original Message-----
From: kyungsunh [mailto:kyungsunh@yahoo.com]
Sent: Wednesday, March 12, 2003 8:45 PM
To: antlr-interest@yahoogroups.com
Subject: [antlr-interest] Nondeterminism error for high rules


Hi,
Antlr continuously shows me the nondeterminism error for high rules. 

For example, 
command_or_definition
		:	command
		|	definition
 		|	syntax_definition
		;
The three alternative rules starts with the same token and further 
some of the subrules also have the same tokens and so on. 
How can I solve this kind of errors?



 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From mzukowski at yci.com  Thu Mar 13 08:22:12 2003
From: mzukowski at yci.com (mzukowski@yci.com)
Date: Mon Dec 20 16:15:27 2004
Subject: [antlr-interest] (unknown)
Message-ID: <170826586F3BD511910D0200C110AAA80540220B@memail03.bco-home.com>

read the docs on keywords and also how "protected" rules work in the lexer.

Monty

-----Original Message-----
From: gitadut [mailto:gitadut@yahoo.co.uk]
Sent: Thursday, March 13, 2003 5:22 AM
To: antlr-interest@yahoogroups.com
Subject: [antlr-interest] (unknown)


Antlr behaves abnormally when I want to describe the production rules 
in Lexer part reusing some of the rules already defined by me. 

Like METASTRING :
                 ((POP) | (STRING) | "/")
                 ;
When I have defined POP in some way. 

Next is how can I parse some reserve words by Antlr?
I've describes in Parser part 

Reserved :
          (CIRCUIT)
          ;
Then in Lexer 

CIRCUIT
       : "Circuit"
        ;
But it is not solving my problem. 
Are there any suggestions or comments from anyone?
Thanks in advance. 

Gita



 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From mzukowski at yci.com  Thu Mar 13 08:49:18 2003
From: mzukowski at yci.com (mzukowski@yci.com)
Date: Mon Dec 20 16:15:27 2004
Subject: [antlr-interest] Help needed upgrading java.g to support Gene
	rics
Message-ID: <170826586F3BD511910D0200C110AAA80540220D@memail03.bco-home.com>

I'm not sure that's the best approach.  I haven't thought it through but it
seems like it would work in the LR world but not in the LL world.  I would
suggest trying this instead:

1. Eliminate ">>", ">>=", ">>>", and ">>>=" as tokens, make them all ">".
Then make parser rules sr: ">" ">" and zr:">" ">" ">".  Modify grammar to
use grammar rules instead of the tokens for those operators.

2. Compile, inspect and test.  Syntactic predicates may be necessary and may
need to be manually hoisted.

3. If that works then add in your generic stuff and test it out.  Only use
">" for your generics, don't use sr or zr.

4. There might be a better approach than this.  Can generics be initialized?
Then you have to worry about ">>=" as well.

Email me privately if you would like to discuss this over the phone.

Monty

-----Original Message-----
From: Matt Quail [mailto:matt@cortexebusiness.com.au]
Sent: Wednesday, March 12, 2003 7:20 PM
To: antlr-interest@yahoogroups.com
Subject: [antlr-interest] Help needed upgrading java.g to support
Generics


Hi all,

I'm trying to update the java.g grammar with support for Generics (as
defined 
by JSR14, grab the pdf spec at 
http://www.jcp.org/aboutJava/communityprocess/review/jsr014/index.html ). My

intent is to upgrade the grammar and submit a patch back to the "offical" 
java.g; so any help will hopefully help us all.

The MAJOR problem is that JDK1.5 will allow this:

List<List<String>> x = ...;
                 ^^
The problem is that the lexer will match ">>" as a shift-right token, but we

really want to parse it as two GT tokens in this context. The JSR pdf has a
BNF 
grammar that solves this problem, at it is that pattern that I am trying to 
implement in ANTLR. (A re-cap of this trick is given at the end of the
email.)

(Note that there is also a problem lexing ">>>", but lets just confine 
ourselves to ">>" for the moment.)

Okay, after a few false starts, I've come up with the following grammar
(note 
that it is not the full JavaRecogniser parser, just enough to parse a
SEMICOLON 
seperated list of types) (it uses the standard JavaLexer):

--------
compilationUnit
	:
         ( type SEMI ) *
		EOF!
	;

type
	:	referenceType
	|	builtInType (arrayDecl)?
	;

referenceType:
         identifier
         (  arrayDecl
         |  LT referenceTypeList1
         )?
     ;

referenceTypeList1:
         (referenceType1)=> referenceType1
     |
         (options{greedy=false;}: referenceType COMMA)+
         referenceType1
     ;

referenceType1:
         (referenceType GT)=> referenceType GT
     |
         identifier LT referenceTypeList2
     ;

referenceTypeList2 :
         (referenceType2)=> referenceType2
     |
         (options{greedy=false;}: referenceType COMMA)+
         referenceType2
     ;

referenceType2:
         referenceType SR
     ;

arrayDecl:
         (LBRACK RBRACK)+
     ;
// The primitive types.
builtInType
	:	"void"
	|	"boolean"
	|	"byte"
	|	"char"
	|	"short"
	|	"int"
	|	"float"
	|	"long"
	|	"double"
	;

identifier
	:	IDENT ( DOT^ IDENT)*
	;
--------

This grammar will sucessfully parse these constructs:
--------
String;
java.lang.String;
int;
float;
int[];
String[];
float[][][];
List<String>;
List<String[]>;
List<List<String[]> >;
List<List<String[]>>;

Map<String,Integer>;
Map<String,List<Integer> >;
Map<String,List<Integer>>;
Map<List<Integer>,String>;
Map<List<Integer>,List<String>>;

Map3<String,Integer,Float>;

Map<Map<String,String>,Map3<String,Integer,Float>>;
Map<List<String>,List<Integer>>;
--------

But it will not parse these:
Map3<List<String>,List<Integer>,List<Float>>;
Map3<String,List<Integer>,Float>;

The errors are:
G1.java:20:18: unexpected token: Integer
and
G1.java:24:24: unexpected token: Integer

Now, I can see why this is happening, it is caused by my non-greedy rules in

referenceTypeList1 and referenceTypeList2. But I need them to be non-greedy
(in 
some fashion), because I don't want them to match the last "referenceType"
that 
  preceeds the next GT or SR token.

(Making them both greedy means that it matches too many times...)

I'm starting to get to the limits of my understanding of ANTLR... I started 
thinking it was a look-ahead problem... but it really requires "lots" of 
lookahead, that's why I have those syntactic predicates everywhere).

Any help will be greatly appreciated! Have I gone down the wrong track?

=Matt

PS: The 'trick' JSR14 uses to parse ">>" and ">>>":
The 'naive' grammar for parameterized type declarations (using the notation 
used in the JLS) is:

ReferenceType ::= ClassOrInterfaceType
                 | ArrayType
                 | TypeVariable

TypeVariable ::= Identifier

ClassOrInterfaceType ::= ClassOrInterface TypeArgumentsOpt

ClassOrInterface ::= Identifier
                    | ClassOrInterfaceType . Identifier

TypeArguments ::= < ReferenceTypeList >

ReferenceTypeList ::= ReferenceType
                     | ReferenceTypeList , ReferenceType


The "trick" is as folows (copied verbatim from the JSR14 spec)

ReferenceType ::= ClassOrInterfaceType
                 | ArrayType
                 | TypeVariable

ClassOrInterfaceType ::= Name
                        | Name < ReferenceTypeList1

ReferenceTypeList1 ::= ReferenceType1
                      | ReferenceTypeList , ReferenceType1

ReferenceType1 ::= ReferenceType >
                  | Name < ReferenceTypeList2

ReferenceTypeList2 ::= ReferenceType2
                      | ReferenceTypeList , ReferenceType2

ReferenceType2 ::= ReferenceType >>
                  | Name < ReferenceTypeList3

ReferenceTypeList3 ::= ReferenceType3
                      | ReferenceTypeList , ReferenceType3

ReferenceType3 ::= ReferenceType >>>



 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From Jim.OConnor at microfocus.com  Thu Mar 13 10:58:41 2003
From: Jim.OConnor at microfocus.com (Jim O'Connor)
Date: Mon Dec 20 16:15:27 2004
Subject: [antlr-interest] IBM MVS JCL recognition
Message-ID: <3AC103F1B7EEEC48A855ACB1D2819E91016C582D@rock-corpmail.microfocus.com>

Hi all,
  JCL has a number of fun recognition problems for which ANTLR might have
solutions.  There hasn't been a publicly available JCL grammar, as far as I
know.  I'll start with a direct ANTLR related question, just to get the ball
rolling.

  JCL has "symbolic replacement".  For example, "OBJECT" below would be
assigned a value, say "FILE.NAME".

//SYSLIN DD DSN=&OBJECT,UNIT=SYSDA,SPACE=(CYL,1)

  which results in 

//SYSLIN DD DSN=FILE.NAME,UNIT=SYSDA,SPACE=(CYL,1)

  For this example I see a TokenStreamFilter working nicely.  I gather the
definitions (Hashtable), get a "symbolic" token, look up the definition and
replace the text.

  Another example gets more complicated. Setting OBJECT =
"FILE.NEW,MYOPTION(1,4)", would translate to


//SYSLIN DD DSN=FILE.NEW,MYOPTION(1,4),UNIT=SYSDA,SPACE=(CYL,1)

 I don't have a token for token match.  I would be more comfortable
resorting back to a character stream and re-lexing.  I'd be glad to make the
example clearer if it isn't well described.

  Looking forward to hearing opinions, comments and being directed down
productive paths..... if there is such parsing JCL.

Jim







    

 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From mzukowski at yci.com  Thu Mar 13 11:03:28 2003
From: mzukowski at yci.com (mzukowski@yci.com)
Date: Mon Dec 20 16:15:27 2004
Subject: [antlr-interest] IBM MVS JCL recognition
Message-ID: <170826586F3BD511910D0200C110AAA80540220F@memail03.bco-home.com>

Why don't you just insert all the tokens into the stream?  Basically you
could keep a token queue in your filter and just be sure to empty the queue
before you pull another token from the lexer.

Monty

-----Original Message-----
From: Jim O'Connor [mailto:Jim.OConnor@microfocus.com]
Sent: Thursday, March 13, 2003 10:59 AM
To: antlr-interest@yahoogroups.com
Subject: [antlr-interest] IBM MVS JCL recognition


Hi all,
  JCL has a number of fun recognition problems for which ANTLR might have
solutions.  There hasn't been a publicly available JCL grammar, as far as I
know.  I'll start with a direct ANTLR related question, just to get the ball
rolling.

  JCL has "symbolic replacement".  For example, "OBJECT" below would be
assigned a value, say "FILE.NAME".

//SYSLIN DD DSN=&OBJECT,UNIT=SYSDA,SPACE=(CYL,1)

  which results in 

//SYSLIN DD DSN=FILE.NAME,UNIT=SYSDA,SPACE=(CYL,1)

  For this example I see a TokenStreamFilter working nicely.  I gather the
definitions (Hashtable), get a "symbolic" token, look up the definition and
replace the text.

  Another example gets more complicated. Setting OBJECT =
"FILE.NEW,MYOPTION(1,4)", would translate to


//SYSLIN DD DSN=FILE.NEW,MYOPTION(1,4),UNIT=SYSDA,SPACE=(CYL,1)

 I don't have a token for token match.  I would be more comfortable
resorting back to a character stream and re-lexing.  I'd be glad to make the
example clearer if it isn't well described.

  Looking forward to hearing opinions, comments and being directed down
productive paths..... if there is such parsing JCL.

Jim







    

 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From Jim.OConnor at microfocus.com  Thu Mar 13 11:22:05 2003
From: Jim.OConnor at microfocus.com (Jim O'Connor)
Date: Mon Dec 20 16:15:27 2004
Subject: [antlr-interest] IBM MVS JCL recognition
Message-ID: <3AC103F1B7EEEC48A855ACB1D2819E91016C5843@rock-corpmail.microfocus.com>

Sounds like a plan.  I'll try it out.
That's why you get the big bucks, eh?

Jim

-----Original Message-----
From: mzukowski@yci.com [mailto:mzukowski@yci.com]
Sent: Thursday, March 13, 2003 2:03 PM
To: antlr-interest@yahoogroups.com
Subject: RE: [antlr-interest] IBM MVS JCL recognition


Why don't you just insert all the tokens into the stream?  Basically you
could keep a token queue in your filter and just be sure to empty the queue
before you pull another token from the lexer.

Monty

-----Original Message-----
From: Jim O'Connor [mailto:Jim.OConnor@microfocus.com]
Sent: Thursday, March 13, 2003 10:59 AM
To: antlr-interest@yahoogroups.com
Subject: [antlr-interest] IBM MVS JCL recognition


Hi all,
  JCL has a number of fun recognition problems for which ANTLR might have
solutions.  There hasn't been a publicly available JCL grammar, as far as I
know.  I'll start with a direct ANTLR related question, just to get the ball
rolling.

  JCL has "symbolic replacement".  For example, "OBJECT" below would be
assigned a value, say "FILE.NAME".

//SYSLIN DD DSN=&OBJECT,UNIT=SYSDA,SPACE=(CYL,1)

  which results in 

//SYSLIN DD DSN=FILE.NAME,UNIT=SYSDA,SPACE=(CYL,1)

  For this example I see a TokenStreamFilter working nicely.  I gather the
definitions (Hashtable), get a "symbolic" token, look up the definition and
replace the text.

  Another example gets more complicated. Setting OBJECT =
"FILE.NEW,MYOPTION(1,4)", would translate to


//SYSLIN DD DSN=FILE.NEW,MYOPTION(1,4),UNIT=SYSDA,SPACE=(CYL,1)

 I don't have a token for token match.  I would be more comfortable
resorting back to a character stream and re-lexing.  I'd be glad to make the
example clearer if it isn't well described.

  Looking forward to hearing opinions, comments and being directed down
productive paths..... if there is such parsing JCL.

Jim







    

 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From kyungsunh at yahoo.com  Thu Mar 13 13:21:33 2003
From: kyungsunh at yahoo.com (Kyungsun Han)
Date: Mon Dec 20 16:15:27 2004
Subject: [antlr-interest] Nondeterminism error for high rules
In-Reply-To: <170826586F3BD511910D0200C110AAA805402209@memail03.bco-home.com>
Message-ID: <20030313212133.29357.qmail@web41003.mail.yahoo.com>

Thanks a lot. It works. 
Kyungsun 

--- mzukowski@yci.com wrote:
> Using syntactic predicates:
> 
> command_or_definition
> 		:	(command)=>command
> 		|	(definition)=>definition
>  		|	syntax_definition
> 		;
> 
> Also be sure to study the generated code to see the
> lookahead tests which
> antlr calculated to decide which alternative to
> choose.  From there you can
> sometimes figure out a simpler syntactic predicate
> to use.
> 
> Monty


__________________________________________________
Do you Yahoo!?
Yahoo! Web Hosting - establish your business online
http://webhosting.yahoo.com

 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From matt at cortexebusiness.com.au  Thu Mar 13 13:45:10 2003
From: matt at cortexebusiness.com.au (Matt Quail)
Date: Mon Dec 20 16:15:27 2004
Subject: [antlr-interest] Help needed upgrading java.g to support Generics
In-Reply-To: <170826586F3BD511910D0200C110AAA80540220D@memail03.bco-home.com>
References: <170826586F3BD511910D0200C110AAA80540220D@memail03.bco-home.com>
Message-ID: <3E70FBE6.7090401@cortexebusiness.com.au>

Monty,

Thanks Monty! That has definitely given me something to think about. I will try 
what you suggest, and remove the ">>", etc. tokens and parser them as GT GT 
instead.

So we may have a parser rule:

sr: GT GT;

The one issue with this is that it will allow WS between the two ">" characters 
in the ">>" operator (which Java does not allow). I might have a play with this 
approach, in any case. I may be able to solve this problem by changing WS from 
"skip" tokens to a {option ignore=WS;}. Will need to think some more on that 
one; any ideas?

The other idea I was tinkering with last night was to leave SR as is, and have 
some rule like this for matching the end of a "double-nested" template:

.... (GT GT | SR)

Then for "triple-nested" we might have something like

.... (GT GT GT | SR GT | GT SR | BSR)

But I'm not sure what the "...." would be :) Maybe I need to use some semantic 
predicates and actually count the number of ">" I need to match. Something like 
this:

typeArgs: typeArgsBody typeArgsEnd;

typeArgsBody:
   LT {ltCount++;}
   ReferenceType
   (typeArsgBody)?
   ;

typeArgsEnd:
( // match 0,1,2 or 3 '>'
    {ltCount == 0}=>
|  {ltCount == 1}=> GT {ltCount-=1;}
|  {ltCount == 2}=> (GT GT | SR) {ltCount-=2;}
|  {ltCount == 3}=>
       (GT GT GT | SR GT | GT SR | BSR) {ltCount-=3;}
)
// if there are more, match some more
{ltCount > 0}=> typeArgsEnd
;

(Hmmm... it is ugly to have to use a semantic predicate... but this may be a 
"quick win".)

I will try your suggestion and my idea above and report back to this list.

=Matt

mzukowski@yci.com wrote:
> I'm not sure that's the best approach.  I haven't thought it through but it
> seems like it would work in the LR world but not in the LL world.  I would
> suggest trying this instead:
> 
> 1. Eliminate ">>", ">>=", ">>>", and ">>>=" as tokens, make them all ">".
> Then make parser rules sr: ">" ">" and zr:">" ">" ">".  Modify grammar to
> use grammar rules instead of the tokens for those operators.
> 
> 2. Compile, inspect and test.  Syntactic predicates may be necessary and may
> need to be manually hoisted.
> 
> 3. If that works then add in your generic stuff and test it out.  Only use
> ">" for your generics, don't use sr or zr.
> 
> 4. There might be a better approach than this.  Can generics be initialized?
> Then you have to worry about ">>=" as well.
> 
> Email me privately if you would like to discuss this over the phone.
> 
> Monty
> 
> -----Original Message-----
> From: Matt Quail [mailto:matt@cortexebusiness.com.au]
> Sent: Wednesday, March 12, 2003 7:20 PM
> To: antlr-interest@yahoogroups.com
> Subject: [antlr-interest] Help needed upgrading java.g to support
> Generics
> 
> 
> Hi all,
> 
> I'm trying to update the java.g grammar with support for Generics (as
> defined 
> by JSR14, grab the pdf spec at 
> http://www.jcp.org/aboutJava/communityprocess/review/jsr014/index.html ). My
> 
> intent is to upgrade the grammar and submit a patch back to the "offical" 
> java.g; so any help will hopefully help us all.
> 
> The MAJOR problem is that JDK1.5 will allow this:
> 
> List<List<String>> x = ...;
>                  ^^
> The problem is that the lexer will match ">>" as a shift-right token, but we
> 
> really want to parse it as two GT tokens in this context. The JSR pdf has a
> BNF 
> grammar that solves this problem, at it is that pattern that I am trying to 
> implement in ANTLR. (A re-cap of this trick is given at the end of the
> email.)
> 
> (Note that there is also a problem lexing ">>>", but lets just confine 
> ourselves to ">>" for the moment.)
> 
> Okay, after a few false starts, I've come up with the following grammar
> (note 
> that it is not the full JavaRecogniser parser, just enough to parse a
> SEMICOLON 
> seperated list of types) (it uses the standard JavaLexer):
> 
> --------
> compilationUnit
> 	:
>          ( type SEMI ) *
> 		EOF!
> 	;
> 
> type
> 	:	referenceType
> 	|	builtInType (arrayDecl)?
> 	;
> 
> referenceType:
>          identifier
>          (  arrayDecl
>          |  LT referenceTypeList1
>          )?
>      ;
> 
> referenceTypeList1:
>          (referenceType1)=> referenceType1
>      |
>          (options{greedy=false;}: referenceType COMMA)+
>          referenceType1
>      ;
> 
> referenceType1:
>          (referenceType GT)=> referenceType GT
>      |
>          identifier LT referenceTypeList2
>      ;
> 
> referenceTypeList2 :
>          (referenceType2)=> referenceType2
>      |
>          (options{greedy=false;}: referenceType COMMA)+
>          referenceType2
>      ;
> 
> referenceType2:
>          referenceType SR
>      ;
> 
> arrayDecl:
>          (LBRACK RBRACK)+
>      ;
> // The primitive types.
> builtInType
> 	:	"void"
> 	|	"boolean"
> 	|	"byte"
> 	|	"char"
> 	|	"short"
> 	|	"int"
> 	|	"float"
> 	|	"long"
> 	|	"double"
> 	;
> 
> identifier
> 	:	IDENT ( DOT^ IDENT)*
> 	;
> --------
> 
> This grammar will sucessfully parse these constructs:
> --------
> String;
> java.lang.String;
> int;
> float;
> int[];
> String[];
> float[][][];
> List<String>;
> List<String[]>;
> List<List<String[]> >;
> List<List<String[]>>;
> 
> Map<String,Integer>;
> Map<String,List<Integer> >;
> Map<String,List<Integer>>;
> Map<List<Integer>,String>;
> Map<List<Integer>,List<String>>;
> 
> Map3<String,Integer,Float>;
> 
> Map<Map<String,String>,Map3<String,Integer,Float>>;
> Map<List<String>,List<Integer>>;
> --------
> 
> But it will not parse these:
> Map3<List<String>,List<Integer>,List<Float>>;
> Map3<String,List<Integer>,Float>;
> 
> The errors are:
> G1.java:20:18: unexpected token: Integer
> and
> G1.java:24:24: unexpected token: Integer
> 
> Now, I can see why this is happening, it is caused by my non-greedy rules in
> 
> referenceTypeList1 and referenceTypeList2. But I need them to be non-greedy
> (in 
> some fashion), because I don't want them to match the last "referenceType"
> that 
>   preceeds the next GT or SR token.
> 
> (Making them both greedy means that it matches too many times...)
> 
> I'm starting to get to the limits of my understanding of ANTLR... I started 
> thinking it was a look-ahead problem... but it really requires "lots" of 
> lookahead, that's why I have those syntactic predicates everywhere).
> 
> Any help will be greatly appreciated! Have I gone down the wrong track?
> 
> =Matt
> 
> PS: The 'trick' JSR14 uses to parse ">>" and ">>>":
> The 'naive' grammar for parameterized type declarations (using the notation 
> used in the JLS) is:
> 
> ReferenceType ::= ClassOrInterfaceType
>                  | ArrayType
>                  | TypeVariable
> 
> TypeVariable ::= Identifier
> 
> ClassOrInterfaceType ::= ClassOrInterface TypeArgumentsOpt
> 
> ClassOrInterface ::= Identifier
>                     | ClassOrInterfaceType . Identifier
> 
> TypeArguments ::= < ReferenceTypeList >
> 
> ReferenceTypeList ::= ReferenceType
>                      | ReferenceTypeList , ReferenceType
> 
> 
> The "trick" is as folows (copied verbatim from the JSR14 spec)
> 
> ReferenceType ::= ClassOrInterfaceType
>                  | ArrayType
>                  | TypeVariable
> 
> ClassOrInterfaceType ::= Name
>                         | Name < ReferenceTypeList1
> 
> ReferenceTypeList1 ::= ReferenceType1
>                       | ReferenceTypeList , ReferenceType1
> 
> ReferenceType1 ::= ReferenceType >
>                   | Name < ReferenceTypeList2
> 
> ReferenceTypeList2 ::= ReferenceType2
>                       | ReferenceTypeList , ReferenceType2
> 
> ReferenceType2 ::= ReferenceType >>
>                   | Name < ReferenceTypeList3
> 
> ReferenceTypeList3 ::= ReferenceType3
>                       | ReferenceTypeList , ReferenceType3
> 
> ReferenceType3 ::= ReferenceType >>>
> 
> 
> 
>  
> 
> Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 
> 
> 
>  
> 
> Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 
> 
> 
> 
> 



 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From mzukowski at yci.com  Thu Mar 13 13:58:56 2003
From: mzukowski at yci.com (mzukowski@yci.com)
Date: Mon Dec 20 16:15:27 2004
Subject: [antlr-interest] Help needed upgrading java.g to support Gene
	rics
Message-ID: <170826586F3BD511910D0200C110AAA805402210@memail03.bco-home.com>

If you are counting columns then you can enforce no spaces between >> for
the operator with a semantic predicate.  Otherwise you could have a
different token based on what preceded it by maintaining some state in your
lexer.  CGT if the > was preceded immediately by >.  Just GT otherwise.  I
haven't thought that one through.  The operator would be GT CGT or GT CGT
CGT.  A generic end token could be GT or CGT.

The semantic predicate is a good possible approach.  You might need a way to
propagate the end matches up the parse stack.  It depends on how nested all
the rules for declarations are, I haven't inspected it so I'm not sure.  I'm
just thinking aloud here.

Try this for typeArgsEnd

typeArgsEnd:
(  //matching zero doesn't make sense
GT {ltCount-=1;}
| SR {ltCount-=2;}
| BSR {ltCount-=3;}
)
// if there are more, match some more
{ltCount > 0}=> typeArgsEnd
;

You know, I don't think that will work as sketched below.  It'll choke on
Map<List<Integer>,String>; because you aren't nesting your calls.

Play with it and report back.

Monty

-----Original Message-----
From: Matt Quail [mailto:matt@cortexebusiness.com.au]
Sent: Thursday, March 13, 2003 1:45 PM
To: antlr-interest@yahoogroups.com
Subject: Re: [antlr-interest] Help needed upgrading java.g to support
Generics


Monty,

Thanks Monty! That has definitely given me something to think about. I will
try 
what you suggest, and remove the ">>", etc. tokens and parser them as GT GT 
instead.

So we may have a parser rule:

sr: GT GT;

The one issue with this is that it will allow WS between the two ">"
characters 
in the ">>" operator (which Java does not allow). I might have a play with
this 
approach, in any case. I may be able to solve this problem by changing WS
from 
"skip" tokens to a {option ignore=WS;}. Will need to think some more on that

one; any ideas?

The other idea I was tinkering with last night was to leave SR as is, and
have 
some rule like this for matching the end of a "double-nested" template:

.... (GT GT | SR)

Then for "triple-nested" we might have something like

.... (GT GT GT | SR GT | GT SR | BSR)

But I'm not sure what the "...." would be :) Maybe I need to use some
semantic 
predicates and actually count the number of ">" I need to match. Something
like 
this:

typeArgs: typeArgsBody typeArgsEnd;

typeArgsBody:
   LT {ltCount++;}
   ReferenceType
   (typeArsgBody)?
   ;

typeArgsEnd:
( // match 0,1,2 or 3 '>'
    {ltCount == 0}=>
|  {ltCount == 1}=> GT {ltCount-=1;}
|  {ltCount == 2}=> (GT GT | SR) {ltCount-=2;}
|  {ltCount == 3}=>
       (GT GT GT | SR GT | GT SR | BSR) {ltCount-=3;}
)
// if there are more, match some more
{ltCount > 0}=> typeArgsEnd
;

(Hmmm... it is ugly to have to use a semantic predicate... but this may be a

"quick win".)

I will try your suggestion and my idea above and report back to this list.

=Matt

mzukowski@yci.com wrote:
> I'm not sure that's the best approach.  I haven't thought it through but
it
> seems like it would work in the LR world but not in the LL world.  I would
> suggest trying this instead:
> 
> 1. Eliminate ">>", ">>=", ">>>", and ">>>=" as tokens, make them all ">".
> Then make parser rules sr: ">" ">" and zr:">" ">" ">".  Modify grammar to
> use grammar rules instead of the tokens for those operators.
> 
> 2. Compile, inspect and test.  Syntactic predicates may be necessary and
may
> need to be manually hoisted.
> 
> 3. If that works then add in your generic stuff and test it out.  Only use
> ">" for your generics, don't use sr or zr.
> 
> 4. There might be a better approach than this.  Can generics be
initialized?
> Then you have to worry about ">>=" as well.
> 
> Email me privately if you would like to discuss this over the phone.
> 
> Monty
> 
> -----Original Message-----
> From: Matt Quail [mailto:matt@cortexebusiness.com.au]
> Sent: Wednesday, March 12, 2003 7:20 PM
> To: antlr-interest@yahoogroups.com
> Subject: [antlr-interest] Help needed upgrading java.g to support
> Generics
> 
> 
> Hi all,
> 
> I'm trying to update the java.g grammar with support for Generics (as
> defined 
> by JSR14, grab the pdf spec at 
> http://www.jcp.org/aboutJava/communityprocess/review/jsr014/index.html ).
My
> 
> intent is to upgrade the grammar and submit a patch back to the "offical" 
> java.g; so any help will hopefully help us all.
> 
> The MAJOR problem is that JDK1.5 will allow this:
> 
> List<List<String>> x = ...;
>                  ^^
> The problem is that the lexer will match ">>" as a shift-right token, but
we
> 
> really want to parse it as two GT tokens in this context. The JSR pdf has
a
> BNF 
> grammar that solves this problem, at it is that pattern that I am trying
to 
> implement in ANTLR. (A re-cap of this trick is given at the end of the
> email.)
> 
> (Note that there is also a problem lexing ">>>", but lets just confine 
> ourselves to ">>" for the moment.)
> 
> Okay, after a few false starts, I've come up with the following grammar
> (note 
> that it is not the full JavaRecogniser parser, just enough to parse a
> SEMICOLON 
> seperated list of types) (it uses the standard JavaLexer):
> 
> --------
> compilationUnit
> 	:
>          ( type SEMI ) *
> 		EOF!
> 	;
> 
> type
> 	:	referenceType
> 	|	builtInType (arrayDecl)?
> 	;
> 
> referenceType:
>          identifier
>          (  arrayDecl
>          |  LT referenceTypeList1
>          )?
>      ;
> 
> referenceTypeList1:
>          (referenceType1)=> referenceType1
>      |
>          (options{greedy=false;}: referenceType COMMA)+
>          referenceType1
>      ;
> 
> referenceType1:
>          (referenceType GT)=> referenceType GT
>      |
>          identifier LT referenceTypeList2
>      ;
> 
> referenceTypeList2 :
>          (referenceType2)=> referenceType2
>      |
>          (options{greedy=false;}: referenceType COMMA)+
>          referenceType2
>      ;
> 
> referenceType2:
>          referenceType SR
>      ;
> 
> arrayDecl:
>          (LBRACK RBRACK)+
>      ;
> // The primitive types.
> builtInType
> 	:	"void"
> 	|	"boolean"
> 	|	"byte"
> 	|	"char"
> 	|	"short"
> 	|	"int"
> 	|	"float"
> 	|	"long"
> 	|	"double"
> 	;
> 
> identifier
> 	:	IDENT ( DOT^ IDENT)*
> 	;
> --------
> 
> This grammar will sucessfully parse these constructs:
> --------
> String;
> java.lang.String;
> int;
> float;
> int[];
> String[];
> float[][][];
> List<String>;
> List<String[]>;
> List<List<String[]> >;
> List<List<String[]>>;
> 
> Map<String,Integer>;
> Map<String,List<Integer> >;
> Map<String,List<Integer>>;
> Map<List<Integer>,String>;
> Map<List<Integer>,List<String>>;
> 
> Map3<String,Integer,Float>;
> 
> Map<Map<String,String>,Map3<String,Integer,Float>>;
> Map<List<String>,List<Integer>>;
> --------
> 
> But it will not parse these:
> Map3<List<String>,List<Integer>,List<Float>>;
> Map3<String,List<Integer>,Float>;
> 
> The errors are:
> G1.java:20:18: unexpected token: Integer
> and
> G1.java:24:24: unexpected token: Integer
> 
> Now, I can see why this is happening, it is caused by my non-greedy rules
in
> 
> referenceTypeList1 and referenceTypeList2. But I need them to be
non-greedy
> (in 
> some fashion), because I don't want them to match the last "referenceType"
> that 
>   preceeds the next GT or SR token.
> 
> (Making them both greedy means that it matches too many times...)
> 
> I'm starting to get to the limits of my understanding of ANTLR... I
started 
> thinking it was a look-ahead problem... but it really requires "lots" of 
> lookahead, that's why I have those syntactic predicates everywhere).
> 
> Any help will be greatly appreciated! Have I gone down the wrong track?
> 
> =Matt
> 
> PS: The 'trick' JSR14 uses to parse ">>" and ">>>":
> The 'naive' grammar for parameterized type declarations (using the
notation 
> used in the JLS) is:
> 
> ReferenceType ::= ClassOrInterfaceType
>                  | ArrayType
>                  | TypeVariable
> 
> TypeVariable ::= Identifier
> 
> ClassOrInterfaceType ::= ClassOrInterface TypeArgumentsOpt
> 
> ClassOrInterface ::= Identifier
>                     | ClassOrInterfaceType . Identifier
> 
> TypeArguments ::= < ReferenceTypeList >
> 
> ReferenceTypeList ::= ReferenceType
>                      | ReferenceTypeList , ReferenceType
> 
> 
> The "trick" is as folows (copied verbatim from the JSR14 spec)
> 
> ReferenceType ::= ClassOrInterfaceType
>                  | ArrayType
>                  | TypeVariable
> 
> ClassOrInterfaceType ::= Name
>                         | Name < ReferenceTypeList1
> 
> ReferenceTypeList1 ::= ReferenceType1
>                       | ReferenceTypeList , ReferenceType1
> 
> ReferenceType1 ::= ReferenceType >
>                   | Name < ReferenceTypeList2
> 
> ReferenceTypeList2 ::= ReferenceType2
>                       | ReferenceTypeList , ReferenceType2
> 
> ReferenceType2 ::= ReferenceType >>
>                   | Name < ReferenceTypeList3
> 
> ReferenceTypeList3 ::= ReferenceType3
>                       | ReferenceTypeList , ReferenceType3
> 
> ReferenceType3 ::= ReferenceType >>>
> 
> 
> 
>  
> 
> Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 
> 
> 
>  
> 
> Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 
> 
> 
> 
> 



 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From mzukowski at yci.com  Thu Mar 13 14:12:50 2003
From: mzukowski at yci.com (mzukowski@yci.com)
Date: Mon Dec 20 16:15:27 2004
Subject: [antlr-interest] IBM MVS JCL recognition
Message-ID: <170826586F3BD511910D0200C110AAA805402212@memail03.bco-home.com>

So it's just a dumb preprocessor at work there.  Your first intuition was
correct.  Go back out to text after substituting and then lex it all over
again.  That's obviously how JCL implemented it.  Actually they probably
don't even fully lex when preprocessing.  You may be writing your own
preprocessor that has a different view of the universe than the lexer for
JCL.  For one thing you probably never want to alter whitespace when
preprocessing.  You may end up with a preprocessor that's much simpler than
your JCL lexer.

Monty

-----Original Message-----
From: Jim O'Connor [mailto:Jim.OConnor@microfocus.com]
Sent: Thursday, March 13, 2003 2:06 PM
To: antlr-interest@yahoogroups.com
Subject: RE: [antlr-interest] IBM MVS JCL recognition


I've run across a difficulty.  Assume the token filter piece is working.  I
like the idea.

I have a bunch of examples that don't fit with the screw-y-ness of JCL.

Example I

OBJECT1 value: "Mon"
OBJECT2 value: "ty"

JCL TEXT:

//S02 EXEC PGM=THEFULL&OBJECT1&OBJECT2


Result will be

//SO2 EXEC PGM=THEFULLMonty

To hold the token queue model, the Parser rule for an identifier would be
(IDENT)* to concatenate all the parts of Monty together.  Or would another
filter be a wise choice?


Example II

String strangeness

//S02 EXEC PGM=Monty,VALUENAME='&INARDS'

INARDS could be = "DISP=SHR";


The result is 
//S02 EXEC PGM=Monty,VALUENAME='DISP=SHR'

The tokens that would be in the token queue would be different than if the
example was


//S02 EXEC PGM=Monty,&INARDS

resulting in 

//S02 EXEC PGM=Monty,DISP=SHR




Matching &INARDS in the token filter I would want to shove out STRING in the
first example.  The second example I want to shove out "IDENT" EQU "IDENT"
on three successive trips to the token filter.

Once again, any help is greatly appreciated.

Jim


-----Original Message-----
From: mzukowski@yci.com [mailto:mzukowski@yci.com]
Sent: Thursday, March 13, 2003 2:03 PM
To: antlr-interest@yahoogroups.com
Subject: RE: [antlr-interest] IBM MVS JCL recognition


Why don't you just insert all the tokens into the stream?  Basically you
could keep a token queue in your filter and just be sure to empty the queue
before you pull another token from the lexer.

Monty

-----Original Message-----
From: Jim O'Connor [mailto:Jim.OConnor@microfocus.com]
Sent: Thursday, March 13, 2003 10:59 AM
To: antlr-interest@yahoogroups.com
Subject: [antlr-interest] IBM MVS JCL recognition


Hi all,
  JCL has a number of fun recognition problems for which ANTLR might have
solutions.  There hasn't been a publicly available JCL grammar, as far as I
know.  I'll start with a direct ANTLR related question, just to get the ball
rolling.

  JCL has "symbolic replacement".  For example, "OBJECT" below would be
assigned a value, say "FILE.NAME".

//SYSLIN DD DSN=&OBJECT,UNIT=SYSDA,SPACE=(CYL,1)

  which results in 

//SYSLIN DD DSN=FILE.NAME,UNIT=SYSDA,SPACE=(CYL,1)

  For this example I see a TokenStreamFilter working nicely.  I gather the
definitions (Hashtable), get a "symbolic" token, look up the definition and
replace the text.

  Another example gets more complicated. Setting OBJECT =
"FILE.NEW,MYOPTION(1,4)", would translate to


//SYSLIN DD DSN=FILE.NEW,MYOPTION(1,4),UNIT=SYSDA,SPACE=(CYL,1)

 I don't have a token for token match.  I would be more comfortable
resorting back to a character stream and re-lexing.  I'd be glad to make the
example clearer if it isn't well described.

  Looking forward to hearing opinions, comments and being directed down
productive paths..... if there is such parsing JCL.

Jim







    

 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From Jim.OConnor at microfocus.com  Thu Mar 13 14:05:48 2003
From: Jim.OConnor at microfocus.com (Jim O'Connor)
Date: Mon Dec 20 16:15:27 2004
Subject: [antlr-interest] IBM MVS JCL recognition
Message-ID: <3AC103F1B7EEEC48A855ACB1D2819E91016C58F6@rock-corpmail.microfocus.com>

I've run across a difficulty.  Assume the token filter piece is working.  I
like the idea.

I have a bunch of examples that don't fit with the screw-y-ness of JCL.

Example I

OBJECT1 value: "Mon"
OBJECT2 value: "ty"

JCL TEXT:

//S02 EXEC PGM=THEFULL&OBJECT1&OBJECT2


Result will be

//SO2 EXEC PGM=THEFULLMonty

To hold the token queue model, the Parser rule for an identifier would be
(IDENT)* to concatenate all the parts of Monty together.  Or would another
filter be a wise choice?


Example II

String strangeness

//S02 EXEC PGM=Monty,VALUENAME='&INARDS'

INARDS could be = "DISP=SHR";


The result is 
//S02 EXEC PGM=Monty,VALUENAME='DISP=SHR'

The tokens that would be in the token queue would be different than if the
example was


//S02 EXEC PGM=Monty,&INARDS

resulting in 

//S02 EXEC PGM=Monty,DISP=SHR




Matching &INARDS in the token filter I would want to shove out STRING in the
first example.  The second example I want to shove out "IDENT" EQU "IDENT"
on three successive trips to the token filter.

Once again, any help is greatly appreciated.

Jim


-----Original Message-----
From: mzukowski@yci.com [mailto:mzukowski@yci.com]
Sent: Thursday, March 13, 2003 2:03 PM
To: antlr-interest@yahoogroups.com
Subject: RE: [antlr-interest] IBM MVS JCL recognition


Why don't you just insert all the tokens into the stream?  Basically you
could keep a token queue in your filter and just be sure to empty the queue
before you pull another token from the lexer.

Monty

-----Original Message-----
From: Jim O'Connor [mailto:Jim.OConnor@microfocus.com]
Sent: Thursday, March 13, 2003 10:59 AM
To: antlr-interest@yahoogroups.com
Subject: [antlr-interest] IBM MVS JCL recognition


Hi all,
  JCL has a number of fun recognition problems for which ANTLR might have
solutions.  There hasn't been a publicly available JCL grammar, as far as I
know.  I'll start with a direct ANTLR related question, just to get the ball
rolling.

  JCL has "symbolic replacement".  For example, "OBJECT" below would be
assigned a value, say "FILE.NAME".

//SYSLIN DD DSN=&OBJECT,UNIT=SYSDA,SPACE=(CYL,1)

  which results in 

//SYSLIN DD DSN=FILE.NAME,UNIT=SYSDA,SPACE=(CYL,1)

  For this example I see a TokenStreamFilter working nicely.  I gather the
definitions (Hashtable), get a "symbolic" token, look up the definition and
replace the text.

  Another example gets more complicated. Setting OBJECT =
"FILE.NEW,MYOPTION(1,4)", would translate to


//SYSLIN DD DSN=FILE.NEW,MYOPTION(1,4),UNIT=SYSDA,SPACE=(CYL,1)

 I don't have a token for token match.  I would be more comfortable
resorting back to a character stream and re-lexing.  I'd be glad to make the
example clearer if it isn't well described.

  Looking forward to hearing opinions, comments and being directed down
productive paths..... if there is such parsing JCL.

Jim







    

 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From tmoog at polhode.com  Thu Mar 13 14:39:57 2003
From: tmoog at polhode.com (Tom Moog)
Date: Mon Dec 20 16:15:27 2004
Subject: [antlr-interest] IBM MVS JCL recognition
In-Reply-To: <170826586F3BD511910D0200C110AAA805402212@memail03.bco-home.com>
References: <170826586F3BD511910D0200C110AAA805402212@memail03.bco-home.com>
Message-ID: <Pine.NEB.4.53.0303131739490.6997@panix5.panix.com>


Or go back and read the A


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From matt at cortexebusiness.com.au  Thu Mar 13 15:18:25 2003
From: matt at cortexebusiness.com.au (Matt Quail)
Date: Mon Dec 20 16:15:27 2004
Subject: [antlr-interest] Help needed upgrading java.g to support Gene
 rics
In-Reply-To: <170826586F3BD511910D0200C110AAA805402210@memail03.bco-home.com>
References: <170826586F3BD511910D0200C110AAA805402210@memail03.bco-home.com>
Message-ID: <3E7111C1.3080908@cortexebusiness.com.au>

> The semantic predicate is a good possible approach.

Okay, I've tried the semantic predicate approach, this is what I have:

referenceType
     :
         identifier
         (  arrayDecl
         |  typeArguments
         )?
     ;

typeArguments:
         {int currentLtLevel = ltCounter;}
         LT {ltCounter++;}
         referenceType
         (
             COMMA referenceType
         )*
         typeArgumentsEnd
         {(currentLtLevel != 0) || ltCounter == currentLtLevel}?
     ;
typeArgumentsEnd:
         GT {ltCounter-=1;}
     |   SR {ltCounter-=2;}
     |   BSR {ltCounter-=3;}
     |


Things to note:
- this grammar now handles lists of arguments like <String,Integer>
- this grammar compiles with nondeterminism warnings, I'm not sure
   if they are ignorable yet.
- typeArguments ends in a "validating" semantic predicate, that
   ensures that if there was a zero 'LT' count upon entry, then it
   is zero upon exit. So it allows the LT count to cross "nested
   boundries".
- typeArgumentsEnd may match nothing. But it must match eventually
   because of the validating sematnic predicate in typeArguments

I'll play with it further, but I think this semantic-predicate approach may be 
the easiest way forward.

=Matt


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From mzukowski at yci.com  Thu Mar 13 16:05:31 2003
From: mzukowski at yci.com (mzukowski@yci.com)
Date: Mon Dec 20 16:15:27 2004
Subject: [antlr-interest] Help needed upgrading java.g to support Gene
	 rics
Message-ID: <170826586F3BD511910D0200C110AAA805402216@memail03.bco-home.com>

That looks pretty good to me.  I would've used (typeArgumentsEnd)? in
typeArguments instead of having the nothing match inside typeArgumentsEnd,
but I think the difference is minimal.

Monty

-----Original Message-----
From: Matt Quail [mailto:matt@cortexebusiness.com.au]
Sent: Thursday, March 13, 2003 3:18 PM
To: antlr-interest@yahoogroups.com
Subject: Re: [antlr-interest] Help needed upgrading java.g to support
Gene rics


> The semantic predicate is a good possible approach.

Okay, I've tried the semantic predicate approach, this is what I have:

referenceType
     :
         identifier
         (  arrayDecl
         |  typeArguments
         )?
     ;

typeArguments:
         {int currentLtLevel = ltCounter;}
         LT {ltCounter++;}
         referenceType
         (
             COMMA referenceType
         )*
         typeArgumentsEnd
         {(currentLtLevel != 0) || ltCounter == currentLtLevel}?
     ;
typeArgumentsEnd:
         GT {ltCounter-=1;}
     |   SR {ltCounter-=2;}
     |   BSR {ltCounter-=3;}
     |


Things to note:
- this grammar now handles lists of arguments like <String,Integer>
- this grammar compiles with nondeterminism warnings, I'm not sure
   if they are ignorable yet.
- typeArguments ends in a "validating" semantic predicate, that
   ensures that if there was a zero 'LT' count upon entry, then it
   is zero upon exit. So it allows the LT count to cross "nested
   boundries".
- typeArgumentsEnd may match nothing. But it must match eventually
   because of the validating sematnic predicate in typeArguments

I'll play with it further, but I think this semantic-predicate approach may
be 
the easiest way forward.

=Matt


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From andrew at adersoftware.com  Thu Mar 13 16:52:38 2003
From: andrew at adersoftware.com (Andrew Deren)
Date: Mon Dec 20 16:15:27 2004
Subject: [antlr-interest] case in-sensitive literals
References: <170826586F3BD511910D0200C110AAA805402216@memail03.bco-home.com>
Message-ID: <000701c2e9c4$02d9df90$6501a8c0@andrew>

I need my literals in grammar to not be case sensitive.
I set the option: caseSensitive=false in lexer, and
caseSensitiveLiterals=false but it still doesn't work.
What I'm trying to accomplish is to have in parser:
andExpr : otherExpr "and" otherExpr
but have it work for either "and" or "AND" or any other combination.
I have more of those literals (or, is, not, etc)
It looks like when I put "AND" in the program, lexer matches Token.ID
Thanks,
Andrew



 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From andrew at adersoftware.com  Thu Mar 13 18:08:08 2003
From: andrew at adersoftware.com (Andrew Deren)
Date: Mon Dec 20 16:15:27 2004
Subject: [antlr-interest] case in-sensitive literals (possible bug?)
References: <170826586F3BD511910D0200C110AAA805402216@memail03.bco-home.com> <000701c2e9c4$02d9df90$6501a8c0@andrew>
Message-ID: <000c01c2e9ce$8f08d250$6501a8c0@andrew>

I think I found an answer. It seems antlr is not even using
caseSensitiveLiterals flag.
I overrode testLiteralsTable method and put ToLower() in there and it all
seems fine:
 public override int testLiteralsTable(int ttype)
 {  try  {
   int literalsIndex = (int) literals[text.ToString().ToLower()];
   ttype = literalsIndex;
   return ttype;
  }  catch  {   return ttype;  }
 }

I was doing this in C# and I tought maybe it was C# bug, but it seems java
implementation does the same thing.
Is it possible that this feature is not supported yet, or is there something
else I need to do.
Andrew

----- Original Message -----
From: "Andrew Deren" <andrew@adersoftware.com>
To: <antlr-interest@yahoogroups.com>
Sent: Thursday, March 13, 2003 6:52 PM
Subject: [antlr-interest] case in-sensitive literals


> I need my literals in grammar to not be case sensitive.
> I set the option: caseSensitive=false in lexer, and
> caseSensitiveLiterals=false but it still doesn't work.
> What I'm trying to accomplish is to have in parser:
> andExpr : otherExpr "and" otherExpr
> but have it work for either "and" or "AND" or any other combination.
> I have more of those literals (or, is, not, etc)
> It looks like when I put "AND" in the program, lexer matches Token.ID
> Thanks,
> Andrew
>
>
>
>
>
> Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/
>
>
>
>



 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From willschen2002 at yahoo.com  Thu Mar 13 18:29:18 2003
From: willschen2002 at yahoo.com (willschen2002)
Date: Mon Dec 20 16:15:27 2004
Subject: [antlr-interest] xsd:all issue
Message-ID: <b4repu+8mij@eGroups.com>

I would like to generate anltr parser for xsd:all (xml schema).
Especially to handle this case that element in xsd:all reference 
itself.
In grammar, I genrate all the elements in xsd:all as sub rules which 
parent xsd type is a rule as well.
Appreciate any response.

William


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From kyungsunh at yahoo.com  Thu Mar 13 19:46:37 2003
From: kyungsunh at yahoo.com (Kyungsun Han)
Date: Mon Dec 20 16:15:27 2004
Subject: [antlr-interest] compiling with javac- thanks in advance
In-Reply-To: <000c01c2e9ce$8f08d250$6501a8c0@andrew>
Message-ID: <20030314034637.23680.qmail@web41004.mail.yahoo.com>

I have problems with compiling with javac. 
Although the Antlr doesn't give any warning, the files
I got from don't allow to be compiled. It shows the
errors such as:
               ^
C:\file\SchemeParser.java:44: cannot resolve symbol
symbol  : variable _tokenNames
location: class SchemeParser
  tokenNames = _tokenNames;
               ^
C:\file\SchemeParser.java:177: cannot resolve symbol
symbol  : method expression  ()
location: class SchemeParser
                        expression();
                        
...
                                                ^
C:\scheme\SchemeParser.java:580: cannot resolve symbol
symbol  : class pattern
location: class SchemeParser
                                        pattern
ellipsis
                                        ^
C:\scheme\SchemeParser.java:650: cannot resolve symbol
symbol  : class PERIOD
location: class SchemeParser
                                        PERIOD
template
....
58 errors
                                      ^
Where could I start to solve this error?

Kyungsun-



__________________________________________________
Do you Yahoo!?
Yahoo! Web Hosting - establish your business online
http://webhosting.yahoo.com

 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From matt at cortexebusiness.com.au  Thu Mar 13 21:22:23 2003
From: matt at cortexebusiness.com.au (Matt Quail)
Date: Mon Dec 20 16:15:27 2004
Subject: [antlr-interest] java.g grammar for JSR14 (generic java)
Message-ID: <3E71670F.1060407@cortexebusiness.com.au>

This is my first attempt at a JSR14 grammar. It parses successfully
over some tests of my construction, plus successfully parses a large
existing JDK1.3 source base.

I couldn't find any bugs in this grammar; but if there are, I will
report them to this list.

FYI: An interesting discussion on "context-free LR(k) parsing of
generics" here:
http://forum.java.sun.com/thread.jsp?forum=316&thread=320787&tstart=30&trange=15

My implementation differs in that I went the "count LT tokens and use
semantic predicates" route. This route has the benefit of simpler
rules (no referenceTypeList1, referenceTypeList2, etc. productions) at
the expense of using semantic predicates (considered "inelegant" perhaps?).

I have attached the following files:
javaG.g: the java grammar supporting generics
javaG.patch.txt: a patch from the java.g in ANTLR-2.7.2 to javaG.g
G2.java: my test for parsing. This should parse with javaG.g as well
          as compile with the JSR14 early access compiler.

Caveats:
1) I have probably broken some "tree" stuff... I don't use the
    tree/AST functionality in java.g so I am unlikely to fix it myself.
2) It is possible that generics in JDK1.5 will differ slightly from
    JSR14. If so, I will update and re-post my grammar.


Any comments are welcome! I am happy to have my patch applied to the
version that comes with ANTLR, I release my patch and grammar into the
Public Domain. However, it is probably best to wait until JDK1.5 is
out before doing so. We would also have to add support for JSR201 at
the same time.

=Matt

 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

-------------- next part --------------
/** Java 1.5/JSR14 Recognizer
 *
 * Run 'java Main [-showtree] directory-full-of-java-files'
 *
 * [The -showtree option pops up a Swing frame that shows
 *  the AST constructed from the parser.]
 *
 * Run 'java Main <directory full of java files>'
 *
 * Contributing authors:
 *		John Mitchell		johnm@non.net
 *		Terence Parr		parrt@magelang.com
 *		John Lilley			jlilley@empathy.com
 *		Scott Stanchfield	thetick@magelang.com
 *		Markus Mohnen       mohnen@informatik.rwth-aachen.de
 *      Peter Williams      pete.williams@sun.com
 *      Allan Jacobs        Allan.Jacobs@eng.sun.com
 *      Steve Messick       messick@redhills.com
 *      John Pybus			john@pybus.org
 *
 * Version 1.00 December 9, 1997 -- initial release
 * Version 1.01 December 10, 1997
 *		fixed bug in octal def (0..7 not 0..8)
 * Version 1.10 August 1998 (parrt)
 *		added tree construction
 *		fixed definition of WS,comments for mac,pc,unix newlines
 *		added unary plus
 * Version 1.11 (Nov 20, 1998)
 *		Added "shutup" option to turn off last ambig warning.
 *		Fixed inner class def to allow named class defs as statements
 *		synchronized requires compound not simple statement
 *		add [] after builtInType DOT class in primaryExpression
 *		"const" is reserved but not valid..removed from modifiers
 * Version 1.12 (Feb 2, 1999)
 *		Changed LITERAL_xxx to xxx in tree grammar.
 *		Updated java.g to use tokens {...} now for 2.6.0 (new feature).
 *
 * Version 1.13 (Apr 23, 1999)
 *		Didn't have (stat)? for else clause in tree parser.
 *		Didn't gen ASTs for interface extends.  Updated tree parser too.
 *		Updated to 2.6.0.
 * Version 1.14 (Jun 20, 1999)
 *		Allowed final/abstract on local classes.
 *		Removed local interfaces from methods
 *		Put instanceof precedence where it belongs...in relationalExpr
 *			It also had expr not type as arg; fixed it.
 *		Missing ! on SEMI in classBlock
 *		fixed: (expr) + "string" was parsed incorrectly (+ as unary plus).
 *		fixed: didn't like Object[].class in parser or tree parser
 * Version 1.15 (Jun 26, 1999)
 *		Screwed up rule with instanceof in it. :(  Fixed.
 *		Tree parser didn't like (expr).something; fixed.
 *		Allowed multiple inheritance in tree grammar. oops.
 * Version 1.16 (August 22, 1999)
 *		Extending an interface built a wacky tree: had extra EXTENDS.
 *		Tree grammar didn't allow multiple superinterfaces.
 *		Tree grammar didn't allow empty var initializer: {}
 * Version 1.17 (October 12, 1999)
 *		ESC lexer rule allowed 399 max not 377 max.
 *		java.tree.g didn't handle the expression of synchronized
 *		statements.
 * Version 1.18 (August 12, 2001)
 *      	Terence updated to Java 2 Version 1.3 by
 *		observing/combining work of Allan Jacobs and Steve
 *		Messick.  Handles 1.3 src.  Summary:
 *		o  primary didn't include boolean.class kind of thing
 *      	o  constructor calls parsed explicitly now:
 * 		   see explicitConstructorInvocation
 *		o  add strictfp modifier
 *      	o  missing objBlock after new expression in tree grammar
 *		o  merged local class definition alternatives, moved after declaration
 *		o  fixed problem with ClassName.super.field
 *      	o  reordered some alternatives to make things more efficient
 *		o  long and double constants were not differentiated from int/float
 *		o  whitespace rule was inefficient: matched only one char
 *		o  add an examples directory with some nasty 1.3 cases
 *		o  made Main.java use buffered IO and a Reader for Unicode support
 *		o  supports UNICODE?
 *		   Using Unicode charVocabulay makes code file big, but only
 *		   in the bitsets at the end. I need to make ANTLR generate
 *		   unicode bitsets more efficiently.
 * Version 1.19 (April 25, 2002)
 *		Terence added in nice fixes by John Pybus concerning floating
 *		constants and problems with super() calls.  John did a nice
 *		reorg of the primary/postfix expression stuff to read better
 *		and makes f.g.super() parse properly (it was METHOD_CALL not
 *		a SUPER_CTOR_CALL).  Also:
 *
 *		o  "finally" clause was a root...made it a child of "try"
 *		o  Added stuff for asserts too for Java 1.4, but *commented out*
 *		   as it is not backward compatible.
 *
 * Version 1.20 (October 27, 2002)
 *
 *      Terence ended up reorging John Pybus' stuff to
 *      remove some nondeterminisms and some syntactic predicates.
 *      Note that the grammar is stricter now; e.g., this(...) must
 *	be the first statement.
 *
 *      Trinary ?: operator wasn't working as array name:
 *          (isBig ? bigDigits : digits)[i];
 *
 *      Checked parser/tree parser on source for
 *          Resin-2.0.5, jive-2.1.1, jdk 1.3.1, Lucene, antlr 2.7.2a4,
 *	    and the 110k-line jGuru server source.
 *
 * Version 1.21 (March, 2003)
 *      Changes by Matt Quail to support generics (as per JDK1.5/JSR14)
 *      Notes:
 *      o We only allow the "extends" keyword and not the "implements"
 *        keyword, since thats what JSR14 seems to imply.
 *      o Thanks to Monty Zukowski for his help on the antlr-interest
 *        mail list.
 *
 *
 * This grammar is in the PUBLIC DOMAIN
 */
class JavaRecognizer extends Parser;
options {
	k = 2;                           // two token lookahead
	exportVocab=Java;                // Call its vocabulary "Java"
	codeGenMakeSwitchThreshold = 2;  // Some optimizations
	codeGenBitsetTestThreshold = 3;
	defaultErrorHandler = false;     // Don't generate parser error handlers
	buildAST = true;
}

tokens {
	BLOCK; MODIFIERS; OBJBLOCK; SLIST; CTOR_DEF; METHOD_DEF; VARIABLE_DEF;
	INSTANCE_INIT; STATIC_INIT; TYPE; CLASS_DEF; INTERFACE_DEF;
	PACKAGE_DEF; ARRAY_DECLARATOR; EXTENDS_CLAUSE; IMPLEMENTS_CLAUSE;
	PARAMETERS; PARAMETER_DEF; LABELED_STAT; TYPECAST; INDEX_OP;
	POST_INC; POST_DEC; METHOD_CALL; EXPR; ARRAY_INIT;
	IMPORT; UNARY_MINUS; UNARY_PLUS; CASE_GROUP; ELIST; FOR_INIT; FOR_CONDITION;
	FOR_ITERATOR; EMPTY_STAT; FINAL="final"; ABSTRACT="abstract";
	STRICTFP="strictfp"; SUPER_CTOR_CALL; CTOR_CALL;
}

{
    /**
     * Counts the number of LT seen in the typeArguments production.
     * It is used in semantic predicates to ensure we have seen
     * enough closing '>' characters; which actually may have been
     * either GT, SR or BSR tokens.
     */
    private int ltCounter = 0;

}      
// Compilation Unit: In Java, this is a single file.  This is the start
//   rule for this parser
compilationUnit
	:	// A compilation unit starts with an optional package definition
		(	packageDefinition
		|	/* nothing */
		)

		// Next we have a series of zero or more import statements
		( importDefinition )*

		// Wrapping things up with any number of class or interface
		//    definitions
		( typeDefinition )*

		EOF!
	;


// Package statement: "package" followed by an identifier.
packageDefinition
	options {defaultErrorHandler = true;} // let ANTLR handle errors
	:	p:"package"^ {#p.setType(PACKAGE_DEF);} identifier SEMI!
	;


// Import statement: import followed by a package or class name
importDefinition
	options {defaultErrorHandler = true;}
	:	i:"import"^ {#i.setType(IMPORT);} identifierStar SEMI!
	;

// A type definition in a file is either a class or interface definition.
typeDefinition
	options {defaultErrorHandler = true;}
	:	m:modifiers!
		( classDefinition[#m]
		| interfaceDefinition[#m]
		)
	|	SEMI!
	;

/** A declaration is the creation of a reference or primitive-type variable
 *  Create a separate Type/Var tree for each var in the var list.
 */
declaration!
	:	m:modifiers t:typeSpec[false] v:variableDefinitions[#m,#t]
		{#declaration = #v;}
	;

// A type specification is a type name with possible brackets afterwards
//   (which would make it an array type).
typeSpec[boolean addImagNode]
	: classTypeSpec[addImagNode]
	| builtInTypeSpec[addImagNode]
	;

arraySpecOpt:
        (options{greedy=true;}: // match as many as possible
            lb:LBRACK^ {#lb.setType(ARRAY_DECLARATOR);} RBRACK!
        )*
    ;

// A class type specification is a class type with either:
// - possible brackets afterwards
//   (which would make it an array type).
// - generic type arguments after
classTypeSpec[boolean addImagNode]
	:   classOrInterfaceType[addImagNode]
        arraySpecOpt
		{
			if ( addImagNode ) {
				#classTypeSpec = #(#[TYPE,"TYPE"], #classTypeSpec);
			}
		}
	;
classOrInterfaceType[boolean addImagNode]
	:   IDENT (typeArguments[addImagNode])?
        (options{greedy=true;}: // match as many as possible
            DOT
            IDENT (typeArguments[addImagNode])?
        )*
    ;
typeArguments[boolean addImagNode]
{int currentLtLevel = 0;}
    :
        {currentLtLevel = ltCounter;}
        LT {ltCounter++;}
        classTypeSpec[addImagNode]
        (options{greedy=true;}: // match as many as possible
            COMMA classTypeSpec [addImagNode]
        )*
        
        (   // turn warning off since Antlr generates the right code,
            // plus we have our semantic predicate below
            options{generateAmbigWarnings=false;}:
            typeArgumentsEnd
        )?
        
        // make sure we have gobbled up enough '>' characters
        // if we are at the "top level" of nested typeArgument productions
        {(currentLtLevel != 0) || ltCounter == currentLtLevel}?
    ;

// this gobbles up *some* amount of '>' characters, and counts how many
// it gobbled.
protected typeArgumentsEnd:
        GT {ltCounter-=1;}
    |   SR {ltCounter-=2;}
    |   BSR {ltCounter-=3;}
    ;

// A builtin type specification is a builtin type with possible brackets
// afterwards (which would make it an array type).
builtInTypeSpec[boolean addImagNode]
	:	builtInType arraySpecOpt
		{
			if ( addImagNode ) {
				#builtInTypeSpec = #(#[TYPE,"TYPE"], #builtInTypeSpec);
			}
		}
	;

// A type name. which is either a (possibly qualified and parameterized)
// class name or a primitive (builtin) type
type
	:	classOrInterfaceType[false]
	|	builtInType
	;

// The primitive types.
builtInType
	:	"void"
	|	"boolean"
	|	"byte"
	|	"char"
	|	"short"
	|	"int"
	|	"float"
	|	"long"
	|	"double"
	;

// A (possibly-qualified) java identifier.  We start with the first IDENT
//   and expand its name by adding dots and following IDENTS
identifier
	:	IDENT  ( DOT^ IDENT )*
	;

identifierStar
	:	IDENT
		( DOT^ IDENT )*
		( DOT^ STAR  )?
	;

// A list of zero or more modifiers.  We could have used (modifier)* in
//   place of a call to modifiers, but I thought it was a good idea to keep
//   this rule separate so they can easily be collected in a Vector if
//   someone so desires
modifiers
	:	( modifier )*
		{#modifiers = #([MODIFIERS, "MODIFIERS"], #modifiers);}
	;

// modifiers for Java classes, interfaces, class/instance vars and methods
modifier
	:	"private"
	|	"public"
	|	"protected"
	|	"static"
	|	"transient"
	|	"final"
	|	"abstract"
	|	"native"
	|	"threadsafe"
	|	"synchronized"
//	|	"const"			// reserved word, but not valid
	|	"volatile"
	|	"strictfp"
	;

// Definition of a Java class
classDefinition![AST modifiers]
	:	"class" IDENT
        // it _might_ have type paramaters
        (typeParameters)?
		// it _might_ have a superclass...
		sc:superClassClause
		// it might implement some interfaces...
		ic:implementsClause
		// now parse the body of the class
		cb:classBlock
		{#classDefinition = #(#[CLASS_DEF,"CLASS_DEF"],
							   modifiers,IDENT,sc,ic,cb);}
	;

superClassClause!
	:	( "extends" id:identifier )?
		{#superClassClause = #(#[EXTENDS_CLAUSE,"EXTENDS_CLAUSE"],id);}
	;

// Definition of a Java Interface
interfaceDefinition![AST modifiers]
	:	"interface" IDENT
        // it _might_ have type paramaters
        (typeParameters)?
		// it might extend some other interfaces
		ie:interfaceExtends
		// now parse the body of the interface (looks like a class...)
		cb:classBlock
		{#interfaceDefinition = #(#[INTERFACE_DEF,"INTERFACE_DEF"],
									modifiers,IDENT,ie,cb);}
	;

typeParameters
{int currentLtLevel = 0;}
    :
        {currentLtLevel = ltCounter;}
        LT {ltCounter++;}
        typeParameter (COMMA typeParameter)*
        (typeArgumentsEnd)?
        // make sure we have gobbled up enough '>' characters
        // if we are at the "top level" of nested typeArgument productions
        {(currentLtLevel != 0) || ltCounter == currentLtLevel}?
    ;

typeParameter:
        IDENT
        (   // I'm pretty sure Antlr generates the right thing here:
            options{generateAmbigWarnings=false;}:
            "extends" classOrInterfaceType[false]
            (BAND classOrInterfaceType[false])*
        )?
    ;
// This is the body of a class.  You can have fields and extra semicolons,
// That's about it (until you see what a field is...)
classBlock
	:	LCURLY!
			( field | SEMI! )*
		RCURLY!
		{#classBlock = #([OBJBLOCK, "OBJBLOCK"], #classBlock);}
	;

// An interface can extend several other interfaces...
interfaceExtends
	:	(
		e:"extends"!
		identifier ( COMMA! identifier )*
		)?
		{#interfaceExtends = #(#[EXTENDS_CLAUSE,"EXTENDS_CLAUSE"],
							#interfaceExtends);}
	;

// A class can implement several interfaces...
implementsClause
	:	(
			i:"implements"! identifier ( COMMA! identifier )*
		)?
		{#implementsClause = #(#[IMPLEMENTS_CLAUSE,"IMPLEMENTS_CLAUSE"],
								 #implementsClause);}
	;

// Now the various things that can be defined inside a class or interface...
// Note that not all of these are really valid in an interface (constructors,
//   for example), and if this grammar were used for a compiler there would
//   need to be some semantic checks to make sure we're doing the right thing...
field!
	:	// method, constructor, or variable declaration
		mods:modifiers
		(	h:ctorHead s:constructorBody // constructor
			{#field = #(#[CTOR_DEF,"CTOR_DEF"], mods, h, s);}

		|	cd:classDefinition[#mods]       // inner class
			{#field = #cd;}

		|	id:interfaceDefinition[#mods]   // inner interface
			{#field = #id;}

		|	// A generic method has the typeParameters before the return type.
            // This is not allowed for variable definitions, but this production
            // allows it, a semantic check could be used if you wanted.
            (typeParameters)? t:typeSpec[false]  // method or variable declaration(s)
			(	IDENT  // the name of the method

				// parse the formal parameter declarations.
				LPAREN! param:parameterDeclarationList RPAREN!

				rt:declaratorBrackets[#t]

				// get the list of exceptions that this method is
				// declared to throw
				(tc:throwsClause)?

				( s2:compoundStatement | SEMI )
				{#field = #(#[METHOD_DEF,"METHOD_DEF"],
						     mods,
							 #(#[TYPE,"TYPE"],rt),
							 IDENT,
							 param,
							 tc,
							 s2);}
			|	v:variableDefinitions[#mods,#t] SEMI
//				{#field = #(#[VARIABLE_DEF,"VARIABLE_DEF"], v);}
				{#field = #v;}
			)
		)

    // "static { ... }" class initializer
	|	"static" s3:compoundStatement
		{#field = #(#[STATIC_INIT,"STATIC_INIT"], s3);}

    // "{ ... }" instance initializer
	|	s4:compoundStatement
		{#field = #(#[INSTANCE_INIT,"INSTANCE_INIT"], s4);}
	;

constructorBody
    :   lc:LCURLY^ {#lc.setType(SLIST);}
            ( options { greedy=true; } : explicitConstructorInvocation)?
            (statement)*
        RCURLY!
    ;

/** Catch obvious constructor calls, but not the expr.super(...) calls */
explicitConstructorInvocation
    :   "this"! lp1:LPAREN^ argList RPAREN! SEMI!
		{#lp1.setType(CTOR_CALL);}
    |   "super"! lp2:LPAREN^ argList RPAREN! SEMI!
		{#lp2.setType(SUPER_CTOR_CALL);}
    ;

variableDefinitions[AST mods, AST t]
	:	variableDeclarator[getASTFactory().dupTree(mods),
						   getASTFactory().dupTree(t)]
		(	COMMA!
			variableDeclarator[getASTFactory().dupTree(mods),
							   getASTFactory().dupTree(t)]
		)*
	;

/** Declaration of a variable.  This can be a class/instance variable,
 *   or a local variable in a method
 * It can also include possible initialization.
 */
variableDeclarator![AST mods, AST t]
	:	id:IDENT d:declaratorBrackets[t] v:varInitializer
		{#variableDeclarator = #(#[VARIABLE_DEF,"VARIABLE_DEF"], mods, #(#[TYPE,"TYPE"],d), id, v);}
	;

declaratorBrackets[AST typ]
	:	{#declaratorBrackets=typ;}
		(lb:LBRACK^ {#lb.setType(ARRAY_DECLARATOR);} RBRACK!)*
	;

varInitializer
	:	( ASSIGN^ initializer )?
	;

// This is an initializer used to set up an array.
arrayInitializer
	:	lc:LCURLY^ {#lc.setType(ARRAY_INIT);}
			(	initializer
				(
					// CONFLICT: does a COMMA after an initializer start a new
					//           initializer or start the option ',' at end?
					//           ANTLR generates proper code by matching
					//			 the comma as soon as possible.
					options {
						warnWhenFollowAmbig = false;
					}
				:
					COMMA! initializer
				)*
				(COMMA!)?
			)?
		RCURLY!
	;


// The two "things" that can initialize an array element are an expression
//   and another (nested) array initializer.
initializer
	:	expression
	|	arrayInitializer
	;

// This is the header of a method.  It includes the name and parameters
//   for the method.
//   This also watches for a list of exception classes in a "throws" clause.
ctorHead
	:	IDENT  // the name of the method

		// parse the formal parameter declarations.
		LPAREN! parameterDeclarationList RPAREN!

		// get the list of exceptions that this method is declared to throw
		(throwsClause)?
	;

// This is a list of exception classes that the method is declared to throw
throwsClause
	:	"throws"^ identifier ( COMMA! identifier )*
	;


// A list of formal parameters
parameterDeclarationList
	:	( parameterDeclaration ( COMMA! parameterDeclaration )* )?
		{#parameterDeclarationList = #(#[PARAMETERS,"PARAMETERS"],
									#parameterDeclarationList);}
	;

// A formal parameter.
parameterDeclaration!
	:	pm:parameterModifier t:typeSpec[false] id:IDENT
		pd:declaratorBrackets[#t]
		{#parameterDeclaration = #(#[PARAMETER_DEF,"PARAMETER_DEF"],
									pm, #([TYPE,"TYPE"],pd), id);}
	;

parameterModifier
	:	(f:"final")?
		{#parameterModifier = #(#[MODIFIERS,"MODIFIERS"], f);}
	;

// Compound statement.  This is used in many contexts:
//   Inside a class definition prefixed with "static":
//      it is a class initializer
//   Inside a class definition without "static":
//      it is an instance initializer
//   As the body of a method
//   As a completely indepdent braced block of code inside a method
//      it starts a new scope for variable definitions

compoundStatement
	:	lc:LCURLY^ {#lc.setType(SLIST);}
			// include the (possibly-empty) list of statements
			(statement)*
		RCURLY!
	;


statement
	// A list of statements in curly braces -- start a new scope!
	:	compoundStatement

	// declarations are ambiguous with "ID DOT" relative to expression
	// statements.  Must backtrack to be sure.  Could use a semantic
	// predicate to test symbol table to see what the type was coming
	// up, but that's pretty hard without a symbol table ;)
	|	(declaration)=> declaration SEMI!

	// An expression statement.  This could be a method call,
	// assignment statement, or any other expression evaluated for
	// side-effects.
	|	expression SEMI!

	// class definition
	|	m:modifiers! classDefinition[#m]

	// Attach a label to the front of a statement
	|	IDENT c:COLON^ {#c.setType(LABELED_STAT);} statement

	// If-else statement
	|	"if"^ LPAREN! expression RPAREN! statement
		(
			// CONFLICT: the old "dangling-else" problem...
			//           ANTLR generates proper code matching
			//			 as soon as possible.  Hush warning.
			options {
				warnWhenFollowAmbig = false;
			}
		:
			"else"! statement
		)?

	// For statement
	|	"for"^
			LPAREN!
				forInit SEMI!   // initializer
				forCond	SEMI!   // condition test
				forIter         // updater
			RPAREN!
			statement                     // statement to loop over

	// While statement
	|	"while"^ LPAREN! expression RPAREN! statement

	// do-while statement
	|	"do"^ statement "while"! LPAREN! expression RPAREN! SEMI!

	// get out of a loop (or switch)
	|	"break"^ (IDENT)? SEMI!

	// do next iteration of a loop
	|	"continue"^ (IDENT)? SEMI!

	// Return an expression
	|	"return"^ (expression)? SEMI!

	// switch/case statement
	|	"switch"^ LPAREN! expression RPAREN! LCURLY!
			( casesGroup )*
		RCURLY!

	// exception try-catch block
	|	tryBlock

	// throw an exception
	|	"throw"^ expression SEMI!

	// synchronize a statement
	|	"synchronized"^ LPAREN! expression RPAREN! compoundStatement

	// asserts (uncomment if you want 1.4 compatibility)
	//|	"assert"^ expression ( COLON! expression )? SEMI!

	// empty statement
	|	s:SEMI {#s.setType(EMPTY_STAT);}
	;

casesGroup
	:	(	// CONFLICT: to which case group do the statements bind?
			//           ANTLR generates proper code: it groups the
			//           many "case"/"default" labels together then
			//           follows them with the statements
			options {
				greedy = true;
			}
			:
			aCase
		)+
		caseSList
		{#casesGroup = #([CASE_GROUP, "CASE_GROUP"], #casesGroup);}
	;

aCase
	:	("case"^ expression | "default") COLON!
	;

caseSList
	:	(statement)*
		{#caseSList = #(#[SLIST,"SLIST"],#caseSList);}
	;

// The initializer for a for loop
forInit
		// if it looks like a declaration, it is
	:	(	(declaration)=> declaration
		// otherwise it could be an expression list...
		|	expressionList
		)?
		{#forInit = #(#[FOR_INIT,"FOR_INIT"],#forInit);}
	;

forCond
	:	(expression)?
		{#forCond = #(#[FOR_CONDITION,"FOR_CONDITION"],#forCond);}
	;

forIter
	:	(expressionList)?
		{#forIter = #(#[FOR_ITERATOR,"FOR_ITERATOR"],#forIter);}
	;

// an exception handler try/catch block
tryBlock
	:	"try"^ compoundStatement
		(handler)*
		( finallyClause )?
	;

finallyClause
	:	"finally"^ compoundStatement
	;

// an exception handler
handler
	:	"catch"^ LPAREN! parameterDeclaration RPAREN! compoundStatement
	;


// expressions
// Note that most of these expressions follow the pattern
//   thisLevelExpression :
//       nextHigherPrecedenceExpression
//           (OPERATOR nextHigherPrecedenceExpression)*
// which is a standard recursive definition for a parsing an expression.
// The operators in java have the following precedences:
//    lowest  (13)  = *= /= %= += -= <<= >>= >>>= &= ^= |=
//            (12)  ?:
//            (11)  ||
//            (10)  &&
//            ( 9)  |
//            ( 8)  ^
//            ( 7)  &
//            ( 6)  == !=
//            ( 5)  < <= > >=
//            ( 4)  << >>
//            ( 3)  +(binary) -(binary)
//            ( 2)  * / %
//            ( 1)  ++ -- +(unary) -(unary)  ~  !  (type)
//                  []   () (method call)  . (dot -- identifier qualification)
//                  new   ()  (explicit parenthesis)
//
// the last two are not usually on a precedence chart; I put them in
// to point out that new has a higher precedence than '.', so you
// can validy use
//     new Frame().show()
//
// Note that the above precedence levels map to the rules below...
// Once you have a precedence chart, writing the appropriate rules as below
//   is usually very straightfoward



// the mother of all expressions
expression
	:	assignmentExpression
		{#expression = #(#[EXPR,"EXPR"],#expression);}
	;


// This is a list of expressions.
expressionList
	:	expression (COMMA! expression)*
		{#expressionList = #(#[ELIST,"ELIST"], expressionList);}
	;


// assignment expression (level 13)
assignmentExpression
	:	conditionalExpression
		(	(	ASSIGN^
            |   PLUS_ASSIGN^
            |   MINUS_ASSIGN^
            |   STAR_ASSIGN^
            |   DIV_ASSIGN^
            |   MOD_ASSIGN^
            |   SR_ASSIGN^
            |   BSR_ASSIGN^
            |   SL_ASSIGN^
            |   BAND_ASSIGN^
            |   BXOR_ASSIGN^
            |   BOR_ASSIGN^
            )
			assignmentExpression
		)?
	;


// conditional test (level 12)
conditionalExpression
	:	logicalOrExpression
		( QUESTION^ assignmentExpression COLON! conditionalExpression )?
	;


// logical or (||)  (level 11)
logicalOrExpression
	:	logicalAndExpression (LOR^ logicalAndExpression)*
	;


// logical and (&&)  (level 10)
logicalAndExpression
	:	inclusiveOrExpression (LAND^ inclusiveOrExpression)*
	;


// bitwise or non-short-circuiting or (|)  (level 9)
inclusiveOrExpression
	:	exclusiveOrExpression (BOR^ exclusiveOrExpression)*
	;


// exclusive or (^)  (level 8)
exclusiveOrExpression
	:	andExpression (BXOR^ andExpression)*
	;


// bitwise or non-short-circuiting and (&)  (level 7)
andExpression
	:	equalityExpression (BAND^ equalityExpression)*
	;


// equality/inequality (==/!=) (level 6)
equalityExpression
	:	relationalExpression ((NOT_EQUAL^ | EQUAL^) relationalExpression)*
	;


// boolean relational expressions (level 5)
relationalExpression
	:	shiftExpression
		(	(	(	LT^
				|	GT^
				|	LE^
				|	GE^
				)
				shiftExpression
			)*
		|	"instanceof"^ typeSpec[true]
		)
	;


// bit shift expressions (level 4)
shiftExpression
	:	additiveExpression ((SL^ | SR^ | BSR^) additiveExpression)*
	;


// binary addition/subtraction (level 3)
additiveExpression
	:	multiplicativeExpression ((PLUS^ | MINUS^) multiplicativeExpression)*
	;


// multiplication/division/modulo (level 2)
multiplicativeExpression
	:	unaryExpression ((STAR^ | DIV^ | MOD^ ) unaryExpression)*
	;

unaryExpression
	:	INC^ unaryExpression
	|	DEC^ unaryExpression
	|	MINUS^ {#MINUS.setType(UNARY_MINUS);} unaryExpression
	|	PLUS^  {#PLUS.setType(UNARY_PLUS);} unaryExpression
	|	unaryExpressionNotPlusMinus
	;

unaryExpressionNotPlusMinus
	:	BNOT^ unaryExpression
	|	LNOT^ unaryExpression

	|	(	// subrule allows option to shut off warnings
			options {
				// "(int" ambig with postfixExpr due to lack of sequence
				// info in linear approximate LL(k).  It's ok.  Shut up.
				generateAmbigWarnings=false;
			}
		:	// If typecast is built in type, must be numeric operand
			// Also, no reason to backtrack if type keyword like int, float...
			lpb:LPAREN^ {#lpb.setType(TYPECAST);} builtInTypeSpec[true] RPAREN!
			unaryExpression

			// Have to backtrack to see if operator follows.  If no operator
			// follows, it's a typecast.  No semantic checking needed to parse.
			// if it _looks_ like a cast, it _is_ a cast; else it's a "(expr)"
		|	(LPAREN classTypeSpec[true] RPAREN unaryExpressionNotPlusMinus)=>
			lp:LPAREN^ {#lp.setType(TYPECAST);} classTypeSpec[true] RPAREN!
			unaryExpressionNotPlusMinus

		|	postfixExpression
		)
	;

// qualified names, array expressions, method invocation, post inc/dec
postfixExpression
	:
    /*
    "this"! lp1:LPAREN^ argList RPAREN!
		{#lp1.setType(CTOR_CALL);}

    |   "super"! lp2:LPAREN^ argList RPAREN!
		{#lp2.setType(SUPER_CTOR_CALL);}
    |
    */
        primaryExpression

		(
            /*
            options {
				// the use of postfixExpression in SUPER_CTOR_CALL adds DOT
				// to the lookahead set, and gives loads of false non-det
				// warnings.
				// shut them off.
				generateAmbigWarnings=false;
			}
		:	*/
            DOT^ IDENT
			(	lp:LPAREN^ {#lp.setType(METHOD_CALL);}
				argList
				RPAREN!
			)?
		|	DOT^ "this"

		|	DOT^ "super"
            (   // (new Outer()).super()  (create enclosing instance)
                lp3:LPAREN^ argList RPAREN!
                {#lp3.setType(SUPER_CTOR_CALL);}
			|   DOT^ IDENT
                (	lps:LPAREN^ {#lps.setType(METHOD_CALL);}
                    argList
                    RPAREN!
                )?
            )
		|	DOT^ newExpression
		|	lb:LBRACK^ {#lb.setType(INDEX_OP);} expression RBRACK!
		)*

		(   // possibly add on a post-increment or post-decrement.
            // allows INC/DEC on too much, but semantics can check
			in:INC^ {#in.setType(POST_INC);}
	 	|	de:DEC^ {#de.setType(POST_DEC);}
		)?
 	;

// the basic element of an expression
primaryExpression
	:	identPrimary ( options {greedy=true;} : DOT^ "class" )?
    |   constant
	|	"true"
	|	"false"
	|	"null"
    |   newExpression
	|	"this"
	|	"super"
	|	LPAREN! assignmentExpression RPAREN!
		// look for int.class and int[].class
	|	builtInType
		( lbt:LBRACK^ {#lbt.setType(ARRAY_DECLARATOR);} RBRACK! )*
		DOT^ "class"
	;

/** Match a, a.b.c refs, a.b.c(...) refs, a.b.c[], a.b.c[].class,
 *  and a.b.c.class refs.  Also this(...) and super(...).  Match
 *  this or super.
 */
identPrimary
	:	IDENT
		(
            options {
				// .ident could match here or in postfixExpression.
				// We do want to match here.  Turn off warning.
				greedy=true;
			}
		:	DOT^ IDENT
		)*
		(
            options {
				// ARRAY_DECLARATOR here conflicts with INDEX_OP in
				// postfixExpression on LBRACK RBRACK.
				// We want to match [] here, so greedy.  This overcomes
                // limitation of linear approximate lookahead.
				greedy=true;
		    }
		:   ( lp:LPAREN^ {#lp.setType(METHOD_CALL);} argList RPAREN! )
		|	( options {greedy=true;} :
              lbc:LBRACK^ {#lbc.setType(ARRAY_DECLARATOR);} RBRACK!
            )+
		)?
    ;

/** object instantiation.
 *  Trees are built as illustrated by the following input/tree pairs:
 *
 *  new T()
 *
 *  new
 *   |
 *   T --  ELIST
 *           |
 *          arg1 -- arg2 -- .. -- argn
 *
 *  new int[]
 *
 *  new
 *   |
 *  int -- ARRAY_DECLARATOR
 *
 *  new int[] {1,2}
 *
 *  new
 *   |
 *  int -- ARRAY_DECLARATOR -- ARRAY_INIT
 *                                  |
 *                                EXPR -- EXPR
 *                                  |      |
 *                                  1      2
 *
 *  new int[3]
 *  new
 *   |
 *  int -- ARRAY_DECLARATOR
 *                |
 *              EXPR
 *                |
 *                3
 *
 *  new int[1][2]
 *
 *  new
 *   |
 *  int -- ARRAY_DECLARATOR
 *               |
 *         ARRAY_DECLARATOR -- EXPR
 *               |              |
 *             EXPR             1
 *               |
 *               2
 *
 */
newExpression
	:	"new"^ type
		(	LPAREN! argList RPAREN! (classBlock)?

			//java 1.1
			// Note: This will allow bad constructs like
			//    new int[4][][3] {exp,exp}.
			//    There needs to be a semantic check here...
			// to make sure:
			//   a) [ expr ] and [ ] are not mixed
			//   b) [ expr ] and an init are not used together

		|	newArrayDeclarator (arrayInitializer)?
		)
	;

argList
	:	(	expressionList
		|	/*nothing*/
			{#argList = #[ELIST,"ELIST"];}
		)
	;

newArrayDeclarator
	:	(
			// CONFLICT:
			// newExpression is a primaryExpression which can be
			// followed by an array index reference.  This is ok,
			// as the generated code will stay in this loop as
			// long as it sees an LBRACK (proper behavior)
			options {
				warnWhenFollowAmbig = false;
			}
		:
			lb:LBRACK^ {#lb.setType(ARRAY_DECLARATOR);}
				(expression)?
			RBRACK!
		)+
	;

constant
	:	NUM_INT
	|	CHAR_LITERAL
	|	STRING_LITERAL
	|	NUM_FLOAT
	|	NUM_LONG
	|	NUM_DOUBLE
	;


//----------------------------------------------------------------------------
// The Java scanner
//----------------------------------------------------------------------------
class JavaLexer extends Lexer;

options {
	exportVocab=Java;      // call the vocabulary "Java"
	testLiterals=false;    // don't automatically test for literals
	k=4;                   // four characters of lookahead
	charVocabulary='\u0003'..'\uFFFF';
	// without inlining some bitset tests, couldn't do unicode;
	// I need to make ANTLR generate smaller bitsets; see
	// bottom of JavaLexer.java
	codeGenBitsetTestThreshold=20;
}



// OPERATORS
QUESTION		:	'?'		;
LPAREN			:	'('		;
RPAREN			:	')'		;
LBRACK			:	'['		;
RBRACK			:	']'		;
LCURLY			:	'{'		;
RCURLY			:	'}'		;
COLON			:	':'		;
COMMA			:	','		;
//DOT			:	'.'		;
ASSIGN			:	'='		;
EQUAL			:	"=="	;
LNOT			:	'!'		;
BNOT			:	'~'		;
NOT_EQUAL		:	"!="	;
DIV				:	'/'		;
DIV_ASSIGN		:	"/="	;
PLUS			:	'+'		;
PLUS_ASSIGN		:	"+="	;
INC				:	"++"	;
MINUS			:	'-'		;
MINUS_ASSIGN	:	"-="	;
DEC				:	"--"	;
STAR			:	'*'		;
STAR_ASSIGN		:	"*="	;
MOD				:	'%'		;
MOD_ASSIGN		:	"%="	;
SR				:	">>"	;
SR_ASSIGN		:	">>="	;
BSR				:	">>>"	;
BSR_ASSIGN		:	">>>="	;
GE				:	">="	;
GT				:	">"		;
SL				:	"<<"	;
SL_ASSIGN		:	"<<="	;
LE				:	"<="	;
LT				:	'<'		;
BXOR			:	'^'		;
BXOR_ASSIGN		:	"^="	;
BOR				:	'|'		;
BOR_ASSIGN		:	"|="	;
LOR				:	"||"	;
BAND			:	'&'		;
BAND_ASSIGN		:	"&="	;
LAND			:	"&&"	;
SEMI			:	';'		;


// Whitespace -- ignored
WS	:	(	' '
		|	'\t'
		|	'\f'
			// handle newlines
		|	(	options {generateAmbigWarnings=false;}
			:	"\r\n"  // Evil DOS
			|	'\r'    // Macintosh
			|	'\n'    // Unix (the right way)
			)
			{ newline(); }
		)+
		{ _ttype = Token.SKIP; }
	;

// Single-line comments
SL_COMMENT
	:	"//"
		(~('\n'|'\r'))* ('\n'|'\r'('\n')?)
		{$setType(Token.SKIP); newline();}
	;

// multiple-line comments
ML_COMMENT
	:	"/*"
		(	/*	'\r' '\n' can be matched in one alternative or by matching
				'\r' in one iteration and '\n' in another.  I am trying to
				handle any flavor of newline that comes in, but the language
				that allows both "\r\n" and "\r" and "\n" to all be valid
				newline is ambiguous.  Consequently, the resulting grammar
				must be ambiguous.  I'm shutting this warning off.
			 */
			options {
				generateAmbigWarnings=false;
			}
		:
			{ LA(2)!='/' }? '*'
		|	'\r' '\n'		{newline();}
		|	'\r'			{newline();}
		|	'\n'			{newline();}
		|	~('*'|'\n'|'\r')
		)*
		"*/"
		{$setType(Token.SKIP);}
	;


// character literals
CHAR_LITERAL
	:	'\'' ( ESC | ~'\'' ) '\''
	;

// string literals
STRING_LITERAL
	:	'"' (ESC|~('"'|'\\'))* '"'
	;


// escape sequence -- note that this is protected; it can only be called
//   from another lexer rule -- it will not ever directly return a token to
//   the parser
// There are various ambiguities hushed in this rule.  The optional
// '0'...'9' digit matches should be matched here rather than letting
// them go back to STRING_LITERAL to be matched.  ANTLR does the
// right thing by matching immediately; hence, it's ok to shut off
// the FOLLOW ambig warnings.
protected
ESC
	:	'\\'
		(	'n'
		|	'r'
		|	't'
		|	'b'
		|	'f'
		|	'"'
		|	'\''
		|	'\\'
		|	('u')+ HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT
		|	'0'..'3'
			(
				options {
					warnWhenFollowAmbig = false;
				}
			:	'0'..'7'
				(
					options {
						warnWhenFollowAmbig = false;
					}
				:	'0'..'7'
				)?
			)?
		|	'4'..'7'
			(
				options {
					warnWhenFollowAmbig = false;
				}
			:	'0'..'7'
			)?
		)
	;


// hexadecimal digit (again, note it's protected!)
protected
HEX_DIGIT
	:	('0'..'9'|'A'..'F'|'a'..'f')
	;


// a dummy rule to force vocabulary to be all characters (except special
//   ones that ANTLR uses internally (0 to 2)
protected
VOCAB
	:	'\3'..'\377'
	;


// an identifier.  Note that testLiterals is set to true!  This means
// that after we match the rule, we look in the literals table to see
// if it's a literal or really an identifer
IDENT
	options {testLiterals=true;}
	:	('a'..'z'|'A'..'Z'|'_'|'$') ('a'..'z'|'A'..'Z'|'_'|'0'..'9'|'$')*
	;


// a numeric literal
NUM_INT
	{boolean isDecimal=false; Token t=null;}
    :   '.' {_ttype = DOT;}
            (	('0'..'9')+ (EXPONENT)? (f1:FLOAT_SUFFIX {t=f1;})?
                {
				if (t != null && t.getText().toUpperCase().indexOf('F')>=0) {
                	_ttype = NUM_FLOAT;
				}
				else {
                	_ttype = NUM_DOUBLE; // assume double
				}
				}
            )?

	|	(	'0' {isDecimal = true;} // special case for just '0'
			(	('x'|'X')
				(											// hex
					// the 'e'|'E' and float suffix stuff look
					// like hex digits, hence the (...)+ doesn't
					// know when to stop: ambig.  ANTLR resolves
					// it correctly by matching immediately.  It
					// is therefor ok to hush warning.
					options {
						warnWhenFollowAmbig=false;
					}
				:	HEX_DIGIT
				)+
			|	('0'..'7')+									// octal
			)?
		|	('1'..'9') ('0'..'9')*  {isDecimal=true;}		// non-zero decimal
		)
		(	('l'|'L') { _ttype = NUM_LONG; }

		// only check to see if it's a float if looks like decimal so far
		|	{isDecimal}?
            (   '.' ('0'..'9')* (EXPONENT)? (f2:FLOAT_SUFFIX {t=f2;})?
            |   EXPONENT (f3:FLOAT_SUFFIX {t=f3;})?
            |   f4:FLOAT_SUFFIX {t=f4;}
            )
            {
			if (t != null && t.getText().toUpperCase() .indexOf('F') >= 0) {
                _ttype = NUM_FLOAT;
			}
            else {
	           	_ttype = NUM_DOUBLE; // assume double
			}
			}
        )?
	;


// a couple protected methods to assist in matching floating point numbers
protected
EXPONENT
	:	('e'|'E') ('+'|'-')? ('0'..'9')+
	;


protected
FLOAT_SUFFIX
	:	'f'|'F'|'d'|'D'
	;

-------------- next part --------------
--- java272.g	2003-01-19 16:38:02.000000000 +1100
+++ javaG.g	2003-03-14 15:50:50.000000000 +1100
@@ -1,4 +1,4 @@
-/** Java 1.3 Recognizer
+/** Java 1.5/JSR14 Recognizer
  *
  * Run 'java Main [-showtree] directory-full-of-java-files'
  *
@@ -104,6 +104,15 @@
  *          Resin-2.0.5, jive-2.1.1, jdk 1.3.1, Lucene, antlr 2.7.2a4,
  *	    and the 110k-line jGuru server source.
  *
+ * Version 1.21 (March, 2003)
+ *      Changes by Matt Quail to support generics (as per JDK1.5/JSR14)
+ *      Notes:
+ *      o We only allow the "extends" keyword and not the "implements"
+ *        keyword, since thats what JSR14 seems to imply.
+ *      o Thanks to Monty Zukowski for his help on the antlr-interest
+ *        mail list.
+ *
+ *
  * This grammar is in the PUBLIC DOMAIN
  */
 class JavaRecognizer extends Parser;
@@ -127,6 +136,16 @@
 	STRICTFP="strictfp"; SUPER_CTOR_CALL; CTOR_CALL;
 }
 
+{
+    /**
+     * Counts the number of LT seen in the typeArguments production.
+     * It is used in semantic predicates to ensure we have seen
+     * enough closing '>' characters; which actually may have been
+     * either GT, SR or BSR tokens.
+     */
+    private int ltCounter = 0;
+
+}      
 // Compilation Unit: In Java, this is a single file.  This is the start
 //   rule for this parser
 compilationUnit
@@ -184,21 +203,65 @@
 	| builtInTypeSpec[addImagNode]
 	;
 
-// A class type specification is a class type with possible brackets afterwards
+arraySpecOpt:
+        (options{greedy=true;}: // match as many as possible
+            lb:LBRACK^ {#lb.setType(ARRAY_DECLARATOR);} RBRACK!
+        )*
+    ;
+
+// A class type specification is a class type with either:
+// - possible brackets afterwards
 //   (which would make it an array type).
+// - generic type arguments after
 classTypeSpec[boolean addImagNode]
-	:	identifier (lb:LBRACK^ {#lb.setType(ARRAY_DECLARATOR);} RBRACK!)*
+	:   classOrInterfaceType[addImagNode]
+        arraySpecOpt
 		{
 			if ( addImagNode ) {
 				#classTypeSpec = #(#[TYPE,"TYPE"], #classTypeSpec);
 			}
 		}
 	;
+classOrInterfaceType[boolean addImagNode]
+	:   IDENT (typeArguments[addImagNode])?
+        (options{greedy=true;}: // match as many as possible
+            DOT
+            IDENT (typeArguments[addImagNode])?
+        )*
+    ;
+typeArguments[boolean addImagNode]
+{int currentLtLevel = 0;}
+    :
+        {currentLtLevel = ltCounter;}
+        LT {ltCounter++;}
+        classTypeSpec[addImagNode]
+        (options{greedy=true;}: // match as many as possible
+            COMMA classTypeSpec [addImagNode]
+        )*
+        
+        (   // turn warning off since Antlr generates the right code,
+            // plus we have our semantic predicate below
+            options{generateAmbigWarnings=false;}:
+            typeArgumentsEnd
+        )?
+        
+        // make sure we have gobbled up enough '>' characters
+        // if we are at the "top level" of nested typeArgument productions
+        {(currentLtLevel != 0) || ltCounter == currentLtLevel}?
+    ;
+
+// this gobbles up *some* amount of '>' characters, and counts how many
+// it gobbled.
+protected typeArgumentsEnd:
+        GT {ltCounter-=1;}
+    |   SR {ltCounter-=2;}
+    |   BSR {ltCounter-=3;}
+    ;
 
 // A builtin type specification is a builtin type with possible brackets
 // afterwards (which would make it an array type).
 builtInTypeSpec[boolean addImagNode]
-	:	builtInType (lb:LBRACK^ {#lb.setType(ARRAY_DECLARATOR);} RBRACK!)*
+	:	builtInType arraySpecOpt
 		{
 			if ( addImagNode ) {
 				#builtInTypeSpec = #(#[TYPE,"TYPE"], #builtInTypeSpec);
@@ -206,10 +269,10 @@
 		}
 	;
 
-// A type name. which is either a (possibly qualified) class name or
-//   a primitive (builtin) type
+// A type name. which is either a (possibly qualified and parameterized)
+// class name or a primitive (builtin) type
 type
-	:	identifier
+	:	classOrInterfaceType[false]
 	|	builtInType
 	;
 
@@ -267,6 +330,8 @@
 // Definition of a Java class
 classDefinition![AST modifiers]
 	:	"class" IDENT
+        // it _might_ have type paramaters
+        (typeParameters)?
 		// it _might_ have a superclass...
 		sc:superClassClause
 		// it might implement some interfaces...
@@ -285,6 +350,8 @@
 // Definition of a Java Interface
 interfaceDefinition![AST modifiers]
 	:	"interface" IDENT
+        // it _might_ have type paramaters
+        (typeParameters)?
 		// it might extend some other interfaces
 		ie:interfaceExtends
 		// now parse the body of the interface (looks like a class...)
@@ -293,7 +360,26 @@
 									modifiers,IDENT,ie,cb);}
 	;
 
+typeParameters
+{int currentLtLevel = 0;}
+    :
+        {currentLtLevel = ltCounter;}
+        LT {ltCounter++;}
+        typeParameter (COMMA typeParameter)*
+        (typeArgumentsEnd)?
+        // make sure we have gobbled up enough '>' characters
+        // if we are at the "top level" of nested typeArgument productions
+        {(currentLtLevel != 0) || ltCounter == currentLtLevel}?
+    ;
 
+typeParameter:
+        IDENT
+        (   // I'm pretty sure Antlr generates the right thing here:
+            options{generateAmbigWarnings=false;}:
+            "extends" classOrInterfaceType[false]
+            (BAND classOrInterfaceType[false])*
+        )?
+    ;
 // This is the body of a class.  You can have fields and extra semicolons,
 // That's about it (until you see what a field is...)
 classBlock
@@ -338,7 +424,10 @@
 		|	id:interfaceDefinition[#mods]   // inner interface
 			{#field = #id;}
 
-		|	t:typeSpec[false]  // method or variable declaration(s)
+		|	// A generic method has the typeParameters before the return type.
+            // This is not allowed for variable definitions, but this production
+            // allows it, a semantic check could be used if you wanted.
+            (typeParameters)? t:typeSpec[false]  // method or variable declaration(s)
 			(	IDENT  // the name of the method
 
 				// parse the formal parameter declarations.
@@ -572,7 +661,7 @@
 	|	"synchronized"^ LPAREN! expression RPAREN! compoundStatement
 
 	// asserts (uncomment if you want 1.4 compatibility)
-	// |	"assert"^ expression ( COLON! expression )? SEMI!
+	//|	"assert"^ expression ( COLON! expression )? SEMI!
 
 	// empty statement
 	|	s:SEMI {#s.setType(EMPTY_STAT);}
-------------- next part --------------
import java.util.*;
import java.io.Serializable;
import java.io.Externalizable;

public class G2
{
    public void testDecls()
    {
        String v1;
        java.lang.String v2;
        int v3;
        float v4;
        int[] v5;
        String[] v6;
        float[][][] v7;
        
        // no nesting
        List<String> v8;
        Map<String,Integer> v9;
        Map3<String,Integer,Float> v10;
        
        Map3<java.lang.String,java.lang.Integer,java.lang.Float> v11;
        
        // two nestings
        List<List<String> > v12;
        List<List<String>> v13;
        Map<List<String>,Integer> v14;
        Map<Integer,List<String> > v15;
        Map<Integer,List<String>> v16;
        Map3<List<String>,Integer,Float> v17;
        Map3<Integer,List<String>,Float> v18;
        Map3<Integer,Float,List<String> > v19;
        Map3<Integer,Float,List<String>> v20;
        
        // three nestings
        List<List<List<String> > > v21;
        List<List<List<String>> > v22;
        List<List<List<String> >> v23;
        List<List<List<String>>> v24;
        Map<List<List<String> >,Integer> v25;
        Map<List<List<String>>,Integer> v26;
        Map<Integer,List<List<String> > > v27;
        Map<Integer,List<List<String> >> v28;
        Map<Integer,List<List<String>> > v29;
        Map<Integer,List<List<String>>> v30;
        Map3<List<List<String>>,Integer,Float> v31;
        Map3<Integer,List<List<String>>,Float> v32;
        Map3<Integer,Float,List<List<String> > > v33;
        Map3<Integer,Float,List<List<String>> > v34;
        Map3<Integer,Float,List<List<String> >> v35;
        Map3<Integer,Float,List<List<String>>> v36;
        
        // four nestings
        List<List<List<List<String> > > > v37;
        List<List<List<List<String>> >> v38;
        List<List<List<List<String>> > > v39;
        List<List<List<List<String> > >> v40;
        List<List<List<List<String> >>> v41;
        List<List<List<List<String>>> > v42;
        List<List<List<List<String>>>> v43;
        
        Map<List<List<List<String>>>,Integer> v44;
        Map<Integer,List<List<List<String> > > > v45;
        Map<Integer,List<List<List<String>> >> v46;
        Map<Integer,List<List<List<String>> > > v47;
        Map<Integer,List<List<List<String> > >> v48;
        Map<Integer,List<List<List<String>>> > v49;
        Map<Integer,List<List<List<String> >>> v50;
        
        // make sure more complicatd reference types can be
        // type arguments
        List<String[]> v51;
        List<List<String[]> > v52;
        List<List<String[]>> v53;
        
        Map<String,Integer> v54;
        Map<String,List<Integer> > v55;
        Map<String,List<Integer>> v56;
        Map<List<Integer>,String> v57;
        Map<List<Integer>,List<String>> v58;
        
        Map3<String,Integer,Float> v59;
        Map3<String,List<Integer>,Float> v60;
        
        Map<Map<String,String>,Map3<String,Integer,Float>> v61;
        Map<List<String>,List<Integer>> v62;
        Map3<List<String>,List<Integer>,List<Float>> v63;
        
        List<Object>[] v64;
        Map<String,List<Object>[]> v65;

        // composite names; generic classes that have inner classes
        Seq<String>.Zipper<Integer> v68;
        Seq<String[]>.Zipper<Integer[][]>[] v69;
    }

    public void testExpressions() 
    {
        Object o = null;
        List<Integer> l1 = (ArrayList<Integer>)null;
        l1 = new ArrayList<Integer>();
        Map<Integer,String> l2 = null;
        
        List<Integer>[] a1 = new List<Integer>[1];
        a1[0] = l1;

        //
        // double end-angle-brackets
        //
        
        Map<String,List<Integer> > m1 = new HashMap<String,List<Integer> > ();
        Map<String,List<Integer>>m2 = new HashMap<String,List<Integer>>();

        Pair<Seq<Integer>,Seq<String>> p1 =
            new Pair<Seq<Integer>,Seq<String>>(
                new Seq<Integer>(new Integer(0), new Seq<Integer>()),
                new Seq<String>("abc", new Seq<String>()));

        Seq<Character>[][][] sa1 = new Seq<Character>[10][20][];

        // casting
        l2 = (Map<Integer,String>) null;

        // instanceof
        boolean b1 = l2 instanceof Map<Integer,String>;

        // cast or less-than operator:
        {
            class a<T>{};
            class b{};
            Object x = ( a < b > ) null;
        }
        {
            int a = 0;
            int b = 0;
            String x = ( a < b ) + "";
        }
    }
    
    /** a generic method */
    <Elem extends Comparable<Elem>> void sort(Elem[] a) {
        for (int i = 0; i < a.length; i++)
            for (int j = 0; j < i; j++)
                if (a[j].compareTo(a[i]) < 0) swap(a, i, j);
    }

    static <Elem> void swap(Elem[] a, int i, int j) {
        Elem temp = a[i]; a[i] = a[j]; a[j] = temp;
    }

    void foo()
    {
        // call a generic method
        String[] strings = {"a","c","d","z","b"};
        sort(strings);
    }
    
}


class Pair<TA, TB>
{
    Pair(TA a, TB b) {}
    
}

class Pair1<TA extends java.lang.Number & Serializable,
           TB extends Serializable & Externalizable & Comparable<TA> > 
{
    TA a;
    TB b;

    static <E> void foo1(E x) {}
    static <E> E foo2(E x, E y) {return null;}
    static <E extends Exception> E foo2(E x, E y) throws E {return null;}
    
}

class Pair2<TA extends java.lang.Object & Serializable,
                       TB extends Serializable & Externalizable & Comparable<TA>>
{}

// two ending '>'
class Class1a<T1, T2 extends Comparator<T1>>{}
class Class1b<T1, T2 extends Comparator<T1> >{}
// three ending '>'
class Class2a<T1, T2 extends Comparator<List<T1>>>{}
class Class2b<T1, T2 extends Comparator<List<T1> >>{}
class Class2c<T1, T2 extends Comparator<List<T1>> >{}
class Class2d<T1, T2 extends Comparator<List<T1> > >{}
// four ending '>'
class Class3a<T1, T2 extends Comparator<Pair<String[],List<T1>>>>{}
class Class3b<T1, T2 extends Comparator<Pair<String[],List<T1>> >>{}
class Class3c<T1, T2 extends Comparator<Pair<String[],List<T1>> > >{}
class Class3d<T1, T2 extends Comparator<Pair<String[],List<T1> > >>{}
class Class3e<T1, T2 extends Comparator<Pair<String[],List<T1> >> >{}
class Class3f<T1, T2 extends Comparator<Pair<String[],List<T1>>> >{}
class Class3g<T1, T2 extends Comparator<Pair<String[],List<T1> >>>{}

// a class with three params (used in examples above)
class Map3<T1,T2,T3> {}


// copied from JSR14 document (but syntax errors fixed!
// those "this." expressions did not compile with ea compiler )
class Seq<A> {
    A head;
    Seq<A> tail;
    Seq() { this(null, null); }
    boolean isEmpty() { return tail == null; }
    Seq(A head, Seq<A> tail) { this.head = head; this.tail = tail; }
    class Zipper<B> {
        Seq<Pair<A,B>> zip(Seq<B> that) {
            if (isEmpty() || that.isEmpty())
                return new Seq<Pair<A,B>>();
            else
                return new Seq<Pair<A,B>>(
                    new Pair<A,B>(head, that.head),
                    zip(that.tail));
        }
    }
}
From s.piree at enneya.com  Fri Mar 14 00:34:41 2003
From: s.piree at enneya.com (Silvain Piree)
Date: Mon Dec 20 16:15:27 2004
Subject: [antlr-interest] IBM MVS JCL recognition
References: <170826586F3BD511910D0200C110AAA805402212@memail03.bco-home.com>
Message-ID: <00f401c2ea04$90229730$0200a8c0@daemon>

Jim,

>  JCL has a number of fun recognition problems for which
> ANTLR might have solutions. 

We've built a IBM JCL parser for our re-engineering services
and I would advise you to take the preprocessor route.

We've built a preprocessor using ANTLR lexer to handle 
constructs like:

- EXEC PROC=name, symbols
- PROC name, symbols
- INCLUDE MEMBER=name
- DD *, DLM=...
- SET symbols
- etc.

It would be VERY difficult to build a one-pass parser that does
both preprocessing and parsing.

In fact, even the preprocessing is pretty complex. We usually
build multiple small preprocessors to handle the different
preprocessing constructs (i.e. multi-pass preprocessing), 
but for JCL the only solution was to build a one-pass preprocessor
because everything depends on everything.

Hope this helps, kind greetings,

Silvain Piree
Refactive (www.refactive.com)



 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From pete.forman at westerngeco.com  Fri Mar 14 02:42:18 2003
From: pete.forman at westerngeco.com (Pete Forman)
Date: Mon Dec 20 16:15:27 2004
Subject: [antlr-interest] Help needed upgrading java.g to support  Generics
In-Reply-To: <3E70FBE6.7090401@cortexebusiness.com.au>
References: <170826586F3BD511910D0200C110AAA80540220D@memail03.bco-home.com>
 <170826586F3BD511910D0200C110AAA80540220D@memail03.bco-home.com>
Message-ID: <5.1.1.1.2.20030314100153.01e209c8@wgmail2.gatwick.eur.slb.com>

At 2003-03-14 08:45 +1100, Matt Quail wrote:
>Thanks Monty! That has definitely given me something to think about. I 
>will try
>what you suggest, and remove the ">>", etc. tokens and parser them as GT GT
>instead.
>
>So we may have a parser rule:
>
>sr: GT GT;
>
>The one issue with this is that it will allow WS between the two ">" 
>characters
>in the ">>" operator (which Java does not allow). I might have a play with 
>this
>approach, in any case. I may be able to solve this problem by changing WS 
>from
>"skip" tokens to a {option ignore=WS;}. Will need to think some more on that
>one; any ideas?

An alternative to counting columns that I've used is to keep following
whitespace in the relevant token.  It can be tested in the parser and
removed if appropriate.

   GT: '>' (WHITESPACE)*;

Note that COMMENT might need to be included if that is also skipped.

A variation that I've not tried out is:

   GT: '>' { switch (LA(1)) {
             case '>': $setType(GT_PRE_GT); break;
             case '=': $setType(GT_PRE_EQ); break;
             }
           };

Which the parser might use as:

   unsigned_right_shift: expr1 GT_PRE_GT GT_PRE_GT GT expr2;

In other productions the GT might be (GT|GT_PRE_GT|GT_PRE_EQ).

-- 
Pete Forman                -./\.-  Disclaimer: This post is originated
WesternGeco                  -./\.-   by myself and does not represent
pete.forman@westerngeco.com    -./\.-   opinion of Schlumberger, Baker
http://petef.port5.com           -./\.-   Hughes or their divisions.


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From Jim.OConnor at microfocus.com  Fri Mar 14 06:14:59 2003
From: Jim.OConnor at microfocus.com (Jim O'Connor)
Date: Mon Dec 20 16:15:27 2004
Subject: [antlr-interest] IBM MVS JCL recognition
Message-ID: <3AC103F1B7EEEC48A855ACB1D2819E9106AA1F@rock-corpmail.microfocus.com>

 
Thanks Silvain,
  Your advice does help.  I'm worried about retaining positional/file
information, i.e. "Where does this text come from?", but I have more than
enough work to do with the preprocessor/lexer/grammar.  
  Thanks for the wise words.

Jim

-----Original Message-----
From: Silvain Piree
To: antlr-interest@yahoogroups.com
Sent: 3/14/03 3:34 AM
Subject: Re: [antlr-interest] IBM MVS JCL recognition

Jim,

>  JCL has a number of fun recognition problems for which
> ANTLR might have solutions. 

We've built a IBM JCL parser for our re-engineering services
and I would advise you to take the preprocessor route.

We've built a preprocessor using ANTLR lexer to handle 
constructs like:

- EXEC PROC=name, symbols
- PROC name, symbols
- INCLUDE MEMBER=name
- DD *, DLM=...
- SET symbols
- etc.

It would be VERY difficult to build a one-pass parser that does
both preprocessing and parsing.

In fact, even the preprocessing is pretty complex. We usually
build multiple small preprocessors to handle the different
preprocessing constructs (i.e. multi-pass preprocessing), 
but for JCL the only solution was to build a one-pass preprocessor
because everything depends on everything.

Hope this helps, kind greetings,

Silvain Piree
Refactive (www.refactive.com)



 

Your use of Yahoo! Groups is subject to
http://docs.yahoo.com/info/terms/ 


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From mzukowski at yci.com  Fri Mar 14 07:35:58 2003
From: mzukowski at yci.com (mzukowski@yci.com)
Date: Mon Dec 20 16:15:27 2004
Subject: [antlr-interest] case in-sensitive literals
Message-ID: <170826586F3BD511910D0200C110AAA805402219@memail03.bco-home.com>

Try putting "and" in instead.  I think antlr normalizes to lower case.  I
thought this was a bug that was fixed in 2.7.2, is that what you are using?

Monty

-----Original Message-----
From: Andrew Deren [mailto:andrew@adersoftware.com]
Sent: Thursday, March 13, 2003 4:53 PM
To: antlr-interest@yahoogroups.com
Subject: [antlr-interest] case in-sensitive literals


I need my literals in grammar to not be case sensitive.
I set the option: caseSensitive=false in lexer, and
caseSensitiveLiterals=false but it still doesn't work.
What I'm trying to accomplish is to have in parser:
andExpr : otherExpr "and" otherExpr
but have it work for either "and" or "AND" or any other combination.
I have more of those literals (or, is, not, etc)
It looks like when I put "AND" in the program, lexer matches Token.ID
Thanks,
Andrew



 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From andrew at adersoftware.com  Fri Mar 14 07:56:20 2003
From: andrew at adersoftware.com (Andrew Deren)
Date: Mon Dec 20 16:15:27 2004
Subject: [antlr-interest] case in-sensitive literals
References: <170826586F3BD511910D0200C110AAA805402219@memail03.bco-home.com>
Message-ID: <000901c2ea42$43f906d0$6501a8c0@andrew>

I thought I had 2.7.2. I looked at the install.html and it says 2.7.2.
In my grammar I have "and" lower case, and it would only accept lower case.
Thanks.

----- Original Message -----
From: <mzukowski@yci.com>
To: <antlr-interest@yahoogroups.com>
Sent: Friday, March 14, 2003 9:35 AM
Subject: RE: [antlr-interest] case in-sensitive literals


> Try putting "and" in instead.  I think antlr normalizes to lower case.  I
> thought this was a bug that was fixed in 2.7.2, is that what you are
using?
>
> Monty
>
> -----Original Message-----
> From: Andrew Deren [mailto:andrew@adersoftware.com]
> Sent: Thursday, March 13, 2003 4:53 PM
> To: antlr-interest@yahoogroups.com
> Subject: [antlr-interest] case in-sensitive literals
>
>
> I need my literals in grammar to not be case sensitive.
> I set the option: caseSensitive=false in lexer, and
> caseSensitiveLiterals=false but it still doesn't work.
> What I'm trying to accomplish is to have in parser:
> andExpr : otherExpr "and" otherExpr
> but have it work for either "and" or "AND" or any other combination.
> I have more of those literals (or, is, not, etc)
> It looks like when I put "AND" in the program, lexer matches Token.ID
> Thanks,
> Andrew
>
>
>
>
>
> Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/
>
>
>
>
> Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/
>
>
>
>



 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From mzukowski at yci.com  Fri Mar 14 08:00:06 2003
From: mzukowski at yci.com (mzukowski@yci.com)
Date: Mon Dec 20 16:15:27 2004
Subject: [antlr-interest] case in-sensitive literals
Message-ID: <170826586F3BD511910D0200C110AAA80540221B@memail03.bco-home.com>

The issue used to be that "AND" would be put in the literals table, but
everything coming through would have been normalized to lower case, so "and"
would be looked up an missing.  I sent Ter a patch for that.  From your
previous post it sounds like that normalization wasn't even happening before
testing the literals table.

Monty

-----Original Message-----
From: Andrew Deren [mailto:andrew@adersoftware.com]
Sent: Friday, March 14, 2003 7:56 AM
To: antlr-interest@yahoogroups.com
Subject: Re: [antlr-interest] case in-sensitive literals


I thought I had 2.7.2. I looked at the install.html and it says 2.7.2.
In my grammar I have "and" lower case, and it would only accept lower case.
Thanks.

----- Original Message -----
From: <mzukowski@yci.com>
To: <antlr-interest@yahoogroups.com>
Sent: Friday, March 14, 2003 9:35 AM
Subject: RE: [antlr-interest] case in-sensitive literals


> Try putting "and" in instead.  I think antlr normalizes to lower case.  I
> thought this was a bug that was fixed in 2.7.2, is that what you are
using?
>
> Monty
>
> -----Original Message-----
> From: Andrew Deren [mailto:andrew@adersoftware.com]
> Sent: Thursday, March 13, 2003 4:53 PM
> To: antlr-interest@yahoogroups.com
> Subject: [antlr-interest] case in-sensitive literals
>
>
> I need my literals in grammar to not be case sensitive.
> I set the option: caseSensitive=false in lexer, and
> caseSensitiveLiterals=false but it still doesn't work.
> What I'm trying to accomplish is to have in parser:
> andExpr : otherExpr "and" otherExpr
> but have it work for either "and" or "AND" or any other combination.
> I have more of those literals (or, is, not, etc)
> It looks like when I put "AND" in the program, lexer matches Token.ID
> Thanks,
> Andrew
>
>
>
>
>
> Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/
>
>
>
>
> Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/
>
>
>
>



 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From andrew at adersoftware.com  Fri Mar 14 13:12:10 2003
From: andrew at adersoftware.com (Andrew Deren)
Date: Mon Dec 20 16:15:27 2004
Subject: [antlr-interest] case in-sensitive literals
References: <170826586F3BD511910D0200C110AAA80540221B@memail03.bco-home.com>
Message-ID: <001101c2ea6e$60744550$6501a8c0@andrew>

So what does that mean? Am I doing something wrong?
Is the option caseSensitiveLiterals working properly or do I have to
overload testLiteralsTable to make it work?
Andrew

----- Original Message -----
From: <mzukowski@yci.com>
To: <antlr-interest@yahoogroups.com>
Sent: Friday, March 14, 2003 10:00 AM
Subject: RE: [antlr-interest] case in-sensitive literals


> The issue used to be that "AND" would be put in the literals table, but
> everything coming through would have been normalized to lower case, so
"and"
> would be looked up an missing.  I sent Ter a patch for that.  From your
> previous post it sounds like that normalization wasn't even happening
before
> testing the literals table.
>
> Monty
>
> -----Original Message-----
> From: Andrew Deren [mailto:andrew@adersoftware.com]
> Sent: Friday, March 14, 2003 7:56 AM
> To: antlr-interest@yahoogroups.com
> Subject: Re: [antlr-interest] case in-sensitive literals
>
>
> I thought I had 2.7.2. I looked at the install.html and it says 2.7.2.
> In my grammar I have "and" lower case, and it would only accept lower
case.
> Thanks.
>
> ----- Original Message -----
> From: <mzukowski@yci.com>
> To: <antlr-interest@yahoogroups.com>
> Sent: Friday, March 14, 2003 9:35 AM
> Subject: RE: [antlr-interest] case in-sensitive literals
>
>
> > Try putting "and" in instead.  I think antlr normalizes to lower case.
I
> > thought this was a bug that was fixed in 2.7.2, is that what you are
> using?
> >
> > Monty
> >
> > -----Original Message-----
> > From: Andrew Deren [mailto:andrew@adersoftware.com]
> > Sent: Thursday, March 13, 2003 4:53 PM
> > To: antlr-interest@yahoogroups.com
> > Subject: [antlr-interest] case in-sensitive literals
> >
> >
> > I need my literals in grammar to not be case sensitive.
> > I set the option: caseSensitive=false in lexer, and
> > caseSensitiveLiterals=false but it still doesn't work.
> > What I'm trying to accomplish is to have in parser:
> > andExpr : otherExpr "and" otherExpr
> > but have it work for either "and" or "AND" or any other combination.
> > I have more of those literals (or, is, not, etc)
> > It looks like when I put "AND" in the program, lexer matches Token.ID
> > Thanks,
> > Andrew
> >
> >
> >
> >
> >
> > Your use of Yahoo! Groups is subject to
http://docs.yahoo.com/info/terms/
> >
> >
> >
> >
> > Your use of Yahoo! Groups is subject to
http://docs.yahoo.com/info/terms/
> >
> >
> >
> >
>
>
>
>
>
> Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/
>
>
>
>
> Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/
>
>
>
>



 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From andrew at adersoftware.com  Fri Mar 14 14:55:13 2003
From: andrew at adersoftware.com (Andrew Deren)
Date: Mon Dec 20 16:15:27 2004
Subject: [antlr-interest] TokenStreamException
References: <170826586F3BD511910D0200C110AAA80540221B@memail03.bco-home.com>
Message-ID: <000901c2ea7c$c64d8a90$6501a8c0@andrew>

When executing antlr to generate parser/lexer and the .g file has some
invalid token somewhere,
I get an error:
TokenStreamException: unexpected char: '_'
without any line number or any indication where the error could be.
I think it would be helpful if it at least show the line where that invalid
token is.
Andrew



 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From andrew at adersoftware.com  Fri Mar 14 14:59:17 2003
From: andrew at adersoftware.com (Andrew Deren)
Date: Mon Dec 20 16:15:27 2004
Subject: [antlr-interest] Variables starting with _
References: <170826586F3BD511910D0200C110AAA80540221B@memail03.bco-home.com> <000901c2ea7c$c64d8a90$6501a8c0@andrew>
Message-ID: <000701c2ea7d$577cbf40$6501a8c0@andrew>

It seems antlr won't accept variables that start with _ (underscore)
for example, a parser rule:

rule { Exp _exp = null; }
    :
    _exp = exp
    ;

will result in TokenStreamException. I don't know if that is meant to be
that way, but I would think it should be fine, because _exp is valid
java/c++/c# variable name.
Andrew



 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From lgc at mail1.jpl.nasa.gov  Fri Mar 14 15:00:00 2003
From: lgc at mail1.jpl.nasa.gov (lgcraymer)
Date: Mon Dec 20 16:15:27 2004
Subject: [antlr-interest] Re: TokenStreamException
In-Reply-To: <000901c2ea7c$c64d8a90$6501a8c0@andrew>
Message-ID: <b4tmtg+qq2j@eGroups.com>

Ter said he fixed this in 2.7.2--the problem is in an exception thrown 
by an exception handler.  Try catching the exception in a 
debugger--that helps.  The first exception thrown has the line number, 
but that state information was not passed to the second exception.

--Loring



--- In antlr-interest@yahoogroups.com, "Andrew Deren" <andrew@a...> 
wrote:
> When executing antlr to generate parser/lexer and the .g file has 
some
> invalid token somewhere,
> I get an error:
> TokenStreamException: unexpected char: '_'
> without any line number or any indication where the error could be.
> I think it would be helpful if it at least show the line where that 
invalid
> token is.
> Andrew


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From mzukowski at yci.com  Fri Mar 14 15:11:25 2003
From: mzukowski at yci.com (mzukowski@yci.com)
Date: Mon Dec 20 16:15:27 2004
Subject: [antlr-interest] Variables starting with _
Message-ID: <170826586F3BD511910D0200C110AAA805402222@memail03.bco-home.com>

Antlr creates some of its own variables starting with _, so it might be
preventing you from doing the same.

Monty

-----Original Message-----
From: Andrew Deren [mailto:andrew@adersoftware.com]
Sent: Friday, March 14, 2003 2:59 PM
To: antlr-interest@yahoogroups.com
Subject: [antlr-interest] Variables starting with _


It seems antlr won't accept variables that start with _ (underscore)
for example, a parser rule:

rule { Exp _exp = null; }
    :
    _exp = exp
    ;

will result in TokenStreamException. I don't know if that is meant to be
that way, but I would think it should be fine, because _exp is valid
java/c++/c# variable name.
Andrew



 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From mzukowski at yci.com  Fri Mar 14 15:12:14 2003
From: mzukowski at yci.com (mzukowski@yci.com)
Date: Mon Dec 20 16:15:27 2004
Subject: [antlr-interest] case in-sensitive literals
Message-ID: <170826586F3BD511910D0200C110AAA805402223@memail03.bco-home.com>

I think you had the right solution that you posted earlier, to work around a
bug you had discovered.

Monty

-----Original Message-----
From: Andrew Deren [mailto:andrew@adersoftware.com]
Sent: Friday, March 14, 2003 1:12 PM
To: antlr-interest@yahoogroups.com
Subject: Re: [antlr-interest] case in-sensitive literals


So what does that mean? Am I doing something wrong?
Is the option caseSensitiveLiterals working properly or do I have to
overload testLiteralsTable to make it work?
Andrew

----- Original Message -----
From: <mzukowski@yci.com>
To: <antlr-interest@yahoogroups.com>
Sent: Friday, March 14, 2003 10:00 AM
Subject: RE: [antlr-interest] case in-sensitive literals


> The issue used to be that "AND" would be put in the literals table, but
> everything coming through would have been normalized to lower case, so
"and"
> would be looked up an missing.  I sent Ter a patch for that.  From your
> previous post it sounds like that normalization wasn't even happening
before
> testing the literals table.
>
> Monty
>
> -----Original Message-----
> From: Andrew Deren [mailto:andrew@adersoftware.com]
> Sent: Friday, March 14, 2003 7:56 AM
> To: antlr-interest@yahoogroups.com
> Subject: Re: [antlr-interest] case in-sensitive literals
>
>
> I thought I had 2.7.2. I looked at the install.html and it says 2.7.2.
> In my grammar I have "and" lower case, and it would only accept lower
case.
> Thanks.
>
> ----- Original Message -----
> From: <mzukowski@yci.com>
> To: <antlr-interest@yahoogroups.com>
> Sent: Friday, March 14, 2003 9:35 AM
> Subject: RE: [antlr-interest] case in-sensitive literals
>
>
> > Try putting "and" in instead.  I think antlr normalizes to lower case.
I
> > thought this was a bug that was fixed in 2.7.2, is that what you are
> using?
> >
> > Monty
> >
> > -----Original Message-----
> > From: Andrew Deren [mailto:andrew@adersoftware.com]
> > Sent: Thursday, March 13, 2003 4:53 PM
> > To: antlr-interest@yahoogroups.com
> > Subject: [antlr-interest] case in-sensitive literals
> >
> >
> > I need my literals in grammar to not be case sensitive.
> > I set the option: caseSensitive=false in lexer, and
> > caseSensitiveLiterals=false but it still doesn't work.
> > What I'm trying to accomplish is to have in parser:
> > andExpr : otherExpr "and" otherExpr
> > but have it work for either "and" or "AND" or any other combination.
> > I have more of those literals (or, is, not, etc)
> > It looks like when I put "AND" in the program, lexer matches Token.ID
> > Thanks,
> > Andrew
> >
> >
> >
> >
> >
> > Your use of Yahoo! Groups is subject to
http://docs.yahoo.com/info/terms/
> >
> >
> >
> >
> > Your use of Yahoo! Groups is subject to
http://docs.yahoo.com/info/terms/
> >
> >
> >
> >
>
>
>
>
>
> Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/
>
>
>
>
> Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/
>
>
>
>



 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From rbencina at iprimus.com.au  Sat Mar 15 01:00:53 2003
From: rbencina at iprimus.com.au (Ross Bencina)
Date: Mon Dec 20 16:15:27 2004
Subject: [antlr-interest] antlr + build tools : does antlr only re-generate files that have changed?
Message-ID: <009801c2ead1$62f9aeb0$0101a8c0@athlon900>

Hi Everyone

I'm using ANTLR 2.7.2 on WinXP(no service pack) with Sun JRE 1.4.0_01. I'm
trying to set up a build system with jam
(http://www.perforce.com/jam/jam.html).

I have a grammar file which generates both Parser.cpp/.hpp and
Lexer.cpp/.hpp files. What seems to be happening is that only the generated
.cpp or .h files that need to change are actually written to disk - for
example if I edit a semantic action in the parser grammar, only Parser.cpp
gets modified (Parser.h, Lexer.cpp/.hpp file modification dates remain
unchanged.) My first question is - is this the expected an normal behavior
of antlr?

If the above is normal behavior, I'm wondering if there is a way to force
antlr to regenerate all source files when the grammar is processed?

The problem I'm having at the moment is that because antlr only seems to
update the source files that need to change, my build script is getting
confused and sometimes gets stuck thinking that the .cpp/.h files always
need to be regenerated because their file modification dates are older than
the .g file's modification date.

My current workaround is to touch all of the generated files, but I'd prefer
not to require touch on Win32 to make the build work.

Has anyone dealt with this in the past? Any suggestions would be
appreciated.

Thanks

Ross.


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From edcjones at yahoo.com  Sat Mar 15 08:17:55 2003
From: edcjones at yahoo.com (edcjones)
Date: Mon Dec 20 16:15:27 2004
Subject: [antlr-interest] cgram uses deprecated method
Message-ID: <b4vjnj+ovar@eGroups.com>

I get the following messages for cgram/examples/Test.java. The code
compiles and executes.

> javac Test.java
Note: Test.java uses or overrides a deprecated API.
Note: Recompile with -deprecation for details.
> javac -deprecation Test.java
Test.java:33: warning: setASTNodeType(java.lang.String) in
antlr.Parser has been deprecated
            parser.setASTNodeType(TNode.class.getName());
                  ^
1 warning
> java -version
java version "1.4.1"
Java(TM) 2 Runtime Environment, Standard Edition (build
Blackdown-1.4.1-beta)
Java HotSpot(TM) Client VM (build Blackdown-1.4.1-beta, mixed mode)
>

I sense from an Internet search that "setASTNodeType" should be
replaced by "setASTNodeClass". Is this correct?

Note: In a number of places on the Internet I found API documentation
for antlr 2.7.1. See, for example,

http://www.i.4d-box.com/manual/antlr/overview-summary.html
http://www.doc.ic.ac.uk/lab/secondyear/Antlr/API/

Is this style of documentation available for 2.7.2?


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From andrew at adersoftware.com  Sat Mar 15 17:34:36 2003
From: andrew at adersoftware.com (Andrew Deren)
Date: Mon Dec 20 16:15:27 2004
Subject: [antlr-interest] Dynamically typed languages
References: <009801c2ead1$62f9aeb0$0101a8c0@athlon900>
Message-ID: <001501c2eb5c$34a96330$6401a8c0@andrew>

Does anyone know of a good reference or source code implementation about
dynamically typed languages.
I'm working on such a language in C#, so I can't really do nice tricks with
direct memory access. I looked at PHP implementation, but that seems to be
too complex for my needs. I need something simpler. I thought maybe
smalltalk implementation would be good, but my language is a bit different.
Currently I have variables stored in hashtable and each variable is an
object derived from common abstract Variable.
All the operations are dispatched thru dynamic dispatch on the variable, but
it seems to me that this is not quite efficient. There must be a better way.
I'd be happy if someone could point me to some research paper or
implementation of this.
Thanks,
Andrew



 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From edcjones at yahoo.com  Sat Mar 15 21:35:00 2003
From: edcjones at yahoo.com (edcjones)
Date: Mon Dec 20 16:15:27 2004
Subject: [antlr-interest] Re: Dynamically typed languages
In-Reply-To: <001501c2eb5c$34a96330$6401a8c0@andrew>
Message-ID: <b512e4+aq95@eGroups.com>

Check out Python at "http://www.python.org/".

--- In antlr-interest@yahoogroups.com, "Andrew Deren" <andrew@a...> wrote:
> Does anyone know of a good reference or source code implementation about
> dynamically typed languages.
> I'm working on such a language in C#, so I can't really do nice
tricks with
> direct memory access. I looked at PHP implementation, but that seems
to be
> too complex for my needs. I need something simpler. I thought maybe
> smalltalk implementation would be good, but my language is a bit
different.
> Currently I have variables stored in hashtable and each variable is an
> object derived from common abstract Variable.
> All the operations are dispatched thru dynamic dispatch on the
variable, but
> it seems to me that this is not quite efficient. There must be a
better way.
> I'd be happy if someone could point me to some research paper or
> implementation of this.
> Thanks,
> Andrew


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From yeechai_ at hotmail.com  Sun Mar 16 04:39:09 2003
From: yeechai_ at hotmail.com (fongyeelaw)
Date: Mon Dec 20 16:15:27 2004
Subject: [antlr-interest] java problem
Message-ID: <b51r9d+bms2@eGroups.com>

I am new to anltr and using the java grammar that antlr come with.
I have a problem when parsing an invalid java source.

e.g.

public String getName() {
    return "Alex     <- if i lost close quote there, it will lock my 
program when parsing the source,
}

there are no error message and seems never terminated


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From afleance at yahoo.com  Sun Mar 16 10:40:38 2003
From: afleance at yahoo.com (afleance)
Date: Mon Dec 20 16:15:27 2004
Subject: [antlr-interest] Help with grammer for IRC TEXT
Message-ID: <b52gf6+s8sa@eGroups.com>

Hello,

This is my first try at creating a ANTLR grammer file.
I have read through the ANTLR FAQ and the excellent article "Lexical
Analysis with ANTLR", so I know enough to be dangerous, but I think
I'm missing something fundamental.

I am trying to parse text from an IRC channel into the following 
tokens.

URL
FLOAT
INT
WORD
WS

IRC_BOLD   /* CTRL-B toggles text bold */
IRC_PLAIN  /* CTRL-O turns off text decoration */
IRC_UNDERLINE /* CTRL-U toggles text underlined */
IRC_REVERSE  /* CTRL-R toggles text reversed */
IRC_COLOR  /* CTRL-K INT, e.g. CTRL-K12, makes following text 
colored (00 - 16) */

NONWORD (anything else)

Using my IRCLexer class, I am converting the IRC text tokens into the
equivalent HTML.

Well, the problem is I am not getting all the tokens I expect. When I
compile the file I get lots of non-determinism warnings, so I know 
something is wrong.

The URL, IRC_BOLD, IRC_PLAIN, IRC_UNDERLINE, IRC_REVERSE, and 
IRC_COLOR,
and WS tokesn are handled fine, but I'm not getting FLOAT, INT, 
WORD, and
NONWORD returned correctly.

Can someone tell me what I'm doing wrong here?

Also, certain text is causing an Exception. For example, if I type
"http://  " I get the error "line 1:8 unexpected char: 0x?F".

How can I get ANTLR to *never* throw an Exception, and just
pass through text which doesn't match anything.  I tried doing
that with the NONWORD rule.

Here are the example text I am trying in the file

<CTRL-B>test<CTRL-O>test
IRC_BOLD IRC_WORD IRC_PLAIN IRC_WORD

http://www.cnn.com 
URL

23.45 -2333.555
FLOAT WS INT

23.555http://www.cnn.com?num=23.445<CTRL-K>09-23.555
FLOAT URL IRC_COLOR(09) FLOAT

----

class IRCLexer extends Lexer;

options {
	k=8;
	filter=false;
	/* all 8 bit chars */
	charVocabulary = '\u0000'..'\u00FF';
}

URL     : HTTP ( LETTER | DIGIT | URL_SPECIAL_CHAR )+
	{ System.out.println("URL "+getText()); }
	;
IRC_BOLD    : '\002' /* CTRL-B*/
	{ System.out.println("IRC_BOLD"); }
	;
IRC_PLAIN   :  '\u000f' /*CTRL-O*/
	{ System.out.println("IRC_PLAIN"); }
	;
IRC_UNDERLINE : '\u0015' /*CTRL-U*/
	  { System.out.println("IRC_UNDERLINE"); }
	  ;
IRC_REVERSE : '\u0016' /*CTRL-R*/
	{ System.out.println("IRC_REVERSE"); }
	;
IRC_COLOR   : '\u0003' /*CTRL-K*/  i:INT_2SD
	{  
	  System.out.println("IRC_COLOR = "+ i.getText());
	  setText(i.getText());
	}
	;

IRC_WORD : ( LETTER | DIGIT | '_' )
        { System.out.println("IRC_WORD: "+getText()); }
        ;

FLOAT_OR_INT : ( INT '.' ) => FLOAT 
	     { 
	     $setType(FLOAT); 
	     System.out.println("FLOAT: "+getText()); 
	     }
	     | ( INT )
	     { 
	     $setType(INT); 
	     System.out.println("INT: "+getText()); 
	     }
	;

FLOAT : INT '.' UNSIGNED_INT
        { System.out.println("FLOAT : "+getText()); }
        ;

INT : ( '-' UNSIGNED_INT )
        { System.out.println("INT: "+getText()); }
        ;

WS  :   (   ' '
        |   '\t'
        |   '\r' '\n' { newline(); }
        |   '\n'      { newline(); }
        )
        {
	System.out.println("WS");	
/*      I want to return WS as tokens
	$setType(Token.SKIP);
*/
	} 
    ;

/* Catchall, pass through everything not matched above ?? */
NONWORD : . 
        { System.out.println("NONWORD: '"+getText()+"'"); }
	;

//protected means the token  can only be called from another lexer 
rule; 
// it will not ever directly return a token to the parser.
protected                                    

HTTP    : "http://"
	{ System.out.println("http:// "+getText()); }
	;

URL_SPECIAL_CHAR : ('$' | '-' | '_' | '@' | '.' | '&' | '+' |
		 '!' | '*' | '"' | '\'' | '(' | ')' | ',' |
		 '=' | ';' | '/' | '#' | '?' | '\\'':' | '%' )
	  { System.out.println("URL_SPECIAL_CHAR: "+getText()); }
	  ;

LETTER : ('a'..'z'|'A'..'Z')
/*
        { System.out.println("LETTER: "+getText()); }
*/
	;

UNSIGNED_INT : (DIGIT)+
        { System.out.println("UNSIGNED_INT: "+getText()); }
        ;

DIGIT : ('0'..'9')
/*
        { System.out.println("Found numeric: "+getText()); }
*/
        ;

/* special rule to match either 1 or 2 digit integers
   used by IRC_COLOR above */
INT_2SD : (DIGIT)(DIGIT)?
        { System.out.println("INT_2SD: "+getText()); }
        ;





 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From afleance at yahoo.com  Sun Mar 16 18:20:17 2003
From: afleance at yahoo.com (afleance)
Date: Mon Dec 20 16:15:27 2004
Subject: [antlr-interest] Re: Help with grammer for IRC TEXT
In-Reply-To: <b52gf6+s8sa@eGroups.com>
Message-ID: <b53bd1+nfk5@eGroups.com>

I found out my main problem is I thought the protected keyword 
applied to all rules below it; I didn't realize I needed to add 
protected keyword to each rule. Once I did that, it is working
much better.

However, I still have a problem with syntax errors getting thrown 
for things like "http: "  "http:\\" (note \\ instead of //).  I
want the Lexer to just return unmatched text as an UNKNOWN_TEXT
token, but I can't figure out how to do that. 

Also, my rules for INT and FLOAT and FLOAT_OR_INT aren't working
properly when using an optional minus sign. I am trying to
detect INT e.g. 5 or -5 and FLOAT, e.g. 5.5 or -5.5

----

class IRCLexer extends Lexer;

options {
	k=4;
	filter=false;
	/* all 8 bit chars */
	charVocabulary = '\u0000'..'\u00FF';
}

URL     : HTTP ( LETTER | DIGIT | URL_SPECIAL_CHAR )+
	;
IRC_BOLD    : '\002' /* CTRL-B*/
	;
IRC_PLAIN   :  '\u000f' /*CTRL-O*/
	;
IRC_UNDERLINE : '\u0015' /*CTRL-U*/
	  ;
IRC_REVERSE : '\u0016' /*CTRL-R*/
	;

/* <CTRL-K>[FG[,BG]] where FG=00..16 and BG=00.16, e.g  <CTRL-K>04,01
*/

IRC_COLOR   : '\u0003' /*CTRL-K*/  (i:INT_2SD)? (',' (j:INT_2SD))?
	{  
	  if (i != null && j != null) {
	     setText(i.getText()+","+j.getText());
          } else if (i != null) {
	    setText(i.getText());
	  } else {
	    setText("");
	  }
	}
	;

IRC_WORD : ( LETTER | DIGIT | '_' )+
        ;

FLOAT_OR_INT : ( INT '.' ) => FLOAT 
	     { 
	     $setType(FLOAT); 
	     }
	     | ( INT )
	     { 
	     $setType(INT); 
	     }
	;

WS  :   (   ' '
        |   '\t'
        |   '\r' '\n' { newline(); }
        |   '\n'      { newline(); }
        )
        {	
/*      I want to return WS as tokens
	$setType(Token.SKIP);
*/
	} 
    ;

/* Catch all, pass through everything not matched above ?? */
UNMATCHED_TEXT : . 
	;

/********************************
 ** PROTECTED RULES 
 ********************************/
protected
FLOAT : INT '.' UNSIGNED_INT
        ;

protected
INT : ( '-' UNSIGNED_INT )
        ;

protected
HTTP    : "http://"
	;

protected
URL_SPECIAL_CHAR : ('$' | '-' | '_' | '@' | '.' | '&' | '+' |
		 '!' | '*' | '"' | '\'' | '(' | ')' | ',' |
		 '=' | ';' | '/' | '#' | '?' | '\\'':' | '%' )
	  ;

protected
LETTER : ('a'..'z'|'A'..'Z')
	;

protected
UNSIGNED_INT : (DIGIT)+
        ;

protected
DIGIT : ('0'..'9')
        ;

/* Special rule to match either 1 or 2 digit integers
   used by IRC_COLOR above */
protected
INT_2SD : (DIGIT)(DIGIT)?
        ;




 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From andrew at adersoftware.com  Sun Mar 16 19:35:56 2003
From: andrew at adersoftware.com (Andrew Deren)
Date: Mon Dec 20 16:15:27 2004
Subject: [antlr-interest] Re: Dynamically typed languages
References: <b512e4+aq95@eGroups.com>
Message-ID: <000d01c2ec36$523465f0$6401a8c0@andrew>

Thanks for pointing that out. Jython looks exactly to be what I needed.
Unfortunatelly, I have never used python before, so to use their
implementation I would have to learn it a bit.
Not a bad thing though.
Thanks,
Andrew

----- Original Message -----
From: "edcjones" <edcjones@yahoo.com>
To: <antlr-interest@yahoogroups.com>
Sent: Saturday, March 15, 2003 11:35 PM
Subject: [antlr-interest] Re: Dynamically typed languages


> Check out Python at "http://www.python.org/".
>
> --- In antlr-interest@yahoogroups.com, "Andrew Deren" <andrew@a...> wrote:
> > Does anyone know of a good reference or source code implementation about
> > dynamically typed languages.
> > I'm working on such a language in C#, so I can't really do nice
> tricks with
> > direct memory access. I looked at PHP implementation, but that seems
> to be
> > too complex for my needs. I need something simpler. I thought maybe
> > smalltalk implementation would be good, but my language is a bit
> different.
> > Currently I have variables stored in hashtable and each variable is an
> > object derived from common abstract Variable.
> > All the operations are dispatched thru dynamic dispatch on the
> variable, but
> > it seems to me that this is not quite efficient. There must be a
> better way.
> > I'd be happy if someone could point me to some research paper or
> > implementation of this.
> > Thanks,
> > Andrew
>
>
>
>
> Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/
>
>
>
>



 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From klaren at cs.utwente.nl  Mon Mar 17 01:46:01 2003
From: klaren at cs.utwente.nl (Ric Klaren)
Date: Mon Dec 20 16:15:27 2004
Subject: [antlr-interest] antlr + build tools : does antlr only re-generate files that have changed?
In-Reply-To: <009801c2ead1$62f9aeb0$0101a8c0@athlon900>; from rbencina@iprimus.com.au on Sat, Mar 15, 2003 at 08:00:53PM +1100
References: <009801c2ead1$62f9aeb0$0101a8c0@athlon900>
Message-ID: <20030317104600.A5251@cs.utwente.nl>

Hi,

On Sat, Mar 15, 2003 at 08:00:53PM +1100, Ross Bencina wrote:
> example if I edit a semantic action in the parser grammar, only Parser.cpp
> gets modified (Parser.h, Lexer.cpp/.hpp file modification dates remain
> unchanged.) My first question is - is this the expected an normal behavior
> of antlr?

This was added somewhere in the 2.7.1 track. It prevents lengthy
(unnecessary) rebuilds in C++ mode. In makefiles I generally use a rule
that runs antlr and touches a little help file. The help file is then used
in following dependencies. This works very well. With a bit of luck it
might work too with your build script ?

Cheers,

Ric
-- 
-----+++++*****************************************************+++++++++-------
    ---- Ric Klaren ----- j.klaren@utwente.nl ----- +31 53 4893722  ----
-----+++++*****************************************************+++++++++-------
  "I think we better split up."
  "Good idea. We can do more damage that way."
  --- Ghostbusters


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From albert.huh at embarcadero-ca.com  Mon Mar 17 11:03:16 2003
From: albert.huh at embarcadero-ca.com (Albert Huh)
Date: Mon Dec 20 16:15:27 2004
Subject: [antlr-interest] full LL(K) vs linear approximation?
Message-ID: <0881AC7F2F339C40BC6F7983D1E0BEC973081F@mail2k.embarcadero-ca.com>

does anybody know exactly why full LL(k) isn't done in antlr?

is it due to speed with larger k-values?  (each decision will take k^2 comparisions as opposed to just k comparisions?)

is it harder to generate full LL(k) analysis code?

 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From mzukowski at yci.com  Mon Mar 17 12:02:41 2003
From: mzukowski at yci.com (mzukowski@yci.com)
Date: Mon Dec 20 16:15:27 2004
Subject: [antlr-interest] full LL(K) vs linear approximation?
Message-ID: <170826586F3BD511910D0200C110AAA805402228@memail03.bco-home.com>

It also takes longer to do the analysis for LL(K) than for LALL(K).  The
main reason it isn't done is because of laziness; LALL(K) works most of the
time.  The ideal is to detect those situations where LALL(K) fails and then
do full LL(K) analysis.  This has some pretty big repercussions on the
current implementation of the LALL(K) analysis algorithm, which needs to be
reworked anyhow to accomodate hoisting of semantic predicates.

Speed is also a major issue in the generated parser.  The hybrid approach
will be the best win.  Generating LL(K) decision code is straightforward.

Monty

-----Original Message-----
From: Albert Huh [mailto:albert.huh@embarcadero-ca.com]
Sent: Monday, March 17, 2003 11:03 AM
To: antlr-interest@yahoogroups.com
Subject: [antlr-interest] full LL(K) vs linear approximation?


does anybody know exactly why full LL(k) isn't done in antlr?

is it due to speed with larger k-values?  (each decision will take k^2
comparisions as opposed to just k comparisions?)

is it harder to generate full LL(k) analysis code?

 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From albert.huh at embarcadero-ca.com  Mon Mar 17 12:30:19 2003
From: albert.huh at embarcadero-ca.com (Albert Huh)
Date: Mon Dec 20 16:15:27 2004
Subject: [antlr-interest] full LL(K) vs linear approximation?
Message-ID: <0881AC7F2F339C40BC6F7983D1E0BEC9730821@mail2k.embarcadero-ca.com>

sorry, but can somebody explain hoisting of semantic predicates to me?

thanks,
albert

-----Original Message-----
From: mzukowski@yci.com [mailto:mzukowski@yci.com]
Sent: Monday, March 17, 2003 3:03 PM
To: antlr-interest@yahoogroups.com
Subject: RE: [antlr-interest] full LL(K) vs linear approximation?


It also takes longer to do the analysis for LL(K) than for LALL(K).  The
main reason it isn't done is because of laziness; LALL(K) works most of the
time.  The ideal is to detect those situations where LALL(K) fails and then
do full LL(K) analysis.  This has some pretty big repercussions on the
current implementation of the LALL(K) analysis algorithm, which needs to be
reworked anyhow to accomodate hoisting of semantic predicates.

Speed is also a major issue in the generated parser.  The hybrid approach
will be the best win.  Generating LL(K) decision code is straightforward.

Monty

-----Original Message-----
From: Albert Huh [mailto:albert.huh@embarcadero-ca.com]
Sent: Monday, March 17, 2003 11:03 AM
To: antlr-interest@yahoogroups.com
Subject: [antlr-interest] full LL(K) vs linear approximation?


does anybody know exactly why full LL(k) isn't done in antlr?

is it due to speed with larger k-values?  (each decision will take k^2
comparisions as opposed to just k comparisions?)

is it harder to generate full LL(k) analysis code?

 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 



 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From kyungsunh at yahoo.com  Mon Mar 17 13:32:26 2003
From: kyungsunh at yahoo.com (Kyungsun Han)
Date: Mon Dec 20 16:15:27 2004
Subject: [antlr-interest] about case sensitive lexer rule under case Insensitive option
In-Reply-To: <170826586F3BD511910D0200C110AAA805402228@memail03.bco-home.com>
Message-ID: <20030317213226.50760.qmail@web41008.mail.yahoo.com>

I set the lexer rules to caseInsensitive in the
options. However, one of rule should be case
sensitive. 
Is there any possibility to suppress the case
insensitive  option only for this special lexer rule?
Thanks in advance.





__________________________________________________
Do you Yahoo!?
Yahoo! Platinum - Watch CBS' NCAA March Madness, live on your desktop!
http://platinum.yahoo.com

 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From gitadut at yahoo.co.uk  Tue Mar 18 03:55:20 2003
From: gitadut at yahoo.co.uk (gitadut)
Date: Mon Dec 20 16:15:27 2004
Subject: [antlr-interest] Reusing the same rules again Antlt started giving problem
Message-ID: <b571f8+79bo@eGroups.com>

Antlr behaves abnormally when I want to describe the production rules 
in Lexer part reusing some of the rules already defined by me. 

Like METASTRING :
((POP) | (STRING) | "/")
;
When I have defined POP in some way. Does the space after POP is a 
rule?

Next is how can I parse some string tokens by Antlr?
I've describes in Parser part 

Reserved :
(CIRCUIT)
;
Then in Lexer 

CIRCUIT
: "Circuit"
;
But it is not solving my problem. 
Are there any suggestions or comments from anyone?
Thanks in advance. 

Gita





 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From cormier at u-picardie.fr  Tue Mar 18 05:47:37 2003
From: cormier at u-picardie.fr (Christian CORMIER)
Date: Mon Dec 20 16:15:27 2004
Subject: [antlr-interest] (unknown)
Message-ID: <1047995257.3e7723796b4f0@webmail.u-picardie.fr>

Hi,
I have in an AST a rule like this :
A : B (C)? ;
When B is recognized, a semantic action is necessary only if C is present.
How to do that?
Regards
Christian CORMIER
cormier@u-picardie.fr

 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From pete.forman at westerngeco.com  Tue Mar 18 06:16:02 2003
From: pete.forman at westerngeco.com (Pete Forman)
Date: Mon Dec 20 16:15:27 2004
Subject: [antlr-interest] (unknown)
In-Reply-To: <1047995257.3e7723796b4f0@webmail.u-picardie.fr>
Message-ID: <5.1.1.1.2.20030318141348.021b7258@wgmail2.gatwick.eur.slb.com>

At 2003-03-18 14:47 +0100, Christian CORMIER wrote:
>I have in an AST a rule like this :
>A : B (C)? ;
>When B is recognized, a semantic action is necessary only if C is present.

A : B ( C {do_action;}
       | // empty
       ) ;

-- 
Pete Forman                -./\.-  Disclaimer: This post is originated
WesternGeco                  -./\.-   by myself and does not represent
pete.forman@westerngeco.com    -./\.-   opinion of Schlumberger, Baker
http://petef.port5.com           -./\.-   Hughes or their divisions.


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From mzukowski at yci.com  Tue Mar 18 08:06:14 2003
From: mzukowski at yci.com (mzukowski@yci.com)
Date: Mon Dec 20 16:15:27 2004
Subject: [antlr-interest] Reusing the same rules again Antlt started g
	iving problem
Message-ID: <170826586F3BD511910D0200C110AAA80540222A@memail03.bco-home.com>

Read the docs about protected lexer rules.  Look at the examples on how to
parse strings.  java.g is a good one.

Monty

-----Original Message-----
From: gitadut [mailto:gitadut@yahoo.co.uk]
Sent: Tuesday, March 18, 2003 3:55 AM
To: antlr-interest@yahoogroups.com
Subject: [antlr-interest] Reusing the same rules again Antlt started
giving problem


Antlr behaves abnormally when I want to describe the production rules 
in Lexer part reusing some of the rules already defined by me. 

Like METASTRING :
((POP) | (STRING) | "/")
;
When I have defined POP in some way. Does the space after POP is a 
rule?

Next is how can I parse some string tokens by Antlr?
I've describes in Parser part 

Reserved :
(CIRCUIT)
;
Then in Lexer 

CIRCUIT
: "Circuit"
;
But it is not solving my problem. 
Are there any suggestions or comments from anyone?
Thanks in advance. 

Gita





 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From lgc at mail1.jpl.nasa.gov  Tue Mar 18 10:36:44 2003
From: lgc at mail1.jpl.nasa.gov (lgcraymer)
Date: Mon Dec 20 16:15:27 2004
Subject: [antlr-interest] Re: full LL(K) vs linear approximation?
In-Reply-To: <170826586F3BD511910D0200C110AAA805402228@memail03.bco-home.com>
Message-ID: <b57ovs+au97@eGroups.com>

"Distraction" may be a better description than "laziness", as I'm 
sure Monty will agree:  ANTLR 2 was implemented hurriedly, and Ter was 
immediately thereafter very actively involved in getting first 
MageLang and then jGuru going. There are a few PCCTS features--like 
full LL(k) and semantic predicate hoisting--that didn't make it into 
ANTLR 2.  Ter has "promised" to make sure that they make it into ANTLR 
3. 

--Loring

--- In antlr-interest@yahoogroups.com, mzukowski@y... wrote:
> It also takes longer to do the analysis for LL(K) than for LALL(K).  
The
> main reason it isn't done is because of laziness; LALL(K) works most 
of the
> time.  The ideal is to detect those situations where LALL(K) fails 
and then
> do full LL(K) analysis.  This has some pretty big repercussions on 
the
> current implementation of the LALL(K) analysis algorithm, which 
needs to be
> reworked anyhow to accomodate hoisting of semantic predicates.
> 
> Speed is also a major issue in the generated parser.  The hybrid 
approach
> will be the best win.  Generating LL(K) decision code is 
straightforward.
> 
> Monty
> 
> -----Original Message-----
> From: Albert Huh [mailto:albert.huh@e...]
> Sent: Monday, March 17, 2003 11:03 AM
> To: antlr-interest@yahoogroups.com
> Subject: [antlr-interest] full LL(K) vs linear approximation?
> 
> 
> does anybody know exactly why full LL(k) isn't done in antlr?
> 
> is it due to speed with larger k-values?  (each decision will take 
k^2
> comparisions as opposed to just k comparisions?)
> 
> is it harder to generate full LL(k) analysis code?
> 
>  
> 
> Your use of Yahoo! Groups is subject to 
http://docs.yahoo.com/info/terms/


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From mzukowski at yci.com  Tue Mar 18 13:26:43 2003
From: mzukowski at yci.com (mzukowski@yci.com)
Date: Mon Dec 20 16:15:27 2004
Subject: [antlr-interest] Re: full LL(K) vs linear approximation?
Message-ID: <170826586F3BD511910D0200C110AAA805402230@memail03.bco-home.com>

Yes, I fully agree.  Laziness was a poor choice of words.  Ter's much more
active now that he's teaching.  The future looks brighter than ever for
antlr.

Monty

-----Original Message-----
From: lgcraymer [mailto:lgc@mail1.jpl.nasa.gov]
Sent: Tuesday, March 18, 2003 10:37 AM
To: antlr-interest@yahoogroups.com
Subject: [antlr-interest] Re: full LL(K) vs linear approximation?


"Distraction" may be a better description than "laziness", as I'm 
sure Monty will agree:  ANTLR 2 was implemented hurriedly, and Ter was 
immediately thereafter very actively involved in getting first 
MageLang and then jGuru going. There are a few PCCTS features--like 
full LL(k) and semantic predicate hoisting--that didn't make it into 
ANTLR 2.  Ter has "promised" to make sure that they make it into ANTLR 
3. 

--Loring

--- In antlr-interest@yahoogroups.com, mzukowski@y... wrote:
> It also takes longer to do the analysis for LL(K) than for LALL(K).  
The
> main reason it isn't done is because of laziness; LALL(K) works most 
of the
> time.  The ideal is to detect those situations where LALL(K) fails 
and then
> do full LL(K) analysis.  This has some pretty big repercussions on 
the
> current implementation of the LALL(K) analysis algorithm, which 
needs to be
> reworked anyhow to accomodate hoisting of semantic predicates.
> 
> Speed is also a major issue in the generated parser.  The hybrid 
approach
> will be the best win.  Generating LL(K) decision code is 
straightforward.
> 
> Monty
> 
> -----Original Message-----
> From: Albert Huh [mailto:albert.huh@e...]
> Sent: Monday, March 17, 2003 11:03 AM
> To: antlr-interest@yahoogroups.com
> Subject: [antlr-interest] full LL(K) vs linear approximation?
> 
> 
> does anybody know exactly why full LL(k) isn't done in antlr?
> 
> is it due to speed with larger k-values?  (each decision will take 
k^2
> comparisions as opposed to just k comparisions?)
> 
> is it harder to generate full LL(k) analysis code?
> 
>  
> 
> Your use of Yahoo! Groups is subject to 
http://docs.yahoo.com/info/terms/


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From richard.ney at aspect.com  Tue Mar 18 19:07:36 2003
From: richard.ney at aspect.com (Ney, Richard)
Date: Mon Dec 20 16:15:27 2004
Subject: [antlr-interest] C# CommonAST class and Clone()
Message-ID: <0F9CBE7F81945C4BB7A32BE6E7656EE0722935@sac1exch3.aspect.com>

Michael,

 

Was there a reason CommonAST.Clone() wasn't implemented with calls that
descend the entire AST tree and clone it?

 

-Richard

 

----------------------------------------------------------------------------
------------------------

Richard Ney                                                    Aspect
Communications

Principal Software Engineer

< <http://www.aspect.com/> http://www.aspect.com>
Main:  408.325.2200

< <mailto:richard.ney@aspect.com> mailto:richard.ney@aspect.com>
SJ Office: 408.325.2464

 
Home Office: 916.797.9602

----------------------------------------------------------------------------
------------------------

 

The Three Laws of Infernal Dynamics:
1. An object in motion will always be headed in the wrong direction.
2. An object at rest will always be in the wrong place.
3. The energy required to change either of these states will always be more
than you wish to expend, but never so much as to make the task appear
prospectively impossible.

 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20030318/bfe1bcd3/attachment.html
From open.zone at virgin.net  Tue Mar 18 21:03:44 2003
From: open.zone at virgin.net (micheal_jor)
Date: Mon Dec 20 16:15:28 2004
Subject: [antlr-interest] Re: C# CommonAST class and Clone()
In-Reply-To: <0F9CBE7F81945C4BB7A32BE6E7656EE0722935@sac1exch3.aspect.com>
Message-ID: <b58tng+49hd@eGroups.com>

> Michael,
> 
>  
> 
> Was there a reason CommonAST.Clone() wasn't implemented with calls 
that
> descend the entire AST tree and clone it?

<scratches-head>
Is Clone() still used by ANTLR C# in 2.7.2?
I'm away from the ANTLR C# code presently...
</scratches-head>

Yes. The semantics of node cloning in ANTLR excludes that feature. 
Pls see previous related discussion on the list. 

IIRC, the copy-by-Clone() mechanism has now been replaced with a copy-
via-reflection mechanism. The Clone()-related code will be deprecated 
and excised in due course unless someone *needs* it. 

Cheers,

Micheal



 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From richard.ney at aspect.com  Tue Mar 18 22:50:07 2003
From: richard.ney at aspect.com (Ney, Richard)
Date: Mon Dec 20 16:15:28 2004
Subject: [antlr-interest] Re: C# CommonAST class and Clone()
Message-ID: <0F9CBE7F81945C4BB7A32BE6E7656EE00ECDD7@sac1exch3.aspect.com>

Okay,

I have seen the code that uses reflection to create AST nodes and tokens.
Now that I know clone is no longer used by ANTLR directly I have implemented
it to do a complete clone of the tree. I needed this since I have two
parsers, one that handles an expression language and another that handles
SQL. When the SQL is parsed I often take pre-processed ASTs of the
expression language and create new trees. This required a way to clone the
original trees so to not corrupt them. We may want make ASTs fully clonable
in the next release.

-Richard

-----Original Message-----
From: micheal_jor [mailto:open.zone@virgin.net] 
Sent: Tuesday, March 18, 2003 9:04 PM
To: antlr-interest@yahoogroups.com
Subject: [antlr-interest] Re: C# CommonAST class and Clone()

> Michael,
> 
>  
> 
> Was there a reason CommonAST.Clone() wasn't implemented with calls 
that
> descend the entire AST tree and clone it?

<scratches-head>
Is Clone() still used by ANTLR C# in 2.7.2?
I'm away from the ANTLR C# code presently...
</scratches-head>

Yes. The semantics of node cloning in ANTLR excludes that feature. 
Pls see previous related discussion on the list. 

IIRC, the copy-by-Clone() mechanism has now been replaced with a copy-
via-reflection mechanism. The Clone()-related code will be deprecated 
and excised in due course unless someone *needs* it. 

Cheers,

Micheal



 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From matt at cortexebusiness.com.au  Wed Mar 19 00:54:40 2003
From: matt at cortexebusiness.com.au (Matt Quail)
Date: Mon Dec 20 16:15:28 2004
Subject: [antlr-interest] UPDATED- java.g grammar for JSR14 (generic java)
Message-ID: <3E783050.70108@cortexebusiness.com.au>

The following attached files are an update to my previous post.
Changes from the previous post are:
- add support for generic classes in the "extends" and
   " implements" clauses of class and interface definitions

For more info, see the original post:
> This is my first attempt at a JSR14 grammar. It parses successfully
> over some tests of my construction, plus successfully parses a large
> existing JDK1.3 source base.
> 
> I couldn't find any bugs in this grammar; but if there are, I will
> report them to this list.
> 
> I have attached the following files:
> javaG.g: the java grammar supporting generics
> javaG.patch.txt: a patch from the java.g in ANTLR-2.7.2 to javaG.g
> G2.java: my test for parsing. This should parse with javaG.g as well
>           as compile with the JSR14 early access compiler.
> 
> Caveats:
> 1) I have probably broken some "tree" stuff... I don't use the
>     tree/AST functionality in java.g so I am unlikely to fix it myself.
> 2) It is possible that generics in JDK1.5 will differ slightly from
>     JSR14. If so, I will update and re-post my grammar.
> 
> 
> Any comments are welcome! I am happy to have my patch applied to the
> version that comes with ANTLR, I release my patch and grammar into the
> Public Domain. However, it is probably best to wait until JDK1.5 is
> out before doing so. We would also have to add support for JSR201 at
> the same time.
> 

 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

-------------- next part --------------
--- java272.g	2003-01-19 16:38:02.000000000 +1100
+++ javaG.g	2003-03-16 11:50:23.000000000 +1100
@@ -1,4 +1,4 @@
-/** Java 1.3 Recognizer
+/** Java 1.5/JSR14 Recognizer
  *
  * Run 'java Main [-showtree] directory-full-of-java-files'
  *
@@ -104,6 +104,17 @@
  *          Resin-2.0.5, jive-2.1.1, jdk 1.3.1, Lucene, antlr 2.7.2a4,
  *	    and the 110k-line jGuru server source.
  *
+ * Version 1.21.2 (March, 2003)
+ *      Changes by Matt Quail to support generics (as per JDK1.5/JSR14)
+ *      Notes:
+ *      o We only allow the "extends" keyword and not the "implements"
+ *        keyword, since thats what JSR14 seems to imply.
+ *      o Thanks to Monty Zukowski for his help on the antlr-interest
+ *        mail list.
+ *      o Thanks to Alan Eliasen for testing the grammar over his
+ *        Fink source base
+ *
+ *
  * This grammar is in the PUBLIC DOMAIN
  */
 class JavaRecognizer extends Parser;
@@ -127,6 +138,16 @@
 	STRICTFP="strictfp"; SUPER_CTOR_CALL; CTOR_CALL;
 }
 
+{
+    /**
+     * Counts the number of LT seen in the typeArguments production.
+     * It is used in semantic predicates to ensure we have seen
+     * enough closing '>' characters; which actually may have been
+     * either GT, SR or BSR tokens.
+     */
+    private int ltCounter = 0;
+
+}      
 // Compilation Unit: In Java, this is a single file.  This is the start
 //   rule for this parser
 compilationUnit
@@ -184,21 +205,65 @@
 	| builtInTypeSpec[addImagNode]
 	;
 
-// A class type specification is a class type with possible brackets afterwards
+arraySpecOpt:
+        (options{greedy=true;}: // match as many as possible
+            lb:LBRACK^ {#lb.setType(ARRAY_DECLARATOR);} RBRACK!
+        )*
+    ;
+
+// A class type specification is a class type with either:
+// - possible brackets afterwards
 //   (which would make it an array type).
+// - generic type arguments after
 classTypeSpec[boolean addImagNode]
-	:	identifier (lb:LBRACK^ {#lb.setType(ARRAY_DECLARATOR);} RBRACK!)*
+	:   classOrInterfaceType[addImagNode]
+        arraySpecOpt
 		{
 			if ( addImagNode ) {
 				#classTypeSpec = #(#[TYPE,"TYPE"], #classTypeSpec);
 			}
 		}
 	;
+classOrInterfaceType[boolean addImagNode]
+	:   IDENT (typeArguments[addImagNode])?
+        (options{greedy=true;}: // match as many as possible
+            DOT
+            IDENT (typeArguments[addImagNode])?
+        )*
+    ;
+typeArguments[boolean addImagNode]
+{int currentLtLevel = 0;}
+    :
+        {currentLtLevel = ltCounter;}
+        LT {ltCounter++;}
+        classTypeSpec[addImagNode]
+        (options{greedy=true;}: // match as many as possible
+            COMMA classTypeSpec [addImagNode]
+        )*
+        
+        (   // turn warning off since Antlr generates the right code,
+            // plus we have our semantic predicate below
+            options{generateAmbigWarnings=false;}:
+            typeArgumentsEnd
+        )?
+        
+        // make sure we have gobbled up enough '>' characters
+        // if we are at the "top level" of nested typeArgument productions
+        {(currentLtLevel != 0) || ltCounter == currentLtLevel}?
+    ;
+
+// this gobbles up *some* amount of '>' characters, and counts how many
+// it gobbled.
+protected typeArgumentsEnd:
+        GT {ltCounter-=1;}
+    |   SR {ltCounter-=2;}
+    |   BSR {ltCounter-=3;}
+    ;
 
 // A builtin type specification is a builtin type with possible brackets
 // afterwards (which would make it an array type).
 builtInTypeSpec[boolean addImagNode]
-	:	builtInType (lb:LBRACK^ {#lb.setType(ARRAY_DECLARATOR);} RBRACK!)*
+	:	builtInType arraySpecOpt
 		{
 			if ( addImagNode ) {
 				#builtInTypeSpec = #(#[TYPE,"TYPE"], #builtInTypeSpec);
@@ -206,10 +271,10 @@
 		}
 	;
 
-// A type name. which is either a (possibly qualified) class name or
-//   a primitive (builtin) type
+// A type name. which is either a (possibly qualified and parameterized)
+// class name or a primitive (builtin) type
 type
-	:	identifier
+	:	classOrInterfaceType[false]
 	|	builtInType
 	;
 
@@ -267,6 +332,8 @@
 // Definition of a Java class
 classDefinition![AST modifiers]
 	:	"class" IDENT
+        // it _might_ have type paramaters
+        (typeParameters)?
 		// it _might_ have a superclass...
 		sc:superClassClause
 		// it might implement some interfaces...
@@ -278,13 +345,15 @@
 	;
 
 superClassClause!
-	:	( "extends" id:identifier )?
-		{#superClassClause = #(#[EXTENDS_CLAUSE,"EXTENDS_CLAUSE"],id);}
+	:	( "extends" classOrInterfaceType[false] )?
+		//{#superClassClause = #(#[EXTENDS_CLAUSE,"EXTENDS_CLAUSE"],id);}
 	;
 
 // Definition of a Java Interface
 interfaceDefinition![AST modifiers]
 	:	"interface" IDENT
+        // it _might_ have type paramaters
+        (typeParameters)?
 		// it might extend some other interfaces
 		ie:interfaceExtends
 		// now parse the body of the interface (looks like a class...)
@@ -293,7 +362,26 @@
 									modifiers,IDENT,ie,cb);}
 	;
 
+typeParameters
+{int currentLtLevel = 0;}
+    :
+        {currentLtLevel = ltCounter;}
+        LT {ltCounter++;}
+        typeParameter (COMMA typeParameter)*
+        (typeArgumentsEnd)?
+        // make sure we have gobbled up enough '>' characters
+        // if we are at the "top level" of nested typeArgument productions
+        {(currentLtLevel != 0) || ltCounter == currentLtLevel}?
+    ;
 
+typeParameter:
+        IDENT
+        (   // I'm pretty sure Antlr generates the right thing here:
+            options{generateAmbigWarnings=false;}:
+            "extends" classOrInterfaceType[false]
+            (BAND classOrInterfaceType[false])*
+        )?
+    ;
 // This is the body of a class.  You can have fields and extra semicolons,
 // That's about it (until you see what a field is...)
 classBlock
@@ -307,7 +395,7 @@
 interfaceExtends
 	:	(
 		e:"extends"!
-		identifier ( COMMA! identifier )*
+		classOrInterfaceType[false] ( COMMA! classOrInterfaceType[false] )*
 		)?
 		{#interfaceExtends = #(#[EXTENDS_CLAUSE,"EXTENDS_CLAUSE"],
 							#interfaceExtends);}
@@ -316,7 +404,7 @@
 // A class can implement several interfaces...
 implementsClause
 	:	(
-			i:"implements"! identifier ( COMMA! identifier )*
+			i:"implements"! classOrInterfaceType[false] ( COMMA! classOrInterfaceType[false] )*
 		)?
 		{#implementsClause = #(#[IMPLEMENTS_CLAUSE,"IMPLEMENTS_CLAUSE"],
 								 #implementsClause);}
@@ -338,7 +426,10 @@
 		|	id:interfaceDefinition[#mods]   // inner interface
 			{#field = #id;}
 
-		|	t:typeSpec[false]  // method or variable declaration(s)
+		|	// A generic method has the typeParameters before the return type.
+            // This is not allowed for variable definitions, but this production
+            // allows it, a semantic check could be used if you wanted.
+            (typeParameters)? t:typeSpec[false]  // method or variable declaration(s)
 			(	IDENT  // the name of the method
 
 				// parse the formal parameter declarations.
@@ -572,7 +663,7 @@
 	|	"synchronized"^ LPAREN! expression RPAREN! compoundStatement
 
 	// asserts (uncomment if you want 1.4 compatibility)
-	// |	"assert"^ expression ( COLON! expression )? SEMI!
+	//|	"assert"^ expression ( COLON! expression )? SEMI!
 
 	// empty statement
 	|	s:SEMI {#s.setType(EMPTY_STAT);}
-------------- next part --------------
/** Java 1.5/JSR14 Recognizer
 *
 * Run 'java Main [-showtree] directory-full-of-java-files'
 *
 * [The -showtree option pops up a Swing frame that shows
 *  the AST constructed from the parser.]
 *
 * Run 'java Main <directory full of java files>'
 *
 * Contributing authors:
 *		John Mitchell		johnm@non.net
 *		Terence Parr		parrt@magelang.com
 *		John Lilley			jlilley@empathy.com
 *		Scott Stanchfield	thetick@magelang.com
 *		Markus Mohnen       mohnen@informatik.rwth-aachen.de
 *      Peter Williams      pete.williams@sun.com
 *      Allan Jacobs        Allan.Jacobs@eng.sun.com
 *      Steve Messick       messick@redhills.com
 *      John Pybus			john@pybus.org
 *
 * Version 1.00 December 9, 1997 -- initial release
 * Version 1.01 December 10, 1997
 *		fixed bug in octal def (0..7 not 0..8)
 * Version 1.10 August 1998 (parrt)
 *		added tree construction
 *		fixed definition of WS,comments for mac,pc,unix newlines
 *		added unary plus
 * Version 1.11 (Nov 20, 1998)
 *		Added "shutup" option to turn off last ambig warning.
 *		Fixed inner class def to allow named class defs as statements
 *		synchronized requires compound not simple statement
 *		add [] after builtInType DOT class in primaryExpression
 *		"const" is reserved but not valid..removed from modifiers
 * Version 1.12 (Feb 2, 1999)
 *		Changed LITERAL_xxx to xxx in tree grammar.
 *		Updated java.g to use tokens {...} now for 2.6.0 (new feature).
 *
 * Version 1.13 (Apr 23, 1999)
 *		Didn't have (stat)? for else clause in tree parser.
 *		Didn't gen ASTs for interface extends.  Updated tree parser too.
 *		Updated to 2.6.0.
 * Version 1.14 (Jun 20, 1999)
 *		Allowed final/abstract on local classes.
 *		Removed local interfaces from methods
 *		Put instanceof precedence where it belongs...in relationalExpr
 *			It also had expr not type as arg; fixed it.
 *		Missing ! on SEMI in classBlock
 *		fixed: (expr) + "string" was parsed incorrectly (+ as unary plus).
 *		fixed: didn't like Object[].class in parser or tree parser
 * Version 1.15 (Jun 26, 1999)
 *		Screwed up rule with instanceof in it. :(  Fixed.
 *		Tree parser didn't like (expr).something; fixed.
 *		Allowed multiple inheritance in tree grammar. oops.
 * Version 1.16 (August 22, 1999)
 *		Extending an interface built a wacky tree: had extra EXTENDS.
 *		Tree grammar didn't allow multiple superinterfaces.
 *		Tree grammar didn't allow empty var initializer: {}
 * Version 1.17 (October 12, 1999)
 *		ESC lexer rule allowed 399 max not 377 max.
 *		java.tree.g didn't handle the expression of synchronized
 *		statements.
 * Version 1.18 (August 12, 2001)
 *      	Terence updated to Java 2 Version 1.3 by
 *		observing/combining work of Allan Jacobs and Steve
 *		Messick.  Handles 1.3 src.  Summary:
 *		o  primary didn't include boolean.class kind of thing
 *      	o  constructor calls parsed explicitly now:
 * 		   see explicitConstructorInvocation
 *		o  add strictfp modifier
 *      	o  missing objBlock after new expression in tree grammar
 *		o  merged local class definition alternatives, moved after declaration
 *		o  fixed problem with ClassName.super.field
 *      	o  reordered some alternatives to make things more efficient
 *		o  long and double constants were not differentiated from int/float
 *		o  whitespace rule was inefficient: matched only one char
 *		o  add an examples directory with some nasty 1.3 cases
 *		o  made Main.java use buffered IO and a Reader for Unicode support
 *		o  supports UNICODE?
 *		   Using Unicode charVocabulay makes code file big, but only
 *		   in the bitsets at the end. I need to make ANTLR generate
 *		   unicode bitsets more efficiently.
 * Version 1.19 (April 25, 2002)
 *		Terence added in nice fixes by John Pybus concerning floating
 *		constants and problems with super() calls.  John did a nice
 *		reorg of the primary/postfix expression stuff to read better
 *		and makes f.g.super() parse properly (it was METHOD_CALL not
 *		a SUPER_CTOR_CALL).  Also:
 *
 *		o  "finally" clause was a root...made it a child of "try"
 *		o  Added stuff for asserts too for Java 1.4, but *commented out*
 *		   as it is not backward compatible.
 *
 * Version 1.20 (October 27, 2002)
 *
 *      Terence ended up reorging John Pybus' stuff to
 *      remove some nondeterminisms and some syntactic predicates.
 *      Note that the grammar is stricter now; e.g., this(...) must
 *	be the first statement.
 *
 *      Trinary ?: operator wasn't working as array name:
 *          (isBig ? bigDigits : digits)[i];
 *
 *      Checked parser/tree parser on source for
 *          Resin-2.0.5, jive-2.1.1, jdk 1.3.1, Lucene, antlr 2.7.2a4,
 *	    and the 110k-line jGuru server source.
 *
 * Version 1.21.2 (March, 2003)
 *      Changes by Matt Quail to support generics (as per JDK1.5/JSR14)
 *      Notes:
 *      o We only allow the "extends" keyword and not the "implements"
 *        keyword, since thats what JSR14 seems to imply.
 *      o Thanks to Monty Zukowski for his help on the antlr-interest
 *        mail list.
 *      o Thanks to Alan Eliasen for testing the grammar over his
 *        Fink source base
 *
 *
 * This grammar is in the PUBLIC DOMAIN
 */
class JavaRecognizer extends Parser;
options {
	k = 2;                           // two token lookahead
	exportVocab=Java;                // Call its vocabulary "Java"
	codeGenMakeSwitchThreshold = 2;  // Some optimizations
	codeGenBitsetTestThreshold = 3;
	defaultErrorHandler = false;     // Don't generate parser error handlers
	buildAST = true;
}

tokens {
	BLOCK; MODIFIERS; OBJBLOCK; SLIST; CTOR_DEF; METHOD_DEF; VARIABLE_DEF;
	INSTANCE_INIT; STATIC_INIT; TYPE; CLASS_DEF; INTERFACE_DEF;
	PACKAGE_DEF; ARRAY_DECLARATOR; EXTENDS_CLAUSE; IMPLEMENTS_CLAUSE;
	PARAMETERS; PARAMETER_DEF; LABELED_STAT; TYPECAST; INDEX_OP;
	POST_INC; POST_DEC; METHOD_CALL; EXPR; ARRAY_INIT;
	IMPORT; UNARY_MINUS; UNARY_PLUS; CASE_GROUP; ELIST; FOR_INIT; FOR_CONDITION;
	FOR_ITERATOR; EMPTY_STAT; FINAL="final"; ABSTRACT="abstract";
	STRICTFP="strictfp"; SUPER_CTOR_CALL; CTOR_CALL;
}

{
    /**
     * Counts the number of LT seen in the typeArguments production.
     * It is used in semantic predicates to ensure we have seen
     * enough closing '>' characters; which actually may have been
     * either GT, SR or BSR tokens.
     */
    private int ltCounter = 0;

}      
// Compilation Unit: In Java, this is a single file.  This is the start
//   rule for this parser
compilationUnit
	:	// A compilation unit starts with an optional package definition
		(	packageDefinition
		|	/* nothing */
		)

		// Next we have a series of zero or more import statements
		( importDefinition )*

		// Wrapping things up with any number of class or interface
		//    definitions
		( typeDefinition )*

		EOF!
	;


// Package statement: "package" followed by an identifier.
packageDefinition
	options {defaultErrorHandler = true;} // let ANTLR handle errors
	:	p:"package"^ {#p.setType(PACKAGE_DEF);} identifier SEMI!
	;


// Import statement: import followed by a package or class name
importDefinition
	options {defaultErrorHandler = true;}
	:	i:"import"^ {#i.setType(IMPORT);} identifierStar SEMI!
	;

// A type definition in a file is either a class or interface definition.
typeDefinition
	options {defaultErrorHandler = true;}
	:	m:modifiers!
		( classDefinition[#m]
		| interfaceDefinition[#m]
		)
	|	SEMI!
	;

/** A declaration is the creation of a reference or primitive-type variable
 *  Create a separate Type/Var tree for each var in the var list.
 */
declaration!
	:	m:modifiers t:typeSpec[false] v:variableDefinitions[#m,#t]
		{#declaration = #v;}
	;

// A type specification is a type name with possible brackets afterwards
//   (which would make it an array type).
typeSpec[boolean addImagNode]
	: classTypeSpec[addImagNode]
	| builtInTypeSpec[addImagNode]
	;

arraySpecOpt:
        (options{greedy=true;}: // match as many as possible
            lb:LBRACK^ {#lb.setType(ARRAY_DECLARATOR);} RBRACK!
        )*
    ;

// A class type specification is a class type with either:
// - possible brackets afterwards
//   (which would make it an array type).
// - generic type arguments after
classTypeSpec[boolean addImagNode]
	:   classOrInterfaceType[addImagNode]
        arraySpecOpt
		{
			if ( addImagNode ) {
				#classTypeSpec = #(#[TYPE,"TYPE"], #classTypeSpec);
			}
		}
	;
classOrInterfaceType[boolean addImagNode]
	:   IDENT (typeArguments[addImagNode])?
        (options{greedy=true;}: // match as many as possible
            DOT
            IDENT (typeArguments[addImagNode])?
        )*
    ;
typeArguments[boolean addImagNode]
{int currentLtLevel = 0;}
    :
        {currentLtLevel = ltCounter;}
        LT {ltCounter++;}
        classTypeSpec[addImagNode]
        (options{greedy=true;}: // match as many as possible
            COMMA classTypeSpec [addImagNode]
        )*
        
        (   // turn warning off since Antlr generates the right code,
            // plus we have our semantic predicate below
            options{generateAmbigWarnings=false;}:
            typeArgumentsEnd
        )?
        
        // make sure we have gobbled up enough '>' characters
        // if we are at the "top level" of nested typeArgument productions
        {(currentLtLevel != 0) || ltCounter == currentLtLevel}?
    ;

// this gobbles up *some* amount of '>' characters, and counts how many
// it gobbled.
protected typeArgumentsEnd:
        GT {ltCounter-=1;}
    |   SR {ltCounter-=2;}
    |   BSR {ltCounter-=3;}
    ;

// A builtin type specification is a builtin type with possible brackets
// afterwards (which would make it an array type).
builtInTypeSpec[boolean addImagNode]
	:	builtInType arraySpecOpt
		{
			if ( addImagNode ) {
				#builtInTypeSpec = #(#[TYPE,"TYPE"], #builtInTypeSpec);
			}
		}
	;

// A type name. which is either a (possibly qualified and parameterized)
// class name or a primitive (builtin) type
type
	:	classOrInterfaceType[false]
	|	builtInType
	;

// The primitive types.
builtInType
	:	"void"
	|	"boolean"
	|	"byte"
	|	"char"
	|	"short"
	|	"int"
	|	"float"
	|	"long"
	|	"double"
	;

// A (possibly-qualified) java identifier.  We start with the first IDENT
//   and expand its name by adding dots and following IDENTS
identifier
	:	IDENT  ( DOT^ IDENT )*
	;

identifierStar
	:	IDENT
		( DOT^ IDENT )*
		( DOT^ STAR  )?
	;

// A list of zero or more modifiers.  We could have used (modifier)* in
//   place of a call to modifiers, but I thought it was a good idea to keep
//   this rule separate so they can easily be collected in a Vector if
//   someone so desires
modifiers
	:	( modifier )*
		{#modifiers = #([MODIFIERS, "MODIFIERS"], #modifiers);}
	;

// modifiers for Java classes, interfaces, class/instance vars and methods
modifier
	:	"private"
	|	"public"
	|	"protected"
	|	"static"
	|	"transient"
	|	"final"
	|	"abstract"
	|	"native"
	|	"threadsafe"
	|	"synchronized"
//	|	"const"			// reserved word, but not valid
	|	"volatile"
	|	"strictfp"
	;

// Definition of a Java class
classDefinition![AST modifiers]
	:	"class" IDENT
        // it _might_ have type paramaters
        (typeParameters)?
		// it _might_ have a superclass...
		sc:superClassClause
		// it might implement some interfaces...
		ic:implementsClause
		// now parse the body of the class
		cb:classBlock
		{#classDefinition = #(#[CLASS_DEF,"CLASS_DEF"],
							   modifiers,IDENT,sc,ic,cb);}
	;

superClassClause!
	:	( "extends" classOrInterfaceType[false] )?
		//{#superClassClause = #(#[EXTENDS_CLAUSE,"EXTENDS_CLAUSE"],id);}
	;

// Definition of a Java Interface
interfaceDefinition![AST modifiers]
	:	"interface" IDENT
        // it _might_ have type paramaters
        (typeParameters)?
		// it might extend some other interfaces
		ie:interfaceExtends
		// now parse the body of the interface (looks like a class...)
		cb:classBlock
		{#interfaceDefinition = #(#[INTERFACE_DEF,"INTERFACE_DEF"],
									modifiers,IDENT,ie,cb);}
	;

typeParameters
{int currentLtLevel = 0;}
    :
        {currentLtLevel = ltCounter;}
        LT {ltCounter++;}
        typeParameter (COMMA typeParameter)*
        (typeArgumentsEnd)?
        // make sure we have gobbled up enough '>' characters
        // if we are at the "top level" of nested typeArgument productions
        {(currentLtLevel != 0) || ltCounter == currentLtLevel}?
    ;

typeParameter:
        IDENT
        (   // I'm pretty sure Antlr generates the right thing here:
            options{generateAmbigWarnings=false;}:
            "extends" classOrInterfaceType[false]
            (BAND classOrInterfaceType[false])*
        )?
    ;
// This is the body of a class.  You can have fields and extra semicolons,
// That's about it (until you see what a field is...)
classBlock
	:	LCURLY!
			( field | SEMI! )*
		RCURLY!
		{#classBlock = #([OBJBLOCK, "OBJBLOCK"], #classBlock);}
	;

// An interface can extend several other interfaces...
interfaceExtends
	:	(
		e:"extends"!
		classOrInterfaceType[false] ( COMMA! classOrInterfaceType[false] )*
		)?
		{#interfaceExtends = #(#[EXTENDS_CLAUSE,"EXTENDS_CLAUSE"],
							#interfaceExtends);}
	;

// A class can implement several interfaces...
implementsClause
	:	(
			i:"implements"! classOrInterfaceType[false] ( COMMA! classOrInterfaceType[false] )*
		)?
		{#implementsClause = #(#[IMPLEMENTS_CLAUSE,"IMPLEMENTS_CLAUSE"],
								 #implementsClause);}
	;

// Now the various things that can be defined inside a class or interface...
// Note that not all of these are really valid in an interface (constructors,
//   for example), and if this grammar were used for a compiler there would
//   need to be some semantic checks to make sure we're doing the right thing...
field!
	:	// method, constructor, or variable declaration
		mods:modifiers
		(	h:ctorHead s:constructorBody // constructor
			{#field = #(#[CTOR_DEF,"CTOR_DEF"], mods, h, s);}

		|	cd:classDefinition[#mods]       // inner class
			{#field = #cd;}

		|	id:interfaceDefinition[#mods]   // inner interface
			{#field = #id;}

		|	// A generic method has the typeParameters before the return type.
            // This is not allowed for variable definitions, but this production
            // allows it, a semantic check could be used if you wanted.
            (typeParameters)? t:typeSpec[false]  // method or variable declaration(s)
			(	IDENT  // the name of the method

				// parse the formal parameter declarations.
				LPAREN! param:parameterDeclarationList RPAREN!

				rt:declaratorBrackets[#t]

				// get the list of exceptions that this method is
				// declared to throw
				(tc:throwsClause)?

				( s2:compoundStatement | SEMI )
				{#field = #(#[METHOD_DEF,"METHOD_DEF"],
						     mods,
							 #(#[TYPE,"TYPE"],rt),
							 IDENT,
							 param,
							 tc,
							 s2);}
			|	v:variableDefinitions[#mods,#t] SEMI
//				{#field = #(#[VARIABLE_DEF,"VARIABLE_DEF"], v);}
				{#field = #v;}
			)
		)

    // "static { ... }" class initializer
	|	"static" s3:compoundStatement
		{#field = #(#[STATIC_INIT,"STATIC_INIT"], s3);}

    // "{ ... }" instance initializer
	|	s4:compoundStatement
		{#field = #(#[INSTANCE_INIT,"INSTANCE_INIT"], s4);}
	;

constructorBody
    :   lc:LCURLY^ {#lc.setType(SLIST);}
            ( options { greedy=true; } : explicitConstructorInvocation)?
            (statement)*
        RCURLY!
    ;

/** Catch obvious constructor calls, but not the expr.super(...) calls */
explicitConstructorInvocation
    :   "this"! lp1:LPAREN^ argList RPAREN! SEMI!
		{#lp1.setType(CTOR_CALL);}
    |   "super"! lp2:LPAREN^ argList RPAREN! SEMI!
		{#lp2.setType(SUPER_CTOR_CALL);}
    ;

variableDefinitions[AST mods, AST t]
	:	variableDeclarator[getASTFactory().dupTree(mods),
						   getASTFactory().dupTree(t)]
		(	COMMA!
			variableDeclarator[getASTFactory().dupTree(mods),
							   getASTFactory().dupTree(t)]
		)*
	;

/** Declaration of a variable.  This can be a class/instance variable,
 *   or a local variable in a method
 * It can also include possible initialization.
 */
variableDeclarator![AST mods, AST t]
	:	id:IDENT d:declaratorBrackets[t] v:varInitializer
		{#variableDeclarator = #(#[VARIABLE_DEF,"VARIABLE_DEF"], mods, #(#[TYPE,"TYPE"],d), id, v);}
	;

declaratorBrackets[AST typ]
	:	{#declaratorBrackets=typ;}
		(lb:LBRACK^ {#lb.setType(ARRAY_DECLARATOR);} RBRACK!)*
	;

varInitializer
	:	( ASSIGN^ initializer )?
	;

// This is an initializer used to set up an array.
arrayInitializer
	:	lc:LCURLY^ {#lc.setType(ARRAY_INIT);}
			(	initializer
				(
					// CONFLICT: does a COMMA after an initializer start a new
					//           initializer or start the option ',' at end?
					//           ANTLR generates proper code by matching
					//			 the comma as soon as possible.
					options {
						warnWhenFollowAmbig = false;
					}
				:
					COMMA! initializer
				)*
				(COMMA!)?
			)?
		RCURLY!
	;


// The two "things" that can initialize an array element are an expression
//   and another (nested) array initializer.
initializer
	:	expression
	|	arrayInitializer
	;

// This is the header of a method.  It includes the name and parameters
//   for the method.
//   This also watches for a list of exception classes in a "throws" clause.
ctorHead
	:	IDENT  // the name of the method

		// parse the formal parameter declarations.
		LPAREN! parameterDeclarationList RPAREN!

		// get the list of exceptions that this method is declared to throw
		(throwsClause)?
	;

// This is a list of exception classes that the method is declared to throw
throwsClause
	:	"throws"^ identifier ( COMMA! identifier )*
	;


// A list of formal parameters
parameterDeclarationList
	:	( parameterDeclaration ( COMMA! parameterDeclaration )* )?
		{#parameterDeclarationList = #(#[PARAMETERS,"PARAMETERS"],
									#parameterDeclarationList);}
	;

// A formal parameter.
parameterDeclaration!
	:	pm:parameterModifier t:typeSpec[false] id:IDENT
		pd:declaratorBrackets[#t]
		{#parameterDeclaration = #(#[PARAMETER_DEF,"PARAMETER_DEF"],
									pm, #([TYPE,"TYPE"],pd), id);}
	;

parameterModifier
	:	(f:"final")?
		{#parameterModifier = #(#[MODIFIERS,"MODIFIERS"], f);}
	;

// Compound statement.  This is used in many contexts:
//   Inside a class definition prefixed with "static":
//      it is a class initializer
//   Inside a class definition without "static":
//      it is an instance initializer
//   As the body of a method
//   As a completely indepdent braced block of code inside a method
//      it starts a new scope for variable definitions

compoundStatement
	:	lc:LCURLY^ {#lc.setType(SLIST);}
			// include the (possibly-empty) list of statements
			(statement)*
		RCURLY!
	;


statement
	// A list of statements in curly braces -- start a new scope!
	:	compoundStatement

	// declarations are ambiguous with "ID DOT" relative to expression
	// statements.  Must backtrack to be sure.  Could use a semantic
	// predicate to test symbol table to see what the type was coming
	// up, but that's pretty hard without a symbol table ;)
	|	(declaration)=> declaration SEMI!

	// An expression statement.  This could be a method call,
	// assignment statement, or any other expression evaluated for
	// side-effects.
	|	expression SEMI!

	// class definition
	|	m:modifiers! classDefinition[#m]

	// Attach a label to the front of a statement
	|	IDENT c:COLON^ {#c.setType(LABELED_STAT);} statement

	// If-else statement
	|	"if"^ LPAREN! expression RPAREN! statement
		(
			// CONFLICT: the old "dangling-else" problem...
			//           ANTLR generates proper code matching
			//			 as soon as possible.  Hush warning.
			options {
				warnWhenFollowAmbig = false;
			}
		:
			"else"! statement
		)?

	// For statement
	|	"for"^
			LPAREN!
				forInit SEMI!   // initializer
				forCond	SEMI!   // condition test
				forIter         // updater
			RPAREN!
			statement                     // statement to loop over

	// While statement
	|	"while"^ LPAREN! expression RPAREN! statement

	// do-while statement
	|	"do"^ statement "while"! LPAREN! expression RPAREN! SEMI!

	// get out of a loop (or switch)
	|	"break"^ (IDENT)? SEMI!

	// do next iteration of a loop
	|	"continue"^ (IDENT)? SEMI!

	// Return an expression
	|	"return"^ (expression)? SEMI!

	// switch/case statement
	|	"switch"^ LPAREN! expression RPAREN! LCURLY!
			( casesGroup )*
		RCURLY!

	// exception try-catch block
	|	tryBlock

	// throw an exception
	|	"throw"^ expression SEMI!

	// synchronize a statement
	|	"synchronized"^ LPAREN! expression RPAREN! compoundStatement

	// asserts (uncomment if you want 1.4 compatibility)
	//|	"assert"^ expression ( COLON! expression )? SEMI!

	// empty statement
	|	s:SEMI {#s.setType(EMPTY_STAT);}
	;

casesGroup
	:	(	// CONFLICT: to which case group do the statements bind?
			//           ANTLR generates proper code: it groups the
			//           many "case"/"default" labels together then
			//           follows them with the statements
			options {
				greedy = true;
			}
			:
			aCase
		)+
		caseSList
		{#casesGroup = #([CASE_GROUP, "CASE_GROUP"], #casesGroup);}
	;

aCase
	:	("case"^ expression | "default") COLON!
	;

caseSList
	:	(statement)*
		{#caseSList = #(#[SLIST,"SLIST"],#caseSList);}
	;

// The initializer for a for loop
forInit
		// if it looks like a declaration, it is
	:	(	(declaration)=> declaration
		// otherwise it could be an expression list...
		|	expressionList
		)?
		{#forInit = #(#[FOR_INIT,"FOR_INIT"],#forInit);}
	;

forCond
	:	(expression)?
		{#forCond = #(#[FOR_CONDITION,"FOR_CONDITION"],#forCond);}
	;

forIter
	:	(expressionList)?
		{#forIter = #(#[FOR_ITERATOR,"FOR_ITERATOR"],#forIter);}
	;

// an exception handler try/catch block
tryBlock
	:	"try"^ compoundStatement
		(handler)*
		( finallyClause )?
	;

finallyClause
	:	"finally"^ compoundStatement
	;

// an exception handler
handler
	:	"catch"^ LPAREN! parameterDeclaration RPAREN! compoundStatement
	;


// expressions
// Note that most of these expressions follow the pattern
//   thisLevelExpression :
//       nextHigherPrecedenceExpression
//           (OPERATOR nextHigherPrecedenceExpression)*
// which is a standard recursive definition for a parsing an expression.
// The operators in java have the following precedences:
//    lowest  (13)  = *= /= %= += -= <<= >>= >>>= &= ^= |=
//            (12)  ?:
//            (11)  ||
//            (10)  &&
//            ( 9)  |
//            ( 8)  ^
//            ( 7)  &
//            ( 6)  == !=
//            ( 5)  < <= > >=
//            ( 4)  << >>
//            ( 3)  +(binary) -(binary)
//            ( 2)  * / %
//            ( 1)  ++ -- +(unary) -(unary)  ~  !  (type)
//                  []   () (method call)  . (dot -- identifier qualification)
//                  new   ()  (explicit parenthesis)
//
// the last two are not usually on a precedence chart; I put them in
// to point out that new has a higher precedence than '.', so you
// can validy use
//     new Frame().show()
//
// Note that the above precedence levels map to the rules below...
// Once you have a precedence chart, writing the appropriate rules as below
//   is usually very straightfoward



// the mother of all expressions
expression
	:	assignmentExpression
		{#expression = #(#[EXPR,"EXPR"],#expression);}
	;


// This is a list of expressions.
expressionList
	:	expression (COMMA! expression)*
		{#expressionList = #(#[ELIST,"ELIST"], expressionList);}
	;


// assignment expression (level 13)
assignmentExpression
	:	conditionalExpression
		(	(	ASSIGN^
            |   PLUS_ASSIGN^
            |   MINUS_ASSIGN^
            |   STAR_ASSIGN^
            |   DIV_ASSIGN^
            |   MOD_ASSIGN^
            |   SR_ASSIGN^
            |   BSR_ASSIGN^
            |   SL_ASSIGN^
            |   BAND_ASSIGN^
            |   BXOR_ASSIGN^
            |   BOR_ASSIGN^
            )
			assignmentExpression
		)?
	;


// conditional test (level 12)
conditionalExpression
	:	logicalOrExpression
		( QUESTION^ assignmentExpression COLON! conditionalExpression )?
	;


// logical or (||)  (level 11)
logicalOrExpression
	:	logicalAndExpression (LOR^ logicalAndExpression)*
	;


// logical and (&&)  (level 10)
logicalAndExpression
	:	inclusiveOrExpression (LAND^ inclusiveOrExpression)*
	;


// bitwise or non-short-circuiting or (|)  (level 9)
inclusiveOrExpression
	:	exclusiveOrExpression (BOR^ exclusiveOrExpression)*
	;


// exclusive or (^)  (level 8)
exclusiveOrExpression
	:	andExpression (BXOR^ andExpression)*
	;


// bitwise or non-short-circuiting and (&)  (level 7)
andExpression
	:	equalityExpression (BAND^ equalityExpression)*
	;


// equality/inequality (==/!=) (level 6)
equalityExpression
	:	relationalExpression ((NOT_EQUAL^ | EQUAL^) relationalExpression)*
	;


// boolean relational expressions (level 5)
relationalExpression
	:	shiftExpression
		(	(	(	LT^
				|	GT^
				|	LE^
				|	GE^
				)
				shiftExpression
			)*
		|	"instanceof"^ typeSpec[true]
		)
	;


// bit shift expressions (level 4)
shiftExpression
	:	additiveExpression ((SL^ | SR^ | BSR^) additiveExpression)*
	;


// binary addition/subtraction (level 3)
additiveExpression
	:	multiplicativeExpression ((PLUS^ | MINUS^) multiplicativeExpression)*
	;


// multiplication/division/modulo (level 2)
multiplicativeExpression
	:	unaryExpression ((STAR^ | DIV^ | MOD^ ) unaryExpression)*
	;

unaryExpression
	:	INC^ unaryExpression
	|	DEC^ unaryExpression
	|	MINUS^ {#MINUS.setType(UNARY_MINUS);} unaryExpression
	|	PLUS^  {#PLUS.setType(UNARY_PLUS);} unaryExpression
	|	unaryExpressionNotPlusMinus
	;

unaryExpressionNotPlusMinus
	:	BNOT^ unaryExpression
	|	LNOT^ unaryExpression

	|	(	// subrule allows option to shut off warnings
			options {
				// "(int" ambig with postfixExpr due to lack of sequence
				// info in linear approximate LL(k).  It's ok.  Shut up.
				generateAmbigWarnings=false;
			}
		:	// If typecast is built in type, must be numeric operand
			// Also, no reason to backtrack if type keyword like int, float...
			lpb:LPAREN^ {#lpb.setType(TYPECAST);} builtInTypeSpec[true] RPAREN!
			unaryExpression

			// Have to backtrack to see if operator follows.  If no operator
			// follows, it's a typecast.  No semantic checking needed to parse.
			// if it _looks_ like a cast, it _is_ a cast; else it's a "(expr)"
		|	(LPAREN classTypeSpec[true] RPAREN unaryExpressionNotPlusMinus)=>
			lp:LPAREN^ {#lp.setType(TYPECAST);} classTypeSpec[true] RPAREN!
			unaryExpressionNotPlusMinus

		|	postfixExpression
		)
	;

// qualified names, array expressions, method invocation, post inc/dec
postfixExpression
	:
    /*
    "this"! lp1:LPAREN^ argList RPAREN!
		{#lp1.setType(CTOR_CALL);}

    |   "super"! lp2:LPAREN^ argList RPAREN!
		{#lp2.setType(SUPER_CTOR_CALL);}
    |
    */
        primaryExpression

		(
            /*
            options {
				// the use of postfixExpression in SUPER_CTOR_CALL adds DOT
				// to the lookahead set, and gives loads of false non-det
				// warnings.
				// shut them off.
				generateAmbigWarnings=false;
			}
		:	*/
            DOT^ IDENT
			(	lp:LPAREN^ {#lp.setType(METHOD_CALL);}
				argList
				RPAREN!
			)?
		|	DOT^ "this"

		|	DOT^ "super"
            (   // (new Outer()).super()  (create enclosing instance)
                lp3:LPAREN^ argList RPAREN!
                {#lp3.setType(SUPER_CTOR_CALL);}
			|   DOT^ IDENT
                (	lps:LPAREN^ {#lps.setType(METHOD_CALL);}
                    argList
                    RPAREN!
                )?
            )
		|	DOT^ newExpression
		|	lb:LBRACK^ {#lb.setType(INDEX_OP);} expression RBRACK!
		)*

		(   // possibly add on a post-increment or post-decrement.
            // allows INC/DEC on too much, but semantics can check
			in:INC^ {#in.setType(POST_INC);}
	 	|	de:DEC^ {#de.setType(POST_DEC);}
		)?
 	;

// the basic element of an expression
primaryExpression
	:	identPrimary ( options {greedy=true;} : DOT^ "class" )?
    |   constant
	|	"true"
	|	"false"
	|	"null"
    |   newExpression
	|	"this"
	|	"super"
	|	LPAREN! assignmentExpression RPAREN!
		// look for int.class and int[].class
	|	builtInType
		( lbt:LBRACK^ {#lbt.setType(ARRAY_DECLARATOR);} RBRACK! )*
		DOT^ "class"
	;

/** Match a, a.b.c refs, a.b.c(...) refs, a.b.c[], a.b.c[].class,
 *  and a.b.c.class refs.  Also this(...) and super(...).  Match
 *  this or super.
 */
identPrimary
	:	IDENT
		(
            options {
				// .ident could match here or in postfixExpression.
				// We do want to match here.  Turn off warning.
				greedy=true;
			}
		:	DOT^ IDENT
		)*
		(
            options {
				// ARRAY_DECLARATOR here conflicts with INDEX_OP in
				// postfixExpression on LBRACK RBRACK.
				// We want to match [] here, so greedy.  This overcomes
                // limitation of linear approximate lookahead.
				greedy=true;
		    }
		:   ( lp:LPAREN^ {#lp.setType(METHOD_CALL);} argList RPAREN! )
		|	( options {greedy=true;} :
              lbc:LBRACK^ {#lbc.setType(ARRAY_DECLARATOR);} RBRACK!
            )+
		)?
    ;

/** object instantiation.
 *  Trees are built as illustrated by the following input/tree pairs:
 *
 *  new T()
 *
 *  new
 *   |
 *   T --  ELIST
 *           |
 *          arg1 -- arg2 -- .. -- argn
 *
 *  new int[]
 *
 *  new
 *   |
 *  int -- ARRAY_DECLARATOR
 *
 *  new int[] {1,2}
 *
 *  new
 *   |
 *  int -- ARRAY_DECLARATOR -- ARRAY_INIT
 *                                  |
 *                                EXPR -- EXPR
 *                                  |      |
 *                                  1      2
 *
 *  new int[3]
 *  new
 *   |
 *  int -- ARRAY_DECLARATOR
 *                |
 *              EXPR
 *                |
 *                3
 *
 *  new int[1][2]
 *
 *  new
 *   |
 *  int -- ARRAY_DECLARATOR
 *               |
 *         ARRAY_DECLARATOR -- EXPR
 *               |              |
 *             EXPR             1
 *               |
 *               2
 *
 */
newExpression
	:	"new"^ type
		(	LPAREN! argList RPAREN! (classBlock)?

			//java 1.1
			// Note: This will allow bad constructs like
			//    new int[4][][3] {exp,exp}.
			//    There needs to be a semantic check here...
			// to make sure:
			//   a) [ expr ] and [ ] are not mixed
			//   b) [ expr ] and an init are not used together

		|	newArrayDeclarator (arrayInitializer)?
		)
	;

argList
	:	(	expressionList
		|	/*nothing*/
			{#argList = #[ELIST,"ELIST"];}
		)
	;

newArrayDeclarator
	:	(
			// CONFLICT:
			// newExpression is a primaryExpression which can be
			// followed by an array index reference.  This is ok,
			// as the generated code will stay in this loop as
			// long as it sees an LBRACK (proper behavior)
			options {
				warnWhenFollowAmbig = false;
			}
		:
			lb:LBRACK^ {#lb.setType(ARRAY_DECLARATOR);}
				(expression)?
			RBRACK!
		)+
	;

constant
	:	NUM_INT
	|	CHAR_LITERAL
	|	STRING_LITERAL
	|	NUM_FLOAT
	|	NUM_LONG
	|	NUM_DOUBLE
	;


//----------------------------------------------------------------------------
// The Java scanner
//----------------------------------------------------------------------------
class JavaLexer extends Lexer;

options {
	exportVocab=Java;      // call the vocabulary "Java"
	testLiterals=false;    // don't automatically test for literals
	k=4;                   // four characters of lookahead
	charVocabulary='\u0003'..'\uFFFF';
	// without inlining some bitset tests, couldn't do unicode;
	// I need to make ANTLR generate smaller bitsets; see
	// bottom of JavaLexer.java
	codeGenBitsetTestThreshold=20;
}



// OPERATORS
QUESTION		:	'?'		;
LPAREN			:	'('		;
RPAREN			:	')'		;
LBRACK			:	'['		;
RBRACK			:	']'		;
LCURLY			:	'{'		;
RCURLY			:	'}'		;
COLON			:	':'		;
COMMA			:	','		;
//DOT			:	'.'		;
ASSIGN			:	'='		;
EQUAL			:	"=="	;
LNOT			:	'!'		;
BNOT			:	'~'		;
NOT_EQUAL		:	"!="	;
DIV				:	'/'		;
DIV_ASSIGN		:	"/="	;
PLUS			:	'+'		;
PLUS_ASSIGN		:	"+="	;
INC				:	"++"	;
MINUS			:	'-'		;
MINUS_ASSIGN	:	"-="	;
DEC				:	"--"	;
STAR			:	'*'		;
STAR_ASSIGN		:	"*="	;
MOD				:	'%'		;
MOD_ASSIGN		:	"%="	;
SR				:	">>"	;
SR_ASSIGN		:	">>="	;
BSR				:	">>>"	;
BSR_ASSIGN		:	">>>="	;
GE				:	">="	;
GT				:	">"		;
SL				:	"<<"	;
SL_ASSIGN		:	"<<="	;
LE				:	"<="	;
LT				:	'<'		;
BXOR			:	'^'		;
BXOR_ASSIGN		:	"^="	;
BOR				:	'|'		;
BOR_ASSIGN		:	"|="	;
LOR				:	"||"	;
BAND			:	'&'		;
BAND_ASSIGN		:	"&="	;
LAND			:	"&&"	;
SEMI			:	';'		;


// Whitespace -- ignored
WS	:	(	' '
		|	'\t'
		|	'\f'
			// handle newlines
		|	(	options {generateAmbigWarnings=false;}
			:	"\r\n"  // Evil DOS
			|	'\r'    // Macintosh
			|	'\n'    // Unix (the right way)
			)
			{ newline(); }
		)+
		{ _ttype = Token.SKIP; }
	;

// Single-line comments
SL_COMMENT
	:	"//"
		(~('\n'|'\r'))* ('\n'|'\r'('\n')?)
		{$setType(Token.SKIP); newline();}
	;

// multiple-line comments
ML_COMMENT
	:	"/*"
		(	/*	'\r' '\n' can be matched in one alternative or by matching
				'\r' in one iteration and '\n' in another.  I am trying to
				handle any flavor of newline that comes in, but the language
				that allows both "\r\n" and "\r" and "\n" to all be valid
				newline is ambiguous.  Consequently, the resulting grammar
				must be ambiguous.  I'm shutting this warning off.
			 */
			options {
				generateAmbigWarnings=false;
			}
		:
			{ LA(2)!='/' }? '*'
		|	'\r' '\n'		{newline();}
		|	'\r'			{newline();}
		|	'\n'			{newline();}
		|	~('*'|'\n'|'\r')
		)*
		"*/"
		{$setType(Token.SKIP);}
	;


// character literals
CHAR_LITERAL
	:	'\'' ( ESC | ~'\'' ) '\''
	;

// string literals
STRING_LITERAL
	:	'"' (ESC|~('"'|'\\'))* '"'
	;


// escape sequence -- note that this is protected; it can only be called
//   from another lexer rule -- it will not ever directly return a token to
//   the parser
// There are various ambiguities hushed in this rule.  The optional
// '0'...'9' digit matches should be matched here rather than letting
// them go back to STRING_LITERAL to be matched.  ANTLR does the
// right thing by matching immediately; hence, it's ok to shut off
// the FOLLOW ambig warnings.
protected
ESC
	:	'\\'
		(	'n'
		|	'r'
		|	't'
		|	'b'
		|	'f'
		|	'"'
		|	'\''
		|	'\\'
		|	('u')+ HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT
		|	'0'..'3'
			(
				options {
					warnWhenFollowAmbig = false;
				}
			:	'0'..'7'
				(
					options {
						warnWhenFollowAmbig = false;
					}
				:	'0'..'7'
				)?
			)?
		|	'4'..'7'
			(
				options {
					warnWhenFollowAmbig = false;
				}
			:	'0'..'7'
			)?
		)
	;


// hexadecimal digit (again, note it's protected!)
protected
HEX_DIGIT
	:	('0'..'9'|'A'..'F'|'a'..'f')
	;


// a dummy rule to force vocabulary to be all characters (except special
//   ones that ANTLR uses internally (0 to 2)
protected
VOCAB
	:	'\3'..'\377'
	;


// an identifier.  Note that testLiterals is set to true!  This means
// that after we match the rule, we look in the literals table to see
// if it's a literal or really an identifer
IDENT
	options {testLiterals=true;}
	:	('a'..'z'|'A'..'Z'|'_'|'$') ('a'..'z'|'A'..'Z'|'_'|'0'..'9'|'$')*
	;


// a numeric literal
NUM_INT
	{boolean isDecimal=false; Token t=null;}
    :   '.' {_ttype = DOT;}
            (	('0'..'9')+ (EXPONENT)? (f1:FLOAT_SUFFIX {t=f1;})?
                {
				if (t != null && t.getText().toUpperCase().indexOf('F')>=0) {
                	_ttype = NUM_FLOAT;
				}
				else {
                	_ttype = NUM_DOUBLE; // assume double
				}
				}
            )?

	|	(	'0' {isDecimal = true;} // special case for just '0'
			(	('x'|'X')
				(											// hex
					// the 'e'|'E' and float suffix stuff look
					// like hex digits, hence the (...)+ doesn't
					// know when to stop: ambig.  ANTLR resolves
					// it correctly by matching immediately.  It
					// is therefor ok to hush warning.
					options {
						warnWhenFollowAmbig=false;
					}
				:	HEX_DIGIT
				)+
			|	('0'..'7')+									// octal
			)?
		|	('1'..'9') ('0'..'9')*  {isDecimal=true;}		// non-zero decimal
		)
		(	('l'|'L') { _ttype = NUM_LONG; }

		// only check to see if it's a float if looks like decimal so far
		|	{isDecimal}?
            (   '.' ('0'..'9')* (EXPONENT)? (f2:FLOAT_SUFFIX {t=f2;})?
            |   EXPONENT (f3:FLOAT_SUFFIX {t=f3;})?
            |   f4:FLOAT_SUFFIX {t=f4;}
            )
            {
			if (t != null && t.getText().toUpperCase() .indexOf('F') >= 0) {
                _ttype = NUM_FLOAT;
			}
            else {
	           	_ttype = NUM_DOUBLE; // assume double
			}
			}
        )?
	;


// a couple protected methods to assist in matching floating point numbers
protected
EXPONENT
	:	('e'|'E') ('+'|'-')? ('0'..'9')+
	;


protected
FLOAT_SUFFIX
	:	'f'|'F'|'d'|'D'
	;

-------------- next part --------------
import java.util.*;
import java.io.Serializable;
import java.io.Externalizable;

public class G2
{
    public void testDecls()
    {
        String v1;
        java.lang.String v2;
        int v3;
        float v4;
        int[] v5;
        String[] v6;
        float[][][] v7;
        
        // no nesting
        List<String> v8;
        Map<String,Integer> v9;
        Map3<String,Integer,Float> v10;
        
        Map3<java.lang.String,java.lang.Integer,java.lang.Float> v11;
        
        // two nestings
        List<List<String> > v12;
        List<List<String>> v13;
        Map<List<String>,Integer> v14;
        Map<Integer,List<String> > v15;
        Map<Integer,List<String>> v16;
        Map3<List<String>,Integer,Float> v17;
        Map3<Integer,List<String>,Float> v18;
        Map3<Integer,Float,List<String> > v19;
        Map3<Integer,Float,List<String>> v20;
        
        // three nestings
        List<List<List<String> > > v21;
        List<List<List<String>> > v22;
        List<List<List<String> >> v23;
        List<List<List<String>>> v24;
        Map<List<List<String> >,Integer> v25;
        Map<List<List<String>>,Integer> v26;
        Map<Integer,List<List<String> > > v27;
        Map<Integer,List<List<String> >> v28;
        Map<Integer,List<List<String>> > v29;
        Map<Integer,List<List<String>>> v30;
        Map3<List<List<String>>,Integer,Float> v31;
        Map3<Integer,List<List<String>>,Float> v32;
        Map3<Integer,Float,List<List<String> > > v33;
        Map3<Integer,Float,List<List<String>> > v34;
        Map3<Integer,Float,List<List<String> >> v35;
        Map3<Integer,Float,List<List<String>>> v36;
        
        // four nestings
        List<List<List<List<String> > > > v37;
        List<List<List<List<String>> >> v38;
        List<List<List<List<String>> > > v39;
        List<List<List<List<String> > >> v40;
        List<List<List<List<String> >>> v41;
        List<List<List<List<String>>> > v42;
        List<List<List<List<String>>>> v43;
        
        Map<List<List<List<String>>>,Integer> v44;
        Map<Integer,List<List<List<String> > > > v45;
        Map<Integer,List<List<List<String>> >> v46;
        Map<Integer,List<List<List<String>> > > v47;
        Map<Integer,List<List<List<String> > >> v48;
        Map<Integer,List<List<List<String>>> > v49;
        Map<Integer,List<List<List<String> >>> v50;
        
        // make sure more complicatd reference types can be
        // type arguments
        List<String[]> v51;
        List<List<String[]> > v52;
        List<List<String[]>> v53;
        
        Map<String,Integer> v54;
        Map<String,List<Integer> > v55;
        Map<String,List<Integer>> v56;
        Map<List<Integer>,String> v57;
        Map<List<Integer>,List<String>> v58;
        
        Map3<String,Integer,Float> v59;
        Map3<String,List<Integer>,Float> v60;
        
        Map<Map<String,String>,Map3<String,Integer,Float>> v61;
        Map<List<String>,List<Integer>> v62;
        Map3<List<String>,List<Integer>,List<Float>> v63;
        
        List<Object>[] v64;
        Map<String,List<Object>[]> v65;

        // composite names; generic classes that have inner classes
        Seq<String>.Zipper<Integer> v68;
        Seq<String[]>.Zipper<Integer[][]>[] v69;
    }

    public void testExpressions() 
    {
        Object o = null;
        List<Integer> l1 = (ArrayList<Integer>)null;
        l1 = new ArrayList<Integer>();
        Map<Integer,String> l2 = null;
        
        List<Integer>[] a1 = new List<Integer>[1];
        a1[0] = l1;

        //
        // double end-angle-brackets
        //
        
        Map<String,List<Integer> > m1 = new HashMap<String,List<Integer> > ();
        Map<String,List<Integer>>m2 = new HashMap<String,List<Integer>>();

        Pair<Seq<Integer>,Seq<String>> p1 =
            new Pair<Seq<Integer>,Seq<String>>(
                new Seq<Integer>(new Integer(0), new Seq<Integer>()),
                new Seq<String>("abc", new Seq<String>()));

        Seq<Character>[][][] sa1 = new Seq<Character>[10][20][];

        // casting
        l2 = (Map<Integer,String>) null;

        // instanceof
        boolean b1 = l2 instanceof Map<Integer,String>;

        // cast or less-than operator:
        {
            class a<T>{};
            class b{};
            Object x = ( a < b > ) null;
        }
        {
            int a = 0;
            int b = 0;
            String x = ( a < b ) + "";
        }
    }
    
    /** a generic method */
    <Elem extends Comparable<Elem>> void sort(Elem[] a) {
        for (int i = 0; i < a.length; i++)
            for (int j = 0; j < i; j++)
                if (a[j].compareTo(a[i]) < 0) swap(a, i, j);
    }

    static <Elem> void swap(Elem[] a, int i, int j) {
        Elem temp = a[i]; a[i] = a[j]; a[j] = temp;
    }

    void foo()
    {
        // call a generic method
        String[] strings = {"a","c","d","z","b"};
        sort(strings);
    }
    
}


class Pair<TA, TB>
{
    Pair(TA a, TB b) {}
    
}

class Pair1<TA extends java.lang.Number & Serializable,
           TB extends Serializable & Externalizable & Comparable<TA> > 
{
    TA a;
    TB b;

    static <E> void foo1(E x) {}
    static <E> E foo2(E x, E y) {return null;}
    static <E extends Exception> E foo2(E x, E y) throws E {return null;}
    
}

class Pair2<TA extends java.lang.Object & Serializable,
                       TB extends Serializable & Externalizable & Comparable<TA>>
{}


// two ending '>'
class Class1a<T1, T2 extends Comparator<T1>>{}
class Class1b<T1, T2 extends Comparator<T1> >{}
// three ending '>'
class Class2a<T1, T2 extends Comparator<List<T1>>>{}
class Class2b<T1, T2 extends Comparator<List<T1> >>{}
class Class2c<T1, T2 extends Comparator<List<T1>> >{}
class Class2d<T1, T2 extends Comparator<List<T1> > >{}
// four ending '>'
class Class3a<T1, T2 extends Comparator<Pair<String[],List<T1>>>>{}
class Class3b<T1, T2 extends Comparator<Pair<String[],List<T1>> >>{}
class Class3c<T1, T2 extends Comparator<Pair<String[],List<T1>> > >{}
class Class3d<T1, T2 extends Comparator<Pair<String[],List<T1> > >>{}
class Class3e<T1, T2 extends Comparator<Pair<String[],List<T1> >> >{}
class Class3f<T1, T2 extends Comparator<Pair<String[],List<T1>>> >{}
class Class3g<T1, T2 extends Comparator<Pair<String[],List<T1> >>>{}


// generic types in the extends and implements clauses of
// classes and interfaces
class BaseClass<T>{}
interface BaseInterface<T> {}
class SubClass1 extends BaseClass<Integer> {}
class SubClass2<T> extends BaseClass<T> {}
class SubClass3<T> extends BaseClass<T> implements BaseInterface<T>{}
class SubClass4 extends BaseClass<Integer> implements BaseInterface<String>{}
class SubClass5 extends BaseClass<List<Integer>> {}
class SubClass6 implements BaseInterface<List<String>>{}
interface BaseInterface2<T> extends BaseInterface<T>{}


// a class with three params (used in examples above)
class Map3<T1,T2,T3> {}


// copied from JSR14 document (but syntax errors fixed!
// those "this." expressions did not compile with ea compiler )
class Seq<A> {
    A head;
    Seq<A> tail;
    Seq() { this(null, null); }
    boolean isEmpty() { return tail == null; }
    Seq(A head, Seq<A> tail) { this.head = head; this.tail = tail; }
    class Zipper<B> {
        Seq<Pair<A,B>> zip(Seq<B> that) {
            if (isEmpty() || that.isEmpty())
                return new Seq<Pair<A,B>>();
            else
                return new Seq<Pair<A,B>>(
                    new Pair<A,B>(head, that.head),
                    zip(that.tail));
        }
    }
}
From fedot at stockworm.com  Wed Mar 19 12:03:19 2003
From: fedot at stockworm.com (fedot)
Date: Mon Dec 20 16:15:28 2004
Subject: [antlr-interest] how do i generate an error if input is not fully consumed
Message-ID: <b5aie7+vaia@eGroups.com>

I have the following java code (approximately) to go with some 
simple calculator grammar:

MyLexer lexer = new MyLexer(new StringReader(string));
MyParser parser = new MyParser(lexer);
parser.start(); // start variable
System.out.println(parser.getAST().toStringList());

If input string is such that only beginning of it matches lexer and 
parser rules, an AST is properly constructed for the beginning of 
the string and the remainder is silently ignored.

I need to detect such a state (syntactically invalid input remaining 
unconsumed) and "raise an error flag". What are my options?

Thank you in advance!


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From brian-l-smith at uiowa.edu  Wed Mar 19 12:17:38 2003
From: brian-l-smith at uiowa.edu (Brian Smith)
Date: Mon Dec 20 16:15:28 2004
Subject: [antlr-interest] how do i generate an error if input is not fully
 consumed
In-Reply-To: <b5aie7+vaia@eGroups.com>
References: <b5aie7+vaia@eGroups.com>
Message-ID: <3E78D062.6010404@uiowa.edu>

I have been tripped up by this before. From memory, I believe that you 
just need to make sure your start rules explicitly end with EOF. You 
probably have a start rule that looks like this:

myRule: A B C;

Change it to:

myRule: A B C EOF;

Then, myRule will only be matched if nothing follows it.

- Brian



fedot wrote:
> I have the following java code (approximately) to go with some 
> simple calculator grammar:
> 
> MyLexer lexer = new MyLexer(new StringReader(string));
> MyParser parser = new MyParser(lexer);
> parser.start(); // start variable
> System.out.println(parser.getAST().toStringList());
> 
> If input string is such that only beginning of it matches lexer and 
> parser rules, an AST is properly constructed for the beginning of 
> the string and the remainder is silently ignored.
> 
> I need to detect such a state (syntactically invalid input remaining 
> unconsumed) and "raise an error flag". What are my options?
> 
> Thank you in advance!
> 
> 
>  
> 
> Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 
> 



 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From open.zone at virgin.net  Wed Mar 19 12:22:00 2003
From: open.zone at virgin.net (micheal_jor)
Date: Mon Dec 20 16:15:28 2004
Subject: [antlr-interest] Re: C# CommonAST class and Clone()
In-Reply-To: <0F9CBE7F81945C4BB7A32BE6E7656EE00ECDD7@sac1exch3.aspect.com>
Message-ID: <b5ajh8+cpg3@eGroups.com>

> Okay,
> 
> I have seen the code that uses reflection to create AST nodes and 
tokens.
> Now that I know clone is no longer used by ANTLR directly I have 
implemented
> it to do a complete clone of the tree.

Hmmm....How does this differ from the dupXXX() methods of the 
ASTFactory class?. 

Cheers,

Micheal


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From rbencina at iprimus.com.au  Wed Mar 19 15:02:39 2003
From: rbencina at iprimus.com.au (Ross Bencina)
Date: Mon Dec 20 16:15:28 2004
Subject: [antlr-interest] c++ libantlr: panic()
Message-ID: <000701c2ee6b$b96572a0$0101a8c0@athlon900>

I notice that the warning/error message handling seems to have been improved
since last time I played with antlr - with virtual reportError() and
reportWarning() functions that can be overridden. This is really good.

There may be an issue with panic() though:

CharScanner.hpp, line 321:
/// Called when a unrecoverable error is encountered
 void panic();
 /// Called when a unrecoverable error is encountered
 void panic(const ANTLR_USE_NAMESPACE(std)string& s);

Parser.hpp, line 167:
static void panic();

TreeParser.hpp, line 65:
/// Give panic message and exit the program. can be overridden in subclass
static void panic();


So panic() is currently declared as static in two of three base classes. One
of these says "can be overridden in subclass" which is not possible for a
non-virtual function.

May I suggest that panic be changed to a virtual function as follows in all
three classes?

/// Give panic message and exit the program. can be overridden in subclass
virtual void panic();

When exactly does panic() get called? It doesn't seem to be mentioned in the
parsers and lexers that I've generated. I assume that if panic() is called,
it's safe to throw an exception to escape from the parser, and delete the
parser, rather than being forced to exit() - which is often undesirable.

Thanks in advance

Ross.








 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From markkant2001 at yahoo.com  Wed Mar 19 16:45:29 2003
From: markkant2001 at yahoo.com (mark kant)
Date: Mon Dec 20 16:15:28 2004
Subject: [antlr-interest] selective case insensitive
In-Reply-To: <20030219092424.43759.qmail@web13609.mail.yahoo.com>
Message-ID: <20030320004529.95611.qmail@web13605.mail.yahoo.com>

How do I do lexical analysis that is case insensitive.
 But then at times I need it to be case sensitive.I
tried using CharScanner.setCaseSensitive(...) actione
before the specific rule, but it did not work.

Thanks

Mark

__________________________________________________
Do you Yahoo!?
Yahoo! Platinum - Watch CBS' NCAA March Madness, live on your desktop!
http://platinum.yahoo.com

 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From richard.ney at aspect.com  Wed Mar 19 20:01:21 2003
From: richard.ney at aspect.com (Ney, Richard)
Date: Mon Dec 20 16:15:28 2004
Subject: [antlr-interest] Re: C# CommonAST class and Clone()
Message-ID: <0F9CBE7F81945C4BB7A32BE6E7656EE00ECDD8@sac1exch3.aspect.com>

The methods in the ASTFactory eventually uses the method
createFromNodeTypeObject which uses the reflection. This only works if I am
inside a the parser the created the AST originally or I have an instance of
that parser around. I am cloning the ASTs inside a parser that supports a
different grammar.

Do you know an easier way?

-Richard

-----Original Message-----
From: micheal_jor [mailto:open.zone@virgin.net] 
Sent: Wednesday, March 19, 2003 12:22 PM
To: antlr-interest@yahoogroups.com
Subject: [antlr-interest] Re: C# CommonAST class and Clone()

> Okay,
> 
> I have seen the code that uses reflection to create AST nodes and 
tokens.
> Now that I know clone is no longer used by ANTLR directly I have 
implemented
> it to do a complete clone of the tree.

Hmmm....How does this differ from the dupXXX() methods of the 
ASTFactory class?. 

Cheers,

Micheal


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From richard.ney at aspect.com  Wed Mar 19 20:18:28 2003
From: richard.ney at aspect.com (Ney, Richard)
Date: Mon Dec 20 16:15:28 2004
Subject: [antlr-interest] Re: C# CommonAST class and Clone()
Message-ID: <0F9CBE7F81945C4BB7A32BE6E7656EE072293A@sac1exch3.aspect.com>

Okay, I retract my original comment on the reflection issue. The dupXXX()
methods do work on my ASTs. I assumed they wouldn't work after attempting to
use the factory in my parser to create a node using a token from my other
parser. So I assumed that I would have the same issue using the dupXXX()
methods.

-Richard

-----Original Message-----
From: Ney, Richard [mailto:richard.ney@aspect.com] 
Sent: Wednesday, March 19, 2003 8:01 PM
To: 'antlr-interest@yahoogroups.com'
Subject: RE: [antlr-interest] Re: C# CommonAST class and Clone()

The methods in the ASTFactory eventually uses the method
createFromNodeTypeObject which uses the reflection. This only works if I am
inside a the parser the created the AST originally or I have an instance of
that parser around. I am cloning the ASTs inside a parser that supports a
different grammar.

Do you know an easier way?

-Richard

-----Original Message-----
From: micheal_jor [mailto:open.zone@virgin.net] 
Sent: Wednesday, March 19, 2003 12:22 PM
To: antlr-interest@yahoogroups.com
Subject: [antlr-interest] Re: C# CommonAST class and Clone()

> Okay,
> 
> I have seen the code that uses reflection to create AST nodes and 
tokens.
> Now that I know clone is no longer used by ANTLR directly I have 
implemented
> it to do a complete clone of the tree.

Hmmm....How does this differ from the dupXXX() methods of the 
ASTFactory class?. 

Cheers,

Micheal


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From mzukowski at yci.com  Thu Mar 20 08:08:25 2003
From: mzukowski at yci.com (mzukowski@yci.com)
Date: Mon Dec 20 16:15:28 2004
Subject: [antlr-interest] selective case insensitive
Message-ID: <170826586F3BD511910D0200C110AAA80540223C@memail03.bco-home.com>

You will notice that the generated lexer uses a map to hold the literals.
You could replace that map with one that had logic for your requirements.

Monty

-----Original Message-----
From: mark kant [mailto:markkant2001@yahoo.com]
Sent: Wednesday, March 19, 2003 4:45 PM
To: antlr-interest@yahoogroups.com
Subject: [antlr-interest] selective case insensitive


How do I do lexical analysis that is case insensitive.
 But then at times I need it to be case sensitive.I
tried using CharScanner.setCaseSensitive(...) actione
before the specific rule, but it did not work.

Thanks

Mark

__________________________________________________
Do you Yahoo!?
Yahoo! Platinum - Watch CBS' NCAA March Madness, live on your desktop!
http://platinum.yahoo.com

 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From brian-l-smith at uiowa.edu  Thu Mar 20 11:17:01 2003
From: brian-l-smith at uiowa.edu (Brian Smith)
Date: Mon Dec 20 16:15:28 2004
Subject: [antlr-interest] Runtime-only JAR?
Message-ID: <3E7A13AD.7070006@uiowa.edu>

Hi,

In ANTLR versions prior to 2.7.2 there were seperate JAR files, 
antlr.jar and antlrall.jar. antlr.jar had the runtime library and 
antlrall.jar had the runtime library plus everything else. As of 2.7.2, 
antlr.jar now contains everything (i.e. it is the equivalent of 
antlrall.jar) and there is no seperate runtime library JAR.

I think that the seperate runtime library JAR was very useful because of 
its small size. It is only 1/6th the size of antlrall.jar:

                 combined      runtime-only
   compressed    360K          60K
   uncompressed  685K          108K

With web-deployed applications (applets, web start applications, 
NetBeans Autoupdate, etc.), the JAR file size is important. So, I would 
like to see the runtime-only JAR file added back to the ANTLR build 
system. Actually, for the applications I have it would be best if there 
were two JAR's, one for the runtime lib and one that had everything 
except the runtime lib.

Does this sound like a reasonable change?

Thanks,
Brian



 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From mzukowski at yci.com  Thu Mar 20 11:28:18 2003
From: mzukowski at yci.com (mzukowski@yci.com)
Date: Mon Dec 20 16:15:28 2004
Subject: [antlr-interest] Runtime-only JAR?
Message-ID: <170826586F3BD511910D0200C110AAA805402244@memail03.bco-home.com>

See the mkjar and mkjar.bat scripts in the distribution.  It could probably
use some better documentation that they make the runtime jars.

Monty

-----Original Message-----
From: Brian Smith [mailto:brian-l-smith@uiowa.edu]
Sent: Thursday, March 20, 2003 11:17 AM
To: antlr-interest@yahoogroups.com
Subject: [antlr-interest] Runtime-only JAR?


Hi,

In ANTLR versions prior to 2.7.2 there were seperate JAR files, 
antlr.jar and antlrall.jar. antlr.jar had the runtime library and 
antlrall.jar had the runtime library plus everything else. As of 2.7.2, 
antlr.jar now contains everything (i.e. it is the equivalent of 
antlrall.jar) and there is no seperate runtime library JAR.

I think that the seperate runtime library JAR was very useful because of 
its small size. It is only 1/6th the size of antlrall.jar:

                 combined      runtime-only
   compressed    360K          60K
   uncompressed  685K          108K

With web-deployed applications (applets, web start applications, 
NetBeans Autoupdate, etc.), the JAR file size is important. So, I would 
like to see the runtime-only JAR file added back to the ANTLR build 
system. Actually, for the applications I have it would be best if there 
were two JAR's, one for the runtime lib and one that had everything 
except the runtime lib.

Does this sound like a reasonable change?

Thanks,
Brian



 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From brian-l-smith at uiowa.edu  Thu Mar 20 11:47:35 2003
From: brian-l-smith at uiowa.edu (Brian Smith)
Date: Mon Dec 20 16:15:28 2004
Subject: [antlr-interest] Runtime-only JAR?
In-Reply-To: <170826586F3BD511910D0200C110AAA805402244@memail03.bco-home.com>
References: <170826586F3BD511910D0200C110AAA805402244@memail03.bco-home.com>
Message-ID: <3E7A1AD7.3000502@uiowa.edu>

Hi,

The mkjar scripts are gone. According to install.html:

"I have removed all of the build shell scripts and mkjar type scripts I 
had since there is only one all encompassing antlr.jar now and a 
self-build tool."

For NetBeans, we can create our own mkjar-like scripts. However, some 
people for NetBeans expressed concern that if all the classes are mixed 
together in the same JAR file then it will be too easy to create 
inappropriate dependencies (i.e. some runtime class depending on one of 
the development-time classes), and also we didn't really want to 
maintain our own build scripts just for ANTLR/NetBeans integration.

I am willing to contribute the necessary changes to implement this back 
to ANTLR.org.

Regards,
Brian

mzukowski@yci.com wrote:
> See the mkjar and mkjar.bat scripts in the distribution.  It could probably
> use some better documentation that they make the runtime jars.
> 
> Monty
> 
> -----Original Message-----
> From: Brian Smith [mailto:brian-l-smith@uiowa.edu]
> Sent: Thursday, March 20, 2003 11:17 AM
> To: antlr-interest@yahoogroups.com
> Subject: [antlr-interest] Runtime-only JAR?
> 
> 
> Hi,
> 
> In ANTLR versions prior to 2.7.2 there were seperate JAR files, 
> antlr.jar and antlrall.jar. antlr.jar had the runtime library and 
> antlrall.jar had the runtime library plus everything else. As of 2.7.2, 
> antlr.jar now contains everything (i.e. it is the equivalent of 
> antlrall.jar) and there is no seperate runtime library JAR.
> 
> I think that the seperate runtime library JAR was very useful because of 
> its small size. It is only 1/6th the size of antlrall.jar:
> 
>                  combined      runtime-only
>    compressed    360K          60K
>    uncompressed  685K          108K
> 
> With web-deployed applications (applets, web start applications, 
> NetBeans Autoupdate, etc.), the JAR file size is important. So, I would 
> like to see the runtime-only JAR file added back to the ANTLR build 
> system. Actually, for the applications I have it would be best if there 
> were two JAR's, one for the runtime lib and one that had everything 
> except the runtime lib.
> 
> Does this sound like a reasonable change?
> 
> Thanks,
> Brian
> 
> 
> 
>  
> 
> Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 
> 
> 
>  
> 
> Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 
> 



 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From mzukowski at yci.com  Thu Mar 20 11:49:57 2003
From: mzukowski at yci.com (mzukowski@yci.com)
Date: Mon Dec 20 16:15:28 2004
Subject: [antlr-interest] Runtime-only JAR?
Message-ID: <170826586F3BD511910D0200C110AAA805402246@memail03.bco-home.com>

Oops.  I was looking in 2.7.2rc1 and not in the final version.  Guess it
changed :)

I recommend emailing ter directly about this issue.  He should be back from
France any day now....

Monty

-----Original Message-----
From: Brian Smith [mailto:brian-l-smith@uiowa.edu]
Sent: Thursday, March 20, 2003 11:48 AM
To: antlr-interest@yahoogroups.com
Subject: Re: [antlr-interest] Runtime-only JAR?


Hi,

The mkjar scripts are gone. According to install.html:

"I have removed all of the build shell scripts and mkjar type scripts I 
had since there is only one all encompassing antlr.jar now and a 
self-build tool."

For NetBeans, we can create our own mkjar-like scripts. However, some 
people for NetBeans expressed concern that if all the classes are mixed 
together in the same JAR file then it will be too easy to create 
inappropriate dependencies (i.e. some runtime class depending on one of 
the development-time classes), and also we didn't really want to 
maintain our own build scripts just for ANTLR/NetBeans integration.

I am willing to contribute the necessary changes to implement this back 
to ANTLR.org.

Regards,
Brian

mzukowski@yci.com wrote:
> See the mkjar and mkjar.bat scripts in the distribution.  It could
probably
> use some better documentation that they make the runtime jars.
> 
> Monty
> 
> -----Original Message-----
> From: Brian Smith [mailto:brian-l-smith@uiowa.edu]
> Sent: Thursday, March 20, 2003 11:17 AM
> To: antlr-interest@yahoogroups.com
> Subject: [antlr-interest] Runtime-only JAR?
> 
> 
> Hi,
> 
> In ANTLR versions prior to 2.7.2 there were seperate JAR files, 
> antlr.jar and antlrall.jar. antlr.jar had the runtime library and 
> antlrall.jar had the runtime library plus everything else. As of 2.7.2, 
> antlr.jar now contains everything (i.e. it is the equivalent of 
> antlrall.jar) and there is no seperate runtime library JAR.
> 
> I think that the seperate runtime library JAR was very useful because of 
> its small size. It is only 1/6th the size of antlrall.jar:
> 
>                  combined      runtime-only
>    compressed    360K          60K
>    uncompressed  685K          108K
> 
> With web-deployed applications (applets, web start applications, 
> NetBeans Autoupdate, etc.), the JAR file size is important. So, I would 
> like to see the runtime-only JAR file added back to the ANTLR build 
> system. Actually, for the applications I have it would be best if there 
> were two JAR's, one for the runtime lib and one that had everything 
> except the runtime lib.
> 
> Does this sound like a reasonable change?
> 
> Thanks,
> Brian
> 
> 
> 
>  
> 
> Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 
> 
> 
>  
> 
> Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 
> 



 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From fedot at stockworm.com  Thu Mar 20 13:58:30 2003
From: fedot at stockworm.com (fedot)
Date: Mon Dec 20 16:15:28 2004
Subject: [antlr-interest] Re: how do i generate an error if input is not fully consumed
In-Reply-To: <3E78D062.6010404@uiowa.edu>
Message-ID: <b5ddi6+71sb@eGroups.com>

Brian,

Thank you for the tip. I really should have thought about it myself, 
since most ANTLR examples include an EOF at the end of start rules.

By the way, I also had to add {options defaultErrorHandler = 
false; } to my Parser, otherwise errors where simply echoed to 
System.out, without giving me an opportunity to do anything about it.

--- In antlr-interest@yahoogroups.com, Brian Smith <brian-l-
smith@u...> wrote:
> I have been tripped up by this before. From memory, I believe that 
you 
> just need to make sure your start rules explicitly end with EOF. 
You 
> probably have a start rule that looks like this:
> 
> myRule: A B C;
> 
> Change it to:
> 
> myRule: A B C EOF;
> 
> Then, myRule will only be matched if nothing follows it.
> 
> - Brian
> 
> 
> 
> fedot wrote:
> > I have the following java code (approximately) to go with some 
> > simple calculator grammar:
> > 
> > MyLexer lexer = new MyLexer(new StringReader(string));
> > MyParser parser = new MyParser(lexer);
> > parser.start(); // start variable
> > System.out.println(parser.getAST().toStringList());
> > 
> > If input string is such that only beginning of it matches lexer 
and 
> > parser rules, an AST is properly constructed for the beginning 
of 
> > the string and the remainder is silently ignored.
> > 
> > I need to detect such a state (syntactically invalid input 
remaining 
> > unconsumed) and "raise an error flag". What are my options?
> > 
> > Thank you in advance!
> > 
> > 
> >  
> > 
> > Your use of Yahoo! Groups is subject to 
http://docs.yahoo.com/info/terms/ 
> >


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From open.zone at virgin.net  Thu Mar 20 19:12:13 2003
From: open.zone at virgin.net (micheal_jor)
Date: Mon Dec 20 16:15:28 2004
Subject: [antlr-interest] Does ANTLR *need* ASTNull?
Message-ID: <b5dvud+70bk@eGroups.com>

Hi,

I have run into an issue with ASTNULL and hetero-ASTs using Java as 
the target language (IIRC C# doesn't have ASTNULL and it isn't an 
issue with C++).

Specifically, there are a few situations where ASTNULL is assigned as 
the value of a vriable then, an attempt is made to cast that variable 
whose value is ASTNULL to an hetero-AST class ==> classCastException! 

Why does ANTLR-Java need ASTNULL?. 
Why isn't just "null" simply used as in ANTLR-C#?

Michael



 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From open.zone at virgin.net  Thu Mar 20 20:26:03 2003
From: open.zone at virgin.net (micheal_jor)
Date: Mon Dec 20 16:15:28 2004
Subject: [antlr-interest] Re: Does ANTLR *need* ASTNull?
In-Reply-To: <b5dvud+70bk@eGroups.com>
Message-ID: <b5e48r+51b7@eGroups.com>

> Hi,
> 
> I have run into an issue with ASTNULL and hetero-ASTs using Java as 
> the target language (IIRC C# doesn't have ASTNULL and it isn't an 
> issue with C++).

My comments about C# is inaccurate - it does have ASTNULL and hence 
the same problem. 

In my limited analysis, ASTNULL seems to be used as a performance 
optimization essentially. I guess my focus is now on ideas for 
ensuring ASTNULL plays nice with hetero-AST usage.

Is anyone mixing TreeParsers and hetero-ASTs?. Any issues?.

> Specifically, there are a few situations where ASTNULL is assigned 
as 
> the value of a vriable then, an attempt is made to cast that 
variable 
> whose value is ASTNULL to an hetero-AST class ==> 
classCastException! 
> 
> Why does ANTLR-Java need ASTNULL?. 
> Why isn't just "null" simply used as in ANTLR-C#?

The last question is misleading, ASTNULL is used in ANTL-C# too.

This issue only arises with TreeParsers incidentally and I've 
inherited a few I could do without ;-)

Cheers,

Michael



 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From brian-l-smith at uiowa.edu  Thu Mar 20 22:40:08 2003
From: brian-l-smith at uiowa.edu (Brian Smith)
Date: Mon Dec 20 16:15:28 2004
Subject: [antlr-interest] Bounded Left Recursion
Message-ID: <3E7AB3C8.30600@uiowa.edu>

Hi, I have a grammar like the one below. Basically, I am trying to use 
semantic predicates to handle precedence of infix operators. I can see 
that ANTLR is unhappy with the left recursion in infixExpCS. I know that 
_unconstrained_ left recursion is not allowed in LL grammars because it 
results in infinite recursion. However, in this example, the recursion 
will never go more than seven levels deep. So, is there any way to get 
this trick to work? It is actualy adapted from a very old posting that 
Terence made on comp.compilers on the topic of implementing predecence 
rules via predicates. Perhaps, I am not using the predicate feature 
correctly?

Terence's posting (from 1994): http://makeashorterlink.com/?X330167E3

I would also like to read the paper cited as [MiF79]. Does anybody know 
what paper he is referring to?

Thanks,
Brian

class simple extends Parser;

infixExpCS[int level]
                 :   {level==7}? prefixExpCS
                 |   infixExpCS[level+1]
                     (infixOperator[level]
                     infixExpCS[level])?
                 ;

infixOperator[int level]
                 : {level==1}? (IMPLIES)
                 | {level==2}? (AND    | OR | XOR)
                 | {level==3}? (EQUALS | NOT_EQUALS)
                 | {level==4}? (LESS_THAN | LESS_EQUAL
                               |GREATER_THAN | GREATER_EQUAL)
                 | {level==5}? (PLUS|MINUS)
                 | {level==6}? (STAR | SLASH)
                 ;

prefixExpCS:    NOT prefixExpCS
             |   INTEGER_LITERAL
             ;


[antlr] 5:21: infinite recursion to rule infixExpCS from rule infixExpCS
[antlr] 5:21: infinite recursion to rule infixExpCS from rule infixExpCS
[antlr] 5:41: warning: nondeterminism upon
[antlr] 5:41: k==1:IMPLIES,AND,OR,XOR,EQUALS,NOT_EQUALS,
                    LESS_THAN,LESS_EQUAL,GREATER_THAN,GREATER_EQUAL,
                    PLUS,MINUS,STAR,SLASH
[antlr] 5:41: between alts 1 and 2 of block
[antlr] Exiting due to errors.





 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From pete.forman at westerngeco.com  Fri Mar 21 01:17:24 2003
From: pete.forman at westerngeco.com (Pete Forman)
Date: Mon Dec 20 16:15:28 2004
Subject: [antlr-interest] Runtime-only JAR?
In-Reply-To: <3E7A13AD.7070006@uiowa.edu>
Message-ID: <5.1.1.1.2.20030321091111.022662b0@wgmail2.gatwick.eur.slb.com>

At 2003-03-20 13:17 -0600, Brian Smith wrote:
>In ANTLR versions prior to 2.7.2 there were seperate JAR files,
>antlr.jar and antlrall.jar. antlr.jar had the runtime library and
>antlrall.jar had the runtime library plus everything else. As of 2.7.2,
>antlr.jar now contains everything (i.e. it is the equivalent of
>antlrall.jar) and there is no seperate runtime library JAR.

I would like to see the two jars but think that they should be
renamed the other way round.

   antlr.jar - Has everything as in 2.7.2, was antlrall in 2.7.1
   antlrrun.jar - Runtime only, was called antlr in 2.7.1


-- 
Pete Forman                -./\.-  Disclaimer: This post is originated
WesternGeco                  -./\.-   by myself and does not represent
pete.forman@westerngeco.com    -./\.-   opinion of Schlumberger, Baker
http://petef.port5.com           -./\.-   Hughes or their divisions.


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From klaren at cs.utwente.nl  Fri Mar 21 04:53:38 2003
From: klaren at cs.utwente.nl (Ric Klaren)
Date: Mon Dec 20 16:15:28 2004
Subject: [antlr-interest] c++ libantlr: panic()
In-Reply-To: <000701c2ee6b$b96572a0$0101a8c0@athlon900>; from rbencina@iprimus.com.au on Thu, Mar 20, 2003 at 10:02:39AM +1100
References: <000701c2ee6b$b96572a0$0101a8c0@athlon900>
Message-ID: <20030321135338.I5251@cs.utwente.nl>

Hi,

On Thu, Mar 20, 2003 at 10:02:39AM +1100, Ross Bencina wrote:
> There may be an issue with panic() though:
...
> So panic() is currently declared as static in two of three base classes. One
> of these says "can be overridden in subclass" which is not possible for a
> non-virtual function.
>
> May I suggest that panic be changed to a virtual function as follows in all
> three classes?
..
> When exactly does panic() get called? It doesn't seem to be mentioned in the
> parsers and lexers that I've generated. I assume that if panic() is called,
> it's safe to throw an exception to escape from the parser, and delete the
> parser, rather than being forced to exit() - which is often undesirable.

I think panic is carry over from the Java version, in the java version it
is used inside makeToken of the CharScanner (in case instantiation fails).
In C++ mode it is never called from the support code nor from the generated
code. Basically I could remove them. For now I'll implement your
suggestion. Thanks for noting this.

Cheers,

Ric
--
-----+++++*****************************************************+++++++++-------
    ---- Ric Klaren ----- j.klaren@utwente.nl ----- +31 53 4893722  ----
-----+++++*****************************************************+++++++++-------
     "Evil will always triumph, because Good is dumb." ---  Spaceballs


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From rbencina at iprimus.com.au  Fri Mar 21 05:37:03 2003
From: rbencina at iprimus.com.au (Ross Bencina)
Date: Mon Dec 20 16:15:28 2004
Subject: [antlr-interest] c++ libantlr: panic()
References: <000701c2ee6b$b96572a0$0101a8c0@athlon900> <20030321135338.I5251@cs.utwente.nl>
Message-ID: <006d01c2efae$f5b0d530$0101a8c0@athlon900>

Hi Ric

"Ric Klaren" <klaren@cs.utwente.nl> wrote:
> I think panic is carry over from the Java version, in the java version it
> is used inside makeToken of the CharScanner (in case instantiation fails).
> In C++ mode it is never called from the support code nor from the
generated
> code. Basically I could remove them. For now I'll implement your
> suggestion. Thanks for noting this.

Thanks for explaining the situation.

I for one would be happy if you choose to remove the panic() functions
completely (or at least mark them as deprecated) if they are not used by any
of the library or generated code - a function that calls exit(), even if it
can be overridden, seems quite extreme to me. Allowing the client to
override it and implement an alternative panic mechanism is fine if panic()
is required, but creates unnecessary work and complexity if panic() is never
going to be called. The only way to ensure that panic() is never called in
the future is to remove it.

Best wishes,

Ross.


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From parrt at jguru.com  Fri Mar 21 05:55:28 2003
From: parrt at jguru.com (Terence Parr)
Date: Mon Dec 20 16:15:28 2004
Subject: [antlr-interest] Back from Paris/Provence, slightly drunk and tan
In-Reply-To: <170826586F3BD511910D0200C110AAA805402230@memail03.bco-home.com>
Message-ID: <C5B087E8-5BA4-11D7-8E78-000393BB647E@jguru.com>


On Tuesday, March 18, 2003, at 01:26  PM, mzukowski@yci.com wrote:

> Yes, I fully agree.  Laziness was a poor choice of words.  Ter's much 
> more
> active now that he's teaching.  The future looks brighter than ever for
> antlr.

Just back from Paris last night...can't sleep. :)  Hello to one and 
all.  Good trip with visions of finishing the new ANTLR web site (fully 
interactive thingie), full LL(k), sem pred hoisting, and a cool idea 
for tracking down ambiguous lookahead sequences.  I must admit though 
that the visions were a bit blurry from French wine. <snicker>.

Hmm....I think that the new antlr web site could provide a service 
that, given a grammar, could answer questions about it like "how the 
hell can my grammar be ambiguous at this point for input ID SEMICOLON?" 
  That service would incorporate the new lookahead analysis and such 
which I'd fold back into ANTLR.  I must converse with el jeffe Loring 
Craymer to discuss internal data structures for antlr; he's just made a 
foray into that DeepAndScaryJungleOfNoReturn_HereBeDragons.java stuff ;)

Anyway, gotta keep rolling with my ANTLR lectures at USF and finish up 
another website I'm building for jGuru (should be out really soon 
now...you'll dig it).  I hope to start tackling more real problems soon.

The lectures at USF should start to get more interesting now [for you 
more advanced folks].  I see that there have been about 1500 .mp3 
lecture audio downloads so far this semester.  Not too bad I guess.

In case anybody is wondering, there were 4733 downloads of ANTLR, 
"download/antlr-.*.zip" or "download/antlr-.*.gz", in January 2003.  
Not a bad haul.  That has been consistent since I started paying 
attention last summer.  Extrapolating, one can imagine 50,000 downloads 
a year or so.  Who knows how many unique users that is.  Won't be able 
to track that until new site comes up (don't worry--no registration 
will be required!).  I think extrapolating further a little let's us 
all imagine that ANTLR dominates the java parser generator space.

At least...that's what my mother tells all her friends <wink>.

Ter
--
Co-founder, http://www.jguru.com
Creator, ANTLR Parser Generator: http://www.antlr.org
Lecturer in Comp. Sci., University of San Francisco


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From mzukowski at yci.com  Fri Mar 21 08:16:05 2003
From: mzukowski at yci.com (mzukowski@yci.com)
Date: Mon Dec 20 16:15:28 2004
Subject: [antlr-interest] Bounded Left Recursion
Message-ID: <170826586F3BD511910D0200C110AAA80540224C@memail03.bco-home.com>

Very interesting post.  Two main problems:

1. PCCTS hoisted those sem preds.  ANTLR doesn't.  So if you have 1+2, after
you match the 1, as you enter infixOperator[6] it will fail.  In PCCTS it
would not have even been entered because the predicates would have been
hoisted into the ()? subrule and level==6 & LA(1)==PLUS would have failed.
ANTLR doesn't know about the level when deciding when to enter
infixOperator[level], so it will call it for level==6 and it will fail
because it will try to match STAR | SLASH.

2. It is infinite recursion there, and antlr's analysis won't allow it.
You're stuck with that one, I think.

I agree it would be nice to have such a compact representation of expression
rules.  I can't think of an easy way to do that in antlr currently, and it's
really not too difficult to do it the standard LL way.

Monty

-----Original Message-----
From: Brian Smith [mailto:brian-l-smith@uiowa.edu]
Sent: Thursday, March 20, 2003 10:40 PM
To: antlr-interest@yahoogroups.com
Subject: [antlr-interest] Bounded Left Recursion


Hi, I have a grammar like the one below. Basically, I am trying to use 
semantic predicates to handle precedence of infix operators. I can see 
that ANTLR is unhappy with the left recursion in infixExpCS. I know that 
_unconstrained_ left recursion is not allowed in LL grammars because it 
results in infinite recursion. However, in this example, the recursion 
will never go more than seven levels deep. So, is there any way to get 
this trick to work? It is actualy adapted from a very old posting that 
Terence made on comp.compilers on the topic of implementing predecence 
rules via predicates. Perhaps, I am not using the predicate feature 
correctly?

Terence's posting (from 1994): http://makeashorterlink.com/?X330167E3

I would also like to read the paper cited as [MiF79]. Does anybody know 
what paper he is referring to?

Thanks,
Brian

class simple extends Parser;

infixExpCS[int level]
                 :   {level==7}? prefixExpCS
                 |   infixExpCS[level+1]
                     (infixOperator[level]
                     infixExpCS[level])?
                 ;

infixOperator[int level]
                 : {level==1}? (IMPLIES)
                 | {level==2}? (AND    | OR | XOR)
                 | {level==3}? (EQUALS | NOT_EQUALS)
                 | {level==4}? (LESS_THAN | LESS_EQUAL
                               |GREATER_THAN | GREATER_EQUAL)
                 | {level==5}? (PLUS|MINUS)
                 | {level==6}? (STAR | SLASH)
                 ;

prefixExpCS:    NOT prefixExpCS
             |   INTEGER_LITERAL
             ;


[antlr] 5:21: infinite recursion to rule infixExpCS from rule infixExpCS
[antlr] 5:21: infinite recursion to rule infixExpCS from rule infixExpCS
[antlr] 5:41: warning: nondeterminism upon
[antlr] 5:41: k==1:IMPLIES,AND,OR,XOR,EQUALS,NOT_EQUALS,
                    LESS_THAN,LESS_EQUAL,GREATER_THAN,GREATER_EQUAL,
                    PLUS,MINUS,STAR,SLASH
[antlr] 5:41: between alts 1 and 2 of block
[antlr] Exiting due to errors.





 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From Anthony.Youngman at ECA-International.com  Fri Mar 21 08:27:16 2003
From: Anthony.Youngman at ECA-International.com (Anthony W. Youngman)
Date: Mon Dec 20 16:15:28 2004
Subject: [antlr-interest] Newbie prob - nondeterminism :-(
Message-ID: <0EF9DEABA42FE547BAE43D0298F146B23DD599@ESP.eca-international.local>

Skipped content of type multipart/alternative
From mzukowski at yci.com  Fri Mar 21 08:37:17 2003
From: mzukowski at yci.com (mzukowski@yci.com)
Date: Mon Dec 20 16:15:28 2004
Subject: [antlr-interest] Newbie prob - nondeterminism :-(
Message-ID: <170826586F3BD511910D0200C110AAA80540224E@memail03.bco-home.com>

You have statement allowed to match nothing at all:

statement : ( loopst | inputst | printst | exitst | ifst )* (nl)* ; 

Then you have a list of these:

statement_list : ( ( statement )* ) ; 

Having a closure over epsilon leads you to an infinite loop.

Perhaps statement should be:

statement : ( loopst | inputst | printst | exitst | ifst )+ (nl)* ;

Monty

 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From cow_jumped_moon at hotmail.com  Fri Mar 21 08:49:48 2003
From: cow_jumped_moon at hotmail.com (queengiraffe)
Date: Mon Dec 20 16:15:28 2004
Subject: [antlr-interest] Creation of  a AST for my grammar
Message-ID: <b5ffrc+r1be@eGroups.com>

Hiya, I'm really new to ANTLR, in fact I'm really new to any type of 
compiler design. I'm trying to create the front end of a compiler for 
my own langauge, so far I have:



options {
	language="Cpp";
}
//////////////////////////////////////////////////////////////
class CompilerParser extends Parser;
options {
	buildAST = true;	// uses CommonAST by default
	k=2;				//lookahead =2.
}

block	:BEGIN (statement)+	END
	;

statement	:arthExpr SEMI
			|block
	;

arthExpr	:(term EQUALS)? plusExpr
	;

plusExpr	:divExpr((PLUS divExpr)|(MINUS divExpr))*
	;
	
divExpr		:atom((STAR atom)|(BSLASH atom))*
	;

atom	:term	
		|LPAREN plusExpr RPAREN
	;

term	:ID
		|INT
	 ; 
/////////////////////////////////////////////////////////////////
//---------------------------------------------------------------
// The scanner
//---------------------------------------------------------------
/////////////////////////////////////////////////////////////////
class CompilerLexer extends Lexer;
options {
	k=2;				//lookahead =2.
}

// ------------
// keywords
// ------------
tokens {
		BEGIN = "begin" ;
		END = "end" ; 
} 

// Whitespace -- ignored
WS	:	(' '
	|	'\t'
	|	'\n'
	|	'\r')
		{ _ttype = ANTLR_USE_NAMESPACE(antlr)Token::SKIP; }

	;
// Single-line comments
SL_COMMENT
	:	"//"
		(~('\n'|'\r'))* ('\n'|'\r'('\n')?)
		{$setType(ANTLR_USE_NAMESPACE(antlr)Token::SKIP); 
newline();}
	;

// ----------------
// operators
// ----------------  

LPAREN:	'('
	;

RPAREN:	')'
	;

STAR:	'*'
	;
	
BSLASH:	'/'
	;
	
MINUS:	'-'
	;

PLUS:	'+'
	;

SEMI:	';'
	;

EQUALS:	'='
	;

protected
DIGIT:	'0'..'9'
	;	
protected
LETTER:	'a'..'z'
	;
protected
CAPLET: 'A'..'Z'
	;
	
	
ID	:	(LETTER|CAPLET)(LETTER|CAPLET|DIGIT)*
	;

INT	:	(DIGIT)+
	;


The question I have is how do I create a AST for this grammar.

Great thanks in advance to any one that can help or point me to some 
(simple) documentation/site that may be helpful.

Regards
A very confused newbie


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From abreneliere at telys.com  Fri Mar 21 08:58:50 2003
From: abreneliere at telys.com (=?iso-8859-1?Q?Anthony_Breneli=E8re?=)
Date: Mon Dec 20 16:15:28 2004
Subject: [antlr-interest] bug report about charscanner::setcolumn !?
Message-ID: <000201c2efcb$25950d40$cb646464@lavaserver>

If not already detected (I did not find anything in the archives
concerning that bug), 
 
in the CharScanner class, i have those method names:
 
/// Get the column the scanner currently is in (starts at 1)
      virtual int getColumn() const
      {
            return inputState->column;
      }
      /// set the column number
      virtual void getColumn(int c)
      {
            inputState->column = c;
      }
 

 with getColumn instead of setComlumn
 
Cordially,
Anthony
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20030321/38e53119/attachment.html
From gudnabrsam at yahoo.com  Fri Mar 21 09:02:07 2003
From: gudnabrsam at yahoo.com (Matt Benson)
Date: Mon Dec 20 16:15:28 2004
Subject: [antlr-interest] Creation of  a AST for my grammar
In-Reply-To: <b5ffrc+r1be@eGroups.com>
Message-ID: <20030321170207.8532.qmail@web20422.mail.yahoo.com>

You're in luck!  Terence Parr, creator of Antlr, is
currently teaching a course on Programming Languages,
I believe at USF (wherever that is :)  ).  In the
interest of the community at large, Ter is making his
lectures, reading material, and assignments for the
course available on the web.  The site is
http://www.cs.usfca.edu/~parrt/course/652/index.html
and has helped my understanding of ANTLR and general
language processing immensely.

-Matt

--- queengiraffe <cow_jumped_moon@hotmail.com> wrote:
> Hiya, I'm really new to ANTLR, in fact I'm really
> new to any type of 
> compiler design. I'm trying to create the front end
> of a compiler for 
> my own langauge, so far I have:
> 
> 
> 
> options {
> 	language="Cpp";
> }
>
//////////////////////////////////////////////////////////////
> class CompilerParser extends Parser;
> options {
> 	buildAST = true;	// uses CommonAST by default
> 	k=2;				//lookahead =2.
> }
> 
> block	:BEGIN (statement)+	END
> 	;
> 
> statement	:arthExpr SEMI
> 			|block
> 	;
> 
> arthExpr	:(term EQUALS)? plusExpr
> 	;
> 
> plusExpr	:divExpr((PLUS divExpr)|(MINUS divExpr))*
> 	;
> 	
> divExpr		:atom((STAR atom)|(BSLASH atom))*
> 	;
> 
> atom	:term	
> 		|LPAREN plusExpr RPAREN
> 	;
> 
> term	:ID
> 		|INT
> 	 ; 
>
/////////////////////////////////////////////////////////////////
>
//---------------------------------------------------------------
> // The scanner
>
//---------------------------------------------------------------
>
/////////////////////////////////////////////////////////////////
> class CompilerLexer extends Lexer;
> options {
> 	k=2;				//lookahead =2.
> }
> 
> // ------------
> // keywords
> // ------------
> tokens {
> 		BEGIN = "begin" ;
> 		END = "end" ; 
> } 
> 
> // Whitespace -- ignored
> WS	:	(' '
> 	|	'\t'
> 	|	'\n'
> 	|	'\r')
> 		{ _ttype = ANTLR_USE_NAMESPACE(antlr)Token::SKIP;
> }
> 
> 	;
> // Single-line comments
> SL_COMMENT
> 	:	"//"
> 		(~('\n'|'\r'))* ('\n'|'\r'('\n')?)
> 		{$setType(ANTLR_USE_NAMESPACE(antlr)Token::SKIP); 
> newline();}
> 	;
> 
> // ----------------
> // operators
> // ----------------  
> 
> LPAREN:	'('
> 	;
> 
> RPAREN:	')'
> 	;
> 
> STAR:	'*'
> 	;
> 	
> BSLASH:	'/'
> 	;
> 	
> MINUS:	'-'
> 	;
> 
> PLUS:	'+'
> 	;
> 
> SEMI:	';'
> 	;
> 
> EQUALS:	'='
> 	;
> 
> protected
> DIGIT:	'0'..'9'
> 	;	
> protected
> LETTER:	'a'..'z'
> 	;
> protected
> CAPLET: 'A'..'Z'
> 	;
> 	
> 	
> ID	:	(LETTER|CAPLET)(LETTER|CAPLET|DIGIT)*
> 	;
> 
> INT	:	(DIGIT)+
> 	;
> 
> 
> The question I have is how do I create a AST for
> this grammar.
> 
> Great thanks in advance to any one that can help or
> point me to some 
> (simple) documentation/site that may be helpful.
> 
> Regards
> A very confused newbie
> 
> 
>  
> 
> Your use of Yahoo! Groups is subject to
> http://docs.yahoo.com/info/terms/ 
> 
> 


__________________________________________________
Do you Yahoo!?
Yahoo! Platinum - Watch CBS' NCAA March Madness, live on your desktop!
http://platinum.yahoo.com

 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From lgc at mail1.jpl.nasa.gov  Fri Mar 21 11:33:26 2003
From: lgc at mail1.jpl.nasa.gov (lgcraymer)
Date: Mon Dec 20 16:15:28 2004
Subject: [antlr-interest] Re: Bounded Left Recursion
In-Reply-To: <170826586F3BD511910D0200C110AAA80540224C@memail03.bco-home.com>
Message-ID: <b5fpe6+io07@eGroups.com>

Brian--

I would suggest taking a look at some of the ANTLR example grammars, 
particularly the one for the exprAST example and java.g (or Monty's C 
grammar).  ANTLR handles operator precedence in the same way that you 
probably learned it (at least, it's the way I learned it)--additive 
expressions operate on atomic numbers, multiplicative expressions, or 
parenthesized expressions; multiplicative expressions operate on 
atomic numbers or parenthesized expressions, and so on.

The biggest problem with using semantic predicates (besides the the 
ones you have already encountered) to try to shortcut the 
identification process is that you then have to jump through hoops to 
structure your abstract syntax trees.

--Loring


--- In antlr-interest@yahoogroups.com, mzukowski@y... wrote:
> Very interesting post.  Two main problems:
> 
> 1. PCCTS hoisted those sem preds.  ANTLR doesn't.  So if you have 
1+2, after
> you match the 1, as you enter infixOperator[6] it will fail.  In 
PCCTS it
> would not have even been entered because the predicates would have 
been
> hoisted into the ()? subrule and level==6 & LA(1)==PLUS would have 
failed.
> ANTLR doesn't know about the level when deciding when to enter
> infixOperator[level], so it will call it for level==6 and it will 
fail
> because it will try to match STAR | SLASH.
> 
> 2. It is infinite recursion there, and antlr's analysis won't allow 
it.
> You're stuck with that one, I think.
> 
> I agree it would be nice to have such a compact representation of 
expression
> rules.  I can't think of an easy way to do that in antlr currently, 
and it's
> really not too difficult to do it the standard LL way.
> 
> Monty
> 
> -----Original Message-----
> From: Brian Smith [mailto:brian-l-smith@u...]
> Sent: Thursday, March 20, 2003 10:40 PM
> To: antlr-interest@yahoogroups.com
> Subject: [antlr-interest] Bounded Left Recursion
> 
> 
> Hi, I have a grammar like the one below. Basically, I am trying to 
use 
> semantic predicates to handle precedence of infix operators. I can 
see 
> that ANTLR is unhappy with the left recursion in infixExpCS. I know 
that 
> _unconstrained_ left recursion is not allowed in LL grammars because 
it 
> results in infinite recursion. However, in this example, the 
recursion 
> will never go more than seven levels deep. So, is there any way to 
get 
> this trick to work? It is actualy adapted from a very old posting 
that 
> Terence made on comp.compilers on the topic of implementing 
predecence 
> rules via predicates. Perhaps, I am not using the predicate feature 
> correctly?
> 
> Terence's posting (from 1994): 
http://makeashorterlink.com/?X330167E3
> 
> I would also like to read the paper cited as [MiF79]. Does anybody 
know 
> what paper he is referring to?
> 
> Thanks,
> Brian
> 
> class simple extends Parser;
> 
> infixExpCS[int level]
>                  :   {level==7}? prefixExpCS
>                  |   infixExpCS[level+1]
>                      (infixOperator[level]
>                      infixExpCS[level])?
>                  ;
> 
> infixOperator[int level]
>                  : {level==1}? (IMPLIES)
>                  | {level==2}? (AND    | OR | XOR)
>                  | {level==3}? (EQUALS | NOT_EQUALS)
>                  | {level==4}? (LESS_THAN | LESS_EQUAL
>                                |GREATER_THAN | GREATER_EQUAL)
>                  | {level==5}? (PLUS|MINUS)
>                  | {level==6}? (STAR | SLASH)
>                  ;
> 
> prefixExpCS:    NOT prefixExpCS
>              |   INTEGER_LITERAL
>              ;
> 
> 
> [antlr] 5:21: infinite recursion to rule infixExpCS from rule 
infixExpCS
> [antlr] 5:21: infinite recursion to rule infixExpCS from rule 
infixExpCS
> [antlr] 5:41: warning: nondeterminism upon
> [antlr] 5:41: k==1:IMPLIES,AND,OR,XOR,EQUALS,NOT_EQUALS,
>                     LESS_THAN,LESS_EQUAL,GREATER_THAN,GREATER_EQUAL,
>                     PLUS,MINUS,STAR,SLASH
> [antlr] 5:41: between alts 1 and 2 of block
> [antlr] Exiting due to errors.
> 
> 
> 
> 
> 
>  
> 
> Your use of Yahoo! Groups is subject to 
http://docs.yahoo.com/info/terms/


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From brian-l-smith at uiowa.edu  Fri Mar 21 14:35:01 2003
From: brian-l-smith at uiowa.edu (Brian Smith)
Date: Mon Dec 20 16:15:28 2004
Subject: [antlr-interest] Re: Bounded Left Recursion
In-Reply-To: <b5fpe6+io07@eGroups.com>
References: <b5fpe6+io07@eGroups.com>
Message-ID: <3E7B9395.5070706@uiowa.edu>

I will reply to both of you at once:

lgcraymer wrote:
> Brian--
> 
> I would suggest taking a look at some of the ANTLR example grammars, 
> particularly the one for the exprAST example and java.g (or Monty's C 
> grammar).  ANTLR handles operator precedence in the same way that you 

Thanks. I already know this standard way of doings things. I was just 
tired of seeing dozens of lines of (essentially) the same rule repeated. 
Since I do not use ANTLR's AST's representation, I also have to to 
duplicate the embedded code that constructs my AST.

> --- In antlr-interest@yahoogroups.com, mzukowski@y... wrote:
>>Very interesting post.  Two main problems:
>>1. PCCTS hoisted those sem preds.  ANTLR doesn't.  So if you have 

Ah, I see what is meant now by hoisted semantic predicates. Of course 
this technique cannot work without that

>>2. It is infinite recursion there, and antlr's analysis won't allow 
>>You're stuck with that one, I think.

I'm not sure what you meant by this.

>>I agree it would be nice to have such a compact representation of 
> expression rules.  I can't think of an easy way to do that in antlr
 > currently, and it's really not too difficult
 > to do it the standard LL way.

How about supporting two-level grammars (i.e. grammars with 
meta-rules/templates)? For example, you could define a rule like this:

// meta-rule
infix<ops, nextLevel>
        :: nextLevel (^ops infix<ops, nextLevel>)?
        ;

and then use it like this:

expression:
	infix<IMPLIES,
               infix<(AND|OR|XOR),
                     infix<(EQUALS|NOT_EQUALS),
                           infix<(LT|LE|GT|GE),
                                 infix<(PLUS|MINUS),
                                       infix<STAR|SLASH,
                                             prefix<NOT, INTEGER>
                                      >
                                >
                          >
                    >
              >

prefixExp<ops, nextLevel>: OPS prefixExp<ops, nextLevel>
                          | nextLevel
                          ;

Maybe, you want to convert this grammar to construct AST's for binary 
expressions with a different shape. Then you could do it by changing one 
line in the grammar:

   infit<ops, nextLevel>
-	:: nextLevel (^ops infix<ops, nextLevel>)?
+ 	:: nextLevel (^ops nextLevel)*
         ;

Just a thought...

Regards,
Brian



 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From gudnabrsam at yahoo.com  Fri Mar 21 14:56:32 2003
From: gudnabrsam at yahoo.com (Matt Benson)
Date: Mon Dec 20 16:15:28 2004
Subject: [antlr-interest] grammar question
Message-ID: <20030321225632.83704.qmail@web20421.mail.yahoo.com>

If I have a rule that wants one of each of three
subrules matched, is there any shorthand to require
this without imposing order?  The following would be
the long version, I suppose:

top
  : a b c
  | b c a
  | c a b
  | c b a
  | a c b
  | b a c
  ;

-Matt

__________________________________________________
Do you Yahoo!?
Yahoo! Platinum - Watch CBS' NCAA March Madness, live on your desktop!
http://platinum.yahoo.com

 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From mzukowski at yci.com  Fri Mar 21 15:12:10 2003
From: mzukowski at yci.com (mzukowski@yci.com)
Date: Mon Dec 20 16:15:28 2004
Subject: [antlr-interest] grammar question
Message-ID: <170826586F3BD511910D0200C110AAA805402251@memail03.bco-home.com>

Use (a | b | c)+ and then write an action that checks to make sure that you
have exactly one of each.  There is no real "antlr" way of doing this.

Monty

-----Original Message-----
From: Matt Benson [mailto:gudnabrsam@yahoo.com]
Sent: Friday, March 21, 2003 2:57 PM
To: Antlr List
Subject: [antlr-interest] grammar question


If I have a rule that wants one of each of three
subrules matched, is there any shorthand to require
this without imposing order?  The following would be
the long version, I suppose:

top
  : a b c
  | b c a
  | c a b
  | c b a
  | a c b
  | b a c
  ;

-Matt

__________________________________________________
Do you Yahoo!?
Yahoo! Platinum - Watch CBS' NCAA March Madness, live on your desktop!
http://platinum.yahoo.com

 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From mzukowski at yci.com  Fri Mar 21 15:15:23 2003
From: mzukowski at yci.com (mzukowski@yci.com)
Date: Mon Dec 20 16:15:28 2004
Subject: [antlr-interest] Re: Bounded Left Recursion
Message-ID: <170826586F3BD511910D0200C110AAA805402252@memail03.bco-home.com>

What I meant is that, just like you said originally, antlr has no notion
that the recursion will ever stop.  So you're stuck unless you modify
antlr's analysis phase.

>>2. It is infinite recursion there, and antlr's analysis won't allow 
>>You're stuck with that one, I think.

>I'm not sure what you meant by this.

Monty

 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From lgc at mail1.jpl.nasa.gov  Fri Mar 21 15:40:35 2003
From: lgc at mail1.jpl.nasa.gov (lgcraymer)
Date: Mon Dec 20 16:15:28 2004
Subject: [antlr-interest] Re: Bounded Left Recursion
In-Reply-To: <3E7B9395.5070706@uiowa.edu>
Message-ID: <b5g7tj+45pd@eGroups.com>

Brian--

The template idea is interesting and might be worth pursuing.

Ter--what do you think?

--Loring



--- In antlr-interest@yahoogroups.com, Brian Smith 
<brian-l-smith@u...> wrote:
> I will reply to both of you at once:
> 
> lgcraymer wrote:
> > Brian--
> > 
> > I would suggest taking a look at some of the ANTLR example 
grammars, 
> > particularly the one for the exprAST example and java.g (or 
Monty's C 
> > grammar).  ANTLR handles operator precedence in the same way that 
you 
> 
> Thanks. I already know this standard way of doings things. I was 
just 
> tired of seeing dozens of lines of (essentially) the same rule 
repeated. 
> Since I do not use ANTLR's AST's representation, I also have to to 
> duplicate the embedded code that constructs my AST.
> 
> > --- In antlr-interest@yahoogroups.com, mzukowski@y... wrote:
> >>Very interesting post.  Two main problems:
> >>1. PCCTS hoisted those sem preds.  ANTLR doesn't.  So if you have 
> 
> Ah, I see what is meant now by hoisted semantic predicates. Of 
course 
> this technique cannot work without that
> 
> >>2. It is infinite recursion there, and antlr's analysis won't 
allow 
> >>You're stuck with that one, I think.
> 
> I'm not sure what you meant by this.
> 
> >>I agree it would be nice to have such a compact representation of 
> > expression rules.  I can't think of an easy way to do that in 
antlr
>  > currently, and it's really not too difficult
>  > to do it the standard LL way.
> 
> How about supporting two-level grammars (i.e. grammars with 
> meta-rules/templates)? For example, you could define a rule like 
this:
> 
> // meta-rule
> infix<ops, nextLevel>
>         :: nextLevel (^ops infix<ops, nextLevel>)?
>         ;
> 
> and then use it like this:
> 
> expression:
> 	infix<IMPLIES,
>                infix<(AND|OR|XOR),
>                      infix<(EQUALS|NOT_EQUALS),
>                            infix<(LT|LE|GT|GE),
>                                  infix<(PLUS|MINUS),
>                                        infix<STAR|SLASH,
>                                              prefix<NOT, INTEGER>
>                                       >
>                                 >
>                           >
>                     >
>               >
> 
> prefixExp<ops, nextLevel>: OPS prefixExp<ops, nextLevel>
>                           | nextLevel
>                           ;
> 
> Maybe, you want to convert this grammar to construct AST's for 
binary 
> expressions with a different shape. Then you could do it by changing 
one 
> line in the grammar:
> 
>    infit<ops, nextLevel>
> -	:: nextLevel (^ops infix<ops, nextLevel>)?
> + 	:: nextLevel (^ops nextLevel)*
>          ;
> 
> Just a thought...
> 
> Regards,
> Brian


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From open.zone at virgin.net  Sat Mar 22 06:50:08 2003
From: open.zone at virgin.net (micheal_jor)
Date: Mon Dec 20 16:15:28 2004
Subject: [antlr-interest] If BaseAST is derived from ASTNullType...? (Re: Does ANTLR *need* ASTNull?)
In-Reply-To: <b5e48r+51b7@eGroups.com>
Message-ID: <b5ht70+297g@eGroups.com>

> > Hi,
> > 
> > I have run into an issue with ASTNULL and hetero-ASTs using Java 
as 
> > the target language (IIRC C# doesn't have ASTNULL and it isn't an 
> > issue with C++).
> 
> My comments about C# is inaccurate - it does have ASTNULL and hence 
> the same problem. 
> 
> In my limited analysis, ASTNULL seems to be used as a performance 
> optimization essentially. I guess my focus is now on ideas for 
> ensuring ASTNULL plays nice with hetero-AST usage.
> 
> Is anyone mixing TreeParsers and hetero-ASTs?. Any issues?.

The basic issue is related to the casting of the cursor variable _t 
of type AST to other variables of hetero-AST types. The problem is 
that this variable sometimes contain the value ASTNULL (of type 
ASTNullType). 

Hetero-ASTs are typically derived from the AST->BaseAST->CommonAST 
lineage which doesn't include ASTNullType. Hence the 
classCastException.

If the lineage is changed to:
AST->ASTNullType->BaseAST->CommonAST

...the problem might go away. Question is, what - if anything - does 
this break?

> > Specifically, there are a few situations where ASTNULL is 
assigned 
> as 
> > the value of a vriable then, an attempt is made to cast that 
> variable 
> > whose value is ASTNULL to an hetero-AST class ==> 
> classCastException! 
> > 
> > Why does ANTLR-Java need ASTNULL?. 

> This issue only arises with TreeParsers incidentally and I've 
> inherited a few I could do without ;-)
 
Cheers,
 
Michael



 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From parrt at jguru.com  Sat Mar 22 07:19:16 2003
From: parrt at jguru.com (Terence Parr)
Date: Mon Dec 20 16:15:28 2004
Subject: [antlr-interest] Re: Bounded Left Recursion
In-Reply-To: <b5g7tj+45pd@eGroups.com>
Message-ID: <A529C236-5C79-11D7-AA69-000393BB647E@jguru.com>


On Friday, March 21, 2003, at 03:40  PM, lgcraymer wrote:

> Brian--
>
> The template idea is interesting and might be worth pursuing.
>
> Ter--what do you think?

Interesting...i'm wondering if we don't want to try some kind of 
precedence parser instead. Perhaps mark a rule (and all others invoked 
from it) as a special rule that gets implemented differently.  I have 
to look back at my precedence parsing notes from 10 years ago to see 
what way would be better.

Yes, i've been annoyed by the cumbersome multi-level grammar for 
expressions for years.  Further, you have like 20 levels to go down 
just to parse "34".  Very inefficient compared to a state-machine based 
approach.  Can we blend the approaches for this particular problem?

Ter

>
> --Loring
>
>
>
> --- In antlr-interest@yahoogroups.com, Brian Smith
> <brian-l-smith@u...> wrote:
>> I will reply to both of you at once:
>>
>> lgcraymer wrote:
>>> Brian--
>>>
>>> I would suggest taking a look at some of the ANTLR example
> grammars,
>>> particularly the one for the exprAST example and java.g (or
> Monty's C
>>> grammar).  ANTLR handles operator precedence in the same way that
> you
>>
>> Thanks. I already know this standard way of doings things. I was
> just
>> tired of seeing dozens of lines of (essentially) the same rule
> repeated.
>> Since I do not use ANTLR's AST's representation, I also have to to
>> duplicate the embedded code that constructs my AST.
>>
>>> --- In antlr-interest@yahoogroups.com, mzukowski@y... wrote:
>>>> Very interesting post.  Two main problems:
>>>> 1. PCCTS hoisted those sem preds.  ANTLR doesn't.  So if you have
>>
>> Ah, I see what is meant now by hoisted semantic predicates. Of
> course
>> this technique cannot work without that
>>
>>>> 2. It is infinite recursion there, and antlr's analysis won't
> allow
>>>> You're stuck with that one, I think.
>>
>> I'm not sure what you meant by this.
>>
>>>> I agree it would be nice to have such a compact representation of
>>> expression rules.  I can't think of an easy way to do that in
> antlr
>>> currently, and it's really not too difficult
>>> to do it the standard LL way.
>>
>> How about supporting two-level grammars (i.e. grammars with
>> meta-rules/templates)? For example, you could define a rule like
> this:
>>
>> // meta-rule
>> infix<ops, nextLevel>
>>         :: nextLevel (^ops infix<ops, nextLevel>)?
>>         ;
>>
>> and then use it like this:
>>
>> expression:
>> 	infix<IMPLIES,
>>                infix<(AND|OR|XOR),
>>                      infix<(EQUALS|NOT_EQUALS),
>>                            infix<(LT|LE|GT|GE),
>>                                  infix<(PLUS|MINUS),
>>                                        infix<STAR|SLASH,
>>                                              prefix<NOT, INTEGER>
>>>
>>>
>>>
>>>
>>>
>>
>> prefixExp<ops, nextLevel>: OPS prefixExp<ops, nextLevel>
>>                           | nextLevel
>>                           ;
>>
>> Maybe, you want to convert this grammar to construct AST's for
> binary
>> expressions with a different shape. Then you could do it by changing
> one
>> line in the grammar:
>>
>>    infit<ops, nextLevel>
>> -	:: nextLevel (^ops infix<ops, nextLevel>)?
>> + 	:: nextLevel (^ops nextLevel)*
>>          ;
>>
>> Just a thought...
>>
>> Regards,
>> Brian
>
>
>
>
> Your use of Yahoo! Groups is subject to 
> http://docs.yahoo.com/info/terms/
>
>
--
Co-founder, http://www.jguru.com
Creator, ANTLR Parser Generator: http://www.antlr.org
Lecturer in Comp. Sci., University of San Francisco


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From j_scandaliaris at yahoo.es  Sat Mar 22 11:42:01 2003
From: j_scandaliaris at yahoo.es (Jorge Scandaliaris)
Date: Mon Dec 20 16:15:28 2004
Subject: [antlr-interest] Help! AST thing is driving me nuts!
Message-ID: <000001c2f0ab$207e7ef0$03001aac@zoys>

Hi,

            Yeah, I am at the point where you start tearing out your
hair! Ok, here it goes. I have built the recognizer and I am now moving
into AST. I turned the option on in the parser and to start I generated
just the linked list (no ^ nor !). Now I want to complicate things up,
but besides ^ and ! operators I would like to use actions to insert
imaginary tokens and change the tree structure. I have not worked with
the treewalker yet, just the parser, but it seems I am missing the
picture big time. Example:

Tokens { IMAG_TOK;}

start_rule:   (rule)+  EOF! {#start_rule=#(#[IMAG_TOK], #start_rule);};

 

This either doesn?t do what I wanted (create an IMAG_TOK node and set it
as root of the tree) or I get fancy compile errors about not being able
to convert 1 parameter from void (void) to antlr::ASTRefCount<class
antlr::AST>. I have tried several changes, but I must be missing
something big.

Last thing, I can?t find anywhere in the doc about the use of ## for
actions (I picked this from some examples) and it does have an effect
over generated code.

I would appreciate some help, especially in directing me towards the
good approach and documentation/examples about this. Thanks,

 

Jorge Scandaliaris

 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20030322/b984e5b9/attachment.html
From rbencina at iprimus.com.au  Sat Mar 22 12:44:57 2003
From: rbencina at iprimus.com.au (Ross Bencina)
Date: Mon Dec 20 16:15:28 2004
Subject: [antlr-interest] Help! AST thing is driving me nuts!
References: <000001c2f0ab$207e7ef0$03001aac@zoys>
Message-ID: <007501c2f0b3$e94f8470$0101a8c0@athlon900>

It's a while since I did this, so i'm just going on code I wrote at the
time, but I think what you want is:

Tokens { IMAG_TOK;}

start_rule!:   a:rules  EOF! {#start_rule=#([IMAG_TOK], #a);};

rules:            (rule)+

Best wishes,

Ross.


----- Original Message -----
From: Jorge Scandaliaris
To: antlr-interest@yahoogroups.com
Sent: Sunday, March 23, 2003 6:42 AM
Subject: [antlr-interest] Help! AST thing is driving me nuts!


Hi,
            Yeah, I am at the point where you start tearing out your hair!
Ok, here it goes. I have built the recognizer and I am now moving into AST.
I turned the option on in the parser and to start I generated just the
linked list (no ^ nor !). Now I want to complicate things up, but besides ^
and ! operators I would like to use actions to insert imaginary tokens and
change the tree structure. I have not worked with the treewalker yet, just
the parser, but it seems I am missing the picture big time. Example:
Tokens { IMAG_TOK;}
start_rule:   (rule)+  EOF! {#start_rule=#(#[IMAG_TOK], #start_rule);};

This either doesn't do what I wanted (create an IMAG_TOK node and set it as
root of the tree) or I get fancy compile errors about not being able to
convert 1 parameter from void (void) to antlr::ASTRefCount<class
antlr::AST>. I have tried several changes, but I must be missing something
big.
Last thing, I can?t find anywhere in the doc about the use of ## for actions
(I picked this from some examples) and it does have an effect over generated
code.
I would appreciate some help, especially in directing me towards the good
approach and documentation/examples about this. Thanks,

Jorge Scandaliaris


Your use of Yahoo! Groups is subject to the Yahoo! Terms of Service.


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From markkant2001 at yahoo.com  Sat Mar 22 14:45:44 2003
From: markkant2001 at yahoo.com (mark kant)
Date: Mon Dec 20 16:15:28 2004
Subject: [antlr-interest] grammar question
In-Reply-To: <20030321225632.83704.qmail@web20421.mail.yahoo.com>
Message-ID: <20030322224544.13106.qmail@web13603.mail.yahoo.com>

Hi,

Can multiple lexers be implemented so that a different
lexer is activated in parser or atleast based on a
rule that matches in parser ?


Thanks

Mark


__________________________________________________
Do you Yahoo!?
Yahoo! Platinum - Watch CBS' NCAA March Madness, live on your desktop!
http://platinum.yahoo.com

 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From j_scandaliaris at yahoo.es  Sat Mar 22 18:17:08 2003
From: j_scandaliaris at yahoo.es (Jorge Scandaliaris)
Date: Mon Dec 20 16:15:28 2004
Subject: [antlr-interest] Help! AST thing is driving me nuts!
In-Reply-To: <007501c2f0b3$e94f8470$0101a8c0@athlon900>
Message-ID: <001201c2f0e2$5284df70$03001aac@zoys>

Thanks. I was actually doing such a silly thing that I am now ashamed. I
had modified the start rule in the grammar but forgot to reflect that in
the main file, and so I could have tried for ages to modify the start
rule and nothing would have happened in the output. 
I still wonder what the ## (instead of just #) does in an AST action. I
have looked at the generated code, but I can't figure it out. 
I guess I move forward now 'till the next bump in the road :)
I would still appreciate if someone can point me to useful info
regarding ASTs (other than antlr's ref. manual or getting started
tutorials).

Jorge

PS: I am not experienced with Antlr, (nor with c++ either to be honest)
so I apologize if my questions seem evident to you.

> -----Mensaje original-----
> De: Ross Bencina [mailto:rbencina@iprimus.com.au]
> Enviado el: s?bado, 22 de marzo de 2003 21:45
> Para: antlr-interest@yahoogroups.com
> Asunto: Re: [antlr-interest] Help! AST thing is driving me nuts!
> 
> It's a while since I did this, so i'm just going on code I wrote at
the
> time, but I think what you want is:
> 
> Tokens { IMAG_TOK;}
> 
> start_rule!:   a:rules  EOF! {#start_rule=#([IMAG_TOK], #a);};
> 
> rules:            (rule)+
> 
> Best wishes,
> 
> Ross.



 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From parrt at jguru.com  Sat Mar 22 21:13:51 2003
From: parrt at jguru.com (Terence Parr)
Date: Mon Dec 20 16:15:28 2004
Subject: [antlr-interest] grammar question
In-Reply-To: <20030322224544.13106.qmail@web13603.mail.yahoo.com>
Message-ID: <3C613F22-5CEE-11D7-AA69-000393BB647E@jguru.com>

Sure...see the javadoc example in distribution (explained in token 
stream section of notes) :)

Terence

On Saturday, March 22, 2003, at 02:45  PM, mark kant wrote:

> Hi,
>
> Can multiple lexers be implemented so that a different
> lexer is activated in parser or atleast based on a
> rule that matches in parser ?
>
>
> Thanks
>
> Mark
>
>
> __________________________________________________
> Do you Yahoo!?
> Yahoo! Platinum - Watch CBS' NCAA March Madness, live on your desktop!
> http://platinum.yahoo.com
>
>
>
> Your use of Yahoo! Groups is subject to 
> http://docs.yahoo.com/info/terms/
>
>
--
Co-founder, http://www.jguru.com
Creator, ANTLR Parser Generator: http://www.antlr.org
Lecturer in Comp. Sci., University of San Francisco


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From guy_wise at yahoo.com  Sun Mar 23 00:39:42 2003
From: guy_wise at yahoo.com (Bernhard Damberger)
Date: Mon Dec 20 16:15:28 2004
Subject: group removal
Message-ID: <20030323083942.36977.qmail@web41612.mail.yahoo.com>

I am having some problems removing my self from the
group list for antlr.

I have tried to remove myself from antlr via yahoo!'s
group management but have been unsuccessful. My email
would be either yahoo@daseign.com or maybe
onelist@daseign.com.

If you could remove any daseign.com emails that would
be great (as daseign.com is my domain).

The header I am getting from antlr-interest is as
follows:

Return-Path:
<sentto-21883-1251-1048200803-onelist=daseign.com@returns.groups.yahoo.com>
Received: from n12.grp.scd.yahoo.com ([66.218.66.67]
verified)
  by livezone.net (CommuniGate Pro SMTP 3.3.2)
  with SMTP id 3258138 for onelist@daseign.com; Thu,
20 Mar 2003 15:06:08 -0800
X-eGroups-Return:
sentto-21883-1251-1048200803-onelist=daseign.com@returns.groups.yahoo.com
Received: from [66.218.67.194] by
n12.grp.scd.yahoo.com with NNFMP; 20 Mar 2003 22:53:23
-0000
MIME-Version: 1.0
Message-ID: <1048200803.519.82487.m12@yahoogroups.com>
Mailing-List: list antlr-interest@yahoogroups.com;
contact antlr-interest-owner@yahoogroups.com
Delivered-To: mailing list
antlr-interest@yahoogroups.com
Precedence: bulk
List-Unsubscribe:
<mailto:antlr-interest-unsubscribe@yahoogroups.com>
Date: 20 Mar 2003 22:53:23 -0000
From: antlr-interest@yahoogroups.com
To: antlr-interest@yahoogroups.com
Subject: [antlr-interest] Digest Number 1251
Reply-To: antlr-interest@yahoogroups.com
Content-Type: text/plain
Content-Transfer-Encoding: 7bit

_bernhard

__________________________________________________
Do you Yahoo!?
Yahoo! Platinum - Watch CBS' NCAA March Madness, live on your desktop!
http://platinum.yahoo.com

From a_rueckert at gmx.net  Sun Mar 23 01:26:29 2003
From: a_rueckert at gmx.net (Andreas Rueckert)
Date: Mon Dec 20 16:15:28 2004
Subject: [antlr-interest] PGN grammar
Message-ID: <03032310295200.00753@hun.bre.de>

Hi!

We are working on a GPLed Java chess app (http://www.java-chess.de) and wrote a
PGN (Portable Game Notation) grammar for Antlr (it does not include all the
optional tags yet, but parses our games already). Just in case anyone is
interested. We'll make another release soon, that will include the latest
version. If you need it now, contact me.

Ciao,
Andreas

 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From rcreekmore_2003 at yahoo.com  Sun Mar 23 08:11:41 2003
From: rcreekmore_2003 at yahoo.com (rcreekmore_2003)
Date: Mon Dec 20 16:15:28 2004
Subject: [antlr-interest] Regular Expression Syntax in ANTLR
Message-ID: <b5kmbt+gn4e@eGroups.com>

Can someone tell me what regular expression syntax ANTLR uses, and 
where I could find some examples?

I am trying to parse fields from a web log file and having some 
difficulty.

One problem is with USER/Domain. I tried ('A'..'Z''a'..'z')
+ '\'('A'..'Z''a'..'z')+ .

This didn't work (it doesn't like the backslash, which, in this 
case, I don't want to treat as an escape character.

Any help would be much appreciated.




 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From andrew at adersoftware.com  Sun Mar 23 08:23:25 2003
From: andrew at adersoftware.com (Andrew Deren)
Date: Mon Dec 20 16:15:28 2004
Subject: [antlr-interest] Regular Expression Syntax in ANTLR
References: <b5kmbt+gn4e@eGroups.com>
Message-ID: <000701c2f158$87e011a0$376410ac@CS>

Put '\\' this will escape the backslash for antlr, and will accept it
Andrew

----- Original Message -----
From: "rcreekmore_2003" <rcreekmore_2003@yahoo.com>
To: <antlr-interest@yahoogroups.com>
Sent: Sunday, March 23, 2003 10:11 AM
Subject: [antlr-interest] Regular Expression Syntax in ANTLR


> Can someone tell me what regular expression syntax ANTLR uses, and
> where I could find some examples?
>
> I am trying to parse fields from a web log file and having some
> difficulty.
>
> One problem is with USER/Domain. I tried ('A'..'Z''a'..'z')
> + '\'('A'..'Z''a'..'z')+ .
>
> This didn't work (it doesn't like the backslash, which, in this
> case, I don't want to treat as an escape character.
>
> Any help would be much appreciated.
>
>
>
>
>
>
> Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/
>
>
>


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From brian-l-smith at uiowa.edu  Sun Mar 23 09:51:37 2003
From: brian-l-smith at uiowa.edu (Brian Smith)
Date: Mon Dec 20 16:15:28 2004
Subject: [antlr-interest] Re: Bounded Left Recursion
In-Reply-To: <A529C236-5C79-11D7-AA69-000393BB647E@jguru.com>
References: <A529C236-5C79-11D7-AA69-000393BB647E@jguru.com>
Message-ID: <3E7DF429.1020100@uiowa.edu>

Hello Terence and Loring,

The template idea has been around for years. I think it the 
distinguishing feature of "two level grammars," although my reference 
for two level grammars does not use template-like syntax.

I think that templates are more general than precedence parsing, 
especially if it is possible to add semantic actions and/or 
tree-building annotations to templates. Precedence rules only handle 
issues related to precedence and associativity. It seems that the syntax 
for handing precedence/associativity via templates is not too 
unreadable. Also, a template-based grammar can always be deconstructed 
down to a "normal" ANTLR grammar, which means that the core analysis and 
runtime code could not have to change at all if it was implemented as a 
preprocessor. So, my (naive) inclination is that templates are a better 
option than explicit precedence rules when performance issues are not 
taken into account.

Probably, dedicated precedence parsing is more efficient. However, with 
a template-based approach, you could have predefined left_infix, 
right_infix, prefix, postfix, etc. templates that would be specially 
optimized during the analysis in the same way. In other words, it seems 
like somebody could implement the templates first via a preprocessor for 
a proof of concept, and then later integrate the template processing 
into the LL analysis phase for optimization purposes.

- Brian



> On Friday, March 21, 2003, at 03:40  PM, lgcraymer wrote:
>>The template idea is interesting and might be worth pursuing.
>>
>>Ter--what do you think?

Terence Parr wrote:
> Interesting...i'm wondering if we don't want to try some kind of 
> precedence parser instead. Perhaps mark a rule (and all others invoked 
> from it) as a special rule that gets implemented differently.  I have 
> to look back at my precedence parsing notes from 10 years ago to see 
> what way would be better.
> 
> Yes, i've been annoyed by the cumbersome multi-level grammar for 
> expressions for years.  Further, you have like 20 levels to go down 
> just to parse "34".  Very inefficient compared to a state-machine based 
> approach.  Can we blend the approaches for this particular problem?





 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From matt at cortexebusiness.com.au  Sun Mar 23 13:45:13 2003
From: matt at cortexebusiness.com.au (Matt Quail)
Date: Mon Dec 20 16:15:28 2004
Subject: [antlr-interest] Regular Expression Syntax in ANTLR
In-Reply-To: <b5kmbt+gn4e@eGroups.com>
References: <b5kmbt+gn4e@eGroups.com>
Message-ID: <3E7E2AE9.9030407@cortexebusiness.com.au>

> One problem is with USER/Domain. I tried ('A'..'Z''a'..'z')
> + '\'('A'..'Z''a'..'z')+ .

I think you also need to seperate the 'a .. z' bits with an | like so:

('A'..'Z' | 'a'..'z')+ '\\' ('A'..'Z' | 'a'..'z')+

=Matt


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From markkant2001 at yahoo.com  Sun Mar 23 15:10:23 2003
From: markkant2001 at yahoo.com (mark kant)
Date: Mon Dec 20 16:15:28 2004
Subject: [antlr-interest] grammar question
In-Reply-To: <3C613F22-5CEE-11D7-AA69-000393BB647E@jguru.com>
Message-ID: <20030323231023.21252.qmail@web13608.mail.yahoo.com>

I checked the example - it does the lexer selection
based in lex only.  Is there another way to activate a
set of lex rules based on a rule match in parser, but
under normal  conditions, these lex rules are inactive
?


Thanks in advance

Mark
--- Terence Parr <parrt@jguru.com> wrote:
> Sure...see the javadoc example in distribution
> (explained in token 
> stream section of notes) :)
> 
> Terence
> 
> On Saturday, March 22, 2003, at 02:45  PM, mark kant
> wrote:
> 
> > Hi,
> >
> > Can multiple lexers be implemented so that a
> different
> > lexer is activated in parser or atleast based on a
> > rule that matches in parser ?
> >
> >
> > Thanks
> >
> > Mark
> >
> >
> > __________________________________________________
> > Do you Yahoo!?
> > Yahoo! Platinum - Watch CBS' NCAA March Madness,
> live on your desktop!
> > http://platinum.yahoo.com
> >
> >
> >
> > Your use of Yahoo! Groups is subject to 
> > http://docs.yahoo.com/info/terms/
> >
> >
> --
> Co-founder, http://www.jguru.com
> Creator, ANTLR Parser Generator:
> http://www.antlr.org
> Lecturer in Comp. Sci., University of San Francisco
> 
> 
>  
> 
> Your use of Yahoo! Groups is subject to
> http://docs.yahoo.com/info/terms/ 
> 
> 


__________________________________________________
Do you Yahoo!?
Yahoo! Platinum - Watch CBS' NCAA March Madness, live on your desktop!
http://platinum.yahoo.com

 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From parrt at jguru.com  Sun Mar 23 15:42:15 2003
From: parrt at jguru.com (Terence Parr)
Date: Mon Dec 20 16:15:28 2004
Subject: [antlr-interest] grammar question
In-Reply-To: <20030323231023.21252.qmail@web13608.mail.yahoo.com>
Message-ID: <13902115-5D89-11D7-AA69-000393BB647E@jguru.com>


On Sunday, March 23, 2003, at 03:10  PM, mark kant wrote:

> I checked the example - it does the lexer selection
> based in lex only.  Is there another way to activate a
> set of lex rules based on a rule match in parser, but
> under normal  conditions, these lex rules are inactive
> ?
>

Technically yes via a semantic predicate on left edge of lexer rule 
(new 2.7.2 feature), but it's generally bad to have parser feed info 
back to lexer for lookahead reasons.

Ter
--
Co-founder, http://www.jguru.com
Creator, ANTLR Parser Generator: http://www.antlr.org
Lecturer in Comp. Sci., University of San Francisco


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From hushlee83 at yahoo.com.sg  Sun Mar 23 16:23:43 2003
From: hushlee83 at yahoo.com.sg (=?iso-8859-1?q?Sharon=20Li?=)
Date: Mon Dec 20 16:15:29 2004
Subject: [antlr-interest] pls help with Non-determinism error!
Message-ID: <20030324002343.62019.qmail@web40909.mail.yahoo.com>


Hi can someone pls help me with this non-determinism error coz Im really stuck! :P Thanks!

class LParser extends Parser;

options { k=2; }

number returns [String num=""]
  : (MINUS {num = "-";})? ((n:NUMERIC {num += n.getText();}) 
  | (d:DIGIT {num += d.getText();}))
  ;

word returns [String word=""]
  : ((name:NAME {word = name.getText();}) 
  | (a:ALPHA {word = a.getText();}))
  ;
  
digit_or_alpha returns [String result="";]
   : (d:DIGIT {result = d.getText();}) | (a:ALPHA {result=a.getText();})
   ;
   
symbol returns [String sym] {sym = null;} 
   : ((sym = digit_or_alpha)
   | (DOT {sym=".";}) | (COMMA {sym=",";})| (SEMI {sym=";";}) | (PLUS {sym="+";}) | (MINUS{sym="-";}) 
   | (NOT{sym="!";}) | (DIVIDE{sym="/";}) | (POW{sym="^";}) | (MOD{sym="%";}) 
   | (AND{sym="&";}) | (DRAW {sym="@";}) | (HEX {sym="#";}) | (QUESTION{sym="?";}) 
   | (UNDERSCORE{sym="_";}) | (ASSIGN{sym="=";}) | (OR{sym="|";}) | (NEG{sym="~";}) 
   | (LBRACK{sym="[";}) | (RBRACK{sym="]";}) 
   | (LBRACE{sym="{";}) | (RBRACE{sym="}";})
   | (DOLLAR{sym="$";}))
   ;
   
formalModule returns [FormalModule fm = null] {String fsymbol=""; ArrayList paramList = null;} 
   : (fsymbol = symbol) (LPAREN (paramList=formalParameters) RPAREN)?
   ;

formalModules returns [ArrayList fmList = new ArrayList()] {FormalModule fm = null;}
   : (fm = formalModule {fmList.add(fm);})+  //line 67
   ;
   
formalParameter returns [String formalParam=""]
   : formalParam = word 
   ;

formalParameters returns [ArrayList params=new ArrayList()] {String fp=""; String temp="";}
   : (fp = formalParameter {params.add(fp);}) ((COMMA) ((temp = formalParameter){params.add(temp);}))* 
   ;
   
productions : (production)+; //line 78

production : strictPred ;

strictPred {ArrayList fms = null;}
   : fms = formalModules ;

 

class LLexer extends Lexer;

options{
 charVocabulary='\0'..'\377';
 k = 2;
}

ALPHA  : ( 'a'..'z' | 'A'..'Z' ); 

DIGIT : ('0'..'9')
   ;

NUMERIC : ((DIGIT)+ ('.'|'e'|'E'))=> (DIGIT)+ ('.' (DIGIT)* (EXPONENT)? | EXPONENT)
    | (DIGIT) (DIGIT)+
    | '.' ((DIGIT)+ (EXPONENT)?)
    ; 
    
NAME : (ALPHA) (ALPHA|DIGIT|UNDERSCORE)+ ;

protected EXPONENT : ('e'|'E') ('+'|'-')? (DIGIT)+ ;

STRING_LITERAL : '"'! ('"' '"'! | ~('"'))* '"'!
 ;

The error that I got is : 

test.g.txt:67: warning: nondeterminism upon
test.g.txt:67:  k==1:MINUS,DIGIT,ALPHA,DOT,COMMA,SEMI,PLUS,NOT,DIVIDE,POW,MOD,AN
D,DRAW,HEX,QUESTION,UNDERSCORE,ASSIGN,OR,NEG,LBRACK,RBRACK,LBRACE,RBRACE,DOLLAR
test.g.txt:67:  k==2:EOF,MINUS,DIGIT,ALPHA,DOT,COMMA,SEMI,PLUS,NOT,DIVIDE,POW,MO
D,AND,DRAW,HEX,QUESTION,UNDERSCORE,ASSIGN,OR,NEG,LBRACK,RBRACK,LBRACE,RBRACE,DOL
LAR,LPAREN
test.g.txt:67:  between alt 1 and exit branch of block
test.g.txt:78: warning: nondeterminism upon
test.g.txt:78:  k==1:MINUS,DIGIT,ALPHA,DOT,COMMA,SEMI,PLUS,NOT,DIVIDE,POW,MOD,AN
D,DRAW,HEX,QUESTION,UNDERSCORE,ASSIGN,OR,NEG,LBRACK,RBRACK,LBRACE,RBRACE,DOLLAR
test.g.txt:78:  k==2:EOF,MINUS,DIGIT,ALPHA,DOT,COMMA,SEMI,PLUS,NOT,DIVIDE,POW,MO
D,AND,DRAW,HEX,QUESTION,UNDERSCORE,ASSIGN,OR,NEG,LBRACK,RBRACK,LBRACE,RBRACE,DOL
LAR,LPAREN
test.g.txt:78:  between alt 1 and exit branch of block
Thanks in advance for any help rendered!
 Yahoo! Biztools
- Promote your business from just $5 a month!
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20030324/7bd4dda9/attachment.html
From Anthony.Youngman at ECA-International.com  Mon Mar 24 03:22:38 2003
From: Anthony.Youngman at ECA-International.com (Anthony W. Youngman)
Date: Mon Dec 20 16:15:29 2004
Subject: [antlr-interest] Newbie prob - nondeterminism :-(
Message-ID: <0EF9DEABA42FE547BAE43D0298F146B23DD5A1@ESP.eca-international.local>

Skipped content of type multipart/alternative
From rjc at trump.net.au  Mon Mar 24 05:04:52 2003
From: rjc at trump.net.au (Robert Colquhoun)
Date: Mon Dec 20 16:15:29 2004
Subject: [antlr-interest] Newbie prob - nondeterminism :-(
In-Reply-To: <0EF9DEABA42FE547BAE43D0298F146B23DD5A1@ESP.eca-internation
 al.local>
Message-ID: <4.2.0.58.20030324234613.00375720@postoffice.trump.net.au>

Hello Anthony,

At 11:22 AM 24/03/2003 +0000, Anthony W. Youngman wrote:

>Thanks. I've now fixed this and got rid of the non-determinism. But I'm 
>still getting a hang. I've altered the grammar somewhat, and it's obvious 
>that it's hanging as it tries to back up. I don't know why.
>
>When I run it, my println statements show that it's got as far as 
>processing the EXIT statement, at which point the printlns should 
>presumably show that it's processed the IF. But it never gets there. And 
>if I comment out the IF, it's then obvious that it's processed the PRINT, 
>but it never gets as far as recognising the REPEAT and showing that it's 
>got there. So my problem clearly seems to be that I haven't got to grips 
>with making it recognise a complex thing like the IF/THEN or LOOP/REPEAT :-(

See below.

>Probably I should look at the java, but as a newbie there too I'll 
>probably just end up more confused than ever :-) ...

Have you any C++ experience? java is like a simplified version of that, the 
generated files are quite readable compared to lots of machine generated 
source i have seen ;-).

>Sample input (as before) ...
>
>       PROGRAM SHELL
>
>       LOOP
>          PRINT "X"
>          INPUT COMMAND
>          PRINT "Command is " : COMMAND
>          IF COMMAND EQ "Q" THEN EXIT
>       REPEAT
>    END
>
>Grammar ...
>....
>tokens {
>    LOOP="LOOP"; REPEAT="REPEAT";
>         PROGRAM="PROGRAM";
>         END="END";
>    PRINT="PRINT"; INPUT="INPUT";
>    EXIT="EXIT";
>         LOGIC_EQ="EQ";
>         IF="IF"; THEN="THEN"; ENDIF="ENDIF";
>         NULL="NULL";
>         LABEL;
>         WHILE; UNTIL;
>         MULT; OR;
>}


Not sure why you need to do this? if lexer and parser are in the same file 
the Tokens defined in the parser are automatically propagated back to the 
lexer.  Only artificial token types which have no representation in the 
lexer or parser need be specified ie tokens like "EXPR" to group all the 
different types of expressions under one label.

>entry : ( (WS|nl)* programst (WS|nl)* ) EOF ;
>
>programst : ( pr:PROGRAM^ id:IDENT ( control | statement )+ END 
>{System.out.println(pr + " " + id+" program ");} );
>
>nl : ( EOL {System.out.println("New line");});
>
>loopst : ( lp:LOOP^ EOL statement_list rp:REPEAT EOL 
>{System.out.println(lp+" "+rp+" loop ");} );
>
>ifst : (iff:IF^ logicexpr thenn:THEN statement {System.out.println(iff + " 
>" + thenn+" if/then ");} ) ;
>
>statement : ( inputst | printst | exitst | NULL )+ EOL ;
>
>control : ( loopst | ifst )+ EOL ;
>
>statement_list : ( ( statement )+ EOL ) ;

Look carefully at the above rules you come in on "entry" which goes into 
"programst" which loops around matching "controls" or "statements".

Looking at "control" it requires a EOL to match to terminate the 
rule.....*but* "ifst" and "loopst" both also require an EOL to terminate 
the rules......ie 2 EOL's are required to match.

PS I did the above in my head, there could quite possibly be other problems 
in the grammar as well...

  - Robert



 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From Anthony.Youngman at ECA-International.com  Mon Mar 24 06:19:48 2003
From: Anthony.Youngman at ECA-International.com (Anthony W. Youngman)
Date: Mon Dec 20 16:15:29 2004
Subject: [antlr-interest] Newbie prob - nondeterminism :-(
Message-ID: <0EF9DEABA42FE547BAE43D0298F146B23DD5A3@ESP.eca-international.local>

Skipped content of type multipart/alternative
From Anthony.Youngman at ECA-International.com  Mon Mar 24 06:35:34 2003
From: Anthony.Youngman at ECA-International.com (Anthony W. Youngman)
Date: Mon Dec 20 16:15:29 2004
Subject: [antlr-interest] Newbie prob - nondeterminism :-(
Message-ID: <0EF9DEABA42FE547BAE43D0298F146B23DD5A4@ESP.eca-international.local>

Skipped content of type multipart/alternative
From Anthony.Youngman at ECA-International.com  Mon Mar 24 06:55:12 2003
From: Anthony.Youngman at ECA-International.com (Anthony W. Youngman)
Date: Mon Dec 20 16:15:29 2004
Subject: [antlr-interest] Newbie prob - nondeterminism :-(
Message-ID: <0EF9DEABA42FE547BAE43D0298F146B23DD5A5@ESP.eca-international.local>

Skipped content of type multipart/alternative
From mzukowski at yci.com  Mon Mar 24 07:57:07 2003
From: mzukowski at yci.com (mzukowski@yci.com)
Date: Mon Dec 20 16:15:29 2004
Subject: [antlr-interest] grammar question
Message-ID: <170826586F3BD511910D0200C110AAA805402255@memail03.bco-home.com>

No.  Parsers changing lexers is not advisable because the lexer can be any
number of tokens ahead of the parser since antlr has "infinite" lookahead
capability through syntactic predicates.

Monty

-----Original Message-----
From: mark kant [mailto:markkant2001@yahoo.com]
Sent: Saturday, March 22, 2003 2:46 PM
To: antlr-interest@yahoogroups.com
Subject: [antlr-interest] grammar question


Hi,

Can multiple lexers be implemented so that a different
lexer is activated in parser or atleast based on a
rule that matches in parser ?


Thanks

Mark


__________________________________________________
Do you Yahoo!?
Yahoo! Platinum - Watch CBS' NCAA March Madness, live on your desktop!
http://platinum.yahoo.com

 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From mzukowski at yci.com  Mon Mar 24 08:08:05 2003
From: mzukowski at yci.com (mzukowski@yci.com)
Date: Mon Dec 20 16:15:29 2004
Subject: [antlr-interest] Help! AST thing is driving me nuts!
Message-ID: <170826586F3BD511910D0200C110AAA805402256@memail03.bco-home.com>

## is shorthand for the root of the tree currently being built.  It's the
same as #ruleName

Monty

-----Original Message-----
From: Jorge Scandaliaris [mailto:j_scandaliaris@yahoo.es]
Sent: Saturday, March 22, 2003 6:17 PM
To: antlr-interest@yahoogroups.com
Subject: RE: [antlr-interest] Help! AST thing is driving me nuts!


Thanks. I was actually doing such a silly thing that I am now ashamed. I
had modified the start rule in the grammar but forgot to reflect that in
the main file, and so I could have tried for ages to modify the start
rule and nothing would have happened in the output. 
I still wonder what the ## (instead of just #) does in an AST action. I
have looked at the generated code, but I can't figure it out. 
I guess I move forward now 'till the next bump in the road :)
I would still appreciate if someone can point me to useful info
regarding ASTs (other than antlr's ref. manual or getting started
tutorials).

Jorge

PS: I am not experienced with Antlr, (nor with c++ either to be honest)
so I apologize if my questions seem evident to you.

> -----Mensaje original-----
> De: Ross Bencina [mailto:rbencina@iprimus.com.au]
> Enviado el: s?bado, 22 de marzo de 2003 21:45
> Para: antlr-interest@yahoogroups.com
> Asunto: Re: [antlr-interest] Help! AST thing is driving me nuts!
> 
> It's a while since I did this, so i'm just going on code I wrote at
the
> time, but I think what you want is:
> 
> Tokens { IMAG_TOK;}
> 
> start_rule!:   a:rules  EOF! {#start_rule=#([IMAG_TOK], #a);};
> 
> rules:            (rule)+
> 
> Best wishes,
> 
> Ross.



 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From cesar at ciencias.unam.mx  Mon Mar 24 22:42:03 2003
From: cesar at ciencias.unam.mx (Cesar Octavio Lopez Nataren)
Date: Mon Dec 20 16:15:29 2004
Subject: [antlr-interest] non-determinism.
Message-ID: <1048574523.1228.14.camel@totopo>

Hello, I'm facing the well-known identifier, reserved words problem.

I have already tried the type of rule like:

IDENTIFIER
    options { testLiterals = true; }
    : ('a'..'z' | 'A'..'Z') ('a'..'z' | 'A'..'Z' | '0'..'9')*
    ;

But I'm still getting the non-determinism warnings.

any suggestion?


Cheers

c?sar



 	



 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From Anthony.Youngman at ECA-International.com  Tue Mar 25 03:19:27 2003
From: Anthony.Youngman at ECA-International.com (Anthony Youngman)
Date: Mon Dec 20 16:15:29 2004
Subject: [antlr-interest] ANTLR crashing ...
Message-ID: <0EF9DEABA42FE547BAE43D0298F146B23DD5A7@ESP.eca-international.local>

Skipped content of type multipart/alternative
From rjc at trump.net.au  Tue Mar 25 03:46:10 2003
From: rjc at trump.net.au (Robert Colquhoun)
Date: Mon Dec 20 16:15:29 2004
Subject: [antlr-interest] Newbie prob - nondeterminism :-(
In-Reply-To: <0EF9DEABA42FE547BAE43D0298F146B23DD5A3@ESP.eca-internation
 al.local>
Message-ID: <4.2.0.58.20030325222458.017eaf10@postoffice.trump.net.au>

Hello Anthony,

At 02:19 PM 24/03/2003 +0000, Anthony W. Youngman wrote:
>As for tokens being propagated back, do you mean I should rewrite eg the 
>IF as
>
>ifst : ("IF"^ logicexpr "THEN" statement ) ;
>
>and it'll create them for me?

Yes if the lexer and parser are in the same file and in the lexer string 
literal rule you use the define "testLiterals=true".  Look in the 
*TokenTypes.[java|txt] files and you can see the "IF" literal specified in 
the parser automatically gets converted to a token type named "LITERAL_IF" 
which can be used in token stream filters and tree walkers to match if 
statements.

>A bit more ... I said I put in a PRINT JUNK - I've tried adding JUNK2 
>after the REPEAT and JUNK3 after the END. It's not doing the JUNK2. So 
>it's probably the LOOP/REPEAT that's causing the hang. But is there any 
>reason why, as it drops out of the IF, it's not printing my trace 
>statement? Might the AST be doing something I don't expect?

If the rule "ifst" is not matched the action attached to the rule will not 
be executed ie no println.  Depending on the situation the parser will then 
look for an alternative to try and match the "IF" maybe causing a hang or 
generate an exception causing the parser to try and resume on the next line 
or perhaps abort completely.

  - Robert


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From rjc at trump.net.au  Tue Mar 25 04:00:33 2003
From: rjc at trump.net.au (Robert Colquhoun)
Date: Mon Dec 20 16:15:29 2004
Subject: [antlr-interest] ANTLR crashing ...
In-Reply-To: <0EF9DEABA42FE547BAE43D0298F146B23DD5A7@ESP.eca-internation
 al.local>
Message-ID: <4.2.0.58.20030325224705.017f88d0@postoffice.trump.net.au>

At 11:19 AM 25/03/2003 +0000, Anthony Youngman wrote:

>Just been trying to do tree walking, and noticed I've got 2.7.0 - bit 
>surprised at that!
>
>So I install 2.7.2 (just untar the .tar.gz and change my classpath).
>
>I now get the following error when I try to "compile" my grammar :-(
>
> > java antlr.Tool BASIC.g
>ANTLR Parser Generator   Version 2.7.2   1989-2003 jGuru.com
>java.lang.NoClassDefFoundError: java/util/HashSet
>         at antlr.JavaCodeGenerator.<init>(JavaCodeGenerator.java:54)
>         at antlr.Tool.doEverything(Tool.java:250)
>         at antlr.Tool.main(Tool.java:399)
>
>Note that I'm running the default java on SuSE 7.2, ie version 1.1.8.
>
>Has 2.7.2 been updated since it was released? I've noticed comments on the 
>list, and my download is datestamped mid January.

Antlr now requires java 1.2 or above.

In the above it is looking for one of the collections classes 
"java.util.HashSet".

To quickly see if this is available in your jdk you can type:
         javap java.util.HashSet
and if present should output all the method prototypes for the object.

If you are stuck on 1.1, you could modify the antlr source and replace 
"java.util.HashSet" with "java.util.Hashtable" and recompile antlr.

 From memory there is some other 1.2+ methods in the "make depend" type 
functionality...i think some methods of java.io.File are used which are not 
present in 1.1...not sure how to fix this short of removing all the 
dependency checking code.

  - Robert


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From Anthony.Youngman at ECA-International.com  Tue Mar 25 04:00:20 2003
From: Anthony.Youngman at ECA-International.com (Anthony Youngman)
Date: Mon Dec 20 16:15:29 2004
Subject: [antlr-interest] ANTLR crashing ...
Message-ID: <0EF9DEABA42FE547BAE43D0298F146B23DD5A8@ESP.eca-international.local>

Skipped content of type multipart/alternative
From j_scandaliaris at yahoo.es  Tue Mar 25 05:03:49 2003
From: j_scandaliaris at yahoo.es (j_scandaliaris@yahoo.es)
Date: Mon Dec 20 16:15:29 2004
Subject: [antlr-interest] Help! AST thing is driving me nuts!
In-Reply-To: <170826586F3BD511910D0200C110AAA805402256@memail03.bco-home.com>
Message-ID: <005401c2f2ce$fa35f4a0$e5315393@GAUDI>

Thanks, it is now going a bit better with AST, at least I started to get
some output. Got to switch my head from parsing to treewalking now, but
little by little I'll get there.

> -----Mensaje original-----
> De: mzukowski@yci.com [mailto:mzukowski@yci.com]
> Enviado el: lunes, 24 de marzo de 2003 17:08
> Para: antlr-interest@yahoogroups.com
> Asunto: RE: [antlr-interest] Help! AST thing is driving me nuts!
> 
> ## is shorthand for the root of the tree currently being built.  It's the
> same as #ruleName
> 
> Monty


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From rjc at trump.net.au  Tue Mar 25 05:37:09 2003
From: rjc at trump.net.au (Robert Colquhoun)
Date: Mon Dec 20 16:15:29 2004
Subject: [antlr-interest] ANTLR crashing ...
In-Reply-To: <0EF9DEABA42FE547BAE43D0298F146B23DD5A8@ESP.eca-internation
 al.local>
Message-ID: <4.2.0.58.20030326001421.0183eaf0@postoffice.trump.net.au>

At 12:00 PM 25/03/2003 +0000, Anthony Youngman wrote:

>BUMMER!
>
>"class 'java.util.HashSet' not found" :-(
>
>And I looked - the release notes merely say it needs 1.1 ...

For what its worth - i don't think 1.1 compatibility got deliberately 
broke, more developers using probably 1.3 or 1.4 just didn't bother 
checking to see if the routines were available on older versions.

At the moment it can probably be fixed so that antlr works again with 1.1, 
but whether it is a worthwhile to spend time doing this is a difficult 
question.

>Off to www.suse.com to see if I can get an update :-(

I saw that suse 8.1 shipped with 1.3.1, but i am not sure they will provide 
1.1. -> 1.3 updates for older distributions as other software(ie java 
applications) probably depend on there being a 1.1 version available.

You might need to install a jdk from Sun/IBM/Blackdown to run side by side 
with the installed suse version.  Just make sure when working on antlr the 
newer java is in the path before java-1.1 ie type 'java -version' to check.

  - Robert


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From gitadut at yahoo.co.uk  Tue Mar 25 05:35:59 2003
From: gitadut at yahoo.co.uk (=?iso-8859-1?q?gita=20roy?=)
Date: Mon Dec 20 16:15:29 2004
Subject: compilation problem 
In-Reply-To: <13902115-5D89-11D7-AA69-000393BB647E@jguru.com>
Message-ID: <20030325133559.26829.qmail@web20501.mail.yahoo.com>


Hi, 
 I have a peculiar problem while uploading my project file using Antlr 2.7.1 and VC++ 6.0 in 2nd machine. 
 During compiling it gives me this type of problem. 
Like: 

java.lang.NoClassDefFoundError: antlr/Tool
Exception in thread "main" 
Error executing c:\winnt\system32\cmd.exe.
I have downloaded the Antlr 2.7.1 and jdk1.2.2, set the Class path and project setting. 

Please explain. 

Thanks in advance. 

Gita




---------------------------------
With Yahoo! Mail you can get a bigger mailbox -- choose a size that fits your needs
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20030325/5ea9907f/attachment.html
From gitadut at yahoo.co.uk  Tue Mar 25 05:35:59 2003
From: gitadut at yahoo.co.uk (=?iso-8859-1?q?gita=20roy?=)
Date: Mon Dec 20 16:15:29 2004
Subject: [antlr-interest] Re: compilation problem
In-Reply-To: <13902115-5D89-11D7-AA69-000393BB647E@jguru.com>
Message-ID: <20030325133559.26829.qmail@web20501.mail.yahoo.com>


Hi, 
 I have a peculiar problem while uploading my project file using Antlr 2.7.1 and VC++ 6.0 in 2nd machine. 
 During compiling it gives me this type of problem. 
Like: 

java.lang.NoClassDefFoundError: antlr/Tool
Exception in thread "main" 
Error executing c:\winnt\system32\cmd.exe.
I have downloaded the Antlr 2.7.1 and jdk1.2.2, set the Class path and project setting. 

Please explain. 

Thanks in advance. 

Gita




---------------------------------
With Yahoo! Mail you can get a bigger mailbox -- choose a size that fits your needs
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20030325/5ea9907f/attachment-0001.html
From parrt at jguru.com  Tue Mar 25 07:15:32 2003
From: parrt at jguru.com (Terence Parr)
Date: Mon Dec 20 16:15:29 2004
Subject: [antlr-interest] non-determinism.
In-Reply-To: <1048574523.1228.14.camel@totopo>
Message-ID: <9F1A1466-5ED4-11D7-B876-000393BB647E@jguru.com>

Hi.  Are you adding rules like

BEGIN : "begin" ;

??  If so, that is the problem.
Ter

On Monday, March 24, 2003, at 10:42  PM, Cesar Octavio Lopez Nataren 
wrote:

> Hello, I'm facing the well-known identifier, reserved words problem.
>
> I have already tried the type of rule like:
>
> IDENTIFIER
>     options { testLiterals = true; }
>     : ('a'..'z' | 'A'..'Z') ('a'..'z' | 'A'..'Z' | '0'..'9')*
>     ;
>
> But I'm still getting the non-determinism warnings.
>
> any suggestion?
>
>
> Cheers
>
> c?sar
>
>
>
>  	
>
>
>
>
>
> Your use of Yahoo! Groups is subject to 
> http://docs.yahoo.com/info/terms/
>
>
--
Co-founder, http://www.jguru.com
Creator, ANTLR Parser Generator: http://www.antlr.org
Lecturer in Comp. Sci., University of San Francisco


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From parrt at jguru.com  Tue Mar 25 07:24:22 2003
From: parrt at jguru.com (Terence Parr)
Date: Mon Dec 20 16:15:29 2004
Subject: [antlr-interest] ANTLR crashing ...
In-Reply-To: <0EF9DEABA42FE547BAE43D0298F146B23DD5A8@ESP.eca-international.local>
Message-ID: <DB39C749-5ED5-11D7-B876-000393BB647E@jguru.com>


On Tuesday, March 25, 2003, at 04:00  AM, Anthony Youngman wrote:

> BUMMER!
>
> "class 'java.util.HashSet' not found" :-(
>
> And I looked - the release notes merely say it needs 1.1 ...
>

Yeah, how did HashSet get in there!  Very strange...i didn't do 
that...i'll look at the code...hang on...

Rats.  Alright.  I've removed it and made it a Hashtable.  Simple 
change if you want to make them on your end.  Just change HashSet to 
Hashtable in JavaCodeGenerator, CppCodeGenerator, CSharpCodeGenerator 
and change the ref of

         declaredASTVariables.add(el);

to

         declaredASTVariables.put(el,el);

You are all set.

Ter

> Off to www.suse.com to see if I can get an update :-(
>
> Cheers,
> Wol
>
> -----Original Message-----
> From: Robert Colquhoun [mailto:rjc@trump.net.au]
> Sent: 25 March 2003 12:01
> To: 'antlr-interest@yahoogroups.com'
> Subject: Re: [antlr-interest] ANTLR crashing ...
>
>
> At 11:19 AM 25/03/2003 +0000, Anthony Youngman wrote:
>
> >Just been trying to do tree walking, and noticed I've got 2.7.0 - bit
> >surprised at that!
> >
> >So I install 2.7.2 (just untar the .tar.gz and change my classpath).
> >
> >I now get the following error when I try to "compile" my grammar :-(
> >
> > > java antlr.Tool BASIC.g
> >ANTLR Parser Generator?? Version 2.7.2?? 1989-2003 jGuru.com
> >java.lang.NoClassDefFoundError: java/util/HashSet
> >???????? at antlr.JavaCodeGenerator.<init>(JavaCodeGenerator.java:54)
> >???????? at antlr.Tool.doEverything(Tool.java:250)
> >???????? at antlr.Tool.main(Tool.java:399)
> >
> >Note that I'm running the default java on SuSE 7.2, ie version 1.1.8.
> >
> >Has 2.7.2 been updated since it was released? I've noticed comments 
> on the
> >list, and my download is datestamped mid January.
>
> Antlr now requires java 1.2 or above.
>
> In the above it is looking for one of the collections classes
> "java.util.HashSet".
>
> To quickly see if this is available in your jdk you can type:
> ???????? javap java.util.HashSet
> and if present should output all the method prototypes for the object.
>
> If you are stuck on 1.1, you could modify the antlr source and replace
> "java.util.HashSet" with "java.util.Hashtable" and recompile antlr.
>
> ?From memory there is some other 1.2+ methods in the "make depend" type
> functionality...i think some methods of java.io.File are used which 
> are not
> present in 1.1...not sure how to fix this short of removing all the
> dependency checking code.
>
> ? - Robert
>
>
> ?
>
> Your use of Yahoo! Groups is subject to 
> http://docs.yahoo.com/info/terms/
>
>
>
> This transmission is intended for the named recipient only. It may 
> contain private and confidential information. If this has come to you 
> in error you must not act on anything disclosed in it, nor must you 
> copy it, modify it, disseminate it in any way, or show it to anyone. 
> Please e-mail the sender to inform us of the transmission error or 
> telephone ECA International immediately and delete the e-mail from 
> your information system.
>
> Telephone numbers for ECA International offices are: Sydney +61 (0)2 
> 9911 7799, Hong Kong + 852 2121 2388, London +44 (0)20 7351 5000 and 
> New York +1 212 582 2333.
>
>
> Your use of Yahoo! Groups is subject to the Yahoo! Terms of Service.
--
Co-founder, http://www.jguru.com
Creator, ANTLR Parser Generator: http://www.antlr.org
Lecturer in Comp. Sci., University of San Francisco


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From Anthony.Youngman at ECA-International.com  Tue Mar 25 07:52:18 2003
From: Anthony.Youngman at ECA-International.com (Anthony Youngman)
Date: Mon Dec 20 16:15:29 2004
Subject: [antlr-interest] ANTLR crashing ...
Message-ID: <0EF9DEABA42FE547BAE43D0298F146B23DD5AA@ESP.eca-international.local>

Skipped content of type multipart/alternative
From mzukowski at yci.com  Tue Mar 25 08:08:18 2003
From: mzukowski at yci.com (mzukowski@yci.com)
Date: Mon Dec 20 16:15:29 2004
Subject: [antlr-interest] non-determinism.
Message-ID: <170826586F3BD511910D0200C110AAA80540225D@memail03.bco-home.com>

You must have other lexer rules that start with letters to get
nondeterminism warnings.  What are they?

Monty

-----Original Message-----
From: Cesar Octavio Lopez Nataren [mailto:cesar@ciencias.unam.mx]
Sent: Monday, March 24, 2003 10:42 PM
To: antlr-interest@yahoogroups.com
Subject: [antlr-interest] non-determinism.


Hello, I'm facing the well-known identifier, reserved words problem.

I have already tried the type of rule like:

IDENTIFIER
    options { testLiterals = true; }
    : ('a'..'z' | 'A'..'Z') ('a'..'z' | 'A'..'Z' | '0'..'9')*
    ;

But I'm still getting the non-determinism warnings.

any suggestion?


Cheers

c?sar



 	



 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From Anthony.Youngman at ECA-International.com  Tue Mar 25 08:08:21 2003
From: Anthony.Youngman at ECA-International.com (Anthony Youngman)
Date: Mon Dec 20 16:15:29 2004
Subject: [antlr-interest] ANTLR crashing ...
Message-ID: <0EF9DEABA42FE547BAE43D0298F146B23DD5AB@ESP.eca-international.local>

Skipped content of type multipart/alternative
From parrt at jguru.com  Tue Mar 25 08:28:48 2003
From: parrt at jguru.com (Terence Parr)
Date: Mon Dec 20 16:15:29 2004
Subject: [antlr-interest] ANTLR crashing ...
In-Reply-To: <0EF9DEABA42FE547BAE43D0298F146B23DD5AB@ESP.eca-international.local>
Message-ID: <DAFB0B71-5EDE-11D7-B876-000393BB647E@jguru.com>


On Tuesday, March 25, 2003, at 08:08  AM, Anthony Youngman wrote:

> So I try and find it, read the install.html and say "I'll try that 
> instead", and the javac command blows up pretty spectacularly too :-(
>
> I think I'll be downloading Java 1.2 at home tonight (I can't get at 
> the SuSE download site through our firewall :-( and bringing the 
> update stuff in tomorrow ...
>
> Sorry, Ter, I think you either need to revert it or update the docu to 
> say 1.2 is required. I know Java isn't supposed to be that difficult, 
> but I don't really want to play with Antlr itself while my knowledge 
> of Java is still at the "help! what does THAT do?" level.

I don't use the configure stuff...i use my own build thing per the doc. 
  The cmd-line option is not necessary so 1.1 is still ok to say :)

Ter
--
Co-founder, http://www.jguru.com
Creator, ANTLR Parser Generator: http://www.antlr.org
Lecturer in Comp. Sci., University of San Francisco


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From markkant2001 at yahoo.com  Tue Mar 25 09:42:05 2003
From: markkant2001 at yahoo.com (mark kant)
Date: Mon Dec 20 16:15:29 2004
Subject: [antlr-interest] non-determinism.
In-Reply-To: <9F1A1466-5ED4-11D7-B876-000393BB647E@jguru.com>
Message-ID: <20030325174205.59732.qmail@web13602.mail.yahoo.com>

Hi,

I get non-determinism in the following lexer (relevant
portion of parser and lexer)

hosport: host COLON password

password: TOKEN

host: NAME AT TOKEN


lexer ...............

COLON: ':'

SEMI: ';'

AT: '@'

TOKEN: ('a'..'z' | 'A'..'Z'
|'0'..'9'|'.'|':'|';'|'@')+


What is the best way to resolve it:
1. multiple lexers
2. syntactic predicates - not appropriate as I have
other similar rules for special characters
3. some kind of flag set in parser and lexer checks it
before matching a rule in lexer (how do I communicate
the flag state from parser to lexer). I have done this
in Lex and YAcc.

Thanks

Mark

__________________________________________________
Do you Yahoo!?
Yahoo! Platinum - Watch CBS' NCAA March Madness, live on your desktop!
http://platinum.yahoo.com

 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From mzukowski at yci.com  Tue Mar 25 09:44:55 2003
From: mzukowski at yci.com (mzukowski@yci.com)
Date: Mon Dec 20 16:15:29 2004
Subject: [antlr-interest] non-determinism.
Message-ID: <170826586F3BD511910D0200C110AAA805402263@memail03.bco-home.com>

remove your AT rule and then add a literal keyword AT='@' to the keywords
section and test for it in TOKEN by turning on the option testLiterals=true.
See the docs on literals.

Monty

-----Original Message-----
From: mark kant [mailto:markkant2001@yahoo.com]
Sent: Tuesday, March 25, 2003 9:42 AM
To: antlr-interest@yahoogroups.com
Subject: [antlr-interest] non-determinism.


Hi,

I get non-determinism in the following lexer (relevant
portion of parser and lexer)

hosport: host COLON password

password: TOKEN

host: NAME AT TOKEN


lexer ...............

COLON: ':'

SEMI: ';'

AT: '@'

TOKEN: ('a'..'z' | 'A'..'Z'
|'0'..'9'|'.'|':'|';'|'@')+


What is the best way to resolve it:
1. multiple lexers
2. syntactic predicates - not appropriate as I have
other similar rules for special characters
3. some kind of flag set in parser and lexer checks it
before matching a rule in lexer (how do I communicate
the flag state from parser to lexer). I have done this
in Lex and YAcc.

Thanks

Mark

__________________________________________________
Do you Yahoo!?
Yahoo! Platinum - Watch CBS' NCAA March Madness, live on your desktop!
http://platinum.yahoo.com

 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From rjc at trump.net.au  Tue Mar 25 16:27:42 2003
From: rjc at trump.net.au (rjc@trump.net.au)
Date: Mon Dec 20 16:15:29 2004
Subject: [antlr-interest] Java 1.1 Patch for Antlr-2.7.2
Message-ID: <200303260027.h2Q0Rgr98692@eliza.trump.net.au>

Hi,

I quickly hacked together a java 1.1 patch for antlr-2.7.2  There was only the HashSet to 
Hashtable and one other place where a 1.2 method in java.io.File was used(see the diff file 
for details).

to apply:
tar zxvf antlr-2.7.2.tar.gz
cd antlr-2.7.2
patch -p1 < java1.1.diff
1.2+) java antlr.build.Tool build
      java antlr.build.Tool jar
1.1)  java -classpath /usr/lib/jdk1.1/classes.zip:. antlr.build.Tool build
      java  -classpath /usr/lib/jdk1.1/classes.zip:.  antlr.build.Tool jar

which should leave you with an antlr.jar that can be used with 1.1

PS For some reason in the distribution the file privileges of a lot of files are read only, 
you might need to 'chown -R 644 *.java' before trying to build.

 - Robert
 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

-------------- next part --------------
A non-text attachment was scrubbed...
Name: C:\temp\java1.1.diff
Type: application/octet-stream
Size: 5771 bytes
Desc: not available
Url : http://www.antlr.org/pipermail/antlr-interest/attachments/20030326/85b00e42/java1.1.obj
From markkant2001 at yahoo.com  Tue Mar 25 16:34:39 2003
From: markkant2001 at yahoo.com (mark kant)
Date: Mon Dec 20 16:15:29 2004
Subject: [antlr-interest] non-determinism.
In-Reply-To: <170826586F3BD511910D0200C110AAA805402263@memail03.bco-home.com>
Message-ID: <20030326003439.31227.qmail@web13604.mail.yahoo.com>

How about the following lexer


protected: 
ALPHA: ('a'..'z'|'A'..'Z')
;
protected:
ALPHA_NUM: ('a'..'z'|'A'..'Z'|'0'..'9')
;
protected:
DIGIT: '0'..'9'
;


NAME: (ALPHA) ((ALPHA) | '_' | '.') )*
;

ID: (ALPHA) ( (ALPHA_NUM) |'_'|'.'|'@')*
;

TOKEN: (ALPHANUM|'_'|'.'|'@'|'%'|';'|'~')+
;

NUMBER: ( DIGITS )+
;


Thanks

Mark
--- mzukowski@yci.com wrote:
> remove your AT rule and then add a literal keyword
> AT='@' to the keywords
> section and test for it in TOKEN by turning on the
> option testLiterals=true.
> See the docs on literals.
> 
> Monty
> 
> -----Original Message-----
> From: mark kant [mailto:markkant2001@yahoo.com]
> Sent: Tuesday, March 25, 2003 9:42 AM
> To: antlr-interest@yahoogroups.com
> Subject: [antlr-interest] non-determinism.
> 
> 
> Hi,
> 
> I get non-determinism in the following lexer
> (relevant
> portion of parser and lexer)
> 
> hosport: host COLON password
> 
> password: TOKEN
> 
> host: NAME AT TOKEN
> 
> 
> lexer ...............
> 
> COLON: ':'
> 
> SEMI: ';'
> 
> AT: '@'
> 
> TOKEN: ('a'..'z' | 'A'..'Z'
> |'0'..'9'|'.'|':'|';'|'@')+
> 
> 
> What is the best way to resolve it:
> 1. multiple lexers
> 2. syntactic predicates - not appropriate as I have
> other similar rules for special characters
> 3. some kind of flag set in parser and lexer checks
> it
> before matching a rule in lexer (how do I
> communicate
> the flag state from parser to lexer). I have done
> this
> in Lex and YAcc.
> 
> Thanks
> 
> Mark
> 
> __________________________________________________
> Do you Yahoo!?
> Yahoo! Platinum - Watch CBS' NCAA March Madness,
> live on your desktop!
> http://platinum.yahoo.com
> 
>  
> 
> Your use of Yahoo! Groups is subject to
> http://docs.yahoo.com/info/terms/ 
> 
> 
>  
> 
> Your use of Yahoo! Groups is subject to
> http://docs.yahoo.com/info/terms/ 
> 
> 


__________________________________________________
Do you Yahoo!?
Yahoo! Platinum - Watch CBS' NCAA March Madness, live on your desktop!
http://platinum.yahoo.com

 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From cesar at ciencias.unam.mx  Tue Mar 25 17:40:41 2003
From: cesar at ciencias.unam.mx (Cesar Octavio Lopez Nataren)
Date: Mon Dec 20 16:15:29 2004
Subject: [antlr-interest] non-determinism.
In-Reply-To: <9F1A1466-5ED4-11D7-B876-000393BB647E@jguru.com>
References: <9F1A1466-5ED4-11D7-B876-000393BB647E@jguru.com>
Message-ID: <1048642841.1500.5.camel@totopo>

On Tue, 2003-03-25 at 09:15, Terence Parr wrote:
> Hi.  Are you adding rules like
> 
> BEGIN : "begin" ;
> 
> ??  If so, that is the problem.
> Ter

Hello Ter, yeah I have the rules for the Keywords, like the one you
mentioned. How can I achive the goal of having that rules and the ones
for the IDENTIFIER?

I thought the testliterals would make the work.

am I wrong?


Greetings

cesar

 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From glindholm at yahoo.com  Tue Mar 25 18:50:26 2003
From: glindholm at yahoo.com (Greg Lindholm)
Date: Mon Dec 20 16:15:29 2004
Subject: [antlr-interest] non-determinism.
In-Reply-To: <20030326003439.31227.qmail@web13604.mail.yahoo.com>
Message-ID: <20030326025026.24324.qmail@web12405.mail.yahoo.com>


To understand the non-determinism it might help you if you consider some example tokens with this lexer.
If your lexer sees the single character 'a' what type of token would you like it to return?  One of the non-determinism this lexer has is that 'a' matches the NAME, ID, and TOKEN rules.  Which is it? Note that ANTLR doesn't care what order the rules appear in (unlike lex).  Same thing goes with the single character '9', it matches both TOKEN and NUMBER.
So I recommend work up some example cases and decide what you want your lexer to return for each case.   
In some languages a given sequence of characters can mean completely different things (different token type) based on the context of those characters.  Antlr is basically a context-free lexer (predicates can help sometimes).  In these cases you might need to delay exact identification of the token type until you know the context (symantic analysis phase).  For example you might have the lexer return a token type NAME_OR_ID  then later figure out which it is once you know the context.
Hope this helps,
Greg
 
 mark kant <markkant2001@yahoo.com> wrote:How about the following lexer


protected: 
ALPHA: ('a'..'z'|'A'..'Z')
;
protected:
ALPHA_NUM: ('a'..'z'|'A'..'Z'|'0'..'9')
;
protected:
DIGIT: '0'..'9'
;


NAME: (ALPHA) ((ALPHA) | '_' | '.') )*
;

ID: (ALPHA) ( (ALPHA_NUM) |'_'|'.'|'@')*
;

TOKEN: (ALPHANUM|'_'|'.'|'@'|'%'|';'|'~')+
;

NUMBER: ( DIGITS )+
;


Thanks

Mark
--- mzukowski@yci.com wrote:
> remove your AT rule and then add a literal keyword
> AT='@' to the keywords
> section and test for it in TOKEN by turning on the
> option testLiterals=true.
> See the docs on literals.
> 
> Monty
> 
> -----Original Message-----
> From: mark kant [mailto:markkant2001@yahoo.com]
> Sent: Tuesday, March 25, 2003 9:42 AM
> To: antlr-interest@yahoogroups.com
> Subject: [antlr-interest] non-determinism.
> 
> 
> Hi,
> 
> I get non-determinism in the following lexer
> (relevant
> portion of parser and lexer)
> 
> hosport: host COLON password
> 
> password: TOKEN
> 
> host: NAME AT TOKEN
> 
> 
> lexer ...............
> 
> COLON: ':'
> 
> SEMI: ';'
> 
> AT: '@'
> 
> TOKEN: ('a'..'z' | 'A'..'Z'
> |'0'..'9'|'.'|':'|';'|'@')+
> 
> 
> What is the best way to resolve it:
> 1. multiple lexers
> 2. syntactic predicates - not appropriate as I have
> other similar rules for special characters
> 3. some kind of flag set in parser and lexer checks
> it
> before matching a rule in lexer (how do I
> communicate
> the flag state from parser to lexer). I have done
> this
> in Lex and YAcc.
> 
> Thanks
> 
> Mark
> 
> __________________________________________________
> Do you Yahoo!?
> Yahoo! Platinum - Watch CBS' NCAA March Madness,
> live on your desktop!
> http://platinum.yahoo.com
> 
> 
> 
> Your use of Yahoo! Groups is subject to
> http://docs.yahoo.com/info/terms/ 
> 
> 
> 
> 
> Your use of Yahoo! Groups is subject to
> http://docs.yahoo.com/info/terms/ 
> 
> 


__________________________________________________
Do you Yahoo!?
Yahoo! Platinum - Watch CBS' NCAA March Madness, live on your desktop!
http://platinum.yahoo.com



Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 




---------------------------------
Do you Yahoo!?
Yahoo! Platinum - Watch CBS' NCAA March Madness, live on your desktop!
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20030325/951fe507/attachment.html
From markkant2001 at yahoo.com  Tue Mar 25 19:40:41 2003
From: markkant2001 at yahoo.com (mark kant)
Date: Mon Dec 20 16:15:29 2004
Subject: [antlr-interest] non-determinism.
In-Reply-To: <20030326025026.24324.qmail@web12405.mail.yahoo.com>
Message-ID: <20030326034041.37492.qmail@web13608.mail.yahoo.com>

There is a slight difference.  Each of them also has
extra characters to distinguish.  Example TOKEN also
has '~' character in it.  If I expected an ID, but I
return TOKEN_OR_ID, then how do I know it is a valid
ID  (it may have '~' in it, which makes it invalid ID,
but valid TOKEN )


Mark

------------------------------
--- Greg Lindholm <glindholm@yahoo.com> wrote:
> 
> To understand the non-determinism it might help you
> if you consider some example tokens with this lexer.
> If your lexer sees the single character 'a' what
> type of token would you like it to return?  One of
> the non-determinism this lexer has is that 'a'
> matches the NAME, ID, and TOKEN rules.  Which is it?
> Note that ANTLR doesn't care what order the rules
> appear in (unlike lex).  Same thing goes with the
> single character '9', it matches both TOKEN and
> NUMBER.
> So I recommend work up some example cases and decide
> what you want your lexer to return for each case.   
> In some languages a given sequence of characters can
> mean completely different things (different token
> type) based on the context of those characters. 
> Antlr is basically a context-free lexer (predicates
> can help sometimes).  In these cases you might need
> to delay exact identification of the token type
> until you know the context (symantic analysis
> phase).  For example you might have the lexer return
> a token type NAME_OR_ID  then later figure out which
> it is once you know the context.
> Hope this helps,
> Greg
>  
>  mark kant <markkant2001@yahoo.com> wrote:How about
> the following lexer
> 
> 
> protected: 
> ALPHA: ('a'..'z'|'A'..'Z')
> ;
> protected:
> ALPHA_NUM: ('a'..'z'|'A'..'Z'|'0'..'9')
> ;
> protected:
> DIGIT: '0'..'9'
> ;
> 
> 
> NAME: (ALPHA) ((ALPHA) | '_' | '.') )*
> ;
> 
> ID: (ALPHA) ( (ALPHA_NUM) |'_'|'.'|'@')*
> ;
> 
> TOKEN: (ALPHANUM|'_'|'.'|'@'|'%'|';'|'~')+
> ;
> 
> NUMBER: ( DIGITS )+
> ;
> 
> 
> Thanks
> 
> Mark
> --- mzukowski@yci.com wrote:
> > remove your AT rule and then add a literal keyword
> > AT='@' to the keywords
> > section and test for it in TOKEN by turning on the
> > option testLiterals=true.
> > See the docs on literals.
> > 
> > Monty
> > 
> > -----Original Message-----
> > From: mark kant [mailto:markkant2001@yahoo.com]
> > Sent: Tuesday, March 25, 2003 9:42 AM
> > To: antlr-interest@yahoogroups.com
> > Subject: [antlr-interest] non-determinism.
> > 
> > 
> > Hi,
> > 
> > I get non-determinism in the following lexer
> > (relevant
> > portion of parser and lexer)
> > 
> > hosport: host COLON password
> > 
> > password: TOKEN
> > 
> > host: NAME AT TOKEN
> > 
> > 
> > lexer ...............
> > 
> > COLON: ':'
> > 
> > SEMI: ';'
> > 
> > AT: '@'
> > 
> > TOKEN: ('a'..'z' | 'A'..'Z'
> > |'0'..'9'|'.'|':'|';'|'@')+
> > 
> > 
> > What is the best way to resolve it:
> > 1. multiple lexers
> > 2. syntactic predicates - not appropriate as I
> have
> > other similar rules for special characters
> > 3. some kind of flag set in parser and lexer
> checks
> > it
> > before matching a rule in lexer (how do I
> > communicate
> > the flag state from parser to lexer). I have done
> > this
> > in Lex and YAcc.
> > 
> > Thanks
> > 
> > Mark
> > 
> > __________________________________________________
> > Do you Yahoo!?
> > Yahoo! Platinum - Watch CBS' NCAA March Madness,
> > live on your desktop!
> > http://platinum.yahoo.com
> > 
> > 
> > 
> > Your use of Yahoo! Groups is subject to
> > http://docs.yahoo.com/info/terms/ 
> > 
> > 
> > 
> > 
> > Your use of Yahoo! Groups is subject to
> > http://docs.yahoo.com/info/terms/ 
> > 
> > 
> 
> 
> __________________________________________________
> Do you Yahoo!?
> Yahoo! Platinum - Watch CBS' NCAA March Madness,
> live on your desktop!
> http://platinum.yahoo.com
> 
> 
> 
> Your use of Yahoo! Groups is subject to
> http://docs.yahoo.com/info/terms/ 
> 
> 
> 
> 
> ---------------------------------
> Do you Yahoo!?
> Yahoo! Platinum - Watch CBS' NCAA March Madness,
> live on your desktop!


__________________________________________________
Do you Yahoo!?
Yahoo! Platinum - Watch CBS' NCAA March Madness, live on your desktop!
http://platinum.yahoo.com

 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From zai-qiang.leng at sybase.com  Tue Mar 25 19:49:30 2003
From: zai-qiang.leng at sybase.com (zai-qiang.leng@sybase.com)
Date: Mon Dec 20 16:15:29 2004
Subject: [antlr-interest] Another non-determinism.
Message-ID: <OF02C019E0.CA5D8135-ON48256CF5.0014509E@sybase.com>

Hi,

I have a lexer rule like following and k=3.

MLComment                                          //Line 1796
     :    "/*"
          (
               options {greedy=false;}
          :   '\r' ('\n')?    { newline(); }                      //Line
1800
          |   '\n'       { newline(); }
          |   .
          )*
          "*/"
          { $setType(ANTLR_USE_NAMESPACE(antlr)Token::SKIP); }
     ;



When compiling the rule, I got following warning:

..\grammar\psparser.g:1800: warning: lexical nondeterminism upon
..\grammar\psparser.g:1800:  k==1:'\n'
..\grammar\psparser.g:1800:  k==2:'\t','\n','\u000c','\r',' '..'>','
[',']'..'~'
..\grammar\psparser.g:1800:  k==3:'\t','\n','\u000c','\r',' '..'>','
[',']'..'~'
..\grammar\psparser.g:1800:  between alts 1 and 2 of block

Can anyone tell me what "alts 1 and 2 of block" in the warning message
means? What alts 1 means?, Dose it mean the alt "'\r' ('\n')?"?  Why are
there  have nondeterminism warning message when k=3?  What the character
such as '\t','\n','\u000c','\r',' '..'>','[',']'..'~' in the warning
message means?

Thanks
Zaiqiang



 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From xeenman at yahoo.com  Tue Mar 25 19:57:02 2003
From: xeenman at yahoo.com (William Lam)
Date: Mon Dec 20 16:15:29 2004
Subject: [antlr-interest] Re: pls help with Non-determinism error!
In-Reply-To: <20030324002343.62019.qmail@web40909.mail.yahoo.com>
Message-ID: <b5r8ee+bvtt@eGroups.com>

Change 

productions : (production)+; //line 78

to

productions : production

--- In antlr-interest@yahoogroups.com, Sharon Li <hushlee83@y...> 
wrote:
> 
> Hi can someone pls help me with this non-determinism error coz Im 
really stuck! :P Thanks!
> 
> class LParser extends Parser;
> 
> options { k=2; }
> 
> number returns [String num=""]
>   : (MINUS {num = "-";})? ((n:NUMERIC {num += n.getText();}) 
>   | (d:DIGIT {num += d.getText();}))
>   ;
> 
> word returns [String word=""]
>   : ((name:NAME {word = name.getText();}) 
>   | (a:ALPHA {word = a.getText();}))
>   ;
>   
> digit_or_alpha returns [String result="";]
>    : (d:DIGIT {result = d.getText();}) | (a:ALPHA {result=a.getText
();})
>    ;
>    
> symbol returns [String sym] {sym = null;} 
>    : ((sym = digit_or_alpha)
>    | (DOT {sym=".";}) | (COMMA {sym=",";})| (SEMI {sym=";";}) | 
(PLUS {sym="+";}) | (MINUS{sym="-";}) 
>    | (NOT{sym="!";}) | (DIVIDE{sym="/";}) | (POW{sym="^";}) | (MOD
{sym="%";}) 
>    | (AND{sym="&";}) | (DRAW {sym="@";}) | (HEX {sym="#";}) | 
(QUESTION{sym="?";}) 
>    | (UNDERSCORE{sym="_";}) | (ASSIGN{sym="=";}) | (OR{sym="|";}) | 
(NEG{sym="~";}) 
>    | (LBRACK{sym="[";}) | (RBRACK{sym="]";}) 
>    | (LBRACE{sym="{";}) | (RBRACE{sym="}";})
>    | (DOLLAR{sym="$";}))
>    ;
>    
> formalModule returns [FormalModule fm = null] {String fsymbol=""; 
ArrayList paramList = null;} 
>    : (fsymbol = symbol) (LPAREN (paramList=formalParameters) 
RPAREN)?
>    ;
> 
> formalModules returns [ArrayList fmList = new ArrayList()] 
{FormalModule fm = null;}
>    : (fm = formalModule {fmList.add(fm);})+  //line 67
>    ;
>    
> formalParameter returns [String formalParam=""]
>    : formalParam = word 
>    ;
> 
> formalParameters returns [ArrayList params=new ArrayList()] {String 
fp=""; String temp="";}
>    : (fp = formalParameter {params.add(fp);}) ((COMMA) ((temp = 
formalParameter){params.add(temp);}))* 
>    ;
>    
> productions : (production)+; //line 78
> 
> production : strictPred ;
> 
> strictPred {ArrayList fms = null;}
>    : fms = formalModules ;
> 
>  
> 
> class LLexer extends Lexer;
> 
> options{
>  charVocabulary='\0'..'\377';
>  k = 2;
> }
> 
> ALPHA  : ( 'a'..'z' | 'A'..'Z' ); 
> 
> DIGIT : ('0'..'9')
>    ;
> 
> NUMERIC : ((DIGIT)+ ('.'|'e'|'E'))=> (DIGIT)+ ('.' (DIGIT)* 
(EXPONENT)? | EXPONENT)
>     | (DIGIT) (DIGIT)+
>     | '.' ((DIGIT)+ (EXPONENT)?)
>     ; 
>     
> NAME : (ALPHA) (ALPHA|DIGIT|UNDERSCORE)+ ;
> 
> protected EXPONENT : ('e'|'E') ('+'|'-')? (DIGIT)+ ;
> 
> STRING_LITERAL : '"'! ('"' '"'! | ~('"'))* '"'!
>  ;
> 


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From Anthony.Youngman at ECA-International.com  Wed Mar 26 00:55:05 2003
From: Anthony.Youngman at ECA-International.com (Anthony Youngman)
Date: Mon Dec 20 16:15:29 2004
Subject: [antlr-interest] ANTLR crashing ...
Message-ID: <0EF9DEABA42FE547BAE43D0298F146B23DD5AD@ESP.eca-international.local>

Skipped content of type multipart/alternative
From Anthony.Youngman at ECA-International.com  Wed Mar 26 01:04:19 2003
From: Anthony.Youngman at ECA-International.com (Anthony Youngman)
Date: Mon Dec 20 16:15:29 2004
Subject: [antlr-interest] Java 1.1 Patch for Antlr-2.7.2
Message-ID: <0EF9DEABA42FE547BAE43D0298F146B23DD5AF@ESP.eca-international.local>

Skipped content of type multipart/alternative
From gitadut at yahoo.co.uk  Wed Mar 26 04:37:19 2003
From: gitadut at yahoo.co.uk (=?iso-8859-1?q?gita=20roy?=)
Date: Mon Dec 20 16:15:29 2004
Subject: [antlr-interest] Re: Compilation problem
In-Reply-To: <DAFB0B71-5EDE-11D7-B876-000393BB647E@jguru.com>
Message-ID: <20030326123719.46220.qmail@web20514.mail.yahoo.com>


 
 After installing jdk1.2.2, setting the CLASSPATH for it and PATH, still showing some problem as :
 
'java' is not recognized as an internal or external command,
operable program or batch file.
Error executing c:\winnt\system32\cmd.exe.

Please help. 
Gita




---------------------------------
With Yahoo! Mail you can get a bigger mailbox -- choose a size that fits your needs
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20030326/ebbf7593/attachment.html
From glindholm at yahoo.com  Wed Mar 26 06:10:34 2003
From: glindholm at yahoo.com (Greg Lindholm)
Date: Mon Dec 20 16:15:29 2004
Subject: [antlr-interest] non-determinism.
In-Reply-To: <20030326034041.37492.qmail@web13608.mail.yahoo.com>
Message-ID: <20030326141034.44176.qmail@web12403.mail.yahoo.com>


If each token type has a "required" distinguishing character then there would not be an non-determiniism, but that is not what you have written in the rules below.
Did you decide which token type an 'a' is? How about a '9'? You're not going to get very far building a lexer until you make these basic decisions.
Once you have some example cases, if you then have trouble building the lexer to match your examples, then people on this list will help you.
 mark kant <markkant2001@yahoo.com> wrote:There is a slight difference. Each of them also has
extra characters to distinguish. Example TOKEN also
has '~' character in it. If I expected an ID, but I
return TOKEN_OR_ID, then how do I know it is a valid
ID (it may have '~' in it, which makes it invalid ID,
but valid TOKEN )


Mark

------------------------------
--- Greg Lindholm wrote:
> 
> To understand the non-determinism it might help you
> if you consider some example tokens with this lexer.
> If your lexer sees the single character 'a' what
> type of token would you like it to return? One of
> the non-determinism this lexer has is that 'a'
> matches the NAME, ID, and TOKEN rules. Which is it?
> Note that ANTLR doesn't care what order the rules
> appear in (unlike lex). Same thing goes with the
> single character '9', it matches both TOKEN and
> NUMBER.
> So I recommend work up some example cases and decide
> what you want your lexer to return for each case. 
> In some languages a given sequence of characters can
> mean completely different things (different token
> type) based on the context of those characters. 
> Antlr is basically a context-free lexer (predicates
> can help sometimes). In these cases you might need
> to delay exact identification of the token type
> until you know the context (symantic analysis
> phase). For example you might have the lexer return
> a token type NAME_OR_ID then later figure out which
> it is once you know the context.
> Hope this helps,
> Greg
> 
> mark kant wrote:How about
> the following lexer
> 
> 
> protected: 
> ALPHA: ('a'..'z'|'A'..'Z')
> ;
> protected:
> ALPHA_NUM: ('a'..'z'|'A'..'Z'|'0'..'9')
> ;
> protected:
> DIGIT: '0'..'9'
> ;
> 
> 
> NAME: (ALPHA) ((ALPHA) | '_' | '.') )*
> ;
> 
> ID: (ALPHA) ( (ALPHA_NUM) |'_'|'.'|'@')*
> ;
> 
> TOKEN: (ALPHANUM|'_'|'.'|'@'|'%'|';'|'~')+
> ;
> 
> NUMBER: ( DIGITS )+
> ;
> 
> 
> Thanks
> 
> Mark
> --- mzukowski@yci.com wrote:
> > remove your AT rule and then add a literal keyword
> > AT='@' to the keywords
> > section and test for it in TOKEN by turning on the
> > option testLiterals=true.
> > See the docs on literals.
> > 
> > Monty
> > 
> > -----Original Message-----
> > From: mark kant [mailto:markkant2001@yahoo.com]
> > Sent: Tuesday, March 25, 2003 9:42 AM
> > To: antlr-interest@yahoogroups.com
> > Subject: [antlr-interest] non-determinism.
> > 
> > 
> > Hi,
> > 
> > I get non-determinism in the following lexer
> > (relevant
> > portion of parser and lexer)
> > 
> > hosport: host COLON password
> > 
> > password: TOKEN
> > 
> > host: NAME AT TOKEN
> > 
> > 
> > lexer ...............
> > 
> > COLON: ':'
> > 
> > SEMI: ';'
> > 
> > AT: '@'
> > 
> > TOKEN: ('a'..'z' | 'A'..'Z'
> > |'0'..'9'|'.'|':'|';'|'@')+
> > 
> > 
> > What is the best way to resolve it:
> > 1. multiple lexers
> > 2. syntactic predicates - not appropriate as I
> have
> > other similar rules for special characters
> > 3. some kind of flag set in parser and lexer
> checks
> > it
> > before matching a rule in lexer (how do I
> > communicate
> > the flag state from parser to lexer). I have done
> > this
> > in Lex and YAcc.
> > 
> > Thanks
> > 
> > Mark
> > 
> > __________________________________________________
> > Do you Yahoo!?
> > Yahoo! Platinum - Watch CBS' NCAA March Madness,
> > live on your desktop!
> > http://platinum.yahoo.com
> > 
> > 
> > 
> > Your use of Yahoo! Groups is subject to
> > http://docs.yahoo.com/info/terms/ 
> > 
> > 
> > 
> > 
> > Your use of Yahoo! Groups is subject to
> > http://docs.yahoo.com/info/terms/ 
> > 
> > 
> 
> 
> __________________________________________________
> Do you Yahoo!?
> Yahoo! Platinum - Watch CBS' NCAA March Madness,
> live on your desktop!
> http://platinum.yahoo.com
> 
> 
> 
> Your use of Yahoo! Groups is subject to
> http://docs.yahoo.com/info/terms/ 
> 
> 
> 
> 
> ---------------------------------
> Do you Yahoo!?
> Yahoo! Platinum - Watch CBS' NCAA March Madness,
> live on your desktop!


__________________________________________________
Do you Yahoo!?
Yahoo! Platinum - Watch CBS' NCAA March Madness, live on your desktop!
http://platinum.yahoo.com



Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 




---------------------------------
Do you Yahoo!?
Yahoo! Platinum - Watch CBS' NCAA March Madness, live on your desktop!
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20030326/4c39752c/attachment.html
From rjc at trump.net.au  Wed Mar 26 06:26:30 2003
From: rjc at trump.net.au (Robert Colquhoun)
Date: Mon Dec 20 16:15:29 2004
Subject: [antlr-interest] Java 1.1 Patch for Antlr-2.7.2
In-Reply-To: <0EF9DEABA42FE547BAE43D0298F146B23DD5AF@ESP.eca-internation
 al.local>
Message-ID: <4.2.0.58.20030327011029.00f07a50@postoffice.trump.net.au>

At 09:04 AM 26/03/2003 +0000, Anthony Youngman wrote:

>Thanks. I shall have to play with it.

Actually i just did some double checking, trying to rebuild everything from 
scratch and noticed some off the debug stuff depends on the swing libraries 
being present.  These are not shipped by default with java 1.1 need to also 
have swing-1.1.1 jar files in the classpath for it to compile.

Also if you delete all the class files in the distribution, then create the 
build tool it cannot then subsequently compile the main antlr directory - 
seems to need antlr/JavaCodeGenerator for something.  Can fix this by using 
javac explicitly on the main antlr directory then running the build tool....

>As for file permissions, wasn't there some fuss over that on the list? I 
>think the build system changes them to write, does its stuff, and changes 
>them back. Helps prevent accidents :-)

Not sure this was a good idea:
         1) File permissions do *not* work on windows, most unzip tools 
ignore them
         2) Breaks the current java build tool, appears as if some 
intermediate files have been declared read only
         3) Causes annoyance if you are modifying lots of files(ie cleaning 
up import statements)
         4) Prevents problems that do *not* occur ie if you accidently 
delete a file antlr will not build, if you modify one it is easy to find 
this later as windows and unix have many tools to search for files with 
recent modification dates.

  - Robert


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From rjc at trump.net.au  Wed Mar 26 06:43:22 2003
From: rjc at trump.net.au (Robert Colquhoun)
Date: Mon Dec 20 16:15:29 2004
Subject: [antlr-interest] ANTLR crashing ...
In-Reply-To: <0EF9DEABA42FE547BAE43D0298F146B23DD5AD@ESP.eca-internation
 al.local>
Message-ID: <4.2.0.58.20030327012717.0181fe58@postoffice.trump.net.au>

At 08:55 AM 26/03/2003 +0000, Anthony Youngman wrote:
>That said, I shall be buggering about with it again, as I tried to get 1.2 
>for SuSE 7.2, and that's turned into a nightmare too. 8.2 is now on order. 
>It's probably not too difficult to fix - I shall just mess about fixing 
>the compile errors as they hit. Just wish I didn't have too. It needs 
>somewhat more changes than just the ones you said...

If you can tolerate a 30mb or so download installing a third party java 
development kit is relatively straightforward:

Linux Links:
     - Blackdown: http://www.blackdown.org/java-linux/mirrors.html
     - IBM: http://www-106.ibm.com/developerworks/java/jdk/index.html
     - Sun: http://java.sun.com/downloads/

For example to install blackdown distribution is just running a shell 
script which unzips into /usr/j2sdk1.X.X depending on version, all you need 
to do then is add the bin subdirectory to your path.  The currently 
installed suse 1.1 can exist side by side on the same machine without 
interference

Would recommend if possible you use 1.3 in preference to 1.2, quite a bit 
better performance.

- Robert


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From Anthony.Youngman at ECA-International.com  Wed Mar 26 06:49:10 2003
From: Anthony.Youngman at ECA-International.com (Anthony Youngman)
Date: Mon Dec 20 16:15:29 2004
Subject: [antlr-interest] ANTLR crashing ...
Message-ID: <0EF9DEABA42FE547BAE43D0298F146B23DD5B5@ESP.eca-international.local>

Skipped content of type multipart/alternative
From macromliu at yahoo.com.cn  Wed Mar 26 07:25:32 2003
From: macromliu at yahoo.com.cn (macromliu)
Date: Mon Dec 20 16:15:29 2004
Subject: [antlr-interest] How to get the token's string value in C++??
Message-ID: <b5sgpc+ur8a@eGroups.com>

I have composed a rules as following, 
and i want to get the token's text value, and return it,
i have tried the two method in the following code, 
but failed!


STRING returns[char *v]  //[char **pStr]
	: '\'' (ESC|~'\'') '\'' 
	{ 
            //v=_strdump($getText); 
	    //string *str=	;
	    //*pStr = strdump(getText().toString().c_str());
	    //v = strdump(getText().toString().c_str()));
	}
	;

so someone can give me a tip?

:-)





 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From Anthony.Youngman at ECA-International.com  Wed Mar 26 08:11:19 2003
From: Anthony.Youngman at ECA-International.com (Anthony Youngman)
Date: Mon Dec 20 16:15:29 2004
Subject: [antlr-interest] .toStringTree()
Message-ID: <0EF9DEABA42FE547BAE43D0298F146B23DD5BB@ESP.eca-international.local>

Skipped content of type multipart/alternative
From markkant2001 at yahoo.com  Wed Mar 26 09:02:24 2003
From: markkant2001 at yahoo.com (mark kant)
Date: Mon Dec 20 16:15:30 2004
Subject: [antlr-interest] non-determinism.
In-Reply-To: <20030326141034.44176.qmail@web12403.mail.yahoo.com>
Message-ID: <20030326170224.91118.qmail@web13602.mail.yahoo.com>

1.  it is not "required" distinguishing character but
that it may be present.  The point is that there is a
list of token which are supersets of some other
tokens.

So in your question - what type of TOKEN is 'a' ?
The answer is that 'a' can be NAME, ID and also TOKEN.
If a digit follows 'a', then a lexer can either return
NAME or an ID.  If I let the lexer consume the digit
and return an ID, but the parser was expecting only a
NAME, then ID would be incorrect.
To me a parser tell lexer to find a token from a set
of X tokens.
In my problem there are 2 or more sets of tokens. The
parser needs to tell lexer which set to look for.

Thanks again for the discussion.  I will really
appreciate any help in this.

Mark

----------------------
--- Greg Lindholm <glindholm@yahoo.com> wrote:
> 
> If each token type has a "required" distinguishing
> character then there would not be an
> non-determiniism, but that is not what you have
> written in the rules below.
> Did you decide which token type an 'a' is? How about
> a '9'? You're not going to get very far building a
> lexer until you make these basic decisions.
> Once you have some example cases, if you then have
> trouble building the lexer to match your examples,
> then people on this list will help you.
>  mark kant <markkant2001@yahoo.com> wrote:There is a
> slight difference. Each of them also has
> extra characters to distinguish. Example TOKEN also
> has '~' character in it. If I expected an ID, but I
> return TOKEN_OR_ID, then how do I know it is a valid
> ID (it may have '~' in it, which makes it invalid
> ID,
> but valid TOKEN )
> 
> 
> Mark
> 
> ------------------------------
> --- Greg Lindholm wrote:
> > 
> > To understand the non-determinism it might help
> you
> > if you consider some example tokens with this
> lexer.
> > If your lexer sees the single character 'a' what
> > type of token would you like it to return? One of
> > the non-determinism this lexer has is that 'a'
> > matches the NAME, ID, and TOKEN rules. Which is
> it?
> > Note that ANTLR doesn't care what order the rules
> > appear in (unlike lex). Same thing goes with the
> > single character '9', it matches both TOKEN and
> > NUMBER.
> > So I recommend work up some example cases and
> decide
> > what you want your lexer to return for each case. 
> > In some languages a given sequence of characters
> can
> > mean completely different things (different token
> > type) based on the context of those characters. 
> > Antlr is basically a context-free lexer
> (predicates
> > can help sometimes). In these cases you might need
> > to delay exact identification of the token type
> > until you know the context (symantic analysis
> > phase). For example you might have the lexer
> return
> > a token type NAME_OR_ID then later figure out
> which
> > it is once you know the context.
> > Hope this helps,
> > Greg
> > 
> > mark kant wrote:How about
> > the following lexer
> > 
> > 
> > protected: 
> > ALPHA: ('a'..'z'|'A'..'Z')
> > ;
> > protected:
> > ALPHA_NUM: ('a'..'z'|'A'..'Z'|'0'..'9')
> > ;
> > protected:
> > DIGIT: '0'..'9'
> > ;
> > 
> > 
> > NAME: (ALPHA) ((ALPHA) | '_' | '.') )*
> > ;
> > 
> > ID: (ALPHA) ( (ALPHA_NUM) |'_'|'.'|'@')*
> > ;
> > 
> > TOKEN: (ALPHANUM|'_'|'.'|'@'|'%'|';'|'~')+
> > ;
> > 
> > NUMBER: ( DIGITS )+
> > ;
> > 
> > 
> > Thanks
> > 
> > Mark
> > --- mzukowski@yci.com wrote:
> > > remove your AT rule and then add a literal
> keyword
> > > AT='@' to the keywords
> > > section and test for it in TOKEN by turning on
> the
> > > option testLiterals=true.
> > > See the docs on literals.
> > > 
> > > Monty
> > > 
> > > -----Original Message-----
> > > From: mark kant [mailto:markkant2001@yahoo.com]
> > > Sent: Tuesday, March 25, 2003 9:42 AM
> > > To: antlr-interest@yahoogroups.com
> > > Subject: [antlr-interest] non-determinism.
> > > 
> > > 
> > > Hi,
> > > 
> > > I get non-determinism in the following lexer
> > > (relevant
> > > portion of parser and lexer)
> > > 
> > > hosport: host COLON password
> > > 
> > > password: TOKEN
> > > 
> > > host: NAME AT TOKEN
> > > 
> > > 
> > > lexer ...............
> > > 
> > > COLON: ':'
> > > 
> > > SEMI: ';'
> > > 
> > > AT: '@'
> > > 
> > > TOKEN: ('a'..'z' | 'A'..'Z'
> > > |'0'..'9'|'.'|':'|';'|'@')+
> > > 
> > > 
> > > What is the best way to resolve it:
> > > 1. multiple lexers
> > > 2. syntactic predicates - not appropriate as I
> > have
> > > other similar rules for special characters
> > > 3. some kind of flag set in parser and lexer
> > checks
> > > it
> > > before matching a rule in lexer (how do I
> > > communicate
> > > the flag state from parser to lexer). I have
> done
> > > this
> > > in Lex and YAcc.
> > > 
> > > Thanks
> > > 
> > > Mark
> > > 
> > >
> __________________________________________________
> > > Do you Yahoo!?
> > > Yahoo! Platinum - Watch CBS' NCAA March Madness,
> > > live on your desktop!
> > > http://platinum.yahoo.com
> > > 
> > > 
> > > 
> > > Your use of Yahoo! Groups is subject to
> > > http://docs.yahoo.com/info/terms/ 
> > > 
> > > 
> > > 
> > > 
> > > Your use of Yahoo! Groups is subject to
> > > http://docs.yahoo.com/info/terms/ 
> > > 
> > > 
> > 
> > 
> > __________________________________________________
> > Do you Yahoo!?
> > Yahoo! Platinum - Watch CBS' NCAA March Madness,
> > live on your desktop!
> > http://platinum.yahoo.com
> > 
> > 
> > 
> > Your use of Yahoo! Groups is subject to
> > http://docs.yahoo.com/info/terms/ 
> > 
> > 
> > 
> > 
> > ---------------------------------
> > Do you Yahoo!?
> > Yahoo! Platinum - Watch CBS' NCAA March Madness,
> > live on your desktop!
> 
> 
> __________________________________________________
> Do you Yahoo!?
> Yahoo! Platinum - Watch CBS' NCAA March Madness,
> live on your desktop!
> http://platinum.yahoo.com
> 
> 
> 
> 
=== message truncated ===


__________________________________________________
Do you Yahoo!?
Yahoo! Platinum - Watch CBS' NCAA March Madness, live on your desktop!
http://platinum.yahoo.com

 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From glindholm at yahoo.com  Wed Mar 26 10:11:32 2003
From: glindholm at yahoo.com (Greg Lindholm)
Date: Mon Dec 20 16:15:30 2004
Subject: [antlr-interest] non-determinism.
In-Reply-To: <20030326170224.91118.qmail@web13602.mail.yahoo.com>
Message-ID: <20030326181132.32397.qmail@web12406.mail.yahoo.com>


Sorry, lexers and parsers (certainly Antlr) don't work the way you want them to.  There is no facility for the parser to tell the lexer what tokens to look for.  
The lexer acts mostly independently from the parser and it's job is to translate a stream of characters into a stream of tokens. (The tokens are then consumed by the parser. ) So the lexer has to be able to look at a sequence of characters and decide what token type to give it.
You probably need to read the Antlr documentation again and study some of the examples in order to create a workable approach to constructing a solution.
If you want to describe what you are trying to accomplish someone may be able to suggest an approach you can take.
Greg
 mark kant <markkant2001@yahoo.com> wrote: 1. it is not "required" distinguishing character but
that it may be present. The point is that there is a
list of token which are supersets of some other
tokens.

So in your question - what type of TOKEN is 'a' ?
The answer is that 'a' can be NAME, ID and also TOKEN.
If a digit follows 'a', then a lexer can either return
NAME or an ID. If I let the lexer consume the digit
and return an ID, but the parser was expecting only a
NAME, then ID would be incorrect.
To me a parser tell lexer to find a token from a set
of X tokens.
In my problem there are 2 or more sets of tokens. The
parser needs to tell lexer which set to look for.

Thanks again for the discussion. I will really
appreciate any help in this.

Mark

----------------------
--- Greg Lindholm wrote:
> 
> If each token type has a "required" distinguishing
> character then there would not be an
> non-determiniism, but that is not what you have
> written in the rules below.
> Did you decide which token type an 'a' is? How about
> a '9'? You're not going to get very far building a
> lexer until you make these basic decisions.
> Once you have some example cases, if you then have
> trouble building the lexer to match your examples,
> then people on this list will help you.
> mark kant wrote:There is a
> slight difference. Each of them also has
> extra characters to distinguish. Example TOKEN also
> has '~' character in it. If I expected an ID, but I
> return TOKEN_OR_ID, then how do I know it is a valid
> ID (it may have '~' in it, which makes it invalid
> ID,
> but valid TOKEN )
> 
> 
> Mark
> 
> ------------------------------
> --- Greg Lindholm wrote:
> > 
> > To understand the non-determinism it might help
> you
> > if you consider some example tokens with this
> lexer.
> > If your lexer sees the single character 'a' what
> > type of token would you like it to return? One of
> > the non-determinism this lexer has is that 'a'
> > matches the NAME, ID, and TOKEN rules. Which is
> it?
> > Note that ANTLR doesn't care what order the rules
> > appear in (unlike lex). Same thing goes with the
> > single character '9', it matches both TOKEN and
> > NUMBER.
> > So I recommend work up some example cases and
> decide
> > what you want your lexer to return for each case. 
> > In some languages a given sequence of characters
> can
> > mean completely different things (different token
> > type) based on the context of those characters. 
> > Antlr is basically a context-free lexer
> (predicates
> > can help sometimes). In these cases you might need
> > to delay exact identification of the token type
> > until you know the context (symantic analysis
> > phase). For example you might have the lexer
> return
> > a token type NAME_OR_ID then later figure out
> which
> > it is once you know the context.
> > Hope this helps,
> > Greg
> > 
> > mark kant wrote:How about
> > the following lexer
> > 
> > 
> > protected: 
> > ALPHA: ('a'..'z'|'A'..'Z')
> > ;
> > protected:
> > ALPHA_NUM: ('a'..'z'|'A'..'Z'|'0'..'9')
> > ;
> > protected:
> > DIGIT: '0'..'9'
> > ;
> > 
> > 
> > NAME: (ALPHA) ((ALPHA) | '_' | '.') )*
> > ;
> > 
> > ID: (ALPHA) ( (ALPHA_NUM) |'_'|'.'|'@')*
> > ;
> > 
> > TOKEN: (ALPHANUM|'_'|'.'|'@'|'%'|';'|'~')+
> > ;
> > 
> > NUMBER: ( DIGITS )+
> > ;
> > 
> > 
> > Thanks
> > 
> > Mark
> > --- mzukowski@yci.com wrote:
> > > remove your AT rule and then add a literal
> keyword
> > > AT='@' to the keywords
> > > section and test for it in TOKEN by turning on
> the
> > > option testLiterals=true.
> > > See the docs on literals.
> > > 
> > > Monty
> > > 
> > > -----Original Message-----
> > > From: mark kant [mailto:markkant2001@yahoo.com]
> > > Sent: Tuesday, March 25, 2003 9:42 AM
> > > To: antlr-interest@yahoogroups.com
> > > Subject: [antlr-interest] non-determinism.
> > > 
> > > 
> > > Hi,
> > > 
> > > I get non-determinism in the following lexer
> > > (relevant
> > > portion of parser and lexer)
> > > 
> > > hosport: host COLON password
> > > 
> > > password: TOKEN
> > > 
> > > host: NAME AT TOKEN
> > > 
> > > 
> > > lexer ...............
> > > 
> > > COLON: ':'
> > > 
> > > SEMI: ';'
> > > 
> > > AT: '@'
> > > 
> > > TOKEN: ('a'..'z' | 'A'..'Z'
> > > |'0'..'9'|'.'|':'|';'|'@')+
> > > 
> > > 
> > > What is the best way to resolve it:
> > > 1. multiple lexers
> > > 2. syntactic predicates - not appropriate as I
> > have
> > > other similar rules for special characters
> > > 3. some kind of flag set in parser and lexer
> > checks
> > > it
> > > before matching a rule in lexer (how do I
> > > communicate
> > > the flag state from parser to lexer). I have
> done
> > > this
> > > in Lex and YAcc.
> > > 
> > > Thanks
> > > 
> > > Mark
> > > 



---------------------------------
Do you Yahoo!?
Yahoo! Platinum - Watch CBS' NCAA March Madness, live on your desktop!
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20030326/7e43e276/attachment.html
From Jim.OConnor at microfocus.com  Wed Mar 26 11:26:59 2003
From: Jim.OConnor at microfocus.com (Jim O'Connor)
Date: Mon Dec 20 16:15:30 2004
Subject: [antlr-interest] .toStringTree()
Message-ID: <3AC103F1B7EEEC48A855ACB1D2819E9106AA24@rock-corpmail.microfocus.com>

Hi Anthony,
  toStringTree() works nicely, if the tree is well formed.  toStringList()
will print out more if the tree is "flat". Viewing the flat output might
give you clues to how the tree can be better constructed.
  Why is (WS|nl) in the top level rule but not in the second level rule?
You might consider telling the lexer to skip these tokens altogether and
ease the strain on the parser.  They also might be throwing monkey in the
wrench of your AST.

  I'm not an expert antlr tree constructor but have struggle through a few
of them enough to make suggestions.  Take it for what it's worth.

Jim
  

-----Original Message-----
From: Anthony Youngman
To: 'antlr-interest@yahoogroups.com'
Sent: 3/26/03 11:11 AM
Subject: [antlr-interest] .toStringTree()

Okay - I've now got Antlr 2.7.2 running on Blackdown 1.3 :-) 

I've copied the general syntax from "XML Parsing The Easy Way". I would
have thought that .toStringTree() would print out a text representation
of the tree. So why is nothing happening? My top level class is:

----------- 

// This is the wrapper file for the BASIC command 

import java.io.*; 
import antlr.*; 
import antlr.collections.*; 

class BASIC { 
        public static void main(String[] args) { 
                try { 
                        BASICLexer lexer = new BASICLexer(new
DataInputStream(System.in)); 
                        BASICParser parser = new BASICParser(lexer); 
                        parser.entry(); 

                        System.out.println( "printing AST"); 
                        AST result = parser.getAST(); 
                        System.out.println(result.toStringTree()); 

                } catch(Exception e) { 
                        System.err.println("exception: "+e); 
                } 
        } 
} 

----------------- 

And the first two rules in the parser are 

----------- 

entry : ( (WS|nl)* programst (WS|nl)* ) EOF ; 

programst : ( pr:"PROGRAM"^ id:IDENT EOL ( statement )+ "END"
{System.out.println(pr + " " + id+" program ");} ); 

---------------------- 

Bearing in mind the parser is called via "entry", and the first thing
declared as a tree is one level down, "programst", is this the problem?
At the moment, all I'm trying to do is get a tree structure printed and
then I'm going to try to construct a tree walker. I've just printed out
the "Antlr Tree Construction" chapter so I will be reading that on the
way home tonight...

Note that my parser now seems to be behaving as expected :-) 

Cheers, 
Wol 


This transmission is intended for the named recipient only. It may
contain private and confidential information. If this has come to you in
error you must not act on anything disclosed in it, nor must you copy
it, modify it, disseminate it in any way, or show it to anyone. Please
e-mail the sender to inform us of the transmission error or telephone
ECA International immediately and delete the e-mail from your
information system.

Telephone numbers for ECA International offices are: Sydney +61 (0)2
9911 7799, Hong Kong + 852 2121 2388, London +44 (0)20 7351 5000 and New
York +1 212 582 2333.


Your use of Yahoo! Groups is subject to the Yahoo! Terms of Service
<http://docs.yahoo.com/info/terms/> . 

 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From albert.huh at embarcadero-ca.com  Wed Mar 26 11:41:10 2003
From: albert.huh at embarcadero-ca.com (Albert Huh)
Date: Mon Dec 20 16:15:30 2004
Subject: [antlr-interest] non-determinism.
Message-ID: <0881AC7F2F339C40BC6F7983D1E0BEC9730834@mail2k.embarcadero-ca.com>

actually, you can control the lexer from the parser to a degree.  i'm not sure about switching rules, but you can definitely make the lexer change the token type depending on if you've set a flag or not.
 
the parser will need a reference to the lexer to do this.
 
within the lexer, you can simply add some actions like
 
{
  if (nameFlag) {
    setType(NAME);
  }
}
 
i probably didn't use the proper method name for changing the type, but you get the idea.
 
though this probably isn't the greatest idea.  ideally the lexer and parser should be able to run independantly. 

-----Original Message-----
From: Greg Lindholm [mailto:glindholm@yahoo.com]
Sent: Wednesday, March 26, 2003 1:12 PM
To: antlr-interest@yahoogroups.com
Subject: RE: [antlr-interest] non-determinism.



Sorry, lexers and parsers (certainly Antlr) don't work the way you want them to.  There is no facility for the parser to tell the lexer what tokens to look for.  


The lexer acts mostly independently from the parser and it's job is to translate a stream of characters into a stream of tokens. (The tokens are then consumed by the parser. ) So the lexer has to be able to look at a sequence of characters and decide what token type to give it. 


You probably need to read the Antlr documentation again and study some of the examples in order to create a workable approach to constructing a solution. 


If you want to describe what you are trying to accomplish someone may be able to suggest an approach you can take. 


Greg 


 mark kant <markkant2001@yahoo.com> wrote: 


1. it is not "required" distinguishing character but
that it may be present. The point is that there is a
list of token which are supersets of some other
tokens.

So in your question - what type of TOKEN is 'a' ?
The answer is that 'a' can be NAME, ID and also TOKEN.
If a digit follows 'a', then a lexer can either return
NAME or an ID. If I let the lexer consume the digit
and return an ID, but the parser was expecting only a
NAME, then ID would be incorrect.
To me a parser tell lexer to find a token from a set
of X tokens.
In my problem there are 2 or more sets of tokens. The
parser needs to tell lexer which set to look for.

Thanks again for the discussion. I will really
appreciate any help in this.

Mark

----------------------
--- Greg Lindholm wrote:
> 
> If each token type has a "required" distinguishing
> character then there would not be an
> non-determiniism, but that is not what you have
> written in the rules below.
> Did you decide which token type an 'a' is? How about
> a '9'? You're not going to get very far building a
> lexer until you make these basic decisions.
> Once you have some example cases, if you then have
> trouble building the lexer to match your examples,
> then people on this list will help you.
> mark kant wrote:There is a
> slight difference. Each of them also has
> extra characters to distinguish. Example TOKEN also
> has '~' character in it. If I expected an ID, but I
> return TOKEN_OR_ID, then how do I know it is a valid
> ID (it may have '~' in it, which makes it invalid
> ID,
> but valid TOKEN )
> 
> 
> Mark
> 
> ------------------------------
> --- Greg Lindholm wrote:
> > 
> > To understand the non-determinism it might help
> you
> > if you consider some example tokens with this
> lexer.
> > If your lexer sees the single character 'a' what
> > type of token would you like it to return? One of
> > the non-determinism this lexer has is that 'a'
> > matches the NAME, ID, and TOKEN rules. Which is
> it?
> > Note that ANTLR doesn't care what order the rules
> > appear in (unlike lex). Same thing goes with the
> > single character '9', it matches both TOKEN and
> > NUMBER.
> > So I recommend work up some example cases and
> decide
> > what you want your lexer to return for each case. 
> > In some languages a given sequence of characters
> can
> > mean completely different things (different token
> > type) based on the context of those characters. 
> > Antlr is basically a context-free lexer
> (predicates
> > can help sometimes). In these cases you might need
> > to delay exact identification of the token type
> > until you know the context (symantic analysis
> > phase). For example you might have the lexer
> return
> > a token type NAME_OR_ID then later figure out
> which
> > it is once you know the context.
> > Hope this helps,
> > Greg
> > 
> > mark kant wrote:How about
> > the following lexer
> > 
> > 
> > protected: 
> > ALPHA: ('a'..'z'|'A'..'Z')
> > ;
> > protected:
> > ALPHA_NUM: ('a'..'z'|'A'..'Z'|'0'..'9')
> > ;
> > protected:
> > DIGIT: '0'..'9'
> > ;
> > 
> > 
> > NAME: (ALPHA) ((ALPHA) | '_' | '.') )*
> > ;
> > 
> > ID: (ALPHA) ( (ALPHA_NUM) |'_'|'.'|'@')*
> > ;
> > 
> > TOKEN: (ALPHANUM|'_'|'.'|'@'|'%'|';'|'~')+
> > ;
> > 
> > NUMBER: ( DIGITS )+
> > ;
> > 
> > 
> > Thanks
> > 
> > Mark
> > --- mzukowski@yci.com wrote:
> > > remove your AT rule and then add a literal
> keyword
> > > AT='@' to the keywords
> > > section and test for it in TOKEN by turning on
> the
> > > option testLiterals=true.
> > > See the docs on literals.
> > > 
> > > Monty
> > > 
> > > -----Original Message-----
> > > From: mark kant [mailto:markkant2001@yahoo.com]
> > > Sent: Tuesday, March 25, 2003 9:42 AM
> > > To: antlr-interest@yahoogroups.com
> > > Subject: [antlr-interest] non-determinism.
> > > 
> > > 
> > > Hi,
> > > 
> > > I get non-determinism in the following lexer
> > > (relevant
> > > portion of parser and lexer)
> > > 
> > > hosport: host COLON password
> > > 
> > > password: TOKEN
> > > 
> > > host: NAME AT TOKEN
> > > 
> > > 
> > > lexer ...............
> > > 
> > > COLON: ':'
> > > 
> > > SEMI: ';'
> > > 
> > > AT: '@'
> > > 
> > > TOKEN: ('a'..'z' | 'A'..'Z'
> > > |'0'..'9'|'.'|':'|';'|'@')+
> > > 
> > > 
> > > What is the best way to resolve it:
> > > 1. multiple lexers
> > > 2. syntactic predicates - not appropriate as I
> > have
> > > other similar rules for special characters
> > > 3. some kind of flag set in parser and lexer
> > checks
> > > it
> > > before matching a rule in lexer (how do I
> > > communicate
> > > the flag state from parser to lexer). I have
> done
> > > this
> > > in Lex and YAcc.
> > > 
> > > Thanks
> > > 
> > > Mark
> > > 





  _____  

Do you Yahoo!?
Yahoo!  <http://rd.yahoo.com/platinum/evt=8162/*http://platinum.yahoo.com/splash.html> Platinum - Watch CBS' NCAA March Madness, live  <http://rd.yahoo.com/platinum/evt=8162/*http://platinum.yahoo.com/splash.html> on your desktop! 
Your use of Yahoo! Groups is subject to the Yahoo! Terms of Service <http://docs.yahoo.com/info/terms/> . 


-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20030326/750b47ac/attachment.html
From markkant2001 at yahoo.com  Wed Mar 26 11:50:30 2003
From: markkant2001 at yahoo.com (mark kant)
Date: Mon Dec 20 16:15:30 2004
Subject: [antlr-interest] non-determinism.
In-Reply-To: <0881AC7F2F339C40BC6F7983D1E0BEC9730834@mail2k.embarcadero-ca.com>
Message-ID: <20030326195030.16784.qmail@web13604.mail.yahoo.com>

Hi,

This is what I was looking for, but how do I declare
the flag, so that I can set it parser and check it in
lexer ?

Thanks

Mark

------------------
--- Albert Huh <albert.huh@embarcadero-ca.com> wrote:
> actually, you can control the lexer from the parser
> to a degree.  i'm not sure about switching rules,
> but you can definitely make the lexer change the
> token type depending on if you've set a flag or not.
>  
> the parser will need a reference to the lexer to do
> this.
>  
> within the lexer, you can simply add some actions
> like
>  
> {
>   if (nameFlag) {
>     setType(NAME);
>   }
> }
>  
> i probably didn't use the proper method name for
> changing the type, but you get the idea.
>  
> though this probably isn't the greatest idea. 
> ideally the lexer and parser should be able to run
> independantly. 
> 
> -----Original Message-----
> From: Greg Lindholm [mailto:glindholm@yahoo.com]
> Sent: Wednesday, March 26, 2003 1:12 PM
> To: antlr-interest@yahoogroups.com
> Subject: RE: [antlr-interest] non-determinism.
> 
> 
> 
> Sorry, lexers and parsers (certainly Antlr) don't
> work the way you want them to.  There is no facility
> for the parser to tell the lexer what tokens to look
> for.  
> 
> 
> The lexer acts mostly independently from the parser
> and it's job is to translate a stream of characters
> into a stream of tokens. (The tokens are then
> consumed by the parser. ) So the lexer has to be
> able to look at a sequence of characters and decide
> what token type to give it. 
> 
> 
> You probably need to read the Antlr documentation
> again and study some of the examples in order to
> create a workable approach to constructing a
> solution. 
> 
> 
> If you want to describe what you are trying to
> accomplish someone may be able to suggest an
> approach you can take. 
> 
> 
> Greg 
> 
> 
>  mark kant <markkant2001@yahoo.com> wrote: 
> 
> 
> 1. it is not "required" distinguishing character but
> that it may be present. The point is that there is a
> list of token which are supersets of some other
> tokens.
> 
> So in your question - what type of TOKEN is 'a' ?
> The answer is that 'a' can be NAME, ID and also
> TOKEN.
> If a digit follows 'a', then a lexer can either
> return
> NAME or an ID. If I let the lexer consume the digit
> and return an ID, but the parser was expecting only
> a
> NAME, then ID would be incorrect.
> To me a parser tell lexer to find a token from a set
> of X tokens.
> In my problem there are 2 or more sets of tokens.
> The
> parser needs to tell lexer which set to look for.
> 
> Thanks again for the discussion. I will really
> appreciate any help in this.
> 
> Mark
> 
> ----------------------
> --- Greg Lindholm wrote:
> > 
> > If each token type has a "required" distinguishing
> > character then there would not be an
> > non-determiniism, but that is not what you have
> > written in the rules below.
> > Did you decide which token type an 'a' is? How
> about
> > a '9'? You're not going to get very far building a
> > lexer until you make these basic decisions.
> > Once you have some example cases, if you then have
> > trouble building the lexer to match your examples,
> > then people on this list will help you.
> > mark kant wrote:There is a
> > slight difference. Each of them also has
> > extra characters to distinguish. Example TOKEN
> also
> > has '~' character in it. If I expected an ID, but
> I
> > return TOKEN_OR_ID, then how do I know it is a
> valid
> > ID (it may have '~' in it, which makes it invalid
> > ID,
> > but valid TOKEN )
> > 
> > 
> > Mark
> > 
> > ------------------------------
> > --- Greg Lindholm wrote:
> > > 
> > > To understand the non-determinism it might help
> > you
> > > if you consider some example tokens with this
> > lexer.
> > > If your lexer sees the single character 'a' what
> > > type of token would you like it to return? One
> of
> > > the non-determinism this lexer has is that 'a'
> > > matches the NAME, ID, and TOKEN rules. Which is
> > it?
> > > Note that ANTLR doesn't care what order the
> rules
> > > appear in (unlike lex). Same thing goes with the
> > > single character '9', it matches both TOKEN and
> > > NUMBER.
> > > So I recommend work up some example cases and
> > decide
> > > what you want your lexer to return for each
> case. 
> > > In some languages a given sequence of characters
> > can
> > > mean completely different things (different
> token
> > > type) based on the context of those characters. 
> > > Antlr is basically a context-free lexer
> > (predicates
> > > can help sometimes). In these cases you might
> need
> > > to delay exact identification of the token type
> > > until you know the context (symantic analysis
> > > phase). For example you might have the lexer
> > return
> > > a token type NAME_OR_ID then later figure out
> > which
> > > it is once you know the context.
> > > Hope this helps,
> > > Greg
> > > 
> > > mark kant wrote:How about
> > > the following lexer
> > > 
> > > 
> > > protected: 
> > > ALPHA: ('a'..'z'|'A'..'Z')
> > > ;
> > > protected:
> > > ALPHA_NUM: ('a'..'z'|'A'..'Z'|'0'..'9')
> > > ;
> > > protected:
> > > DIGIT: '0'..'9'
> > > ;
> > > 
> > > 
> > > NAME: (ALPHA) ((ALPHA) | '_' | '.') )*
> > > ;
> > > 
> > > ID: (ALPHA) ( (ALPHA_NUM) |'_'|'.'|'@')*
> > > ;
> > > 
> > > TOKEN: (ALPHANUM|'_'|'.'|'@'|'%'|';'|'~')+
> > > ;
> > > 
> > > NUMBER: ( DIGITS )+
> > > ;
> > > 
> > > 
> > > Thanks
> > > 
> > > Mark
> > > --- mzukowski@yci.com wrote:
> > > > remove your AT rule and then add a literal
> > keyword
> > > > AT='@' to the keywords
> > > > section and test for it in TOKEN by turning on
> > the
> > > > option testLiterals=true.
> > > > See the docs on literals.
> > > > 
> > > > Monty
> > > > 
> > > > -----Original Message-----
> 
=== message truncated ===


__________________________________________________
Do you Yahoo!?
Yahoo! Platinum - Watch CBS' NCAA March Madness, live on your desktop!
http://platinum.yahoo.com

 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From glindholm at yahoo.com  Wed Mar 26 14:12:03 2003
From: glindholm at yahoo.com (Greg Lindholm)
Date: Mon Dec 20 16:15:30 2004
Subject: [antlr-interest] parser controlling lexer (was non-determinism.)
In-Reply-To: <0881AC7F2F339C40BC6F7983D1E0BEC9730834@mail2k.embarcadero-ca.com>
Message-ID: <20030326221203.73173.qmail@web12406.mail.yahoo.com>


It's been noted many times on this list that it's not safe to do this because of lookahead in the parser.   When you set the flag in the parser there can be many tokens already buffered and the lexer can be far ahead.
 Albert Huh <albert.huh@embarcadero-ca.com> wrote:actually, you can control the lexer from the parser to a degree.  i'm not sure about switching rules, but you can definitely make the lexer change the token type depending on if you've set a flag or not. the parser will need a reference to the lexer to do this. within the lexer, you can simply add some actions like {  if (nameFlag) {    setType(NAME);  }} i probably didn't use the proper method name for changing the type, but you get the idea. though this probably isn't the greatest idea.  ideally the lexer and parser should be able to run independantly. -----Original Message-----
From: Greg Lindholm [mailto:glindholm@yahoo.com]
Sent: Wednesday, March 26, 2003 1:12 PM
To: antlr-interest@yahoogroups.com
Subject: RE: [antlr-interest] non-determinism.


Sorry, lexers and parsers (certainly Antlr) don't work the way you want them to.  There is no facility for the parser to tell the lexer what tokens to look for.  
The lexer acts mostly independently from the parser and it's job is to translate a stream of characters into a stream of tokens. (The tokens are then consumed by the parser. ) So the lexer has to be able to look at a sequence of characters and decide what token type to give it. 
You probably need to read the Antlr documentation again and study some of the examples in order to create a workable approach to constructing a solution. 
If you want to describe what you are trying to accomplish someone may be able to suggest an approach you can take. 
Greg 
 mark kant <markkant2001@yahoo.com> wrote: 1. it is not "required" distinguishing character but
that it may be present. The point is that there is a
list of token which are supersets of some other
tokens.

So in your question - what type of TOKEN is 'a' ?
The answer is that 'a' can be NAME, ID and also TOKEN.
If a digit follows 'a', then a lexer can either return
NAME or an ID. If I let the lexer consume the digit
and return an ID, but the parser was expecting only a
NAME, then ID would be incorrect.
To me a parser tell lexer to find a token from a set
of X tokens.
In my problem there are 2 or more sets of tokens. The
parser needs to tell lexer which set to look for.

Thanks again for the discussion. I will really
appreciate any help in this.

Mark

----------------------
--- Greg Lindholm wrote:
> 
> If each token type has a "required" distinguishing
> character then there would not be an
> non-determiniism, but that is not what you have
> written in the rules below.
> Did you decide which token type an 'a' is? How about
> a '9'? You're not going to get very far building a
> lexer until you make these basic decisions.
> Once you have some example cases, if you then have
> trouble building the lexer to match your examples,
> then people on this list will help you.
> mark kant wrote:There is a
> slight difference. Each of them also has
> extra characters to distinguish. Example TOKEN also
> has '~' character in it. If I expected an ID, but I
> return TOKEN_OR_ID, then how do I know it is a valid
> ID (it may have '~' in it, which makes it invalid
> ID,
> but valid TOKEN )
> 
> 
> Mark
> 
> ------------------------------
> --- Greg Lindholm wrote:
> > 
> > To understand the non-determinism it might help
> you
> > if you consider some example tokens with this
> lexer.
> > If your lexer sees the single character 'a' what
> > type of token would you like it to return? One of
> > the non-determinism this lexer has is that 'a'
> > matches the NAME, ID, and TOKEN rules. Which is
> it?
> > Note that ANTLR doesn't care what order the rules
> > appear in (unlike lex). Same thing goes with the
> > single character '9', it matches both TOKEN and
> > NUMBER.
> > So I recommend work up some example cases and
> decide
> > what you want your lexer to return for each case. 
> > In some languages a given sequence of characters
> can
> > mean completely different things (different token
> > type) based on the context of those characters. 
> > Antlr is basically a context-free lexer
> (predicates
> > can help sometimes). In these cases you might need
> > to delay exact identification of the token type
> > until you know the context (symantic analysis
> > phase). For example you might have the lexer
> return
> > a token type NAME_OR_ID then later figure out
> which
> > it is once you know the context.
> > Hope this helps,
> > Greg
> > 
> > mark kant wrote:How about
> > the following lexer
> > 
> > 
> > protected: 
> > ALPHA: ('a'..'z'|'A'..'Z')
> > ;
> > protected:
> > ALPHA_NUM: ('a'..'z'|'A'..'Z'|'0'..'9')
> > ;
> > protected:
> > DIGIT: '0'..'9'
> > ;
> > 
> > 
> > NAME: (ALPHA) ((ALPHA) | '_' | '.') )*
> > ;
> > 
> > ID: (ALPHA) ( (ALPHA_NUM) |'_'|'.'|'@')*
> > ;
> > 
> > TOKEN: (ALPHANUM|'_'|'.'|'@'|'%'|';'|'~')+
> > ;
> > 
> > NUMBER: ( DIGITS )+
> > ;
> > 
> > 
> > Thanks
> > 
> > Mark
> > --- mzukowski@yci.com wrote:
> > > remove your AT rule and then add a literal
> keyword
> > > AT='@' to the keywords
> > > section and test for it in TOKEN by turning on
> the
> > > option testLiterals=true.
> > > See the docs on literals.
> > > 
> > > Monty
> > > 
> > > -----Original Message-----
> > > From: mark kant [mailto:markkant2001@yahoo.com]
> > > Sent: Tuesday, March 25, 2003 9:42 AM
> > > To: antlr-interest@yahoogroups.com
> > > Subject: [antlr-interest] non-determinism.
> > > 
> > > 
> > > Hi,
> > > 
> > > I get non-determinism in the following lexer
> > > (relevant
> > > portion of parser and lexer)
> > > 
> > > hosport: host COLON password
> > > 
> > > password: TOKEN
> > > 
> > > host: NAME AT TOKEN
> > > 
> > > 
> > > lexer ...............
> > > 
> > > COLON: ':'
> > > 
> > > SEMI: ';'
> > > 
> > > AT: '@'
> > > 
> > > TOKEN: ('a'..'z' | 'A'..'Z'
> > > |'0'..'9'|'.'|':'|';'|'@')+
> > > 
> > > 
> > > What is the best way to resolve it:
> > > 1. multiple lexers
> > > 2. syntactic predicates - not appropriate as I
> > have
> > > other similar rules for special characters
> > > 3. some kind of flag set in parser and lexer
> > checks
> > > it
> > > before matching a rule in lexer (how do I
> > > communicate
> > > the flag state from parser to lexer). I have
> done
> > > this
> > > in Lex and YAcc.
> > > 
> > > Thanks
> > > 
> > > Mark
> > > 



---------------------------------
Do you Yahoo!?
Yahoo! Platinum - Watch CBS' NCAA March Madness, live on your desktop! 
Your use of Yahoo! Groups is subject to the Yahoo! Terms of Service. 

Your use of Yahoo! Groups is subject to the Yahoo! Terms of Service. 



---------------------------------
Do you Yahoo!?
Yahoo! Platinum - Watch CBS' NCAA March Madness, live on your desktop!
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20030326/175820e6/attachment.html
From madison_stjames at yahoo.com  Wed Mar 26 18:20:37 2003
From: madison_stjames at yahoo.com (madison_stjames)
Date: Mon Dec 20 16:15:30 2004
Subject: [antlr-interest] Dates and Lexical Non-Determinism
Message-ID: <b5tn5l+e1ld@eGroups.com>

I getting a lexical non-determinism error while trying to parse a 
date in the form 2003-03-22. Looking at my expression, I can see 
what is causing the problem. I am unsure, however how to fix it 
(being an ANTLR newbie).


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From Matthew.Ford at forward.com.au  Wed Mar 26 19:20:23 2003
From: Matthew.Ford at forward.com.au (Matthew Ford)
Date: Mon Dec 20 16:15:30 2004
Subject: [antlr-interest] Dates and Lexical Non-Determinism
References: <b5tn5l+e1ld@eGroups.com>
Message-ID: <000401c2f40f$cdeea0d0$0200a8c0@NOTEBOOK>

In the Lexer I used
then in the parser I used getText() and sorted out the internal form to
store the date.

protected
DATE
 : DIGIT DIGIT DIGIT DIGIT '/'
   DIGIT (DIGIT)? '/' DIGIT (DIGIT)?
 ;

matthew

----- Original Message -----
From: "madison_stjames" <madison_stjames@yahoo.com>
To: <antlr-interest@yahoogroups.com>
Sent: Thursday, March 27, 2003 1:20 PM
Subject: [antlr-interest] Dates and Lexical Non-Determinism


> I getting a lexical non-determinism error while trying to parse a
> date in the form 2003-03-22. Looking at my expression, I can see
> what is causing the problem. I am unsure, however how to fix it
> (being an ANTLR newbie).
>
>
>
>
> Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/
>
>


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From parrt at jguru.com  Wed Mar 26 21:03:01 2003
From: parrt at jguru.com (Terence Parr)
Date: Mon Dec 20 16:15:30 2004
Subject: [antlr-interest] non-determinism.
In-Reply-To: <20030326195030.16784.qmail@web13604.mail.yahoo.com>
Message-ID: <62C8EFC4-6011-11D7-AD40-000393BB647E@jguru.com>


On Wednesday, March 26, 2003, at 11:50  AM, mark kant wrote:

> Hi,
>
> This is what I was looking for, but how do I declare
> the flag, so that I can set it parser and check it in
> lexer ?

Just so you know...this won't work all the time depending on your input 
grammar.

Terence
--
Co-founder, http://www.jguru.com
Creator, ANTLR Parser Generator: http://www.antlr.org
Lecturer in Comp. Sci., University of San Francisco


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From Anthony.Youngman at ECA-International.com  Thu Mar 27 00:05:50 2003
From: Anthony.Youngman at ECA-International.com (Anthony Youngman)
Date: Mon Dec 20 16:15:30 2004
Subject: [antlr-interest] .toStringTree()
Message-ID: <0EF9DEABA42FE547BAE43D0298F146B23DD5BC@ESP.eca-international.local>

Skipped content of type multipart/alternative
From thomas.rolfs at cox.net  Thu Mar 27 00:12:20 2003
From: thomas.rolfs at cox.net (Thomas Rolfs)
Date: Mon Dec 20 16:15:30 2004
Subject: [antlr-interest] Newbie Question : Exception crash in C++ VC7
Message-ID: <001001c2f438$98917290$6501a8c0@p4system>

I do not have any experience with exception handling in C++ so any pointers are appreciated...
I am getting a crash when the following exception is caught at the bottom of CSLLexer::nextToken()

catch (ANTLR_USE_NAMESPACE(antlr)CharStreamIOException& csie) {
    throw ANTLR_USE_NAMESPACE(antlr)TokenStreamIOException(csie.io);
}
The crash seems to be due to "csie" being invalid. I am guessing the exception originated from CharBuffer::getChar(), but that is a guess. Obviously the exception is due to a problem with the grammar but having the exception generate it own exception is not helpful.

Some info:

Compiling my project under MS VC7 (.NET). 
Building the antlr 2.7.2 lib code as a separate static library and link it in. (There are quite a lot of warnings when I build the library code but they don't seem relevant.) 
I do not create my own exception handlers. 
Other exceptions such as "unrecognized token" seem to work fine.
Here is my grammar file minus the grammar rules:

options { language="Cpp"; }
class CSLParser extends Parser;
options {
    exportVocab=CSL;
    buildAST = true; 
     k = 2;
}
.....
class CSLLexer extends Lexer;
options {
    charVocabulary = '\0'..'\377';
    testLiterals=false;    // don't automatically test for literals
    k=2;                   // two characters of lookahead
}
....

Again, any help is appreciated.

Thanks,
Thomas Rolfs.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20030327/b2e71c2f/attachment.html
From zai-qiang.leng at sybase.com  Thu Mar 27 00:25:17 2003
From: zai-qiang.leng at sybase.com (zai-qiang.leng@sybase.com)
Date: Mon Dec 20 16:15:30 2004
Subject: [antlr-interest] How to write '\v' in antlr grammar?
Message-ID: <OF02C019E0.CA5D8135-ON48256CF5.0014509E@sybase.com>

Hi,

I have following lexer rules,

protected
ESC
     :    '~'!
          (
               'n'       {$setText('\n');}
          |    'r'       {$setText('\r');}
          |    'v'       {$setText('\v');}                        //If I
change the '\v' to ''(empty char), all is ok.
          |    't'       {$setText('\t');}
          |    'f'       {$setText('\f');}
          |    'b'       {$setText('\b');}
          |    ('0'..'2') (Digit) (Digit)
          );


but when I compile it via antlr, I got following errors:

NTLR Parser Generator   Version 2.7.1   1989-2000 jGuru.com
error: Token stream error reading
grammar(s):antlr.TokenStreamRecognitionException: unexpected char: v
TokenStreamException: unexpected char: v
Error executing c:\winnt\system32\cmd.exe.


Can anyone tell me how to solve this?

Thanks
Zaiqiang


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From Anthony.Youngman at ECA-International.com  Thu Mar 27 02:46:38 2003
From: Anthony.Youngman at ECA-International.com (Anthony Youngman)
Date: Mon Dec 20 16:15:30 2004
Subject: [antlr-interest] .toStringTree()
Message-ID: <0EF9DEABA42FE547BAE43D0298F146B23DD5BF@ESP.eca-international.local>

Skipped content of type multipart/alternative
From klaren at cs.utwente.nl  Thu Mar 27 02:55:49 2003
From: klaren at cs.utwente.nl (Ric Klaren)
Date: Mon Dec 20 16:15:30 2004
Subject: [antlr-interest] Missing messages
Message-ID: <20030327115549.S5251@cs.utwente.nl>

Hi,

For some reason the #@$#@$ yahoogroups is disabling my account at random,
so if C++ centric stuff was posted in the last days you might wanna bounce
it in my direction. (Unless it is msvc stuff/broken configure stuff use the
archives for that, I still need to find time to fix that stuff)

Cheers,

Ric
--
-----+++++*****************************************************+++++++++-------
    ---- Ric Klaren ----- j.klaren@utwente.nl ----- +31 53 4893722  ----
-----+++++*****************************************************+++++++++-------
 Why don't we just invite them to dinner and massacre them all when they're
  drunk? You heard the man. There's seven hundred thousand of them. Ah? ..
           So it'd have to be something simple with pasta, then.
                 From: Interesting Times by Terry Pratchet


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From albert.huh at embarcadero-ca.com  Thu Mar 27 08:54:51 2003
From: albert.huh at embarcadero-ca.com (Albert Huh)
Date: Mon Dec 20 16:15:30 2004
Subject: [antlr-interest] How to write '\v' in antlr grammar?
Message-ID: <0881AC7F2F339C40BC6F7983D1E0BEC97683C3@mail2k.embarcadero-ca.com>

are you sure '\v' is a valid escape sequence in java/c++?

i could be wrong, but i don't think \v means anything at all...


-----Original Message-----
From: zai-qiang.leng@sybase.com [mailto:zai-qiang.leng@sybase.com]
Sent: Thursday, March 27, 2003 3:25 AM
To: antlr-interest@yahoogroups.com
Subject: [antlr-interest] How to write '\v' in antlr grammar?


Hi,

I have following lexer rules,

protected
ESC
     :    '~'!
          (
               'n'       {$setText('\n');}
          |    'r'       {$setText('\r');}
          |    'v'       {$setText('\v');}                        //If I
change the '\v' to ''(empty char), all is ok.
          |    't'       {$setText('\t');}
          |    'f'       {$setText('\f');}
          |    'b'       {$setText('\b');}
          |    ('0'..'2') (Digit) (Digit)
          );


but when I compile it via antlr, I got following errors:

NTLR Parser Generator   Version 2.7.1   1989-2000 jGuru.com
error: Token stream error reading
grammar(s):antlr.TokenStreamRecognitionException: unexpected char: v
TokenStreamException: unexpected char: v
Error executing c:\winnt\system32\cmd.exe.


Can anyone tell me how to solve this?

Thanks
Zaiqiang


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 



 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From zai-qiang.leng at sybase.com  Thu Mar 27 17:27:17 2003
From: zai-qiang.leng at sybase.com (zai-qiang.leng@sybase.com)
Date: Mon Dec 20 16:15:30 2004
Subject: [antlr-interest] How to write '\v' in antlr grammar?
Message-ID: <OF6DDCD329.849A52F8-ON48256CF7.0007D2A0@sybase.com>


I am not sure if '\v' is a valid escape char in Java, but I am sure it is a
valid escape char in C++.  I got following messages from MSDN:

Table 1.4???Escape Sequences


|---------------+-----------------------------|
|               |                             |
|  Escape       |  Represents                 |
|  Sequence     |                             |
|               |                             |
|---------------+-----------------------------|
|               |                             |
|  \a           |  Bell (alert)               |
|               |                             |
|---------------+-----------------------------|
|               |                             |
|  \b           |  Backspace                  |
|               |                             |
|---------------+-----------------------------|
|               |                             |
|  \f           |  Formfeed                   |
|               |                             |
|---------------+-----------------------------|
|               |                             |
|  \n           |  New line                   |
|               |                             |
|---------------+-----------------------------|
|               |                             |
|  \r           |  Carriage return            |
|               |                             |
|---------------+-----------------------------|
|               |                             |
|  \t           |  Horizontal tab             |
|               |                             |
|---------------+-----------------------------|
|               |                             |
|  \v           |  Vertical tab               |
|               |                             |
|---------------+-----------------------------|
|               |                             |
|  \'           |  Single quotation mark      |
|               |                             |
|---------------+-----------------------------|
|               |                             |
|  \"           |  Double quotation mark      |
|               |                             |
|---------------+-----------------------------|
|               |                             |
|  \\           |  Backslash                  |
|               |                             |
|---------------+-----------------------------|
|               |                             |
|  \?           |  Literal question mark      |
|               |                             |
|---------------+-----------------------------|
|               |                             |
|  \ooo         |  ASCII character in octal   |
|               |  notation                   |
|               |                             |
|---------------+-----------------------------|
|               |                             |
|  \xhhh        |  ASCII character in         |
|               |  hexadecimal notation       |
|               |                             |
|---------------+-----------------------------|




Thanks
Zaiqiang



                                                                                                                          
                    "Albert Huh"                                                                                          
                    <albert.huh@embarcade       To:     <antlr-interest@yahoogroups.com>                                  
                    ro-ca.com>                  cc:                                                                       
                                                Subject:     RE: [antlr-interest] How to write '\v' in antlr grammar?     
                    03/28/03 12:54 AM                                                                                     
                    Please respond to                                                                                     
                    antlr-interest                                                                                        
                                                                                                                          
                                                                                                                          



are you sure '\v' is a valid escape sequence in java/c++?

i could be wrong, but i don't think \v means anything at all...


-----Original Message-----
From: zai-qiang.leng@sybase.com [mailto:zai-qiang.leng@sybase.com]
Sent: Thursday, March 27, 2003 3:25 AM
To: antlr-interest@yahoogroups.com
Subject: [antlr-interest] How to write '\v' in antlr grammar?


Hi,

I have following lexer rules,

protected
ESC
     :    '~'!
          (
               'n'       {$setText('\n');}
          |    'r'       {$setText('\r');}
          |    'v'       {$setText('\v');}                        //If I
change the '\v' to ''(empty char), all is ok.
          |    't'       {$setText('\t');}
          |    'f'       {$setText('\f');}
          |    'b'       {$setText('\b');}
          |    ('0'..'2') (Digit) (Digit)
          );


but when I compile it via antlr, I got following errors:

NTLR Parser Generator   Version 2.7.1   1989-2000 jGuru.com
error: Token stream error reading
grammar(s):antlr.TokenStreamRecognitionException: unexpected char: v
TokenStreamException: unexpected char: v
Error executing c:\winnt\system32\cmd.exe.


Can anyone tell me how to solve this?

Thanks
Zaiqiang




Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/





Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/








 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From Trey.Spiva at embarcadero.com  Fri Mar 28 04:41:24 2003
From: Trey.Spiva at embarcadero.com (Trey Spiva)
Date: Mon Dec 20 16:15:30 2004
Subject: [antlr-interest] Parse tree error messages.
Message-ID: <5DEEF5A894731F4B92D58E2FC37EB28A0614F6@etdema1.embarcadero.com>

When parsing a file the recognizers report pretty good error messages.
However, when using parse trees the error messages are very cryptic.  Is
here a way to have the tree parser at least report the token AST type
that it is expecting and the AST type that if found.

The error message that the tree parser is reporting is:

<AST> : unexpected AST node: <ASTNULL>

 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From bhagenbuch at didera.com  Fri Mar 28 13:23:57 2003
From: bhagenbuch at didera.com (bchagenbuch)
Date: Mon Dec 20 16:15:30 2004
Subject: [antlr-interest] Parser behavior on invalid input - Newbee question
Message-ID: <b62ehd+g3im@eGroups.com>

I encountered a puzzling (to a newbee like me) behavior while writing a rule to parse compound names of lengths 1 to 3, like "a", "a.b", or "a.b.c".  I tried 3 different formulations:

The first one has the disadvantage of recognizing names that are too long, but is fine otherwise.

	name1 : ID ( DOT ID )* { my_action(); } ;


The other two recognize exactly what I want:

	name2 : ID ( DOT ID ( DOT ID )? )? { my_action(); } ;

	name3 : ID ( part1 | ) { my_action(); } ;
	part1 : DOT ID ( part2 | ) ;
	part2 : DOT ID ;

On certain invalid inputs, however, my_action() isn't executed, and I think it should be. 

In particular, when name2 or name3 sees "a.b.c BAD-STUFF", 
	- my_action() is executed, then 
	- the bad stuff causes an exception, as expected,

	BUT
	
when name2 or name3 sees "a.b BAD-STUFF" or "a BAD-STUFF", 
	- the bad stuff causes an exception, and my_action() is skipped. 

When I look at the generated parser, I can see why this occurs, but when I look at the rules in the grammar, I can't.

What am I missing?

Thanks in advance.
Brian

-------- A complete grammar showing the behavior follows --------

class P extends Parser;

// Try the various start rules with the following inputs:
 
// 1.   "(a)", "(a.b)", "(a.b.c)"  // ok
// 2.   "(a.b.c.d)"  // ok
// 3.   "(a x)", "(a.b x)" // surprise! only start1 triggers action.
// 4.   "(a.b.c x)" // ok
// 5.   "(a.b.c.d x)" // ok

// My expectation was that all the inputs would trigger the action
// of printing a message, though input sets 2-5 should throw an 
// exception thereafter. (Or, in the case of start1, sets 3-5)

// The surprise is that start2 and start3 don't trigger the action
// on the inputs in set 3.


options { k = 2; }

start1	: OPEN name1 CLOSE
		;

name1	: ID ( DOT ID )*  
			{ System.out.println("Saw a (maybe too long) name."); } 
		;
		

start2	: OPEN name2 CLOSE
		;

name2	: ID ( DOT ID ( DOT ID )? )? 
			{ System.out.println("Saw a name."); }
		;

start3	: OPEN name3 CLOSE
		;

name3	: ID ( part1 | )
			{ System.out.println("Saw a name."); }
		;

protected
part1	: DOT ID ( part2 |  )
		;

protected
part2	: DOT ID 
		;
		

class L extends Lexer;

options { k = 2; }

ID		: ('a'..'z')
		;

DOT		: '.'
		;

OPEN	: '('
		;

CLOSE	: ')'
		;

WS		: ( ' '|'\t'
		  | ("\r\n"|'\r'|'\n') 
		    	{newline();}
		  ) 
		  	{ $setType(Token.SKIP); }
		;



 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From albert.huh at embarcadero-ca.com  Fri Mar 28 13:38:41 2003
From: albert.huh at embarcadero-ca.com (Albert Huh)
Date: Mon Dec 20 16:15:30 2004
Subject: [antlr-interest] How to write '\v' in antlr grammar?
Message-ID: <0881AC7F2F339C40BC6F7983D1E0BEC9730840@mail2k.embarcadero-ca.com>

maybe it's a bug in the antlr grammar?? the antlr compiler is croaking on the '\v'.  the antlr compiler is in java.  maybe you could try '\\v' instead??  i'm just guessing here.

-----Original Message-----
From: zai-qiang.leng@sybase.com [mailto:zai-qiang.leng@sybase.com]
Sent: Thursday, March 27, 2003 8:27 PM
To: antlr-interest@yahoogroups.com
Subject: RE: [antlr-interest] How to write '\v' in antlr grammar?



I am not sure if '\v' is a valid escape char in Java, but I am sure it is a
valid escape char in C++.  I got following messages from MSDN:

Table 1.4???Escape Sequences


|---------------+-----------------------------|
|               |                             |
|  Escape       |  Represents                 |
|  Sequence     |                             |
|               |                             |
|---------------+-----------------------------|
|               |                             |
|  \a           |  Bell (alert)               |
|               |                             |
|---------------+-----------------------------|
|               |                             |
|  \b           |  Backspace                  |
|               |                             |
|---------------+-----------------------------|
|               |                             |
|  \f           |  Formfeed                   |
|               |                             |
|---------------+-----------------------------|
|               |                             |
|  \n           |  New line                   |
|               |                             |
|---------------+-----------------------------|
|               |                             |
|  \r           |  Carriage return            |
|               |                             |
|---------------+-----------------------------|
|               |                             |
|  \t           |  Horizontal tab             |
|               |                             |
|---------------+-----------------------------|
|               |                             |
|  \v           |  Vertical tab               |
|               |                             |
|---------------+-----------------------------|
|               |                             |
|  \'           |  Single quotation mark      |
|               |                             |
|---------------+-----------------------------|
|               |                             |
|  \"           |  Double quotation mark      |
|               |                             |
|---------------+-----------------------------|
|               |                             |
|  \\           |  Backslash                  |
|               |                             |
|---------------+-----------------------------|
|               |                             |
|  \?           |  Literal question mark      |
|               |                             |
|---------------+-----------------------------|
|               |                             |
|  \ooo         |  ASCII character in octal   |
|               |  notation                   |
|               |                             |
|---------------+-----------------------------|
|               |                             |
|  \xhhh        |  ASCII character in         |
|               |  hexadecimal notation       |
|               |                             |
|---------------+-----------------------------|




Thanks
Zaiqiang



                                                                                                                          
                    "Albert Huh"                                                                                          
                    <albert.huh@embarcade       To:     <antlr-interest@yahoogroups.com>                                  
                    ro-ca.com>                  cc:                                                                       
                                                Subject:     RE: [antlr-interest] How to write '\v' in antlr grammar?     
                    03/28/03 12:54 AM                                                                                     
                    Please respond to                                                                                     
                    antlr-interest                                                                                        
                                                                                                                          
                                                                                                                          



are you sure '\v' is a valid escape sequence in java/c++?

i could be wrong, but i don't think \v means anything at all...


-----Original Message-----
From: zai-qiang.leng@sybase.com [mailto:zai-qiang.leng@sybase.com]
Sent: Thursday, March 27, 2003 3:25 AM
To: antlr-interest@yahoogroups.com
Subject: [antlr-interest] How to write '\v' in antlr grammar?


Hi,

I have following lexer rules,

protected
ESC
     :    '~'!
          (
               'n'       {$setText('\n');}
          |    'r'       {$setText('\r');}
          |    'v'       {$setText('\v');}                        //If I
change the '\v' to ''(empty char), all is ok.
          |    't'       {$setText('\t');}
          |    'f'       {$setText('\f');}
          |    'b'       {$setText('\b');}
          |    ('0'..'2') (Digit) (Digit)
          );


but when I compile it via antlr, I got following errors:

NTLR Parser Generator   Version 2.7.1   1989-2000 jGuru.com
error: Token stream error reading
grammar(s):antlr.TokenStreamRecognitionException: unexpected char: v
TokenStreamException: unexpected char: v
Error executing c:\winnt\system32\cmd.exe.


Can anyone tell me how to solve this?

Thanks
Zaiqiang




Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/





Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/








 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 



 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From lgc at mail1.jpl.nasa.gov  Fri Mar 28 13:53:30 2003
From: lgc at mail1.jpl.nasa.gov (lgcraymer)
Date: Mon Dec 20 16:15:30 2004
Subject: [antlr-interest] Re: Parse tree error messages.
In-Reply-To: <5DEEF5A894731F4B92D58E2FC37EB28A0614F6@etdema1.embarcadero.com>
Message-ID: <b62g8q+5891@eGroups.com>

Trey--

This particular message says that you fell off of a tree--it found 
"null" when an AST was expected.  In general, it is hard to figure out 
what good error reporting would look like.  Try catching the exception 
in a debugger--I find that it helps to poke around to find context for 
the message.

--Loring


--- In antlr-interest@yahoogroups.com, "Trey Spiva" <Trey.Spiva@e...> 
wrote:
> When parsing a file the recognizers report pretty good error 
messages.
> However, when using parse trees the error messages are very cryptic. 
 Is
> here a way to have the tree parser at least report the token AST 
type
> that it is expecting and the AST type that if found.
> 
> The error message that the tree parser is reporting is:
> 
> <AST> : unexpected AST node: <ASTNULL>


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From cesar at ciencias.unam.mx  Fri Mar 28 22:16:39 2003
From: cesar at ciencias.unam.mx (Cesar Octavio =?iso-8859-1?Q?L=F3pez?= Nataren)
Date: Mon Dec 20 16:15:30 2004
Subject: [antlr-interest] C# code generator.
Message-ID: <courier.3E853A47.000035ED@galadriel.fciencias.unam.mx>

Hello: 

I've already installed antlr successfully on Windows, but I can't get the 
CSharp code generator to work. 

where do I have to put the antlr.runtime.dll?
I have already tried putting it where all my other .Net assemblies are, but 
did not make a difference. 

When trying to build the csharp\calc sample, I get the next error message: 

Exception  in thread "main" java.lang.NoClassDefFoundError: 
antlr/actions/csharp/ActionLexer 

     at 
antlr.CSharpCodeGenerator.processActionForSpecialSymbol(CSharpCodeGenerator. 
java: 3841)
........ 


Greetings and thanks for all the help. 

c?sar 

 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From open.zone at virgin.net  Sat Mar 29 10:23:22 2003
From: open.zone at virgin.net (micheal_jor)
Date: Mon Dec 20 16:15:30 2004
Subject: [antlr-interest] Re: C# code generator.
In-Reply-To: <courier.3E853A47.000035ED@galadriel.fciencias.unam.mx>
Message-ID: <b64oaq+htrn@eGroups.com>

> Hello: 

Hello Cesar,

> I've already installed antlr successfully on Windows, but I can't 
get the 
> CSharp code generator to work. 

Can you describe what you have done and the nature of the problems 
you are experiencing in a little more detail please?

> where do I have to put the antlr.runtime.dll?

In the same directory as the assembly (or assemblies) that reference 
it is a safe bet.

> I have already tried putting it where all my other .Net assemblies 
are, but 
> did not make a difference. 

I don't understand this point. Are you saying you have some directory 
(other than the GAC) where you put *all* .NET assemblies?.

Why?

> When trying to build the csharp\calc sample, I get the next error 
message: 
> 
> Exception  in thread "main" java.lang.NoClassDefFoundError: 
> antlr/actions/csharp/ActionLexer 
> 
>      at 
> antlr.CSharpCodeGenerator.processActionForSpecialSymbol
(CSharpCodeGenerator. 
> java: 3841)
> ........ 

This suggests to me that you haven't built the C# codegen as detailed 
in the install notes. The JVM is unable to find the C# codegen's 
ActionLexer class.


Cheers,

Micheal



 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From cesar at ciencias.unam.mx  Sat Mar 29 13:38:02 2003
From: cesar at ciencias.unam.mx (Cesar Octavio =?iso-8859-1?Q?L=F3pez?= Nataren)
Date: Mon Dec 20 16:15:30 2004
Subject: [antlr-interest] Re: C# code generator.
In-Reply-To: <b64oaq+htrn@eGroups.com> 
References: <b64oaq+htrn@eGroups.com>
Message-ID: <courier.3E86123A.00005A6B@galadriel.fciencias.unam.mx>

micheal_jor writes: 

>> Hello: 
> 
> Hello Cesar, 
> 
>> I've already installed antlr successfully on Windows, but I can't 
> get the 
>> CSharp code generator to work. 
> 
> Can you describe what you have done and the nature of the problems 
> you are experiencing in a little more detail please?
 

Hello micheal, I managed to get the CSharp code generator to work. Looks 
like I had old .class and .dll right there. I cleaned everything up and 
build them again and everything worked. 

Just one thing. I build them with nant, and I had to copy the file
antlr-2.7.2\lib\csharp\src\AssemblyInfo.cs to antlr-2.7.2\lib\csharp
in order to be able to build it. I'm not sure if it's a bug on nant or what. 
I just wanted to mention it. 

Thanks for all. 

Best Regards. 


c?sar 

 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From open.zone at virgin.net  Sat Mar 29 14:56:19 2003
From: open.zone at virgin.net (micheal_jor)
Date: Mon Dec 20 16:15:30 2004
Subject: [antlr-interest] Re: C# code generator.
In-Reply-To: <courier.3E86123A.00005A6B@galadriel.fciencias.unam.mx>
Message-ID: <b658aj+o296@eGroups.com>

> > Can you describe what you have done and the nature of the 
problems 
> > you are experiencing in a little more detail please?
>  
> 
> Hello micheal, I managed to get the CSharp code generator to work. 
Looks 
> like I had old .class and .dll right there. I cleaned everything up 
and 
> build them again and everything worked. 

Cool. I thought it was a build problem.

> Just one thing. I build them with nant, and I had to copy the file
> antlr-2.7.2\lib\csharp\src\AssemblyInfo.cs to antlr-2.7.2\lib\csharp
> in order to be able to build it. I'm not sure if it's a bug on nant 
or what. 
> I just wanted to mention it. 

This is the first report of this and I'm tempted to attribute it to 
some peculiarity of your system environment there. I promise to look 
into this. Can you give any more details of your environment?. 
Version numbers of your copy of Nant, Windows, .NET etc.

Cheers,

Micheal



 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From cesar at ciencias.unam.mx  Sat Mar 29 16:19:34 2003
From: cesar at ciencias.unam.mx (Cesar Octavio =?iso-8859-1?Q?L=F3pez?= Nataren)
Date: Mon Dec 20 16:15:30 2004
Subject: [antlr-interest] Re: C# code generator.
In-Reply-To: <b658aj+o296@eGroups.com> 
References: <b658aj+o296@eGroups.com>
Message-ID: <courier.3E863816.00005F5F@galadriel.fciencias.unam.mx>

micheal_jor writes: 


>> Just one thing. I build them with nant, and I had to copy the file
>> antlr-2.7.2\lib\csharp\src\AssemblyInfo.cs to antlr-2.7.2\lib\csharp
>> in order to be able to build it. I'm not sure if it's a bug on nant 
> or what. 
>> I just wanted to mention it. 
> 
> This is the first report of this and I'm tempted to attribute it to 
> some peculiarity of your system environment there. I promise to look 
> into this. Can you give any more details of your environment?. 
> Version numbers of your copy of Nant, Windows, .NET etc. 
> 

Sure, here they are: 

 - Microsoft Windows XP Professional, Version 2002
 - nant, version 0.8.1
 - Microsoft.Net version 1.0.3705
 - csc, version 7.00.9466
 - j2sdk1.4.1_02 

Writing commands from a DOS term. 


I hope it helps. 

Best Regards. 

 


c?sar 

 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From cesar at ciencias.unam.mx  Sun Mar 30 15:51:26 2003
From: cesar at ciencias.unam.mx (Cesar Octavio Lopez Nataren)
Date: Mon Dec 20 16:15:30 2004
Subject: [antlr-interest] common prefix on Parser rules.
Message-ID: <1049068287.1130.6.camel@totopo>

Hello, this is more a grammar design question but antlr related ;)

Look:

Supose I have the next grammar description:

MemberExpresion: new  MemberExpression Arguments

NewExpression: new NewExpression | MemberExpression


Obviously the new prefix is causing a non-determinism escenario. Any
suggestion for transforming this description to let antlr generate a
correct parser?

MemberExpression has others rules too, not just "new MemberExpression
Arguments".


Thanks  a lot in advance.


cesar 



 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From jbb at acm.org  Sun Mar 30 16:22:00 2003
From: jbb at acm.org (jbb@acm.org)
Date: Mon Dec 20 16:15:30 2004
Subject: [antlr-interest] common prefix on Parser rules.
In-Reply-To: <1049068287.1130.6.camel@totopo> (message from Cesar Octavio
	Lopez Nataren on 30 Mar 2003 17:51:26 -0600)
References: <1049068287.1130.6.camel@totopo>
Message-ID: <E18zn3o-00030p-00@gecko.home.org>


>Hello, this is more a grammar design question but antlr related ;)
>
>Look:
>
>Supose I have the next grammar description:
>
>MemberExpresion: new  MemberExpression Arguments
>
>NewExpression: new NewExpression | MemberExpression
>
>
>Obviously the new prefix is causing a non-determinism escenario. Any
>suggestion for transforming this description to let antlr generate a
>correct parser?
>
>MemberExpression has others rules too, not just "new MemberExpression
>Arguments".

[I assume that you meant MemberExpression on the lhs of the first rule above]
                                    ^^

Note that this is *not* a grammar design question but rather is a
question of how to transform a grammar into proper LL(k) form (for
some finite value of k).

Observe that:

NewExpression: new NewExpression | MemberExpression

is equivalent to (unless there are also other NewExpression rules you
didn't tell us about):

NewExpression: ( new )* MemberExpression


Thus we now have

MemberExpression: new  MemberExpression Arguments ;
NewExpression: ( new )* MemberExpression ;

which is the same as

MemberExpression: ( new )+  MemberExpression Arguments ;
NewExpression: MemberExpression ;

You said that there are other MemberExpression rules so this result
may not be of any use to you...
-- 
	-jbb
----------------+----------------------------
 John B. Brodie | Email : jbrodie@cs.fit.edu
----------------+----------------------------

 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From zai-qiang.leng at sybase.com  Sun Mar 30 18:46:22 2003
From: zai-qiang.leng at sybase.com (zai-qiang.leng@sybase.com)
Date: Mon Dec 20 16:15:30 2004
Subject: [antlr-interest] How to add the initial code into the Lexer/Parser's constructor
Message-ID: <OFCA386051.3357893F-ON48256CFA.000EFF78@sybase.com>

Hi, all,

I want to init some variables in the Lexer/Parser's constructor and deinit
it in their destructor.  How can I achieve this?  I mean whether there
exists some special sections or keywords that allow me to write the
init/deinit code in the grammar file.

Thanks
Zaiqiang



 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From klaren at cs.utwente.nl  Mon Mar 31 01:18:26 2003
From: klaren at cs.utwente.nl (Ric Klaren)
Date: Mon Dec 20 16:15:30 2004
Subject: [antlr-interest] How to write '\v' in antlr grammar?
In-Reply-To: <0881AC7F2F339C40BC6F7983D1E0BEC9730840@mail2k.embarcadero-ca.com>; from albert.huh@embarcadero-ca.com on Fri, Mar 28, 2003 at 04:38:41PM -0500
References: <0881AC7F2F339C40BC6F7983D1E0BEC9730840@mail2k.embarcadero-ca.com>
Message-ID: <20030331111826.A15053@cs.utwente.nl>

On Fri, Mar 28, 2003 at 04:38:41PM -0500, Albert Huh wrote:
> maybe it's a bug in the antlr grammar?? the antlr compiler is croaking on
> the '\v'.  the antlr compiler is in java.  maybe you could try '\\v'
> instead??  i'm just guessing here.

Seems \v is not available in java (after quick check of the spec) In C/C++
it's valid. Not 100% sure if '\\v' will work might (my guess is no) try
'\013' in stead which should be equivalent to \v.

I added \v to the action lexer of C++ mode, where it will make sense.
(meaning that in the next release it's possible to use '\v' in actions)

Cheers,

Ric
-- 
-----+++++*****************************************************+++++++++-------
    ---- Ric Klaren ----- j.klaren@utwente.nl ----- +31 53 4893722  ----
-----+++++*****************************************************+++++++++-------
  Chaos is found in greatest abundance wherever order is being sought.
  --- Terry Pratchet


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From gudnabrsam at yahoo.com  Mon Mar 31 06:57:11 2003
From: gudnabrsam at yahoo.com (Matt Benson)
Date: Mon Dec 20 16:15:30 2004
Subject: [antlr-interest] How to add the initial code into the Lexer/Parser's constructor
In-Reply-To: <OFCA386051.3357893F-ON48256CFA.000EFF78@sybase.com>
Message-ID: <20030331145711.66320.qmail@web20422.mail.yahoo.com>

I only use Java, but you can include custom Java code
in a set of curly/french braces {} after the
declaration of your class:

class P extends Parser;

options {}

{
//custom parser code
}

class L extends Lexer;
options {}

{
//custom lexer code
}

-Matt


--- zai-qiang.leng@sybase.com wrote:
> Hi, all,
> 
> I want to init some variables in the Lexer/Parser's
> constructor and deinit
> it in their destructor.  How can I achieve this?  I
> mean whether there
> exists some special sections or keywords that allow
> me to write the
> init/deinit code in the grammar file.
> 
> Thanks
> Zaiqiang
> 
> 
> 
>  
> 
> Your use of Yahoo! Groups is subject to
> http://docs.yahoo.com/info/terms/ 
> 
> 


__________________________________________________
Do you Yahoo!?
Yahoo! Platinum - Watch CBS' NCAA March Madness, live on your desktop!
http://platinum.yahoo.com

 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From mzukowski at yci.com  Mon Mar 31 08:19:28 2003
From: mzukowski at yci.com (mzukowski@yci.com)
Date: Mon Dec 20 16:15:30 2004
Subject: [antlr-interest] non-determinism.
Message-ID: <170826586F3BD511910D0200C110AAA805402266@memail03.bco-home.com>

That's playing with fire.  If you actually do any feedback from the parser
to the lexer you have to manually guarantee that the tokens you want to have
an effect on have not yet been lexed.  Your parser will be at least k tokens
behind the lexer.  If you use syntactic predicates then you will have lexed
every token needed to evaluate that predicate.

Monty

-----Original Message-----
From: Albert Huh [mailto:albert.huh@embarcadero-ca.com]
Sent: Wednesday, March 26, 2003 11:41 AM
To: antlr-interest@yahoogroups.com
Subject: RE: [antlr-interest] non-determinism.


actually, you can control the lexer from the parser to a degree.  i'm not
sure about switching rules, but you can definitely make the lexer change the
token type depending on if you've set a flag or not.

the parser will need a reference to the lexer to do this.

within the lexer, you can simply add some actions like

{
  if (nameFlag) {
    setType(NAME);
  }
}

i probably didn't use the proper method name for changing the type, but you
get the idea.

though this probably isn't the greatest idea.  ideally the lexer and parser
should be able to run independantly. 
-----Original Message-----
From: Greg Lindholm [mailto:glindholm@yahoo.com]
Sent: Wednesday, March 26, 2003 1:12 PM
To: antlr-interest@yahoogroups.com
Subject: RE: [antlr-interest] non-determinism.


Sorry, lexers and parsers (certainly Antlr) don't work the way you want them
to.  There is no facility for the parser to tell the lexer what tokens to
look for.  
The lexer acts mostly independently from the parser and it's job is to
translate a stream of characters into a stream of tokens. (The tokens are
then consumed by the parser. ) So the lexer has to be able to look at a
sequence of characters and decide what token type to give it. 
You probably need to read the Antlr documentation again and study some of
the examples in order to create a workable approach to constructing a
solution. 
If you want to describe what you are trying to accomplish someone may be
able to suggest an approach you can take. 
Greg 
 mark kant <markkant2001@yahoo.com> wrote: 
1. it is not "required" distinguishing character but
that it may be present. The point is that there is a
list of token which are supersets of some other
tokens.

So in your question - what type of TOKEN is 'a' ?
The answer is that 'a' can be NAME, ID and also TOKEN.
If a digit follows 'a', then a lexer can either return
NAME or an ID. If I let the lexer consume the digit
and return an ID, but the parser was expecting only a
NAME, then ID would be incorrect.
To me a parser tell lexer to find a token from a set
of X tokens.
In my problem there are 2 or more sets of tokens. The
parser needs to tell lexer which set to look for.

Thanks again for the discussion. I will really
appreciate any help in this.

Mark

----------------------
--- Greg Lindholm wrote:
> 
> If each token type has a "required" distinguishing
> character then there would not be an
> non-determiniism, but that is not what you have
> written in the rules below.
> Did you decide which token type an 'a' is? How about
> a '9'? You're not going to get very far building a
> lexer until you make these basic decisions.
> Once you have some example cases, if you then have
> trouble building the lexer to match your examples,
> then people on this list will help you.
> mark kant wrote:There is a
> slight difference. Each of them also has
> extra characters to distinguish. Example TOKEN also
> has '~' character in it. If I expected an ID, but I
> return TOKEN_OR_ID, then how do I know it is a valid
> ID (it may have '~' in it, which makes it invalid
> ID,
> but valid TOKEN )
> 
> 
> Mark
> 
> ------------------------------
> --- Greg Lindholm wrote:
> > 
> > To understand the non-determinism it might help
> you
> > if you consider some example tokens with this
> lexer.
> > If your lexer sees the single character 'a' what
> > type of token would you like it to return? One of
> > the non-determinism this lexer has is that 'a'
> > matches the NAME, ID, and TOKEN rules. Which is
> it?
> > Note that ANTLR doesn't care what order the rules
> > appear in (unlike lex). Same thing goes with the
> > single character '9', it matches both TOKEN and
> > NUMBER.
> > So I recommend work up some example cases and
> decide
> > what you want your lexer to return for each case. 
> > In some languages a given sequence of characters
> can
> > mean completely different things (different token
> > type) based on the context of those characters. 
> > Antlr is basically a context-free lexer
> (predicates
> > can help sometimes). In these cases you might need
> > to delay exact identification of the token type
> > until you know the context (symantic analysis
> > phase). For example you might have the lexer
> return
> > a token type NAME_OR_ID then later figure out
> which
> > it is once you know the context.
> > Hope this helps,
> > Greg
> > 
> > mark kant wrote:How about
> > the following lexer
> > 
> > 
> > protected: 
> > ALPHA: ('a'..'z'|'A'..'Z')
> > ;
> > protected:
> > ALPHA_NUM: ('a'..'z'|'A'..'Z'|'0'..'9')
> > ;
> > protected:
> > DIGIT: '0'..'9'
> > ;
> > 
> > 
> > NAME: (ALPHA) ((ALPHA) | '_' | '.') )*
> > ;
> > 
> > ID: (ALPHA) ( (ALPHA_NUM) |'_'|'.'|'@')*
> > ;
> > 
> > TOKEN: (ALPHANUM|'_'|'.'|'@'|'%'|';'|'~')+
> > ;
> > 
> > NUMBER: ( DIGITS )+
> > ;
> > 
> > 
> > Thanks
> > 
> > Mark
> > --- mzukowski@yci.com wrote:
> > > remove your AT rule and then add a literal
> keyword
> > > AT='@' to the keywords
> > > section and test for it in TOKEN by turning on
> the
> > > option testLiterals=true.
> > > See the docs on literals.
> > > 
> > > Monty
> > > 
> > > -----Original Message-----
> > > From: mark kant [mailto:markkant2001@yahoo.com]
> > > Sent: Tuesday, March 25, 2003 9:42 AM
> > > To: antlr-interest@yahoogroups.com
> > > Subject: [antlr-interest] non-determinism.
> > > 
> > > 
> > > Hi,
> > > 
> > > I get non-determinism in the following lexer
> > > (relevant
> > > portion of parser and lexer)
> > > 
> > > hosport: host COLON password
> > > 
> > > password: TOKEN
> > > 
> > > host: NAME AT TOKEN
> > > 
> > > 
> > > lexer ...............
> > > 
> > > COLON: ':'
> > > 
> > > SEMI: ';'
> > > 
> > > AT: '@'
> > > 
> > > TOKEN: ('a'..'z' | 'A'..'Z'
> > > |'0'..'9'|'.'|':'|';'|'@')+
> > > 
> > > 
> > > What is the best way to resolve it:
> > > 1. multiple lexers
> > > 2. syntactic predicates - not appropriate as I
> > have
> > > other similar rules for special characters
> > > 3. some kind of flag set in parser and lexer
> > checks
> > > it
> > > before matching a rule in lexer (how do I
> > > communicate
> > > the flag state from parser to lexer). I have
> done
> > > this
> > > in Lex and YAcc.
> > > 
> > > Thanks
> > > 
> > > Mark
> > > 





Do you Yahoo!?
Yahoo! Platinum - Watch CBS' NCAA March Madness, live on your desktop! 
Your use of Yahoo! Groups is subject to the Yahoo! Terms of Service. 


Your use of Yahoo! Groups is subject to the Yahoo! Terms of Service. 

 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From parrt at jguru.com  Mon Mar 31 09:24:17 2003
From: parrt at jguru.com (Terence Parr)
Date: Mon Dec 20 16:15:30 2004
Subject: [cs652] solution posted to "grammars lab"
Message-ID: <9A3AACDA-639D-11D7-94AF-000393BB647E@jguru.com>

Folks,

I have posted Qing Huang's solution (anybody else can send me a jar of 
their solutions too) to the grammars lab we had last week.  Good intro 
material for some folks I would say:

http://www.cs.usfca.edu/~parrt/course/652/labs/grammars.html

Today we do symbol tables :)

Terence
--
Co-founder, http://www.jguru.com
Creator, ANTLR Parser Generator: http://www.antlr.org
Lecturer in Comp. Sci., University of San Francisco

From parrt at jguru.com  Mon Mar 31 09:24:17 2003
From: parrt at jguru.com (Terence Parr)
Date: Mon Dec 20 16:15:30 2004
Subject: [antlr-interest] solution posted to "grammars lab"
Message-ID: <9A3AACDA-639D-11D7-94AF-000393BB647E@jguru.com>

Folks,

I have posted Qing Huang's solution (anybody else can send me a jar of 
their solutions too) to the grammars lab we had last week.  Good intro 
material for some folks I would say:

http://www.cs.usfca.edu/~parrt/course/652/labs/grammars.html

Today we do symbol tables :)

Terence
--
Co-founder, http://www.jguru.com
Creator, ANTLR Parser Generator: http://www.antlr.org
Lecturer in Comp. Sci., University of San Francisco


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From albert.huh at embarcadero-ca.com  Mon Mar 31 10:42:41 2003
From: albert.huh at embarcadero-ca.com (Albert Huh)
Date: Mon Dec 20 16:15:30 2004
Subject: [antlr-interest] non-determinism.
Message-ID: <0881AC7F2F339C40BC6F7983D1E0BEC97683C8@mail2k.embarcadero-ca.com>

i totally agree.  i was just trying answer his question about whether it was possible.  my gut instincts tell me that in most situations, if you need to control the lexer from the parser then you probably need to re-evaluate your grammar.

albert

-----Original Message-----
From: mzukowski@yci.com [mailto:mzukowski@yci.com]
Sent: Monday, March 31, 2003 11:19 AM
To: antlr-interest@yahoogroups.com
Subject: RE: [antlr-interest] non-determinism.


That's playing with fire.  If you actually do any feedback from the parser
to the lexer you have to manually guarantee that the tokens you want to have
an effect on have not yet been lexed.  Your parser will be at least k tokens
behind the lexer.  If you use syntactic predicates then you will have lexed
every token needed to evaluate that predicate.

Monty

-----Original Message-----
From: Albert Huh [mailto:albert.huh@embarcadero-ca.com]
Sent: Wednesday, March 26, 2003 11:41 AM
To: antlr-interest@yahoogroups.com
Subject: RE: [antlr-interest] non-determinism.


actually, you can control the lexer from the parser to a degree.  i'm not
sure about switching rules, but you can definitely make the lexer change the
token type depending on if you've set a flag or not.

the parser will need a reference to the lexer to do this.

within the lexer, you can simply add some actions like

{
  if (nameFlag) {
    setType(NAME);
  }
}

i probably didn't use the proper method name for changing the type, but you
get the idea.

though this probably isn't the greatest idea.  ideally the lexer and parser
should be able to run independantly. 
-----Original Message-----
From: Greg Lindholm [mailto:glindholm@yahoo.com]
Sent: Wednesday, March 26, 2003 1:12 PM
To: antlr-interest@yahoogroups.com
Subject: RE: [antlr-interest] non-determinism.


Sorry, lexers and parsers (certainly Antlr) don't work the way you want them
to.  There is no facility for the parser to tell the lexer what tokens to
look for.  
The lexer acts mostly independently from the parser and it's job is to
translate a stream of characters into a stream of tokens. (The tokens are
then consumed by the parser. ) So the lexer has to be able to look at a
sequence of characters and decide what token type to give it. 
You probably need to read the Antlr documentation again and study some of
the examples in order to create a workable approach to constructing a
solution. 
If you want to describe what you are trying to accomplish someone may be
able to suggest an approach you can take. 
Greg 
 mark kant <markkant2001@yahoo.com> wrote: 
1. it is not "required" distinguishing character but
that it may be present. The point is that there is a
list of token which are supersets of some other
tokens.

So in your question - what type of TOKEN is 'a' ?
The answer is that 'a' can be NAME, ID and also TOKEN.
If a digit follows 'a', then a lexer can either return
NAME or an ID. If I let the lexer consume the digit
and return an ID, but the parser was expecting only a
NAME, then ID would be incorrect.
To me a parser tell lexer to find a token from a set
of X tokens.
In my problem there are 2 or more sets of tokens. The
parser needs to tell lexer which set to look for.

Thanks again for the discussion. I will really
appreciate any help in this.

Mark

----------------------
--- Greg Lindholm wrote:
> 
> If each token type has a "required" distinguishing
> character then there would not be an
> non-determiniism, but that is not what you have
> written in the rules below.
> Did you decide which token type an 'a' is? How about
> a '9'? You're not going to get very far building a
> lexer until you make these basic decisions.
> Once you have some example cases, if you then have
> trouble building the lexer to match your examples,
> then people on this list will help you.
> mark kant wrote:There is a
> slight difference. Each of them also has
> extra characters to distinguish. Example TOKEN also
> has '~' character in it. If I expected an ID, but I
> return TOKEN_OR_ID, then how do I know it is a valid
> ID (it may have '~' in it, which makes it invalid
> ID,
> but valid TOKEN )
> 
> 
> Mark
> 
> ------------------------------
> --- Greg Lindholm wrote:
> > 
> > To understand the non-determinism it might help
> you
> > if you consider some example tokens with this
> lexer.
> > If your lexer sees the single character 'a' what
> > type of token would you like it to return? One of
> > the non-determinism this lexer has is that 'a'
> > matches the NAME, ID, and TOKEN rules. Which is
> it?
> > Note that ANTLR doesn't care what order the rules
> > appear in (unlike lex). Same thing goes with the
> > single character '9', it matches both TOKEN and
> > NUMBER.
> > So I recommend work up some example cases and
> decide
> > what you want your lexer to return for each case. 
> > In some languages a given sequence of characters
> can
> > mean completely different things (different token
> > type) based on the context of those characters. 
> > Antlr is basically a context-free lexer
> (predicates
> > can help sometimes). In these cases you might need
> > to delay exact identification of the token type
> > until you know the context (symantic analysis
> > phase). For example you might have the lexer
> return
> > a token type NAME_OR_ID then later figure out
> which
> > it is once you know the context.
> > Hope this helps,
> > Greg
> > 
> > mark kant wrote:How about
> > the following lexer
> > 
> > 
> > protected: 
> > ALPHA: ('a'..'z'|'A'..'Z')
> > ;
> > protected:
> > ALPHA_NUM: ('a'..'z'|'A'..'Z'|'0'..'9')
> > ;
> > protected:
> > DIGIT: '0'..'9'
> > ;
> > 
> > 
> > NAME: (ALPHA) ((ALPHA) | '_' | '.') )*
> > ;
> > 
> > ID: (ALPHA) ( (ALPHA_NUM) |'_'|'.'|'@')*
> > ;
> > 
> > TOKEN: (ALPHANUM|'_'|'.'|'@'|'%'|';'|'~')+
> > ;
> > 
> > NUMBER: ( DIGITS )+
> > ;
> > 
> > 
> > Thanks
> > 
> > Mark
> > --- mzukowski@yci.com wrote:
> > > remove your AT rule and then add a literal
> keyword
> > > AT='@' to the keywords
> > > section and test for it in TOKEN by turning on
> the
> > > option testLiterals=true.
> > > See the docs on literals.
> > > 
> > > Monty
> > > 
> > > -----Original Message-----
> > > From: mark kant [mailto:markkant2001@yahoo.com]
> > > Sent: Tuesday, March 25, 2003 9:42 AM
> > > To: antlr-interest@yahoogroups.com
> > > Subject: [antlr-interest] non-determinism.
> > > 
> > > 
> > > Hi,
> > > 
> > > I get non-determinism in the following lexer
> > > (relevant
> > > portion of parser and lexer)
> > > 
> > > hosport: host COLON password
> > > 
> > > password: TOKEN
> > > 
> > > host: NAME AT TOKEN
> > > 
> > > 
> > > lexer ...............
> > > 
> > > COLON: ':'
> > > 
> > > SEMI: ';'
> > > 
> > > AT: '@'
> > > 
> > > TOKEN: ('a'..'z' | 'A'..'Z'
> > > |'0'..'9'|'.'|':'|';'|'@')+
> > > 
> > > 
> > > What is the best way to resolve it:
> > > 1. multiple lexers
> > > 2. syntactic predicates - not appropriate as I
> > have
> > > other similar rules for special characters
> > > 3. some kind of flag set in parser and lexer
> > checks
> > > it
> > > before matching a rule in lexer (how do I
> > > communicate
> > > the flag state from parser to lexer). I have
> done
> > > this
> > > in Lex and YAcc.
> > > 
> > > Thanks
> > > 
> > > Mark
> > > 





Do you Yahoo!?
Yahoo! Platinum - Watch CBS' NCAA March Madness, live on your desktop! 
Your use of Yahoo! Groups is subject to the Yahoo! Terms of Service. 


Your use of Yahoo! Groups is subject to the Yahoo! Terms of Service. 

 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 



 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From markkant2001 at yahoo.com  Mon Mar 31 11:15:09 2003
From: markkant2001 at yahoo.com (mark kant)
Date: Mon Dec 20 16:15:30 2004
Subject: [antlr-interest] non-determinism.
In-Reply-To: <0881AC7F2F339C40BC6F7983D1E0BEC97683C8@mail2k.embarcadero-ca.com>
Message-ID: <20030331191510.43468.qmail@web13601.mail.yahoo.com>

I am using a grammer that has been already defined as
a standard by IETF - SIP standard.  I do not have much
choice in that. The fact is it is not easy to remove
the non-determinism.  There are several lex rules 
that  give non-determinism warning.  Only the parser
knows what to alternative set of tokens should be
next.

An implementation by NIST using antlr has lots of
lexers for the grammer.  I am still trying to
understand it - how they invoke various lexers etc.

Mark

---------------------------------
--- Albert Huh <albert.huh@embarcadero-ca.com> wrote:
> i totally agree.  i was just trying answer his
> question about whether it was possible.  my gut
> instincts tell me that in most situations, if you
> need to control the lexer from the parser then you
> probably need to re-evaluate your grammar.
> 
> albert
> 
> -----Original Message-----
> From: mzukowski@yci.com [mailto:mzukowski@yci.com]
> Sent: Monday, March 31, 2003 11:19 AM
> To: antlr-interest@yahoogroups.com
> Subject: RE: [antlr-interest] non-determinism.
> 
> 
> That's playing with fire.  If you actually do any
> feedback from the parser
> to the lexer you have to manually guarantee that the
> tokens you want to have
> an effect on have not yet been lexed.  Your parser
> will be at least k tokens
> behind the lexer.  If you use syntactic predicates
> then you will have lexed
> every token needed to evaluate that predicate.
> 
> Monty
> 
> -----Original Message-----
> From: Albert Huh
> [mailto:albert.huh@embarcadero-ca.com]
> Sent: Wednesday, March 26, 2003 11:41 AM
> To: antlr-interest@yahoogroups.com
> Subject: RE: [antlr-interest] non-determinism.
> 
> 
> actually, you can control the lexer from the parser
> to a degree.  i'm not
> sure about switching rules, but you can definitely
> make the lexer change the
> token type depending on if you've set a flag or not.
> 
> the parser will need a reference to the lexer to do
> this.
> 
> within the lexer, you can simply add some actions
> like
> 
> {
>   if (nameFlag) {
>     setType(NAME);
>   }
> }
> 
> i probably didn't use the proper method name for
> changing the type, but you
> get the idea.
> 
> though this probably isn't the greatest idea. 
> ideally the lexer and parser
> should be able to run independantly. 
> -----Original Message-----
> From: Greg Lindholm [mailto:glindholm@yahoo.com]
> Sent: Wednesday, March 26, 2003 1:12 PM
> To: antlr-interest@yahoogroups.com
> Subject: RE: [antlr-interest] non-determinism.
> 
> 
> Sorry, lexers and parsers (certainly Antlr) don't
> work the way you want them
> to.  There is no facility for the parser to tell the
> lexer what tokens to
> look for.  
> The lexer acts mostly independently from the parser
> and it's job is to
> translate a stream of characters into a stream of
> tokens. (The tokens are
> then consumed by the parser. ) So the lexer has to
> be able to look at a
> sequence of characters and decide what token type to
> give it. 
> You probably need to read the Antlr documentation
> again and study some of
> the examples in order to create a workable approach
> to constructing a
> solution. 
> If you want to describe what you are trying to
> accomplish someone may be
> able to suggest an approach you can take. 
> Greg 
>  mark kant <markkant2001@yahoo.com> wrote: 
> 1. it is not "required" distinguishing character but
> that it may be present. The point is that there is a
> list of token which are supersets of some other
> tokens.
> 
> So in your question - what type of TOKEN is 'a' ?
> The answer is that 'a' can be NAME, ID and also
> TOKEN.
> If a digit follows 'a', then a lexer can either
> return
> NAME or an ID. If I let the lexer consume the digit
> and return an ID, but the parser was expecting only
> a
> NAME, then ID would be incorrect.
> To me a parser tell lexer to find a token from a set
> of X tokens.
> In my problem there are 2 or more sets of tokens.
> The
> parser needs to tell lexer which set to look for.
> 
> Thanks again for the discussion. I will really
> appreciate any help in this.
> 
> Mark
> 
> ----------------------
> --- Greg Lindholm wrote:
> > 
> > If each token type has a "required" distinguishing
> > character then there would not be an
> > non-determiniism, but that is not what you have
> > written in the rules below.
> > Did you decide which token type an 'a' is? How
> about
> > a '9'? You're not going to get very far building a
> > lexer until you make these basic decisions.
> > Once you have some example cases, if you then have
> > trouble building the lexer to match your examples,
> > then people on this list will help you.
> > mark kant wrote:There is a
> > slight difference. Each of them also has
> > extra characters to distinguish. Example TOKEN
> also
> > has '~' character in it. If I expected an ID, but
> I
> > return TOKEN_OR_ID, then how do I know it is a
> valid
> > ID (it may have '~' in it, which makes it invalid
> > ID,
> > but valid TOKEN )
> > 
> > 
> > Mark
> > 
> > ------------------------------
> > --- Greg Lindholm wrote:
> > > 
> > > To understand the non-determinism it might help
> > you
> > > if you consider some example tokens with this
> > lexer.
> > > If your lexer sees the single character 'a' what
> > > type of token would you like it to return? One
> of
> > > the non-determinism this lexer has is that 'a'
> > > matches the NAME, ID, and TOKEN rules. Which is
> > it?
> > > Note that ANTLR doesn't care what order the
> rules
> > > appear in (unlike lex). Same thing goes with the
> > > single character '9', it matches both TOKEN and
> > > NUMBER.
> > > So I recommend work up some example cases and
> > decide
> > > what you want your lexer to return for each
> case. 
> > > In some languages a given sequence of characters
> > can
> > > mean completely different things (different
> token
> > > type) based on the context of those characters. 
> > > Antlr is basically a context-free lexer
> > (predicates
> > > can help sometimes). In these cases you might
> need
> > > to delay exact identification of the token type
> > > until you know the context (symantic analysis
> > > phase). For example you might have the lexer
> > return
> > > a token type NAME_OR_ID then later figure out
> > which
> > > it is once you know the context.
> > > Hope this helps,
> > > Greg
> > > 
> > > mark kant wrote:How about
> > > the following lexer
> > > 
> > > 
> > > protected: 
> > > ALPHA: ('a'..'z'|'A'..'Z')
> > > ;
> > > protected:
> > > ALPHA_NUM: ('a'..'z'|'A'..'Z'|'0'..'9')
> > > ;
> > > protected:
> > > DIGIT: '0'..'9'
> > > ;
> > > 
> > > 
> > > NAME: (ALPHA) ((ALPHA) | '_' | '.') )*
> 
=== message truncated ===


__________________________________________________
Do you Yahoo!?
Yahoo! Platinum - Watch CBS' NCAA March Madness, live on your desktop!
http://platinum.yahoo.com

 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From albert.huh at embarcadero-ca.com  Mon Mar 31 11:43:31 2003
From: albert.huh at embarcadero-ca.com (Albert Huh)
Date: Mon Dec 20 16:15:30 2004
Subject: [antlr-interest] non-determinism.
Message-ID: <0881AC7F2F339C40BC6F7983D1E0BEC97683C9@mail2k.embarcadero-ca.com>

What I noticed with your lexer rules (NAME, ID, TOKEN, NUMBER) are that each rule is a subset of another rule.

One possible solution is to write the grammar so that if you need an ID token, it will accept (ID|NAME) for example.  

As well, you can also write your lexer to change the token type as it matches more stuff.  The NAME token is a (proper?) subset of your ID token, which is a subset of your TOKEN token.  The NUMBER token is also a subset of the TOKEN token.  A lexer token can't be more than one token at a time (not in antlr anyways, or other lexers which use regular expressions).

e.g.
ID: (ALPHA)
    (
        ALPHA
        |'_'
        |'.'
        |('@'|DIGIT) {$setType(ID);}
    )*
;

This will remove the non-determinism warnings.  You need to write your lexer in a way that it will run deterministically.



-----Original Message-----
From: mark kant [mailto:markkant2001@yahoo.com]
Sent: Monday, March 31, 2003 2:15 PM
To: antlr-interest@yahoogroups.com
Subject: RE: [antlr-interest] non-determinism.


I am using a grammer that has been already defined as
a standard by IETF - SIP standard.  I do not have much
choice in that. The fact is it is not easy to remove
the non-determinism.  There are several lex rules 
that  give non-determinism warning.  Only the parser
knows what to alternative set of tokens should be
next.

An implementation by NIST using antlr has lots of
lexers for the grammer.  I am still trying to
understand it - how they invoke various lexers etc.

Mark

---------------------------------
--- Albert Huh <albert.huh@embarcadero-ca.com> wrote:
> i totally agree.  i was just trying answer his
> question about whether it was possible.  my gut
> instincts tell me that in most situations, if you
> need to control the lexer from the parser then you
> probably need to re-evaluate your grammar.
> 
> albert
> 
> -----Original Message-----
> From: mzukowski@yci.com [mailto:mzukowski@yci.com]
> Sent: Monday, March 31, 2003 11:19 AM
> To: antlr-interest@yahoogroups.com
> Subject: RE: [antlr-interest] non-determinism.
> 
> 
> That's playing with fire.  If you actually do any
> feedback from the parser
> to the lexer you have to manually guarantee that the
> tokens you want to have
> an effect on have not yet been lexed.  Your parser
> will be at least k tokens
> behind the lexer.  If you use syntactic predicates
> then you will have lexed
> every token needed to evaluate that predicate.
> 
> Monty
> 
> -----Original Message-----
> From: Albert Huh
> [mailto:albert.huh@embarcadero-ca.com]
> Sent: Wednesday, March 26, 2003 11:41 AM
> To: antlr-interest@yahoogroups.com
> Subject: RE: [antlr-interest] non-determinism.
> 
> 
> actually, you can control the lexer from the parser
> to a degree.  i'm not
> sure about switching rules, but you can definitely
> make the lexer change the
> token type depending on if you've set a flag or not.
> 
> the parser will need a reference to the lexer to do
> this.
> 
> within the lexer, you can simply add some actions
> like
> 
> {
>   if (nameFlag) {
>     setType(NAME);
>   }
> }
> 
> i probably didn't use the proper method name for
> changing the type, but you
> get the idea.
> 
> though this probably isn't the greatest idea. 
> ideally the lexer and parser
> should be able to run independantly. 
> -----Original Message-----
> From: Greg Lindholm [mailto:glindholm@yahoo.com]
> Sent: Wednesday, March 26, 2003 1:12 PM
> To: antlr-interest@yahoogroups.com
> Subject: RE: [antlr-interest] non-determinism.
> 
> 
> Sorry, lexers and parsers (certainly Antlr) don't
> work the way you want them
> to.  There is no facility for the parser to tell the
> lexer what tokens to
> look for.  
> The lexer acts mostly independently from the parser
> and it's job is to
> translate a stream of characters into a stream of
> tokens. (The tokens are
> then consumed by the parser. ) So the lexer has to
> be able to look at a
> sequence of characters and decide what token type to
> give it. 
> You probably need to read the Antlr documentation
> again and study some of
> the examples in order to create a workable approach
> to constructing a
> solution. 
> If you want to describe what you are trying to
> accomplish someone may be
> able to suggest an approach you can take. 
> Greg 
>  mark kant <markkant2001@yahoo.com> wrote: 
> 1. it is not "required" distinguishing character but
> that it may be present. The point is that there is a
> list of token which are supersets of some other
> tokens.
> 
> So in your question - what type of TOKEN is 'a' ?
> The answer is that 'a' can be NAME, ID and also
> TOKEN.
> If a digit follows 'a', then a lexer can either
> return
> NAME or an ID. If I let the lexer consume the digit
> and return an ID, but the parser was expecting only
> a
> NAME, then ID would be incorrect.
> To me a parser tell lexer to find a token from a set
> of X tokens.
> In my problem there are 2 or more sets of tokens.
> The
> parser needs to tell lexer which set to look for.
> 
> Thanks again for the discussion. I will really
> appreciate any help in this.
> 
> Mark
> 
> ----------------------
> --- Greg Lindholm wrote:
> > 
> > If each token type has a "required" distinguishing
> > character then there would not be an
> > non-determiniism, but that is not what you have
> > written in the rules below.
> > Did you decide which token type an 'a' is? How
> about
> > a '9'? You're not going to get very far building a
> > lexer until you make these basic decisions.
> > Once you have some example cases, if you then have
> > trouble building the lexer to match your examples,
> > then people on this list will help you.
> > mark kant wrote:There is a
> > slight difference. Each of them also has
> > extra characters to distinguish. Example TOKEN
> also
> > has '~' character in it. If I expected an ID, but
> I
> > return TOKEN_OR_ID, then how do I know it is a
> valid
> > ID (it may have '~' in it, which makes it invalid
> > ID,
> > but valid TOKEN )
> > 
> > 
> > Mark
> > 
> > ------------------------------
> > --- Greg Lindholm wrote:
> > > 
> > > To understand the non-determinism it might help
> > you
> > > if you consider some example tokens with this
> > lexer.
> > > If your lexer sees the single character 'a' what
> > > type of token would you like it to return? One
> of
> > > the non-determinism this lexer has is that 'a'
> > > matches the NAME, ID, and TOKEN rules. Which is
> > it?
> > > Note that ANTLR doesn't care what order the
> rules
> > > appear in (unlike lex). Same thing goes with the
> > > single character '9', it matches both TOKEN and
> > > NUMBER.
> > > So I recommend work up some example cases and
> > decide
> > > what you want your lexer to return for each
> case. 
> > > In some languages a given sequence of characters
> > can
> > > mean completely different things (different
> token
> > > type) based on the context of those characters. 
> > > Antlr is basically a context-free lexer
> > (predicates
> > > can help sometimes). In these cases you might
> need
> > > to delay exact identification of the token type
> > > until you know the context (symantic analysis
> > > phase). For example you might have the lexer
> > return
> > > a token type NAME_OR_ID then later figure out
> > which
> > > it is once you know the context.
> > > Hope this helps,
> > > Greg
> > > 
> > > mark kant wrote:How about
> > > the following lexer
> > > 
> > > 
> > > protected: 
> > > ALPHA: ('a'..'z'|'A'..'Z')
> > > ;
> > > protected:
> > > ALPHA_NUM: ('a'..'z'|'A'..'Z'|'0'..'9')
> > > ;
> > > protected:
> > > DIGIT: '0'..'9'
> > > ;
> > > 
> > > 
> > > NAME: (ALPHA) ((ALPHA) | '_' | '.') )*
> 
=== message truncated ===


__________________________________________________
Do you Yahoo!?
Yahoo! Platinum - Watch CBS' NCAA March Madness, live on your desktop!
http://platinum.yahoo.com

 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 



 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From mzukowski at yci.com  Mon Mar 31 14:07:57 2003
From: mzukowski at yci.com (mzukowski@yci.com)
Date: Mon Dec 20 16:15:30 2004
Subject: [antlr-interest] non-determinism.
Message-ID: <170826586F3BD511910D0200C110AAA80540226E@memail03.bco-home.com>

To understand an antlr grammar it really helps to read and/or step through
the code.  It's made to be read by humans and be easy to debug.  Most lexer
switching is done with lexical states.  See
http://www.antlr.org/doc/lexer.html#Lexical_States

I offer quick 10 hour contracts to help people debug, refactor and optimize
antlr grammars.  Contact me at the website below for details.  I help out as
much as I can on this list as you can see in the archives.  But if you pay
me then I won't have to decide whether or not to answer your question :)

Monty

http://www.codetransform.com

-----Original Message-----
From: mark kant [mailto:markkant2001@yahoo.com]
Sent: Monday, March 31, 2003 11:15 AM
To: antlr-interest@yahoogroups.com
Subject: RE: [antlr-interest] non-determinism.


I am using a grammer that has been already defined as
a standard by IETF - SIP standard.  I do not have much
choice in that. The fact is it is not easy to remove
the non-determinism.  There are several lex rules 
that  give non-determinism warning.  Only the parser
knows what to alternative set of tokens should be
next.

An implementation by NIST using antlr has lots of
lexers for the grammer.  I am still trying to
understand it - how they invoke various lexers etc.

Mark

---------------------------------
--- Albert Huh <albert.huh@embarcadero-ca.com> wrote:
> i totally agree.  i was just trying answer his
> question about whether it was possible.  my gut
> instincts tell me that in most situations, if you
> need to control the lexer from the parser then you
> probably need to re-evaluate your grammar.
> 
> albert
> 
> -----Original Message-----
> From: mzukowski@yci.com [mailto:mzukowski@yci.com]
> Sent: Monday, March 31, 2003 11:19 AM
> To: antlr-interest@yahoogroups.com
> Subject: RE: [antlr-interest] non-determinism.
> 
> 
> That's playing with fire.  If you actually do any
> feedback from the parser
> to the lexer you have to manually guarantee that the
> tokens you want to have
> an effect on have not yet been lexed.  Your parser
> will be at least k tokens
> behind the lexer.  If you use syntactic predicates
> then you will have lexed
> every token needed to evaluate that predicate.
> 
> Monty
> 
> -----Original Message-----
> From: Albert Huh
> [mailto:albert.huh@embarcadero-ca.com]
> Sent: Wednesday, March 26, 2003 11:41 AM
> To: antlr-interest@yahoogroups.com
> Subject: RE: [antlr-interest] non-determinism.
> 
> 
> actually, you can control the lexer from the parser
> to a degree.  i'm not
> sure about switching rules, but you can definitely
> make the lexer change the
> token type depending on if you've set a flag or not.
> 
> the parser will need a reference to the lexer to do
> this.
> 
> within the lexer, you can simply add some actions
> like
> 
> {
>   if (nameFlag) {
>     setType(NAME);
>   }
> }
> 
> i probably didn't use the proper method name for
> changing the type, but you
> get the idea.
> 
> though this probably isn't the greatest idea. 
> ideally the lexer and parser
> should be able to run independantly. 
> -----Original Message-----
> From: Greg Lindholm [mailto:glindholm@yahoo.com]
> Sent: Wednesday, March 26, 2003 1:12 PM
> To: antlr-interest@yahoogroups.com
> Subject: RE: [antlr-interest] non-determinism.
> 
> 
> Sorry, lexers and parsers (certainly Antlr) don't
> work the way you want them
> to.  There is no facility for the parser to tell the
> lexer what tokens to
> look for.  
> The lexer acts mostly independently from the parser
> and it's job is to
> translate a stream of characters into a stream of
> tokens. (The tokens are
> then consumed by the parser. ) So the lexer has to
> be able to look at a
> sequence of characters and decide what token type to
> give it. 
> You probably need to read the Antlr documentation
> again and study some of
> the examples in order to create a workable approach
> to constructing a
> solution. 
> If you want to describe what you are trying to
> accomplish someone may be
> able to suggest an approach you can take. 
> Greg 
>  mark kant <markkant2001@yahoo.com> wrote: 
> 1. it is not "required" distinguishing character but
> that it may be present. The point is that there is a
> list of token which are supersets of some other
> tokens.
> 
> So in your question - what type of TOKEN is 'a' ?
> The answer is that 'a' can be NAME, ID and also
> TOKEN.
> If a digit follows 'a', then a lexer can either
> return
> NAME or an ID. If I let the lexer consume the digit
> and return an ID, but the parser was expecting only
> a
> NAME, then ID would be incorrect.
> To me a parser tell lexer to find a token from a set
> of X tokens.
> In my problem there are 2 or more sets of tokens.
> The
> parser needs to tell lexer which set to look for.
> 
> Thanks again for the discussion. I will really
> appreciate any help in this.
> 
> Mark
> 
> ----------------------
> --- Greg Lindholm wrote:
> > 
> > If each token type has a "required" distinguishing
> > character then there would not be an
> > non-determiniism, but that is not what you have
> > written in the rules below.
> > Did you decide which token type an 'a' is? How
> about
> > a '9'? You're not going to get very far building a
> > lexer until you make these basic decisions.
> > Once you have some example cases, if you then have
> > trouble building the lexer to match your examples,
> > then people on this list will help you.
> > mark kant wrote:There is a
> > slight difference. Each of them also has
> > extra characters to distinguish. Example TOKEN
> also
> > has '~' character in it. If I expected an ID, but
> I
> > return TOKEN_OR_ID, then how do I know it is a
> valid
> > ID (it may have '~' in it, which makes it invalid
> > ID,
> > but valid TOKEN )
> > 
> > 
> > Mark
> > 
> > ------------------------------
> > --- Greg Lindholm wrote:
> > > 
> > > To understand the non-determinism it might help
> > you
> > > if you consider some example tokens with this
> > lexer.
> > > If your lexer sees the single character 'a' what
> > > type of token would you like it to return? One
> of
> > > the non-determinism this lexer has is that 'a'
> > > matches the NAME, ID, and TOKEN rules. Which is
> > it?
> > > Note that ANTLR doesn't care what order the
> rules
> > > appear in (unlike lex). Same thing goes with the
> > > single character '9', it matches both TOKEN and
> > > NUMBER.
> > > So I recommend work up some example cases and
> > decide
> > > what you want your lexer to return for each
> case. 
> > > In some languages a given sequence of characters
> > can
> > > mean completely different things (different
> token
> > > type) based on the context of those characters. 
> > > Antlr is basically a context-free lexer
> > (predicates
> > > can help sometimes). In these cases you might
> need
> > > to delay exact identification of the token type
> > > until you know the context (symantic analysis
> > > phase). For example you might have the lexer
> > return
> > > a token type NAME_OR_ID then later figure out
> > which
> > > it is once you know the context.
> > > Hope this helps,
> > > Greg
> > > 
> > > mark kant wrote:How about
> > > the following lexer
> > > 
> > > 
> > > protected: 
> > > ALPHA: ('a'..'z'|'A'..'Z')
> > > ;
> > > protected:
> > > ALPHA_NUM: ('a'..'z'|'A'..'Z'|'0'..'9')
> > > ;
> > > protected:
> > > DIGIT: '0'..'9'
> > > ;
> > > 
> > > 
> > > NAME: (ALPHA) ((ALPHA) | '_' | '.') )*
> 
=== message truncated ===


__________________________________________________
Do you Yahoo!?
Yahoo! Platinum - Watch CBS' NCAA March Madness, live on your desktop!
http://platinum.yahoo.com

 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From mzukowski at yci.com  Mon Mar 31 14:27:36 2003
From: mzukowski at yci.com (mzukowski@yci.com)
Date: Mon Dec 20 16:15:30 2004
Subject: [antlr-interest] Parser behavior on invalid input - Newbee qu
	estion
Message-ID: <170826586F3BD511910D0200C110AAA805402270@memail03.bco-home.com>

You need to learn about lookahead.  Every "|" means a decision needs to be
made and antlr will use lookahead to do that.  That's what gets put into the
if statments to decide what to do next.  The reasoning sort of goes, "if I
know there's bad stuff ahead, I'll complain right now."

Perhaps check out Ter's recent lectures for his class (see antlr.org).  He
must have covered lookahead by now....

Monty

-----Original Message-----
From: bchagenbuch [mailto:bhagenbuch@didera.com]
Sent: Friday, March 28, 2003 1:24 PM
To: antlr-interest@yahoogroups.com
Subject: [antlr-interest] Parser behavior on invalid input - Newbee
question


I encountered a puzzling (to a newbee like me) behavior while writing a rule
to parse compound names of lengths 1 to 3, like "a", "a.b", or "a.b.c".  I
tried 3 different formulations:

The first one has the disadvantage of recognizing names that are too long,
but is fine otherwise.

	name1 : ID ( DOT ID )* { my_action(); } ;


The other two recognize exactly what I want:

	name2 : ID ( DOT ID ( DOT ID )? )? { my_action(); } ;

	name3 : ID ( part1 | ) { my_action(); } ;
	part1 : DOT ID ( part2 | ) ;
	part2 : DOT ID ;

On certain invalid inputs, however, my_action() isn't executed, and I think
it should be. 

In particular, when name2 or name3 sees "a.b.c BAD-STUFF", 
	- my_action() is executed, then 
	- the bad stuff causes an exception, as expected,

	BUT
	
when name2 or name3 sees "a.b BAD-STUFF" or "a BAD-STUFF", 
	- the bad stuff causes an exception, and my_action() is skipped. 

When I look at the generated parser, I can see why this occurs, but when I
look at the rules in the grammar, I can't.

What am I missing?

Thanks in advance.
Brian

-------- A complete grammar showing the behavior follows --------

class P extends Parser;

// Try the various start rules with the following inputs:
 
// 1.   "(a)", "(a.b)", "(a.b.c)"  // ok
// 2.   "(a.b.c.d)"  // ok
// 3.   "(a x)", "(a.b x)" // surprise! only start1 triggers action.
// 4.   "(a.b.c x)" // ok
// 5.   "(a.b.c.d x)" // ok

// My expectation was that all the inputs would trigger the action
// of printing a message, though input sets 2-5 should throw an 
// exception thereafter. (Or, in the case of start1, sets 3-5)

// The surprise is that start2 and start3 don't trigger the action
// on the inputs in set 3.


options { k = 2; }

start1	: OPEN name1 CLOSE
		;

name1	: ID ( DOT ID )*  
			{ System.out.println("Saw a (maybe too long)
name."); } 
		;
		

start2	: OPEN name2 CLOSE
		;

name2	: ID ( DOT ID ( DOT ID )? )? 
			{ System.out.println("Saw a name."); }
		;

start3	: OPEN name3 CLOSE
		;

name3	: ID ( part1 | )
			{ System.out.println("Saw a name."); }
		;

protected
part1	: DOT ID ( part2 |  )
		;

protected
part2	: DOT ID 
		;
		

class L extends Lexer;

options { k = 2; }

ID		: ('a'..'z')
		;

DOT		: '.'
		;

OPEN	: '('
		;

CLOSE	: ')'
		;

WS		: ( ' '|'\t'
		  | ("\r\n"|'\r'|'\n') 
		    	{newline();}
		  ) 
		  	{ $setType(Token.SKIP); }
		;



 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From mzukowski at yci.com  Mon Mar 31 14:35:24 2003
From: mzukowski at yci.com (mzukowski@yci.com)
Date: Mon Dec 20 16:15:30 2004
Subject: [antlr-interest] How to write '\v' in antlr grammar?
Message-ID: <170826586F3BD511910D0200C110AAA805402271@memail03.bco-home.com>

You can always look up and use the octal escape for that character '\013'.
Write a comment that it is '\v'.

Monty

-----Original Message-----
From: Albert Huh [mailto:albert.huh@embarcadero-ca.com]
Sent: Friday, March 28, 2003 1:39 PM
To: antlr-interest@yahoogroups.com
Subject: RE: [antlr-interest] How to write '\v' in antlr grammar?


maybe it's a bug in the antlr grammar?? the antlr compiler is croaking on
the '\v'.  the antlr compiler is in java.  maybe you could try '\\v'
instead??  i'm just guessing here.

-----Original Message-----
From: zai-qiang.leng@sybase.com [mailto:zai-qiang.leng@sybase.com]
Sent: Thursday, March 27, 2003 8:27 PM
To: antlr-interest@yahoogroups.com
Subject: RE: [antlr-interest] How to write '\v' in antlr grammar?



I am not sure if '\v' is a valid escape char in Java, but I am sure it is a
valid escape char in C++.  I got following messages from MSDN:

Table 1.4???Escape Sequences


|---------------+-----------------------------|
|               |                             |
|  Escape       |  Represents                 |
|  Sequence     |                             |
|               |                             |
|---------------+-----------------------------|
|               |                             |
|  \a           |  Bell (alert)               |
|               |                             |
|---------------+-----------------------------|
|               |                             |
|  \b           |  Backspace                  |
|               |                             |
|---------------+-----------------------------|
|               |                             |
|  \f           |  Formfeed                   |
|               |                             |
|---------------+-----------------------------|
|               |                             |
|  \n           |  New line                   |
|               |                             |
|---------------+-----------------------------|
|               |                             |
|  \r           |  Carriage return            |
|               |                             |
|---------------+-----------------------------|
|               |                             |
|  \t           |  Horizontal tab             |
|               |                             |
|---------------+-----------------------------|
|               |                             |
|  \v           |  Vertical tab               |
|               |                             |
|---------------+-----------------------------|
|               |                             |
|  \'           |  Single quotation mark      |
|               |                             |
|---------------+-----------------------------|
|               |                             |
|  \"           |  Double quotation mark      |
|               |                             |
|---------------+-----------------------------|
|               |                             |
|  \\           |  Backslash                  |
|               |                             |
|---------------+-----------------------------|
|               |                             |
|  \?           |  Literal question mark      |
|               |                             |
|---------------+-----------------------------|
|               |                             |
|  \ooo         |  ASCII character in octal   |
|               |  notation                   |
|               |                             |
|---------------+-----------------------------|
|               |                             |
|  \xhhh        |  ASCII character in         |
|               |  hexadecimal notation       |
|               |                             |
|---------------+-----------------------------|




Thanks
Zaiqiang



 

                    "Albert Huh"

                    <albert.huh@embarcade       To:
<antlr-interest@yahoogroups.com>                                  
                    ro-ca.com>                  cc:

                                                Subject:     RE:
[antlr-interest] How to write '\v' in antlr grammar?     
                    03/28/03 12:54 AM

                    Please respond to

                    antlr-interest

 

 




are you sure '\v' is a valid escape sequence in java/c++?

i could be wrong, but i don't think \v means anything at all...


-----Original Message-----
From: zai-qiang.leng@sybase.com [mailto:zai-qiang.leng@sybase.com]
Sent: Thursday, March 27, 2003 3:25 AM
To: antlr-interest@yahoogroups.com
Subject: [antlr-interest] How to write '\v' in antlr grammar?


Hi,

I have following lexer rules,

protected
ESC
     :    '~'!
          (
               'n'       {$setText('\n');}
          |    'r'       {$setText('\r');}
          |    'v'       {$setText('\v');}                        //If I
change the '\v' to ''(empty char), all is ok.
          |    't'       {$setText('\t');}
          |    'f'       {$setText('\f');}
          |    'b'       {$setText('\b');}
          |    ('0'..'2') (Digit) (Digit)
          );


but when I compile it via antlr, I got following errors:

NTLR Parser Generator   Version 2.7.1   1989-2000 jGuru.com
error: Token stream error reading
grammar(s):antlr.TokenStreamRecognitionException: unexpected char: v
TokenStreamException: unexpected char: v
Error executing c:\winnt\system32\cmd.exe.


Can anyone tell me how to solve this?

Thanks
Zaiqiang




Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/





Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/








 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 



 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From parrt at jguru.com  Mon Mar 31 16:18:10 2003
From: parrt at jguru.com (Terence Parr)
Date: Mon Dec 20 16:15:30 2004
Subject: [antlr-interest] lots of cool symbol table stuff posted
Message-ID: <6BD64AB6-63D7-11D7-94AF-000393BB647E@jguru.com>

Folks interested in learning about symbol table management can check 
out my lecture/problem-solving (audio to appear in a day or so) and 
solutions:

http://www.cs.usfca.edu/~parrt/course/652/lectures/symtab.html

Terence
--
Co-founder, http://www.jguru.com
Creator, ANTLR Parser Generator: http://www.antlr.org
Lecturer in Comp. Sci., University of San Francisco


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From zai-qiang.leng at sybase.com  Mon Mar 31 17:32:40 2003
From: zai-qiang.leng at sybase.com (zai-qiang.leng@sybase.com)
Date: Mon Dec 20 16:15:30 2004
Subject: [antlr-interest] How to write '\v' in antlr grammar?
Message-ID: <OF43FFBDD5.C2ABF08C-ON48256CFB.00087107@sybase.com>


Thanks to all.  Write '\013' solved the problem.

Thanks
Zaiqiang



                                                                                                                   
                    mzukowski@yci.                                                                                 
                    com                  To:     antlr-interest@yahoogroups.com                                    
                                         cc:                                                                       
                    04/01/03 06:35       Subject:     RE: [antlr-interest] How to write '\v' in antlr grammar?     
                    AM                                                                                             
                    Please respond                                                                                 
                    to                                                                                             
                    antlr-interest                                                                                 
                                                                                                                   
                                                                                                                   



You can always look up and use the octal escape for that character '\013'.
Write a comment that it is '\v'.

Monty

-----Original Message-----
From: Albert Huh [mailto:albert.huh@embarcadero-ca.com]
Sent: Friday, March 28, 2003 1:39 PM
To: antlr-interest@yahoogroups.com
Subject: RE: [antlr-interest] How to write '\v' in antlr grammar?


maybe it's a bug in the antlr grammar?? the antlr compiler is croaking on
the '\v'.  the antlr compiler is in java.  maybe you could try '\\v'
instead??  i'm just guessing here.

-----Original Message-----
From: zai-qiang.leng@sybase.com [mailto:zai-qiang.leng@sybase.com]
Sent: Thursday, March 27, 2003 8:27 PM
To: antlr-interest@yahoogroups.com
Subject: RE: [antlr-interest] How to write '\v' in antlr grammar?



I am not sure if '\v' is a valid escape char in Java, but I am sure it is a
valid escape char in C++.  I got following messages from MSDN:

Table 1.4???Escape Sequences


|---------------+-----------------------------|
|               |                             |
|  Escape       |  Represents                 |
|  Sequence     |                             |
|               |                             |
|---------------+-----------------------------|
|               |                             |
|  \a           |  Bell (alert)               |
|               |                             |
|---------------+-----------------------------|
|               |                             |
|  \b           |  Backspace                  |
|               |                             |
|---------------+-----------------------------|
|               |                             |
|  \f           |  Formfeed                   |
|               |                             |
|---------------+-----------------------------|
|               |                             |
|  \n           |  New line                   |
|               |                             |
|---------------+-----------------------------|
|               |                             |
|  \r           |  Carriage return            |
|               |                             |
|---------------+-----------------------------|
|               |                             |
|  \t           |  Horizontal tab             |
|               |                             |
|---------------+-----------------------------|
|               |                             |
|  \v           |  Vertical tab               |
|               |                             |
|---------------+-----------------------------|
|               |                             |
|  \'           |  Single quotation mark      |
|               |                             |
|---------------+-----------------------------|
|               |                             |
|  \"           |  Double quotation mark      |
|               |                             |
|---------------+-----------------------------|
|               |                             |
|  \\           |  Backslash                  |
|               |                             |
|---------------+-----------------------------|
|               |                             |
|  \?           |  Literal question mark      |
|               |                             |
|---------------+-----------------------------|
|               |                             |
|  \ooo         |  ASCII character in octal   |
|               |  notation                   |
|               |                             |
|---------------+-----------------------------|
|               |                             |
|  \xhhh        |  ASCII character in         |
|               |  hexadecimal notation       |
|               |                             |
|---------------+-----------------------------|




Thanks
Zaiqiang





                    "Albert Huh"

                    <albert.huh@embarcade       To:
<antlr-interest@yahoogroups.com>
                    ro-ca.com>                  cc:

                                                Subject:     RE:
[antlr-interest] How to write '\v' in antlr grammar?
                    03/28/03 12:54 AM

                    Please respond to

                    antlr-interest








are you sure '\v' is a valid escape sequence in java/c++?

i could be wrong, but i don't think \v means anything at all...


-----Original Message-----
From: zai-qiang.leng@sybase.com [mailto:zai-qiang.leng@sybase.com]
Sent: Thursday, March 27, 2003 3:25 AM
To: antlr-interest@yahoogroups.com
Subject: [antlr-interest] How to write '\v' in antlr grammar?


Hi,

I have following lexer rules,

protected
ESC
     :    '~'!
          (
               'n'       {$setText('\n');}
          |    'r'       {$setText('\r');}
          |    'v'       {$setText('\v');}                        //If I
change the '\v' to ''(empty char), all is ok.
          |    't'       {$setText('\t');}
          |    'f'       {$setText('\f');}
          |    'b'       {$setText('\b');}
          |    ('0'..'2') (Digit) (Digit)
          );


but when I compile it via antlr, I got following errors:

NTLR Parser Generator   Version 2.7.1   1989-2000 jGuru.com
error: Token stream error reading
grammar(s):antlr.TokenStreamRecognitionException: unexpected char: v
TokenStreamException: unexpected char: v
Error executing c:\winnt\system32\cmd.exe.


Can anyone tell me how to solve this?

Thanks
Zaiqiang




Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/





Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/










Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/





Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/




Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/








 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From madison_stjames at yahoo.com  Mon Mar 31 18:23:11 2003
From: madison_stjames at yahoo.com (madison_stjames)
Date: Mon Dec 20 16:15:30 2004
Subject: [antlr-interest] Parsing an IP Address
Message-ID: <b6at6f+6c9f@eGroups.com>

I am trying to parse an IP address using the following:

In the Lexer:

DOT       :   '.'
          ;

IPSEG     :   ( ('1'('0'..'9')('0'..'9'))|('2'('0'..'4')('0'..'9'))
              |('2''5'('0'..'9'))|(('1'..'9')?('0'..'9')) )
          ;

In the Parser:
seg
   :    s:IPSEG
        {}
   ;

ip
   :    i: seg DOT seg DOT seg DOT seg
        {Console.Out.WriteLine(i.getText());}
   ;

I am getting a number of errors: one says that the type or 
namespace 'i' cannot be found, and another says that the type or 
namespace "lexer" cannot be found.

Obviously, it's a syntax error, but I haven't been able to determine 
the fix on my own.

I am trying to keep my tokens relatively small, and perform most of 
the assembly in the parser.

Is there a way to do this?


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From rbencina at iprimus.com.au  Mon Mar 31 18:42:30 2003
From: rbencina at iprimus.com.au (Ross Bencina)
Date: Mon Dec 20 16:15:30 2004
Subject: [antlr-interest] Parsing an IP Address
References: <b6at6f+6c9f@eGroups.com>
Message-ID: <01c601c2f7f8$58086350$0101a8c0@athlon900>

> ip
>    :    i: seg DOT seg DOT seg DOT seg
>         {Console.Out.WriteLine(i.getText());}
>    ;
>
> I am getting a number of errors: one says that the type or
> namespace 'i' cannot be found, and another says that the type or
> namespace "lexer" cannot be found.

The colon syntax cannot be used for non-terminals.

I'm not exactly sure what you're trying to do, but you might need something
like:

seg  returns [ RefToken result ]
   :    s:IPSEG
        { result=s; }
   ;

ip
{
    RefToken i;
}
   :    i=seg DOT seg DOT seg DOT seg
        {Console.Out.WriteLine(i->getText());}
   ;

I think RefToken is not the correct type, but you should be able to work it
out by examining the generated source.

Ross.


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

