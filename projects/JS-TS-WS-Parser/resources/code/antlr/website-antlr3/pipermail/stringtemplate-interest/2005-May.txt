From tom at egressive.com  Sun May  1 16:49:25 2005
From: tom at egressive.com (Tom Bentley)
Date: Sun May  1 16:49:31 2005
Subject: [stringtemplate-interest] Escaping
Message-ID: <42756B05.9080408@egressive.com>

Hi All,

I have a question about escaping:

On the one hand, I have a domain model which knows nothing about XML. 
Various classes have getters which could return an arbitrary String, 
including characters such as '&', '<', and '>' (i.e. not XML encoded as 
&amp; &lt; and &gt;).

On the other hand I have a StringTemplate instance that tries to 
produces some XML output based on the domain model. StringTemplate 
doesn't know about XML either.

So my question is: How can I ensure that characters such as '&', '<', 
and '>' are correctly encoded  in the XML output.

Having had a brief scan of the documentation 
(http://www.stringtemplate.org/doc/doc.tml) I can't see that this issue 
is addressed.

Thanks!

Tom
From FrankHarper.10118606 at bloglines.com  Tue May  3 01:34:05 2005
From: FrankHarper.10118606 at bloglines.com (FrankHarper.10118606@bloglines.com)
Date: Tue May  3 01:34:06 2005
Subject: [stringtemplate-interest] $elseif$ not included?
Message-ID: <1115109245.2673475698.29497.sendItem@bloglines.com>

In my templates I find that every once in a while I would like to use
something
like this

$if(attrib1)$
... attrib1 case
$elseif(attrib2)$
... attrib2
case
$else$
... default case
$endif$

But since there doesn't appear
to be an $elseif$ in ST, I resort to
the following more verbose version:


$if(attrib1)$
... attrib1 case
$else$
 $if(attrib2)$
 ... attrib2 case

 $else$
 ... default case
 $endif$
$endif$

I'm wondering if there's
a good reason for not including an $elseif$
in ST? Or is it just a feature
that hasn't been added yet?

Cheers,
 Frank
From parrt at cs.usfca.edu  Tue May  3 09:08:54 2005
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue May  3 09:08:33 2005
Subject: [stringtemplate-interest] Escaping
In-Reply-To: <42756B05.9080408@egressive.com>
References: <42756B05.9080408@egressive.com>
Message-ID: <a661f80ff156f4fac1aafff65c9b7376@cs.usfca.edu>

On May 1, 2005, at 4:49 PM, Tom Bentley wrote:

> Hi All,
>
> I have a question about escaping:
>
> On the one hand, I have a domain model which knows nothing about XML. 
> Various classes have getters which could return an arbitrary String, 
> including characters such as '&', '<', and '>' (i.e. not XML encoded 
> as &amp; &lt; and &gt;).
>
> On the other hand I have a StringTemplate instance that tries to 
> produces some XML output based on the domain model. StringTemplate 
> doesn't know about XML either.
>
> So my question is: How can I ensure that characters such as '&', '<', 
> and '>' are correctly encoded  in the XML output.

I'm partial to the idea of renderers now.  Your controller wraps 
objects such as name in other objects that render it according to the 
target.  I'm thinking of adding a mapping that lets you just once say 
"wrap all String objects in HTMLStringRenderer objects".

Ter
--
CS Professor & Grad Director, University of San Francisco
Creator, ANTLR Parser Generator, http://www.antlr.org
Cofounder, http://www.jguru.com

From parrt at cs.usfca.edu  Tue May  3 09:09:27 2005
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue May  3 09:09:07 2005
Subject: [stringtemplate-interest] $elseif$ not included?
In-Reply-To: <1115109245.2673475698.29497.sendItem@bloglines.com>
References: <1115109245.2673475698.29497.sendItem@bloglines.com>
Message-ID: <25d9f090d751e33674847b6831dae8ed@cs.usfca.edu>


On May 3, 2005, at 1:34 AM, FrankHarper.10118606@bloglines.com wrote:

> In my templates I find that every once in a while I would like to use
> something
> like this
>
> $if(attrib1)$
> ... attrib1 case
> $elseif(attrib2)$
> ... attrib2
> case
> $else$
> ... default case
> $endif$
>
> But since there doesn't appear
> to be an $elseif$ in ST, I resort to
> the following more verbose version:
>
>
> $if(attrib1)$
> ... attrib1 case
> $else$
>  $if(attrib2)$
>  ... attrib2 case
>
>  $else$
>  ... default case
>  $endif$
> $endif$
>
> I'm wondering if there's
> a good reason for not including an $elseif$
> in ST? Or is it just a feature
> that hasn't been added yet?

Hi Frank,

There's not a good reason really.  I just haven't needed it that often 
so I left it out... :(

Ter
--
CS Professor & Grad Director, University of San Francisco
Creator, ANTLR Parser Generator, http://www.antlr.org
Cofounder, http://www.jguru.com

From parrt at cs.usfca.edu  Tue May  3 09:11:00 2005
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue May  3 09:10:39 2005
Subject: [stringtemplate-interest] Iterating over a map
In-Reply-To: <42657659.8070601@egressive.com>
References: <3a9221d4a8fb2ddd7546f9285a31e3f9@cs.usfca.edu>
	<42657659.8070601@egressive.com>
Message-ID: <756e5956212f3bc9b4fcffbde62b74ff@cs.usfca.edu>


On Apr 19, 2005, at 2:21 PM, Tom Bentley wrote:
>> No, you are right!  The only problem is that I'd have to create a 
>> "temp" object with fields key/value for each iteration.  I guess 
>> that's not so bad...I like it!  Ok, i'm putting on my to do list!
>
> I have some working code, if you're interested.
>
> I basically used entrySet() rather than values() in 
> ASTExpr.convertAnythingIterableToIterator(), this means iterator 
> expressions are now iterating over Map.Entrys, which thankfully have 
> getKey() and getValue(), so everything behaves as you might expect.
>
> There is a snag though: The implementation of Map.Entry (for a HashMap 
> at least) is not a public class, so you can't invoke the getKey() and 
> getValue() method using reflection because the method is not 
> accessible. I found this quite surprising. I had to write an extra 
> method to make a public method declared by a public interface, but 
> implemented by a non-public class accessible. [Sorry, this was maybe 
> more detail than you wanted to know ;-)]

Hi Tom.  Yeah, that's why i was thinking we'd need that temp object.  I 
don't like having to assume something is a map, but i already break 
this rule by allowing object.property ;)

Ter
--
CS Professor & Grad Director, University of San Francisco
Creator, ANTLR Parser Generator, http://www.antlr.org
Cofounder, http://www.jguru.com

From tom at egressive.com  Tue May  3 14:32:36 2005
From: tom at egressive.com (Tom Bentley)
Date: Tue May  3 14:32:41 2005
Subject: [stringtemplate-interest] Escaping
In-Reply-To: <a661f80ff156f4fac1aafff65c9b7376@cs.usfca.edu>
References: <42756B05.9080408@egressive.com>
	<a661f80ff156f4fac1aafff65c9b7376@cs.usfca.edu>
Message-ID: <4277EDF4.3010006@egressive.com>

 > Your controller wraps objects
> such as name in other objects that render it according to the target.  
> I'm thinking of adding a mapping that lets you just once say "wrap all 
> String objects in HTMLStringRenderer objects".

So you can simply add a Renderer to a template (much as you can set 
attributes on it), and the renderer is in charge of converting Objects 
to Strings...? If the don't add a renderer you'd get the default 
renderer, which just uses Object.toString(), as we have at the moment 
(thogh doesn't it convert null to the empty string?).

It seems the simple and obvious way to do it, and I like simple and 
obvious things!

Cheers,

Tom
From tom at egressive.com  Tue May  3 14:48:58 2005
From: tom at egressive.com (Tom Bentley)
Date: Tue May  3 14:49:02 2005
Subject: [stringtemplate-interest] Iterating over a map
In-Reply-To: <756e5956212f3bc9b4fcffbde62b74ff@cs.usfca.edu>
References: <3a9221d4a8fb2ddd7546f9285a31e3f9@cs.usfca.edu>	<42657659.8070601@egressive.com>
	<756e5956212f3bc9b4fcffbde62b74ff@cs.usfca.edu>
Message-ID: <4277F1CA.20702@egressive.com>


> Hi Tom.  Yeah, that's why i was thinking we'd need that temp object.  I 
> don't like having to assume something is a map, but i already break this 
> rule by allowing object.property ;)

Yeah, I saw the special case code in there, worrying about Hashtables 
and the like.

There are quite a few 'safe' (without side-effects) implementations of 
Map in J2SE to worry about; Hashtable, HashMap, TreeMap, LinkedHashMap, 
possibly IdentityHashMap (though that's something of a special case). 
IMHO, supporting the TreeMap and LinkedHashMap is reasonably important, 
since it gives some sort of control over iteration order.

On the other hand, it seems a shame that people have to shoehorn their 
model into a HashMap/Hashtable: Fundementally, you can't know for sure 
that the getters people write (and StringTemplate merrily calls) don't 
have weird side-effects, so part of me says just to assume the Map 
interface regardless: If people write a Map whose get() has side-effects 
that's their look-out.

Just my 2 cents.

Cheers,

Tom
From parrt at cs.usfca.edu  Tue May  3 16:10:21 2005
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue May  3 16:10:00 2005
Subject: [stringtemplate-interest] Escaping
In-Reply-To: <4277EDF4.3010006@egressive.com>
References: <42756B05.9080408@egressive.com>
	<a661f80ff156f4fac1aafff65c9b7376@cs.usfca.edu>
	<4277EDF4.3010006@egressive.com>
Message-ID: <3f129cf40c006e3dda7fc3af981fef10@cs.usfca.edu>


On May 3, 2005, at 2:32 PM, Tom Bentley wrote:

> > Your controller wraps objects
>> such as name in other objects that render it according to the target. 
>>  I'm thinking of adding a mapping that lets you just once say "wrap 
>> all String objects in HTMLStringRenderer objects".
>
> So you can simply add a Renderer to a template (much as you can set 
> attributes on it), and the renderer is in charge of converting Objects 
> to Strings...? If the don't add a renderer you'd get the default 
> renderer, which just uses Object.toString(), as we have at the moment 
> (thogh doesn't it convert null to the empty string?).
>
> It seems the simple and obvious way to do it, and I like simple and 
> obvious things!

Yep, should work.  I have it on the list of things to do. :)

Ter
--
CS Professor & Grad Director, University of San Francisco
Creator, ANTLR Parser Generator, http://www.antlr.org
Cofounder, http://www.jguru.com

From parrt at cs.usfca.edu  Tue May  3 16:11:51 2005
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue May  3 16:11:31 2005
Subject: [stringtemplate-interest] Iterating over a map
In-Reply-To: <4277F1CA.20702@egressive.com>
References: <3a9221d4a8fb2ddd7546f9285a31e3f9@cs.usfca.edu>	<42657659.8070601@egressive.com>
	<756e5956212f3bc9b4fcffbde62b74ff@cs.usfca.edu>
	<4277F1CA.20702@egressive.com>
Message-ID: <e9b4d8ae3fc9175e09d65d8ff21cd3d1@cs.usfca.edu>


On May 3, 2005, at 2:48 PM, Tom Bentley wrote:

>
>> Hi Tom.  Yeah, that's why i was thinking we'd need that temp object.  
>> I don't like having to assume something is a map, but i already break 
>> this rule by allowing object.property ;)
>
> Yeah, I saw the special case code in there, worrying about Hashtables 
> and the like.
>
> There are quite a few 'safe' (without side-effects) implementations of 
> Map in J2SE to worry about; Hashtable, HashMap, TreeMap, 
> LinkedHashMap, possibly IdentityHashMap (though that's something of a 
> special case). IMHO, supporting the TreeMap and LinkedHashMap is 
> reasonably important, since it gives some sort of control over 
> iteration order.
>
> On the other hand, it seems a shame that people have to shoehorn their 
> model into a HashMap/Hashtable: Fundementally, you can't know for sure 
> that the getters people write (and StringTemplate merrily calls) don't 
> have weird side-effects, so part of me says just to assume the Map 
> interface regardless: If people write a Map whose get() has 
> side-effects that's their look-out.

Yeah, i've fought myself over this for a long time.  I really like to 
prevent the side-effects, but I've already allowed the hole with 
.getProperty() as you say.  Hmm...you may have convinced me.  Though, 
$db.bob$ is way more tempting to use as a database.  It's actually 
worse than getproperty as you can pass a parameter in, which is mucho 
bad.

Ter
--
CS Professor & Grad Director, University of San Francisco
Creator, ANTLR Parser Generator, http://www.antlr.org
Cofounder, http://www.jguru.com

From parrt at cs.usfca.edu  Sun May  8 14:51:55 2005
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sun May  8 14:55:41 2005
Subject: [stringtemplate-interest] a beautiful "StringTemplate code
	generation" moment
Message-ID: <73866EE9-D731-4602-8B0A-6C3120A4FA5B@cs.usfca.edu>

Hi.

Last Friday, I had a beautiful "StringTemplate code generation  
moment" when working on ANTLR v3; it was cool enough that I wrote up  
a big blurb in the "blog":

http://www.antlr.org/blog/antlr3/codegen.tml

Here's the key insight: lazy evaluation is insanely useful when  
building translators (the blog entry describes a great example).   
Don't build code generators without StringTemplate! ;)

Ter

From tom at egressive.com  Mon May  9 21:12:46 2005
From: tom at egressive.com (Tom Bentley)
Date: Mon May  9 21:12:51 2005
Subject: [stringtemplate-interest] The length of things
Message-ID: <428034BE.1030406@egressive.com>

Hi All,

I have a getFoo() method in my model which returns an array. I was sort 
of expecting that I could access the length of this array in 
StringTemplate using something along the lines of:

   $obj.foo.length$

However, this doesn't work: I get a NoSuchField exception because length 
is supposedly not a field of the thing returned by getFoo().

Is this behaviour intentional, and if so, is there any mechanism for 
getting the length of my array, or must I add some sort of hasSomeFoo() 
method to my model?

Cheers,

Tom
From tom at egressive.com  Mon May  9 22:32:04 2005
From: tom at egressive.com (Tom Bentley)
Date: Mon May  9 22:36:36 2005
Subject: [stringtemplate-interest] The length of things
In-Reply-To: <428034BE.1030406@egressive.com>
References: <428034BE.1030406@egressive.com>
Message-ID: <42804754.50501@egressive.com>

> Is this behaviour intentional, and if so, is there any mechanism for 
> getting the length of my array, or must I add some sort of hasSomeFoo() 
> method to my model?

Doh! What I meant to say was:

   ...or must I add some sort of getFooLength() method to me model?

Cheers,

Tom
From parrt at cs.usfca.edu  Mon May  9 23:07:28 2005
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon May  9 23:07:58 2005
Subject: [stringtemplate-interest] The length of things
In-Reply-To: <428034BE.1030406@egressive.com>
References: <428034BE.1030406@egressive.com>
Message-ID: <8826AE9E-5671-4BA9-AD2B-2B63866DE7ED@cs.usfca.edu>

On May 9, 2005, at 9:12 PM, Tom Bentley wrote:

> Hi All,
>
> I have a getFoo() method in my model which returns an array. I was  
> sort of expecting that I could access the length of this array in  
> StringTemplate using something along the lines of:
>
>   $obj.foo.length$
>
> However, this doesn't work: I get a NoSuchField exception because  
> length is supposedly not a field of the thing returned by getFoo().
>

Yup, you need to have a getLength() method I'm afraid.  For size, it  
would be convenient to answer size of array but also size of string.   
The problem is that it's ambiguous.  it would also be yet another  
place where a type would have to be assumed to resolve the  
ambiguity.  But, I'm not ncessarily totally opposed.

Ter


From tom at egressive.com  Tue May 10 15:21:18 2005
From: tom at egressive.com (Tom Bentley)
Date: Tue May 10 15:21:23 2005
Subject: [stringtemplate-interest] The length of things
In-Reply-To: <8826AE9E-5671-4BA9-AD2B-2B63866DE7ED@cs.usfca.edu>
References: <428034BE.1030406@egressive.com>
	<8826AE9E-5671-4BA9-AD2B-2B63866DE7ED@cs.usfca.edu>
Message-ID: <428133DE.9000106@egressive.com>

> Yup, you need to have a getLength() method I'm afraid. 

I suspected you might say that ;-)

> For size, it  
> would be convenient to answer size of array but also size of string.   

Getting the length of Strings and the size of Collections does end up 
being the next logical step on this slippery slope.

The difference with arrays is that length is supposedly a public final 
field of an array, so it should work in theory (shouldn't it?).

The String and Collection lengths are certainly 'nice to have', but 
would need a different StringTemplate to the one we have now in order to 
work.

> The problem is that it's ambiguous.  it would also be yet another  place 
> where a type would have to be assumed to resolve the  ambiguity.  But, 
> I'm not ncessarily totally opposed.

FWIW, I think getting the length of an array is a must.

Support for accessing length() and an isEmpty()-like predicate on String 
and size()/isEmpty() on java.util.Collection and java.util.Map would 
also be useful. I think you need to include special cases for the 
Collection framework because of its ubiquity.

How would this look in Python though?

Cheers,

Tom
From parrt at cs.usfca.edu  Sat May 14 13:52:09 2005
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sat May 14 13:51:50 2005
Subject: [stringtemplate-interest] The length of things
In-Reply-To: <428133DE.9000106@egressive.com>
References: <428034BE.1030406@egressive.com>
	<8826AE9E-5671-4BA9-AD2B-2B63866DE7ED@cs.usfca.edu>
	<428133DE.9000106@egressive.com>
Message-ID: <9B9CC5E6-B40C-4FF5-8891-6CD837263FD5@cs.usfca.edu>


On May 10, 2005, at 3:21 PM, Tom Bentley wrote:
>> For size, it  would be convenient to answer size of array but also  
>> size of string.
>>
>
> Getting the length of Strings and the size of Collections does end  
> up being the next logical step on this slippery slope.

True. :)

> The difference with arrays is that length is supposedly a public  
> final field of an array, so it should work in theory (shouldn't it?).

I guess you're right.

> The String and Collection lengths are certainly 'nice to have', but  
> would need a different StringTemplate to the one we have now in  
> order to work.
>
>> The problem is that it's ambiguous.  it would also be yet another   
>> place where a type would have to be assumed to resolve the   
>> ambiguity.  But, I'm not ncessarily totally opposed.
>>
>
> FWIW, I think getting the length of an array is a must.

To be consistent, I'd have to do it for any iteratable thingie.

> Support for accessing length() and an isEmpty()-like predicate on  
> String and size()/isEmpty() on java.util.Collection and  
> java.util.Map would also be useful.

Well, you test foo.isEmpty by $if(foo)$; zero length things now test  
as not there (next release).

> I think you need to include special cases for the Collection  
> framework because of its ubiquity.

Yup.

> How would this look in Python though?

Good question.  I'm CC'ing Marq.  Heh, Marq are you a member of this  
list?

Ter
--
CS Professor & Grad Director, University of San Francisco
Creator, ANTLR Parser Generator, http://www.antlr.org
Cofounder, http://www.jguru.com

From tom at egressive.com  Sun May 15 17:53:57 2005
From: tom at egressive.com (Tom Bentley)
Date: Sun May 15 17:54:02 2005
Subject: [stringtemplate-interest] The length of things
In-Reply-To: <9B9CC5E6-B40C-4FF5-8891-6CD837263FD5@cs.usfca.edu>
References: <428034BE.1030406@egressive.com>	<8826AE9E-5671-4BA9-AD2B-2B63866DE7ED@cs.usfca.edu>	<428133DE.9000106@egressive.com>
	<9B9CC5E6-B40C-4FF5-8891-6CD837263FD5@cs.usfca.edu>
Message-ID: <4287EF25.1020205@egressive.com>

>>> The problem is that it's ambiguous.  it would also be yet another   
>>> place where a type would have to be assumed to resolve the   
>>> ambiguity.  But, I'm not ncessarily totally opposed.
>>>
>>
>> FWIW, I think getting the length of an array is a must.
> 
> 
> To be consistent, I'd have to do it for any iteratable thingie.

Well, only if StringTemplate is not making a conceptual distinction 
between the two.

It seems sensible for the looping constructs in StringTemplate to assume 
it's dealing with an iterable.

But is it necessary to lump arrays, collections and arbitrary iterables 
together when it come to other parts of ST, like testing for emptyness, 
or getting the length/size of a thing?

It feels like this is Sun's fault for having all these different 
length-like things (String.length(), Collection.size(), array.length): 
Python just treats them all as a unified concept.

If you're drawing the special-case-code line at Strings, arrays and 
Collections, you could invent something along the lines of pythons len() 
and hard-code its behaviour for these types.

It /is/ messy though.

>> Support for accessing length() and an isEmpty()-like predicate on  
>> String and size()/isEmpty() on java.util.Collection and  java.util.Map 
>> would also be useful.
> 
> 
> Well, you test foo.isEmpty by $if(foo)$; zero length things now test  as 
> not there (next release).

Ah ha, the next release: Any idea when that might happen?

Cheers,

Tom
From ilia at obnovlenie.ru  Wed May 18 07:11:42 2005
From: ilia at obnovlenie.ru (ilia@obnovlenie.ru)
Date: Wed May 18 07:11:44 2005
Subject: [stringtemplate-interest] Output formatting issue
Message-ID: <auto-000183850813@frontend1.aha.ru>


Independency from data type is nice, but sometimes output is to be
formatted.
Escaping ( < -> &lt; etc.) is a programmer-controlled feature, but other
formatters may need designer's control.

For example, date in the form of UNIX timestamp should be formatted
according to designers' needs.
In existing templates that can be something like 
{$date|date_format:"Y/m/d"}

Or a long "topic header" is to be truncated to 40 symbols and then "..." is
added at the end if it was truncated
{$header|truncate:40:"..."}.

The whole issue is about "variable modifiers" that are to be managed by
designers.
A programmer should not embed such things into code, because they refer to
view rather than model.

Does StringTemplate support anything like that?

From ilia at obnovlenie.ru  Wed May 18 07:12:30 2005
From: ilia at obnovlenie.ru (ilia@obnovlenie.ru)
Date: Wed May 18 07:12:32 2005
Subject: [stringtemplate-interest] Multi-column output
Message-ID: <auto-000148158458@frontend4.aha.ru>


I want a simple thing: to output my Picture[] pictures list as a
multi-column table.
Column number and width are managed solely by designer,
Total count of pictures is known beforehand surely.

E.g 12 pictures may be output as 2x6 table or 3x4 table or 4x3 table.. Or 12
in a single column.
Designer is the only one who knows.

How this thing is done with StringTemplate ?

From ilia at obnovlenie.ru  Wed May 18 07:26:22 2005
From: ilia at obnovlenie.ru (ilia@obnovlenie.ru)
Date: Wed May 18 07:26:24 2005
Subject: [stringtemplate-interest] Separator definition
Message-ID: <auto-000030467818@frontend3.aha.ru>


I Keep on exploring StringTemplate in various web-related use cases.

Hopefully you'd excuse me for intensive questioning :)


Imagine I have to output a table with search results.
Every search result occupies a single row.

Rows are separated with a large construct like:
<tr>
	<td colspan=".." bgcolor=".. changing colors grey-white ..."> 
		....some design here .... 
	</td>
</tr>

In standard templates that's easy
{foreach results}
Result row
{if not last result}
Separator row
{/if}
{/foreach}

How do I code such thing in StringTemplate?
I can't even check whether an element is last in list.

Only the way I see is to point at another template in "separator"...
But such template must be declared separately from the main body, while it
should be inlined in fact, 
so that way will not do...

Any nice inlining solution ?






From parrt at cs.usfca.edu  Tue May 24 16:32:42 2005
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue May 24 16:32:18 2005
Subject: [stringtemplate-interest] The length of things
In-Reply-To: <4287EF25.1020205@egressive.com>
References: <428034BE.1030406@egressive.com>	<8826AE9E-5671-4BA9-AD2B-2B63866DE7ED@cs.usfca.edu>	<428133DE.9000106@egressive.com>
	<9B9CC5E6-B40C-4FF5-8891-6CD837263FD5@cs.usfca.edu>
	<4287EF25.1020205@egressive.com>
Message-ID: <EFC33297-F118-43A0-A84F-1581BF3ADE4E@cs.usfca.edu>


On May 15, 2005, at 5:53 PM, Tom Bentley wrote:
>>>> The problem is that it's ambiguous.  it would also be yet  
>>>> another   place where a type would have to be assumed to resolve  
>>>> the   ambiguity.  But, I'm not ncessarily totally opposed.
>>>>
>>>>
>>>
>>> FWIW, I think getting the length of an array is a must.
>>>
>> To be consistent, I'd have to do it for any iteratable thingie.
>>
>
> Well, only if StringTemplate is not making a conceptual distinction  
> between the two.
>
> It seems sensible for the looping constructs in StringTemplate to  
> assume it's dealing with an iterable.

It usually does.  It converts everything to Iterators I think.

> But is it necessary to lump arrays, collections and arbitrary  
> iterables together when it come to other parts of ST, like testing  
> for emptyness, or getting the length/size of a thing?

Hmm...I have single valued and multi-valued attribute concepts...I  
think length makes sense for those as how many in the collection.  As  
for individual objects, how can we know whether you meant how many  
strings and how long is this particular string?  Hmm...good question.

> It feels like this is Sun's fault for having all these different  
> length-like things (String.length(), Collection.size(),  
> array.length): Python just treats them all as a unified concept.

Yeah, let's blame them :)

> If you're drawing the special-case-code line at Strings, arrays and  
> Collections, you could invent something along the lines of pythons  
> len() and hard-code its behaviour for these types.
>
> It /is/ messy though.

Yeah. :(

>>> Support for accessing length() and an isEmpty()-like predicate  
>>> on  String and size()/isEmpty() on java.util.Collection and   
>>> java.util.Map would also be useful.
>>>
>> Well, you test foo.isEmpty by $if(foo)$; zero length things now  
>> test  as not there (next release).
>>
>
> Ah ha, the next release: Any idea when that might happen?

When people pressure me to do so I guess ;)

Ter
--
CS Professor & Grad Director, University of San Francisco
Creator, ANTLR Parser Generator, http://www.antlr.org
Cofounder, http://www.jguru.com

From parrt at cs.usfca.edu  Tue May 24 16:34:07 2005
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue May 24 16:33:41 2005
Subject: [stringtemplate-interest] Output formatting issue
In-Reply-To: <auto-000183850813@frontend1.aha.ru>
References: <auto-000183850813@frontend1.aha.ru>
Message-ID: <94404868-C5FC-4DCE-95AA-C6AD707D889C@cs.usfca.edu>


On May 18, 2005, at 7:11 AM, <ilia@obnovlenie.ru>  
<ilia@obnovlenie.ru> wrote:

>
> Independency from data type is nice, but sometimes output is to be
> formatted.
> Escaping ( < -> &lt; etc.) is a programmer-controlled feature, but  
> other
> formatters may need designer's control.

Correct.

> For example, date in the form of UNIX timestamp should be formatted
> according to designers' needs.
> In existing templates that can be something like
> {$date|date_format:"Y/m/d"}
>
> Or a long "topic header" is to be truncated to 40 symbols and then  
> "..." is
> added at the end if it was truncated
> {$header|truncate:40:"..."}.
>
> The whole issue is about "variable modifiers" that are to be  
> managed by
> designers.
> A programmer should not embed such things into code, because they  
> refer to
> view rather than model.

Correct.

> Does StringTemplate support anything like that?

It relies on the controller to wrap objects in the appropriate  
"renderer" object.  I'm adding a mapping concept in the next version  
that lets you pass in a collection of renderers, one for each locale,  
so you could generically say format dates in this way. :)

Ter
--
CS Professor & Grad Director, University of San Francisco
Creator, ANTLR Parser Generator, http://www.antlr.org
Cofounder, http://www.jguru.com

From parrt at cs.usfca.edu  Tue May 24 16:36:36 2005
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue May 24 16:36:09 2005
Subject: [stringtemplate-interest] Multi-column output
In-Reply-To: <auto-000148158458@frontend4.aha.ru>
References: <auto-000148158458@frontend4.aha.ru>
Message-ID: <52625187-7067-4B84-8E73-2B7C37A180B1@cs.usfca.edu>


On May 18, 2005, at 7:12 AM, <ilia@obnovlenie.ru>  
<ilia@obnovlenie.ru> wrote:

>
> I want a simple thing: to output my Picture[] pictures list as a
> multi-column table.
> Column number and width are managed solely by designer,
> Total count of pictures is known beforehand surely.
>
> E.g 12 pictures may be output as 2x6 table or 3x4 table or 4x3  
> table.. Or 12
> in a single column.
> Designer is the only one who knows.

i think I would agree with this.

> How this thing is done with StringTemplate ?

Currently this cannot be done purely within ST. You'd have to pass in  
different size chunks of the data. :(

Booo....

i'm just nervous about access the ith attribute...starts to look very  
code-like, though in this particular case it's pretty hard to argue  
that the decision should be anywhere but with the designer.  Hmm...

Ter
--
CS Professor & Grad Director, University of San Francisco
Creator, ANTLR Parser Generator, http://www.antlr.org
Cofounder, http://www.jguru.com

From parrt at cs.usfca.edu  Tue May 24 17:22:42 2005
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue May 24 17:22:18 2005
Subject: [stringtemplate-interest] Separator definition
In-Reply-To: <auto-000030467818@frontend3.aha.ru>
References: <auto-000030467818@frontend3.aha.ru>
Message-ID: <1D36D47D-C578-4898-A479-38D7877FF56E@cs.usfca.edu>


On May 18, 2005, at 7:26 AM, <ilia@obnovlenie.ru>  
<ilia@obnovlenie.ru> wrote:
> I Keep on exploring StringTemplate in various web-related use cases.
>
> Hopefully you'd excuse me for intensive questioning :)

I appreciate it! :)  keep 'em coming!

> Imagine I have to output a table with search results.
> Every search result occupies a single row.
>
> Rows are separated with a large construct like:
> <tr>
>     <td colspan=".." bgcolor=".. changing colors grey-white ...">
>         ....some design here ....
>     </td>
> </tr>
>
> In standard templates that's easy
> {foreach results}
> Result row
> {if not last result}
> Separator row
> {/if}
> {/foreach}
>
> How do I code such thing in StringTemplate?
> I can't even check whether an element is last in list.
>
> Only the way I see is to point at another template in "separator"...
> But such template must be declared separately from the main body,  
> while it
> should be inlined in fact,
> so that way will not do...
>
> Any nice inlining solution ?

I was just informed that while separator=template() works separator= 
{...} does not!  I'm fixing in next release.

Sorry!

Ter
--
CS Professor & Grad Director, University of San Francisco
Creator, ANTLR Parser Generator, http://www.antlr.org
Cofounder, http://www.jguru.com

From parrt at cs.usfca.edu  Wed May 25 16:35:14 2005
From: parrt at cs.usfca.edu (Terence Parr)
Date: Wed May 25 16:34:48 2005
Subject: [stringtemplate-interest] Separator definition
In-Reply-To: <20050525171951.E0DF721E55@nexus.cs.usfca.edu>
References: <20050525171951.E0DF721E55@nexus.cs.usfca.edu>
Message-ID: <26305C42-A0E2-49EC-B462-AD1A7930CA58@cs.usfca.edu>


On May 25, 2005, at 10:19 AM, jobapply wrote:
>>> Only the way I see is to point at another template in "separator"...
>>> But such template must be declared separately from the main body,
>>> while it
>>> should be inlined in fact,
>>> so that way will not do...
>>>
>>> Any nice inlining solution ?
>>>
>>
>> I was just informed that while separator=template() works separator=
>> {...} does not!  I'm fixing in next release.
>>
>
> May I finish..? May I finish ... ?
>
> Separator={...} is UGLY for large separating template blocks...  
> Another way?
>
> Ok, I'm finished.

Hmm...well, a special two-dimensional iterator would make doing multi- 
column tables easier.  Right now I only have the notion of walking a  
list of attributes linearly.  What if we allowed a rowsize or  
something that influenced the ':' apply operator.  Also what about  
using the comma operator?  For example, here is how we do a 3-column  
table:

<table>
<tr>
$pictures:col(), col(), col(), endrow()$
</tr>
</table>

where endrow() would be <\tr><tr> or something.  The only thing is  
that you can't handle unfinished rows.  For example if you have 4  
pictures then the last two columns in the 2nd row would be blank..not  
sure how to handle that properly.

Ter
--
CS Professor & Grad Director, University of San Francisco
Creator, ANTLR Parser Generator, http://www.antlr.org
Cofounder, http://www.jguru.com

From parrt at cs.usfca.edu  Wed May 25 16:37:34 2005
From: parrt at cs.usfca.edu (Terence Parr)
Date: Wed May 25 16:37:06 2005
Subject: [stringtemplate-interest] Output formatting issue
In-Reply-To: <20050525171951.DF5FE21E54@nexus.cs.usfca.edu>
References: <20050525171951.DF5FE21E54@nexus.cs.usfca.edu>
Message-ID: <A69C9A8E-72C7-41C5-8E68-31D6D32587F7@cs.usfca.edu>


On May 25, 2005, at 10:19 AM, jobapply wrote:
>
>> It relies on the controller to wrap objects in the appropriate
>> "renderer" object.  I'm adding a mapping concept in the next version
>> that lets you pass in a collection of renderers, one for each
>> locale,
>> so you could generically say format dates in this way. :)
>>
>
> I used to think of renderers as of a part of code..

Well they are implemented in code, but used by view

> Could you explain how
>  {$header|truncate:40:"..."}.
> example will be handled with "renderers"?

The problem is the "40".  What if you need to do truncate but not in  
the middle of an HTML tag?  I have been thinking about size of  
strings as you have seen on the list.  I wonder if a truncate  
operator would be useful in general.  I can easily make a renderer  
that truncates, but there is no way to pass it an argument...that is  
specifically disallowed in general as it would be too much like code,  
but perhaps a special operator would satisfy everybody :)

Ter
--
CS Professor & Grad Director, University of San Francisco
Creator, ANTLR Parser Generator, http://www.antlr.org
Cofounder, http://www.jguru.com

From tom at egressive.com  Wed May 25 19:19:14 2005
From: tom at egressive.com (Tom Bentley)
Date: Wed May 25 19:19:18 2005
Subject: [stringtemplate-interest] Output formatting issue
In-Reply-To: <A69C9A8E-72C7-41C5-8E68-31D6D32587F7@cs.usfca.edu>
References: <20050525171951.DF5FE21E54@nexus.cs.usfca.edu>
	<A69C9A8E-72C7-41C5-8E68-31D6D32587F7@cs.usfca.edu>
Message-ID: <42953222.5060800@egressive.com>

> The problem is the "40".  What if you need to do truncate but not in  
> the middle of an HTML tag?  I have been thinking about size of  strings 
> as you have seen on the list.  I wonder if a truncate  operator would be 
> useful in general.  I can easily make a renderer  that truncates, but 
> there is no way to pass it an argument...that is  specifically 
> disallowed in general as it would be too much like code,  but perhaps a 
> special operator would satisfy everybody :)

Is having a 40 somewhere in the template really /that much/ like code? 
Perhaps only if that 40 can be the result of some other template, rather 
than being a literal, or being bound outside the template (i.e. before 
the template is evaluated).

OTOH, it seems a slightly arbirary restriction to insist that renderer 
parameters be literals (or constants?).

Tom
From stefan at amiq.ro  Thu May 26 02:11:17 2005
From: stefan at amiq.ro (stefan)
Date: Thu May 26 02:17:09 2005
Subject: [stringtemplate-interest] Output formatting issue (formatting
	constraints and other)
In-Reply-To: <A69C9A8E-72C7-41C5-8E68-31D6D32587F7@cs.usfca.edu>
References: <20050525171951.DF5FE21E54@nexus.cs.usfca.edu>
	<A69C9A8E-72C7-41C5-8E68-31D6D32587F7@cs.usfca.edu>
Message-ID: <200505261211.17976.stefan@amiq.ro>

      A streight forward application of the stringtemplate would be a code 
beautifier, as those present in Eclipse, Netbeans etc.  

     Next lines are some older notices of mine :
_____________________________________________________________
     Lets say that we have the classic java method :
.................
public static SomeResultClass getYooopie(String _str, SomeOtherClass _soc) { 
____________________
}
.................
      and the templates:
.................
method(access_modif,static_modif,result,id b_op,a_op,args, b_cp, a_cp) ::=<<
$access_modif$ $static_modif$ $result$ $id$$b_op$($a_op$$args$$b_cp$)$a_cp$ { 
    $body$
}
>>
parameter(type, id) ::= "$type$ $id$";
.................

      I would like to reprint it in conformance with some basic composition 
rules (constraints) like:
        - [0] line length ("should be shorter than 80 chars")
        - [1] "one parameter/line and one under the other" (split point before 
each parameter)
        - [2] "put on the line as much as possible" (split point at the end of 
the line)
        - [3] "put on the line as much as possible but do not split in two the 
parameters" (split point is at the and of the line and before parameter) (eg. 
can not have "String" on current line and "_str" on the next)

      As I see it right now, a constraint would be a combination of [0] and 
one of the other rules. For rules [1-3] I have to do two things:
    a) specify the split points by marking them in stringtemplate (otherwise 
default split points are inserted before each $$ element)
    b) apply constraint at write time
 
      Open questions : 
  - should I insert split points by default in front of each $$?
  - should I evaluate chunks length without completely writing them: delay 
chunk write till the constraint is resolved? (the complete write is ordered 
by enclosing template)
______________________________________________________________________

     As soon as I will start working on a code beautifier I'll give more 
feedback,
              Stefan.
On Thursday 26 May 2005 02:37, Terence Parr wrote:
> On May 25, 2005, at 10:19 AM, jobapply wrote:
> >> It relies on the controller to wrap objects in the appropriate
> >> "renderer" object.  I'm adding a mapping concept in the next version
> >> that lets you pass in a collection of renderers, one for each
> >> locale,
> >> so you could generically say format dates in this way. :)
> >
> > I used to think of renderers as of a part of code..
>
> Well they are implemented in code, but used by view
>
> > Could you explain how
> >  {$header|truncate:40:"..."}.
> > example will be handled with "renderers"?
>
> The problem is the "40".  What if you need to do truncate but not in
> the middle of an HTML tag?  I have been thinking about size of
> strings as you have seen on the list.  I wonder if a truncate
> operator would be useful in general.  I can easily make a renderer
> that truncates, but there is no way to pass it an argument...that is
> specifically disallowed in general as it would be too much like code,
> but perhaps a special operator would satisfy everybody :)
>
> Ter
> --
> CS Professor & Grad Director, University of San Francisco
> Creator, ANTLR Parser Generator, http://www.antlr.org
> Cofounder, http://www.jguru.com
>
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest@antlr.org
> http://www.antlr.org:8080/mailman/listinfo/stringtemplate-interest
From parrt at cs.usfca.edu  Thu May 26 13:00:33 2005
From: parrt at cs.usfca.edu (Terence Parr)
Date: Thu May 26 13:00:06 2005
Subject: [stringtemplate-interest] Output formatting issue
In-Reply-To: <42953222.5060800@egressive.com>
References: <20050525171951.DF5FE21E54@nexus.cs.usfca.edu>
	<A69C9A8E-72C7-41C5-8E68-31D6D32587F7@cs.usfca.edu>
	<42953222.5060800@egressive.com>
Message-ID: <790AEF33-E813-485E-9FCC-3C2DCC2D12CB@cs.usfca.edu>


On May 25, 2005, at 7:19 PM, Tom Bentley wrote:

>> The problem is the "40".  What if you need to do truncate but not  
>> in  the middle of an HTML tag?  I have been thinking about size  
>> of  strings as you have seen on the list.  I wonder if a truncate   
>> operator would be useful in general.  I can easily make a  
>> renderer  that truncates, but there is no way to pass it an  
>> argument...that is  specifically disallowed in general as it would  
>> be too much like code,  but perhaps a special operator would  
>> satisfy everybody :)
>>
>
> Is having a 40 somewhere in the template really /that much/ like code?

Well, I'm trying to avoid arbitrary function(any-arg-list) which is  
too much like code for my taste because it requires that there be  
types and appropriate relationships between the args that are  
attributes and the functions.

> Perhaps only if that 40 can be the result of some other template,  
> rather than being a literal, or being bound outside the template  
> (i.e. before the template is evaluated).

Perhaps if it's anything but an attribute.  Yes, that would be  
strictly ok. :)

Ter
--
CS Professor & Grad Director, University of San Francisco
Creator, ANTLR Parser Generator, http://www.antlr.org
Cofounder, http://www.jguru.com

From parrt at cs.usfca.edu  Thu May 26 13:02:13 2005
From: parrt at cs.usfca.edu (Terence Parr)
Date: Thu May 26 13:01:45 2005
Subject: [stringtemplate-interest] Output formatting issue (formatting
	constraints and other)
In-Reply-To: <200505261211.17976.stefan@amiq.ro>
References: <20050525171951.DF5FE21E54@nexus.cs.usfca.edu>
	<A69C9A8E-72C7-41C5-8E68-31D6D32587F7@cs.usfca.edu>
	<200505261211.17976.stefan@amiq.ro>
Message-ID: <7436BDF4-1B0C-44A8-A938-1720A4E4203A@cs.usfca.edu>


On May 26, 2005, at 2:11 AM, stefan wrote:

>       A streight forward application of the stringtemplate would be  
> a code
> beautifier, as those present in Eclipse, Netbeans etc.

Yes, I plan on writing one of these beasts soon to learn how to do it  
properly. :)

>      Next lines are some older notices of mine :
> _____________________________________________________________
>      Lets say that we have the classic java method :
> .................
> public static SomeResultClass getYooopie(String _str,  
> SomeOtherClass _soc) {
> ____________________
> }
> .................
>       and the templates:
> .................
> method(access_modif,static_modif,result,id b_op,a_op,args, b_cp,  
> a_cp) ::=<<
> $access_modif$ $static_modif$ $result$ $id$$b_op$($a_op$$args$$b_cp 
> $)$a_cp$ {
>     $body$
> }
>
>>>
>>>
> parameter(type, id) ::= "$type$ $id$";
> .................
>
>       I would like to reprint it in conformance with some basic  
> composition
> rules (constraints) like:
>         - [0] line length ("should be shorter than 80 chars")
>         - [1] "one parameter/line and one under the other" (split  
> point before
> each parameter)
>         - [2] "put on the line as much as possible" (split point at  
> the end of
> the line)
>         - [3] "put on the line as much as possible but do not split  
> in two the
> parameters" (split point is at the and of the line and before  
> parameter) (eg.
> can not have "String" on current line and "_str" on the next)
>
>       As I see it right now, a constraint would be a combination of  
> [0] and
> one of the other rules. For rules [1-3] I have to do two things:
>     a) specify the split points by marking them in stringtemplate  
> (otherwise
> default split points are inserted before each $$ element)
>     b) apply constraint at write time

Yes, seems complicated at the moment...i'll learn more when I build one.

>       Open questions :
>   - should I insert split points by default in front of each $$?
>   - should I evaluate chunks length without completely writing  
> them: delay
> chunk write till the constraint is resolved? (the complete write is  
> ordered
> by enclosing template)
> ______________________________________________________________________
>
>      As soon as I will start working on a code beautifier I'll give  
> more
> feedback,

Sounds great!

Ter
>               Stefan.
> On Thursday 26 May 2005 02:37, Terence Parr wrote:
>
>> On May 25, 2005, at 10:19 AM, jobapply wrote:
>>
>>>> It relies on the controller to wrap objects in the appropriate
>>>> "renderer" object.  I'm adding a mapping concept in the next  
>>>> version
>>>> that lets you pass in a collection of renderers, one for each
>>>> locale,
>>>> so you could generically say format dates in this way. :)
>>>>
>>>
>>> I used to think of renderers as of a part of code..
>>>
>>
>> Well they are implemented in code, but used by view
>>
>>
>>> Could you explain how
>>>  {$header|truncate:40:"..."}.
>>> example will be handled with "renderers"?
>>>
>>
>> The problem is the "40".  What if you need to do truncate but not in
>> the middle of an HTML tag?  I have been thinking about size of
>> strings as you have seen on the list.  I wonder if a truncate
>> operator would be useful in general.  I can easily make a renderer
>> that truncates, but there is no way to pass it an argument...that is
>> specifically disallowed in general as it would be too much like code,
>> but perhaps a special operator would satisfy everybody :)
>>
>> Ter
>> --
>> CS Professor & Grad Director, University of San Francisco
>> Creator, ANTLR Parser Generator, http://www.antlr.org
>> Cofounder, http://www.jguru.com
>>
>> _______________________________________________
>> stringtemplate-interest mailing list
>> stringtemplate-interest@antlr.org
>> http://www.antlr.org:8080/mailman/listinfo/stringtemplate-interest
>>
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest@antlr.org
> http://www.antlr.org:8080/mailman/listinfo/stringtemplate-interest
>

--
CS Professor & Grad Director, University of San Francisco
Creator, ANTLR Parser Generator, http://www.antlr.org
Cofounder, http://www.jguru.com

From parrt at cs.usfca.edu  Mon May 30 11:39:31 2005
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon May 30 11:39:03 2005
Subject: [stringtemplate-interest] Output formatting issue
In-Reply-To: <20050526050803.A0C6E21C4A@nexus.cs.usfca.edu>
References: <20050526050803.A0C6E21C4A@nexus.cs.usfca.edu>
Message-ID: <839E14B7-5CF7-4260-8ABD-D6A8A9D3D230@cs.usfca.edu>


On May 25, 2005, at 10:08 PM, jobapply wrote:

>
> Truncate operator is very helpful and it is widely used /with other  
> template
> engines/.
> The actual idea of variable modifiers is not new, e.g you can find  
> truncate
> at
> http://smarty.php.net/manual/en/language.modifier.truncate.php
>
> I mean it is helpful in web-templating, not in code generation ;))
>
> When designer decides to output something in "short" format - he  
> should
> choose the number:40,60 ?
> It depends..
>
> I suggest implementing general modifiers as wrappers that will be  
> attached
> at compile-time (StringTemplate compile into something/no ?)
>

I agree that truncate operators are useful...I'll add to the list to  
think about.  StringTemplate doesn't generate code, it's interpreted. :)

Terence
--
CS Professor & Grad Director, University of San Francisco
Creator, ANTLR Parser Generator, http://www.antlr.org
Cofounder, http://www.jguru.com

From stefan at amiq.ro  Tue May 31 07:12:38 2005
From: stefan at amiq.ro (stefan)
Date: Tue May 31 07:10:57 2005
Subject: [stringtemplate-interest] how can I retrieve attribute names from a
	string template???
Message-ID: <200505311712.38766.stefan@amiq.ro>

Hello,

       I have next template :
group main;
header(mdea, file) ::= <<
// Medea : $medea$
// File : $file$
>>
            and I would like to extract the attributes names and use them to 
interogate a map.  In this case would be : { medea, file}.
            How can I do that?
          
           I tried to use the following methods with the results : 
 - getAttributes() : it returns a map with one key : "attributes"
 - getChunks()    : it returns some ASTExpr which I can not use
 - getFormArguments() : it returns a map with three elements :
                   ' {attributes=attributes, file=file, mdea=mdea} '

          The most promising seems to be getFormAttributes().
       
Stefan.

PS:
--------------------------------------------------------------------------------------------------
                               CODE FOR TEST 
--------------------------------------------------------------------------------------------------
import java.util.*;
import java.io.*;
import java.net.*;

import org.antlr.stringtemplate.*;

public class Main {

   public static void main(String[] args){
      try {
         StringTemplate.setLintMode(true);
         System.out.println("---1 ");
         StringTemplateGroup allGroup = new StringTemplateGroup(new 
FileReader("./main.st"));
         System.out.println("---Group =  " + allGroup.toString());
         StringTemplate _st = allGroup.getInstanceOf("header");
         // if next line is missing, getAttributes() throws an error          
            (NullPointerException)
         System.out.println("---3 " + _st.toString());
         Map _map = _st.getAttributes();
         System.out.println("--- Attributes key set : " + _map.keySet());
         System.out.println("--- Attributes value set : " + _map.values());
         System.out.println("---Form Arguments = " + _st.getFormArguments());
         System.out.println("---Chunks = " + _st.getChunks());
      }catch (Exception e){
         System.out.println(e.toString());
      }
   }
}
