From FrankHarper.10118606 at bloglines.com  Tue Nov  1 11:30:42 2005
From: FrankHarper.10118606 at bloglines.com (FrankHarper.10118606@bloglines.com)
Date: Tue Nov  1 11:30:44 2005
Subject: [stringtemplate-interest] ST & I18N
Message-ID: <1130873442.1674296116.9523.sendItem@bloglines.com>

Hi STers,

I haven't been able to find support in ST for I18N.

Is it
against the ST philosophy of "separating the specification of a page's business
logic and data computations from the specification of how a page displays
such information."?

My web app generates URLs on the fly based on user
input, which can contain non ascii characters. Sometimes I display the user
input in a page, and sometimes the same information is used to create links.
In this case the the user input has to be url encoded.

The only solution
I've come up with so far is to create two ST attributes with the same information,
one url encoded and one not.

Then of course there's another whole can of
worms that will appear when I actually want to translate the web page contents.
I guess this will require creating an attribute for each string that needs
I18Ning.

I would like to hear from anyone who has ideas or experience on
using ST in an I18Ned app, especially if you've come up with more elegant
solutions than the ones I've mentioned.

Cheers
  Frank 
From parrt at cs.usfca.edu  Tue Nov  1 11:31:55 2005
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue Nov  1 11:32:03 2005
Subject: [stringtemplate-interest] ANTLR2005 workshop proceedings / photos
Message-ID: <E784E4CB-9025-4551-93ED-472CA5B02031@cs.usfca.edu>

Howdy,

For your enjoyment:

http://www.antlr.org/workshop/ANTLR2005/summary.html

Lots of great talks and fun was had by all!  Thanks to all of the  
attendees. :)  Lots of great ideas floating around!

Terence
From wirecracker at gmail.com  Tue Nov  1 15:02:17 2005
From: wirecracker at gmail.com (eric nelson)
Date: Tue Nov  1 15:02:22 2005
Subject: [stringtemplate-interest] Java In / Java Out
In-Reply-To: <9da4f4520510310912s14896a04m@mail.gmail.com>
References: <ca5eeb330510290518q120825a9o7fdceec2c33a23d7@mail.gmail.com>
	<9da4f4520510310912s14896a04m@mail.gmail.com>
Message-ID: <ca5eeb330511011502t7c511a1em74aa8dbe7cb968b6@mail.gmail.com>

Oliver,
 Thank you very much for the ideas :) I am not sure that it answers my
original question, but it does look like another way of doing it. I may try
using Java Beans, but my understanding is that this should be possible to do
without them. If I am wrong I hope someone will correct me, but otherwise
I'd like to pursue this attempt a little longer ;)
  - e


 On 10/31/05, Oliver Zeigermann <oliver.zeigermann@gmail.com> wrote:
>
> Hi Eric,
>
> I was doing limited Java to Java conversions as well. An example that
> describes how to generate Java sources from Java interface definitions
> can be found here:
>
> http://www.zeigermann.de/genEJB.zip
>
> May idea there was to separate the Java analysis (using ANTLR and a
> Java grammar) from the Java generation part (using StringTemplate)
> with an intermediate step that uses Java Beans for the tree
> representation of the Java interface. Java Beans looked good as they
> are familiar to the Java programmer and make a very good input for
> StringTemplate.
>
> HTH
>
> Oliver
>
> 2005/10/29, eric nelson <wirecracker@gmail.com>:
> > I'm trying to modify the java.g grammar file so that I can use
> > StringTemplate for outputting the file. The input is a Java file. I
> would
> > like the output to be Java also. So, yes, basically no change in content
> > ... mabye some spacing will differ here or there. I am still learning to
> > use ANTLR and StringTemplate and I've written a Java.stg file based on
> what
> > I think I know so far. Exerpts from java.g and Java.stg appear below.
> One
> > of the questions I have is how to handle the "|" (or) symbol (i.e.
> > classDefinition | interfaceDefinition). The way I have it right now
> there
> > would be a list of "modifiers", a list of "classDefinitions", and a list
> of
> > interfaceDefinitions (then naturally I would have a question about the "
> |
> > s:SEMI!" ... but one question at a time ;) So, the problem in Java.stgis
> > how to match up the correct "modifiers" with the corresponding
> > "interfaceDefinition" or "classDefinition". Or what if there is a
> > classDefinition with no modifier, etc. I am quite convinced that my
> > Java.stg template (typeDefinition in particular) and/or my java.g code
> has
> > erred somewhere. Any thoughts? This is HUGE since this will help me
> > understand how to approach the "field" rule in java.g .... if anyone has
> > some hints on a "field" template that would also be great! Thanks :) - e
> >
> >
> > java.g exerpt (java 1.3 grammar)
> >
> >
> //////////////////////////////////////////////////////////////////////////////////////////////////
> > // A type definition in a file is either a class or interface
> definition.
> > typeDefinition returns [StringTemplate
> > code=template("typeDefinition")]
> > options {defaultErrorHandler = true;}
> > {StringTemplate mod=null, cd=null, id=null, semi=null;}
> > : mod=m:modifiers! {code.setAttribute("modifiers", mod);}
> > ( cd=classDefinition[#m] { code.setAttribute("classDefinitions",
> > cd);}
> > | id=interfaceDefinition[#m]
> > {code.setAttribute("interfaceDefinitions", id);}
> > )
> > | s:SEMI!
> > {semi=template("lexer_semi");semi.setAttribute("semi",
> > s.getText());code.setAttribute("semi", semi);}
> > ;
> >
> >
> >
> //////////////////////////////////////////////////////////////////////////////////////////////////
> >
> >
> > Java.stg exerpt
> >
> >
> //////////////////////////////////////////////////////////////////////////////////////////////////
> > typeDefinition(modifiers,classDefinitions,interfaceDefinitions,semi)
> > ::= <<
> > <modifiers><classDefinitions><interfaceDefinitions><semi>
> > >>
> >
> >
> > modifiers(modifiers) ::= "<modifiers>"
> >
> > modifier(modifier) ::= "<modifier>"
> >
> > classDefinition(ident,superClassClause,implementsClause,classBlock)
> > ::= <<
> > class <ident> <superClassClause> <implementsClause>
> > <classBlock>
> > >>
> >
> > interfaceDefinition() ::= <<
> > not yet completed
> > >>
> >
> >
> //////////////////////////////////////////////////////////////////////////////////////////////////
> >
> > _______________________________________________
> > stringtemplate-interest mailing list
> > stringtemplate-interest@antlr.org
> > http://www.antlr.org:8080/mailman/listinfo/stringtemplate-interest
> >
> >
> >
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org:8080/pipermail/stringtemplate-interest/attachments/20051101/242d5a8a/attachment.html
From polina_o at hotmail.com  Thu Nov  3 19:14:47 2005
From: polina_o at hotmail.com (polina orechko)
Date: Thu Nov  3 19:14:49 2005
Subject: [stringtemplate-interest] html escaping
Message-ID: <BAY20-F13DA04785D82166E53647DEA600@phx.gbl>

Hello,

I am integrating StringTemplate as a template engine in a Struts-based web 
app.

One of the questions I have is about HTML escaping, such as converting <, >, 
quotes, etc. into their HTML entity equivalents such as &lt; &gt; etc..

As far as I can see from the source code, StringTemplate does not provide 
such an option out of the box, is this understanding correct?

One way to do this would be to provide a String getter that would return an 
encoded String, which quite cumbersome.

The second question is whether providing a render for String.class via 
StringTemplate.registerRenderer looks like a better solution?  Would it work 
well?  Are there any hidden caveats or problems that may surface?

Thanks in advance, any help would be greatly appreciated.
- Polina

_________________________________________________________________
Don't just search. Find. Check out the new MSN Search! 
http://search.msn.click-url.com/go/onm00200636ave/direct/01/

From parrt at cs.usfca.edu  Fri Nov  4 08:11:47 2005
From: parrt at cs.usfca.edu (Terence Parr)
Date: Fri Nov  4 08:11:52 2005
Subject: [stringtemplate-interest] Re: [antlr-interest] StringTemplate
	output issues
In-Reply-To: <20051104154639.GA13494@dragon.homelinux.org>
References: <20051104154639.GA13494@dragon.homelinux.org>
Message-ID: <C66B22ED-7701-4B82-ADAF-9264B0A5191F@cs.usfca.edu>

Hi.  Still not caught up on emails, but this one is easy.  Default  
delimiters are $..$.  Look for an example that sends in the  
AngleBracketsLexer.class or whatever it's called to the Group ctor. :)

Ter
On Nov 4, 2005, at 7:46 AM, Olivier Dragon wrote:

[snip]

> However the template doesn't work. I'm getting the template text
> literally, including the attribute placeholder. I've looked at the
> toDebugString() output and everything looks good to me. I've even  
> tried
> to debug it through Eclipse and everything looks fine there too.  
> Here's
> my result:
>
> <units; separator="\nc\n">

[snip]
From parrt at cs.usfca.edu  Fri Nov  4 09:37:00 2005
From: parrt at cs.usfca.edu (Terence Parr)
Date: Fri Nov  4 09:38:17 2005
Subject: [stringtemplate-interest] html escaping
In-Reply-To: <BAY20-F13DA04785D82166E53647DEA600@phx.gbl>
References: <BAY20-F13DA04785D82166E53647DEA600@phx.gbl>
Message-ID: <6B636CE0-BFD8-4D8F-8B8A-EA90932FD23D@cs.usfca.edu>

On Nov 3, 2005, at 7:14 PM, polina orechko wrote:
> Hello,
>
> I am integrating StringTemplate as a template engine in a Struts- 
> based web app.
>
> One of the questions I have is about HTML escaping, such as  
> converting <, >, quotes, etc. into their HTML entity equivalents  
> such as &lt; &gt; etc..
>
> As far as I can see from the source code, StringTemplate does not  
> provide such an option out of the box, is this understanding correct?

Correct; ST is really target language neutral.

> One way to do this would be to provide a String getter that would  
> return an encoded String, which quite cumbersome.
>
> The second question is whether providing a render for String.class  
> via StringTemplate.registerRenderer looks like a better solution?   
> Would it work well?  Are there any hidden caveats or problems that  
> may surface?

It *should* work. ;)  I think somebody found a bug (with patch on  
this list) recently.  I fixed in mainline for 2.3.

Best regards and thanks for using ST!
Ter
From parrt at cs.usfca.edu  Fri Nov  4 09:40:45 2005
From: parrt at cs.usfca.edu (Terence Parr)
Date: Fri Nov  4 09:42:02 2005
Subject: [stringtemplate-interest] ST & I18N
In-Reply-To: <1130873442.1674296116.9523.sendItem@bloglines.com>
References: <1130873442.1674296116.9523.sendItem@bloglines.com>
Message-ID: <F6BD8720-A15C-402E-BC50-1719C32AB98C@cs.usfca.edu>


On Nov 1, 2005, at 11:30 AM, FrankHarper.10118606@bloglines.com wrote:

> Hi STers,
>
> I haven't been able to find support in ST for I18N.

Do you mean that the templates cannot contain unicode or that the  
error messages from the tool are english only and hardcoded?

> My web app generates URLs on the fly based on user
> input, which can contain non ascii characters. Sometimes I display  
> the user
> input in a page, and sometimes the same information is used to  
> create links.
> In this case the the user input has to be url encoded.
>
> The only solution
> I've come up with so far is to create two ST attributes with the  
> same information,
> one url encoded and one not.

Can you add a renderer mapping from a special URL object so that any  
object that is plain string just displays and then any URL gets encoded?

> Then of course there's another whole can of
> worms that will appear when I actually want to translate the web  
> page contents.
> I guess this will require creating an attribute for each string  
> that needs
> I18Ning.

I use a StringTemplateGroup to good effect for this.  All error  
messages in new ANTLR v3 are in a group for english, one for french,  
etc...  I have a switch based upon the locale that loads the  
appropriate group and then I use a key like GRAMMAR_NONDETERMINISM  
which is or could be mapped to the template name to load.  The tool  
knows nothing of the contents...can be unicode or whatever.

> I would like to hear from anyone who has ideas or experience on
> using ST in an I18Ned app, especially if you've come up with more  
> elegant
> solutions than the ones I've mentioned.

We should come up with a standard recommendation for this...I can add  
stuff to the tool to make it work better if need be.

Ter
From parrt at cs.usfca.edu  Sat Nov  5 17:14:54 2005
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sat Nov  5 17:16:04 2005
Subject: [stringtemplate-interest] action syntax proposal for v3
Message-ID: <FA75639E-5CB9-4A17-BAD1-4E4CF75C81C1@cs.usfca.edu>

Howdy.

While Ric Klaren was here, he and I decided a change in syntax would  
be useful for actions so that you can set code into more places in  
the output.  In fact, we'll be going further.  I think John Mitchell  
suggested that we expose the code gen templates to the user so they  
can alter things as they want without overrides and w/o creating a  
new output template file for ANTLR.  For example, if you want to  
change how ANTLR generates code for exception handling in rules, you  
might want to change the template once rather than cut/paste it  
yourself manually with exception rule clauses.  Perhaps:

@rule.exception {
         reportError(re);
         recover(input,re);
}

where template rule has a region called exception; in  
StringTemplateGroup notation (new for 2.3) you would do something  
similar so syntax is consistent.  This may let us avoid an option  
that turns off exception handling...you can just make rule.exception  
an empty action. :)

This provides flexibility.  In v2 we have named headers for C++ so  
you can stick where you need it for C++.  I'm extending that to just  
be @name{...}.  Currently in v3 rule init actions are:

rulename
init {
  blort
}
	: 	...
	;

We'd change this syntax also so @ implies action:

rulename
@init {
  blort
}
	:	...
	;

I hate to use a valuable symbol like @ for this but it's consistent  
with StringTemplateGroup's syntax, a good thing.

A grammar file might look like this:

grammar t;

@parser.header {
package org.antlr.foo;
}

@lexer.header {
package org.antlr.foo;
}

@parser.members {
int i; // parser needs this
}

@lexer.members {
int j; // lexer needs this, dude
}

a : ID {i++;} ;

ID : 'a'..'z'+ {j++;} ;

It's very explicit but a bit more typing.  What do you think?  I like  
it.  Tweaks?  Counter proposals?

Ter
From wirecracker at gmail.com  Mon Nov  7 18:39:27 2005
From: wirecracker at gmail.com (eric nelson)
Date: Mon Nov  7 18:39:31 2005
Subject: [stringtemplate-interest] Java In / Java Out: Going once ...
Message-ID: <ca5eeb330511071839k7ea095eama0c9f76f741f4768@mail.gmail.com>

Sorry, but I still feel like someone must know how to arrange the java.g and
Java.stg code so that we can parse Java source input and produce Java source
output without Java Beans, etc. (although thanks for that suggestion :)
Mabye everyone has been too busy to take a look at this, but really it
should be simple for someone who understands ANTLR and StringTemplate
(unlike me ;) Sorry if I'm being too pushy about this question, but I think
its a good one. If I'm thinking about this totally wrong, at least just tell
me I'm crazy or something k? ;) ... original Q:
 I'm trying to modify the java.g grammar file so that I can use
StringTemplate for outputting the file. The input is a Java file. I would
like the output to be Java also. So, yes, basically no change in content ...
mabye some spacing will differ here or there. I am still learning to use
ANTLR and StringTemplate and I've written a Java.stg file based on what I
think I know so far. Exerpts from java.g and Java.stg appear below. One of
the questions I have is how to handle the "|" (or) symbol (i.e.
classDefinition | interfaceDefinition). The way I have it right now there
would be a list of "modifiers", a list of "classDefinitions", and a list of
interfaceDefinitions (then naturally I would have a question about the " |
s:SEMI!" ... but one question at a time ;) So, the problem in Java.stg is
how to match up the correct "modifiers" with the corresponding
"interfaceDefinition" or "classDefinition". Or what if there is a
classDefinition with no modifier, etc. I am quite convinced that my
Java.stgtemplate (typeDefinition in particular) and/or my
java.g code has erred somewhere. Any thoughts? This is HUGE since this will
help me understand how to approach the "field" rule in java.g .... if anyone
has some hints on a "field" template that would also be great!
 Thanks :) - e
 p.s. In case the above paragraph was too cryptic, what I want to do is
modify the java.g file and Java.stg files to process parsed Java input to
formatted Java output.
  java.g exerpt (java 1.3 grammar)

//////////////////////////////////////////////////////////////////////////////////////////////////
// A type definition in a file is either a class or interface definition.
typeDefinition returns [StringTemplate code=template("typeDefinition")]
options {defaultErrorHandler = true;}
{StringTemplate mod=null, cd=null, id=null, semi=null;}
: mod=m:modifiers! {code.setAttribute("modifiers", mod);}
( cd=classDefinition[#m] { code.setAttribute("classDefinitions", cd);}
| id=interfaceDefinition[#m] {code.setAttribute("interfaceDefinitions",
id);}
)
| s:SEMI! {semi=template("lexer_semi");semi.setAttribute("semi",
s.getText());code.setAttribute("semi",
semi);}
;

//////////////////////////////////////////////////////////////////////////////////////////////////
  Java.stg exerpt

//////////////////////////////////////////////////////////////////////////////////////////////////
typeDefinition(modifiers,classDefinitions,interfaceDefinitions,semi) ::= <<
<modifiers><classDefinitions><interfaceDefinitions><semi>
>>

modifiers(modifiers) ::= "<modifiers>"

modifier(modifier) ::= "<modifier>"

classDefinition(ident,superClassClause,implementsClause,classBlock) ::= <<
class <ident> <superClassClause> <implementsClause>
<classBlock>
>>

interfaceDefinition() ::= <<
not yet completed
>>

//////////////////////////////////////////////////////////////////////////////////////////////////
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org:8080/pipermail/stringtemplate-interest/attachments/20051107/09600b56/attachment.html
From polina_o at hotmail.com  Mon Nov  7 21:28:02 2005
From: polina_o at hotmail.com (polina orechko)
Date: Mon Nov  7 21:28:07 2005
Subject: [stringtemplate-interest] Re: ST & I18N
Message-ID: <BAY20-F2397B89291795B851DB11DEA640@phx.gbl>

Sorry, I did not enable mail delivery, so my response probably won't show up 
in the right thread.

I would like to add my 0.02c to this topic since I was about to ask 
questions similar to Frank's ones.

I was thinking about suggesting
1) adding a special option/flag to StringTemplate (or a special attribute) - 
Locale, which would make ST do some i18n-aware things, more specifically
2) use the standard Java approach for loading locale-specific resources (in 
our case templates) - try first the most specific localized template (again, 
several options are possible, one of them would be to use a naming 
convention, such as myTemplate_en_US.st and the naming convention would be 
activated only by presence of Locale), if not found, try to load 
myTemplate_en.st, and if not found, then use myTemplate.st.

The reasons for this suggestion as opposed to using locale-specific groups 
with messages as Ter has suggested are:
1) in a web app we sometimes would want to localize entire templates, not 
just messages (sometimes we may need layout changes, etc. and it would be 
simpler to do that on "template" level, as opposed to factoring out all 
messages and other locale-dependent things into another level of templates 
and setting a "locale" attribute to switch on it)
2) sometimes we would want to translate only some templates, and some 
templates would be locale independent (such as "a" tag generation)

As far as I understand, this approach would impact only template resolution 
(i.e loading) mechanism.

Just an idea, do you think something along this lines would make sense?

Thanks,
Polina


------------------------------------------------------------------------

On Nov 1, 2005, at 11:30 AM, FrankHarper.10118606 at bloglines.com wrote:

>Hi STers,
>
>I haven't been able to find support in ST for I18N.

Do you mean that the templates cannot contain unicode or that the
error messages from the tool are english only and hardcoded?

>My web app generates URLs on the fly based on user
>input, which can contain non ascii characters. Sometimes I display  the 
>user
>input in a page, and sometimes the same information is used to  create 
>links.
>In this case the the user input has to be url encoded.
>
>The only solution
>I've come up with so far is to create two ST attributes with the  same 
>information,
>one url encoded and one not.

Can you add a renderer mapping from a special URL object so that any
object that is plain string just displays and then any URL gets encoded?

>Then of course there's another whole can of
>worms that will appear when I actually want to translate the web  page 
>contents.
>I guess this will require creating an attribute for each string  that needs
>I18Ning.

I use a StringTemplateGroup to good effect for this.  All error
messages in new ANTLR v3 are in a group for english, one for french,
etc...  I have a switch based upon the locale that loads the
appropriate group and then I use a key like GRAMMAR_NONDETERMINISM
which is or could be mapped to the template name to load.  The tool
knows nothing of the contents...can be unicode or whatever.

>I would like to hear from anyone who has ideas or experience on
>using ST in an I18Ned app, especially if you've come up with more  elegant
>solutions than the ones I've mentioned.

We should come up with a standard recommendation for this...I can add
stuff to the tool to make it work better if need be.

Ter

_________________________________________________________________
Express yourself instantly with MSN Messenger! Download today it's FREE! 
http://messenger.msn.click-url.com/go/onm00200471ave/direct/01/

From ray at soartech.com  Tue Nov  8 09:04:29 2005
From: ray at soartech.com (David Ray)
Date: Tue Nov  8 09:04:25 2005
Subject: [stringtemplate-interest] suppressing newlines and empty strings
In-Reply-To: <BAY20-F2397B89291795B851DB11DEA640@phx.gbl>
References: <BAY20-F2397B89291795B851DB11DEA640@phx.gbl>
Message-ID: <4370DA9D.5080405@soartech.com>

Hello,

I have a couple StringTemplate questions:

1) Is there any way to do a line continuation (like \ in C) in a 
template? I've got a template whose output I'd like to have on a single 
line, but I'd like to break it up a bit to make the template code more 
readable.

2) I get an error when I try to pass an empty string literal to a 
template parameter:

    $foo(bar="")$

Is there a way to do this or am I missing something?

Thanks,
Dave

From parrt at cs.usfca.edu  Tue Nov  8 10:04:52 2005
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue Nov  8 10:05:54 2005
Subject: [stringtemplate-interest] Re: [antlr-interest] StringTemplate +
	preserving comments
In-Reply-To: <46205.127.0.0.1.1131472821.squirrel@taggedtype.net>
References: <1131425947.8193.1.camel@localhost.localdomain>
	<4370889A.5010803@student.cs.ucc.ie>
	<46205.127.0.0.1.1131472821.squirrel@taggedtype.net>
Message-ID: <76875D09-E9C9-4466-BE97-BD0F065B70C4@cs.usfca.edu>

On Nov 8, 2005, at 10:00 AM, sohail@taggedtype.net wrote:
>> Sohail Somani wrote:
>>
>>> I think the subject line is basically impossible with antlr
>>> +stringtemplate, BUT in the off-chance someone has any ideas to  
>>> do this,
>>> I would appreciate some pointers.
>>>
>>> It would be really nice if one could do it without a TreeParser :)
>>>
>> Hi
>> I don't know much about Stringtemplate, but if you want to preserve
>> comments,
>> you could use a tokenstreamhiddentoken filter after pasrsing, see
>> http://www.antlr.org/doc/streams.html
>
> Hi Ed!
>
> I am aware of this technique. I would ideally like the separation that
> StringTemplate provides. This is a bit difficult because (I think) it
> would require me to insert <comment>'s between every tag in my  
> template. I
> should probably sign up for the stringtemplate ml now.

Howdy.  For tweaking or augmenting input, ANTLR +  
TokenStreamRewriteEngine is pretty damn hard to beat. :)  That said,  
I'm hoping to learn how to build a pretty printer in the new few  
months as a way to test new v3 functionality.  As you say, preserving  
the comments in this scenario is pretty tough.  I will have to think  
about how to solve that.  Naturally ANTLR has all the info, the  
problem may be simply to assume that any token you insert into the  
template also includes any hidden tokens before it.  Heh, that might  
work :)  In v2 or v3, I think you can just alter Token.toString() to  
print hidden stuff before the token as well.  easy :) Damn!  That  
might work!

Ter
From luisl at scarab.co.za  Tue Nov  8 11:26:31 2005
From: luisl at scarab.co.za (Luis Leal)
Date: Tue Nov  8 11:26:51 2005
Subject: [stringtemplate-interest] suppressing newlines and empty strings
In-Reply-To: <4370DA9D.5080405@soartech.com>
Message-ID: <MPEMLILMNEOKCPPBGEMKMELKCIAA.luisl@scarab.co.za>

Hi Dave,

1. I don't think it's possible
2. Which version of StringTemplate are you using? C# or Java? If it's C#,
please send a small sample to me and I'll see if I can track it down. :-)

Regards

Luis

-----Original Message-----
From: stringtemplate-interest-bounces@antlr.org
[mailto:stringtemplate-interest-bounces@antlr.org]On Behalf Of David Ray
Sent: 08 November 2005 07:04 PM
To: stringtemplate-interest@antlr.org
Subject: [stringtemplate-interest] suppressing newlines and empty
strings


Hello,

I have a couple StringTemplate questions:

1) Is there any way to do a line continuation (like \ in C) in a
template? I've got a template whose output I'd like to have on a single
line, but I'd like to break it up a bit to make the template code more
readable.

2) I get an error when I try to pass an empty string literal to a
template parameter:

    $foo(bar="")$

Is there a way to do this or am I missing something?

Thanks,
Dave

_______________________________________________
stringtemplate-interest mailing list
stringtemplate-interest@antlr.org
http://www.antlr.org:8080/mailman/listinfo/stringtemplate-interest


From blo.b at infonie.fr  Tue Nov  8 11:37:33 2005
From: blo.b at infonie.fr (Laurent Vaucher)
Date: Tue Nov  8 11:37:21 2005
Subject: [stringtemplate-interest] Re: [antlr-interest] StringTemplate +
	preserving comments
In-Reply-To: <76875D09-E9C9-4466-BE97-BD0F065B70C4@cs.usfca.edu>
References: <1131425947.8193.1.camel@localhost.localdomain>
	<4370889A.5010803@student.cs.ucc.ie>
	<46205.127.0.0.1.1131472821.squirrel@taggedtype.net>
	<76875D09-E9C9-4466-BE97-BD0F065B70C4@cs.usfca.edu>
Message-ID: <73A182F7-00E9-4F9C-96E5-55047D5F02B5@infonie.fr>

the problem may be simply to assume that any token you insert into  
the template also includes any hidden tokens before it.


   Isn't that something that JavaCC has supported from the start? ;o)  
But it is far less flexible than the generic TokenStream approach.  
And wait for the ANTLR3 Channels...


Laurent.

From ray at soartech.com  Tue Nov  8 13:16:13 2005
From: ray at soartech.com (David Ray)
Date: Tue Nov  8 13:16:09 2005
Subject: [stringtemplate-interest] suppressing newlines and empty strings
In-Reply-To: <MPEMLILMNEOKCPPBGEMKMELKCIAA.luisl@scarab.co.za>
References: <MPEMLILMNEOKCPPBGEMKMELKCIAA.luisl@scarab.co.za>
Message-ID: <4371159D.3010400@soartech.com>

Luis,

Thanks for your feedback.  I'm using the Java version (2.2). Here's an 
example:

foo(bar) ::=
<<
hello $bar$
 >>

yum() ::=
<<
$foo(bar="")$
 >>

With this, I get the following error:

    problem parsing template 'yum', line 1:11: unexpected char: '"'

If I replace bar="" with bar="x" or any other non-empty string, 
everything works.  This isn't a show-stopper bug, just kind of annoying :)

Dave

Luis Leal wrote:
> Hi Dave,
> 
> 1. I don't think it's possible
> 2. Which version of StringTemplate are you using? C# or Java? If it's C#,
> please send a small sample to me and I'll see if I can track it down. :-)
> 
> Regards
> 
> Luis
> 
> -----Original Message-----
> From: stringtemplate-interest-bounces@antlr.org
> [mailto:stringtemplate-interest-bounces@antlr.org]On Behalf Of David Ray
> Sent: 08 November 2005 07:04 PM
> To: stringtemplate-interest@antlr.org
> Subject: [stringtemplate-interest] suppressing newlines and empty
> strings
> 
> 
> Hello,
> 
> I have a couple StringTemplate questions:
> 
> 1) Is there any way to do a line continuation (like \ in C) in a
> template? I've got a template whose output I'd like to have on a single
> line, but I'd like to break it up a bit to make the template code more
> readable.
> 
> 2) I get an error when I try to pass an empty string literal to a
> template parameter:
> 
>     $foo(bar="")$
> 
> Is there a way to do this or am I missing something?
> 
> Thanks,
> Dave
> 
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest@antlr.org
> http://www.antlr.org:8080/mailman/listinfo/stringtemplate-interest
> 
> 
From parrt at cs.usfca.edu  Tue Nov  8 13:29:09 2005
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue Nov  8 13:30:08 2005
Subject: [stringtemplate-interest] suppressing newlines and empty strings
In-Reply-To: <4371159D.3010400@soartech.com>
References: <MPEMLILMNEOKCPPBGEMKMELKCIAA.luisl@scarab.co.za>
	<4371159D.3010400@soartech.com>
Message-ID: <F137D97B-FBBF-406A-BCE5-0E7ED0017E4C@cs.usfca.edu>


On Nov 8, 2005, at 1:16 PM, David Ray wrote:

> Luis,
>
> Thanks for your feedback.  I'm using the Java version (2.2). Here's  
> an example:
>
> foo(bar) ::=
> <<
> hello $bar$
> >>
>
> yum() ::=
> <<
> $foo(bar="")$
> >>
>
> With this, I get the following error:
>
>    problem parsing template 'yum', line 1:11: unexpected char: '"'
>
> If I replace bar="" with bar="x" or any other non-empty string,  
> everything works.  This isn't a show-stopper bug, just kind of  
> annoying :)

I think i fixed that in 2.3 beta...try {} instead of "".  Or, just  
don't set it.  Parameters that are not set yield empty values by  
default :)

Ter
From sohail at taggedtype.net  Tue Nov  8 21:35:51 2005
From: sohail at taggedtype.net (Sohail Somani)
Date: Tue Nov  8 21:36:45 2005
Subject: [stringtemplate-interest] Re: [antlr-interest] StringTemplate +
	preserving comments
In-Reply-To: <76875D09-E9C9-4466-BE97-BD0F065B70C4@cs.usfca.edu>
References: <1131425947.8193.1.camel@localhost.localdomain>
	<4370889A.5010803@student.cs.ucc.ie>
	<46205.127.0.0.1.1131472821.squirrel@taggedtype.net>
	<76875D09-E9C9-4466-BE97-BD0F065B70C4@cs.usfca.edu>
Message-ID: <1131514551.8269.1.camel@localhost.localdomain>

On Tue, 2005-08-11 at 10:04 -0800, Terence Parr wrote:
> On Nov 8, 2005, at 10:00 AM, sohail@taggedtype.net wrote:
> >> Sohail Somani wrote:
> >>
> >>> I think the subject line is basically impossible with antlr
> >>> +stringtemplate, BUT in the off-chance someone has any ideas to  
> >>> do this,
> >>> I would appreciate some pointers.
> >>>
> >>> It would be really nice if one could do it without a TreeParser :)
> >>>
> >> Hi
> >> I don't know much about Stringtemplate, but if you want to preserve
> >> comments,
> >> you could use a tokenstreamhiddentoken filter after pasrsing, see
> >> http://www.antlr.org/doc/streams.html
> >
> > Hi Ed!
> >
> > I am aware of this technique. I would ideally like the separation that
> > StringTemplate provides. This is a bit difficult because (I think) it
> > would require me to insert <comment>'s between every tag in my  
> > template. I
> > should probably sign up for the stringtemplate ml now.
> 
> Howdy.  For tweaking or augmenting input, ANTLR +  
> TokenStreamRewriteEngine is pretty damn hard to beat. :)  That said,  
> I'm hoping to learn how to build a pretty printer in the new few  
> months as a way to test new v3 functionality.  As you say, preserving  
> the comments in this scenario is pretty tough.  I will have to think  
> about how to solve that.  Naturally ANTLR has all the info, the  
> problem may be simply to assume that any token you insert into the  
> template also includes any hidden tokens before it.  Heh, that might  
> work :)  In v2 or v3, I think you can just alter Token.toString() to  
> print hidden stuff before the token as well.  easy :) Damn!  That  
> might work!

Are you suggesting I do something like:

import antlr.CommonHiddenStreamToken;

public class MyCommonHiddenStreamToken extends CommonHiddenStreamToken {

    public MyCommonHiddenStreamToken()
    {
        super();
    }

    public MyCommonHiddenStreamToken(int t, String txt) 
    {
        super(t, txt);
    }

    public MyCommonHiddenStreamToken(String s) {
        super(s);
    }    
            
    public String getText()
    {
        if(getHiddenBefore()!=null)
        {
            return getHiddenBefore().getText() + "\n" + super.getText();
        }
        else
        {
            return super.getText();        
        }
    }
    
    public String toString()
    {
        return getText();
    }
}

A problem I'm having is that getHiddenBefore() becomes null when its
time to print it out (getText()).

If I'm on the wrong track, please let me know :)

Thanks

Sohail

From parrt at cs.usfca.edu  Tue Nov  8 21:40:24 2005
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue Nov  8 21:40:28 2005
Subject: [stringtemplate-interest] Re: [antlr-interest] StringTemplate +
	preserving comments
In-Reply-To: <1131514551.8269.1.camel@localhost.localdomain>
References: <1131425947.8193.1.camel@localhost.localdomain>
	<4370889A.5010803@student.cs.ucc.ie>
	<46205.127.0.0.1.1131472821.squirrel@taggedtype.net>
	<76875D09-E9C9-4466-BE97-BD0F065B70C4@cs.usfca.edu>
	<1131514551.8269.1.camel@localhost.localdomain>
Message-ID: <E4B9B52D-6C14-4A77-A886-F1BC6D061DFD@cs.usfca.edu>


On Nov 8, 2005, at 9:35 PM, Sohail Somani wrote:
>> Howdy.  For tweaking or augmenting input, ANTLR +
>> TokenStreamRewriteEngine is pretty damn hard to beat. :)  That said,
>> I'm hoping to learn how to build a pretty printer in the new few
>> months as a way to test new v3 functionality.  As you say, preserving
>> the comments in this scenario is pretty tough.  I will have to think
>> about how to solve that.  Naturally ANTLR has all the info, the
>> problem may be simply to assume that any token you insert into the
>> template also includes any hidden tokens before it.  Heh, that might
>> work :)  In v2 or v3, I think you can just alter Token.toString() to
>> print hidden stuff before the token as well.  easy :) Damn!  That
>> might work!
>
> Are you suggesting I do something like:
>
> import antlr.CommonHiddenStreamToken;
>
> public class MyCommonHiddenStreamToken extends  
> CommonHiddenStreamToken {
>

[snip]

>     public String getText()
>     {
>         if(getHiddenBefore()!=null)
>         {
>             return getHiddenBefore().getText() + "\n" +  
> super.getText();
>         }
>         else
>         {
>             return super.getText();
>         }
>     }
>
>     public String toString()
>     {
>         return getText();
>     }
> }

Yes, that should work.

> A problem I'm having is that getHiddenBefore() becomes null when its
> time to print it out (getText()).

really?  Hmm...it should always point at the hidden stuff in front.   
Perhaps you are not setting the right token into the ST attribute.   
For example, if a comment is between a '{' and an ID, then the ID  
must go into the stringtemplate so that it can print itself out with  
the comment before.

> If I'm on the wrong track, please let me know :)

You are on the right track :)

Ter
From sohail at taggedtype.net  Tue Nov  8 21:51:24 2005
From: sohail at taggedtype.net (Sohail Somani)
Date: Tue Nov  8 21:51:29 2005
Subject: [stringtemplate-interest] Re: [antlr-interest] StringTemplate
	+ preserving comments
In-Reply-To: <E4B9B52D-6C14-4A77-A886-F1BC6D061DFD@cs.usfca.edu>
References: <1131425947.8193.1.camel@localhost.localdomain>
	<4370889A.5010803@student.cs.ucc.ie>
	<46205.127.0.0.1.1131472821.squirrel@taggedtype.net>
	<76875D09-E9C9-4466-BE97-BD0F065B70C4@cs.usfca.edu>
	<1131514551.8269.1.camel@localhost.localdomain>
	<E4B9B52D-6C14-4A77-A886-F1BC6D061DFD@cs.usfca.edu>
Message-ID: <1131515484.8269.8.camel@localhost.localdomain>

On Tue, 2005-08-11 at 21:40 -0800, Terence Parr wrote:
> On Nov 8, 2005, at 9:35 PM, Sohail Somani wrote:
> > A problem I'm having is that getHiddenBefore() becomes null when its
> > time to print it out (getText()).
> 
> really?  Hmm...it should always point at the hidden stuff in front.   
> Perhaps you are not setting the right token into the ST attribute.   
> For example, if a comment is between a '{' and an ID, then the ID  
> must go into the stringtemplate so that it can print itself out with  
> the comment before.

This is quite possible. The language I'm parsing is very whitespace
happy (sometimes!). No this was not fun to parse. So it could be that
the lexer passes:

COMMENT EOL SOME_THING

And of course when I try to print the text of SOME_THING, there is no
hidden before.

Any suggestions?

Perhaps using tokenrewriteengine would work because that would mean I
could keep track of the index of the last token printed and then print
all hidden things from there till now. But this doesn't sound too fun.

Sohail

From parrt at cs.usfca.edu  Tue Nov  8 21:54:21 2005
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue Nov  8 21:54:26 2005
Subject: [stringtemplate-interest] Re: [antlr-interest] StringTemplate +
	preserving comments
In-Reply-To: <1131515484.8269.8.camel@localhost.localdomain>
References: <1131425947.8193.1.camel@localhost.localdomain>
	<4370889A.5010803@student.cs.ucc.ie>
	<46205.127.0.0.1.1131472821.squirrel@taggedtype.net>
	<76875D09-E9C9-4466-BE97-BD0F065B70C4@cs.usfca.edu>
	<1131514551.8269.1.camel@localhost.localdomain>
	<E4B9B52D-6C14-4A77-A886-F1BC6D061DFD@cs.usfca.edu>
	<1131515484.8269.8.camel@localhost.localdomain>
Message-ID: <50F219D8-EC83-4AAC-9574-CFBE4E0789AE@cs.usfca.edu>


On Nov 8, 2005, at 9:51 PM, Sohail Somani wrote:

> On Tue, 2005-08-11 at 21:40 -0800, Terence Parr wrote:
>> On Nov 8, 2005, at 9:35 PM, Sohail Somani wrote:
>>> A problem I'm having is that getHiddenBefore() becomes null when its
>>> time to print it out (getText()).
>>
>> really?  Hmm...it should always point at the hidden stuff in front.
>> Perhaps you are not setting the right token into the ST attribute.
>> For example, if a comment is between a '{' and an ID, then the ID
>> must go into the stringtemplate so that it can print itself out with
>> the comment before.
>
> This is quite possible. The language I'm parsing is very whitespace
> happy (sometimes!). No this was not fun to parse. So it could be that
> the lexer passes:
>
> COMMENT EOL SOME_THING
>
> And of course when I try to print the text of SOME_THING, there is no
> hidden before.
>
> Any suggestions?

Yes.  Make that IF a WHILE loop to print ALL hidden tokens between  
your token and the previous :)  It chains them all together :)

> Perhaps using tokenrewriteengine would work because that would mean I
> could keep track of the index of the last token printed and then print
> all hidden things from there till now. But this doesn't sound too fun.

Either way you need a loop to walk back and print the hidden stuff :)

Ter
From sohail at taggedtype.net  Tue Nov  8 22:10:24 2005
From: sohail at taggedtype.net (Sohail Somani)
Date: Tue Nov  8 22:10:30 2005
Subject: [stringtemplate-interest] Re: [antlr-interest] StringTemplate
	+ preserving comments
In-Reply-To: <50F219D8-EC83-4AAC-9574-CFBE4E0789AE@cs.usfca.edu>
References: <1131425947.8193.1.camel@localhost.localdomain>
	<4370889A.5010803@student.cs.ucc.ie>
	<46205.127.0.0.1.1131472821.squirrel@taggedtype.net>
	<76875D09-E9C9-4466-BE97-BD0F065B70C4@cs.usfca.edu>
	<1131514551.8269.1.camel@localhost.localdomain>
	<E4B9B52D-6C14-4A77-A886-F1BC6D061DFD@cs.usfca.edu>
	<1131515484.8269.8.camel@localhost.localdomain>
	<50F219D8-EC83-4AAC-9574-CFBE4E0789AE@cs.usfca.edu>
Message-ID: <1131516624.8269.13.camel@localhost.localdomain>

On Tue, 2005-08-11 at 21:54 -0800, Terence Parr wrote:
> On Nov 8, 2005, at 9:51 PM, Sohail Somani wrote:
> >
> > This is quite possible. The language I'm parsing is very whitespace
> > happy (sometimes!). No this was not fun to parse. So it could be that
> > the lexer passes:
> >
> > COMMENT EOL SOME_THING
> >
> > And of course when I try to print the text of SOME_THING, there is no
> > hidden before.
> >
> > Any suggestions?
> 
> Yes.  Make that IF a WHILE loop to print ALL hidden tokens between  
> your token and the previous :)  It chains them all together :)

Ah, but isn't this information available only in the tokenstream and not
the token? Or am I missing something...

If I try to do SOME_THING.getText(), getHiddenBefore() will be null
because there is no hidden token before (as it is EOL)... So I don't
know where to get this chain from.

Sohail

From parrt at cs.usfca.edu  Tue Nov  8 22:19:26 2005
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue Nov  8 22:19:32 2005
Subject: [stringtemplate-interest] Re: [antlr-interest] StringTemplate +
	preserving comments
In-Reply-To: <1131516624.8269.13.camel@localhost.localdomain>
References: <1131425947.8193.1.camel@localhost.localdomain>
	<4370889A.5010803@student.cs.ucc.ie>
	<46205.127.0.0.1.1131472821.squirrel@taggedtype.net>
	<76875D09-E9C9-4466-BE97-BD0F065B70C4@cs.usfca.edu>
	<1131514551.8269.1.camel@localhost.localdomain>
	<E4B9B52D-6C14-4A77-A886-F1BC6D061DFD@cs.usfca.edu>
	<1131515484.8269.8.camel@localhost.localdomain>
	<50F219D8-EC83-4AAC-9574-CFBE4E0789AE@cs.usfca.edu>
	<1131516624.8269.13.camel@localhost.localdomain>
Message-ID: <6CAF8B0A-46F3-466A-989A-2E3CB635C6C1@cs.usfca.edu>


On Nov 8, 2005, at 10:10 PM, Sohail Somani wrote:

> On Tue, 2005-08-11 at 21:54 -0800, Terence Parr wrote:
>> On Nov 8, 2005, at 9:51 PM, Sohail Somani wrote:
>>>
>>> This is quite possible. The language I'm parsing is very whitespace
>>> happy (sometimes!). No this was not fun to parse. So it could be  
>>> that
>>> the lexer passes:
>>>
>>> COMMENT EOL SOME_THING
>>>
>>> And of course when I try to print the text of SOME_THING, there  
>>> is no
>>> hidden before.
>>>
>>> Any suggestions?
>>
>> Yes.  Make that IF a WHILE loop to print ALL hidden tokens between
>> your token and the previous :)  It chains them all together :)
>
> Ah, but isn't this information available only in the tokenstream  
> and not
> the token? Or am I missing something...
>
> If I try to do SOME_THING.getText(), getHiddenBefore() will be null
> because there is no hidden token before (as it is EOL)... So I don't
> know where to get this chain from.

Each real token (in v2) will have a linked list between it and the  
previous real token with all hidden tokens.  If you send newlines and  
comments to the parser as hidden, there will be a linked list (right  
to left) from your token to the previous token.  Are you stripping  
out newlines perhaps?

Ter
From sohail at taggedtype.net  Tue Nov  8 22:24:49 2005
From: sohail at taggedtype.net (Sohail Somani)
Date: Tue Nov  8 22:24:55 2005
Subject: [stringtemplate-interest] Re: [antlr-interest] StringTemplate
	+ preserving comments
In-Reply-To: <6CAF8B0A-46F3-466A-989A-2E3CB635C6C1@cs.usfca.edu>
References: <1131425947.8193.1.camel@localhost.localdomain>
	<4370889A.5010803@student.cs.ucc.ie>
	<46205.127.0.0.1.1131472821.squirrel@taggedtype.net>
	<76875D09-E9C9-4466-BE97-BD0F065B70C4@cs.usfca.edu>
	<1131514551.8269.1.camel@localhost.localdomain>
	<E4B9B52D-6C14-4A77-A886-F1BC6D061DFD@cs.usfca.edu>
	<1131515484.8269.8.camel@localhost.localdomain>
	<50F219D8-EC83-4AAC-9574-CFBE4E0789AE@cs.usfca.edu>
	<1131516624.8269.13.camel@localhost.localdomain>
	<6CAF8B0A-46F3-466A-989A-2E3CB635C6C1@cs.usfca.edu>
Message-ID: <1131517489.8269.18.camel@localhost.localdomain>

On Tue, 2005-08-11 at 22:19 -0800, Terence Parr wrote:
> On Nov 8, 2005, at 10:10 PM, Sohail Somani wrote:
> 
> > On Tue, 2005-08-11 at 21:54 -0800, Terence Parr wrote:
> >> On Nov 8, 2005, at 9:51 PM, Sohail Somani wrote:
> >>>
> >>> This is quite possible. The language I'm parsing is very whitespace
> >>> happy (sometimes!). No this was not fun to parse. So it could be  
> >>> that
> >>> the lexer passes:
> >>>
> >>> COMMENT EOL SOME_THING
> >>>
> >>> And of course when I try to print the text of SOME_THING, there  
> >>> is no
> >>> hidden before.
> >>>
> >>> Any suggestions?
> >>
> >> Yes.  Make that IF a WHILE loop to print ALL hidden tokens between
> >> your token and the previous :)  It chains them all together :)
> >
> > Ah, but isn't this information available only in the tokenstream  
> > and not
> > the token? Or am I missing something...
> >
> > If I try to do SOME_THING.getText(), getHiddenBefore() will be null
> > because there is no hidden token before (as it is EOL)... So I don't
> > know where to get this chain from.
> 
> Each real token (in v2) will have a linked list between it and the  
> previous real token with all hidden tokens.  If you send newlines and  
> comments to the parser as hidden, there will be a linked list (right  
> to left) from your token to the previous token.  Are you stripping  
> out newlines perhaps?

Nope, newlines are being sent to the parser as well (although EOL+
becomes EOL). Where are the fields for this linked list in the Token? I
can't see it in the code API on the web nor in the source (*Token.java).

PS: Thanks for your help!

From sohail at taggedtype.net  Tue Nov  8 22:38:49 2005
From: sohail at taggedtype.net (Sohail Somani)
Date: Tue Nov  8 22:38:56 2005
Subject: [stringtemplate-interest] Re: [antlr-interest] StringTemplate
	+ preserving comments
In-Reply-To: <1131517489.8269.18.camel@localhost.localdomain>
References: <1131425947.8193.1.camel@localhost.localdomain>
	<4370889A.5010803@student.cs.ucc.ie>
	<46205.127.0.0.1.1131472821.squirrel@taggedtype.net>
	<76875D09-E9C9-4466-BE97-BD0F065B70C4@cs.usfca.edu>
	<1131514551.8269.1.camel@localhost.localdomain>
	<E4B9B52D-6C14-4A77-A886-F1BC6D061DFD@cs.usfca.edu>
	<1131515484.8269.8.camel@localhost.localdomain>
	<50F219D8-EC83-4AAC-9574-CFBE4E0789AE@cs.usfca.edu>
	<1131516624.8269.13.camel@localhost.localdomain>
	<6CAF8B0A-46F3-466A-989A-2E3CB635C6C1@cs.usfca.edu>
	<1131517489.8269.18.camel@localhost.localdomain>
Message-ID: <1131518330.8269.20.camel@localhost.localdomain>

On Tue, 2005-08-11 at 22:24 -0800, Sohail Somani wrote:
> Nope, newlines are being sent to the parser as well (although EOL+
> becomes EOL). Where are the fields for this linked list in the Token? I
> can't see it in the code API on the web nor in the source (*Token.java).

Nevermind, I think I got it... That looping stuff. I was discarding WS
instead of hiding it but EOLS weren't in WS... Heh.

\o/

From parrt at cs.usfca.edu  Tue Nov  8 22:40:08 2005
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue Nov  8 22:40:17 2005
Subject: [stringtemplate-interest] Re: [antlr-interest] StringTemplate +
	preserving comments
In-Reply-To: <1131517489.8269.18.camel@localhost.localdomain>
References: <1131425947.8193.1.camel@localhost.localdomain>
	<4370889A.5010803@student.cs.ucc.ie>
	<46205.127.0.0.1.1131472821.squirrel@taggedtype.net>
	<76875D09-E9C9-4466-BE97-BD0F065B70C4@cs.usfca.edu>
	<1131514551.8269.1.camel@localhost.localdomain>
	<E4B9B52D-6C14-4A77-A886-F1BC6D061DFD@cs.usfca.edu>
	<1131515484.8269.8.camel@localhost.localdomain>
	<50F219D8-EC83-4AAC-9574-CFBE4E0789AE@cs.usfca.edu>
	<1131516624.8269.13.camel@localhost.localdomain>
	<6CAF8B0A-46F3-466A-989A-2E3CB635C6C1@cs.usfca.edu>
	<1131517489.8269.18.camel@localhost.localdomain>
Message-ID: <AFE6DF3C-4833-4825-AE19-DD35E5F7257E@cs.usfca.edu>

> Nope, newlines are being sent to the parser as well (although EOL+
> becomes EOL). Where are the fields for this linked list in the  
> Token? I
> can't see it in the code API on the web nor in the source  
> (*Token.java).

Must be hanging out in the CommonHiddenStreamToken object.  Yep,

public class CommonHiddenStreamToken extends CommonToken {
     protected CommonHiddenStreamToken hiddenBefore;
     protected CommonHiddenStreamToken hiddenAfter;
...
}

manual linked list. ;)

> PS: Thanks for your help!

At your service :)

Ter

From sohail at taggedtype.net  Tue Nov  8 22:52:27 2005
From: sohail at taggedtype.net (Sohail Somani)
Date: Tue Nov  8 22:52:34 2005
Subject: [stringtemplate-interest] Re: [antlr-interest] StringTemplate
	+ preserving comments
In-Reply-To: <AFE6DF3C-4833-4825-AE19-DD35E5F7257E@cs.usfca.edu>
References: <1131425947.8193.1.camel@localhost.localdomain>
	<4370889A.5010803@student.cs.ucc.ie>
	<46205.127.0.0.1.1131472821.squirrel@taggedtype.net>
	<76875D09-E9C9-4466-BE97-BD0F065B70C4@cs.usfca.edu>
	<1131514551.8269.1.camel@localhost.localdomain>
	<E4B9B52D-6C14-4A77-A886-F1BC6D061DFD@cs.usfca.edu>
	<1131515484.8269.8.camel@localhost.localdomain>
	<50F219D8-EC83-4AAC-9574-CFBE4E0789AE@cs.usfca.edu>
	<1131516624.8269.13.camel@localhost.localdomain>
	<6CAF8B0A-46F3-466A-989A-2E3CB635C6C1@cs.usfca.edu>
	<1131517489.8269.18.camel@localhost.localdomain>
	<AFE6DF3C-4833-4825-AE19-DD35E5F7257E@cs.usfca.edu>
Message-ID: <1131519147.8269.24.camel@localhost.localdomain>

On Tue, 2005-08-11 at 22:40 -0800, Terence Parr wrote:
> > Nope, newlines are being sent to the parser as well (although EOL+
> > becomes EOL). Where are the fields for this linked list in the  
> > Token? I
> > can't see it in the code API on the web nor in the source  
> > (*Token.java).
> 
> Must be hanging out in the CommonHiddenStreamToken object.  Yep,
> 
> public class CommonHiddenStreamToken extends CommonToken {
>      protected CommonHiddenStreamToken hiddenBefore;
>      protected CommonHiddenStreamToken hiddenAfter;
> ...
> }

But again, this is only hidden stuff right?

So a stream like:

HIDDEN_COMMENT EOL_FOR_PARSER SOME_THING

getText() 
{
	// When called for SOME_THING this is always null as EOL_FOR_PARSER is
not hidden...
	while((curr=getHiddenBefore())!=null)
	{
		ret = curr.getText() + ret; // i know i know, slow.
	}
}


From parrt at cs.usfca.edu  Fri Nov 11 10:27:02 2005
From: parrt at cs.usfca.edu (Terence Parr)
Date: Fri Nov 11 10:27:51 2005
Subject: [stringtemplate-interest] StringTemplate 2.3 regions and ANTLR v3
	code gen
Message-ID: <23FBC8C8-15B5-46FE-9362-2A43CC1099EA@cs.usfca.edu>

Ok, another just amazing ST moment.  Imagine the following template  
that was previously used to generate validation code for a predicate:

/** Every predicate is used as a validating predicate (even when it is
*  also hoisted into a prediction expression).
*/
validateSemanticPredicate(pred) ::= <<
if ( !(<if(debug)>evalPredicate(<pred>,"<pred>")<else><pred><endif>) ) {
     throw new FailedPredicateException(input, "<ruleName>", "<pred>");
}
 >>

So when I see

a : {p}? A ;

I want to generate

if ( !(p) ) {
   throw new ...
}

and

if ( !(evalPredicate(p,"p")) ) {
   throw new ...
}

when debugging.

The template is not only hard to read, but you have the debug stuff  
mingled with regular code; bad separation of concerns.  What you  
really want is the normal template to have code that might need  
replacing marked as a region via <@eval>...<@end>:

group Java;
...
/** Every predicate is used as a validating predicate (even when it is
*  also hoisted into a prediction expression).
*/
validateSemanticPredicate(pred) ::= <<
if ( !(<@eval><pred><@end>) ) {
     throw new FailedPredicateException(input, "<ruleName>", "<pred>");
}
 >>

Then, in a subgroup, you can override/specify the code needed to do  
the actual eval:

group Dbg;
...
/** Force predicate validation to trigger an event */
@validateSemanticPredicate.eval() ::= <<evalPredicate(<pred>,"<pred>")>>

This avoids the need to override the *entire*  
validateSemanticPredicate template, thus, duplicating the generation  
code (introducing the usual maintenance nightmare).  You override a  
"snippet" or _region_. :)

Hooray!

Coming soon to a theatre near you. :)

Ter
PS	Thanks again to Ric Klaren for helping invent this!
From sohail at taggedtype.net  Mon Nov 14 19:24:10 2005
From: sohail at taggedtype.net (Sohail Somani)
Date: Mon Nov 14 19:24:17 2005
Subject: [stringtemplate-interest] Limited control flow with stringtemplate
	- by design?
Message-ID: <1132025050.8385.4.camel@localhost.localdomain>

Hi,

Consider the context of language translation. I have a need to do
something like this:

<if(number==SOMETHING)>blah<else>etc<endif>

Is this possible? I'd rather use integral constants/enumerations rather
than booleans...

Thanks

Sohail

From parrt at cs.usfca.edu  Mon Nov 14 20:31:50 2005
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon Nov 14 20:32:23 2005
Subject: [stringtemplate-interest] added template rewrite stuff to blog
Message-ID: <0E0160E2-21F1-4550-B65D-0FB8E0CBAEF7@cs.usfca.edu>

Howdy,

Added my plans for implementing template rewrites to v3:

http://www.antlr.org/blog/antlr3/rewrite.tml

Ter
From sohail at taggedtype.net  Mon Nov 14 21:52:12 2005
From: sohail at taggedtype.net (Sohail Somani)
Date: Mon Nov 14 21:52:18 2005
Subject: [stringtemplate-interest] : in output
Message-ID: <1132033932.10766.1.camel@localhost.localdomain>

Hey,

I have a template:

something(expr) ::=<<
<expr>:
>>

But the ":" does not show up in the output. Is this a special character?

Thanks

Sohail

From sohail at taggedtype.net  Mon Nov 14 21:57:04 2005
From: sohail at taggedtype.net (Sohail Somani)
Date: Mon Nov 14 21:57:09 2005
Subject: [stringtemplate-interest] : in output
In-Reply-To: <1132033932.10766.1.camel@localhost.localdomain>
References: <1132033932.10766.1.camel@localhost.localdomain>
Message-ID: <1132034225.10876.0.camel@localhost.localdomain>

On Mon, 2005-14-11 at 21:52 -0800, Sohail Somani wrote:
> Hey,
> 
> I have a template:
> 
> something(expr) ::=<<
> <expr>:
> >>
> 
> But the ":" does not show up in the output. Is this a special character?

Actually anything after <expr> doesn't show up... Any ideas?

From blo.b at infonie.fr  Mon Nov 14 22:17:14 2005
From: blo.b at infonie.fr (Laurent Vaucher)
Date: Mon Nov 14 22:17:00 2005
Subject: [stringtemplate-interest] Limited control flow with
	stringtemplate - by design?
In-Reply-To: <1132025050.8385.4.camel@localhost.localdomain>
References: <1132025050.8385.4.camel@localhost.localdomain>
Message-ID: <76CE2C1A-8F2A-466D-84C1-8A3EDD93A6B3@infonie.fr>

>
> <if(number==SOMETHING)>blah<else>etc<endif>
>
> Is this possible? I'd rather use integral constants/enumerations  
> rather
> than booleans...

   This is BAD!!! Oh, I'm not taking a religious or philosophical  
position, just repeating what I have read from the 'academic'   
article about StringTemplate (http://www.cs.usfca.edu/~parrt/papers/ 
mvc.templates.pdf). One of the goals of the library is to enforce  
strict model-view separation by voluntarily making the template  
language non-Turing-complete. You're not supposed to compute things  
that the model part did not make explicitly available to the view  
part. You might like it or not, but that's the way of StringTemplate.

   Being a (not yet completely desintoxicated) JSP addict and using a  
lot of Java inside pages, I can understand the initial frustration.


Laurent.



From sohail at taggedtype.net  Mon Nov 14 22:22:22 2005
From: sohail at taggedtype.net (Sohail Somani)
Date: Mon Nov 14 22:22:30 2005
Subject: [stringtemplate-interest] Limited control flow with
	stringtemplate - by design?
In-Reply-To: <76CE2C1A-8F2A-466D-84C1-8A3EDD93A6B3@infonie.fr>
References: <1132025050.8385.4.camel@localhost.localdomain>
	<76CE2C1A-8F2A-466D-84C1-8A3EDD93A6B3@infonie.fr>
Message-ID: <1132035743.8085.1.camel@localhost.localdomain>

On Tue, 2005-15-11 at 07:17 +0100, Laurent Vaucher wrote:
> >
> > <if(number==SOMETHING)>blah<else>etc<endif>
> >
> > Is this possible? I'd rather use integral constants/enumerations  
> > rather
> > than booleans...
> 
>    This is BAD!!! Oh, I'm not taking a religious or philosophical  
> position, just repeating what I have read from the 'academic'   
> article about StringTemplate (http://www.cs.usfca.edu/~parrt/papers/ 
> mvc.templates.pdf). One of the goals of the library is to enforce  
> strict model-view separation by voluntarily making the template  
> language non-Turing-complete. You're not supposed to compute things  
> that the model part did not make explicitly available to the view  
> part. You might like it or not, but that's the way of StringTemplate.
> 
>    Being a (not yet completely desintoxicated) JSP addict and using a  
> lot of Java inside pages, I can understand the initial frustration.

Well that explains it. But I don't know if that makes things practical.
For example, you might have a template for type:

t = template("type");
t.setAttribute("name","double");

Now if you are translating into more than one language, where a double
can be Double, d0Ubl3 or double, it makes things very difficult.

Although I suppose this could be replaced by
t.setAttribute("name",template("double"));

:)

Sohail


From sohail at taggedtype.net  Mon Nov 14 22:56:19 2005
From: sohail at taggedtype.net (Sohail Somani)
Date: Mon Nov 14 22:56:25 2005
Subject: [stringtemplate-interest] : in output
In-Reply-To: <1132034225.10876.0.camel@localhost.localdomain>
References: <1132033932.10766.1.camel@localhost.localdomain>
	<1132034225.10876.0.camel@localhost.localdomain>
Message-ID: <1132037779.8724.0.camel@localhost.localdomain>

On Mon, 2005-14-11 at 21:57 -0800, Sohail Somani wrote:
> On Mon, 2005-14-11 at 21:52 -0800, Sohail Somani wrote:
> > Hey,
> > 
> > I have a template:
> > 
> > something(expr) ::=<<
> > <expr>:
> > >>
> > 
> > But the ":" does not show up in the output. Is this a special character?
> 
> Actually anything after <expr> doesn't show up... Any ideas?

Yeah...wrong template. Doh.

From open.zone at virgin.net  Tue Nov 15 00:37:42 2005
From: open.zone at virgin.net (Micheal J)
Date: Tue Nov 15 00:22:13 2005
Subject: [stringtemplate-interest] RE: [antlr-interest] added template
	rewrite stuff to blog
In-Reply-To: <0E0160E2-21F1-4550-B65D-0FB8E0CBAEF7@cs.usfca.edu>
Message-ID: <006c01c5e9bf$d968da40$6802a8c0@hercules>

> Howdy,
> 
> Added my plans for implementing template rewrites to v3:
> 
> http://www.antlr.org/blog/antlr3/rewrite.tml

It about time you get an RSS/ATOM-enabled blog. Just pick one of the many OS
blogging packages.

Micheal

From Andrew.Goodnough at wicourts.gov  Tue Nov 15 05:39:15 2005
From: Andrew.Goodnough at wicourts.gov (Andrew Goodnough)
Date: Tue Nov 15 05:39:26 2005
Subject: [stringtemplate-interest] Limited control flow with
	stringtemplate - by design?
In-Reply-To: <1132035743.8085.1.camel@localhost.localdomain>
References: <1132025050.8385.4.camel@localhost.localdomain>
	<76CE2C1A-8F2A-466D-84C1-8A3EDD93A6B3@infonie.fr>
	<1132035743.8085.1.camel@localhost.localdomain>
Message-ID: <437990A1.954F.0081.0@wicourts.gov>

I was initially frustrated by this as well but have come to discover
that most times a boolean method makes sense.  Ask yourself what
business problem you're trying to solve and name the method with that in
mind.  So, while you could do this:
 
isDouble()
isd0Ubl3()
isdouble()
 
you might find this is what you're really asking:
 
isRegular()
isLeetSpeak()
isPrimitive()
 
Obviously, my knowledge of your business domain is totally made up
above, but hopefully it makes sense.  As it turns out this is more clear
for everyone who is reading the code because you're embedding more of
your knowledge of your business domain into the code.  (read: less
comments necessary, whohoo!).
 
Andy

>>> Sohail Somani sohail@taggedtype.net> 11/15/2005 12:22 am >>
...

Now if you are translating into more than one language, where a double
can be Double, d0Ubl3 or double, it makes things very difficult.

Although I suppose this could be replaced by
t.setAttribute("name",template("double"));

:)

Sohail


_______________________________________________
stringtemplate-interest mailing list
stringtemplate-interest@antlr.org
http://www.antlr.org:8080/mailman/listinfo/stringtemplate-interest
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org:8080/pipermail/stringtemplate-interest/attachments/20051115/e94f21a8/attachment.html
From parrt at cs.usfca.edu  Tue Nov 15 11:35:14 2005
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue Nov 15 11:35:43 2005
Subject: [stringtemplate-interest] Limited control flow with
	stringtemplate - by design?
In-Reply-To: <437990A1.954F.0081.0@wicourts.gov>
References: <1132025050.8385.4.camel@localhost.localdomain>
	<76CE2C1A-8F2A-466D-84C1-8A3EDD93A6B3@infonie.fr>
	<1132035743.8085.1.camel@localhost.localdomain>
	<437990A1.954F.0081.0@wicourts.gov>
Message-ID: <48D7E6FA-54CB-4585-B03B-2B36550E878E@cs.usfca.edu>

Howdy. :)  Yep, you cannot test the value of an attribute and not  
include logic in your template.

To handle different templates per type, you can send in a template  
name as an attribute and then do this:

$data:(templateName)()$

to invoke it like an indirect function call.  It applies the named  
template to the data element.

Also, if you want to change how doubles are displayed depending on  
the locale of the incoming web request, then it's the controller's  
job not the template to decide the format *name*.  It can pass that  
name to the page template.  Or, it can wrap objects in something  
whose toString() knows how to alter the format depending on locale.   
Or, register a renderer that knows how to display Double objects  
depending on locale :)

Does this help?

Ter
From parrt at cs.usfca.edu  Tue Nov 15 11:40:21 2005
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue Nov 15 11:40:51 2005
Subject: [stringtemplate-interest] Re: ST & I18N
In-Reply-To: <BAY20-F2397B89291795B851DB11DEA640@phx.gbl>
References: <BAY20-F2397B89291795B851DB11DEA640@phx.gbl>
Message-ID: <3B08674D-A33E-40F9-868E-551F23071974@cs.usfca.edu>


On Nov 7, 2005, at 9:28 PM, polina orechko wrote:
> I would like to add my 0.02c to this topic since I was about to ask  
> questions similar to Frank's ones.
>
> I was thinking about suggesting
> 1) adding a special option/flag to StringTemplate (or a special  
> attribute) - Locale, which would make ST do some i18n-aware things,  
> more specifically

Hi.  It's possible, but remember that usually the controller should  
be sensitive to locale and either push in different data or  
specifically tell ST to render things with a new renderer object.

> 2) use the standard Java approach for loading locale-specific  
> resources (in our case templates) - try first the most specific  
> localized template (again, several options are possible, one of  
> them would be to use a naming convention, such as  
> myTemplate_en_US.st and the naming convention would be activated  
> only by presence of Locale), if not found, try to load  
> myTemplate_en.st, and if not found, then use myTemplate.st.

This could work, but isn't it easier to just have a different  
StringTemplateGroup directory for each locale and then the controller  
(the web server) can simply set the pointer to the appropriate group  
depending on locale.  ST should not even know that something has  
changed. :)

> The reasons for this suggestion as opposed to using locale-specific  
> groups with messages as Ter has suggested are:
> 1) in a web app we sometimes would want to localize entire  
> templates, not just messages (sometimes we may need layout changes,  
> etc. and it would be simpler to do that on "template" level, as  
> opposed to factoring out all messages and other locale-dependent  
> things into another level of templates and setting a "locale"  
> attribute to switch on it)

Yep, with the group you can have ALL templates associated with a site  
translated.  You don't have to factor out the stuff that can change. :)

> 2) sometimes we would want to translate only some templates, and  
> some templates would be locale independent (such as "a" tag  
> generation)

You can use template group inheritance to make this work.  Just  
define a new group as it differs from the supergroup :)

> As far as I understand, this approach would impact only template  
> resolution (i.e loading) mechanism.

Yep, but I have the group thing to handle all this for you.  Note  
that jGuru has radically different looks for premium members and  
guests; only the group pointer changes :)

> Just an idea, do you think something along this lines would make  
> sense?

Makes sense, but what do you think of my suggestion above?

Ter
From sohail at taggedtype.net  Tue Nov 15 20:20:33 2005
From: sohail at taggedtype.net (Sohail Somani)
Date: Tue Nov 15 20:20:50 2005
Subject: [stringtemplate-interest] Limited control flow with
	stringtemplate - by design?
In-Reply-To: <48D7E6FA-54CB-4585-B03B-2B36550E878E@cs.usfca.edu>
References: <1132025050.8385.4.camel@localhost.localdomain>
	<76CE2C1A-8F2A-466D-84C1-8A3EDD93A6B3@infonie.fr>
	<1132035743.8085.1.camel@localhost.localdomain>
	<437990A1.954F.0081.0@wicourts.gov>
	<48D7E6FA-54CB-4585-B03B-2B36550E878E@cs.usfca.edu>
Message-ID: <1132114833.8179.0.camel@localhost.localdomain>

On Tue, 2005-15-11 at 11:35 -0800, Terence Parr wrote:
> 
> 
> Does this help?

Actually my problem was really dumb easy... I really ended up putting
the logic into my parser instead of my template so thats great \o/

Thanks!

From parrt at cs.usfca.edu  Wed Nov 16 09:35:41 2005
From: parrt at cs.usfca.edu (Terence Parr)
Date: Wed Nov 16 09:36:06 2005
Subject: [stringtemplate-interest] Limited control flow with
	stringtemplate - by design?
In-Reply-To: <1132114833.8179.0.camel@localhost.localdomain>
References: <1132025050.8385.4.camel@localhost.localdomain>
	<76CE2C1A-8F2A-466D-84C1-8A3EDD93A6B3@infonie.fr>
	<1132035743.8085.1.camel@localhost.localdomain>
	<437990A1.954F.0081.0@wicourts.gov>
	<48D7E6FA-54CB-4585-B03B-2B36550E878E@cs.usfca.edu>
	<1132114833.8179.0.camel@localhost.localdomain>
Message-ID: <374A4D77-2E65-4F41-9D05-BC8F1B407DE3@cs.usfca.edu>


On Nov 15, 2005, at 8:20 PM, Sohail Somani wrote:

> On Tue, 2005-15-11 at 11:35 -0800, Terence Parr wrote:
>>
>>
>> Does this help?
>
> Actually my problem was really dumb easy... I really ended up putting
> the logic into my parser instead of my template so thats great \o/

Hi Sohail,

Isn't it amazing how forcing "the right" thing actually pays off even  
though it's a pain sometimes? :)  Hooray!  ST's key distinguishing  
feature is the strict enforcement :)

Ter
From sohail at taggedtype.net  Wed Nov 16 11:16:45 2005
From: sohail at taggedtype.net (Sohail Somani)
Date: Wed Nov 16 11:16:54 2005
Subject: [stringtemplate-interest] Limited control flow with
	stringtemplate - by design?
In-Reply-To: <374A4D77-2E65-4F41-9D05-BC8F1B407DE3@cs.usfca.edu>
References: <1132025050.8385.4.camel@localhost.localdomain>
	<76CE2C1A-8F2A-466D-84C1-8A3EDD93A6B3@infonie.fr>
	<1132035743.8085.1.camel@localhost.localdomain>
	<437990A1.954F.0081.0@wicourts.gov>
	<48D7E6FA-54CB-4585-B03B-2B36550E878E@cs.usfca.edu>
	<1132114833.8179.0.camel@localhost.localdomain>
	<374A4D77-2E65-4F41-9D05-BC8F1B407DE3@cs.usfca.edu>
Message-ID: <1132168606.11222.2.camel@localhost.localdomain>

On Wed, 2005-16-11 at 09:35 -0800, Terence Parr wrote:
> On Nov 15, 2005, at 8:20 PM, Sohail Somani wrote:
> 
> > On Tue, 2005-15-11 at 11:35 -0800, Terence Parr wrote:
> >>
> >>
> >> Does this help?
> >
> > Actually my problem was really dumb easy... I really ended up putting
> > the logic into my parser instead of my template so thats great \o/
> 
> Hi Sohail,
> 
> Isn't it amazing how forcing "the right" thing actually pays off even  
> though it's a pain sometimes? :)  Hooray!  ST's key distinguishing  
> feature is the strict enforcement :)

Yep. I rarely do the wrong thing on purpose. In this case, it was
because I'm a total ST n00bio and I'm not used to it. I actually came up
with the template("double") thing while I wrote that email and went with
that solution.

I just need to spend some time getting my darn comments translated as
well (I know how to do it) and then I'll be golden. I might even write
YAT (yet another tutorial) \o/

Sohail

From parrt at cs.usfca.edu  Wed Nov 16 12:46:38 2005
From: parrt at cs.usfca.edu (Terence Parr)
Date: Wed Nov 16 12:47:04 2005
Subject: [stringtemplate-interest] big update to rewriting with templates
	blog
Message-ID: <59325E0A-C6DA-431A-BB77-4173B8FECD44@cs.usfca.edu>

Looks like my blog thingie is working, but for those  
nonblogaggregators (like me), I thought I'd ping the list:

http://www.antlr.org/blog/antlr3/rewrite.tml

or

feed://www.antlr.org/blog/antlr3/rewrite.tml?RSS

Basically it's a side by side comparison of what v2 looked liked for  
an ANTLR+StringTemplate translation and what v3 should look like:

Ter
From christophe.paris at free.fr  Thu Nov 17 13:23:33 2005
From: christophe.paris at free.fr (Christophe PARIS)
Date: Thu Nov 17 13:23:41 2005
Subject: [stringtemplate-interest] Indirect template references
Message-ID: <437CF4D5.8020201@free.fr>

Hi,

I was wondering if it's possible to call a template which name is
composed of a prefix and a variable part ?

For example :

-----

group simple;

main(objects) ::= <<
$objects:print(); separator="\n"$
>>

print() ::= "$(print$it.type$)()$"

printObjectA() ::= "I'm A"

printObjectB() ::= "I'm B"

-----

Where "objects" is a collection of object having a geType() method
returning "ObjectA", "ObjectB" ...

The "print" template would "call" the printObjectA() printObjectB() template.


Regards,
Christophe
From parrt at cs.usfca.edu  Thu Nov 17 16:45:54 2005
From: parrt at cs.usfca.edu (Terence Parr)
Date: Thu Nov 17 16:46:14 2005
Subject: [stringtemplate-interest] Indirect template references
In-Reply-To: <437CF4D5.8020201@free.fr>
References: <437CF4D5.8020201@free.fr>
Message-ID: <2485ED59-D26D-4D60-BC79-40C68D05CF7E@cs.usfca.edu>


On Nov 17, 2005, at 1:23 PM, Christophe PARIS wrote:

> Hi,
>
> I was wondering if it's possible to call a template which name is
> composed of a prefix and a variable part ?
>
> For example :
>
> -----
>
> group simple;
>
> main(objects) ::= <<
> $objects:print(); separator="\n"$
>>>
>
print() ::= "$(print$it.type$)()$"

Hi.  Sure, the following should work:

print() ::= "$(print+it.type)()$"

Well, now that I think about it, I'm not sure the + will work in that  
case, but i know it works in args:

$foo(tname="print"+it.type)$

then call $(tname)()$

:)

Ter
From open.zone at virgin.net  Fri Nov 18 05:40:49 2005
From: open.zone at virgin.net (Micheal J)
Date: Fri Nov 18 05:25:17 2005
Subject: [stringtemplate-interest] Have you ever subclassed StringTemplate
	or StringTemplateGroup?
Message-ID: <006901c5ec45$b05cfdb0$6902a8c0@hercules>

Doesn't look like there is ever a need to do so. I can't think of a
compelling use case in fact. Anyone else?


Also, how would the AttributeRenderer abstraction handle the situation where
I need to display two date values in the same view (i.e. template) but with
different formats?.

Is this a good case for per-attribute AttributeRenderer registrations at the
StringTemplate level?

Cheers,

Micheal


---------------------------------------------------------
"Java isn't platform independent; it is a platform. 
 Like Windows, it is a proprietary commercial platform. "
                                      - Bjarne Stroustrup
 

From open.zone at virgin.net  Fri Nov 18 10:15:02 2005
From: open.zone at virgin.net (Micheal J)
Date: Fri Nov 18 09:59:31 2005
Subject: [stringtemplate-interest] Have you ever subclassed
	StringTemplateor StringTemplateGroup?
In-Reply-To: <006901c5ec45$b05cfdb0$6902a8c0@hercules>
Message-ID: <006c01c5ec6c$000ecc00$6902a8c0@hercules>

> Doesn't look like there is ever a need to do so. I can't 
> think of a compelling use case in fact. Anyone else?

Hmmm, found one. Out goes my "seal the class to make it [even] faster"
proposal.

http://www.forward.com.au/webstringtemplates/manual/javadocs/au/com/forward/
webstringtemplate/WebStringTemplate.html


Micheal

From parrt at cs.usfca.edu  Fri Nov 18 14:11:29 2005
From: parrt at cs.usfca.edu (Terence Parr)
Date: Fri Nov 18 14:11:46 2005
Subject: [stringtemplate-interest] Have you ever subclassed StringTemplate
	or StringTemplateGroup?
In-Reply-To: <006901c5ec45$b05cfdb0$6902a8c0@hercules>
References: <006901c5ec45$b05cfdb0$6902a8c0@hercules>
Message-ID: <44ADEDFD-0FD6-4E23-B91D-13A7ECED6C5C@cs.usfca.edu>


On Nov 18, 2005, at 5:40 AM, Micheal J wrote:

> Doesn't look like there is ever a need to do so. I can't think of a
> compelling use case in fact. Anyone else?

Yeah, I suppose you could override to fix a bug or something too.

> Also, how would the AttributeRenderer abstraction handle the  
> situation where
> I need to display two date values in the same view (i.e. template)  
> but with
> different formats?.

It doesn't handle this situation well at all, I'm afraid.  This would  
normally be rare unless you are doing something like "In Polish, the  
date is xxx but in English we use this format yyy".  In that case,  
you can just pass in a wrapper object per date that indicates it's  
value.  In my view, displaying a Date is so complicated in logic that  
you cannot display it w/o testing values etc..., which is forbidden  
in ST to avoid logic in the template.  I think it's proper to ask  
Date.toString() or a wrapper to do the formatting

> Is this a good case for per-attribute AttributeRenderer  
> registrations at the
> StringTemplate level?

I'd probably go with

st.setAttribute("date", new PolishDateRenderer(aDate));

just to use the existing mechanism.  That object could even be reused.

Ter
From sohail at taggedtype.net  Sat Nov 19 23:19:11 2005
From: sohail at taggedtype.net (Sohail Somani)
Date: Sat Nov 19 23:19:18 2005
Subject: [stringtemplate-interest] Force single-valued template
Message-ID: <1132471152.9388.0.camel@localhost.localdomain>

Is there a way to force a single valued template?

For example:

foo(bar)::=<<
<bar>
>>

I want foo to die if there is more than one bar. Is there another way to
approach this?

Thanks

Sohail

From parrt at cs.usfca.edu  Sun Nov 20 08:43:05 2005
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sun Nov 20 08:43:08 2005
Subject: [stringtemplate-interest] Force single-valued template
In-Reply-To: <1132471152.9388.0.camel@localhost.localdomain>
References: <1132471152.9388.0.camel@localhost.localdomain>
Message-ID: <3A69FA66-E704-4E0D-8055-DBA2D60AF766@cs.usfca.edu>


On Nov 19, 2005, at 11:19 PM, Sohail Somani wrote:

> Is there a way to force a single valued template?
>
> For example:
>
> foo(bar)::=<<
> <bar>
>>>
>
> I want foo to die if there is more than one bar. Is there another  
> way to
> approach this?

Hi.  Do you mean throw an exception when you try to set bar?  Or, do  
you mean just not print anything?

My first design for arguments of templates included cardinality like:

foo(a,b?,c*,d+) ::= "..."

where plain 'a' meant exactly one.  Unfortunately there was so much  
stuff written with just plain arguments listed that I didn't feel  
like it was possible to change.  Further, it complicated the  
evaluation of predicates (slowed it down a bit) and I wasn't sure how  
many people would use it.  I believe I have the infrastructure in  
there still; just not hooked up.

Can you explain the primary motivation?

Ter
From sohail at taggedtype.net  Sun Nov 20 09:48:11 2005
From: sohail at taggedtype.net (sohail@taggedtype.net)
Date: Sun Nov 20 09:48:17 2005
Subject: [stringtemplate-interest] Force single-valued template
In-Reply-To: <3A69FA66-E704-4E0D-8055-DBA2D60AF766@cs.usfca.edu>
References: <1132471152.9388.0.camel@localhost.localdomain>
	<3A69FA66-E704-4E0D-8055-DBA2D60AF766@cs.usfca.edu>
Message-ID: <45241.127.0.0.1.1132508891.squirrel@taggedtype.net>

Sorry if you get this twice Terence, not used to my web mail interface :)

>
> On Nov 19, 2005, at 11:19 PM, Sohail Somani wrote:
>
>> Is there a way to force a single valued template?
>>
>> For example:
>>
>> foo(bar)::=<<
>> <bar>
>>>>
>>
>> I want foo to die if there is more than one bar. Is there another
>> way to
>> approach this?
>
> Hi.  Do you mean throw an exception when you try to set bar?  Or, do
> you mean just not print anything?
>
> My first design for arguments of templates included cardinality like:
>
> foo(a,b?,c*,d+) ::= "..."
>
> where plain 'a' meant exactly one.  Unfortunately there was so much
> stuff written with just plain arguments listed that I didn't feel
> like it was possible to change.  Further, it complicated the
> evaluation of predicates (slowed it down a bit) and I wasn't sure how
> many people would use it.  I believe I have the infrastructure in
> there still; just not hooked up.
>
> Can you explain the primary motivation?

Hi Terence,

The primary motivation is implementation of right and left associative
operators:

power(lhs,rhs)::=<<std::power(<lhs>,<rhs>)>>

for 2**3**5, this should give:

std::power(2,std::power(3,5))

I don't think there is a way to do it without forcing lhs and rhs to be
single valued.

Thanks

Sohail

From parrt at cs.usfca.edu  Sun Nov 20 10:03:12 2005
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sun Nov 20 10:03:14 2005
Subject: [stringtemplate-interest] Force single-valued template
In-Reply-To: <C28DAC0E-E0AB-44C7-802A-C9EF29FE4896@cs.usfca.edu>
References: <1132471152.9388.0.camel@localhost.localdomain>
	<3A69FA66-E704-4E0D-8055-DBA2D60AF766@cs.usfca.edu>
	<45075.127.0.0.1.1132508841.squirrel@taggedtype.net>
	<C28DAC0E-E0AB-44C7-802A-C9EF29FE4896@cs.usfca.edu>
Message-ID: <539523DC-0293-4337-AEE2-C86901989EAA@cs.usfca.edu>

[forgot to send to list]

On Nov 20, 2005, at 10:01 AM, Terence Parr wrote:
> On Nov 20, 2005, at 9:47 AM, sohail@taggedtype.net wrote:
>> The primary motivation is implementation of right and left  
>> associative
>> operators:
>>
>> power(lhs,rhs)::=<<std::power(<lhs>,<rhs>)>>
>>
>> for 2**3**5, this should give:
>>
>> std::power(2,std::power(3,5))
>>
>> I don't think there is a way to do it without forcing lhs and rhs  
>> to be
>> single valued.
>
> How about using first(lhs) to get the first element?
>
> Also, I would stay away from using :: and such inside your template  
> names...i'll probably use :: for group inheritance soon...
>
> Ter

From sohail at taggedtype.net  Sun Nov 20 10:23:06 2005
From: sohail at taggedtype.net (sohail@taggedtype.net)
Date: Sun Nov 20 10:23:12 2005
Subject: [stringtemplate-interest] Force single-valued template
In-Reply-To: <539523DC-0293-4337-AEE2-C86901989EAA@cs.usfca.edu>
References: <1132471152.9388.0.camel@localhost.localdomain>
	<3A69FA66-E704-4E0D-8055-DBA2D60AF766@cs.usfca.edu>
	<45075.127.0.0.1.1132508841.squirrel@taggedtype.net>
	<C28DAC0E-E0AB-44C7-802A-C9EF29FE4896@cs.usfca.edu>
	<539523DC-0293-4337-AEE2-C86901989EAA@cs.usfca.edu>
Message-ID: <50699.127.0.0.1.1132510986.squirrel@taggedtype.net>

> [forgot to send to list]
>
> On Nov 20, 2005, at 10:01 AM, Terence Parr wrote:
>> On Nov 20, 2005, at 9:47 AM, sohail@taggedtype.net wrote:
>>> The primary motivation is implementation of right and left
>>> associative
>>> operators:
>>>
>>> power(lhs,rhs)::=<<std::power(<lhs>,<rhs>)>>
>>>
>>> for 2**3**5, this should give:
>>>
>>> std::power(2,std::power(3,5))
>>>
>>> I don't think there is a way to do it without forcing lhs and rhs
>>> to be
>>> single valued.
>>
>> How about using first(lhs) to get the first element?
>>
>> Also, I would stay away from using :: and such inside your template
>> names...i'll probably use :: for group inheritance soon...

I look forward to the inheritance! Is there a way to escape the charaters?
It is not possible for me to not use ::
From sohail at taggedtype.net  Sun Nov 20 10:26:35 2005
From: sohail at taggedtype.net (sohail@taggedtype.net)
Date: Sun Nov 20 10:26:41 2005
Subject: [stringtemplate-interest] Force single-valued template
In-Reply-To: <539523DC-0293-4337-AEE2-C86901989EAA@cs.usfca.edu>
References: <1132471152.9388.0.camel@localhost.localdomain>
	<3A69FA66-E704-4E0D-8055-DBA2D60AF766@cs.usfca.edu>
	<45075.127.0.0.1.1132508841.squirrel@taggedtype.net>
	<C28DAC0E-E0AB-44C7-802A-C9EF29FE4896@cs.usfca.edu>
	<539523DC-0293-4337-AEE2-C86901989EAA@cs.usfca.edu>
Message-ID: <51201.127.0.0.1.1132511195.squirrel@taggedtype.net>

> [forgot to send to list]
>
> On Nov 20, 2005, at 10:01 AM, Terence Parr wrote:
>> On Nov 20, 2005, at 9:47 AM, sohail@taggedtype.net wrote:
>>> The primary motivation is implementation of right and left
>>> associative
>>> operators:
>>>
>>> power(lhs,rhs)::=<<std::power(<lhs>,<rhs>)>>
>>>
>>> for 2**3**5, this should give:
>>>
>>> std::power(2,std::power(3,5))
>>>
>>> I don't think there is a way to do it without forcing lhs and rhs
>>> to be
>>> single valued.
>>
>> How about using first(lhs) to get the first element?

I don't particularly like this solution as it will cause a silent failure.
I'd really like an exception to be thrown while the template is being
constructed.

Sohail
From parrt at cs.usfca.edu  Sun Nov 20 11:44:46 2005
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sun Nov 20 11:44:55 2005
Subject: [stringtemplate-interest] Force single-valued template
In-Reply-To: <50699.127.0.0.1.1132510986.squirrel@taggedtype.net>
References: <1132471152.9388.0.camel@localhost.localdomain>
	<3A69FA66-E704-4E0D-8055-DBA2D60AF766@cs.usfca.edu>
	<45075.127.0.0.1.1132508841.squirrel@taggedtype.net>
	<C28DAC0E-E0AB-44C7-802A-C9EF29FE4896@cs.usfca.edu>
	<539523DC-0293-4337-AEE2-C86901989EAA@cs.usfca.edu>
	<50699.127.0.0.1.1132510986.squirrel@taggedtype.net>
Message-ID: <38D385FB-C544-428A-AE04-818F66426ECA@cs.usfca.edu>


On Nov 20, 2005, at 10:23 AM, sohail@taggedtype.net wrote:
>>> Also, I would stay away from using :: and such inside your template
>>> names...i'll probably use :: for group inheritance soon...
>
> I look forward to the inheritance! Is there a way to escape the  
> charaters?
> It is not possible for me to not use ::

Why?  What meaning does it have for you?

I'm thinking of:

t() ::= "<group::template()>"

or some such.

Ter
From parrt at cs.usfca.edu  Sun Nov 20 11:46:11 2005
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sun Nov 20 11:46:19 2005
Subject: [stringtemplate-interest] Force single-valued template
In-Reply-To: <51201.127.0.0.1.1132511195.squirrel@taggedtype.net>
References: <1132471152.9388.0.camel@localhost.localdomain>
	<3A69FA66-E704-4E0D-8055-DBA2D60AF766@cs.usfca.edu>
	<45075.127.0.0.1.1132508841.squirrel@taggedtype.net>
	<C28DAC0E-E0AB-44C7-802A-C9EF29FE4896@cs.usfca.edu>
	<539523DC-0293-4337-AEE2-C86901989EAA@cs.usfca.edu>
	<51201.127.0.0.1.1132511195.squirrel@taggedtype.net>
Message-ID: <47630F3D-B4BD-48A7-B537-D9A2F357B907@cs.usfca.edu>


On Nov 20, 2005, at 10:26 AM, sohail@taggedtype.net wrote:
>>>> power(lhs,rhs)::=<<std::power(<lhs>,<rhs>)>>
>>>>
>>>> for 2**3**5, this should give:
>>>>
>>>> std::power(2,std::power(3,5))
>>>>
>>>> I don't think there is a way to do it without forcing lhs and rhs
>>>> to be
>>>> single valued.
>>>
>>> How about using first(lhs) to get the first element?
>
> I don't particularly like this solution as it will cause a silent  
> failure.
> I'd really like an exception to be thrown while the template is being
> constructed.

Oh I see what you mean. Well, one could look at it that the  
controller/model should determine the logic of what is valid data-- 
the view should simply display it, not enforce anything dealing with  
validity of data.

Ter
From sohail at taggedtype.net  Sun Nov 20 11:47:07 2005
From: sohail at taggedtype.net (Sohail Somani)
Date: Sun Nov 20 11:47:13 2005
Subject: [stringtemplate-interest] Force single-valued template
In-Reply-To: <38D385FB-C544-428A-AE04-818F66426ECA@cs.usfca.edu>
References: <1132471152.9388.0.camel@localhost.localdomain>
	<3A69FA66-E704-4E0D-8055-DBA2D60AF766@cs.usfca.edu>
	<45075.127.0.0.1.1132508841.squirrel@taggedtype.net>
	<C28DAC0E-E0AB-44C7-802A-C9EF29FE4896@cs.usfca.edu>
	<539523DC-0293-4337-AEE2-C86901989EAA@cs.usfca.edu>
	<50699.127.0.0.1.1132510986.squirrel@taggedtype.net>
	<38D385FB-C544-428A-AE04-818F66426ECA@cs.usfca.edu>
Message-ID: <1132516027.8240.1.camel@localhost.localdomain>

On Sun, 2005-20-11 at 11:44 -0800, Terence Parr wrote:
> On Nov 20, 2005, at 10:23 AM, sohail@taggedtype.net wrote:
> >>> Also, I would stay away from using :: and such inside your template
> >>> names...i'll probably use :: for group inheritance soon...
> >
> > I look forward to the inheritance! Is there a way to escape the  
> > charaters?
> > It is not possible for me to not use ::
> 
> Why?  What meaning does it have for you?
> 
> I'm thinking of:
> 
> t() ::= "<group::template()>"
> 
> or some such.

Its part of the language I'm translating to (C++). :: is the scope
resolution operator.

From sohail at taggedtype.net  Sun Nov 20 11:51:30 2005
From: sohail at taggedtype.net (Sohail Somani)
Date: Sun Nov 20 11:51:35 2005
Subject: [stringtemplate-interest] Force single-valued template
In-Reply-To: <47630F3D-B4BD-48A7-B537-D9A2F357B907@cs.usfca.edu>
References: <1132471152.9388.0.camel@localhost.localdomain>
	<3A69FA66-E704-4E0D-8055-DBA2D60AF766@cs.usfca.edu>
	<45075.127.0.0.1.1132508841.squirrel@taggedtype.net>
	<C28DAC0E-E0AB-44C7-802A-C9EF29FE4896@cs.usfca.edu>
	<539523DC-0293-4337-AEE2-C86901989EAA@cs.usfca.edu>
	<51201.127.0.0.1.1132511195.squirrel@taggedtype.net>
	<47630F3D-B4BD-48A7-B537-D9A2F357B907@cs.usfca.edu>
Message-ID: <1132516291.8240.6.camel@localhost.localdomain>

On Sun, 2005-20-11 at 11:46 -0800, Terence Parr wrote:
> On Nov 20, 2005, at 10:26 AM, sohail@taggedtype.net wrote:
> >>>> power(lhs,rhs)::=<<std::power(<lhs>,<rhs>)>>
> >>>>
> >>>> for 2**3**5, this should give:
> >>>>
> >>>> std::power(2,std::power(3,5))
> >>>>
> >>>> I don't think there is a way to do it without forcing lhs and rhs
> >>>> to be
> >>>> single valued.
> >>>
> >>> How about using first(lhs) to get the first element?
> >
> > I don't particularly like this solution as it will cause a silent  
> > failure.
> > I'd really like an exception to be thrown while the template is being
> > constructed.
> 
> Oh I see what you mean. Well, one could look at it that the  
> controller/model should determine the logic of what is valid data-- 
> the view should simply display it, not enforce anything dealing with  
> validity of data.

Oh of course it is doing this (otherwise it wouldn't be working today),
but I think eventually someone else will modify it and screw things up.
Or am I being too paranoid? I suppose using first(lhs), first(rhs) in
the template would show the intent. The parse also documents this. Do
you think this is enough?

I prefer having less comments and better code but I think this is a case
in which only comments will help :(

From parrt at cs.usfca.edu  Sun Nov 20 11:51:33 2005
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sun Nov 20 11:51:42 2005
Subject: [stringtemplate-interest] Force single-valued template
In-Reply-To: <1132516027.8240.1.camel@localhost.localdomain>
References: <1132471152.9388.0.camel@localhost.localdomain>
	<3A69FA66-E704-4E0D-8055-DBA2D60AF766@cs.usfca.edu>
	<45075.127.0.0.1.1132508841.squirrel@taggedtype.net>
	<C28DAC0E-E0AB-44C7-802A-C9EF29FE4896@cs.usfca.edu>
	<539523DC-0293-4337-AEE2-C86901989EAA@cs.usfca.edu>
	<50699.127.0.0.1.1132510986.squirrel@taggedtype.net>
	<38D385FB-C544-428A-AE04-818F66426ECA@cs.usfca.edu>
	<1132516027.8240.1.camel@localhost.localdomain>
Message-ID: <B9AF8438-E84D-409F-8BF1-F2365D3B6E1B@cs.usfca.edu>


On Nov 20, 2005, at 11:47 AM, Sohail Somani wrote:
> Its part of the language I'm translating to (C++). :: is the scope
> resolution operator.

Oh, sorry...you had the "std::" outside of the template expression.   
Ooops.

Ter
From parrt at cs.usfca.edu  Sun Nov 20 12:16:20 2005
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sun Nov 20 12:16:28 2005
Subject: [stringtemplate-interest] Force single-valued template
In-Reply-To: <1132516291.8240.6.camel@localhost.localdomain>
References: <1132471152.9388.0.camel@localhost.localdomain>
	<3A69FA66-E704-4E0D-8055-DBA2D60AF766@cs.usfca.edu>
	<45075.127.0.0.1.1132508841.squirrel@taggedtype.net>
	<C28DAC0E-E0AB-44C7-802A-C9EF29FE4896@cs.usfca.edu>
	<539523DC-0293-4337-AEE2-C86901989EAA@cs.usfca.edu>
	<51201.127.0.0.1.1132511195.squirrel@taggedtype.net>
	<47630F3D-B4BD-48A7-B537-D9A2F357B907@cs.usfca.edu>
	<1132516291.8240.6.camel@localhost.localdomain>
Message-ID: <B70FD09F-645E-44DA-8507-4591C3036568@cs.usfca.edu>


On Nov 20, 2005, at 11:51 AM, Sohail Somani wrote:
> Oh of course it is doing this (otherwise it wouldn't be working  
> today),
> but I think eventually someone else will modify it and screw things  
> up.
> Or am I being too paranoid? I suppose using first(lhs), first(rhs) in
> the template would show the intent. The parse also documents this. Do
> you think this is enough?

Probably...

> I prefer having less comments and better code but I think this is a  
> case
> in which only comments will help :(

Agreed.  In general, code should be the comment/doc. :)

Ter
From jesper.goertz at gmail.com  Mon Nov 21 13:27:00 2005
From: jesper.goertz at gmail.com (Jesper Goertz)
Date: Mon Nov 21 13:27:02 2005
Subject: [stringtemplate-interest] H2 test a value
Message-ID: <2be4e4550511211327t562bdc90w54423a8e4816c4c4@mail.gmail.com>

Hi Terence,

StringTemplate is a fine tool, thank you!

In the documentation (of List construction) you write that
"This ability to rearrange attributes is consistent with model-view separation
because the template cannot alter the data structure nor test its values"

However, it seems to be possible to test for specific values by means of
a map attribute with boolean values, e.g., with

map.put("b", Boolean.TRUE);

you can test for the value "b" like in

t(m,n) ::= "$if (!m.(n))$ $n$ $endif$"

When the rest bug has been squashed this can be used to filter out
values from a list and solve "the last empty value problem" in
testEmptyIteratedConditionalValueGetsNoSeparator.

Is this kosher or a vile hack?

Jesper
From parrt at cs.usfca.edu  Mon Nov 21 13:58:25 2005
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon Nov 21 13:58:30 2005
Subject: [stringtemplate-interest] $r.st vs $r.template
Message-ID: <C043B228-AF7B-411D-8AF5-AD9D30020B54@cs.usfca.edu>

Howdy.  I can't decide whether to use .st or .template as the  
predefined property of a rule label reference.  Do you like this:

formalParameter
     :   type declarator
         -> parameter(type={$type.st},name={$declarator.st})
     ;

or would you prefer $type.template and $declarator.template?  I had  
it this verbose way at first, but I quickly got tired of typing it.   
My one concern with .st is it is the file extension for template  
files (only for people using it for web stuff I guess though).

ST is an officially approved abbreviation for StringTemplate in email  
though ;)  Perhaps it's ok.

By the way, do you like that ANTLR+ST integration?  I've got it  
working and am converting my cminus.g translator to this v3 stuff.   
Should be done shortly.

Ter
From KamalV at infragistics.com  Mon Nov 21 18:31:27 2005
From: KamalV at infragistics.com (Kamal Verma)
Date: Mon Nov 21 18:31:29 2005
Subject: [stringtemplate-interest] $r.st vs $r.template
Message-ID: <E2472DAB656CC1479BDF8F94F1582119100F12@igusnjewmx1.infragistics.local>

I will personally like ".template", though longer to type, it is clear and avoid chances of error while reading the big code.
 
I am new to string template and antlr, but I was wondering if there is any round-trip example which preserves whitespaces will be great. Like,
 
source1-->LEXER-->token_stream-->PARSER-->some_tree-->STRING_TEMPLATE->source2
 
given is,
 
source1=source2 (syntactically) (like, reformatted)
source1=source2 (semantically) (translated)
source1=source2 (both) - complete round trip preserving whitespace.
 
Since, I am new to this I was wondering if there are examples already.
 
_K

________________________________

From: stringtemplate-interest-bounces@antlr.org on behalf of Terence Parr
Sent: Mon 11/21/2005 4:58 PM
To: ANTLR Interest
Cc: stringtemplate-interest
Subject: [stringtemplate-interest] $r.st vs $r.template



Howdy.  I can't decide whether to use .st or .template as the 
predefined property of a rule label reference.  Do you like this:

formalParameter
     :   type declarator
         -> parameter(type={$type.st},name={$declarator.st})
     ;

or would you prefer $type.template and $declarator.template?  I had 
it this verbose way at first, but I quickly got tired of typing it.  
My one concern with .st is it is the file extension for template 
files (only for people using it for web stuff I guess though).

ST is an officially approved abbreviation for StringTemplate in email 
though ;)  Perhaps it's ok.

By the way, do you like that ANTLR+ST integration?  I've got it 
working and am converting my cminus.g translator to this v3 stuff.  
Should be done shortly.

Ter
_______________________________________________
stringtemplate-interest mailing list
stringtemplate-interest@antlr.org
http://www.antlr.org:8080/mailman/listinfo/stringtemplate-interest


From blo.b at infonie.fr  Mon Nov 21 22:13:20 2005
From: blo.b at infonie.fr (Laurent Vaucher)
Date: Mon Nov 21 22:13:05 2005
Subject: [stringtemplate-interest] $r.st vs $r.template
In-Reply-To: <C043B228-AF7B-411D-8AF5-AD9D30020B54@cs.usfca.edu>
References: <C043B228-AF7B-411D-8AF5-AD9D30020B54@cs.usfca.edu>
Message-ID: <4269E50D-E603-406F-9D5F-8A694D9A8756@infonie.fr>


   Hi.

> formalParameter
>     :   type declarator
>         -> parameter(type={$type.st},name={$declarator.st})
>     ;
>
> ST is an officially approved abbreviation for StringTemplate in  
> email though ;)  Perhaps it's ok.

   Tough decision you've got here. Of course .template is more  
explicit but if that "ANTLR+ST" is to become mainstream, we'll soon  
regret the short option. "Don't underestimate the power of  
conciseness." (I probably read that in some essay from Paul Graham).


> By the way, do you like that ANTLR+ST integration?  I've got it  
> working and am converting my cminus.g translator to this v3 stuff.   
> Should be done shortly.

   Not tried yet, though I'm working on a PowerBuilder->JavaScript  
expression translator (with ANTLR-2.7 and hand-written code  
generation). Is ANTLR v3 stable enough to use or is it still moving  
too much?


Laurent.

From parrt at cs.usfca.edu  Tue Nov 22 11:31:01 2005
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue Nov 22 11:31:01 2005
Subject: [stringtemplate-interest] $r.st vs $r.template
In-Reply-To: <E2472DAB656CC1479BDF8F94F1582119100F12@igusnjewmx1.infragistics.local>
References: <E2472DAB656CC1479BDF8F94F1582119100F12@igusnjewmx1.infragistics.local>
Message-ID: <5FB5ABBA-190E-4327-B98F-6BB3159E57E6@cs.usfca.edu>


On Nov 21, 2005, at 6:31 PM, Kamal Verma wrote:

> I will personally like ".template", though longer to type, it is  
> clear and avoid chances of error while reading the big code.

Hi. I'm leaning that way also.

> I am new to string template and antlr, but I was wondering if there  
> is any round-trip example which preserves whitespaces will be  
> great. Like,
>
> source1-->LEXER-->token_stream-->PARSER-->some_tree-- 
> >STRING_TEMPLATE->source2

Going to trees is harder given that some tokens don't make it into  
the tree!  Have you seen:

http://www.antlr.org/article/preserving.token.order/ 
preserving.token.order.tml

> given is,
>
> source1=source2 (syntactically) (like, reformatted)
> source1=source2 (semantically) (translated)
> source1=source2 (both) - complete round trip preserving whitespace.
>
> Since, I am new to this I was wondering if there are examples already.

You might look at that above article...

Ter
From parrt at cs.usfca.edu  Tue Nov 22 11:37:21 2005
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue Nov 22 11:37:23 2005
Subject: [stringtemplate-interest] H2 test a value
In-Reply-To: <2be4e4550511211327t562bdc90w54423a8e4816c4c4@mail.gmail.com>
References: <2be4e4550511211327t562bdc90w54423a8e4816c4c4@mail.gmail.com>
Message-ID: <7D5B82D7-1571-4867-9578-6F57FE420611@cs.usfca.edu>


On Nov 21, 2005, at 1:27 PM, Jesper Goertz wrote:

> Hi Terence,
>
> StringTemplate is a fine tool, thank you!

Thanks!  How did you find it?

> In the documentation (of List construction) you write that
> "This ability to rearrange attributes is consistent with model-view  
> separation
> because the template cannot alter the data structure nor test its  
> values"
>
> However, it seems to be possible to test for specific values by  
> means of
> a map attribute with boolean values, e.g., with
>
> map.put("b", Boolean.TRUE);

Well, yes, booleans are the only exception but in a sense they are ok  
as you are merely testing the result of a computation in the model.

> you can test for the value "b" like in
>
> t(m,n) ::= "$if (!m.(n))$ $n$ $endif$"

Doesn't this simply yield a property name, which is stored in  
attribute n, such as "salary" of object m?  So if you say m is a map  
with "salary":"99000" and n="salary", it will show text "salary" when  
m.get("salary") is non null.  You are deciding whether to display not  
testing its value to see if it's 42 or whatever.

> When the rest bug has been squashed this can be used to filter out
> values from a list and solve "the last empty value problem" in
> testEmptyIteratedConditionalValueGetsNoSeparator.

Ah, well you can always filter for empty values.  My rule is "you can  
test presence/absence or size or anything else that does not test the  
value of an attribute"

> Is this kosher or a vile hack?

Seems kosher...filtering for nonempty values is trivial:

$names:{n | $if(n)$ $n$ $endif$}$

Ter
From parrt at cs.usfca.edu  Tue Nov 22 11:51:26 2005
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue Nov 22 11:51:28 2005
Subject: [stringtemplate-interest] $r.st vs $r.template
In-Reply-To: <4269E50D-E603-406F-9D5F-8A694D9A8756@infonie.fr>
References: <C043B228-AF7B-411D-8AF5-AD9D30020B54@cs.usfca.edu>
	<4269E50D-E603-406F-9D5F-8A694D9A8756@infonie.fr>
Message-ID: <524CFAFB-C27A-4DEC-8724-588B7782E663@cs.usfca.edu>


On Nov 21, 2005, at 10:13 PM, Laurent Vaucher wrote:
>   Hi.
>
>> formalParameter
>>     :   type declarator
>>         -> parameter(type={$type.st},name={$declarator.st})
>>     ;
>>
>> ST is an officially approved abbreviation for StringTemplate in  
>> email though ;)  Perhaps it's ok.
>
>   Tough decision you've got here. Of course .template is more  
> explicit but if that "ANTLR+ST" is to become mainstream, we'll soon  
> regret the short option. "Don't underestimate the power of  
> conciseness." (I probably read that in some essay from Paul Graham).

So are you saying short is good or bad?  I'm leaning now  
towards .template again.

>> By the way, do you like that ANTLR+ST integration?  I've got it  
>> working and am converting my cminus.g translator to this v3  
>> stuff.  Should be done shortly.
>
>   Not tried yet, though I'm working on a PowerBuilder->JavaScript  
> expression translator (with ANTLR-2.7 and hand-written code  
> generation). Is ANTLR v3 stable enough to use or is it still moving  
> too much?

Well, Jim Idle claims to have working stuff with it.  The only  
changes will be some small syntax changes for actions most likely.   
The biggest issue is that bad input makes it crash ;)  That's my next  
big project after getting ST integrated.

Ter
From blo.b at infonie.fr  Tue Nov 22 22:10:00 2005
From: blo.b at infonie.fr (Laurent Vaucher)
Date: Tue Nov 22 22:09:41 2005
Subject: [stringtemplate-interest] $r.st vs $r.template
In-Reply-To: <524CFAFB-C27A-4DEC-8724-588B7782E663@cs.usfca.edu>
References: <C043B228-AF7B-411D-8AF5-AD9D30020B54@cs.usfca.edu>
	<4269E50D-E603-406F-9D5F-8A694D9A8756@infonie.fr>
	<524CFAFB-C27A-4DEC-8724-588B7782E663@cs.usfca.edu>
Message-ID: <AA0650A8-4E18-4C8A-91E5-7DDFDEB0FFBE@infonie.fr>

>
> So are you saying short is good or bad?  I'm leaning now  
> towards .template again.
>

   Well, I don't have an a priori opinion. What I wanted to say was  
that for something that is not used very often, the long explicit  
name is the good choice (no need for a lookup in the manual, the name  
says it all). But if it is something that appears in every rule for a  
translation grammar, I think it will feel heavy (everything is  
already in the reader's short-term memory, so there's no need for a  
long descriptive name).


> Well, Jim Idle claims to have working stuff with it.  The only  
> changes will be some small syntax changes for actions most likely.   
> The biggest issue is that bad input makes it crash ;)  That's my  
> next big project after getting ST integrated.

   Alright. That's interesting.

Laurent.

From parrt at cs.usfca.edu  Tue Nov 22 22:26:14 2005
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue Nov 22 22:26:18 2005
Subject: [stringtemplate-interest] $r.st vs $r.template
In-Reply-To: <AA0650A8-4E18-4C8A-91E5-7DDFDEB0FFBE@infonie.fr>
References: <C043B228-AF7B-411D-8AF5-AD9D30020B54@cs.usfca.edu>
	<4269E50D-E603-406F-9D5F-8A694D9A8756@infonie.fr>
	<524CFAFB-C27A-4DEC-8724-588B7782E663@cs.usfca.edu>
	<AA0650A8-4E18-4C8A-91E5-7DDFDEB0FFBE@infonie.fr>
Message-ID: <DE9D3D17-100A-467A-A367-78E6F3B9FF81@cs.usfca.edu>


On Nov 22, 2005, at 10:10 PM, Laurent Vaucher wrote:

>>
>> So are you saying short is good or bad?  I'm leaning now  
>> towards .template again.
>>
>
>   Well, I don't have an a priori opinion. What I wanted to say was  
> that for something that is not used very often, the long explicit  
> name is the good choice (no need for a lookup in the manual, the  
> name says it all). But if it is something that appears in every  
> rule for a translation grammar, I think it will feel heavy  
> (everything is already in the reader's short-term memory, so  
> there's no need for a long descriptive name).

A very good point.  Damn, just when I was convinced that .template  
was right.  .st looks wrong but it is really long to type and believe  
me, you'll use it in every rule...

Ter
From VAUCHER at fermat.fr  Tue Nov 22 23:58:52 2005
From: VAUCHER at fermat.fr (VAUCHER Laurent)
Date: Tue Nov 22 23:58:26 2005
Subject: [stringtemplate-interest] $r.st vs $r.template
Message-ID: <55DDB08CC9CD2941A70E8D626789A2C99F7313@ec8l7ljvo9h5dde.hosting.exch>

> .st looks wrong but it is really long to type and believe me,
> you'll use it in every rule...

  I agree on that. .st does not look very nice, but we can get used
to it the way lispers got used to CAR and CDR which do not mean
anything anymore.

  The only other possibility I see is using a special syntax. That
would make it clear that it is not just any other attribute and
that templates are part of ANTLR supported translation mechanism.
The drawback, as always, is syntax-bloat.


Laurent.
From jesper.goertz at gmail.com  Wed Nov 23 07:36:29 2005
From: jesper.goertz at gmail.com (Jesper Goertz)
Date: Wed Nov 23 07:36:31 2005
Subject: [stringtemplate-interest] H2 test a value
In-Reply-To: <7D5B82D7-1571-4867-9578-6F57FE420611@cs.usfca.edu>
References: <2be4e4550511211327t562bdc90w54423a8e4816c4c4@mail.gmail.com>
	<7D5B82D7-1571-4867-9578-6F57FE420611@cs.usfca.edu>
Message-ID: <2be4e4550511230736o74420f01x60f3a32eee1305ae@mail.gmail.com>

I see, rest() is not needed, the filter below works fine.

    String templates =
      "group test;" +newline+
      "t(m,ns) ::= << <ns:{n|<if (!m.(n))><n><endif>};
separator=\",\"> >>" +newline;
    StringTemplateGroup group = new StringTemplateGroup(new
StringReader(templates), AngleBracketTemplateLexer.class);

    HashMap filter = new HashMap();
    filter.put("42", Boolean.TRUE);
    String[] numbers = new String[]{"3","11","42","87"};

    StringTemplate a = group.getInstanceOf("t");
    a.setAttribute("m", filter);
    a.setAttribute("ns", numbers);

    String expecting =" 3,11,87 ";
    String result = a.toString();
    assertEqual(result, expecting);

And I found stringtemplates at www.codegeneration.net looking for a
tool to generate wrapper classes from remote interfaces. The filter is
needed because the wrapper methods should not throw
java.rmi.RemoteException.

Jesper

On 11/22/05, Terence Parr <parrt@cs.usfca.edu> wrote:
>
> On Nov 21, 2005, at 1:27 PM, Jesper Goertz wrote:
>
> > Hi Terence,
> >
> > StringTemplate is a fine tool, thank you!
>
> Thanks!  How did you find it?
>
> > In the documentation (of List construction) you write that
> > "This ability to rearrange attributes is consistent with model-view
> > separation
> > because the template cannot alter the data structure nor test its
> > values"
> >
> > However, it seems to be possible to test for specific values by
> > means of
> > a map attribute with boolean values, e.g., with
> >
> > map.put("b", Boolean.TRUE);
>
> Well, yes, booleans are the only exception but in a sense they are ok
> as you are merely testing the result of a computation in the model.
>
> > you can test for the value "b" like in
> >
> > t(m,n) ::= "$if (!m.(n))$ $n$ $endif$"
>
> Doesn't this simply yield a property name, which is stored in
> attribute n, such as "salary" of object m?  So if you say m is a map
> with "salary":"99000" and n="salary", it will show text "salary" when
> m.get("salary") is non null.  You are deciding whether to display not
> testing its value to see if it's 42 or whatever.
>
> > When the rest bug has been squashed this can be used to filter out
> > values from a list and solve "the last empty value problem" in
> > testEmptyIteratedConditionalValueGetsNoSeparator.
>
> Ah, well you can always filter for empty values.  My rule is "you can
> test presence/absence or size or anything else that does not test the
> value of an attribute"
>
> > Is this kosher or a vile hack?
>
> Seems kosher...filtering for nonempty values is trivial:
>
> $names:{n | $if(n)$ $n$ $endif$}$
>
> Ter
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest@antlr.org
> http://www.antlr.org:8080/mailman/listinfo/stringtemplate-interest
>
From parrt at cs.usfca.edu  Sat Nov 26 15:17:12 2005
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sat Nov 26 15:16:55 2005
Subject: [stringtemplate-interest] $r.st vs $r.template
In-Reply-To: <55DDB08CC9CD2941A70E8D626789A2C99F7313@ec8l7ljvo9h5dde.hosting.exch>
References: <55DDB08CC9CD2941A70E8D626789A2C99F7313@ec8l7ljvo9h5dde.hosting.exch>
Message-ID: <7BE7B2D5-03D9-46B7-896B-32348EB7AC0D@cs.usfca.edu>


On Nov 22, 2005, at 11:58 PM, VAUCHER Laurent wrote:

>> .st looks wrong but it is really long to type and believe me,
>> you'll use it in every rule...
>
>   I agree on that. .st does not look very nice, but we can get used
> to it the way lispers got used to CAR and CDR which do not mean
> anything anymore.
>
>   The only other possibility I see is using a special syntax. That
> would make it clear that it is not just any other attribute and
> that templates are part of ANTLR supported translation mechanism.
> The drawback, as always, is syntax-bloat.

Hi Laurent, thanks....I decided on .st :)

Thanks,
Ter
From parrt at cs.usfca.edu  Sat Nov 26 15:19:28 2005
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sat Nov 26 15:19:12 2005
Subject: [stringtemplate-interest] H2 test a value
In-Reply-To: <2be4e4550511230736o74420f01x60f3a32eee1305ae@mail.gmail.com>
References: <2be4e4550511211327t562bdc90w54423a8e4816c4c4@mail.gmail.com>
	<7D5B82D7-1571-4867-9578-6F57FE420611@cs.usfca.edu>
	<2be4e4550511230736o74420f01x60f3a32eee1305ae@mail.gmail.com>
Message-ID: <471425D1-1653-4E8F-B783-DDBB209C1FFE@cs.usfca.edu>


On Nov 23, 2005, at 7:36 AM, Jesper Goertz wrote:
> I see, rest() is not needed, the filter below works fine.
>
>     String templates =
>       "group test;" +newline+
>       "t(m,ns) ::= << <ns:{n|<if (!m.(n))><n><endif>};
> separator=\",\"> >>" +newline;
>     StringTemplateGroup group = new StringTemplateGroup(new
> StringReader(templates), AngleBracketTemplateLexer.class);
>
>     HashMap filter = new HashMap();
>     filter.put("42", Boolean.TRUE);
>     String[] numbers = new String[]{"3","11","42","87"};
>
>     StringTemplate a = group.getInstanceOf("t");
>     a.setAttribute("m", filter);
>     a.setAttribute("ns", numbers);
>
>     String expecting =" 3,11,87 ";
>     String result = a.toString();
>     assertEqual(result, expecting);
>
> And I found stringtemplates at www.codegeneration.net looking for a
> tool to generate wrapper classes from remote interfaces. The filter is
> needed because the wrapper methods should not throw
> java.rmi.RemoteException.

Hi. Seems to me that

t(m,ns) ::= << <ns:{n|<if (!m.(n))><n><endif>}; separator=\",\"> >>

will "work", but it's probably something you want to avoid--it's a  
hack ;)  If you need to filter, why shouldn't this be done in the  
model/controller rather than the view?  Surely the programming  
language is better at filtering lists than stringtemplate and would  
properly separate model from view. :)

Ter


