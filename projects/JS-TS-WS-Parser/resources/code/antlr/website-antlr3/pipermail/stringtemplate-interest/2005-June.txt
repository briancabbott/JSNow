From mikael.petterson at ericsson.com  Wed Jun  1 04:39:13 2005
From: mikael.petterson at ericsson.com (Mikael Petterson (KI/EAB))
Date: Wed Jun  1 04:39:17 2005
Subject: [stringtemplate-interest] Can't load template field.st
Message-ID: <CCC32394452CEC4D8DCC799319240A3C013B175F@esealmw104.eemea.ericsson.se>

Hi,

I am using StringTemplate. I had a look at :http://www.codegeneration.net/tiki-read_article.php?articleId=65
I tested the following class and template in the same directory ( see below). When I execute my main I get the following error:

Exception in thread "main" java.lang.IllegalArgumentException: Can't load template field.st
        at org.antlr.stringtemplate.StringTemplateGroup.lookupTemplate(StringTemplateGroup.java:284)
        at org.antlr.stringtemplate.StringTemplateGroup.getInstanceOf(StringTemplateGroup.java:227)
        at org.antlr.stringtemplate.StringTemplateGroup.getEmbeddedInstanceOf(StringTemplateGroup.java:235)
        at org.antlr.stringtemplate.language.ActionEvaluator.template(ActionEvaluator.java:413)
        at org.antlr.stringtemplate.language.ActionEvaluator.templateApplication(ActionEvaluator.java:212)
        at org.antlr.stringtemplate.language.ActionEvaluator.expr(ActionEvaluator.java:125)
        at org.antlr.stringtemplate.language.ActionEvaluator.action(ActionEvaluator.java:84)
        at org.antlr.stringtemplate.language.ASTExpr.write(ASTExpr.java:92)
        at org.antlr.stringtemplate.StringTemplate.write(StringTemplate.java:643)
        at org.antlr.stringtemplate.StringTemplate.toString(StringTemplate.java:1241)
        at java.lang.String.valueOf(String.java:2577)
        at java.io.PrintStream.print(PrintStream.java:616)
        at java.io.PrintStream.println(PrintStream.java:753)
        at Main.main(Main.java:49)

An hints?

//Mikael

Class
====
/*
 * Main.java
 *
 * Created on June 1, 2005, 7:43 AM
 *
 * To change this template, choose Tools | Options and locate the template under
 * the Source Creation and Management node. Right-click the template and choose
 * Open. You can then make changes to the template in the Source Editor.
 */
import org.antlr.stringtemplate.StringTemplateGroup;
import org.antlr.stringtemplate.StringTemplate;
import org.antlr.stringtemplate.StringTemplateErrorListener;
import org.antlr.stringtemplate.language.*;
import java.lang.reflect.*;
import java.io.*;


/**
 *
 * @author eraonel
 */
public abstract class Main implements StringTemplateErrorListener{
        // some dummy fields

    public int i;

    public String name;

    public int[] data;
    /** Creates a new instance of Main */
    public Main() {
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) throws IOException {
        StringTemplateGroup templates = null;
        
        templates = new StringTemplateGroup("myTemplates" ,"/home/eraonel/netbeans_projects/bdediff/src");
        Class c = Main.class;
        Field[] fields = c.getFields();
        Method[] methods = c.getDeclaredMethods();
        StringTemplate classST = templates.getInstanceOf("xml");
        classST.setAttribute("name", c.getName());
        classST.setAttribute("field", fields);
        classST.setAttribute("method", methods);
        System.out.println(classST);
    }
        // dummy methods

    public void foo(int x, float[] y) {;}

    public String bar() {return "";}
}

Template
=======
group XML;

 class(name,fields,methods) ::= <<
 <class>
   <name>$name$</name>
   $fields:field()$   
   $methods:method()$
 </class>
 >>
 field() ::= << 
 <field>   
  <type>$type(t=it.type)$</type><name>$it.name$</name>
 </field>
 >>
 type(t) ::= "$if(t.componentType)$$t.componentType$[]$else$$t.name$$endif$"
 method() ::= <<
 <method>   
   <type>$it.returnType$</type><name>$it.name$</name>   
   $it.parameterTypes:{<arg><type>$type(t=it)$</type><name>arg$i$</name>}$ 
 </method>
 >>

From stefan at amiq.ro  Wed Jun  1 05:14:20 2005
From: stefan at amiq.ro (stefan)
Date: Wed Jun  1 05:12:40 2005
Subject: [stringtemplate-interest] Can't load template field.st
In-Reply-To: <CCC32394452CEC4D8DCC799319240A3C013B175F@esealmw104.eemea.ericsson.se>
References: <CCC32394452CEC4D8DCC799319240A3C013B175F@esealmw104.eemea.ericsson.se>
Message-ID: <200506011514.20162.stefan@amiq.ro>

    Try to move template 'field' in a separate file, called field.st. As you 
can see it tries to load template from disk, from a file called field.st.
    See next chapters from documentation :
  -  Template References
  -  Template lookup
 
    My question would be : why the template is not found? is this a bug?
    All templates are associated with a group defined in a group file and 
should be looked first in the parent group (see paragraph 4, "Template 
Lookup" chapter). 
   
stefan.
    
On Wednesday 01 June 2005 14:39, Mikael Petterson (KI/EAB) wrote:
> Hi,
>
> I am using StringTemplate. I had a look at
> :http://www.codegeneration.net/tiki-read_article.php?articleId=65 I tested
> the following class and template in the same directory ( see below). When I
> execute my main I get the following error:
>
> Exception in thread "main" java.lang.IllegalArgumentException: Can't load
> template field.st at
> org.antlr.stringtemplate.StringTemplateGroup.lookupTemplate(StringTemplateG
>roup.java:284) at
> org.antlr.stringtemplate.StringTemplateGroup.getInstanceOf(StringTemplateGr
>oup.java:227) at
> org.antlr.stringtemplate.StringTemplateGroup.getEmbeddedInstanceOf(StringTe
>mplateGroup.java:235) at
> org.antlr.stringtemplate.language.ActionEvaluator.template(ActionEvaluator.
>java:413) at
> org.antlr.stringtemplate.language.ActionEvaluator.templateApplication(Actio
>nEvaluator.java:212) at
> org.antlr.stringtemplate.language.ActionEvaluator.expr(ActionEvaluator.java
>:125) at
> org.antlr.stringtemplate.language.ActionEvaluator.action(ActionEvaluator.ja
>va:84) at org.antlr.stringtemplate.language.ASTExpr.write(ASTExpr.java:92)
> at org.antlr.stringtemplate.StringTemplate.write(StringTemplate.java:643)
> at
> org.antlr.stringtemplate.StringTemplate.toString(StringTemplate.java:1241)
> at java.lang.String.valueOf(String.java:2577)
>         at java.io.PrintStream.print(PrintStream.java:616)
>         at java.io.PrintStream.println(PrintStream.java:753)
>         at Main.main(Main.java:49)
>
> An hints?
>
> //Mikael
>
> Class
> ====
> /*
>  * Main.java
>  *
>  * Created on June 1, 2005, 7:43 AM
>  *
>  * To change this template, choose Tools | Options and locate the template
> under * the Source Creation and Management node. Right-click the template
> and choose * Open. You can then make changes to the template in the Source
> Editor. */
> import org.antlr.stringtemplate.StringTemplateGroup;
> import org.antlr.stringtemplate.StringTemplate;
> import org.antlr.stringtemplate.StringTemplateErrorListener;
> import org.antlr.stringtemplate.language.*;
> import java.lang.reflect.*;
> import java.io.*;
>
>
> /**
>  *
>  * @author eraonel
>  */
> public abstract class Main implements StringTemplateErrorListener{
>         // some dummy fields
>
>     public int i;
>
>     public String name;
>
>     public int[] data;
>     /** Creates a new instance of Main */
>     public Main() {
>     }
>
>     /**
>      * @param args the command line arguments
>      */
>     public static void main(String[] args) throws IOException {
>         StringTemplateGroup templates = null;
>
>         templates = new StringTemplateGroup("myTemplates"
> ,"/home/eraonel/netbeans_projects/bdediff/src"); Class c = Main.class;
>         Field[] fields = c.getFields();
>         Method[] methods = c.getDeclaredMethods();
>         StringTemplate classST = templates.getInstanceOf("xml");
>         classST.setAttribute("name", c.getName());
>         classST.setAttribute("field", fields);
>         classST.setAttribute("method", methods);
>         System.out.println(classST);
>     }
>         // dummy methods
>
>     public void foo(int x, float[] y) {;}
>
>     public String bar() {return "";}
> }
>
> Template
> =======
> group XML;
>
>  class(name,fields,methods) ::= <<
>  <class>
>    <name>$name$</name>
>    $fields:field()$
>    $methods:method()$
>  </class>
>
>  field() ::= <<
>  <field>
>   <type>$type(t=it.type)$</type><name>$it.name$</name>
>  </field>
>
>  type(t) ::=
> "$if(t.componentType)$$t.componentType$[]$else$$t.name$$endif$" method()
> ::= <<
>  <method>
>    <type>$it.returnType$</type><name>$it.name$</name>
>    $it.parameterTypes:{<arg><type>$type(t=it)$</type><name>arg$i$</name>}$
>  </method>
>
>
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest@antlr.org
> http://www.antlr.org:8080/mailman/listinfo/stringtemplate-interest
From stefan at amiq.ro  Wed Jun  1 08:03:01 2005
From: stefan at amiq.ro (stefan)
Date: Wed Jun  1 08:01:19 2005
Subject: [stringtemplate-interest] comments bug
Message-ID: <200506011803.01262.stefan@amiq.ro>

Hello Ter

        next template :
group main;
super_header(header) ::= <<
--- $header$
>>
<!xsxsxs!>
header() ::= <<
 Mdea : $mdea$
>>

      issues next error:
problem parsing group 'main'
line 6:2: expecting '<', found '!'
        at 
org.antlr.stringtemplate.language.GroupLexer.nextToken(GroupLexer.java:187)
        at antlr.TokenBuffer.fill(TokenBuffer.java:69)
        at antlr.TokenBuffer.LA(TokenBuffer.java:80)
        at antlr.LLkParser.LA(LLkParser.java:52)
        at 
org.antlr.stringtemplate.language.GroupParser.group(GroupParser.java:116)
        at 
org.antlr.stringtemplate.StringTemplateGroup.parseGroup(StringTemplateGroup.java:484)
        at 
org.antlr.stringtemplate.StringTemplateGroup.<init>(StringTemplateGroup.java:186)
        at 
org.antlr.stringtemplate.StringTemplateGroup.<init>(StringTemplateGroup.java:164)
        at Main.main(Main.java:14)
java.lang.IllegalArgumentException: Can't load template header.st

        The same is happening if I use $!....!$ instead of <!........!>
stefan.
---------------------------------------
         TEST CODE
---------------------------------------
import java.util.*;
import java.io.*;
import java.net.*;

import org.antlr.stringtemplate.*;

public class Main {

   public static void main(String[] args){
      try {
         StringTemplate.setLintMode(true);
         System.out.println("---1 ");
         StringTemplateGroup allGroup = new StringTemplateGroup(new 
FileReader("./main.st"));
         StringTemplate _st1 = allGroup.getInstanceOf("super_header");
         StringTemplate _st2 = allGroup.getInstanceOf("header");
         System.out.println("---2 ");
      }catch (Exception e){
         System.out.println(e.toString());
      }
   }
}

From stefan at amiq.ro  Wed Jun  1 09:00:03 2005
From: stefan at amiq.ro (stefan)
Date: Wed Jun  1 08:58:20 2005
Subject: [stringtemplate-interest] stringtemplate enhancements
Message-ID: <200506011900.03637.stefan@amiq.ro>

Hello Ter,

             here are few things that I see as possible enhancements, some of 
them already pointed by you or other users:

   1. Inheritance directives to replace setSuperGroup(): 
group son_group extends father_group; 
   
   2. Define more groups in one file or import them:
import some_other_group;
group gica {
........
};
group ana {
...............
};
      The result of loading such a file would be a hashmap containing 
("group_name", group_instance).

    3. Ability to add group attributes, a kind of global attributes.  When a 
template is looking for an attribute it should look for it in (super)group's 
attributes before enclosing template.
      At one point I was relying on enclosing template to get global 
attributes, which was quite a mess.

   4. An exception/logging mechanism.

   5. Static methods to access the error listener in StringTemplateGroup.  At 
this point I am using direct access of the field 
StringTemplateGroup.DEFAULT_ERROR_LISTENER.

   6. A method to load group files : group.loadGroup(reader).

   7. Indentation of lists using something like $indent$$list$, where indent 
is a list of string/stringtemplate.

Stefan.
From parrt at cs.usfca.edu  Wed Jun  1 09:27:33 2005
From: parrt at cs.usfca.edu (Terence Parr)
Date: Wed Jun  1 09:27:35 2005
Subject: [stringtemplate-interest] Can't load template field.st
In-Reply-To: <200506011514.20162.stefan@amiq.ro>
References: <CCC32394452CEC4D8DCC799319240A3C013B175F@esealmw104.eemea.ericsson.se>
	<200506011514.20162.stefan@amiq.ro>
Message-ID: <2379E388-BB71-465B-B534-9D9CABAE9DE5@cs.usfca.edu>

Hi Gang,

You either load templates from a directory or a group file.  If you  
want to load from a group file make sure you use the constructor that  
loads group files not directories :)

Terence
From parrt at cs.usfca.edu  Wed Jun  1 09:35:06 2005
From: parrt at cs.usfca.edu (Terence Parr)
Date: Wed Jun  1 09:35:09 2005
Subject: [stringtemplate-interest] comments bug
In-Reply-To: <200506011803.01262.stefan@amiq.ro>
References: <200506011803.01262.stefan@amiq.ro>
Message-ID: <A9E2D1AB-FCE9-4ABA-9C15-924758E2A6F0@cs.usfca.edu>

Hi.  In group files use /* ... */ as it's outside of a template.   
Only inside templates do you have to use $!...!$ :)  So the template  
group files really are output grammar files:

/** Generate a method */
method(args,body) :: <<
...
 >>

etc...

:)

Ter

On Jun 1, 2005, at 8:03 AM, stefan wrote:

> Hello Ter
>
>         next template :
> group main;
> super_header(header) ::= <<
> --- $header$
>
>>>
>>>
> <!xsxsxs!>
> header() ::= <<
>  Mdea : $mdea$
>
>>>
>>>
>
>       issues next error:
> problem parsing group 'main'
> line 6:2: expecting '<', found '!'
>         at
> org.antlr.stringtemplate.language.GroupLexer.nextToken 
> (GroupLexer.java:187)
>         at antlr.TokenBuffer.fill(TokenBuffer.java:69)
>         at antlr.TokenBuffer.LA(TokenBuffer.java:80)
>         at antlr.LLkParser.LA(LLkParser.java:52)
>         at
> org.antlr.stringtemplate.language.GroupParser.group 
> (GroupParser.java:116)
>         at
> org.antlr.stringtemplate.StringTemplateGroup.parseGroup 
> (StringTemplateGroup.java:484)
>         at
> org.antlr.stringtemplate.StringTemplateGroup.<init> 
> (StringTemplateGroup.java:186)
>         at
> org.antlr.stringtemplate.StringTemplateGroup.<init> 
> (StringTemplateGroup.java:164)
>         at Main.main(Main.java:14)
> java.lang.IllegalArgumentException: Can't load template header.st
>
>         The same is happening if I use $!....!$ instead of  
> <!........!>
> stefan.
> ---------------------------------------
>          TEST CODE
> ---------------------------------------
> import java.util.*;
> import java.io.*;
> import java.net.*;
>
> import org.antlr.stringtemplate.*;
>
> public class Main {
>
>    public static void main(String[] args){
>       try {
>          StringTemplate.setLintMode(true);
>          System.out.println("---1 ");
>          StringTemplateGroup allGroup = new StringTemplateGroup(new
> FileReader("./main.st"));
>          StringTemplate _st1 = allGroup.getInstanceOf("super_header");
>          StringTemplate _st2 = allGroup.getInstanceOf("header");
>          System.out.println("---2 ");
>       }catch (Exception e){
>          System.out.println(e.toString());
>       }
>    }
> }
>
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest@antlr.org
> http://www.antlr.org:8080/mailman/listinfo/stringtemplate-interest
>

From parrt at cs.usfca.edu  Wed Jun  1 17:21:24 2005
From: parrt at cs.usfca.edu (Terence Parr)
Date: Wed Jun  1 17:20:52 2005
Subject: [stringtemplate-interest] how can I retrieve attribute names from
	a string template???
In-Reply-To: <200505311712.38766.stefan@amiq.ro>
References: <200505311712.38766.stefan@amiq.ro>
Message-ID: <F314BF36-AE0D-4DFD-91C3-9F1EDEFC2104@cs.usfca.edu>


On May 31, 2005, at 7:12 AM, stefan wrote:

> Hello,
>
>        I have next template :
> group main;
> header(mdea, file) ::= <<
> // Medea : $medea$
> // File : $file$
>
>>>
>>>
>             and I would like to extract the attributes names and  
> use them to
> interogate a map.  In this case would be : { medea, file}.
>             How can I do that?

If you have a template called t you can say t.file to get attribute  
file from that template.

To use a map, you set an attribute, perhaps "map", to a HashMap and  
then do map.foo and it will do a map.get(foo).

Is that what you need?

Ter
--
CS Professor & Grad Director, University of San Francisco
Creator, ANTLR Parser Generator, http://www.antlr.org
Cofounder, http://www.jguru.com

From stefan at amiq.ro  Thu Jun  2 00:16:00 2005
From: stefan at amiq.ro (stefan)
Date: Thu Jun  2 00:14:18 2005
Subject: [stringtemplate-interest] how can I retrieve attribute names from
	a string template???
In-Reply-To: <F314BF36-AE0D-4DFD-91C3-9F1EDEFC2104@cs.usfca.edu>
References: <200505311712.38766.stefan@amiq.ro>
	<F314BF36-AE0D-4DFD-91C3-9F1EDEFC2104@cs.usfca.edu>
Message-ID: <200506021016.00889.stefan@amiq.ro>

On Thursday 02 June 2005 03:21, Terence Parr wrote:
> On May 31, 2005, at 7:12 AM, stefan wrote:
> > Hello,
> >
> >        I have next template :
> > group main;
> > header(medea, file) ::= <<
> > // Medea : $medea$
> > // File : $file$
> >
> >
> >
> >             and I would like to extract the attributes names and
> > use them to
> > interogate a map.  In this case would be : { medea, file}.
> >             How can I do that?
>
> If you have a template called t you can say t.file to get attribute
> file from that template.
>
> To use a map, you set an attribute, perhaps "map", to a HashMap and
> then do map.foo and it will do a map.get(foo).
   What I needed, was a method to return the names of the attributes. In the 
example above would be : ["medea", "file"]. But I solved it another way.
   Thanks.
> Is that what you need?
>
> Ter
> --
> CS Professor & Grad Director, University of San Francisco
> Creator, ANTLR Parser Generator, http://www.antlr.org
> Cofounder, http://www.jguru.com
>
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest@antlr.org
> http://www.antlr.org:8080/mailman/listinfo/stringtemplate-interest
From stefan at amiq.ro  Fri Jun  3 00:15:59 2005
From: stefan at amiq.ro (stefan)
Date: Fri Jun  3 00:14:18 2005
Subject: [stringtemplate-interest] separator issue
Message-ID: <200506031015.59610.stefan@amiq.ro>

Hello

      the template below :
group test;
test(object) ::= "$object.members; separator=object.separator$"
   
      issues error : 
........................
template parse error
line 1:34: expecting ID, found 'separator'
        at antlr.Parser.match(Parser.java:211
........................
   
      If I change "object.separator" to anything else it works fine.

Stefan.

--------------------------------------------------------------
TEST CODE FOLLOWS
import java.util.*;
import java.util.regex.*;
import java.io.*;
import java.net.*;

import org.antlr.stringtemplate.*;
import org.antlr.stringtemplate.language.*;

public class Test {
   static void d(String _s) {
      System.out.println(_s);
   }

   public static void main(String[] args){
      try {
         d("---1 ");
         StringTemplateGroup allGroup = new StringTemplateGroup(new 
FileReader("test.st"));
         d("---2 ");
         StringTemplate _st = allGroup.getInstanceOf("test");
         d("---3 ");
         d("=============\n" + _st.toString() + "\n==============");
      }catch (Exception e){
         System.out.println(e.toString());
      }
   }
}
From parrt at cs.usfca.edu  Fri Jun  3 10:04:10 2005
From: parrt at cs.usfca.edu (Terence Parr)
Date: Fri Jun  3 10:04:12 2005
Subject: [stringtemplate-interest] separator issue
In-Reply-To: <200506031015.59610.stefan@amiq.ro>
References: <200506031015.59610.stefan@amiq.ro>
Message-ID: <E11C677E-5AED-4514-BE05-32900D4F1719@cs.usfca.edu>

Hi.  Sorry about that. "separator" is a keyword in my parser.
Terence

On Jun 3, 2005, at 12:15 AM, stefan wrote:

> Hello
>
>       the template below :
> group test;
> test(object) ::= "$object.members; separator=object.separator$"
>
>       issues error :
> ........................
> template parse error
> line 1:34: expecting ID, found 'separator'
>         at antlr.Parser.match(Parser.java:211
> ........................
>
>       If I change "object.separator" to anything else it works fine.
>
> Stefan.
>
> ---------
From stefan at amiq.ro  Tue Jun  7 11:16:25 2005
From: stefan at amiq.ro (stefan)
Date: Tue Jun  7 11:14:45 2005
Subject: [stringtemplate-interest] attribute evaluation & template
	accumulation
Message-ID: <200506072116.25647.stefan@amiq.ro>

Hello Ter,
              I would like to ask you why the evaluation of attributes and 
string accumulation are done in the same phase?
              As I see it, there should be two steps. In first step, 
attributes would be evaluated and replaced with their values; the result of 
this step would be string templates filled with strings.  In the second phase 
the strings would be accumulated.
             There are two advantages that I see in this solution. First would 
be a clear border between template/attribute evaluation and string 
accumulation. The second is that during accumulation I can work with only two 
objects : templates and strings.
             Due to clear distinction between evaluation and accumulation, you 
can easily introduce a way to write templates out using custom renderers. The 
second point lets us easily evaluate the length of templates/strings.

             Is this pertinent a issue? Are you going to make such a change in 
next release?

Stefan.

From parrt at cs.usfca.edu  Tue Jun  7 12:07:19 2005
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue Jun  7 12:06:48 2005
Subject: [stringtemplate-interest] attribute evaluation & template
	accumulation
In-Reply-To: <200506072116.25647.stefan@amiq.ro>
References: <200506072116.25647.stefan@amiq.ro>
Message-ID: <29D9753A-EFBC-4E45-810F-F65973488195@cs.usfca.edu>


On Jun 7, 2005, at 11:16 AM, stefan wrote:

> Hello Ter,
>               I would like to ask you why the evaluation of  
> attributes and
> string accumulation are done in the same phase?
>               As I see it, there should be two steps. In first step,
> attributes would be evaluated and replaced with their values; the  
> result of
> this step would be string templates filled with strings.  In the  
> second phase
> the strings would be accumulated.
>              There are two advantages that I see in this solution.  
> First would
> be a clear border between template/attribute evaluation and string
> accumulation. The second is that during accumulation I can work  
> with only two
> objects : templates and strings.
>              Due to clear distinction between evaluation and  
> accumulation, you
> can easily introduce a way to write templates out using custom  
> renderers. The
> second point lets us easily evaluate the length of templates/strings.

Great question, Stefan.  It turns out that you can do "immediate  
evaluation" if you want (to check length and such if I can put that  
in).  Just use parenthesis like "$(templateName)()$" which evaluates  
templateName to a string and then uses that as a template name to  
include.

It turns out, however, that in general lazy evaluation is absolutely  
crucial as it allows you to decouple the computation of attributes  
from the construction of templates.  For example, sometimes you build  
up this big template for a web page body and it references $title$,  
which of course is null until you insert the body into the overall  
page template, which does have title defined.  So, lazy evaluation is  
extremely valuable and makes certain things easy that would otherwise  
be fairly impossible! :)

Ter
--
CS Professor & Grad Director, University of San Francisco
Creator, ANTLR Parser Generator, http://www.antlr.org
Cofounder, http://www.jguru.com

From stefan at amiq.ro  Tue Jun  7 12:14:10 2005
From: stefan at amiq.ro (stefan)
Date: Tue Jun  7 12:12:28 2005
Subject: [stringtemplate-interest] model & renderer
Message-ID: <200506072214.10074.stefan@amiq.ro>

Hello Ter, 

          At one point Aton Keks,  asked for the ability to register renderers 
with templates. I'm facing a similar need now as I'm developing a 
prettyprinter using string templates. 

        Let's consider the case of next class:
class GOGU extends GICA {
}
        with the template:
class $kid$ extends $parent$$beforeOB${
$members$
$beforeCB$}
        In case of a pretty printing application, attribute 
"beforeCB" (CB="ClosingBrace") depends on attribute "beforeOB" 
(OB="OpeningBrace"). In case opening brace jumps on the next line the closing 
brace should be aligned to it, so I need to compute somewhere attribute 
"beforeCB".  
        Possible outputs of this template would be:
................
class GOGU extends GICA {
}// Closing Brace aligned to Open Brace
// OR
class GOGU extends GICA 
   {
   } // Closing Brace aligned to Open Brace
........

       I could resolve the task above if I would have a mechanism by which 
every template has an associated model. The models can be either a predefined 
"DefaultTemplateModel" or a custom one. All template operations should be 
done using the model, less template realization/rendering.

       Another issue is to let the user to control the way the template is 
realized/written out.  In the example above I would like to be able to 
introduce line breaks for line wrapping. In order to do this I must control 
the way templates are rendered, assuming that attributes were evaluated in a 
previous step.
       As in the previous, the solution would be a to associate a renderer to 
each template, a default one or a user customized one. 

       Both solutions above also imply a way to keep track of the templates 
and their associated models and renderers.

       Are you going to include such a feature in the next release and when 
would that be?

Thank you for your patience,
                                          Stefan.

PS : 
     I solved first task by introducing a TemplateModel, which is basically a 
wrapper around templates (is NOT inherited from StringTemplate). Every 
template has an associated model and  all operations with templates are done 
through this model. I can compute inside it parameters like "beforeCB", but 
still, my solution can not control the way template is written out.
     I couldn't solve the second issue :((......yet :).
From stefan at amiq.ro  Tue Jun  7 12:29:44 2005
From: stefan at amiq.ro (stefan)
Date: Tue Jun  7 12:28:02 2005
Subject: [stringtemplate-interest] attribute evaluation & template
	accumulation
In-Reply-To: <29D9753A-EFBC-4E45-810F-F65973488195@cs.usfca.edu>
References: <200506072116.25647.stefan@amiq.ro>
	<29D9753A-EFBC-4E45-810F-F65973488195@cs.usfca.edu>
Message-ID: <200506072229.44072.stefan@amiq.ro>

Bear with me and see the answers bellow:
On Tuesday 07 June 2005 22:07, Terence Parr wrote:
> On Jun 7, 2005, at 11:16 AM, stefan wrote:
> > Hello Ter,
> >               I would like to ask you why the evaluation of
> > attributes and
> > string accumulation are done in the same phase?
> >               As I see it, there should be two steps. In first step,
> > attributes would be evaluated and replaced with their values; the
> > result of
> > this step would be string templates filled with strings.  In the
> > second phase
> > the strings would be accumulated.
> >              There are two advantages that I see in this solution.
> > First would
> > be a clear border between template/attribute evaluation and string
> > accumulation. The second is that during accumulation I can work
> > with only two
> > objects : templates and strings.
> >              Due to clear distinction between evaluation and
> > accumulation, you
> > can easily introduce a way to write templates out using custom
> > renderers. The
> > second point lets us easily evaluate the length of templates/strings.
>
> Great question, Stefan.  It turns out that you can do "immediate
> evaluation" if you want (to check length and such if I can put that
> in).  Just use parenthesis like "$(templateName)()$" which evaluates
> templateName to a string and then uses that as a template name to
> include.
      When I referred to evaluation step and rendering step, I was thinking of 
breaking the current toString() functionality in two: a part which evaluates 
the chunks and replaces them by strings/templates and a part which will 
collect chunks and write them out (aka render them). Did you have the same 
thing in mind when you written the lines above?

> It turns out, however, that in general lazy evaluation is absolutely
> crucial as it allows you to decouple the computation of attributes
> from the construction of templates.  For example, sometimes you build
> up this big template for a web page body and it references $title$,
> which of course is null until you insert the body into the overall
> page template, which does have title defined.  So, lazy evaluation is
> extremely valuable and makes certain things easy that would otherwise
> be fairly impossible! :)
    I do not want to eliminate the lazy evaluation, but decouple it from 
template realization/rendering.

> Ter
> --
> CS Professor & Grad Director, University of San Francisco
> Creator, ANTLR Parser Generator, http://www.antlr.org
> Cofounder, http://www.jguru.com
>
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest@antlr.org
> http://www.antlr.org:8080/mailman/listinfo/stringtemplate-interest
From parrt at cs.usfca.edu  Tue Jun  7 12:57:43 2005
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue Jun  7 12:57:11 2005
Subject: [stringtemplate-interest] attribute evaluation & template
	accumulation
In-Reply-To: <200506072229.44072.stefan@amiq.ro>
References: <200506072116.25647.stefan@amiq.ro>
	<29D9753A-EFBC-4E45-810F-F65973488195@cs.usfca.edu>
	<200506072229.44072.stefan@amiq.ro>
Message-ID: <5A5B9D59-B5E8-45CC-93CE-2BB779E7B454@cs.usfca.edu>

On Jun 7, 2005, at 12:29 PM, stefan wrote:
>>>              Due to clear distinction between evaluation and
>>> accumulation, you
>>> can easily introduce a way to write templates out using custom
>>> renderers. The
>>> second point lets us easily evaluate the length of templates/ 
>>> strings.
>>>
>>
>> Great question, Stefan.  It turns out that you can do "immediate
>> evaluation" if you want (to check length and such if I can put that
>> in).  Just use parenthesis like "$(templateName)()$" which evaluates
>> templateName to a string and then uses that as a template name to
>> include.
>>
>       When I referred to evaluation step and rendering step, I was  
> thinking of
> breaking the current toString() functionality in two: a part which  
> evaluates
> the chunks and replaces them by strings/templates and a part which  
> will
> collect chunks and write them out (aka render them). Did you have  
> the same
> thing in mind when you written the lines above?

Oh, no I meant something else.  Yes, with the rendering thing I will  
need to separate toString() into evaluate then render to String.  I  
will let you map for example Data -> MyDateRenderer or whatever with  
a map.  I will invoke the renderer before yielding a string.

Ter
--
CS Professor & Grad Director, University of San Francisco
Creator, ANTLR Parser Generator, http://www.antlr.org
Cofounder, http://www.jguru.com

From parrt at cs.usfca.edu  Tue Jun  7 13:01:01 2005
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue Jun  7 13:00:38 2005
Subject: [stringtemplate-interest] model & renderer
In-Reply-To: <200506072214.10074.stefan@amiq.ro>
References: <200506072214.10074.stefan@amiq.ro>
Message-ID: <C70D868D-3835-493D-98AF-580B79D74F84@cs.usfca.edu>

Hi,

Well, I had not thought about mapping a renderer to a template as the  
template should really say how it goes out, but I suppose a filter on  
the back end is what you want.  Use:

/** Generic StringTemplate output writer filter */
public interface StringTemplateWriter {
     void pushIndentation(String indent);

     String popIndentation();

     int write(String str) throws IOException;
}

to do the filtering I'd say just like I do for autoindent.

I will be allowing you to map model objects -> renderers in the next  
release...not sure when that would be available...

Ter
From parrt at cs.usfca.edu  Thu Jun  9 10:25:09 2005
From: parrt at cs.usfca.edu (Terence Parr)
Date: Thu Jun  9 10:24:36 2005
Subject: [stringtemplate-interest] Re: [antlr-interest] Another
	question......
In-Reply-To: <200506091201.51228.stefan@amiq.ro>
References: <2E909902FD3A03419E3A905908AE3DD4D1ED80@UKNSM201.emea.corp.eds.com>
	<200506091201.51228.stefan@amiq.ro>
Message-ID: <5C3453DF-ADA9-47AB-BC69-3F5794D60E6C@cs.usfca.edu>


On Jun 9, 2005, at 2:01 AM, stefan wrote:

> On Thursday 09 June 2005 11:12, Hill, Robert wrote:
>
>> Hi all,,
>>     <gasp> another question... :)
>>
>> Im using the stringtemplate as the final code formatting phase of  
>> my tool
>> trying to follow the separation of model/view etc, and was  
>> wondering if
>> there was anyway of formating the strings in the template, kind of  
>> like you
>> would  with sprintf?.. What I'd like to do would be something  
>> along the
>> lines of
>>
>> $name; separator = "\n"; format = "%.10s"$
>>
>
> At this moment you must format before stick values into the above  
> template.
> Something similar with this is on the requests list; please see
> "StringTemplate Bugs, Requests, Changes" section on
> www.stringtemplate.org/bugs.html.

Yup, i plan on adding this very soon.  I have a 2.2b2 version; that  
feature will make into 2.2b3 locally...i should have something in  
early July.

Ter
--
CS Professor & Grad Director, University of San Francisco
Creator, ANTLR Parser Generator, http://www.antlr.org
Cofounder, http://www.jguru.com

From parrt at cs.usfca.edu  Fri Jun 10 14:19:40 2005
From: parrt at cs.usfca.edu (Terence Parr)
Date: Fri Jun 10 14:19:05 2005
Subject: [stringtemplate-interest] I'm thinking of allowing boolean operators
Message-ID: <DA27B429-C583-4534-8FE5-75751E21815B@cs.usfca.edu>

Hi,

A nested IF is an AND condition...no two ways about it.  I find that  
I'm doing really complicated things to get OR and AND operations;  
since I clearly need those operations and am using them anyway, I'm  
thinking of adding them to the expression evaluation.   As long as  
I'm not testing values, just combining logic, it *should* be ok vis-a- 
vis my model-view separation principles.

Anybody vote yes or no?

Ter
--
CS Professor & Grad Director, University of San Francisco
Creator, ANTLR Parser Generator, http://www.antlr.org
Cofounder, http://www.jguru.com

From stefan at amiq.ro  Sat Jun 11 01:55:36 2005
From: stefan at amiq.ro (stefan)
Date: Sat Jun 11 01:54:06 2005
Subject: [stringtemplate-interest] I'm thinking of allowing boolean
	operators
In-Reply-To: <DA27B429-C583-4534-8FE5-75751E21815B@cs.usfca.edu>
References: <DA27B429-C583-4534-8FE5-75751E21815B@cs.usfca.edu>
Message-ID: <200506111155.36858.stefan@amiq.ro>

yes.
On Saturday 11 June 2005 00:19, Terence Parr wrote:
> ing really complicated things to get OR and AND operations; ?
> since I clearly need those operations and am using them anyway, I'm ?
> thinking of adding them to the expression evaluation. ? As long as ?
> I'm not testing values, just combining logic, it *should* be ok vis-a-
> vis my model-view separation principles.
From tom at egressive.com  Sun Jun 12 15:10:01 2005
From: tom at egressive.com (Tom Bentley)
Date: Sun Jun 12 15:10:15 2005
Subject: [stringtemplate-interest] I'm thinking of allowing boolean
	operators
In-Reply-To: <DA27B429-C583-4534-8FE5-75751E21815B@cs.usfca.edu>
References: <DA27B429-C583-4534-8FE5-75751E21815B@cs.usfca.edu>
Message-ID: <42ACB2B9.3020401@egressive.com>

> Anybody vote yes or no?

Yes.

Cheers,

Tom
From parrt at cs.usfca.edu  Mon Jun 13 12:20:17 2005
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon Jun 13 12:19:47 2005
Subject: [stringtemplate-interest] ANTLR 3.0 template files
Message-ID: <368060A3-83EF-47BE-A056-A50927B6FDC7@cs.usfca.edu>

Guys,

I'm wondering if it's a bad time for you folks to be trying to build  
C/C++/C# targets... To do the tree stuff, I'm changing a lot of stuff.

I was hoping to avoid this, but I may need to do a good bit of  
refactoring of the templates themselves.  Ric you may remember from  
the ANTLR2004 workshop that I'm thinking of a "template composition"  
thing to encapsulate different concerns.  So we'd have a basic code  
generator template file and then a group of templates that get  
applied to alter that for debugging then a set of templates to alter  
even that for tree construction.  At this point there are a million  
IF statements in the templates depending on debug etc... and *lots*  
of duplication (as I build the trees now) in order to avoid even more  
IFs.

I may need to add a concept to StringTemplate like aspects or  
composition.  Essentially I need to have a simple template like

tokenRef(label,token) ::= <<
<if(label)>
<label> = input.LT(1);
<endif>
match(token);
 >>

and then in another file (almost like a subclass) create the  
differences needed for trees.  But, how does the tree template stuff  
know where to stick stuff (front and back is easy, but what about in  
the middle)?  I figured we could leave holes:

tokenRef(label,token) ::= <<
<if(label)>
<label> = input.LT(1);
<else>
<treeLabel>
<endif>
match(token);
<treeBuild>
 >>

then have

tokenRef.treeLabel ::= "Token tk = input.LT(1);"

tokenRef.treeBuild ::= "Tree t = adaptor.create(tk);"

in another file.  The funny thing is that we could *almost* use  
subclassing for this.

tokenRef(label,token) ::= <<
super.tokenRef(treeLabel="...", treeBuild="...")
 >>

But the arguments can be many lines long and you lose the sense that  
it's a super group template instantiation.

For some reason, I'm gravitating towards the "composition" idea.

I hate having to leave holes in the main tokenRef even as that will  
get more and more complicated as I add debugging and all that.  I  
need a way to specify locations in a template after-the-fact--w/o  
having to actually alter the original template.  I read some aspect- 
oriented programming stuff but it seems pretty complicated how they  
specify where to add function calls etc...  Hmm... anybody have some  
suggestions?

Ter
--
CS Professor & Grad Director, University of San Francisco
Creator, ANTLR Parser Generator, http://www.antlr.org
Cofounder, http://www.jguru.com

From monty at codetransform.com  Mon Jun 13 10:06:36 2005
From: monty at codetransform.com (Monty Zukowski)
Date: Mon Jun 13 13:29:10 2005
Subject: [stringtemplate-interest] Re: [antlr-interest] ANTLR 3.0 template
	files
In-Reply-To: <368060A3-83EF-47BE-A056-A50927B6FDC7@cs.usfca.edu>
References: <368060A3-83EF-47BE-A056-A50927B6FDC7@cs.usfca.edu>
Message-ID: <42ADBD1C.70901@codetransform.com>

Terence Parr wrote:


> I hate having to leave holes in the main tokenRef even as that will  get 
> more and more complicated as I add debugging and all that.  I  need a 
> way to specify locations in a template after-the-fact--w/o  having to 
> actually alter the original template.  I read some aspect- oriented 
> programming stuff but it seems pretty complicated how they  specify 
> where to add function calls etc...  Hmm... anybody have some  suggestions?
> 

Perfect fit for tree rewriting!

AOP, as I understand if from a few years ago, let you say thing like 
"wrap this method with this code" or "wrap all invocations of this 
method with this code" or "add these variables and methods to all 
classes matching this pattern", etc.  And what's underneath?  A grammar 
that can find all the appropriate spots and merge in the code.

If you don't have holes, you need some way to specify a pattern to match 
against--how to find the holes.  You can predefine them a la AOP, or you 
can do it with a grammar.  Doing it the AOP style also brings up a 
problem of ordering -- if you have two aspects modifying the same spot 
which gets to go first?  It has to be specificed somewhere.

In fact, I'd be curious to see what "language" underlies ANTLR 3.  Your 
primitives are things like "change state" and "match" and "call rule" 
and "action" and "variable assignment".  I think you need an 
intermediate language which is more refined than text yet not as 
specific as a programming language.  StringTemplate might just be a 
little to stringy...just a little more structure than chunks of code and 
chunk references could allow you to write a grammar.

before chunk "match" add chunk "label"
after chunk "match" add chunk "build tree"

or, with ST translating chunk names to rule names and some predefined 
rules like chunk, text, and chunk_reference:

match:
	{label}
	chunk
	{build tree}

which doesn't look much different than what you have except that it is 
completely separate--the match template gets to stay simple.  The groovy 
thing is that now you can push and pop attributes so that the actual 
"match invocation" can know if it happening in a lexer, parser or tree 
parser.  I know there's an elegant way to make this happen--I need some 
more difficult examples though.  Or give me a call.

Monty
From parrt at cs.usfca.edu  Wed Jun 15 13:27:07 2005
From: parrt at cs.usfca.edu (Terence Parr)
Date: Wed Jun 15 13:26:30 2005
Subject: [stringtemplate-interest] another feature?
Message-ID: <77995D00-88DB-4060-9F1D-CF459168D8BB@cs.usfca.edu>

Howdy, as I plow through the ANTLR code generator, I'm finding more  
and more stuff that's needed.  Here is something I'm probably going  
to add:

o when calling another template, y, from within a template, x, none  
of the  x parameters are visible to y because the formal parameters  
force you to  define values.  This prevents surprises and makes it  
easy to ensure a  a value is empty unless you specifically set it for  
that template.  The  problem is that I need to factor templates  
sometimes and I want to refine  behavior with a subclass or just  
invoke another shared template but  <y()> erases all of x's  
parameters.  Perhaps <y(*)> or <y(...)> as a  syntax to indicate y  
should inherit all values.  <y(name="foo", ...)>  would mean that I  
set one, but the others are inherited whereas  <y(name="foo")> only  
has name set; others are empty.

Ter
--
CS Professor & Grad Director, University of San Francisco
Creator, ANTLR Parser Generator, http://www.antlr.org
Cofounder, http://www.jguru.com

From parrt at cs.usfca.edu  Wed Jun 22 11:40:37 2005
From: parrt at cs.usfca.edu (Terence Parr)
Date: Wed Jun 22 11:40:01 2005
Subject: [stringtemplate-interest] Reminder: USF's ANTLR2005 Workshop at BEA
	this Fall
Message-ID: <18D88E5E-7D9D-4AFD-884B-9147192897A4@cs.usfca.edu>

Hi :)

Just a reminder that the ANTLR2005 workshop will happen this Oct  
20-21, 2005 at BEA Systems' downtown San Francisco office, co- 
sponsored by BEA/USF.

http://www.cs.usfca.edu/ANTLR2005.shtml

We have 9 registrations so far and only 35 spots so make sure you  
register at

http://www.antlr.org/misc/register2005

if you plan on attending.  Cost is only $89, which will include food  
and printed materials and hopefully some "schwag" if we can manage it.

This is a practitioners workshop rather than an academic workshop.   
You will hear presentations from your fellow language developers and  
will have plenty of time to discuss difficult translation problems  
etc...  Last year was a blast!

Last year we talked a lot about ANTLR v3 and the ANTLRWorks GUI dev  
environment; this year you will get a tutorial on how to use them. :)  
Bring a laptop so we can all hack!

Regards,
Terence
Project lead and supreme dictator
--
CS Professor & Grad Director, University of San Francisco
Creator, ANTLR Parser Generator, http://www.antlr.org
Cofounder, http://www.jguru.com

