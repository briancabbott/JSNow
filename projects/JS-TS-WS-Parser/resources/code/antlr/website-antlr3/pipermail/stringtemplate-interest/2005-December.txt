From ray at soartech.com  Thu Dec 22 12:24:03 2005
From: ray at soartech.com (David Ray)
Date: Thu Dec 22 12:23:56 2005
Subject: [stringtemplate-interest] Escaping >>
Message-ID: <43AB0B63.5080000@soartech.com>

Hello,

In a template, I'd like to write out a >>. For example:

create() ::=
<<
     (<o> ^name << create-goal create-object >>)
 >>

However, StringTemplate doesn't seem to like the >> following 
"create-object".  Is there any way to escape it other than pushing it 
down into a sub-template?

Thanks,
Dave
From parrt at cs.usfca.edu  Thu Dec 22 12:36:15 2005
From: parrt at cs.usfca.edu (Terence Parr)
Date: Thu Dec 22 12:38:32 2005
Subject: [stringtemplate-interest] Escaping >>
In-Reply-To: <43AB0B63.5080000@soartech.com>
References: <43AB0B63.5080000@soartech.com>
Message-ID: <42903A97-8894-47A7-A9D2-283BA157C9B5@cs.usfca.edu>


On Dec 22, 2005, at 12:24 PM, David Ray wrote:

> Hello,
>
> In a template, I'd like to write out a >>. For example:
>
> create() ::=
> <<
>     (<o> ^name << create-goal create-object >>)
> >>
>
> However, StringTemplate doesn't seem to like the >> following  
> "create-object".  Is there any way to escape it other than pushing  
> it down into a sub-template?

Try \>> I think.

Ter
From ray at soartech.com  Thu Dec 22 12:44:42 2005
From: ray at soartech.com (David Ray)
Date: Thu Dec 22 12:44:34 2005
Subject: [stringtemplate-interest] Escaping >>
In-Reply-To: <42903A97-8894-47A7-A9D2-283BA157C9B5@cs.usfca.edu>
References: <43AB0B63.5080000@soartech.com>
	<42903A97-8894-47A7-A9D2-283BA157C9B5@cs.usfca.edu>
Message-ID: <43AB103A.6050502@soartech.com>

Nope. \>> fails.  \>\> generates \>\>.  Thanks for trying though :)

Dave

Terence Parr wrote:
> 
> On Dec 22, 2005, at 12:24 PM, David Ray wrote:
> 
>> Hello,
>>
>> In a template, I'd like to write out a >>. For example:
>>
>> create() ::=
>> <<
>>     (<o> ^name << create-goal create-object >>)
>> >>
>>
>> However, StringTemplate doesn't seem to like the >> following  
>> "create-object".  Is there any way to escape it other than pushing  it 
>> down into a sub-template?
> 
> 
> Try \>> I think.
> 
> Ter
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest@antlr.org
> http://www.antlr.org:8080/mailman/listinfo/stringtemplate-interest
From parrt at cs.usfca.edu  Fri Dec 23 11:20:44 2005
From: parrt at cs.usfca.edu (Terence Parr)
Date: Fri Dec 23 11:22:58 2005
Subject: [stringtemplate-interest] Escaping >>
In-Reply-To: <43AB103A.6050502@soartech.com>
References: <43AB0B63.5080000@soartech.com>
	<42903A97-8894-47A7-A9D2-283BA157C9B5@cs.usfca.edu>
	<43AB103A.6050502@soartech.com>
Message-ID: <DB99273D-F4DB-4EFF-838B-637F31AC6737@cs.usfca.edu>


On Dec 22, 2005, at 12:44 PM, David Ray wrote:

> Nope. \>> fails.  \>\> generates \>\>.  Thanks for trying though :)

That is very odd.  I'll add to list.
Ter
From parrt at cs.usfca.edu  Fri Dec 23 12:24:57 2005
From: parrt at cs.usfca.edu (Terence Parr)
Date: Fri Dec 23 12:27:13 2005
Subject: [stringtemplate-interest] improving template support in antlr v3
In-Reply-To: <1Epkr5-1Adf0K0@fwd31.sul.t-online.de>
References: <1Epkr5-1Adf0K0@fwd31.sul.t-online.de>
Message-ID: <3E88B21C-5BA4-4B0C-AD8A-B04947242459@cs.usfca.edu>

On Dec 23, 2005, at 3:12 AM, hwk.cortex-brainware@t-online.de wrote:
> I think there are some common scenarios:
>
> 1) Call different templates (even when I only return one template,  
> I might
> use some templates during calculation). We could use a common  
> syntax here
> like $ST["name"] to extract a template form the group. This would be a
> reserved word.

Yes, i have been working with this cool start-up company recently and  
I have been trying to use the template stuff.  I have not needed  
multiple templates from a single rule, but let me add my own  
frustrations here and we can probably come up with a nice bit of  
extension.  John Mitchell suggested this exact strategy...get  
something working (avoiding the complicated thing I was designing)  
and then try to build something with it! ;)

So, I do this a few times in a Java grammar:

StringTemplate fcallST = templateLib.getInstanceOf("fcall");
fcallST.setAttribute("ids", $type.st);  // type is a rule reference  
above
$anEnclosingTemplateVisibleHere.setAttribute("fcalls",fcallST);

Wouldn't it be nice to do as you say (a rewrite like constructor but  
in an action):

StringTemplate fcallST = $fcall(ids=$type.st);

and then we could have a syntax like pyStringTemplate to use array  
syntax instead of setAttribute:

$anEnclosingTemplateVisibleHere["fcalls"] = fcallST;

The problem of course is clear: The dollar syntax $x.y is way to  
simple to handle the above and it's ambiguous anyway.  We'd need a  
keyword as you say I think, but that makes it messy.

<sidetracked>
Actually, given that I must be consistent across output options, how  
will we build trees inline?

{AST t = ^($ID.text, $INT.text);}

I suppose we could make ^ significant like we did with #(...)  
before.  Hmm...What would a node constructor be?

^ID["blort]

I suppose that would be ok.
</sidetracked>

So, do we need a special symbol for inline stringtemplate stuff?   
Ick.  @ is action, $ is attribute.  Hm...keyword is probably better.   
Ack...can't just randomly look for a keyword...need a symbol.   
Hmm...well, what about, symbol plus braces:

StringTemplate fcallST = ${fcall(ids=$type.st)};
${anEnclosingTemplateVisibleHere["fcalls"] = fcallST};

I don't like overloading $ though but I hate to create another  
special symbol just for templates like:

StringTemplate fcallST = %{fcall(ids=$type.st)}
%{anEnclosingTemplateVisibleHere["fcalls"] = fcallST};

Is there some generic thing I could do with %{...}?  Ick.  Would they  
have to nest?

%{anEnclosingTemplateVisibleHere["fcalls"] = %{fcall(ids=$type.st)}};

Probably.  To me that is not very readable to the casual observer  
where the explicit is very readable.

Perhaps your $templates::fcall(ids=$type.st) would work with  
"templates" being the keyword / built-in scope of templates.   
Actually that would work. :)

StringTemplate fcallST = $templates::fcall(ids=$type.st);
$anEnclosingTemplateVisibleHere.setAttribute("fcalls",fcallST);

It saves a bit of typing and is more clear. :)

> Better yet: How about defining a string template group in the
> grammar:
>
> group MyTemplates;  // This only a defines a property in the parser  
> to set a
> string template group. Later, we could allow to define the  
> templates inline.

I think you want this to be dynamic so, as you request below, you can  
reset the template group for each pass using setTemplateLib().

> Then one could call templates of the group using a syntax like
> MyTemplates::Name. There would be a default group, which is used if  
> the
> group name is omitted.

We can just use the $templates::name(...) generic mechanism so we can  
dynamically change the actual group.  Your way might be useful with  
the ST interface I plan on implementing.  In this way, I could verify  
that your template names actually make sense.  Heh, i like it!

> -> xxx  calls default group "xxx" and returns this as result
> -> MyTemplates::xxx calls "xxx" in the the MyTemplates group and  
> returns
> this as result.

Interesting.  You want to be able to define multiple template  
libraries?  Ok, so

$templates::fcall(...)
$MyTemplates::blort(...)

I dislike overriding the $scope::x syntax so much, but it seems like  
it would work.  How would we specify the new template groups?

templates Java;
templates Debug;

then you could say $Java::fcall(...) and $Debug::dump(...).  But, the  
lib names should be interfaces so you're not locked into a specific  
template group, right?  This would generate methods like:

setJavaTemplateLib(...)

in the parser so you could set the actual lib.

How often would this multiple template lib thing be used do you think?

> Within actions $MyTemplates::xxx would call the template.
>
> Now, we could nest them:
>
> -> ResultTemplate(MyTemplates::xxx($Name), MyTemplates::yyy($Id)), or
> whatever...

Yup.

Oh, right we'd need to allow

-> Java::fcall(...)

syntax too.

> 2) Build a collection of templates. These are useful to pass them  
> to other
> templates...
>
> Currently, only the result of a rule can be added to a list. This  
> could be
> expanded to support multiple lists, one per template.
>
> Just allow the same syntax to be used in front of each template call:
> myList+=MyTemplates::xxx adds the template to a list called myList.

Is that in an action?  You can pass in multiple templates to fill  
with templates you create in that rule.  You can pass multiple return  
values back and just add to a list manually.  How often do you need  
to return multiple templates though?  When I need this I just access  
the outer template where they will go and then setAttribute for each  
new template.  I've yet to need multiple return templates.

> Maybe we should add the possibility to define lists in a scope:
> scope global {
> Templatecollection myList;  // or something like that
> }
>
> Use it like this: global::myList+=MyTemplates::xxx(...).

We're getting closer and closer to the simple neutral action language  
I was thinking of adding later ;)  Hm...this is getting a big much. I  
think:

global::myList.add($MyTemplates::xxx());

would be just as good ;)

> Overall, I think, template manipulation within ANTLR should be  
> expanded. Of

I plan on it...just trying to let actual need guide us. :)

> course, I can code that now within actions but it would be far more  
> user
> friendly if normal cases could be expressed in a standard and  
> uniform way.

Yes, let's come up with a nice extension.

> I have several 2.7.5 grammars in C# and Java, which only differs in  
> the
> action code because of different method and class names. Using  
> ANTLR 3 with
> templates I was hoping to move all differences to a set of  
> templates. This
> only works if templates can be manipulated within ANTLR itself.

Can't you just a different template group with setTemplateLib?

> Kind regards
>
>
> BTW: I was thinking about using multiple passes using the same  
> action code,
> but using different template groups for each pass...

Are you using setTemplateLib?

Let me add my own frustrations now.

This is a drag:

packageDefinition
	:	'package' identifier SEMI -> {$identifier.st}
	;

Could we do this?

packageDefinition
	:	'package' identifier SEMI -> identifier
	;

What if we always returned the template for a single element?

type
	:	identifier
	|	builtInType
	;

the template for identifier / builtInType would be autocopied to  
$type.st return value.  I don't like this actually... it's not  
consistent with having multiple elements in a production.  Perhaps

type
	:	identifier -> identifier
	|	builtInType
	;

is "better".  Weird looking though.

Here is a case where I might have just plain foo instead of a.b.c.   
In either case I need to set the return type.  I hate doing ( x ->  
template(...) ) syntax in the middle of a rule.  I want that -> on  
the end!  Here is what I do now:

identifier
	:	(i=IDENT -> qid(id={$i.text}))
		( DOT i=IDENT {$identifier.st.setAttribute("id",$i.text);} )*
	;

Oh, actually we can do this properly even now.  Duh, just queue up  
the IDs.

identifier
	:	ids+=IDENT ( DOT ids+=IDENT )*
                 -> qid(id={toStrings($ids)})
	;

I've posted this to the blog too.

http://www.antlr.org/blog/antlr3/rewrite.tml

Ter
From parrt at cs.usfca.edu  Sat Dec 24 15:56:43 2005
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sat Dec 24 15:58:56 2005
Subject: [stringtemplate-interest] template dependency graphs (DOT/graphviz)
Message-ID: <8961A30A-AC39-4978-A93F-B3CFAA9E6272@cs.usfca.edu>

Howdy,

In order to make it easier for people to build code generators for  
ANTLR v3, I've added a feature to StringTemplate so it knows how to  
give you a DOT diagram showing all the enclosing template  
relationships (with or w/o the attribute list).  I've enclosed the  
graph for the lexer of simplec.g from the example-v3 group.   
(naturally, the graph is a ST so you can set node style attributes  
like width, fontsize, etc...  the joy of ST). :)

This will be generally useful for people building complicated output  
structures with StringTemplate.

For v3 target builders: I've commented out the code in  
CodeGenerator.java that dumps this stuff.  It's line 389 as of when I  
am submitting this and the updated ST.  You don't need to sync new ST  
unless you want to uncomment.

DOT/graphviz kicks butt!

Ter

-------------- next part --------------
A non-text attachment was scrubbed...
Name: STgraph.pdf
Type: application/pdf
Size: 18757 bytes
Desc: not available
Url : http://www.antlr.org:8080/pipermail/stringtemplate-interest/attachments/20051224/92462da0/STgraph.pdf
-------------- next part --------------

From parrt at cs.usfca.edu  Mon Dec 26 16:20:01 2005
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon Dec 26 16:22:05 2005
Subject: [stringtemplate-interest] added new domains
Message-ID: <49ADAEDC-3547-4DCD-95A2-567A0903ED84@cs.usfca.edu>

Howdy, I just added

http://www.parsergenerator.org

and

http://www.templateengine.org

pointing to antlr and stringtemplate sites, respectively.  May draw  
traffic, help validate site content.

Ter
From Andrew.Goodnough at wicourts.gov  Tue Dec 27 08:14:03 2005
From: Andrew.Goodnough at wicourts.gov (Andrew Goodnough)
Date: Tue Dec 27 08:14:23 2005
Subject: [stringtemplate-interest] Bug with if's and superGroups
Message-ID: <43B113EB.954F.0081.0@wicourts.gov>

Skipped content of type multipart/alternative-------------- next part --------------
A non-text attachment was scrubbed...
Name: ProblemWithIfsAndSuperGroups.zip
Type: application/x-zip-compressed
Size: 6280 bytes
Desc: not available
Url : http://www.antlr.org:8080/pipermail/stringtemplate-interest/attachments/20051227/49f1ac54/ProblemWithIfsAndSuperGroups.bin
From parrt at cs.usfca.edu  Tue Dec 27 08:41:12 2005
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue Dec 27 08:41:16 2005
Subject: [stringtemplate-interest] Bug with if's and superGroups
In-Reply-To: <43B113EB.954F.0081.0@wicourts.gov>
References: <43B113EB.954F.0081.0@wicourts.gov>
Message-ID: <6E18329E-122D-45E8-A029-F4A9C82BF65F@cs.usfca.edu>

Hi.  Does this involve polymorphism being broken if you call it  
within an IF?  If so, I have this fixed in 2.3...i can shoot you can  
early copy if you'd like.  I have some really nice extensions in it  
and I'm almost done with "template group interfaces". :)

ter
On Dec 27, 2005, at 8:14 AM, Andrew Goodnough wrote:

> I think I've finally tracked down a problem with if statements when  
> using a super group template.  I've attached a test and three group  
> template files in the zip file.  There's a Readme.txt in the zip  
> also to explain what each of the files are.
>
> A little background on the domain:  The real versions (instead of  
> the stripped-down ones I'm sending) share all the templates in the  
> shared.stg in order to make SQL statements.  Any syntax that is  
> Sybase or Postgres specific goes in the sybase.stg or postgres.stg.
>
> Thanks for taking a look.
>
>
> Andy
> <ProblemWithIfsAndSuperGroups.zip>
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest@antlr.org
> http://www.antlr.org:8080/mailman/listinfo/stringtemplate-interest

From parrt at cs.usfca.edu  Tue Dec 27 08:47:29 2005
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue Dec 27 08:47:32 2005
Subject: [stringtemplate-interest] Bug with if's and superGroups
In-Reply-To: <43B11B34.954F.0081.0@wicourts.gov>
References: <43B113EB.954F.0081.0@wicourts.gov>
	<6E18329E-122D-45E8-A029-F4A9C82BF65F@cs.usfca.edu>
	<43B11B34.954F.0081.0@wicourts.gov>
Message-ID: <78BBFEA9-B432-40A1-A480-D72A430B2692@cs.usfca.edu>


On Dec 27, 2005, at 8:45 AM, Andrew Goodnough wrote:

> Yep, I think it does.  Within the if, it always uses the super  
> group's template, instead of the sub group override with the same  
> name.  I'd like to try out the latest code to see if it fixes it -  
> sounds like it might.  Thanks.

Yep, that is the bug alright. Boy, was THAT a tough bug to find!!!   
Got a unit test and fixed it.  When I get to the office I'll send you  
a tarball.

Ter

From Andrew.Goodnough at wicourts.gov  Tue Dec 27 09:01:45 2005
From: Andrew.Goodnough at wicourts.gov (Andrew Goodnough)
Date: Tue Dec 27 09:01:58 2005
Subject: [stringtemplate-interest] Bug with if's and superGroups
In-Reply-To: <78BBFEA9-B432-40A1-A480-D72A430B2692@cs.usfca.edu>
References: <43B113EB.954F.0081.0@wicourts.gov>
	<6E18329E-122D-45E8-A029-F4A9C82BF65F@cs.usfca.edu>
	<43B11B34.954F.0081.0@wicourts.gov>
	<78BBFEA9-B432-40A1-A480-D72A430B2692@cs.usfca.edu>
Message-ID: <43B11F19.954F.0081.0@wicourts.gov>

Ha!  And I thought just tracking down the bad behavior was tough.
 
Andy

>>> Terence Parr parrt@cs.usfca.edu> 12/27/2005 10:47 am >>

Yep, that is the bug alright. Boy, was THAT a tough bug to find!!!   
Got a unit test and fixed it.  When I get to the office I'll send you 

a tarball.

Ter

_______________________________________________
stringtemplate-interest mailing list
stringtemplate-interest@antlr.org
http://www.antlr.org:8080/mailman/listinfo/stringtemplate-interest
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org:8080/pipermail/stringtemplate-interest/attachments/20051227/89cc1e4d/attachment.html
From parrt at cs.usfca.edu  Tue Dec 27 10:07:06 2005
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue Dec 27 10:09:08 2005
Subject: [stringtemplate-interest] Re: [antlr-interest] added new domains
In-Reply-To: <000001c60ac0$e21dcc00$0100a8c0@rexii>
References: <000001c60ac0$e21dcc00$0100a8c0@rexii>
Message-ID: <4B1DC89E-F8CC-4EB9-A809-27DA6FB26EDD@cs.usfca.edu>


On Dec 27, 2005, at 12:38 AM, Geir Ove Skjaervik wrote:

> Hello,
>
> Merry Christmas to you all, and a Happy New Year.
>
> I have a few questions about the new sites launched: I cannot find  
> links
> to them from the ANTLR main page, why is that? As I have said  
> before, I
> do not think it is a smart move to announce important information like
> this **only** for insiders that read **every** posting to the group!

Hi Geir,

Uh...they are only to get google to rank the sites higher for those  
search terms embedded in the domains.  Nothing more, nothing less.

> And, the WIKI pages that **are** linked from the www.antlr.org do  
> still
> not work.

I only have two hands and both are busy at the moment. ;)

> I am using the site browser found in GetRight to find out what is  
> hidden
> at the ANTLR site, and you may e.g. find:
>
> http://www.placidsystems.com/ where ANTLR Studio is announced. Again I
> cannot find a link to this tool from the main page. I am puzzled by
> this.

Yes, a news link is appropriate.  Thanks.

Ter
From parrt at cs.usfca.edu  Tue Dec 27 12:09:06 2005
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue Dec 27 12:11:07 2005
Subject: [stringtemplate-interest] got super group spec into ST group file
Message-ID: <8B8A6104-6F34-41FD-A1FA-F05328E8392C@cs.usfca.edu>

Howdy,

Just updated ST so you can say

group subG : superG implements anInterface;
...

It uses a StringTemplateGroupLoader interface to find those files.  I  
made a simple CommonGroupLoader that searches from a CLASSPATH-like  
list of dirs.

Interfaces are:

interface ANTLRCore;
lexer(name, tokens, rules, numRules, cyclicDFAs);
parser(name, scopes, tokens, tokenNames, rules, numRules,
	cyclicDFAs, bitsets, ASTLabelType, superClass, labelType);
...

Note that default arg values are not allowed in interfaces.  You can  
also say "optional" on the front of something like

optional headerFile(...);

so that I can specify what something looks like *if* you have it.

I will integrate ST interfaces into ANTLR's code generator soon.

Ter
From Andrew.Goodnough at wicourts.gov  Thu Dec 29 09:04:27 2005
From: Andrew.Goodnough at wicourts.gov (Andrew Goodnough)
Date: Thu Dec 29 09:04:50 2005
Subject: [stringtemplate-interest] Bug fix for direct property reference on
	an object
References: <43B27E9C.954F.0081.0@wicourts.gov>
Message-ID: <43B3C2BA.954F.0081.0@wicourts.gov>

Marq,
 
ST (for Python) was having a problem looking up a property on an object using direct reference (i.e. when there is no getXXX or isXXX method on the object).  The modified code, marked by the arrows, fixes it.  Let me know what you think.  Thanks.
 
Andy
 
=== file: ASTExpr.py (starts at line 178, ends at 195) ==========
         try:
             m = getattr(o, methodName)
         except AttributeError, ae:
                    # try for a visible field
                    try:
*>                        try:
*>                            value = getattr(o, propertyName)
*>                            return value
                        except AttributeError, ae2:
                            this.error('Can\'t get property ' + propertyName +
                                       ' using method get/is' + methodSuffix +
                                       ' or direct field access from ' +
                                       o.__class__.__name__ + ' instance', ae2)
                    except AttributeError, ae:
                        this.error('Can\'t get property ' + propertyName +
                                   ' using method get/is' + methodSuffix +
                                   ' or direct field access from ' +
                                   o.__class__.__name__ + ' instance', ae)
=============================================

>>> Andrew Goodnough 12/28/2005 12:01 pm >>>
Hi, thanks so much for porting ST to Python!  It works great.  Just wondering if you have any idea when version 2.2 will be coming out.  I'm particularly interested in the maps functionality.  I'm *almost* able to use the same Template Group file in Java and Python except for those features that the Java 2.2 version has over the Python 2.1 version.  Anyway, thanks again.
 
Andy

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org:8080/pipermail/stringtemplate-interest/attachments/20051229/91c989e1/attachment.html
From parrt at cs.usfca.edu  Thu Dec 29 12:21:30 2005
From: parrt at cs.usfca.edu (Terence Parr)
Date: Thu Dec 29 12:23:24 2005
Subject: [stringtemplate-interest] Re: [antlr-interest] StringTemplate :
	delimter other than dollar sign?
In-Reply-To: <1135882486.71669@autobase.net>
References: <1135882486.71669@autobase.net>
Message-ID: <2271E58B-6235-43D5-83D2-380DDE3BC574@cs.usfca.edu>


On Dec 29, 2005, at 10:54 AM, pwhitaker@autobase.net wrote:

> I'm using the C# port of StringTemplate. Working this library into  
> a auto sales project, the dollar sign is not a good choice due to  
> frequent currency references. I've noticed the symbol seems to be  
> interwoven in the template code. Has anybody changed this  
> character? Is there an effective way to make sure that I change it  
> in all the right places? I would like to try the pound symbol  
> instead (#).

At least with the Java version you can use <...> if you pass in the  
AngleBracketTemplateLexer.class :)  See the unit tests.

Ter
From luisl at scarab.co.za  Fri Dec 30 08:50:47 2005
From: luisl at scarab.co.za (Luis Leal)
Date: Fri Dec 30 08:51:00 2005
Subject: [stringtemplate-interest] RE: [antlr-interest] StringTemplate :
	delimter other than dollar sign?
In-Reply-To: <000001c60d47$35633110$fc0210ac@abcorp.net>
Message-ID: <MPEMLILMNEOKCPPBGEMKAEFCCJAA.luisl@scarab.co.za>

Hi Paul,

You'd have to create your own copy of angle.bracket.template.g - say
pound.template.g. Replace all references to '<' and '>' with '#' and then
run the grammar through Antlr.

A simpler option would be to escape $ in currency references in your model /
template, i.e. use \$ instead.

Hope that helps.

Regards

Luis

-----Original Message-----
From: Paul Whitaker [mailto:pwhitaker@autobase.net]
Sent: 30 December 2005 03:45 PM
To: luisl@scarab.co.za; antlr-interest@antlr.org
Subject: RE: [antlr-interest] StringTemplate : delimter other than
dollar sign?


Luis,

Thanks for the reply and the tip! I will try that, although it still may not
be effective since I am working within an HTML editor. This gives me hope
that there's potential to change the symbol though. It would appear that I
could create a new Lexer for, say, the pound symbol as a delimiter... Any
tips on getting started with that, before I dive in? I've never worked with
Antlr before this project.

Thanks again!
Paul

-----Original Message-----
From: Luis Leal [mailto:luisl@scarab.co.za]
Sent: Thursday, December 29, 2005 3:36 PM
To: pwhitaker@autobase.net; antlr-interest@antlr.org
Subject: RE: [antlr-interest] StringTemplate : delimter other than dollar
sign?

Hi Paul,

You can use angle brackets instead of dollar signs. Use the following
constructor:

StringTemplateGroup group = new StringTemplateGroup("sqlstuff", "/tmp",
typeof(AngleBracketTemplateLexer));

Regards

Luis

-----Original Message-----
From: pwhitaker@autobase.net [mailto:pwhitaker@autobase.net]
Sent: 29 December 2005 08:55 PM
To: antlr-interest@antlr.org
Subject: [antlr-interest] StringTemplate : delimter other than dollar sign?


I'm using the C# port of StringTemplate. Working this library into a auto
sales project, the dollar sign is not a good choice due to frequent currency
references. I've noticed the symbol seems to be interwoven in the template
code. Has anybody changed this character? Is there an effective way to make
sure that I change it in all the right places? I would like to try the pound
symbol instead (#).

Thanks,
Paul Whitaker




From pwhitaker at autobase.net  Fri Dec 30 12:08:42 2005
From: pwhitaker at autobase.net (Paul Whitaker)
Date: Fri Dec 30 12:10:59 2005
Subject: [stringtemplate-interest] RE: [antlr-interest] StringTemplate C# :
	delimter other than dollar sign?
In-Reply-To: <MPEMLILMNEOKCPPBGEMKAEFCCJAA.luisl@scarab.co.za>
Message-ID: <002d01c60d7c$d8679290$fc0210ac@abcorp.net>

Luis,
 
Thanks again. I copied the default C# template to a new one using the tilde
(the pound symbol and CSS/HTML don't play nicely together) and that seems to
fit my needs. 

In building the generated code using Visual Studio 2005 (not sure if it's
compiler-specific or not), I noticed there is a minor error that prevents
compiling. The _saveIndex redefines a child element around line 956. It's an
easy fix in the generated code (change _saveIndex to _saveIndex1 in the
child case statement), but I'm guessing it's more challenging on the other
side. 

Has this problem come up in the past? I'd be willing to help track it down,
if I could get some general direction on where that's even generated :).

Thanks,
Paul

-----Original Message-----
From: Luis Leal [mailto:luisl@scarab.co.za] 
Sent: Friday, December 30, 2005 11:51 AM
To: Paul Whitaker
Cc: stringtemplate-interest@antlr.org
Subject: RE: [antlr-interest] StringTemplate : delimter other than dollar
sign?

Hi Paul,

You'd have to create your own copy of angle.bracket.template.g - say
pound.template.g. Replace all references to '<' and '>' with '#' and then
run the grammar through Antlr.

A simpler option would be to escape $ in currency references in your model /
template, i.e. use \$ instead.

Hope that helps.

Regards

Luis

-----Original Message-----
From: Paul Whitaker [mailto:pwhitaker@autobase.net]
Sent: 30 December 2005 03:45 PM
To: luisl@scarab.co.za; antlr-interest@antlr.org
Subject: RE: [antlr-interest] StringTemplate : delimter other than dollar
sign?


Luis,

Thanks for the reply and the tip! I will try that, although it still may not
be effective since I am working within an HTML editor. This gives me hope
that there's potential to change the symbol though. It would appear that I
could create a new Lexer for, say, the pound symbol as a delimiter... Any
tips on getting started with that, before I dive in? I've never worked with
Antlr before this project.

Thanks again!
Paul

-----Original Message-----
From: Luis Leal [mailto:luisl@scarab.co.za]
Sent: Thursday, December 29, 2005 3:36 PM
To: pwhitaker@autobase.net; antlr-interest@antlr.org
Subject: RE: [antlr-interest] StringTemplate : delimter other than dollar
sign?

Hi Paul,

You can use angle brackets instead of dollar signs. Use the following
constructor:

StringTemplateGroup group = new StringTemplateGroup("sqlstuff", "/tmp",
typeof(AngleBracketTemplateLexer));

Regards

Luis

-----Original Message-----
From: pwhitaker@autobase.net [mailto:pwhitaker@autobase.net]
Sent: 29 December 2005 08:55 PM
To: antlr-interest@antlr.org
Subject: [antlr-interest] StringTemplate : delimter other than dollar sign?


I'm using the C# port of StringTemplate. Working this library into a auto
sales project, the dollar sign is not a good choice due to frequent currency
references. I've noticed the symbol seems to be interwoven in the template
code. Has anybody changed this character? Is there an effective way to make
sure that I change it in all the right places? I would like to try the pound
symbol instead (#).

Thanks,
Paul Whitaker



