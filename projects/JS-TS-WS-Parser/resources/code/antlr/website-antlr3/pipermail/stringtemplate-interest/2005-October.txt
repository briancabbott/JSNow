From robert.paterson at optusnet.com.au  Sun Oct  2 02:34:10 2005
From: robert.paterson at optusnet.com.au (Robert Paterson)
Date: Sun Oct  2 08:18:05 2005
Subject: [stringtemplate-interest] Issue with Multi-Valued attributes where
	the attribute is a Map Key/Value pair.
Message-ID: <000501c5c734$722d5ed0$0100a8c0@dilbert>

Hi,

I have a problem with a template that uses a Multi-Valued attribute where
the attribute instances are HashMap Key/Value pairs. If I have two or more
HashMap instances the template works fine, but if I only have a single
HashMap instance it tries to iterate through the values of the HashMap. Is
there anyway around this short of creating a proper aggregate object that
has the properties I'm trying to set in the HashMap? (I imagine
StringTemplate is seeing the individual HashMap as a collection).

I have a main template "document.st" as follows:

DOCUMENT {

   CONTENT {

     $Paragraphs:paragraph(); separator="\n\n"$

   }
 
}


And "paragraph.st" as follows:

PARAGRAPH {
  BULLET        "$it.Bullet$"
  INDENT        "$it.Indent$"
  TEXT          "$it.ParagraphText$"
}


And if I use the following code:

    StringTemplateGroup group = new StringTemplateGroup("MyGroup",".");

    // If I set the "Paragraphs" attribute with two HashMap instances it
works.
    StringTemplate docOut = group.getInstanceOf("document");

    HashMap para = new HashMap();
    para.put("Bullet","N");
    para.put("Indent","N");
    para.put("ParagraphText","Now is the time for all good men...");

    docOut.setAttribute("Paragraphs", para);

    para = new HashMap();

    para.put("Bullet","N");
    para.put("Indent","N");
    para.put("ParagraphText","... to come to the aid of their party.");

    docOut.setAttribute("Paragraphs", para);

    System.out.println(docOut.toString());


I get:

DOCUMENT {

   CONTENT {

     PARAGRAPH {
       BULLET        "N"
       INDENT        "N"
       TEXT          "Now is the time for all good men..."
     }

     PARAGRAPH {
       BULLET        "N"
       INDENT        "N"
       TEXT          "... to come to the aid of their party."
     }

   }
 
}

But if I try:


    // But if I only set it with one HashMap instance it fails, and instead
tries to iterate through the values of the HashMap.
    docOut = group.getInstanceOf("document");

    para = new HashMap();
    para.put("Bullet","N");
    para.put("Indent","N");
    para.put("ParagraphText","Now is the time for all good men...");

    docOut.setAttribute("Paragraphs", para);

    System.out.println(docOut.toString());

I get:

Class java.lang.String has no such attribute: Bullet in template context
[document paragraph]
java.lang.NoSuchFieldException: Bullet
	at java.lang.Class.getField(Class.java:1507)
	at
org.antlr.stringtemplate.language.ASTExpr.getObjectProperty(ASTExpr.java:323
)
	at
org.antlr.stringtemplate.language.ActionEvaluator.attribute(ActionEvaluator.
java:348)
	at
org.antlr.stringtemplate.language.ActionEvaluator.expr(ActionEvaluator.java:
135)
	at
org.antlr.stringtemplate.language.ActionEvaluator.action(ActionEvaluator.jav
a:84)
	at org.antlr.stringtemplate.language.ASTExpr.write(ASTExpr.java:93)
	at
org.antlr.stringtemplate.StringTemplate.write(StringTemplate.java:702)
	at org.antlr.stringtemplate.language.ASTExpr.write(ASTExpr.java:480)
	at org.antlr.stringtemplate.language.ASTExpr.write(ASTExpr.java:494)
	at
org.antlr.stringtemplate.language.ASTExpr.writeAttribute(ASTExpr.java:445)
	at
org.antlr.stringtemplate.language.ActionEvaluator.action(ActionEvaluator.jav
a:86)
	at org.antlr.stringtemplate.language.ASTExpr.write(ASTExpr.java:93)
	at
org.antlr.stringtemplate.StringTemplate.write(StringTemplate.java:702)
	at
org.antlr.stringtemplate.StringTemplate.toString(StringTemplate.java:1432)
	at StringTemplateExample.main(StringTemplateExample.java:49)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39
)
	at
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl
.java:25)
	at java.lang.reflect.Method.invoke(Method.java:585)
	at
com.intellij.rt.execution.application.AppMain.main(AppMain.java:78)
Can't get property Bullet using method get/isBullet from java.lang.String
instance
java.lang.NullPointerException
	at
org.antlr.stringtemplate.language.ASTExpr.getObjectProperty(ASTExpr.java:340
)
	at
org.antlr.stringtemplate.language.ActionEvaluator.attribute(ActionEvaluator.
java:348)
	at
org.antlr.stringtemplate.language.ActionEvaluator.expr(ActionEvaluator.java:
135)
	at
org.antlr.stringtemplate.language.ActionEvaluator.action(ActionEvaluator.jav
a:84)
	at org.antlr.stringtemplate.language.ASTExpr.write(ASTExpr.java:93)
	at
org.antlr.stringtemplate.StringTemplate.write(StringTemplate.java:702)
	at org.antlr.stringtemplate.language.ASTExpr.write(ASTExpr.java:480)
	at org.antlr.stringtemplate.language.ASTExpr.write(ASTExpr.java:494)
	at
org.antlr.stringtemplate.language.ASTExpr.writeAttribute(ASTExpr.java:445)
	at
org.antlr.stringtemplate.language.ActionEvaluator.action(ActionEvaluator.jav
a:86)
	at org.antlr.stringtemplate.language.ASTExpr.write(ASTExpr.java:93)
	at
org.antlr.stringtemplate.StringTemplate.write(StringTemplate.java:702)
	at
org.antlr.stringtemplate.StringTemplate.toString(StringTemplate.java:1432)
	at StringTemplateExample.main(StringTemplateExample.java:49)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39
)
	at
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl
.java:25)
	at java.lang.reflect.Method.invoke(Method.java:585)
	at
com.intellij.rt.execution.application.AppMain.main(AppMain.java:78)
Class java.lang.String has no such attribute: Indent in template context
[document paragraph]
java.lang.NoSuchFieldException: Indent
	at java.lang.Class.getField(Class.java:1507)
	at
org.antlr.stringtemplate.language.ASTExpr.getObjectProperty(ASTExpr.java:323
)
	at
org.antlr.stringtemplate.language.ActionEvaluator.attribute(ActionEvaluator.
java:348)
	at
org.antlr.stringtemplate.language.ActionEvaluator.expr(ActionEvaluator.java:
135)
	at
org.antlr.stringtemplate.language.ActionEvaluator.action(ActionEvaluator.jav
a:84)
	at org.antlr.stringtemplate.language.ASTExpr.write(ASTExpr.java:93)
	at
org.antlr.stringtemplate.StringTemplate.write(StringTemplate.java:702)
	at org.antlr.stringtemplate.language.ASTExpr.write(ASTExpr.java:480)
	at org.antlr.stringtemplate.language.ASTExpr.write(ASTExpr.java:494)
	at
org.antlr.stringtemplate.language.ASTExpr.writeAttribute(ASTExpr.java:445)
	at
org.antlr.stringtemplate.language.ActionEvaluator.action(ActionEvaluator.jav
a:86)
	at org.antlr.stringtemplate.language.ASTExpr.write(ASTExpr.java:93)
	at
org.antlr.stringtemplate.StringTemplate.write(StringTemplate.java:702)
	at
org.antlr.stringtemplate.StringTemplate.toString(StringTemplate.java:1432)
	at StringTemplateExample.main(StringTemplateExample.java:49)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39
)
	at
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl
.java:25)
	at java.lang.reflect.Method.invoke(Method.java:585)
	at
com.intellij.rt.execution.application.AppMain.main(AppMain.java:78)
Can't get property Indent using method get/isIndent from java.lang.String
instance
java.lang.NullPointerException
	at
org.antlr.stringtemplate.language.ASTExpr.getObjectProperty(ASTExpr.java:340
)
	at
org.antlr.stringtemplate.language.ActionEvaluator.attribute(ActionEvaluator.
java:348)
	at
org.antlr.stringtemplate.language.ActionEvaluator.expr(ActionEvaluator.java:
135)
	at
org.antlr.stringtemplate.language.ActionEvaluator.action(ActionEvaluator.jav
a:84)
	at org.antlr.stringtemplate.language.ASTExpr.write(ASTExpr.java:93)
	at
org.antlr.stringtemplate.StringTemplate.write(StringTemplate.java:702)
	at org.antlr.stringtemplate.language.ASTExpr.write(ASTExpr.java:480)
	at org.antlr.stringtemplate.language.ASTExpr.write(ASTExpr.java:494)
	at
org.antlr.stringtemplate.language.ASTExpr.writeAttribute(ASTExpr.java:445)
	at
org.antlr.stringtemplate.language.ActionEvaluator.action(ActionEvaluator.jav
a:86)
	at org.antlr.stringtemplate.language.ASTExpr.write(ASTExpr.java:93)
	at
org.antlr.stringtemplate.StringTemplate.write(StringTemplate.java:702)
	at
org.antlr.stringtemplate.StringTemplate.toString(StringTemplate.java:1432)
	at StringTemplateExample.main(StringTemplateExample.java:49)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39
)
	at
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl
.java:25)
	at java.lang.reflect.Method.invoke(Method.java:585)
	at
com.intellij.rt.execution.application.AppMain.main(AppMain.java:78)
Class java.lang.String has no such attribute: ParagraphText in template
context [document paragraph]
java.lang.NoSuchFieldException: ParagraphText
	at java.lang.Class.getField(Class.java:1507)
	at
org.antlr.stringtemplate.language.ASTExpr.getObjectProperty(ASTExpr.java:323
)
	at
org.antlr.stringtemplate.language.ActionEvaluator.attribute(ActionEvaluator.
java:348)
	at
org.antlr.stringtemplate.language.ActionEvaluator.expr(ActionEvaluator.java:
135)
	at
org.antlr.stringtemplate.language.ActionEvaluator.action(ActionEvaluator.jav
a:84)
	at org.antlr.stringtemplate.language.ASTExpr.write(ASTExpr.java:93)
	at
org.antlr.stringtemplate.StringTemplate.write(StringTemplate.java:702)
	at org.antlr.stringtemplate.language.ASTExpr.write(ASTExpr.java:480)
	at org.antlr.stringtemplate.language.ASTExpr.write(ASTExpr.java:494)
	at
org.antlr.stringtemplate.language.ASTExpr.writeAttribute(ASTExpr.java:445)
	at
org.antlr.stringtemplate.language.ActionEvaluator.action(ActionEvaluator.jav
a:86)
	at org.antlr.stringtemplate.language.ASTExpr.write(ASTExpr.java:93)
	at
org.antlr.stringtemplate.StringTemplate.write(StringTemplate.java:702)
	at
org.antlr.stringtemplate.StringTemplate.toString(StringTemplate.java:1432)
	at StringTemplateExample.main(StringTemplateExample.java:49)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39
)
	at
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl
.java:25)
	at java.lang.reflect.Method.invoke(Method.java:585)
	at
com.intellij.rt.execution.application.AppMain.main(AppMain.java:78)
Can't get property ParagraphText using method get/isParagraphText from
java.lang.String instance
java.lang.NullPointerException
	at
org.antlr.stringtemplate.language.ASTExpr.getObjectProperty(ASTExpr.java:340
)
	at
org.antlr.stringtemplate.language.ActionEvaluator.attribute(ActionEvaluator.
java:348)
	at
org.antlr.stringtemplate.language.ActionEvaluator.expr(ActionEvaluator.java:
135)
	at
org.antlr.stringtemplate.language.ActionEvaluator.action(ActionEvaluator.jav
a:84)
	at org.antlr.stringtemplate.language.ASTExpr.write(ASTExpr.java:93)
	at
org.antlr.stringtemplate.StringTemplate.write(StringTemplate.java:702)
	at org.antlr.stringtemplate.language.ASTExpr.write(ASTExpr.java:480)
	at org.antlr.stringtemplate.language.ASTExpr.write(ASTExpr.java:494)
	at
org.antlr.stringtemplate.language.ASTExpr.writeAttribute(ASTExpr.java:445)
	at
org.antlr.stringtemplate.language.ActionEvaluator.action(ActionEvaluator.jav
a:86)
	at org.antlr.stringtemplate.language.ASTExpr.write(ASTExpr.java:93)
	at
org.antlr.stringtemplate.StringTemplate.write(StringTemplate.java:702)
	at
org.antlr.stringtemplate.StringTemplate.toString(StringTemplate.java:1432)
	at StringTemplateExample.main(StringTemplateExample.java:49)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39
)
	at
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl
.java:25)
	at java.lang.reflect.Method.invoke(Method.java:585)
	at
com.intellij.rt.execution.application.AppMain.main(AppMain.java:78)
Class java.lang.String has no such attribute: Bullet in template context
[document paragraph]
java.lang.NoSuchFieldException: Bullet
	at java.lang.Class.getField(Class.java:1507)
	at
org.antlr.stringtemplate.language.ASTExpr.getObjectProperty(ASTExpr.java:323
)
	at
org.antlr.stringtemplate.language.ActionEvaluator.attribute(ActionEvaluator.
java:348)
	at
org.antlr.stringtemplate.language.ActionEvaluator.expr(ActionEvaluator.java:
135)
	at
org.antlr.stringtemplate.language.ActionEvaluator.action(ActionEvaluator.jav
a:84)
	at org.antlr.stringtemplate.language.ASTExpr.write(ASTExpr.java:93)
	at
org.antlr.stringtemplate.StringTemplate.write(StringTemplate.java:702)
	at org.antlr.stringtemplate.language.ASTExpr.write(ASTExpr.java:480)
	at org.antlr.stringtemplate.language.ASTExpr.write(ASTExpr.java:494)
	at
org.antlr.stringtemplate.language.ASTExpr.writeAttribute(ASTExpr.java:445)
	at
org.antlr.stringtemplate.language.ActionEvaluator.action(ActionEvaluator.jav
a:86)
	at org.antlr.stringtemplate.language.ASTExpr.write(ASTExpr.java:93)
	at
org.antlr.stringtemplate.StringTemplate.write(StringTemplate.java:702)
	at
org.antlr.stringtemplate.StringTemplate.toString(StringTemplate.java:1432)
	at StringTemplateExample.main(StringTemplateExample.java:49)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39
)
	at
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl
.java:25)
	at java.lang.reflect.Method.invoke(Method.java:585)
	at
com.intellij.rt.execution.application.AppMain.main(AppMain.java:78)
Can't get property Bullet using method get/isBullet from java.lang.String
instance
java.lang.NullPointerException
	at
org.antlr.stringtemplate.language.ASTExpr.getObjectProperty(ASTExpr.java:340
)
	at
org.antlr.stringtemplate.language.ActionEvaluator.attribute(ActionEvaluator.
java:348)
	at
org.antlr.stringtemplate.language.ActionEvaluator.expr(ActionEvaluator.java:
135)
	at
org.antlr.stringtemplate.language.ActionEvaluator.action(ActionEvaluator.jav
a:84)
	at org.antlr.stringtemplate.language.ASTExpr.write(ASTExpr.java:93)
	at
org.antlr.stringtemplate.StringTemplate.write(StringTemplate.java:702)
	at org.antlr.stringtemplate.language.ASTExpr.write(ASTExpr.java:480)
	at org.antlr.stringtemplate.language.ASTExpr.write(ASTExpr.java:494)
	at
org.antlr.stringtemplate.language.ASTExpr.writeAttribute(ASTExpr.java:445)
	at
org.antlr.stringtemplate.language.ActionEvaluator.action(ActionEvaluator.jav
a:86)
	at org.antlr.stringtemplate.language.ASTExpr.write(ASTExpr.java:93)
	at
org.antlr.stringtemplate.StringTemplate.write(StringTemplate.java:702)
	at
org.antlr.stringtemplate.StringTemplate.toString(StringTemplate.java:1432)
	at StringTemplateExample.main(StringTemplateExample.java:49)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39
)
	at
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl
.java:25)
	at java.lang.reflect.Method.invoke(Method.java:585)
	at
com.intellij.rt.execution.application.AppMain.main(AppMain.java:78)
Class java.lang.String has no such attribute: Indent in template context
[document paragraph]
java.lang.NoSuchFieldException: Indent
	at java.lang.Class.getField(Class.java:1507)
	at
org.antlr.stringtemplate.language.ASTExpr.getObjectProperty(ASTExpr.java:323
)
	at
org.antlr.stringtemplate.language.ActionEvaluator.attribute(ActionEvaluator.
java:348)
	at
org.antlr.stringtemplate.language.ActionEvaluator.expr(ActionEvaluator.java:
135)
	at
org.antlr.stringtemplate.language.ActionEvaluator.action(ActionEvaluator.jav
a:84)
	at org.antlr.stringtemplate.language.ASTExpr.write(ASTExpr.java:93)
	at
org.antlr.stringtemplate.StringTemplate.write(StringTemplate.java:702)
	at org.antlr.stringtemplate.language.ASTExpr.write(ASTExpr.java:480)
	at org.antlr.stringtemplate.language.ASTExpr.write(ASTExpr.java:494)
	at
org.antlr.stringtemplate.language.ASTExpr.writeAttribute(ASTExpr.java:445)
	at
org.antlr.stringtemplate.language.ActionEvaluator.action(ActionEvaluator.jav
a:86)
	at org.antlr.stringtemplate.language.ASTExpr.write(ASTExpr.java:93)
	at
org.antlr.stringtemplate.StringTemplate.write(StringTemplate.java:702)
	at
org.antlr.stringtemplate.StringTemplate.toString(StringTemplate.java:1432)
	at StringTemplateExample.main(StringTemplateExample.java:49)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39
)
	at
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl
.java:25)
	at java.lang.reflect.Method.invoke(Method.java:585)
	at
com.intellij.rt.execution.application.AppMain.main(AppMain.java:78)
Can't get property Indent using method get/isIndent from java.lang.String
instance
java.lang.NullPointerException
	at
org.antlr.stringtemplate.language.ASTExpr.getObjectProperty(ASTExpr.java:340
)
	at
org.antlr.stringtemplate.language.ActionEvaluator.attribute(ActionEvaluator.
java:348)
	at
org.antlr.stringtemplate.language.ActionEvaluator.expr(ActionEvaluator.java:
135)
	at
org.antlr.stringtemplate.language.ActionEvaluator.action(ActionEvaluator.jav
a:84)
	at org.antlr.stringtemplate.language.ASTExpr.write(ASTExpr.java:93)
	at
org.antlr.stringtemplate.StringTemplate.write(StringTemplate.java:702)
	at org.antlr.stringtemplate.language.ASTExpr.write(ASTExpr.java:480)
	at org.antlr.stringtemplate.language.ASTExpr.write(ASTExpr.java:494)
	at
org.antlr.stringtemplate.language.ASTExpr.writeAttribute(ASTExpr.java:445)
	at
org.antlr.stringtemplate.language.ActionEvaluator.action(ActionEvaluator.jav
a:86)
	at org.antlr.stringtemplate.language.ASTExpr.write(ASTExpr.java:93)
	at
org.antlr.stringtemplate.StringTemplate.write(StringTemplate.java:702)
	at
org.antlr.stringtemplate.StringTemplate.toString(StringTemplate.java:1432)
	at StringTemplateExample.main(StringTemplateExample.java:49)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39
)
	at
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl
.java:25)
	at java.lang.reflect.Method.invoke(Method.java:585)
	at
com.intellij.rt.execution.application.AppMain.main(AppMain.java:78)
Class java.lang.String has no such attribute: ParagraphText in template
context [document paragraph]
java.lang.NoSuchFieldException: ParagraphText
	at java.lang.Class.getField(Class.java:1507)
	at
org.antlr.stringtemplate.language.ASTExpr.getObjectProperty(ASTExpr.java:323
)
	at
org.antlr.stringtemplate.language.ActionEvaluator.attribute(ActionEvaluator.
java:348)
	at
org.antlr.stringtemplate.language.ActionEvaluator.expr(ActionEvaluator.java:
135)
	at
org.antlr.stringtemplate.language.ActionEvaluator.action(ActionEvaluator.jav
a:84)
	at org.antlr.stringtemplate.language.ASTExpr.write(ASTExpr.java:93)
	at
org.antlr.stringtemplate.StringTemplate.write(StringTemplate.java:702)
	at org.antlr.stringtemplate.language.ASTExpr.write(ASTExpr.java:480)
	at org.antlr.stringtemplate.language.ASTExpr.write(ASTExpr.java:494)
	at
org.antlr.stringtemplate.language.ASTExpr.writeAttribute(ASTExpr.java:445)
	at
org.antlr.stringtemplate.language.ActionEvaluator.action(ActionEvaluator.jav
a:86)
	at org.antlr.stringtemplate.language.ASTExpr.write(ASTExpr.java:93)
	at
org.antlr.stringtemplate.StringTemplate.write(StringTemplate.java:702)
	at
org.antlr.stringtemplate.StringTemplate.toString(StringTemplate.java:1432)
	at StringTemplateExample.main(StringTemplateExample.java:49)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39
)
	at
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl
.java:25)
	at java.lang.reflect.Method.invoke(Method.java:585)
	at
com.intellij.rt.execution.application.AppMain.main(AppMain.java:78)
Can't get property ParagraphText using method get/isParagraphText from
java.lang.String instance
java.lang.NullPointerException
	at
org.antlr.stringtemplate.language.ASTExpr.getObjectProperty(ASTExpr.java:340
)
	at
org.antlr.stringtemplate.language.ActionEvaluator.attribute(ActionEvaluator.
java:348)
	at
org.antlr.stringtemplate.language.ActionEvaluator.expr(ActionEvaluator.java:
135)
	at
org.antlr.stringtemplate.language.ActionEvaluator.action(ActionEvaluator.jav
a:84)
	at org.antlr.stringtemplate.language.ASTExpr.write(ASTExpr.java:93)
	at
org.antlr.stringtemplate.StringTemplate.write(StringTemplate.java:702)
	at org.antlr.stringtemplate.language.ASTExpr.write(ASTExpr.java:480)
	at org.antlr.stringtemplate.language.ASTExpr.write(ASTExpr.java:494)
	at
org.antlr.stringtemplate.language.ASTExpr.writeAttribute(ASTExpr.java:445)
	at
org.antlr.stringtemplate.language.ActionEvaluator.action(ActionEvaluator.jav
a:86)
	at org.antlr.stringtemplate.language.ASTExpr.write(ASTExpr.java:93)
	at
org.antlr.stringtemplate.StringTemplate.write(StringTemplate.java:702)
	at
org.antlr.stringtemplate.StringTemplate.toString(StringTemplate.java:1432)
	at StringTemplateExample.main(StringTemplateExample.java:49)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39
)
	at
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl
.java:25)
	at java.lang.reflect.Method.invoke(Method.java:585)
	at
com.intellij.rt.execution.application.AppMain.main(AppMain.java:78)
Class java.lang.String has no such attribute: Bullet in template context
[document paragraph]
java.lang.NoSuchFieldException: Bullet
	at java.lang.Class.getField(Class.java:1507)
	at
org.antlr.stringtemplate.language.ASTExpr.getObjectProperty(ASTExpr.java:323
)
	at
org.antlr.stringtemplate.language.ActionEvaluator.attribute(ActionEvaluator.
java:348)
	at
org.antlr.stringtemplate.language.ActionEvaluator.expr(ActionEvaluator.java:
135)
	at
org.antlr.stringtemplate.language.ActionEvaluator.action(ActionEvaluator.jav
a:84)
	at org.antlr.stringtemplate.language.ASTExpr.write(ASTExpr.java:93)
	at
org.antlr.stringtemplate.StringTemplate.write(StringTemplate.java:702)
	at org.antlr.stringtemplate.language.ASTExpr.write(ASTExpr.java:480)
	at org.antlr.stringtemplate.language.ASTExpr.write(ASTExpr.java:494)
	at
org.antlr.stringtemplate.language.ASTExpr.writeAttribute(ASTExpr.java:445)
	at
org.antlr.stringtemplate.language.ActionEvaluator.action(ActionEvaluator.jav
a:86)
	at org.antlr.stringtemplate.language.ASTExpr.write(ASTExpr.java:93)
	at
org.antlr.stringtemplate.StringTemplate.write(StringTemplate.java:702)
	at
org.antlr.stringtemplate.StringTemplate.toString(StringTemplate.java:1432)
	at StringTemplateExample.main(StringTemplateExample.java:49)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39
)
	at
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl
.java:25)
	at java.lang.reflect.Method.invoke(Method.java:585)
	at
com.intellij.rt.execution.application.AppMain.main(AppMain.java:78)
Can't get property Bullet using method get/isBullet from java.lang.String
instance
java.lang.NullPointerException
	at
org.antlr.stringtemplate.language.ASTExpr.getObjectProperty(ASTExpr.java:340
)
	at
org.antlr.stringtemplate.language.ActionEvaluator.attribute(ActionEvaluator.
java:348)
	at
org.antlr.stringtemplate.language.ActionEvaluator.expr(ActionEvaluator.java:
135)
	at
org.antlr.stringtemplate.language.ActionEvaluator.action(ActionEvaluator.jav
a:84)
	at org.antlr.stringtemplate.language.ASTExpr.write(ASTExpr.java:93)
	at
org.antlr.stringtemplate.StringTemplate.write(StringTemplate.java:702)
	at org.antlr.stringtemplate.language.ASTExpr.write(ASTExpr.java:480)
	at org.antlr.stringtemplate.language.ASTExpr.write(ASTExpr.java:494)
	at
org.antlr.stringtemplate.language.ASTExpr.writeAttribute(ASTExpr.java:445)
	at
org.antlr.stringtemplate.language.ActionEvaluator.action(ActionEvaluator.jav
a:86)
	at org.antlr.stringtemplate.language.ASTExpr.write(ASTExpr.java:93)
	at
org.antlr.stringtemplate.StringTemplate.write(StringTemplate.java:702)
	at
org.antlr.stringtemplate.StringTemplate.toString(StringTemplate.java:1432)
	at StringTemplateExample.main(StringTemplateExample.java:49)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39
)
	at
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl
.java:25)
	at java.lang.reflect.Method.invoke(Method.java:585)
	at
com.intellij.rt.execution.application.AppMain.main(AppMain.java:78)
Class java.lang.String has no such attribute: Indent in template context
[document paragraph]
java.lang.NoSuchFieldException: Indent
	at java.lang.Class.getField(Class.java:1507)
	at
org.antlr.stringtemplate.language.ASTExpr.getObjectProperty(ASTExpr.java:323
)
	at
org.antlr.stringtemplate.language.ActionEvaluator.attribute(ActionEvaluator.
java:348)
	at
org.antlr.stringtemplate.language.ActionEvaluator.expr(ActionEvaluator.java:
135)
	at
org.antlr.stringtemplate.language.ActionEvaluator.action(ActionEvaluator.jav
a:84)
	at org.antlr.stringtemplate.language.ASTExpr.write(ASTExpr.java:93)
	at
org.antlr.stringtemplate.StringTemplate.write(StringTemplate.java:702)
	at org.antlr.stringtemplate.language.ASTExpr.write(ASTExpr.java:480)
	at org.antlr.stringtemplate.language.ASTExpr.write(ASTExpr.java:494)
	at
org.antlr.stringtemplate.language.ASTExpr.writeAttribute(ASTExpr.java:445)
	at
org.antlr.stringtemplate.language.ActionEvaluator.action(ActionEvaluator.jav
a:86)
	at org.antlr.stringtemplate.language.ASTExpr.write(ASTExpr.java:93)
	at
org.antlr.stringtemplate.StringTemplate.write(StringTemplate.java:702)
	at
org.antlr.stringtemplate.StringTemplate.toString(StringTemplate.java:1432)
	at StringTemplateExample.main(StringTemplateExample.java:49)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39
)
	at
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl
.java:25)
	at java.lang.reflect.Method.invoke(Method.java:585)
	at
com.intellij.rt.execution.application.AppMain.main(AppMain.java:78)
Can't get property Indent using method get/isIndent from java.lang.String
instance
java.lang.NullPointerException
	at
org.antlr.stringtemplate.language.ASTExpr.getObjectProperty(ASTExpr.java:340
)
	at
org.antlr.stringtemplate.language.ActionEvaluator.attribute(ActionEvaluator.
java:348)
	at
org.antlr.stringtemplate.language.ActionEvaluator.expr(ActionEvaluator.java:
135)
	at
org.antlr.stringtemplate.language.ActionEvaluator.action(ActionEvaluator.jav
a:84)
	at org.antlr.stringtemplate.language.ASTExpr.write(ASTExpr.java:93)
	at
org.antlr.stringtemplate.StringTemplate.write(StringTemplate.java:702)
	at org.antlr.stringtemplate.language.ASTExpr.write(ASTExpr.java:480)
	at org.antlr.stringtemplate.language.ASTExpr.write(ASTExpr.java:494)
	at
org.antlr.stringtemplate.language.ASTExpr.writeAttribute(ASTExpr.java:445)
	at
org.antlr.stringtemplate.language.ActionEvaluator.action(ActionEvaluator.jav
a:86)
	at org.antlr.stringtemplate.language.ASTExpr.write(ASTExpr.java:93)
	at
org.antlr.stringtemplate.StringTemplate.write(StringTemplate.java:702)
	at
org.antlr.stringtemplate.StringTemplate.toString(StringTemplate.java:1432)
	at StringTemplateExample.main(StringTemplateExample.java:49)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39
)
	at
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl
.java:25)
	at java.lang.reflect.Method.invoke(Method.java:585)
	at
com.intellij.rt.execution.application.AppMain.main(AppMain.java:78)
Class java.lang.String has no such attribute: ParagraphText in template
context [document paragraph]
java.lang.NoSuchFieldException: ParagraphText
	at java.lang.Class.getField(Class.java:1507)
	at
org.antlr.stringtemplate.language.ASTExpr.getObjectProperty(ASTExpr.java:323
)
	at
org.antlr.stringtemplate.language.ActionEvaluator.attribute(ActionEvaluator.
java:348)
	at
org.antlr.stringtemplate.language.ActionEvaluator.expr(ActionEvaluator.java:
135)
	at
org.antlr.stringtemplate.language.ActionEvaluator.action(ActionEvaluator.jav
a:84)
	at org.antlr.stringtemplate.language.ASTExpr.write(ASTExpr.java:93)
	at
org.antlr.stringtemplate.StringTemplate.write(StringTemplate.java:702)
	at org.antlr.stringtemplate.language.ASTExpr.write(ASTExpr.java:480)
	at org.antlr.stringtemplate.language.ASTExpr.write(ASTExpr.java:494)
	at
org.antlr.stringtemplate.language.ASTExpr.writeAttribute(ASTExpr.java:445)
	at
org.antlr.stringtemplate.language.ActionEvaluator.action(ActionEvaluator.jav
a:86)
	at org.antlr.stringtemplate.language.ASTExpr.write(ASTExpr.java:93)
	at
org.antlr.stringtemplate.StringTemplate.write(StringTemplate.java:702)
	at
org.antlr.stringtemplate.StringTemplate.toString(StringTemplate.java:1432)
	at StringTemplateExample.main(StringTemplateExample.java:49)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39
)
	at
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl
.java:25)
	at java.lang.reflect.Method.invoke(Method.java:585)
	at
com.intellij.rt.execution.application.AppMain.main(AppMain.java:78)
Can't get property ParagraphText using method get/isParagraphText from
java.lang.String instance
java.lang.NullPointerException
	at
org.antlr.stringtemplate.language.ASTExpr.getObjectProperty(ASTExpr.java:340
)
	at
org.antlr.stringtemplate.language.ActionEvaluator.attribute(ActionEvaluator.
java:348)
	at
org.antlr.stringtemplate.language.ActionEvaluator.expr(ActionEvaluator.java:
135)
	at
org.antlr.stringtemplate.language.ActionEvaluator.action(ActionEvaluator.jav
a:84)
	at org.antlr.stringtemplate.language.ASTExpr.write(ASTExpr.java:93)
	at
org.antlr.stringtemplate.StringTemplate.write(StringTemplate.java:702)
	at org.antlr.stringtemplate.language.ASTExpr.write(ASTExpr.java:480)
	at org.antlr.stringtemplate.language.ASTExpr.write(ASTExpr.java:494)
	at
org.antlr.stringtemplate.language.ASTExpr.writeAttribute(ASTExpr.java:445)
	at
org.antlr.stringtemplate.language.ActionEvaluator.action(ActionEvaluator.jav
a:86)
	at org.antlr.stringtemplate.language.ASTExpr.write(ASTExpr.java:93)
	at
org.antlr.stringtemplate.StringTemplate.write(StringTemplate.java:702)
	at
org.antlr.stringtemplate.StringTemplate.toString(StringTemplate.java:1432)
	at StringTemplateExample.main(StringTemplateExample.java:49)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39
)
	at
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl
.java:25)
	at java.lang.reflect.Method.invoke(Method.java:585)
	at
com.intellij.rt.execution.application.AppMain.main(AppMain.java:78)
DOCUMENT {

   CONTENT {

     PARAGRAPH {
       BULLET        ""
       INDENT        ""
       TEXT          ""
     }

     PARAGRAPH {
       BULLET        ""
       INDENT        ""
       TEXT          ""
     }

     PARAGRAPH {
       BULLET        ""
       INDENT        ""
       TEXT          ""
     }

   }
 
}



Any help appreciated, but I'll happily write my own proper aggregate object
to get around this issue.

Regards,

Rob Paterson
-------------- next part --------------
A non-text attachment was scrubbed...
Name: StringTemplateExample.java
Type: text/java
Size: 1472 bytes
Desc: not available
Url : http://www.antlr.org:8080/pipermail/stringtemplate-interest/attachments/20051002/2e82dfee/StringTemplateExample-0001.bin
-------------- next part --------------
A non-text attachment was scrubbed...
Name: document.st
Type: application/octet-stream
Size: 83 bytes
Desc: not available
Url : http://www.antlr.org:8080/pipermail/stringtemplate-interest/attachments/20051002/2e82dfee/document-0001.obj
-------------- next part --------------
A non-text attachment was scrubbed...
Name: paragraph.st
Type: application/octet-stream
Size: 111 bytes
Desc: not available
Url : http://www.antlr.org:8080/pipermail/stringtemplate-interest/attachments/20051002/2e82dfee/paragraph-0001.obj
From parrt at cs.usfca.edu  Sun Oct  2 21:54:02 2005
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sun Oct  2 21:54:07 2005
Subject: [stringtemplate-interest] Issue with Multi-Valued attributes
	where the attribute is a Map Key/Value pair.
References: <DCCE84A9-69FA-43CB-9405-9C9700F79BD1@cs.usfca.edu>
Message-ID: <6E2AEFA8-87D5-4818-BAB8-8F5C1ED45EFB@cs.usfca.edu>

Hi Rob,

I suggest wrapping in an aggregate object like you suggest.  Here's  
the easy way:

   docOut.setAttribute("Paragraphs.{map}", para);

That should work for multiple maps also.  You just have to modify  
your template to say

      $Paragraphs:{p | p.map:paragraph()}; separator="\n\n"$

or modify your paragraph.st to use $it.map.Bullet$ etc...

Ter




From parrt at cs.usfca.edu  Mon Oct  3 09:56:45 2005
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon Oct  3 09:56:51 2005
Subject: [stringtemplate-interest] Issue with Multi-Valued attributes
	where the attribute is a Map Key/Value pair.
In-Reply-To: <000d01c5c814$38680750$0100a8c0@dilbert>
References: <000d01c5c814$38680750$0100a8c0@dilbert>
Message-ID: <C6FA27FE-7A82-4356-8AFC-90E3A7FF12C4@cs.usfca.edu>


On Oct 3, 2005, at 5:15 AM, Robert Paterson wrote:

> Ter,
>
> Thanks for this. I thought it looked great when I first read it,  
> but...
>
> It doesn't seem to be finding any Paragraphs attributes to iterate  
> through
> now.

Code looks good.  Did you change the templates accordingly so they  
use $it.map$?

Ter
>
> I've adjusted the code:
>
> public class StringTemplateExample {
>
>   public static void main(String[] args) {
>     StringTemplateGroup group = new StringTemplateGroup 
> ("MyGroup",".");
>
>     // If I set the "Paragraphs" attribute with two HashMap  
> instances it
> works.
>     StringTemplate docOut = group.getInstanceOf("document");
>
>     HashMap para = new HashMap();
>     para.put("Bullet","N");
>     para.put("Indent","N");
>     para.put("ParagraphText","Now is the time for all good men...");
>
>     docOut.setAttribute("Paragraphs.{map}", para);
>
>     para = new HashMap();
>
>     para.put("Bullet","N");
>     para.put("Indent","N");
>     para.put("ParagraphText","... to come to the aid of their  
> party.");
>
>     docOut.setAttribute("Paragraphs.{map}", para);
>
>     System.out.println(docOut.toString());
>
>     // But if I only set it with one HashMap instance it fails, and  
> instead
> tries to iterate through the values of the HashMap.
>     docOut = group.getInstanceOf("document");
>
>     para = new HashMap();
>     para.put("Bullet","N");
>     para.put("Indent","N");
>     para.put("ParagraphText","Now is the time for all good men...");
>
>     docOut.setAttribute("Paragraphs.{map}", para);
>
>     System.out.println(docOut.toString());
>
>   }
> }
>
>
>
>
> But this just gives me:
>
>
> DOCUMENT {
>
>    CONTENT {
>
>
>    }
>
> }
> DOCUMENT {
>
>    CONTENT {
>
>
>    }
>
> }
>
>
>
> The Paragraphs attribute set seems to be empty. Any ideas? I forgot to
> mention before, I'm using StringTemplate 2.2b4.
>
> Regards,
>
> Rob Paterson
>
>
> -----Original Message-----
> From: Terence Parr [mailto:parrt@cs.usfca.edu]
> Sent: Sunday, 2 October 2005 11:54 PM
> To: Robert Paterson
> Subject: Re: [stringtemplate-interest] Issue with Multi-Valued  
> attributes
> where the attribute is a Map Key/Value pair.
>
>
> Hi Rob,
>
> I suggest wrapping in an aggregate object like you suggest.  Here's
> the easy way:
>
>    docOut.setAttribute("Paragraphs.{map}", para);
>
> That should work for multiple maps also.  You just have to modify
> your template to say
>
>       $Paragraphs:{p | p.map:paragraph()}; separator="\n\n"$
>
> or modify your paragraph.st to use $it.map.Bullet$ etc...
>
> Ter
>
>
>

From parrt at cs.usfca.edu  Thu Oct  6 16:36:17 2005
From: parrt at cs.usfca.edu (Terence Parr)
Date: Thu Oct  6 16:36:26 2005
Subject: [stringtemplate-interest] ANTLR2005 agenda posted
Message-ID: <B359E9E2-8E1F-4AEE-8C47-4CECAA486603@cs.usfca.edu>

Hi everyone,

I have finished the initial topics list for the workshop; there are a  
few more talks but I'm waiting to confirm they are able to make it.

http://www.cs.usfca.edu/ANTLR2005.shtml

We have only a few spots left so register now if you want to come.   
Just 2 weeks left til the workshop!

3 lucky attendees will receive free Intellij IDE licenses ($500  
value) plus we're doing nice polo shirts with embroidered letters.   
Other swag as well.  Thursday night dinner and some other goodies  
will be provided.  Wireless will be available in the room.

Thanks to BEA Systems for hosting the workshop and for pitching in  
some cash!

Best regards,
Terence
From VAUCHER at fermat.fr  Wed Oct 12 06:52:39 2005
From: VAUCHER at fermat.fr (VAUCHER Laurent)
Date: Wed Oct 12 06:52:21 2005
Subject: [stringtemplate-interest] Strange tail-recursive behaviour
Message-ID: <55DDB08CC9CD2941A70E8D626789A2C97F3F6E@ec8l7ljvo9h5dde.hosting.exch>

  Hi,

  I'm currently trying StringTemplate (v2.2 downloaded yesterday oct 11)
and trying a kind of tail-recursive template, I stumbled upon the
following behaviour.

  I have a template group file that reads :
--- "mytest/main.stg" ----------------------
group main;

/* Root template  */
root(place) ::= <<

<namestail(place)>

>>

/* Tail template  */
namestail(x) ::= <<

<if(x)>
++++
TRUE:<x>
TRUE:<x>
first(PLACE)=<first(x)>
rest(PLACE)=<rest(x)>
TAIL CALL:
<namestail(x=rest(x))>
<else>
-----
FALSE:<x>
<endif>

>>
---------------------------------------------



  and a simple driver class




----- "Main.java" ---------------------------
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.text.SimpleDateFormat;
import java.util.Date;

import org.antlr.stringtemplate.StringTemplate;
import org.antlr.stringtemplate.StringTemplateGroup;
import org.antlr.stringtemplate.language.AngleBracketTemplateLexer;

public class Main {

  /**
   * @param args
   */
  public static void main(String[] args) {
    System.out.println(new SimpleDateFormat().format(new Date()));

    try {
      FileReader reader = new FileReader("src/mytest/main.stg");
      StringTemplateGroup stg = new StringTemplateGroup(reader,
          AngleBracketTemplateLexer.class);
  
      StringTemplate firstST = stg.getInstanceOf("root");
      firstST.setAttribute("place", "A");
      firstST.setAttribute("place", "B");
  
      System.out.println("Generated [" + firstST.toString() + "]");
    } catch (FileNotFoundException eFNFE) {
      eFNFE.printStackTrace(System.err);
    }
  }
}
--------------------------------------------


   And the output is :


------------- output -----------------------
12/10/05 15:37
Generated [

++++
TRUE:AB
TRUE:AB
first(PLACE)=A
rest(PLACE)=B
TAIL CALL:

++++
TRUE:B
TRUE:
first(PLACE)=
rest(PLACE)=
TAIL CALL:

-----
FALSE:
]
--------------------------------------------

  What I find annoying is the inner call to namestail : the value of x
changes from a line to the next. The first "TRUE:<x>" yields "TRUE:b",
the second "TRUE:" as if the value had been swallowed by the first <x>.
As you can see, the outer invocation of namestail does not seem
afflicted...

  Is there something I am missing (dynamic scoping can be tricky, I
know) ?



Laurent.

From parrt at cs.usfca.edu  Wed Oct 12 11:19:20 2005
From: parrt at cs.usfca.edu (Terence Parr)
Date: Wed Oct 12 11:19:27 2005
Subject: [stringtemplate-interest] Strange tail-recursive behaviour
In-Reply-To: <55DDB08CC9CD2941A70E8D626789A2C97F3F6E@ec8l7ljvo9h5dde.hosting.exch>
References: <55DDB08CC9CD2941A70E8D626789A2C97F3F6E@ec8l7ljvo9h5dde.hosting.exch>
Message-ID: <84710405-DC9F-4C8B-AEF6-8842EBF2A0C6@cs.usfca.edu>

Hi Laurent,

This definitely looks like a bug to me.  You have

> TRUE:<x>
> TRUE:<x>

when x is B it prints

TRUE:B
TRUE:

I just figured it out too.  You are passing in rest(x) which creates  
an iterator.  When you ref it again, the iterator has not been  
reset!  Ack!

Adding as a bug unit test:

     public void testRepeatedRestOpAsArg() throws Exception {
         String templates =
                 "group test;" +newline+
                 "root(names) ::= \"$other(rest(names))$\""+newline+
                 "other(x) ::= \"$x$, $x$\""+newline
                 ;
         StringTemplateGroup group =
                 new StringTemplateGroup(new StringReader(templates));
         StringTemplate e = group.getInstanceOf("root");
         e.setAttribute("names", "Ter");
         e.setAttribute("names", "Tom");
         String expecting = "Tom, Tom";
         assertEqual(e.toString(), expecting);
     }

Passing an operation result as an attribute seems to reuse the same  
iterator object. Hmm...

Thanks!

Ter

On Oct 12, 2005, at 6:52 AM, VAUCHER Laurent wrote:

>   Hi,
>
>   I'm currently trying StringTemplate (v2.2 downloaded yesterday  
> oct 11)
> and trying a kind of tail-recursive template, I stumbled upon the
> following behaviour.
>
>   I have a template group file that reads :
> --- "mytest/main.stg" ----------------------
> group main;
>
> /* Root template  */
> root(place) ::= <<
>
> <namestail(place)>
>
>
>>>
>>>
>
> /* Tail template  */
> namestail(x) ::= <<
>
> <if(x)>
> ++++
> TRUE:<x>
> TRUE:<x>
> first(PLACE)=<first(x)>
> rest(PLACE)=<rest(x)>
> TAIL CALL:
> <namestail(x=rest(x))>
> <else>
> -----
> FALSE:<x>
> <endif>
>
>
>>>
>>>
> ---------------------------------------------
>
>
>
>   and a simple driver class
>
>
>
>
> ----- "Main.java" ---------------------------
> import java.io.FileNotFoundException;
> import java.io.FileReader;
> import java.text.SimpleDateFormat;
> import java.util.Date;
>
> import org.antlr.stringtemplate.StringTemplate;
> import org.antlr.stringtemplate.StringTemplateGroup;
> import org.antlr.stringtemplate.language.AngleBracketTemplateLexer;
>
> public class Main {
>
>   /**
>    * @param args
>    */
>   public static void main(String[] args) {
>     System.out.println(new SimpleDateFormat().format(new Date()));
>
>     try {
>       FileReader reader = new FileReader("src/mytest/main.stg");
>       StringTemplateGroup stg = new StringTemplateGroup(reader,
>           AngleBracketTemplateLexer.class);
>
>       StringTemplate firstST = stg.getInstanceOf("root");
>       firstST.setAttribute("place", "A");
>       firstST.setAttribute("place", "B");
>
>       System.out.println("Generated [" + firstST.toString() + "]");
>     } catch (FileNotFoundException eFNFE) {
>       eFNFE.printStackTrace(System.err);
>     }
>   }
> }
> --------------------------------------------
>
>
>    And the output is :
>
>
> ------------- output -----------------------
> 12/10/05 15:37
> Generated [
>
> ++++
> TRUE:AB
> TRUE:AB
> first(PLACE)=A
> rest(PLACE)=B
> TAIL CALL:
>
> ++++
> TRUE:B
> TRUE:
> first(PLACE)=
> rest(PLACE)=
> TAIL CALL:
>
> -----
> FALSE:
> ]
> --------------------------------------------
>
>   What I find annoying is the inner call to namestail : the value of x
> changes from a line to the next. The first "TRUE:<x>" yields "TRUE:b",
> the second "TRUE:" as if the value had been swallowed by the first  
> <x>.
> As you can see, the outer invocation of namestail does not seem
> afflicted...
>
>   Is there something I am missing (dynamic scoping can be tricky, I
> know) ?
>
>
>
> Laurent.
>
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest@antlr.org
> http://www.antlr.org:8080/mailman/listinfo/stringtemplate-interest
>

From VAUCHER at fermat.fr  Thu Oct 13 08:48:14 2005
From: VAUCHER at fermat.fr (VAUCHER Laurent)
Date: Thu Oct 13 08:48:19 2005
Subject: [stringtemplate-interest] Raw speed!
Message-ID: <55DDB08CC9CD2941A70E8D626789A2C97F46F5@ec8l7ljvo9h5dde.hosting.exch>

  Hi.

  I've tried StringTemplate yesterday and am already falling in love
with it. I won't enumerate all its advantages, but will instead raise a
point about performance. The bare fact is that the library "as is" is a
bit slow for my current needs. I think there are several causes :

  1 ) the way properties are retrieved, for standard classes (isXXX,
getXXX or field access) is not recorded and has to be recomputed on each
access ;
  2 ) property access must use reflection ;
  3 ) compared to JSP, StringTemplate's are evaluated, not compiled.

  Please, let me know if you think there are other crucial things.


  I made a quick hack to fix the first point (thanks to/for the
open-sourceness of the lib) and observed a direct 25% decrease in
elasped time. Nice!

  But I'm still not satisfied and, alas, points 2 and 3, which are
linked, cannot be fixed so easily.

  The next step in optimization would be a kind of
JIT-template-compiler. If I follow that road, I think the ASM library
could be a useful help (http://asm.objectweb.org).

  What do you think? 


Laurent.

From parrt at cs.usfca.edu  Thu Oct 13 10:38:25 2005
From: parrt at cs.usfca.edu (Terence Parr)
Date: Thu Oct 13 10:38:33 2005
Subject: [stringtemplate-interest] Raw speed!
In-Reply-To: <55DDB08CC9CD2941A70E8D626789A2C97F46F5@ec8l7ljvo9h5dde.hosting.exch>
References: <55DDB08CC9CD2941A70E8D626789A2C97F46F5@ec8l7ljvo9h5dde.hosting.exch>
Message-ID: <D2A5311F-48AD-4024-9662-011AA473E26C@cs.usfca.edu>


On Oct 13, 2005, at 8:48 AM, VAUCHER Laurent wrote:

>   Hi.
>
>   I've tried StringTemplate yesterday and am already falling in love
> with it. I won't enumerate all its advantages, but will instead  
> raise a
> point about performance. The bare fact is that the library "as is"  
> is a
> bit slow for my current needs. I think there are several causes :
>
>   1 ) the way properties are retrieved, for standard classes (isXXX,
> getXXX or field access) is not recorded and has to be recomputed on  
> each
> access ;

Yes, i have that on the to-do list :)

>   2 ) property access must use reflection ;

That is because ST cannot know anything about types

>   3 ) compared to JSP, StringTemplate's are evaluated, not compiled.

Yep.  The language in the $...$ expressions can be rather  
complicated.  I suppose I could build a generated version like JSP.   
That is lower priority that the property access update though I suppose.

>   I made a quick hack to fix the first point (thanks to/for the
> open-sourceness of the lib) and observed a direct 25% decrease in
> elasped time. Nice!

Nice!  So we should record a map (type,propertyName)- 
 >ReflectionObject so that if I ever see User object again and name  
property, it already has the reflection object necessary to get the  
field or whatever.

Is that what you did?

>   But I'm still not satisfied and, alas, points 2 and 3, which are
> linked, cannot be fixed so easily.

True ;)

>   The next step in optimization would be a kind of
> JIT-template-compiler. If I follow that road, I think the ASM library
> could be a useful help (http://asm.objectweb.org).

Would be easier to just generate java and compile it like JSP. :)

>   What do you think?

I think you have good ideas!  Vous etes tres malin! :)

Ter

From VAUCHER at fermat.fr  Thu Oct 13 23:45:56 2005
From: VAUCHER at fermat.fr (VAUCHER Laurent)
Date: Thu Oct 13 23:45:59 2005
Subject: [stringtemplate-interest] Raw speed!
Message-ID: <55DDB08CC9CD2941A70E8D626789A2C97F483F@ec8l7ljvo9h5dde.hosting.exch>

>>   1 ) the way properties are retrieved, for standard classes (isXXX, 
>> getXXX or field access) is not recorded and has to be recomputed on 
>> each access ;
>
>Yes, i have that on the to-do list :)

To be fair, that's where I read about it ;o)


>>   I made a quick hack to fix the first point (thanks to/for the 
>> open-sourceness of the lib) and observed a direct 25% decrease in 
>> elasped time. Nice!
>
>Nice!  So we should record a map (type,propertyName)->
>ReflectionObject so that if I ever see User object again
> and name property, it already has the reflection object
> necessary to get the field or whatever.
>
>Is that what you did?

  Exactly. A simple map with string as keys (ClassName + "#" + 
propertyName) and Methods or Fields as values.
  I cannot decently propose to send you my current code, because it
is so ill-designed. But I can refactor it to make it prettier so
that it better fits in the global system. Where do you think
the map should live? In a StringTemplate? In the template group,
closer to the caching system?


>Would be easier to just generate java and compile it like JSP. :)

Probably, but that would require a compiler at runtime or a pre-
compilation phase and would get a bit too close to a full "engine":
not exactly what I long for. 
On the other hand, we could probably adopt a progressive (incremental)
attitude regarding byte-code generation. A first step would be to
generate only property access code, to bypass reflection. That task
should not need very high skills to generate the byte-code. Further
steps would lead to full StringTemplate "compilation".


>>   What do you think?
>
>I think you have good ideas!  Vous etes tres malin! :)

You're too kind. I'm only trying to get some work done, and if
I can help make an already good tool a still better one, I
will be pleased.


Laurent.

From VAUCHER at fermat.fr  Fri Oct 14 01:49:42 2005
From: VAUCHER at fermat.fr (VAUCHER Laurent)
Date: Fri Oct 14 01:49:32 2005
Subject: [stringtemplate-interest] StringTemplateGroup attribute renderer
	bug + fix
Message-ID: <55DDB08CC9CD2941A70E8D626789A2C97F4996@ec8l7ljvo9h5dde.hosting.exch>

  This morning (UTC+1) I tried to add my own AttributeRenderer to a
StringTemplateGroup, and had the unpleasant suprise to receive a
NullPointerException. After reading the code, it seems that a group
where one attribute renderer is registered must either define renderes
for all possible attribute types, or have a super group that does. I
would have thought that in this case, the standard default renderer
would be used, and since the result is an NPE, it might only be an
edge-case that escaped.

  Therefore, I successfully made a patch to StringTemplateGroup.java,
around line 594 :


	if ( renderer==null ) {
+		if ( superGroup==null ) {
+			return null; // no parent?  Stop.
+		}
		// no renderer registered for this class, check super
group
		renderer =
superGroup.getAttributeRenderer(attributeClassType);
	}


Laurent.

From parrt at cs.usfca.edu  Fri Oct 14 09:33:55 2005
From: parrt at cs.usfca.edu (Terence Parr)
Date: Fri Oct 14 09:33:59 2005
Subject: [stringtemplate-interest] StringTemplateGroup attribute renderer
	bug + fix
In-Reply-To: <55DDB08CC9CD2941A70E8D626789A2C97F4996@ec8l7ljvo9h5dde.hosting.exch>
References: <55DDB08CC9CD2941A70E8D626789A2C97F4996@ec8l7ljvo9h5dde.hosting.exch>
Message-ID: <318865AB-A611-42C8-8160-E72C229100EE@cs.usfca.edu>

On Oct 14, 2005, at 1:49 AM, VAUCHER Laurent wrote:
>   This morning (UTC+1) I tried to add my own AttributeRenderer to a
> StringTemplateGroup, and had the unpleasant suprise to receive a
> NullPointerException. After reading the code, it seems that a group
> where one attribute renderer is registered must either define renderes
> for all possible attribute types, or have a super group that does. I
> would have thought that in this case, the standard default renderer
> would be used, and since the result is an NPE, it might only be an
> edge-case that escaped.

Ack!  Sorry about that.  It's a bug...fixing now.

>
>   Therefore, I successfully made a patch to StringTemplateGroup.java,
> around line 594 :
>
>
>     if ( renderer==null ) {
> +        if ( superGroup==null ) {
> +            return null; // no parent?  Stop.
> +        }
>         // no renderer registered for this class, check super
> group
>         renderer =
> superGroup.getAttributeRenderer(attributeClassType);
>     }

I did it slightly differently:

         if ( renderer==null ) {
             if ( superGroup!=null ) {
                 // no renderer registered for this class, check  
super group
                 renderer = superGroup.getAttributeRenderer 
(attributeClassType);
             }
         }

Anyway, thanks!

Ter
From parrt at cs.usfca.edu  Sun Oct 16 15:06:22 2005
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sun Oct 16 15:06:28 2005
Subject: [stringtemplate-interest] ANTLR's StringTemplates for code
	generation
Message-ID: <5D318876-500B-44D5-8C91-F5A67DE53747@cs.usfca.edu>

Howdy

interesting new tidbit in my "blog" about the ANTLR v3 code generator  
and factoring/reusing templates:

http://www.antlr.org/blog/antlr3/codegen.tml

Ter
From parrt at cs.usfca.edu  Mon Oct 17 13:01:31 2005
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon Oct 17 13:01:39 2005
Subject: [stringtemplate-interest] updated codegen blog again
Message-ID: <5A1178AD-467B-4BB3-A0F0-FB403CF9DE4B@cs.usfca.edu>

Howdy,

More experience with the template refactoring in the v3 code  
generator...some interesting thoughts:

http://www.antlr.org/blog/antlr3/codegen.tml

The conclusion is that I may define "regions" within a template so  
you can override chunks of a template in a subgroup rather having to  
redefine the whole template. :)

Ter
From VAUCHER at fermat.fr  Tue Oct 18 01:10:10 2005
From: VAUCHER at fermat.fr (VAUCHER Laurent)
Date: Tue Oct 18 01:09:48 2005
Subject: [stringtemplate-interest] Unscientific benchmarks
Message-ID: <55DDB08CC9CD2941A70E8D626789A2C9823310@ec8l7ljvo9h5dde.hosting.exch>

  Well,

  as you may recall, I was very satisfied by StringTemplate's design,
but a bit less by its raw performance. Making heavy use of reflection,
that was not a big surprise. So I tried two approaches to boost the
rendering speed.

  First, I tried a crude implementation of 'reflection caching', having
seen the subject in Terence's to-do-list.

  Then, I tried replacing reflection by classes generated on the fly
with a bytecode library (ASM).

  On a totally unsignificant and unscientific data set (1000 rows from a
database with around twenty fields, plus a structured display
description) here are the results I got (JDBC fetch excluded) :

  Normal StringTemplate   8.9 s  = 100%
  Reflection caching      6.4 s  =  72%
  ASM access generation   6.3 s  =  71%

  There are a dozen templates involved and around 200.000 attribute
accesses. The ASM version generates 26 classes in 46 ms. And the DB rows
are presented as HashMap: it means that getting attributes is the same
for those objects in all versions (no reflection, no bytecode
generation).

  What can we conclude? Not very much, because the testing is not very
precise, but at least: reflection caching is very simple and seems well
worth. ASM is quite a bit more complicated but "make no mistake" [(c)
G.W.Bush] it can give a substantial boost. In this test, I just replaced
the simple access part with generated classes. I have plans to ASMify
the whole StringTemplate object or at least it's evaluation part...


Laurent.

From parrt at cs.usfca.edu  Tue Oct 18 11:54:08 2005
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue Oct 18 11:54:13 2005
Subject: [stringtemplate-interest] Unscientific benchmarks
In-Reply-To: <55DDB08CC9CD2941A70E8D626789A2C9823310@ec8l7ljvo9h5dde.hosting.exch>
References: <55DDB08CC9CD2941A70E8D626789A2C9823310@ec8l7ljvo9h5dde.hosting.exch>
Message-ID: <38025EC9-D0C0-4759-9653-6E9EB1B0E3A6@cs.usfca.edu>


On Oct 18, 2005, at 1:10 AM, VAUCHER Laurent wrote:
>   On a totally unsignificant and unscientific data set (1000 rows  
> from a
> database with around twenty fields, plus a structured display
> description) here are the results I got (JDBC fetch excluded) :
>
>   Normal StringTemplate   8.9 s  = 100%
>   Reflection caching      6.4 s  =  72%
>   ASM access generation   6.3 s  =  71%

Very interesting!

>   There are a dozen templates involved and around 200.000 attribute
> accesses. The ASM version generates 26 classes in 46 ms. And the DB  
> rows
> are presented as HashMap: it means that getting attributes is the same
> for those objects in all versions (no reflection, no bytecode
> generation).
>
>   What can we conclude? Not very much, because the testing is not very
> precise, but at least: reflection caching is very simple and seems  
> well
> worth. ASM is quite a bit more complicated but "make no mistake" [(c)
> G.W.Bush] it can give a substantial boost. In this test, I just  
> replaced
> the simple access part with generated classes. I have plans to ASMify
> the whole StringTemplate object or at least it's evaluation part...

You mean generate straight java code (er...bytecodes) instead of  
using the tree walker etc... to interpret?  That should speed things  
up for sure.

Ter
From wirecracker at gmail.com  Wed Oct 19 20:27:18 2005
From: wirecracker at gmail.com (eric nelson)
Date: Wed Oct 19 20:27:20 2005
Subject: [stringtemplate-interest] cminus.g
Message-ID: <ca5eeb330510192027h93a65d4wd91f49d2a79b9b1@mail.gmail.com>

This is my first try at understanding StringTemplate. Can anyone explain why
"program" returns something, but "declaration" does not? I'm following this
example (http://www.codegeneration.net/tiki-read_article.php?articleId=77)
and I understand that by returning StringTemplates (code), the output is
interpretted. In some places the rules return things, but other rules (such
as declaration and block) they do not.
 By the way, my goal as an excercise is eventually to translate from Java
source code to Java source code. I imagine I need to modify java.g in the
spirit of cminus.g in coordination with a more advanced Java.stg. Am I on
the right track?
  - e

program returns [StringTemplate code=template("program")]

: (declaration[code])+

;

declaration[StringTemplate code]

{StringTemplate f=null,v=null;}

: v=variable {code.setAttribute("globals", v);}

| f=function {code.setAttribute("functions", f);}

;
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org:8080/pipermail/stringtemplate-interest/attachments/20051019/14523ae1/attachment.html
From blo.b at infonie.fr  Sat Oct 22 05:24:42 2005
From: blo.b at infonie.fr (Laurent Vaucher)
Date: Sat Oct 22 05:24:45 2005
Subject: [stringtemplate-interest] Re: cminus.g
Message-ID: <5CCE5530-BF40-4929-97CA-9DE80B4A4FED@infonie.fr>

   Well, the way I understand the difference between program, which  
returns a value, and declaration, which takes a stringtemplate as a  
parameter is the same as between a 'purely functional' function and a  
'side-effect' one. The second is used to 'fill' an already existing  
object with additional data.
   It might be possible to convert the whole thing to a 'purely  
functional' style, but I think one point of the article was to show  
all the possible approaches with the library. The other possible  
explanation is 'purely pragmatic': do the simplest thing that might  
possibly work ((c) Ward Cunningham). If one style is simpler to use  
in some cases, just use it.


Laurent.

From blo.b at infonie.fr  Sat Oct 22 05:50:54 2005
From: blo.b at infonie.fr (Laurent Vaucher)
Date: Sat Oct 22 05:50:57 2005
Subject: [stringtemplate-interest] Map totalitarianism :o)
Message-ID: <0DA89B7D-5BED-4414-AA71-7C47167C337A@infonie.fr>

   Having delved a little in the source of StringTemplate, I  
encountered in ASTExpr.java on line 785 the method isValidMapInstance 
(). What it does is actually prevent you from using any Map  
implementation other than HashMap or Hashtable. That's what I call  
totalitarianism! The reason for this limitation is explained in the  
source :

         // Special case: if it's a HashMap, Hashtable then pull using
         // key not the property method.  Do NOT allow general Map  
interface
         // as people could pass in their database masquerading as a  
Map.

   As I understand it, the goal is to prevent the Model-View  
segregation to be broken. That's laudable and fully in line with the  
spirit of the library. But I think there are innocent casualties with  
this scheme. I'll try to explain why I think the whole Map  
implementation control is not ' the right thing'.

   First, why on earth choose HashMap and Hashtable and let TreeMap  
out in the cold? It is a very recommendable citizen of the Map  
community.
   Second, if I have built another Map implementation because I want  
to try, let's say, a 'perfect hash' function, why should I be  
discriminated?
   Finally, StringTemplate cannot make any control on get/is methods  
and those could very easily be used as a fa?ade to a database, so the  
whole point of the control is lost.

   As a conclusion, I'd say that though intent of the control was  
right, the way it is done isn't and the whole idea of controlling  
what a developer might do with a library is, if not an error, a utopia.


Laurent.

From wirecracker at gmail.com  Sat Oct 22 06:04:18 2005
From: wirecracker at gmail.com (eric nelson)
Date: Sat Oct 22 06:04:21 2005
Subject: [stringtemplate-interest] Re: cminus.g
In-Reply-To: <5CCE5530-BF40-4929-97CA-9DE80B4A4FED@infonie.fr>
References: <5CCE5530-BF40-4929-97CA-9DE80B4A4FED@infonie.fr>
Message-ID: <ca5eeb330510220604m1a9d0972w9aac644d9fcb90fa@mail.gmail.com>

The way I've started to think about it is just that it doesn't make sense to
have a template for the "declaration" rule in cminus.g. A declaration is
either a function or a variable, but we just let the respective
"function(type,name,args,locals,stats)"
and "variable(type,name)" templates (via the p determine the output grammar
depending on which is applicable.

"declaration" and "block" seem to serve only as helpers, so mabye it would
have been more clear if they had been prefixed with "protected" (isn't that
the convention with ANTLR?).
 Yes, mabye the example was just supposed to show the different approaches.
 At first I thought it would also be ok to do something like this (assuming
the templates were modified accordingly):

program returns [StringTemplate code=template("program")]

: (code.setAttribute(declaration))+

;

 declaration returns [StringTemplate code = template("declaration")]

{StringTemplate f=null,v=null;}

: v=variable {code.setAttribute("globals", v);}

| f=function {code.setAttribute("functions", f);}

;
EXCEPT that the attributes "globals" and "functions" are in the program
template. It seems the appropriate place. In other words it would be out of
place to have "globals" and "functions" be attributes of "declaration"
because any single declaration matches to EITHER a global or a function.
Does that seem logical? Anyone want to confirm or disconfirm? I have been
racking my head for 2 or 3 days over this ... by now mabye my brain is just
willing to accept ANY logic ;)
 Thanks for the response Laurent!
  - e

 On 10/22/05, Laurent Vaucher <blo.b@infonie.fr> wrote:
>
> Well, the way I understand the difference between program, which
> returns a value, and declaration, which takes a stringtemplate as a
> parameter is the same as between a 'purely functional' function and a
> 'side-effect' one. The second is used to 'fill' an already existing
> object with additional data.
> It might be possible to convert the whole thing to a 'purely
> functional' style, but I think one point of the article was to show
> all the possible approaches with the library. The other possible
> explanation is 'purely pragmatic': do the simplest thing that might
> possibly work ((c) Ward Cunningham). If one style is simpler to use
> in some cases, just use it.
>
>
> Laurent.
>
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest@antlr.org
> http://www.antlr.org:8080/mailman/listinfo/stringtemplate-interest
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org:8080/pipermail/stringtemplate-interest/attachments/20051022/8495fde8/attachment.html
From parrt at cs.usfca.edu  Sun Oct 23 13:19:43 2005
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sun Oct 23 13:19:49 2005
Subject: [stringtemplate-interest] Map totalitarianism :o)
In-Reply-To: <0DA89B7D-5BED-4414-AA71-7C47167C337A@infonie.fr>
References: <0DA89B7D-5BED-4414-AA71-7C47167C337A@infonie.fr>
Message-ID: <995D05BA-E4BE-44BA-9D87-DED462E1DB9B@cs.usfca.edu>

On Oct 22, 2005, at 5:50 AM, Laurent Vaucher wrote:
>   Having delved a little in the source of StringTemplate, I  
> encountered in ASTExpr.java on line 785 the method  
> isValidMapInstance(). What it does is actually prevent you from  
> using any Map implementation other than HashMap or Hashtable.  
> That's what I call totalitarianism!

The StringTemplate "supreme benevolent dictator and president for  
life" is guilty as charged! ;)

> The reason for this limitation is explained in the source :
>
>         // Special case: if it's a HashMap, Hashtable then pull using
>         // key not the property method.  Do NOT allow general Map  
> interface
>         // as people could pass in their database masquerading as a  
> Map.
>
>   As I understand it, the goal is to prevent the Model-View  
> segregation to be broken. That's laudable and fully in line with  
> the spirit of the library. But I think there are innocent  
> casualties with this scheme.

As there are with not allowing tests of attribute values like "make  
all negative numbers red".

> I'll try to explain why I think the whole Map implementation  
> control is not ' the right thing'.
>
>   First, why on earth choose HashMap and Hashtable and let TreeMap  
> out in the cold? It is a very recommendable citizen of the Map  
> community.

I forgot about that one.

>   Second, if I have built another Map implementation because I want  
> to try, let's say, a 'perfect hash' function, why should I be  
> discriminated?

That would be "collateral damage" :(

>   Finally, StringTemplate cannot make any control on get/is methods  
> and those could very easily be used as a fa?ade to a database, so  
> the whole point of the control is lost.

Very true.

>   As a conclusion, I'd say that though intent of the control was  
> right, the way it is done isn't and the whole idea of controlling  
> what a developer might do with a library is, if not an error, a  
> utopia.

Ok, you convinced me...I'll change for 2.3; adding to bug list. :)

Thanks for your excellent analysis.

Ter
From parrt at cs.usfca.edu  Mon Oct 24 12:48:10 2005
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon Oct 24 12:48:15 2005
Subject: [stringtemplate-interest] Fwd: [antlr-interest] Problem with
	carriage returns in c#	stringtemplate
References: <MPEMLILMNEOKCPPBGEMKCEIGCIAA.luisl@scarab.co.za>
Message-ID: <0AA0AB0A-BC79-4B4E-B321-A33C01398AB1@cs.usfca.edu>

forwarded from antlr-interest...
Ter

Begin forwarded message:

> From: "Luis Leal" <luisl@scarab.co.za>
> Date: October 24, 2005 6:57:18 AM PDT
> To: <antlr-interest@antlr.org>
> Subject: RE: [antlr-interest] Problem with carriage returns in  
> c#    stringtemplate
> Reply-To: luisl@scarab.co.za
>
>
> Hi Mark,
>
> Some investigation has revealed the following:
>
> 1. When you use a string literal the template actually contains a  
> carriage
> return and a new line
> 2. When you read the template from an embedded resource the template
> contains "\r\n" instead of a carriage return and a new line
>
> The second case sends the lexer down a path where \r is not defined  
> as a
> valid escape character. I've just uploaded a new C# version to
> www.stringtemplate.org which fixes this problem.
>
> Regards
>
> Luis
>
> -----Original Message-----
> From: Tech [mailto:tech@swingkid.fsnet.co.uk]
> Sent: 23 October 2005 11:32 PM
> To: antlr-interest@antlr.org
> Subject: [antlr-interest] Problem with carriage returns in c#
> stringtemplate
>
>
> Thanks for your reply Luis.
>
> No, this is not my whole template group, but I was trying to reduce  
> the
> problem. I agree with you that your code works. However, if you  
> copy the
> string into a text file (removing the escape characters from the
> quotation marks) and include it as an embedded resource, it doesn't  
> work!
>
>      //StringReader sr = new StringReader("group TestOutput;
>     program(statements)::= << class Wrapper { <statements;
>     separator=\"\r\n\"> } >>");
>      Stream s =
>     typeof(Class1).Assembly.GetManifestResourceStream 
> ("Project1.Test.stg");
>     StreamReader sr = new StreamReader(s);
>     StringTemplateGroup stg = new StringTemplateGroup(sr,
>     typeof(antlr.stringtemplate.language.AngleBracketTemplateLexer));
>
> where Test.stg contains
>
>     group TestOutput; program(statements)::= << class Wrapper {
>     <statements; separator="\r\n"> } >>
>
> I have tried copying the StreamReader contents into a string before
> constructing the StringTemplateGroup, but that doesn't help. It seems
> more like a .Net issue than a StringTemplate issue, but I can't figure
> it out. I wonder if it is an encoding thing?
>
> Always curious,
>
> Mark

From wirecracker at gmail.com  Sat Oct 29 05:18:45 2005
From: wirecracker at gmail.com (eric nelson)
Date: Sat Oct 29 05:18:49 2005
Subject: [stringtemplate-interest] Java In / Java Out
Message-ID: <ca5eeb330510290518q120825a9o7fdceec2c33a23d7@mail.gmail.com>

I'm trying to modify the java.g grammar file so that I can use
StringTemplate for outputting the file. The input is a Java file. I would
like the output to be Java also. So, yes, basically no change in content ...
mabye some spacing will differ here or there. I am still learning to use
ANTLR and StringTemplate and I've written a Java.stg file based on what I
think I know so far. Exerpts from java.g and Java.stg appear below. One of
the questions I have is how to handle the "|" (or) symbol (i.e.
classDefinition | interfaceDefinition). The way I have it right now there
would be a list of "modifiers", a list of "classDefinitions", and a list of
interfaceDefinitions (then naturally I would have a question about the " |
s:SEMI!" ... but one question at a time ;) So, the problem in Java.stg is
how to match up the correct "modifiers" with the corresponding
"interfaceDefinition" or "classDefinition". Or what if there is a
classDefinition with no modifier, etc. I am quite convinced that my
Java.stgtemplate (typeDefinition in particular) and/or my
java.g code has erred somewhere. Any thoughts? This is HUGE since this will
help me understand how to approach the "field" rule in java.g .... if anyone
has some hints on a "field" template that would also be great! Thanks :) - e
  java.g exerpt (java 1.3 grammar)

//////////////////////////////////////////////////////////////////////////////////////////////////
// A type definition in a file is either a class or interface definition.
typeDefinition returns [StringTemplate code=template("typeDefinition")]
options {defaultErrorHandler = true;}
{StringTemplate mod=null, cd=null, id=null, semi=null;}
: mod=m:modifiers! {code.setAttribute("modifiers", mod);}
( cd=classDefinition[#m] {code.setAttribute("classDefinitions", cd);}
| id=interfaceDefinition[#m] {code.setAttribute("interfaceDefinitions",
id);}
)
| s:SEMI! {semi=template("lexer_semi");semi.setAttribute("semi",
s.getText());code.setAttribute("semi",
semi);}
;

//////////////////////////////////////////////////////////////////////////////////////////////////
  Java.stg exerpt

//////////////////////////////////////////////////////////////////////////////////////////////////
typeDefinition(modifiers,classDefinitions,interfaceDefinitions,semi) ::= <<
<modifiers><classDefinitions><interfaceDefinitions><semi>
>>

modifiers(modifiers) ::= "<modifiers>"

modifier(modifier) ::= "<modifier>"

classDefinition(ident,superClassClause,implementsClause,classBlock) ::= <<
class <ident> <superClassClause> <implementsClause>
<classBlock>
>>

interfaceDefinition() ::= <<
not yet completed
>>

//////////////////////////////////////////////////////////////////////////////////////////////////
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org:8080/pipermail/stringtemplate-interest/attachments/20051029/11745468/attachment.html
From wirecracker at gmail.com  Mon Oct 31 03:05:31 2005
From: wirecracker at gmail.com (eric nelson)
Date: Mon Oct 31 03:05:34 2005
Subject: [stringtemplate-interest] Re: Java In / Java Out
In-Reply-To: <ca5eeb330510290518q120825a9o7fdceec2c33a23d7@mail.gmail.com>
References: <ca5eeb330510290518q120825a9o7fdceec2c33a23d7@mail.gmail.com>
Message-ID: <ca5eeb330510310305rd36bd16m917103b18495e3ba@mail.gmail.com>

Its been a couple of days so I just thought I should repost, since I would
still like to ask the same question. If anyone can help that would be great!
Thanks :)
 original:
  I'm trying to modify the java.g grammar file so that I can use
StringTemplate for outputting the file. The input is a Java file. I would
like the output to be Java also. So, yes, basically no change in content ...
mabye some spacing will differ here or there. I am still learning to use
ANTLR and StringTemplate and I've written a Java.stg file based on what I
think I know so far. Exerpts from java.g and Java.stg appear below. One of
the questions I have is how to handle the "|" (or) symbol (i.e.
classDefinition | interfaceDefinition). The way I have it right now there
would be a list of "modifiers", a list of "classDefinitions", and a list of
interfaceDefinitions (then naturally I would have a question about the " |
s:SEMI!" ... but one question at a time ;) So, the problem in Java.stg is
how to match up the correct "modifiers" with the corresponding
"interfaceDefinition" or "classDefinition". Or what if there is a
classDefinition with no modifier, etc. I am quite convinced that my
Java.stgtemplate (typeDefinition in particular) and/or my
java.g code has erred somewhere. Any thoughts? This is HUGE since this will
help me understand how to approach the "field" rule in java.g .... if anyone
has some hints on a "field" template that would also be great! Thanks :) - e

  java.g exerpt (java 1.3 grammar)

//////////////////////////////////////////////////////////////////////////////////////////////////
// A type definition in a file is either a class or interface definition.
typeDefinition returns [StringTemplate code=template("typeDefinition")]
options {defaultErrorHandler = true;}
{StringTemplate mod=null, cd=null, id=null, semi=null;}
: mod=m:modifiers! {code.setAttribute("modifiers", mod);}
( cd=classDefinition[#m] { code.setAttribute("classDefinitions", cd);}
| id=interfaceDefinition[#m] {code.setAttribute("interfaceDefinitions",
id);}
)
| s:SEMI! {semi=template("lexer_semi");semi.setAttribute("semi",
s.getText());code.setAttribute("semi",
semi);}
;

//////////////////////////////////////////////////////////////////////////////////////////////////
  Java.stg exerpt

//////////////////////////////////////////////////////////////////////////////////////////////////
typeDefinition(modifiers,classDefinitions,interfaceDefinitions,semi) ::= <<
<modifiers><classDefinitions><interfaceDefinitions><semi>
>>

modifiers(modifiers) ::= "<modifiers>"

modifier(modifier) ::= "<modifier>"

classDefinition(ident,superClassClause,implementsClause,classBlock) ::= <<
class <ident> <superClassClause> <implementsClause>
<classBlock>
>>

interfaceDefinition() ::= <<
not yet completed
>>

//////////////////////////////////////////////////////////////////////////////////////////////////


 On 10/29/05, eric nelson <wirecracker@gmail.com> wrote:
>
> I'm trying to modify the java.g grammar file so that I can use
> StringTemplate for outputting the file. The input is a Java file. I would
> like the output to be Java also. So, yes, basically no change in content ...
> mabye some spacing will differ here or there. I am still learning to use
> ANTLR and StringTemplate and I've written a Java.stg file based on what I
> think I know so far. Exerpts from java.g and Java.stg appear below. One of
> the questions I have is how to handle the "|" (or) symbol (i.e.
> classDefinition | interfaceDefinition). The way I have it right now there
> would be a list of "modifiers", a list of "classDefinitions", and a list of
> interfaceDefinitions (then naturally I would have a question about the " |
> s:SEMI!" ... but one question at a time ;) So, the problem in Java.stg is
> how to match up the correct "modifiers" with the corresponding
> "interfaceDefinition" or "classDefinition". Or what if there is a
> classDefinition with no modifier, etc. I am quite convinced that my
> Java.stg template (typeDefinition in particular) and/or my java.g code has
> erred somewhere. Any thoughts? This is HUGE since this will help me
> understand how to approach the "field" rule in java.g .... if anyone has
> some hints on a "field" template that would also be great! Thanks :) - e
>   java.g exerpt (java 1.3 grammar)
>
> //////////////////////////////////////////////////////////////////////////////////////////////////
> // A type definition in a file is either a class or interface definition.
> typeDefinition returns [StringTemplate code=template("typeDefinition")]
> options {defaultErrorHandler = true;}
> {StringTemplate mod=null, cd=null, id=null, semi=null;}
> : mod=m:modifiers! {code.setAttribute("modifiers", mod);}
> ( cd=classDefinition[#m] { code.setAttribute("classDefinitions", cd);}
> | id=interfaceDefinition[#m] {code.setAttribute("interfaceDefinitions",
> id);}
> )
> | s:SEMI! {semi=template("lexer_semi");semi.setAttribute("semi", s.getText());code.setAttribute("semi",
> semi);}
> ;
>
> //////////////////////////////////////////////////////////////////////////////////////////////////
>   Java.stg exerpt
>
> //////////////////////////////////////////////////////////////////////////////////////////////////
> typeDefinition(modifiers,classDefinitions,interfaceDefinitions,semi) ::=
> <<
> <modifiers><classDefinitions><interfaceDefinitions><semi>
> >>
>
> modifiers(modifiers) ::= "<modifiers>"
>
> modifier(modifier) ::= "<modifier>"
>
> classDefinition(ident,superClassClause,implementsClause,classBlock) ::= <<
> class <ident> <superClassClause> <implementsClause>
> <classBlock>
> >>
>
> interfaceDefinition() ::= <<
> not yet completed
> >>
>
>
> //////////////////////////////////////////////////////////////////////////////////////////////////
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org:8080/pipermail/stringtemplate-interest/attachments/20051031/8caae9e0/attachment.html
From oliver.zeigermann at gmail.com  Mon Oct 31 09:12:00 2005
From: oliver.zeigermann at gmail.com (Oliver Zeigermann)
Date: Mon Oct 31 09:12:05 2005
Subject: [stringtemplate-interest] Java In / Java Out
In-Reply-To: <ca5eeb330510290518q120825a9o7fdceec2c33a23d7@mail.gmail.com>
References: <ca5eeb330510290518q120825a9o7fdceec2c33a23d7@mail.gmail.com>
Message-ID: <9da4f4520510310912s14896a04m@mail.gmail.com>

Hi Eric,

I was doing limited Java to Java conversions as well. An example that
describes how to generate Java sources from Java interface definitions
can be found here:

http://www.zeigermann.de/genEJB.zip

May idea there was to separate the Java analysis (using ANTLR and a
Java grammar) from the Java generation part (using StringTemplate)
with an intermediate step that uses Java Beans for the tree
representation of the Java interface. Java Beans looked good as they
are familiar to the Java programmer and make a very good input for
StringTemplate.

HTH

Oliver

2005/10/29, eric nelson <wirecracker@gmail.com>:
> I'm trying to modify the java.g grammar file so that I can use
> StringTemplate for outputting the file.  The input is a Java file.  I would
> like the output to be Java also.  So, yes, basically no change in content
> ... mabye some spacing will differ here or there.  I am still learning to
> use ANTLR and StringTemplate and I've written a Java.stg file based on what
> I think I know so far.  Exerpts from java.g and Java.stg appear below.  One
> of the questions I have is how to handle the "|" (or) symbol (i.e.
> classDefinition | interfaceDefinition).  The way I have it right now there
> would be a list of "modifiers", a list of "classDefinitions", and a list of
> interfaceDefinitions (then naturally I would have a question about the " |
> s:SEMI!" ... but one question at a time ;)  So, the problem in Java.stg is
> how to match up the correct "modifiers" with the corresponding
> "interfaceDefinition" or "classDefinition".  Or what if there is a
> classDefinition with no modifier, etc.  I am quite convinced that my
> Java.stg template (typeDefinition in particular) and/or my java.g code has
> erred somewhere.  Any thoughts?  This is HUGE since this will help me
> understand how to approach the "field" rule in java.g .... if anyone has
> some hints on a "field" template that would also be great!  Thanks :) - e
>
>
> java.g exerpt (java 1.3 grammar)
>
> //////////////////////////////////////////////////////////////////////////////////////////////////
> // A type definition in a file is either a class or interface definition.
> typeDefinition returns [StringTemplate
> code=template("typeDefinition")]
> options {defaultErrorHandler = true;}
> {StringTemplate mod=null, cd=null, id=null, semi=null;}
>      :      mod=m:modifiers! {code.setAttribute("modifiers", mod);}
>             ( cd=classDefinition[#m] { code.setAttribute("classDefinitions",
> cd);}
>             | id=interfaceDefinition[#m]
> {code.setAttribute("interfaceDefinitions", id);}
>             )
>      |      s:SEMI!
> {semi=template("lexer_semi");semi.setAttribute("semi",
> s.getText());code.setAttribute("semi", semi);}
>      ;
>
>
> //////////////////////////////////////////////////////////////////////////////////////////////////
>
>
> Java.stg exerpt
>
> //////////////////////////////////////////////////////////////////////////////////////////////////
> typeDefinition(modifiers,classDefinitions,interfaceDefinitions,semi)
> ::= <<
> <modifiers><classDefinitions><interfaceDefinitions><semi>
> >>
>
>
> modifiers(modifiers) ::= "<modifiers>"
>
> modifier(modifier) ::= "<modifier>"
>
> classDefinition(ident,superClassClause,implementsClause,classBlock)
> ::= <<
> class <ident> <superClassClause> <implementsClause>
> <classBlock>
> >>
>
> interfaceDefinition() ::= <<
> not yet completed
> >>
>
> //////////////////////////////////////////////////////////////////////////////////////////////////
>
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest@antlr.org
> http://www.antlr.org:8080/mailman/listinfo/stringtemplate-interest
>
>
>
