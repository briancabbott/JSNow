From parrt at cs.usfca.edu  Thu Jul  2 11:47:48 2009
From: parrt at cs.usfca.edu (Terence Parr)
Date: Thu, 2 Jul 2009 11:47:48 -0700
Subject: [stringtemplate-interest] separator: a fix or breaking backward
	compatibility?
Message-ID: <29DA482E-32CE-4C22-8925-E1F45C9FD5B9@cs.usfca.edu>

Hi,

I've built an awesome example using ST for the book. Given a single  
Class object, ST will generate all of the SQL and Java code necessary  
to serialize and deserialize objects of that type. no Java code used  
at all to generate the output :)

HOWEVER, it exposed a serious problem in ST behavior.  Unless I can  
fix this, I will have to add some Java code to do processing to  
generate the SQL, which I don't want to do.

Consider the following generation of a comma separated list of names:

<names; separator=",">

There is a separator generated in between every name in the list. If  
names is null, nothing is generated. If names has length one, there is  
no separator generated.

Now, consider the following anonymous template application to a list  
of names:

<names:{n | <if(n.cool)><n><endif>}; separator=",">

It will only a name if that name is "cool" (has field cool true or  
method isCool() true). The problem is that when n.cool is false, you  
still get an operator.

This is a serious problem in terms of generating output because there  
is no way to get around this bug or feature! The answer must lie in  
what the result of a false IF is exactly. Is it missing (null) or  
empty ("")???

If the result is missing, then no separator should be generated.  
However, if it's empty, we should get a separator.

I'm proposing that the result is missing not empty. If we truly want  
empty, we can do this

<names:{n | <if(n.cool)><n><else><endif>}; separator=",">

The else clause is present but empty, right?

I'm not sure how hard it is to fix this IF problem. But, I need a vote  
from people to tell me if it will break something they rely on.

This would be a bug fix release like 3.2.1 or perhaps 3.3 if I add any  
small features. This will not be the overall rewrite, which I will  
begin after the book.

Amazing how writing a book exposes all of the weird nooks and crannies  
in a tool. Ha! Book-driven functionality testing :)

So, should I "fix" it?

Ter

From monty at codetransform.com  Thu Jul  2 11:52:03 2009
From: monty at codetransform.com (Monty Zukowski)
Date: Thu, 2 Jul 2009 11:52:03 -0700
Subject: [stringtemplate-interest] separator: a fix or breaking backward
	compatibility?
In-Reply-To: <29DA482E-32CE-4C22-8925-E1F45C9FD5B9@cs.usfca.edu>
References: <29DA482E-32CE-4C22-8925-E1F45C9FD5B9@cs.usfca.edu>
Message-ID: <73e8e3430907021152j17c3ac22l5a011e9f47b874dd@mail.gmail.com>

I vote to fix it. It won't break any of my templates and I think
you've nailed down the behavior I would have expected anyways.

Monty

On Thu, Jul 2, 2009 at 11:47 AM, Terence Parr<parrt at cs.usfca.edu> wrote:
> Hi,
>
> I've built an awesome example using ST for the book. Given a single
> Class object, ST will generate all of the SQL and Java code necessary
> to serialize and deserialize objects of that type. no Java code used
> at all to generate the output :)
>
> HOWEVER, it exposed a serious problem in ST behavior. ?Unless I can
> fix this, I will have to add some Java code to do processing to
> generate the SQL, which I don't want to do.
>
> Consider the following generation of a comma separated list of names:
>
> <names; separator=",">
>
> There is a separator generated in between every name in the list. If
> names is null, nothing is generated. If names has length one, there is
> no separator generated.
>
> Now, consider the following anonymous template application to a list
> of names:
>
> <names:{n | <if(n.cool)><n><endif>}; separator=",">
>
> It will only a name if that name is "cool" (has field cool true or
> method isCool() true). The problem is that when n.cool is false, you
> still get an operator.
>
> This is a serious problem in terms of generating output because there
> is no way to get around this bug or feature! The answer must lie in
> what the result of a false IF is exactly. Is it missing (null) or
> empty ("")???
>
> If the result is missing, then no separator should be generated.
> However, if it's empty, we should get a separator.
>
> I'm proposing that the result is missing not empty. If we truly want
> empty, we can do this
>
> <names:{n | <if(n.cool)><n><else><endif>}; separator=",">
>
> The else clause is present but empty, right?
>
> I'm not sure how hard it is to fix this IF problem. But, I need a vote
> from people to tell me if it will break something they rely on.
>
> This would be a bug fix release like 3.2.1 or perhaps 3.3 if I add any
> small features. This will not be the overall rewrite, which I will
> begin after the book.
>
> Amazing how writing a book exposes all of the weird nooks and crannies
> in a tool. Ha! Book-driven functionality testing :)
>
> So, should I "fix" it?
>
> Ter
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>

From parrt at cs.usfca.edu  Thu Jul  2 11:53:18 2009
From: parrt at cs.usfca.edu (Terence Parr)
Date: Thu, 2 Jul 2009 11:53:18 -0700
Subject: [stringtemplate-interest] separator: a fix or breaking backward
	compatibility?
In-Reply-To: <73e8e3430907021152j17c3ac22l5a011e9f47b874dd@mail.gmail.com>
References: <29DA482E-32CE-4C22-8925-E1F45C9FD5B9@cs.usfca.edu>
	<73e8e3430907021152j17c3ac22l5a011e9f47b874dd@mail.gmail.com>
Message-ID: <B0E35D81-1928-4A4D-8E61-149A732864A3@cs.usfca.edu>


On Jul 2, 2009, at 11:52 AM, Monty Zukowski wrote:

> I vote to fix it. It won't break any of my templates and I think
> you've nailed down the behavior I would have expected anyways.

Yeah, this is really annoying because there's no way to get around.  
The new version will handle empty and missing properly. I will be  
making a Empty object.

Ter

From parrt at cs.usfca.edu  Thu Jul  2 12:02:54 2009
From: parrt at cs.usfca.edu (Terence Parr)
Date: Thu, 2 Jul 2009 12:02:54 -0700
Subject: [stringtemplate-interest] separator: a fix or breaking backward
	compatibility?
In-Reply-To: <29DA482E-32CE-4C22-8925-E1F45C9FD5B9@cs.usfca.edu>
References: <29DA482E-32CE-4C22-8925-E1F45C9FD5B9@cs.usfca.edu>
Message-ID: <D5E3F77F-F89F-4139-957F-730BF458B2F4@cs.usfca.edu>

Wow. Apparently, I used to think that false conditional if statements  
yielded separators. Take a look at the following test case:

	public void testEmptyIteratedConditionalValueGetsSeparator() throws  
Exception {
		StringTemplateGroup group =
				new StringTemplateGroup("test");
		StringTemplateErrorListener errors = new ErrorBuffer();
		group.setErrorListener(errors);
		StringTemplate t = new StringTemplate(group,
			"$users:{$if(it.ok)$$it.name$$endif$}; separator=\",\"$");
		t.setAttribute("users.{name,ok}", "Terence", new Boolean(true));
		t.setAttribute("users.{name,ok}", "Tom", new Boolean(false));
		t.setAttribute("users.{name,ok}", "Frank", new Boolean(true));
		t.setAttribute("users.{name,ok}", "Johnny", new Boolean(false));
		// empty conditional values get no separator
		String expecting="Terence,,Frank,";
		String result = t.toString();
		assertEquals(expecting, result);
	}

Now, within else that's empty, it should definitely give the separator.

	public void testEmptyIteratedConditionalWithElseValueGetsSeparator()  
throws Exception {
		StringTemplateGroup group =
				new StringTemplateGroup("test");
		StringTemplateErrorListener errors = new ErrorBuffer();
		group.setErrorListener(errors);
		StringTemplate t = new StringTemplate(group,
			"$users:{$if(it.ok)$$it.name$$else$$endif$}; separator=\",\"$");
		t.setAttribute("users.{name,ok}", "Terence", new Boolean(true));
		t.setAttribute("users.{name,ok}", "Tom", new Boolean(false));
		t.setAttribute("users.{name,ok}", "Frank", new Boolean(true));
		t.setAttribute("users.{name,ok}", "Johnny", new Boolean(false));
		// empty conditional values get no separator
		String expecting="Terence,,Frank,";
		String result = t.toString();
		assertEquals(expecting, result);
	}

So, I'm going to fix it so the first test case gives the opposite  
result ;)

Ter

On Jul 2, 2009, at 11:47 AM, Terence Parr wrote:

> Hi,
>
> I've built an awesome example using ST for the book. Given a single
> Class object, ST will generate all of the SQL and Java code necessary
> to serialize and deserialize objects of that type. no Java code used
> at all to generate the output :)
>
> HOWEVER, it exposed a serious problem in ST behavior.  Unless I can
> fix this, I will have to add some Java code to do processing to
> generate the SQL, which I don't want to do.
>
> Consider the following generation of a comma separated list of names:
>
> <names; separator=",">
>
> There is a separator generated in between every name in the list. If
> names is null, nothing is generated. If names has length one, there is
> no separator generated.
>
> Now, consider the following anonymous template application to a list
> of names:
>
> <names:{n | <if(n.cool)><n><endif>}; separator=",">
>
> It will only a name if that name is "cool" (has field cool true or
> method isCool() true). The problem is that when n.cool is false, you
> still get an operator.
>
> This is a serious problem in terms of generating output because there
> is no way to get around this bug or feature! The answer must lie in
> what the result of a false IF is exactly. Is it missing (null) or
> empty ("")???
>
> If the result is missing, then no separator should be generated.
> However, if it's empty, we should get a separator.
>
> I'm proposing that the result is missing not empty. If we truly want
> empty, we can do this
>
> <names:{n | <if(n.cool)><n><else><endif>}; separator=",">
>
> The else clause is present but empty, right?
>
> I'm not sure how hard it is to fix this IF problem. But, I need a vote
> from people to tell me if it will break something they rely on.
>
> This would be a bug fix release like 3.2.1 or perhaps 3.3 if I add any
> small features. This will not be the overall rewrite, which I will
> begin after the book.
>
> Amazing how writing a book exposes all of the weird nooks and crannies
> in a tool. Ha! Book-driven functionality testing :)
>
> So, should I "fix" it?
>
> Ter
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest


From jimi at temporal-wave.com  Thu Jul  2 12:51:53 2009
From: jimi at temporal-wave.com (Jim Idle)
Date: Thu, 02 Jul 2009 12:51:53 -0700
Subject: [stringtemplate-interest] separator: a fix or breaking backward
 compatibility?
In-Reply-To: <29DA482E-32CE-4C22-8925-E1F45C9FD5B9@cs.usfca.edu>
References: <29DA482E-32CE-4C22-8925-E1F45C9FD5B9@cs.usfca.edu>
Message-ID: <4A4D0FD9.1060301@temporal-wave.com>

An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20090702/3af01412/attachment.html 

From parrt at cs.usfca.edu  Thu Jul  2 12:56:31 2009
From: parrt at cs.usfca.edu (Terence Parr)
Date: Thu, 2 Jul 2009 12:56:31 -0700
Subject: [stringtemplate-interest] separator: a fix or breaking backward
	compatibility?
In-Reply-To: <4A4D0FD9.1060301@temporal-wave.com>
References: <29DA482E-32CE-4C22-8925-E1F45C9FD5B9@cs.usfca.edu>
	<4A4D0FD9.1060301@temporal-wave.com>
Message-ID: <E25E0CEE-A0DE-46EC-81B4-AA5FFED82DC6@cs.usfca.edu>

we already have null="6" option which replaces null objects in  
iteration with 6 :)
Ter
On Jul 2, 2009, at 12:51 PM, Jim Idle wrote:

> Terence Parr wrote:
>>
>> Hi,
>>
>> I've built an awesome example using ST for the book. Given a single
>> Class object, ST will generate all of the SQL and Java code necessary
>> to serialize and deserialize objects of that type. no Java code used
>> at all to generate the output :)
>>
>> HOWEVER, it exposed a serious problem in ST behavior.  Unless I can
>> fix this, I will have to add some Java code to do processing to
>> generate the SQL, which I don't want to do.
>>
>> Consider the following generation of a comma separated list of names:
>>
>> <names; separator=",">
>>
>> There is a separator generated in between every name in the list. If
>> names is null, nothing is generated. If names has length one, there  
>> is
>> no separator generated.
>>
>> Now, consider the following anonymous template application to a list
>> of names:
>>
>> <names:{n | <if(n.cool)><n><endif>}; separator=",">
>>
>> It will only a name if that name is "cool" (has field cool true or
>> method isCool() true). The problem is that when n.cool is false, you
>> still get an operator.
>>
>> This is a serious problem in terms of generating output because there
>> is no way to get around this bug or feature! The answer must lie in
>> what the result of a false IF is exactly. Is it missing (null) or
>> empty ("")???
>>
>> If the result is missing, then no separator should be generated.
>> However, if it's empty, we should get a separator.
>>
>> I'm proposing that the result is missing not empty. If we truly want
>> empty, we can do this
>>
>> <names:{n | <if(n.cool)><n><else><endif>}; separator=",">
>>
>> The else clause is present but empty, right?
>>
>> I'm not sure how hard it is to fix this IF problem. But, I need a  
>> vote
>> from people to tell me if it will break something they rely on.
>>
>> This would be a bug fix release like 3.2.1 or perhaps 3.3 if I add  
>> any
>> small features. This will not be the overall rewrite, which I will
>> begin after the book.
>>
>> Amazing how writing a book exposes all of the weird nooks and  
>> crannies
>> in a tool. Ha! Book-driven functionality testing :)
>>
>> So, should I "fix" it?
>>
> I can't think of anything I use that would change if you changed  
> this behavior, but I can imagine that other things might.
>
> How about:
>
> <names:{n |<if(n.cool)><n><endif>}; separator=",", skipifempty,  
> skipifnull> /* empty is defined as "" */
>
> or similar, depending how you want people to think about this. I do  
> think though, that the original default probably should have skipped  
> the separator if the resulting value was null. But generally,  
> changing this after the fact usually breaks someone's work  
> somewhere, though I have trouble thinking of any practical  
> application for keeping delimiters when the value is null. It might  
> be though that people have inadvertently relied on this without  
> knowing it. For instance if you generate a function call where an  
> empty delimiter means use a default value:
>
> funccall(7,,7)
>
> deffun funccal(a=6, b=6, c=6,)
>
> Contrived perhaps?
>
> Jim
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest


From parrt at cs.usfca.edu  Thu Jul  2 14:15:21 2009
From: parrt at cs.usfca.edu (Terence Parr)
Date: Thu, 2 Jul 2009 14:15:21 -0700
Subject: [stringtemplate-interest] fixed if-condition thing
Message-ID: <07B46D26-19DE-4040-B8ED-9EE86074DFA2@cs.usfca.edu>

o IF with false condition results in missing not empty value. So,
   <names:{n | <if(n.cool)><n><endif>}; separator=",">
   doesn't emit a separator for non-cool names. See
   http://www.antlr.org/pipermail/stringtemplate-interest/2009-July/002020.html

   WARNING: You now pay a penalty now for a separator.  It writes each  
element to
   a temp buffer before emitting.  Expensive.
   Later, I can optimize to check if one chunk in template and it's a  
conditional.

it's only in the depot.

Ter

From parrt at cs.usfca.edu  Thu Jul  2 15:17:32 2009
From: parrt at cs.usfca.edu (Terence Parr)
Date: Thu, 2 Jul 2009 15:17:32 -0700
Subject: [stringtemplate-interest] fixed if-condition thing
In-Reply-To: <07B46D26-19DE-4040-B8ED-9EE86074DFA2@cs.usfca.edu>
References: <07B46D26-19DE-4040-B8ED-9EE86074DFA2@cs.usfca.edu>
Message-ID: <5A501EBF-0A7A-4A0D-9AA4-D9441571490A@cs.usfca.edu>

optimzed:

   WARNING: You now pay a penalty now for a separator if the iterated  
value is
   nullable.  Nullable if iterable or a template with nothing but IF  
statements.
   If nullable, ST writes each element to a temp buffer before  
emitting.  Expensive.

Ter
On Jul 2, 2009, at 2:15 PM, Terence Parr wrote:

> o IF with false condition results in missing not empty value. So,
>   <names:{n | <if(n.cool)><n><endif>}; separator=",">
>   doesn't emit a separator for non-cool names. See
>   http://www.antlr.org/pipermail/stringtemplate-interest/2009-July/002020.html
>
>   WARNING: You now pay a penalty now for a separator.  It writes each
> element to
>   a temp buffer before emitting.  Expensive.
>   Later, I can optimize to check if one chunk in template and it's a
> conditional.
>
> it's only in the depot.
>
> Ter
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest


From jdmitchell at gmail.com  Thu Jul  2 19:15:38 2009
From: jdmitchell at gmail.com (John D. Mitchell)
Date: Thu, 2 Jul 2009 19:15:38 -0700
Subject: [stringtemplate-interest] separator: a fix or breaking backward
	compatibility?
In-Reply-To: <29DA482E-32CE-4C22-8925-E1F45C9FD5B9@cs.usfca.edu>
References: <29DA482E-32CE-4C22-8925-E1F45C9FD5B9@cs.usfca.edu>
Message-ID: <F6810B01-1CC7-44C7-9567-B6FBB19BFFBD@gmail.com>

Yes, it seems reasonable to fix this before the rewrite.

Have fun,
John


From zen at freedbms.net  Fri Jul  3 07:40:12 2009
From: zen at freedbms.net (Zenaan Harkness)
Date: Sat, 4 Jul 2009 00:40:12 +1000
Subject: [stringtemplate-interest] fixed if-condition thing
In-Reply-To: <5A501EBF-0A7A-4A0D-9AA4-D9441571490A@cs.usfca.edu>
References: <07B46D26-19DE-4040-B8ED-9EE86074DFA2@cs.usfca.edu>
	<5A501EBF-0A7A-4A0D-9AA4-D9441571490A@cs.usfca.edu>
Message-ID: <20090703144012.GF7092@freedbms.net>

I thought I raised this some time back. Perhaps that was only in my
mind. Either way, very pleased to see this one fixed, despite
performance bug.

BTW, for next version of ST (after STBook v1), is there a chance an ST
spec might be in the works, ala YAML spec (I assume JSON has one too)?

I find YAML spec nice to read - perhaps use as a template?

Regards
Zen


On Thu, Jul 02, 2009 at 03:17:32PM -0700, Terence Parr wrote:
> optimzed:
> 
>    WARNING: You now pay a penalty now for a separator if the iterated  
> value is
>    nullable.  Nullable if iterable or a template with nothing but IF  
> statements.
>    If nullable, ST writes each element to a temp buffer before  
> emitting.  Expensive.
> 
> Ter
> On Jul 2, 2009, at 2:15 PM, Terence Parr wrote:
> 
> > o IF with false condition results in missing not empty value. So,
> >   <names:{n | <if(n.cool)><n><endif>}; separator=",">
> >   doesn't emit a separator for non-cool names. See
> >   http://www.antlr.org/pipermail/stringtemplate-interest/2009-July/002020.html
> >
> >   WARNING: You now pay a penalty now for a separator.  It writes each
> > element to
> >   a temp buffer before emitting.  Expensive.
> >   Later, I can optimize to check if one chunk in template and it's a
> > conditional.
> >
> > it's only in the depot.
> >
> > Ter
> > _______________________________________________
> > stringtemplate-interest mailing list
> > stringtemplate-interest at antlr.org
> > http://www.antlr.org/mailman/listinfo/stringtemplate-interest
> 
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest

-- 
Homepage: www.SoulSound.net -- Free Australia: www.UPMART.org
Please respect the confidentiality of this email as sensibly warranted.

From s.clover at gmail.com  Mon Jul  6 18:44:58 2009
From: s.clover at gmail.com (Sterling Clover)
Date: Mon, 6 Jul 2009 21:44:58 -0400
Subject: [stringtemplate-interest] separator: a fix or breaking backward
	compatibility?
In-Reply-To: <29DA482E-32CE-4C22-8925-E1F45C9FD5B9@cs.usfca.edu>
References: <29DA482E-32CE-4C22-8925-E1F45C9FD5B9@cs.usfca.edu>
Message-ID: <8D8FCCAB-37AD-4A28-97A4-E6847C0C1AB8@gmail.com>

I think I'm late to the party here, but I really dislike this change.  
The functionality you describe is indeed mostly missing without it,  
but the change feels semantically hackish. It feels cleaner to reason  
about a language where a template *always* produces a value than one  
where a template optionally produces one. For example, this is what  
you describe:

<names:{n | <if(n.cool)><n><endif>}; separator=",">

But what about this (note the extra whitespace):

<names:{n |  <if(n.cool)><n><endif>}; separator=",">

To have the two behave so differently seems very unintuitive.

What I think you really want is something closer to standard list  
comprehension syntax, where a list is filtered on a condition. Since  
this provides the same power as what you've got below, I don't think  
it would hurt the logic/view split that stringtemplate enforces, and  
it would make templates more concise and readable. Now as to what the  
syntax is, that's a different issue. Something like the following,  
perhaps?

<names:{n: n.cool | n}; separator=",">

The problem here is of course the colon is somewhat unintuitive, but  
the standard set builder symbol for "such that" is the vertical bar,  
which is already taken. Other suggestions, all equally not ideal,  
follow:

<names:{n st. n.cool | n}; separator=",">
<names:{n & n.cool | n}; separator=",">
<names:{n when n.cool | n}; separator=",">
<names:{n where n.cool | n}; separator=",">
<names:{n % n.cool | n}; separator=",">
<names:{n ^ n.cool | n}; separator=",">

You get the idea.

Cheers,
Sterl.

On Jul 2, 2009, at 2:47 PM, Terence Parr wrote:

> Hi,
>
> I've built an awesome example using ST for the book. Given a single
> Class object, ST will generate all of the SQL and Java code necessary
> to serialize and deserialize objects of that type. no Java code used
> at all to generate the output :)
>
> HOWEVER, it exposed a serious problem in ST behavior.  Unless I can
> fix this, I will have to add some Java code to do processing to
> generate the SQL, which I don't want to do.
>
> Consider the following generation of a comma separated list of names:
>
> <names; separator=",">
>
> There is a separator generated in between every name in the list. If
> names is null, nothing is generated. If names has length one, there is
> no separator generated.
>
> Now, consider the following anonymous template application to a list
> of names:
>
> <names:{n | <if(n.cool)><n><endif>}; separator=",">
>
> It will only a name if that name is "cool" (has field cool true or
> method isCool() true). The problem is that when n.cool is false, you
> still get an operator.
>
> This is a serious problem in terms of generating output because there
> is no way to get around this bug or feature! The answer must lie in
> what the result of a false IF is exactly. Is it missing (null) or
> empty ("")???
>
> If the result is missing, then no separator should be generated.
> However, if it's empty, we should get a separator.
>
> I'm proposing that the result is missing not empty. If we truly want
> empty, we can do this
>
> <names:{n | <if(n.cool)><n><else><endif>}; separator=",">
>
> The else clause is present but empty, right?
>
> I'm not sure how hard it is to fix this IF problem. But, I need a vote
> from people to tell me if it will break something they rely on.
>
> This would be a bug fix release like 3.2.1 or perhaps 3.3 if I add any
> small features. This will not be the overall rewrite, which I will
> begin after the book.
>
> Amazing how writing a book exposes all of the weird nooks and crannies
> in a tool. Ha! Book-driven functionality testing :)
>
> So, should I "fix" it?
>
> Ter
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest


From parrt at cs.usfca.edu  Mon Jul  6 19:18:59 2009
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon, 6 Jul 2009 19:18:59 -0700
Subject: [stringtemplate-interest] separator: a fix or breaking backward
	compatibility?
In-Reply-To: <8D8FCCAB-37AD-4A28-97A4-E6847C0C1AB8@gmail.com>
References: <29DA482E-32CE-4C22-8925-E1F45C9FD5B9@cs.usfca.edu>
	<8D8FCCAB-37AD-4A28-97A4-E6847C0C1AB8@gmail.com>
Message-ID: <279B8754-350C-4819-BE43-5EB8680C4AE1@cs.usfca.edu>


On Jul 6, 2009, at 6:44 PM, Sterling Clover wrote:

> I think I'm late to the party here, but I really dislike this  
> change. The functionality you describe is indeed mostly missing  
> without it, but the change feels semantically hackish. It feels  
> cleaner to reason about a language where a template *always*  
> produces a value than one where a template optionally produces one.  
> For example, this is what you describe:
>
> <names:{n | <if(n.cool)><n><endif>}; separator=",">
>
> But what about this (note the extra whitespace):
>
> <names:{n |  <if(n.cool)><n><endif>}; separator=",">
>
> To have the two behave so differently seems very unintuitive.

Hi :)  Well, i do say in the manual that i consume all whitespace  
after the '|' char.

> What I think you really want is something closer to standard list  
> comprehension syntax, where a list is filtered on a condition. Since  
> this provides the same power as what you've got below, I don't think  
> it would hurt the logic/view split that stringtemplate enforces, and  
> it would make templates more concise and readable. Now as to what  
> the syntax is, that's a different issue. Something like the  
> following, perhaps?
>
> <names:{n: n.cool | n}; separator=",">
>
> The problem here is of course the colon is somewhat unintuitive, but  
> the standard set builder symbol for "such that" is the vertical bar,  
> which is already taken. Other suggestions, all equally not ideal,  
> follow:
>
> <names:{n st. n.cool | n}; separator=",">
> <names:{n & n.cool | n}; separator=",">
> <names:{n when n.cool | n}; separator=",">
> <names:{n where n.cool | n}; separator=",">
> <names:{n % n.cool | n}; separator=",">
> <names:{n ^ n.cool | n}; separator=",">
>
> You get the idea.

Yep. it's a good idea.  The problem is that you might get multiple IF  
in a row that are "nullable".  Or, you could ref an attribute that is  
a list with no elements.

<foo : { f | <n>}; separator=", ">

if foo is List<List<string>> and one of the List<string> is length 0,  
you'd want to avoid the extra separator, right?

Thanks,
Ter

From zen at freedbms.net  Mon Jul  6 22:38:33 2009
From: zen at freedbms.net (Zenaan Harkness)
Date: Tue, 7 Jul 2009 15:38:33 +1000
Subject: [stringtemplate-interest] separator: a fix or breaking	backward
	compatibility?
In-Reply-To: <279B8754-350C-4819-BE43-5EB8680C4AE1@cs.usfca.edu>
References: <29DA482E-32CE-4C22-8925-E1F45C9FD5B9@cs.usfca.edu>
	<8D8FCCAB-37AD-4A28-97A4-E6847C0C1AB8@gmail.com>
	<279B8754-350C-4819-BE43-5EB8680C4AE1@cs.usfca.edu>
Message-ID: <20090707053833.GA7539@freedbms.net>

On Mon, Jul 06, 2009 at 07:18:59PM -0700, Terence Parr wrote:
> On Jul 6, 2009, at 6:44 PM, Sterling Clover wrote:
> > What I think you really want is something closer to standard list  
> > comprehension syntax, where a list is filtered on a condition. Since  
> > this provides the same power as what you've got below, I don't think  
> > it would hurt the logic/view split that stringtemplate enforces, and  
> > it would make templates more concise and readable. Now as to what  
> > the syntax is, that's a different issue. Something like the  
> > following, perhaps?
> >
> > <names:{n: n.cool | n}; separator=",">
> >
> > The problem here is of course the colon is somewhat unintuitive, but  
> > the standard set builder symbol for "such that" is the vertical bar,  
> > which is already taken. Other suggestions, all equally not ideal,  
> > follow:
> >
> > <names:{n st. n.cool | n}; separator=",">
> > <names:{n & n.cool | n}; separator=",">
> > <names:{n when n.cool | n}; separator=",">
> > <names:{n where n.cool | n}; separator=",">
> > <names:{n % n.cool | n}; separator=",">
> > <names:{n ^ n.cool | n}; separator=",">
> >
> > You get the idea.
> 
> Yep. it's a good idea.  The problem is that you might get multiple IF  
> in a row that are "nullable".  Or, you could ref an attribute that is  
> a list with no elements.
> 
> <foo : { f | <n>}; separator=", ">
> 
> if foo is List<List<string>> and one of the List<string> is length 0,  
> you'd want to avoid the extra separator, right?

Perhaps a good time to start looking at some standard lisp operators -
list concatenation, recursive function application/ conditional testing,
etc.

We're already seeing the fleshing out of first,last,rest,start functions
(or whatever they're called) - lisp is the original LISt Processor, of
course :)

Lisp is like the original pure state we all descended from, and are
slowly clamouring back to.

-- 
Homepage: www.SoulSound.net -- Free Australia: www.UPMART.org
Please respect the confidentiality of this email as sensibly warranted.

From parrt at cs.usfca.edu  Tue Jul  7 09:56:02 2009
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue, 7 Jul 2009 09:56:02 -0700
Subject: [stringtemplate-interest] separator: a fix or breaking	backward
	compatibility?
In-Reply-To: <20090707053833.GA7539@freedbms.net>
References: <29DA482E-32CE-4C22-8925-E1F45C9FD5B9@cs.usfca.edu>
	<8D8FCCAB-37AD-4A28-97A4-E6847C0C1AB8@gmail.com>
	<279B8754-350C-4819-BE43-5EB8680C4AE1@cs.usfca.edu>
	<20090707053833.GA7539@freedbms.net>
Message-ID: <3B048BE0-E4D2-4F5F-A2E4-044F0F643352@cs.usfca.edu>

Yep, i plan on adding lots more operators :)
Ter
>
> Perhaps a good time to start looking at some standard lisp operators -
> list concatenation, recursive function application/ conditional  
> testing,
> etc.
>
> We're already seeing the fleshing out of first,last,rest,start  
> functions
> (or whatever they're called) - lisp is the original LISt Processor, of
> course :)
>
> Lisp is like the original pure state we all descended from, and are
> slowly clamouring back to.
>
> -- 
> Homepage: www.SoulSound.net -- Free Australia: www.UPMART.org
> Please respect the confidentiality of this email as sensibly  
> warranted.
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest


From parrt at cs.usfca.edu  Tue Jul  7 11:49:04 2009
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue, 7 Jul 2009 11:49:04 -0700
Subject: [stringtemplate-interest] fixed if-condition thing
In-Reply-To: <20090703144012.GF7092@freedbms.net>
References: <07B46D26-19DE-4040-B8ED-9EE86074DFA2@cs.usfca.edu>
	<5A501EBF-0A7A-4A0D-9AA4-D9441571490A@cs.usfca.edu>
	<20090703144012.GF7092@freedbms.net>
Message-ID: <59779990-7E25-493B-81C4-9061325BFE4C@cs.usfca.edu>


On Jul 3, 2009, at 7:40 AM, Zenaan Harkness wrote:

> I thought I raised this some time back. Perhaps that was only in my
> mind. Either way, very pleased to see this one fixed, despite
> performance bug.

Hooray! sorry it took me so long. I can't wait to finish this book  
this month. Then I have an entire year of software development!

> BTW, for next version of ST (after STBook v1), is there a chance an ST
> spec might be in the works, ala YAML spec (I assume JSON has one too)?

I should take a look at that. I've already broached the subject of  
doing an ST book with the publisher. My fear is that the market is not  
large enough for the book to sell well. They may not go for it.

> I find YAML spec nice to read - perhaps use as a template?

Looks nice.

T

From zen at freedbms.net  Wed Jul  8 01:29:58 2009
From: zen at freedbms.net (Zenaan Harkness)
Date: Wed, 8 Jul 2009 18:29:58 +1000
Subject: [stringtemplate-interest] fixed if-condition thing
In-Reply-To: <59779990-7E25-493B-81C4-9061325BFE4C@cs.usfca.edu>
References: <07B46D26-19DE-4040-B8ED-9EE86074DFA2@cs.usfca.edu>
	<5A501EBF-0A7A-4A0D-9AA4-D9441571490A@cs.usfca.edu>
	<20090703144012.GF7092@freedbms.net>
	<59779990-7E25-493B-81C4-9061325BFE4C@cs.usfca.edu>
Message-ID: <20090708082958.GB22607@freedbms.net>

On Tue, Jul 07, 2009 at 11:49:04AM -0700, Terence Parr wrote:
>
> On Jul 3, 2009, at 7:40 AM, Zenaan Harkness wrote:
>
>> I thought I raised this some time back. Perhaps that was only in my
>> mind. Either way, very pleased to see this one fixed, despite
>> performance bug.
>
> Hooray! sorry it took me so long. I can't wait to finish this book this 
> month. Then I have an entire year of software development!

Yum.


>> BTW, for next version of ST (after STBook v1), is there a chance an ST
>> spec might be in the works, ala YAML spec (I assume JSON has one too)?
>
> I should take a look at that. I've already broached the subject of doing 
> an ST book with the publisher. My fear is that the market is not large 
> enough for the book to sell well. They may not go for it.

I agree. I feel that in a year's time, the landscape may be ready for an
ST book.

I believe an official Specification will be a great contributor to the
ST landscape - professionalism, clarity, certainty for implementers,
cross-implementation compatibility, test case production, so many
advantages, no disadvantages :)

Did I mention I like the action of creating an ST Specification v1?

The specification will take some time, best part of a year at least,
just for version 1 - draft, review, edit, repeat. It's the kind of thing
we want to savour, like a good cognac, sipping it, enjoying each
mouthful. If it takes two years to get STSpecV1 out the door, that's
just fine.

And we get the opportunity to pontificate on this list, assessing the
spec in parts, and in its entirety, laying out fundamental design
principals at the start of the spec, optimising details, etc eg:
   -  MVC separation
   -  LISt Processing language semantics
   -  Minimal operators, eg conditionals, but no arithmetic.
   -  Of course, syntax variability ($..$ vs <..>) - references to SGML
      by way of comparison, perhaps ST syntax is subset of SGML (I think
      pretty much everything is SGML subset)

Also, spec will be a great exercise. It will bring a higher level of
awareness to:
   -  the principles of the goodness of ST
   -  the design tradeoffs being made to establish strong MVC
   -  to the syntax, both consistencies and inconsistencies
   -  the professionalism inherent in ST, which we take for granted, but
      newcomers may not see so clearly

The process of writing down each of these points above, and the rest,
will be very very useful. It will help us make decisions about ST 3 (or
4, whatever comes after the spec is finalised) such as whether to be
fully backward compatible or, whether to break backwards compatibility
in syntax for the benefit of increase in purity to the principles of
software engineering, such as
   -  consistency,
   -  maintainability,
   -  performance, etc
   -  we should iterate this list in one chapter of the spec, or the
      book, and describe how ST promotes, adheres to, or compromises,
      each of these principles

(forgotten the link which iterates these principles, I think Joel On
Software may have a version of the list).

Examples of further process benefits to creating STSpec:
   -  a major version jump (ST 3, or 4) is perfect time to consider
      normalisation of syntax
   -  get clear/ fix, inconsistencies of syntax
   -  add missing list operators (eg first,last,rest,initial)
   -  add/ clean up, conditional operators
   -  normalisation of syntax with respect to other languages, in
      particular LISP!

For example, re normalisation with Lisp syntax, should we replace
      ST             Lisp
   -  first    ->    car
   -  rest     ->    cdr

Re LISP, see  http://en.wikipedia.org/wiki/Lisp_(programming_language)

This is a very exciting opportunity!

Regards
Zen


PS: 

http://en.wikiquote.org/wiki/Lisp_programming_language

    * "Lisp is a family of computer programming languages based on formal
      functional calculus."

    * The greatest single programming language ever designed.
          o Alan Kay, on Lisp [citation needed]

    * Lisp isn't a language, it's a building material.
          o Alan Kay

And for another list of Lisp quotes:
http://www.paulgraham.com/quotes.html

I include these quotes, because I feel quite strongly that ST brings
some amazing possibilties to our programming toolbox. From my readings
however, Lisp did it first, and it seems to me in some ways more
elegantly.

The great thing is, we have much to draw on (from the lisp world).

-- 
Homepage: www.SoulSound.net -- Free Australia: www.UPMART.org
Please respect the confidentiality of this email as sensibly warranted.

From rob at fractis.com  Wed Jul  8 03:08:33 2009
From: rob at fractis.com (Robert Byrne)
Date: Wed, 8 Jul 2009 11:08:33 +0100
Subject: [stringtemplate-interest] fixed if-condition thing
In-Reply-To: <20090708082958.GB22607@freedbms.net>
References: <07B46D26-19DE-4040-B8ED-9EE86074DFA2@cs.usfca.edu>	<5A501EBF-0A7A-4A0D-9AA4-D9441571490A@cs.usfca.edu>	<20090703144012.GF7092@freedbms.net>	<59779990-7E25-493B-81C4-9061325BFE4C@cs.usfca.edu>
	<20090708082958.GB22607@freedbms.net>
Message-ID: <00ee01c9ffb4$129fd2b0$37df7810$@com>

>From an external perspective, I think that adopting some semantics of Lisp
may be worthwhile, but the keywords less so. First and Rest make sense and
are easy to remember, car and cdr are far from intuitive and I don't think
ST has enough parity with Lisp to justify it. Head and Tail is another
possibility, and is used in a couple of list processing languages.

-----Original Message-----
From: stringtemplate-interest-bounces at antlr.org
[mailto:stringtemplate-interest-bounces at antlr.org] On Behalf Of Zenaan
Harkness
Sent: 08 July 2009 09:30
To: String Template
Subject: Re: [stringtemplate-interest] fixed if-condition thing

On Tue, Jul 07, 2009 at 11:49:04AM -0700, Terence Parr wrote:
>
> On Jul 3, 2009, at 7:40 AM, Zenaan Harkness wrote:
>
>> I thought I raised this some time back. Perhaps that was only in my
>> mind. Either way, very pleased to see this one fixed, despite
>> performance bug.
>
> Hooray! sorry it took me so long. I can't wait to finish this book this 
> month. Then I have an entire year of software development!

Yum.


>> BTW, for next version of ST (after STBook v1), is there a chance an ST
>> spec might be in the works, ala YAML spec (I assume JSON has one too)?
>
> I should take a look at that. I've already broached the subject of doing 
> an ST book with the publisher. My fear is that the market is not large 
> enough for the book to sell well. They may not go for it.

I agree. I feel that in a year's time, the landscape may be ready for an
ST book.

I believe an official Specification will be a great contributor to the
ST landscape - professionalism, clarity, certainty for implementers,
cross-implementation compatibility, test case production, so many
advantages, no disadvantages :)

Did I mention I like the action of creating an ST Specification v1?

The specification will take some time, best part of a year at least,
just for version 1 - draft, review, edit, repeat. It's the kind of thing
we want to savour, like a good cognac, sipping it, enjoying each
mouthful. If it takes two years to get STSpecV1 out the door, that's
just fine.

And we get the opportunity to pontificate on this list, assessing the
spec in parts, and in its entirety, laying out fundamental design
principals at the start of the spec, optimising details, etc eg:
   -  MVC separation
   -  LISt Processing language semantics
   -  Minimal operators, eg conditionals, but no arithmetic.
   -  Of course, syntax variability ($..$ vs <..>) - references to SGML
      by way of comparison, perhaps ST syntax is subset of SGML (I think
      pretty much everything is SGML subset)

Also, spec will be a great exercise. It will bring a higher level of
awareness to:
   -  the principles of the goodness of ST
   -  the design tradeoffs being made to establish strong MVC
   -  to the syntax, both consistencies and inconsistencies
   -  the professionalism inherent in ST, which we take for granted, but
      newcomers may not see so clearly

The process of writing down each of these points above, and the rest,
will be very very useful. It will help us make decisions about ST 3 (or
4, whatever comes after the spec is finalised) such as whether to be
fully backward compatible or, whether to break backwards compatibility
in syntax for the benefit of increase in purity to the principles of
software engineering, such as
   -  consistency,
   -  maintainability,
   -  performance, etc
   -  we should iterate this list in one chapter of the spec, or the
      book, and describe how ST promotes, adheres to, or compromises,
      each of these principles

(forgotten the link which iterates these principles, I think Joel On
Software may have a version of the list).

Examples of further process benefits to creating STSpec:
   -  a major version jump (ST 3, or 4) is perfect time to consider
      normalisation of syntax
   -  get clear/ fix, inconsistencies of syntax
   -  add missing list operators (eg first,last,rest,initial)
   -  add/ clean up, conditional operators
   -  normalisation of syntax with respect to other languages, in
      particular LISP!

For example, re normalisation with Lisp syntax, should we replace
      ST             Lisp
   -  first    ->    car
   -  rest     ->    cdr

Re LISP, see  http://en.wikipedia.org/wiki/Lisp_(programming_language)

This is a very exciting opportunity!

Regards
Zen


PS: 

http://en.wikiquote.org/wiki/Lisp_programming_language

    * "Lisp is a family of computer programming languages based on formal
      functional calculus."

    * The greatest single programming language ever designed.
          o Alan Kay, on Lisp [citation needed]

    * Lisp isn't a language, it's a building material.
          o Alan Kay

And for another list of Lisp quotes:
http://www.paulgraham.com/quotes.html

I include these quotes, because I feel quite strongly that ST brings
some amazing possibilties to our programming toolbox. From my readings
however, Lisp did it first, and it seems to me in some ways more
elegantly.

The great thing is, we have much to draw on (from the lisp world).

-- 
Homepage: www.SoulSound.net -- Free Australia: www.UPMART.org
Please respect the confidentiality of this email as sensibly warranted.
_______________________________________________
stringtemplate-interest mailing list
stringtemplate-interest at antlr.org
http://www.antlr.org/mailman/listinfo/stringtemplate-interest


From zen at freedbms.net  Wed Jul  8 03:29:02 2009
From: zen at freedbms.net (Zenaan Harkness)
Date: Wed, 8 Jul 2009 20:29:02 +1000
Subject: [stringtemplate-interest] fixed if-condition thing
In-Reply-To: <20090708082958.GB22607@freedbms.net>
References: <07B46D26-19DE-4040-B8ED-9EE86074DFA2@cs.usfca.edu>
	<5A501EBF-0A7A-4A0D-9AA4-D9441571490A@cs.usfca.edu>
	<20090703144012.GF7092@freedbms.net>
	<59779990-7E25-493B-81C4-9061325BFE4C@cs.usfca.edu>
	<20090708082958.GB22607@freedbms.net>
Message-ID: <20090708102902.GA8610@freedbms.net>

On Wed, Jul 08, 2009 at 06:29:58PM +1000, Zenaan Harkness wrote:
> On Tue, Jul 07, 2009 at 11:49:04AM -0700, Terence Parr wrote:
> > On Jul 3, 2009, at 7:40 AM, Zenaan Harkness wrote:
...
> >> BTW, for next version of ST (after STBook v1), is there a chance an ST
> >> spec might be in the works, ala YAML spec (I assume JSON has one too)?
> >
> > I should take a look at that. I've already broached the subject of doing 
> > an ST book with the publisher. My fear is that the market is not large 
> > enough for the book to sell well. They may not go for it.
> 
> I agree. I feel that in a year's time, the landscape may be ready for an
> ST book.
...
>    -  Of course, syntax variability ($..$ vs <..>) - references to SGML
>       by way of comparison, perhaps ST syntax is subset of SGML (I think
>       pretty much everything is SGML subset)

Perhaps there could be an option for a lisp-like syntax?

We might just then be lisp... dunno, just a thought.

...
>    -  normalisation of syntax with respect to other languages, in
>       particular LISP!
> 
> For example, re normalisation with Lisp syntax, should we replace
>       ST             Lisp
>    -  first    ->    car
>    -  rest     ->    cdr
> 
> Re LISP, see  http://en.wikipedia.org/wiki/Lisp_(programming_language)

See also map (Scheme) or mapcar (Common List) as compared with ST's list
iteration/ template application:

   <attribute:(expr)(argument-list)>
   <attribute:t1(argument-list): ... :tN(argument-list)> 

   (mapcar #'+ '(1 2 3 4 5) '(10 20 30 40 50))


"A wide variety of programming paradigms, including imperative,
functional, and message passing styles, find convenient expression in
Scheme."


Namespace Optimization:
Here are some points emphasizing the benefits of simplifying/
regularizing syntax. Lisp is so powerful for a few reasons, primary of
which are that syntax is so regular (function calls, data, structure,
code, are all represented as simple lists), and that code and data use
the same syntax and are stored and processed in the same way as each
other; lisp thereby provides a very powerful way to do meta-programming,
or template programming. And ST, is a template type language.

It may be politically incorrect to refer to reiserfs, however the
concept of maximizing the interactions by reducing the namespaces (eg
syntax), is a foundation principle which is useful to our discussion of
ST and its specification and implementations.

ST has a relatively strict MVC separation; can we emphasize and augment
this further with namespace and syntax minimization/ regularization?:

http://web.archive.org/web/20070927003401/http://www.namesys.com/whitepaper.html
   "The utility of an operating system is more proportional to the
   number of connections possible between its components than it is to
   the number of those components. Namespace fragmentation is the most
   important determinant of that number of possible connections between
   OS components."

The point that Reiser was bringing out with respect to filesystem
semantics/ namespaces, was that we (in Unix) started with files and
directories (and even attempted (problematically) to represent
directories as files), ie just 2 namespaces, but then went and added
permission attributes, owner and group attributes, and later other types
of attributes (eg ACLs), each their _own_ namespace!
   -  Change a file?          touch, rm
   -  Change a directory?     mkdir, rmdir (different to file cmds)
   -  Change owner/ group?    chgroup, chown (same for files/dirs)
   -  Change permissions?     chmod (same for files and dir, good)
   -  Change acls?            Pretty sure it's not vi/ emacs.

As we can see, different commands needed for different entity types. We
don't have unified namespaces, and so our (unix command) syntax is
unnecessarily complex.


http://web.archive.org/web/20070927003321/www.namesys.com/v4/v4.html
   "The expressive power of an information system is proportional not to
   the number of objects that get implemented for it, but instead is
   proportional to the number of possible effective interactions between
   objects in it. (Reiser's Law Of Information Economics)

   This is similar to Adam Smith's observation that the wealth of nations
   is determined not by the number of their inhabitants, but by how well
   connected they are to each other. He traced the development of
   civilization throughout history, and found a consistent correlation
   between connectivity via roads and waterways, and wealth. He also found
   a correlation between specialization and wealth, and suggested that
   greater trade connectivity makes greater specialization economically
   viable.

   You can think of namespaces as forming the roads and waterways that
   connect the components of an operating system. The cost of these
   connecting namespaces is influenced by the number of interfaces that
   they must know how to connect to. That cost is, if they are not clever
   to avoid it, N times N, where N is the number of interfaces, since they
   must write code that knows how to connect every kind to every kind.

   One very important way to reduce the cost of fully connective namespaces
   is to teach all the objects how to use the same interface, so that the
   namespace can connect them without adding any code to the namespace.
   Very commonly, objects with different interfaces are segregated into
   different namespaces.

   If you have two namespaces, one with N objects, and another with M
   objects, the expressive power of the objects they connect is
   proportional to (N times N) plus (M times M), which is less than (N plus
   M) times (N plus M). Try it on a calculator for some arbitrary N and M.
   Usually the cost of inventing the namespaces is much less than the cost
   of the users creating all the objects. This is what makes namespaces so
   exciting to work with: you can have an enormous impact on the
   productivity of the whole system just by being a bit fanatical in
   insisting on simplicity and consistency in a few areas.

   Please remember this analysis later when we describe why we implement
   everything to support a "file" or "directory" interface, and why we
   aren't eager to support objects with unnecessarily different
   namespaces/interfaces --- such as "attributes" that cannot interact with
   files in all the same ways that files can interact with files.
   "

-- 
Homepage: www.SoulSound.net -- Free Australia: www.UPMART.org
Please respect the confidentiality of this email as sensibly warranted.

From s.clover at gmail.com  Thu Jul  9 18:44:35 2009
From: s.clover at gmail.com (Sterling Clover)
Date: Thu, 9 Jul 2009 21:44:35 -0400
Subject: [stringtemplate-interest] separator: a fix or breaking backward
	compatibility?
In-Reply-To: <279B8754-350C-4819-BE43-5EB8680C4AE1@cs.usfca.edu>
References: <29DA482E-32CE-4C22-8925-E1F45C9FD5B9@cs.usfca.edu>
	<8D8FCCAB-37AD-4A28-97A4-E6847C0C1AB8@gmail.com>
	<279B8754-350C-4819-BE43-5EB8680C4AE1@cs.usfca.edu>
Message-ID: <793C9C7E-8D20-4148-B886-7EA7514E2DD6@gmail.com>


On Jul 6, 2009, at 10:18 PM, Terence Parr wrote:

>> But what about this (note the extra whitespace):
>>
>> <names:{n |  <if(n.cool)><n><endif>}; separator=",">
>>
>> To have the two behave so differently seems very unintuitive.
>
> Hi :)  Well, i do say in the manual that i consume all whitespace  
> after the '|' char.

I'll grant that :-). But the point still stands, I think, as the  
whitespace could be placed elsewhere to the same effect. (Unless  
trailing whitespace is consumed as well? I forget.)

>> What I think you really want is something closer to standard list  
>> comprehension syntax, where a list is filtered on a condition.  
>> Since this provides the same power as what you've got below, I  
>> don't think it would hurt the logic/view split that stringtemplate  
>> enforces, and it would make templates more concise and readable.  
>> Now as to what the syntax is, that's a different issue. Something  
>> like the following, perhaps?
>>
>> <names:{n: n.cool | n}; separator=",">
>>
>
> Yep. it's a good idea.  The problem is that you might get multiple  
> IF in a row that are "nullable".  Or, you could ref an attribute  
> that is a list with no elements.

For multiple ifs that are nullable, one could allow simple  
conjunctions in the comprehension. The above example could be:

<names:{n: n.cool, n.reallycool, n.yesimeancool  | n}l separator=", ">

Or, using an ampersand instead of a comma:

<names:{n: n.cool & n.reallycool & n.yesimeancool  | n}l separator=", ">


> <foo : { f | <n>}; separator=", ">
>
> if foo is List<List<string>> and one of the List<string> is length  
> 0, you'd want to avoid the extra separator, right?

Not sure I follow here. This seems to be a distinct issue from how  
ifs are handled? Rather this is about an empty list producing null  
rather than a string when rendered, I suppose.

But can't this be accomplished already anyway?
<strip(foo) : { n | <strip(n)>}; separator=", ">

Cheers,
Sterl.

From parrt at antlr.org  Thu Jul  9 18:50:12 2009
From: parrt at antlr.org (Terence Parr)
Date: Thu, 9 Jul 2009 18:50:12 -0700
Subject: [stringtemplate-interest] ST feature proposal
Message-ID: <F23CAE6F-0460-4C05-87B1-FDB9D1180E9E@antlr.org>

Howdy, I think Jim Idle brought up that sometimes you want to format  
your templates without screwing up the output. I just added a feature  
proposal:

http://www.antlr.org/jira/browse/ST-57

Example:

"start of a string<\\>
           <some very long expression in ST><\\>
           <followed by another very long expression>"

ST would ignore the newline and any indentation.

I can easily slip this in for 3.2.1 release, which I guess will be the  
book release

Ter

From gael.marziou at hp.com  Fri Jul 10 02:07:46 2009
From: gael.marziou at hp.com (Marziou, Gael)
Date: Fri, 10 Jul 2009 09:07:46 +0000
Subject: [stringtemplate-interest] Validating a translated template
Message-ID: <39CD9BAD33B6DF4C9E09C74B8A4740DD69E97D7FDB@GVW1089EXB.americas.hpqcorp.net>

Hello,

I am looking for a way to validate that a translated template is semantically equivalent to the master English template.
It means that:
 * "Bonjour $name$" is equivalent to "Hello $name$"
 * "Bonjour $nom$" is NOT equivalent to "Hello $name$"

So the validation phase must ensure that the translator did not translate an attribute or template reference or removed one.

My idea is to use StringTemplate.getChunks() on both master and translated templates and to run a comparison.
Is it feasible this way?

Thanks,

Gael 

From parrt at antlr.org  Fri Jul 10 11:40:50 2009
From: parrt at antlr.org (Terence Parr)
Date: Fri, 10 Jul 2009 11:40:50 -0700
Subject: [stringtemplate-interest] [antlr-interest] ST feature proposal
In-Reply-To: <234440.52847.qm@web55907.mail.re3.yahoo.com>
References: <F23CAE6F-0460-4C05-87B1-FDB9D1180E9E@antlr.org>
	<234440.52847.qm@web55907.mail.re3.yahoo.com>
Message-ID: <042418A5-6AFD-4307-B210-77DF576C240F@antlr.org>


On Jul 9, 2009, at 7:14 PM, Loring Craymer wrote:

>
> Hmm--could you make this "either output a \ or escape a newline" for  
> <\\>?  The lack of a way to output a \ from ST is annoying and  
> escaping newlines is rather minimal functionality for a lexeme.

Doesn't \ work outside of template expression?

Ter

From parrt at cs.usfca.edu  Sat Jul 11 09:26:47 2009
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sat, 11 Jul 2009 09:26:47 -0700
Subject: [stringtemplate-interest] [antlr-interest] ST feature proposal
In-Reply-To: <4.1.20090710222321.01e85be8@grahamwideman.com>
References: <4.1.20090710124835.01e85be8@grahamwideman.com>
	<4.1.20090709190822.067e2c88@grahamwideman.com>
	<4.1.20090709190822.067e2c88@grahamwideman.com>
	<4.1.20090710124835.01e85be8@grahamwideman.com>
	<4.1.20090710222321.01e85be8@grahamwideman.com>
Message-ID: <C96014AA-EAF0-48A1-B231-6A646E64AA83@cs.usfca.edu>

got this working. it's like a comment; all done in the lexer. looks nice
Ter
On Jul 10, 2009, at 10:27 PM, Graham Wideman wrote:

> Gerald rightly observed that...
>
>> Given that ST tends to preserve whitespace, the least change rule
>> would be to preserve any whitespace immediately prior to the <\\>
>
> ... and also the whitespace preceding the <\\> is easy to see. So  
> this indeed seems to satisfy the issue of how to specify whitespace  
> to include.
>
>> and consume all whitespace immediately after.
>
> ... I think that makes sense too.
>
> -- Graham
>
>
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From parrt at cs.usfca.edu  Sat Jul 11 13:13:10 2009
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sat, 11 Jul 2009 13:13:10 -0700
Subject: [stringtemplate-interest] another tweak
Message-ID: <687FE7BF-2EF2-4725-9133-480BAEE92C9F@cs.usfca.edu>

changes for today:

07-11-2009

o If default arg is a template with single expression wrapped in  
parens, x={<(...)>},
   then eval to string rather than setting x to the template for later  
eval. Useful
   in rare cases where the expression can change value when you read  
it, such as
   accessing time value or random number generator object.

o Added line break operator <\\>. It consumes remaining whitespace on  
that line, the first
and then any whitespace. Added a number of unit tests. example:

   "foo <\\>
        bar"

   emits "foo bar". All of the whitespace after the <\\> gets thrown  
away like a comment.


From zen at freedbms.net  Sat Jul 11 17:05:49 2009
From: zen at freedbms.net (Zenaan Harkness)
Date: Sun, 12 Jul 2009 10:05:49 +1000
Subject: [stringtemplate-interest] another tweak
In-Reply-To: <687FE7BF-2EF2-4725-9133-480BAEE92C9F@cs.usfca.edu>
References: <687FE7BF-2EF2-4725-9133-480BAEE92C9F@cs.usfca.edu>
Message-ID: <20090712000549.GB7416@freedbms.net>

On Sat, Jul 11, 2009 at 01:13:10PM -0700, Terence Parr wrote:
> changes for today:
> 
> 07-11-2009
> 
> o If default arg is a template with single expression wrapped in  
> parens, x={<(...)>},
>    then eval to string rather than setting x to the template for later  
> eval. Useful
>    in rare cases where the expression can change value when you read  
> it, such as
>    accessing time value or random number generator object.

That's cool. The benefits of writing a book - you find real-world usage
scenarios that require re-thinks/ features.


> o Added line break operator <\\>. It consumes remaining whitespace on  
> that line, the first and then any whitespace.
> Added a number of unit tests. example:
> 
>    "foo <\\>
>         bar"
> 
>    emits "foo bar". All of the whitespace after the <\\> gets thrown  
> away like a comment.

Ahh, so this is a white space consumption operator, not a "line break"
operator.

Line break would mean insert line break (not very useful in a template,
just insert a line break), at least by the common understanding of the
term.

cheers
zen

-- 
Homepage: www.SoulSound.net -- Free Australia: www.UPMART.org
Please respect the confidentiality of this email as sensibly warranted.

From parrt at cs.usfca.edu  Sat Jul 11 17:06:03 2009
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sat, 11 Jul 2009 17:06:03 -0700
Subject: [stringtemplate-interest] another tweak
In-Reply-To: <20090712000549.GB7416@freedbms.net>
References: <687FE7BF-2EF2-4725-9133-480BAEE92C9F@cs.usfca.edu>
	<20090712000549.GB7416@freedbms.net>
Message-ID: <D19F3926-1D6D-4BBE-9577-6BABF7342D1C@cs.usfca.edu>


On Jul 11, 2009, at 5:05 PM, Zenaan Harkness wrote:

> On Sat, Jul 11, 2009 at 01:13:10PM -0700, Terence Parr wrote:
>> changes for today:
>>
>> 07-11-2009
>>
>> o If default arg is a template with single expression wrapped in
>> parens, x={<(...)>},
>>   then eval to string rather than setting x to the template for later
>> eval. Useful
>>   in rare cases where the expression can change value when you read
>> it, such as
>>   accessing time value or random number generator object.
>
> That's cool. The benefits of writing a book - you find real-world  
> usage
> scenarios that require re-thinks/ features.

Yeah, it's too bad I'm rebuilding ST starting in a month or two  
without a book concurrently ;)

>> o Added line break operator <\\>. It consumes remaining whitespace on
>> that line, the first and then any whitespace.
>> Added a number of unit tests. example:
>>
>>   "foo <\\>
>>        bar"
>>
>>   emits "foo bar". All of the whitespace after the <\\> gets thrown
>> away like a comment.
>
> Ahh, so this is a white space consumption operator, not a "line break"
> operator.

yeah, wasn't sure what to call it. line break isn't perfect but it's a  
line break and whitespace consumer. For example, it will only consume  
a single newline not multiple.

Ter


From zen at freedbms.net  Sat Jul 11 17:59:32 2009
From: zen at freedbms.net (Zenaan Harkness)
Date: Sun, 12 Jul 2009 10:59:32 +1000
Subject: [stringtemplate-interest] another tweak
In-Reply-To: <D19F3926-1D6D-4BBE-9577-6BABF7342D1C@cs.usfca.edu>
References: <687FE7BF-2EF2-4725-9133-480BAEE92C9F@cs.usfca.edu>
	<20090712000549.GB7416@freedbms.net>
	<D19F3926-1D6D-4BBE-9577-6BABF7342D1C@cs.usfca.edu>
Message-ID: <20090712005932.GA7288@freedbms.net>

On Sat, Jul 11, 2009 at 05:06:03PM -0700, Terence Parr wrote:
> On Jul 11, 2009, at 5:05 PM, Zenaan Harkness wrote:
>> On Sat, Jul 11, 2009 at 01:13:10PM -0700, Terence Parr wrote:
>>> changes for today:
>>>
>>> 07-11-2009
>>>
>>> o If default arg is a template with single expression wrapped in
>>> parens, x={<(...)>},
>>>   then eval to string rather than setting x to the template for later
>>> eval. Useful
>>>   in rare cases where the expression can change value when you read
>>> it, such as
>>>   accessing time value or random number generator object.
>>
>> That's cool. The benefits of writing a book - you find real-world  
>> usage
>> scenarios that require re-thinks/ features.
>
> Yeah, it's too bad I'm rebuilding ST starting in a month or two without a 
> book concurrently ;)

<cough>StringTemplate Specification<cough>

<advocate>The small YAML community (perhaps not so small any more) is a
great example of production of a specification, and the benefits
thereof. <append 'repetition of previous links etc'/></>

:)

Regards
Zen

-- 
Homepage: www.SoulSound.net -- Free Australia: www.UPMART.org
Please respect the confidentiality of this email as sensibly warranted.

From parrt at cs.usfca.edu  Sun Jul 12 12:05:40 2009
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sun, 12 Jul 2009 12:05:40 -0700
Subject: [stringtemplate-interest] another tweak
In-Reply-To: <20090712005932.GA7288@freedbms.net>
References: <687FE7BF-2EF2-4725-9133-480BAEE92C9F@cs.usfca.edu>
	<20090712000549.GB7416@freedbms.net>
	<D19F3926-1D6D-4BBE-9577-6BABF7342D1C@cs.usfca.edu>
	<20090712005932.GA7288@freedbms.net>
Message-ID: <145677BA-D16C-4825-AAF0-7EDB8B57F522@cs.usfca.edu>


On Jul 11, 2009, at 5:59 PM, Zenaan Harkness wrote:
>> Yeah, it's too bad I'm rebuilding ST starting in a month or two  
>> without a
>> book concurrently ;)
>
> <cough>StringTemplate Specification<cough>
>
> <advocate>The small YAML community (perhaps not so small any more)  
> is a
> great example of production of a specification, and the benefits
> thereof. <append 'repetition of previous links etc'/></>

ha! I knew you were going to say that! ;)  Yes, it makes sense to come  
up with a spec as I write the software. Perhaps I can look at it as  
spec-driven development? :)
Ter

From vincedupuis at hotmail.com  Sun Jul 12 19:20:53 2009
From: vincedupuis at hotmail.com (Vincent Dupuis)
Date: Sun, 12 Jul 2009 22:20:53 -0400
Subject: [stringtemplate-interest] Remove duplicates
Message-ID: <SNT116-W92A4ABE2E7E6ACA458BE0B6220@phx.gbl>














Hello,
I'm new to stringtemplate and I have one question :


How can I remove duplicates in a list of attributes?

For example: if the attribute "names" contains: Joe Bob bob Joe Bob

I would like to obtain: Joe Bob bob
when using $names$

Thanks,
Vincent


_________________________________________________________________
Nous sommes vos photos. Partagez-nous d?s maintenant avec Windows Live Photos.
http://go.microsoft.com/?linkid=9666051
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20090712/73284cc8/attachment.html 

From j.stuyts at javathinker.com  Sun Jul 12 23:11:25 2009
From: j.stuyts at javathinker.com (Johan Stuyts)
Date: Mon, 13 Jul 2009 08:11:25 +0200
Subject: [stringtemplate-interest] Remove duplicates
In-Reply-To: <SNT116-W92A4ABE2E7E6ACA458BE0B6220@phx.gbl>
References: <SNT116-W92A4ABE2E7E6ACA458BE0B6220@phx.gbl>
Message-ID: <op.uwzstafqc4vsc3@audioslave>

> How can I remove duplicates in a list of attributes?

That is business logic. It should be done before you pass the data to the  
template instead of doing it in the template.

Kind regards,

Johan Stuyts

From zen at freedbms.net  Mon Jul 13 04:14:14 2009
From: zen at freedbms.net (Zenaan Harkness)
Date: Mon, 13 Jul 2009 21:14:14 +1000
Subject: [stringtemplate-interest] another tweak
In-Reply-To: <145677BA-D16C-4825-AAF0-7EDB8B57F522@cs.usfca.edu>
References: <687FE7BF-2EF2-4725-9133-480BAEE92C9F@cs.usfca.edu>
	<20090712000549.GB7416@freedbms.net>
	<D19F3926-1D6D-4BBE-9577-6BABF7342D1C@cs.usfca.edu>
	<20090712005932.GA7288@freedbms.net>
	<145677BA-D16C-4825-AAF0-7EDB8B57F522@cs.usfca.edu>
Message-ID: <20090713111414.GF12684@freedbms.net>

On Sun, Jul 12, 2009 at 12:05:40PM -0700, Terence Parr wrote:
> On Jul 11, 2009, at 5:59 PM, Zenaan Harkness wrote:
>>> Yeah, it's too bad I'm rebuilding ST starting in a month or two  
>>> without a
>>> book concurrently ;)
>>
>> <cough>StringTemplate Specification<cough>
>>
>> <advocate>The small YAML community (perhaps not so small any more) is a
>> great example of production of a specification, and the benefits
>> thereof. <append 'repetition of previous links etc'/></>
>
> ha! I knew you were going to say that! ;)  Yes, it makes sense to come  
> up with a spec as I write the software. Perhaps I can look at it as  
> spec-driven development? :)

<hearty approval>

And the beauty of this situation: we already have a current,
comprehensive implementation, with a goodly (though incomplete) number
of test cases :)

It really would be remiss of us to not take this opportunity (v3 rewrite)
to write an ST Specification. This is a duty of care incumbent upon us,
to each of the following groups:
   -  the ST using community
   -  ST test case authors
   -  ST implementers (eg C#, Python implementations etc)
   -  academics studying languages
   -  ST improvement attempts

A specification is simply a great foundation for all such activities.

AND we have fine examples abounding, to draw much from, such as JSON,
YAML, XML, RFCs, etc.

Please post link to outline, for review. I trust I can be of at least a
small modicum of review assistance.

Thanks heaps
Zen

PS There's much keen interest now, and overly activated salivory glands!

-- 
Homepage: www.SoulSound.net -- Free Australia: www.UPMART.org
Please respect the confidentiality of this email as sensibly warranted.

From parrt at cs.usfca.edu  Mon Jul 13 10:56:45 2009
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon, 13 Jul 2009 10:56:45 -0700
Subject: [stringtemplate-interest] another tweak
In-Reply-To: <20090713111414.GF12684@freedbms.net>
References: <687FE7BF-2EF2-4725-9133-480BAEE92C9F@cs.usfca.edu>
	<20090712000549.GB7416@freedbms.net>
	<D19F3926-1D6D-4BBE-9577-6BABF7342D1C@cs.usfca.edu>
	<20090712005932.GA7288@freedbms.net>
	<145677BA-D16C-4825-AAF0-7EDB8B57F522@cs.usfca.edu>
	<20090713111414.GF12684@freedbms.net>
Message-ID: <59C537A7-638A-4D78-BE30-A21A13E18FD1@cs.usfca.edu>

Better yet, I'm going to make it a group effort on the wiki! :)
Thanks for the great idea and support, Zenaan!

Drop dead deadline for book is Aug 10. then i take 2 weeks "off". then  
i code for 12 months!!!!!!!!!! hooray :)

Ter
On Jul 13, 2009, at 4:14 AM, Zenaan Harkness wrote:

> On Sun, Jul 12, 2009 at 12:05:40PM -0700, Terence Parr wrote:
>> On Jul 11, 2009, at 5:59 PM, Zenaan Harkness wrote:
>>>> Yeah, it's too bad I'm rebuilding ST starting in a month or two
>>>> without a
>>>> book concurrently ;)
>>>
>>> <cough>StringTemplate Specification<cough>
>>>
>>> <advocate>The small YAML community (perhaps not so small any more)  
>>> is a
>>> great example of production of a specification, and the benefits
>>> thereof. <append 'repetition of previous links etc'/></>
>>
>> ha! I knew you were going to say that! ;)  Yes, it makes sense to  
>> come
>> up with a spec as I write the software. Perhaps I can look at it as
>> spec-driven development? :)
>
> <hearty approval>
>
> And the beauty of this situation: we already have a current,
> comprehensive implementation, with a goodly (though incomplete) number
> of test cases :)
>
> It really would be remiss of us to not take this opportunity (v3  
> rewrite)
> to write an ST Specification. This is a duty of care incumbent upon  
> us,
> to each of the following groups:
>   -  the ST using community
>   -  ST test case authors
>   -  ST implementers (eg C#, Python implementations etc)
>   -  academics studying languages
>   -  ST improvement attempts
>
> A specification is simply a great foundation for all such activities.
>
> AND we have fine examples abounding, to draw much from, such as JSON,
> YAML, XML, RFCs, etc.
>
> Please post link to outline, for review. I trust I can be of at  
> least a
> small modicum of review assistance.
>
> Thanks heaps
> Zen
>
> PS There's much keen interest now, and overly activated salivory  
> glands!
>
> -- 
> Homepage: www.SoulSound.net -- Free Australia: www.UPMART.org
> Please respect the confidentiality of this email as sensibly  
> warranted.


From zen at freedbms.net  Mon Jul 13 18:25:23 2009
From: zen at freedbms.net (Zenaan Harkness)
Date: Tue, 14 Jul 2009 11:25:23 +1000
Subject: [stringtemplate-interest] another tweak
In-Reply-To: <59C537A7-638A-4D78-BE30-A21A13E18FD1@cs.usfca.edu>
References: <687FE7BF-2EF2-4725-9133-480BAEE92C9F@cs.usfca.edu>
	<20090712000549.GB7416@freedbms.net>
	<D19F3926-1D6D-4BBE-9577-6BABF7342D1C@cs.usfca.edu>
	<20090712005932.GA7288@freedbms.net>
	<145677BA-D16C-4825-AAF0-7EDB8B57F522@cs.usfca.edu>
	<20090713111414.GF12684@freedbms.net>
	<59C537A7-638A-4D78-BE30-A21A13E18FD1@cs.usfca.edu>
Message-ID: <20090714012523.GA7302@freedbms.net>

>> And the beauty of this situation: we already have a current,
>> comprehensive implementation, with a goodly (though incomplete) number
>> of test cases :)

One other thing, which should have been obvious, and is now, ST is
implemented as an ANTLR grammar?

To the extent it is, an initial specification outline (with each grammar
rule heading up a section) may be an easy head start to kicking off the
wiki.

Each section should then have a standard set of (initially empty) wiki
headings:

   Grammar:
      {this is the auto-generated (at least initially) bit}

   Summary:
      {one or two sentences technically concise languaging}

   Overview:
      {paragraph or two, to give experienced users the goss}

   Detail:
      {the full detail, suitable for those unfamiliar with ST}

   Examples:

   Test Cases:
      {this would essentially be code, and because we will end up with
      test suites in various languages, this section might end becoming
      just a list of links to test cases in various languages, which
      test cases are relevant to this section of the specification}

   Links:
      {links to relevant tutorial sections, related parts of the spec,
      random-but-hopefully-useful links (hey, it's a wiki :)}

   Implementaters:
   Bootstrapping:
      {Ter, you are in prime position with ST 3 rewrite, to discover
      some key hints for implementers; one "standard" set of hints may
      be those parts of the grammar that are essential for
      'bootstrapping' a new ST implementation (which is kinda what
      you're going to begin in a month or two);
      I may not have the right terminology here, so this heading might
      have to change, but you get the idea...}

   Status:
      {What is the status of this feature in each implementation of ST,
      ie the Java instance, the dotnet instance, the cpp instance, etc.
      This would be a little table I guess.
      Whereas the section "Version Log:" (below) is like a changelog, a
      historical perspective, Status: is a summary picture, which could
      overlap in the information provided, and so perhaps these sections
      might be joined at some stage ?
      I visualize Status: as a table and Version Log: as a list and more
      verbose than Status:.}

   Version Log:
      {This is an essential section. Every feature, every fix to the
      spec, will from the point of this spec wiki creation, have a
      version log, with date, brief and full description for each
      version log entry, which entry states the versions applicable to
      that part of the spec, differences with earlier/ previous version,
      etc. Since it's a wiki, we are not limited in the useful
      information we can include/ provide.}


*
Non-applicable sections can be removed in due course.


*
There ought be a page which has better versions of the above list of
section descriptions, then each section title can have an innocuous
little "?" (without the quotes) which is a link to the respective
description for what that section is intended to contain (which is of
course also another wiki page).


*
Of course, there will need to be a TOC, and other sections, which for
example (as I briefly scan the YAML spec) might be as follows:

   -  Status of this Specification
   -  Abstract
   -  Introduction
      -  Goals
      -  Prior Art
      -  Relation to ANTLR
      -  Relation to Other Template Engines
   -  Preview
      -  Templates
      -  Attributes
      -  Lists
      -  Maps
      -  Full Length Example
   etc
   -  Syntax Conventions
   -  Characters
   etc

It appears that _many_ of the yaml spec sections will be applicable, or
at the least useful in relation to creating a solid ST spec.


*
Ahh, here's one for the ST 3 version -> YAML has a versioning scheme,
which provides for a much higher level of backward compatibility, a
simple tag at the beginning of every YAML file (they basically did a
spec before they did an implementation I think, not sure) eg:

   %YAML 1.2

I'm not sure how this might apply in ST case, but it certainly _feels_
like the right thing to do (to have a simple ST version declaration at
the start of an ST file); at this point, this would need to be optional
for ST, but would be useful for ST template authors to be able to
declare minimum required ST spec version required for ST implementations
to expect to be able to process the file correctly.


*
One thing I particularly like about the YAML spec, is that each grammar
rule is clearly identified as such, eg:

   [75]     c-nb-comment-text     ::=      ?#?  nb-char* 

(Note the "[75]" identifying this as the 75th yaml 1.2 spec grammar
rule.)

Sequential numbering like this may not be practical in a wiki style of
documentation, and so I guess the section headings above might do that
job.


*
It would be really nice if, from the wiki pages, an all-in-one html page
could be auto-generated. Longer term, once a particular version of the
spec is finalized, I or someone else might be motivated to convert that
version into Docbook for nice PDF (as well as HTML) generation.


Zen

-- 
Homepage: www.SoulSound.net -- Free Australia: www.UPMART.org
Please respect the confidentiality of this email as sensibly warranted.

From parrt at cs.usfca.edu  Mon Jul 13 22:45:24 2009
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon, 13 Jul 2009 22:45:24 -0700
Subject: [stringtemplate-interest] another tweak
In-Reply-To: <20090714012523.GA7302@freedbms.net>
References: <687FE7BF-2EF2-4725-9133-480BAEE92C9F@cs.usfca.edu>
	<20090712000549.GB7416@freedbms.net>
	<D19F3926-1D6D-4BBE-9577-6BABF7342D1C@cs.usfca.edu>
	<20090712005932.GA7288@freedbms.net>
	<145677BA-D16C-4825-AAF0-7EDB8B57F522@cs.usfca.edu>
	<20090713111414.GF12684@freedbms.net>
	<59C537A7-638A-4D78-BE30-A21A13E18FD1@cs.usfca.edu>
	<20090714012523.GA7302@freedbms.net>
Message-ID: <5D15BB05-00DD-4FCA-B31F-2952638EE2A8@cs.usfca.edu>


On Jul 13, 2009, at 6:25 PM, Zenaan Harkness wrote:

>>> And the beauty of this situation: we already have a current,
>>> comprehensive implementation, with a goodly (though incomplete)  
>>> number
>>> of test cases :)
>
> One other thing, which should have been obvious, and is now, ST is
> implemented as an ANTLR grammar?\

yup...like 5.

> To the extent it is, an initial specification outline (with each  
> grammar
> rule heading up a section) may be an easy head start to kicking off  
> the
> wiki.

yup.

> Each section should then have a standard set of (initially empty) wiki
> headings:

...thanks for the info below...i'll look in detail after i finish the  
book sprint.

Ter
>
>
>   Grammar:
>      {this is the auto-generated (at least initially) bit}
>
>   Summary:
>      {one or two sentences technically concise languaging}
>
>   Overview:
>      {paragraph or two, to give experienced users the goss}
>
>   Detail:
>      {the full detail, suitable for those unfamiliar with ST}
>
>   Examples:
>
>   Test Cases:
>      {this would essentially be code, and because we will end up with
>      test suites in various languages, this section might end becoming
>      just a list of links to test cases in various languages, which
>      test cases are relevant to this section of the specification}
>
>   Links:
>      {links to relevant tutorial sections, related parts of the spec,
>      random-but-hopefully-useful links (hey, it's a wiki :)}
>
>   Implementaters:
>   Bootstrapping:
>      {Ter, you are in prime position with ST 3 rewrite, to discover
>      some key hints for implementers; one "standard" set of hints may
>      be those parts of the grammar that are essential for
>      'bootstrapping' a new ST implementation (which is kinda what
>      you're going to begin in a month or two);
>      I may not have the right terminology here, so this heading might
>      have to change, but you get the idea...}
>
>   Status:
>      {What is the status of this feature in each implementation of ST,
>      ie the Java instance, the dotnet instance, the cpp instance, etc.
>      This would be a little table I guess.
>      Whereas the section "Version Log:" (below) is like a changelog, a
>      historical perspective, Status: is a summary picture, which could
>      overlap in the information provided, and so perhaps these  
> sections
>      might be joined at some stage ?
>      I visualize Status: as a table and Version Log: as a list and  
> more
>      verbose than Status:.}
>
>   Version Log:
>      {This is an essential section. Every feature, every fix to the
>      spec, will from the point of this spec wiki creation, have a
>      version log, with date, brief and full description for each
>      version log entry, which entry states the versions applicable to
>      that part of the spec, differences with earlier/ previous  
> version,
>      etc. Since it's a wiki, we are not limited in the useful
>      information we can include/ provide.}
>
>
> *
> Non-applicable sections can be removed in due course.
>
>
> *
> There ought be a page which has better versions of the above list of
> section descriptions, then each section title can have an innocuous
> little "?" (without the quotes) which is a link to the respective
> description for what that section is intended to contain (which is of
> course also another wiki page).
>
>
> *
> Of course, there will need to be a TOC, and other sections, which for
> example (as I briefly scan the YAML spec) might be as follows:
>
>   -  Status of this Specification
>   -  Abstract
>   -  Introduction
>      -  Goals
>      -  Prior Art
>      -  Relation to ANTLR
>      -  Relation to Other Template Engines
>   -  Preview
>      -  Templates
>      -  Attributes
>      -  Lists
>      -  Maps
>      -  Full Length Example
>   etc
>   -  Syntax Conventions
>   -  Characters
>   etc
>
> It appears that _many_ of the yaml spec sections will be applicable,  
> or
> at the least useful in relation to creating a solid ST spec.
>
>
> *
> Ahh, here's one for the ST 3 version -> YAML has a versioning scheme,
> which provides for a much higher level of backward compatibility, a
> simple tag at the beginning of every YAML file (they basically did a
> spec before they did an implementation I think, not sure) eg:
>
>   %YAML 1.2
>
> I'm not sure how this might apply in ST case, but it certainly _feels_
> like the right thing to do (to have a simple ST version declaration at
> the start of an ST file); at this point, this would need to be  
> optional
> for ST, but would be useful for ST template authors to be able to
> declare minimum required ST spec version required for ST  
> implementations
> to expect to be able to process the file correctly.
>
>
> *
> One thing I particularly like about the YAML spec, is that each  
> grammar
> rule is clearly identified as such, eg:
>
>   [75]     c-nb-comment-text     ::=      ?#?  nb-char*
>
> (Note the "[75]" identifying this as the 75th yaml 1.2 spec grammar
> rule.)
>
> Sequential numbering like this may not be practical in a wiki style of
> documentation, and so I guess the section headings above might do that
> job.
>
>
> *
> It would be really nice if, from the wiki pages, an all-in-one html  
> page
> could be auto-generated. Longer term, once a particular version of the
> spec is finalized, I or someone else might be motivated to convert  
> that
> version into Docbook for nice PDF (as well as HTML) generation.
>
>
> Zen
>
> -- 
> Homepage: www.SoulSound.net -- Free Australia: www.UPMART.org
> Please respect the confidentiality of this email as sensibly  
> warranted.


From baerrach at gmail.com  Thu Jul 16 20:16:04 2009
From: baerrach at gmail.com (Barrie Treloar)
Date: Fri, 17 Jul 2009 12:46:04 +0930
Subject: [stringtemplate-interest] How to write a helper template/macro for
	common stuff in a template (i.e. model and controller independent)
Message-ID: <f6b307f10907162016x21eb5f05q4201b8ed05ba28ec@mail.gmail.com>

I have output in my template that is common enough that I would like
to refactor this out (avoid typing/typos)

In the example below I would like to create a template to replace the
RETYPE lines with a template call.
Something like
<RETYPE(3)>
which would iterate over the template
RETYPE [<it>] 0

But I can only do this from attributes passed into the view from the model.
And in this case the output is model independent.

Anyone have suggestions on how to do this?

e.g.
S | ? | S | \& ;  T1 Agnes Road
COPY_A [1] temp
CONCAT " " temp
CONCAT [2] temp
COPY temp {S1}
COPY "STREET" {T1}
RETYPE [1] 0
RETYPE [2] 0
RETYPE [3] 0
RETURN

S | ? | T | D | \& ;  T1 Agnes Court West
COPY_A [1] temp
CONCAT " " temp
CONCAT [2] temp
COPY temp {S1}
COPY_A [3] {T1}
COPY_A [4] {D1}
RETYPE [1] 0
RETYPE [2] 0
RETYPE [3] 0
RETYPE [4] 0
RETURN

S | ? | T | D | ** | \& ;  T1 Agnes Court West
COPY_A [1] temp
CONCAT " " temp
CONCAT [2] temp
COPY temp {S1}
COPY_A [3] {T1}
COPY_A [4] {D1}
COPY_S [5] {Z1}
RETYPE [1] 0
RETYPE [2] 0
RETYPE [3] 0
RETYPE [4] 0
RETYPE [5] 0
RETURN

From parrt at cs.usfca.edu  Thu Jul 16 21:08:47 2009
From: parrt at cs.usfca.edu (Terence Parr)
Date: Thu, 16 Jul 2009 21:08:47 -0700
Subject: [stringtemplate-interest] How to write a helper template/macro
	for common stuff in a template (i.e. model and controller
	independent)
In-Reply-To: <f6b307f10907162016x21eb5f05q4201b8ed05ba28ec@mail.gmail.com>
References: <f6b307f10907162016x21eb5f05q4201b8ed05ba28ec@mail.gmail.com>
Message-ID: <BD7A9E00-9FDA-435A-937F-0E8EBB9A9112@cs.usfca.edu>

Hi Barrie,

I think <RETYPE(v="3")> would do it. then define RETYPE to take v as  
parameter.
Ter
On Jul 16, 2009, at 8:16 PM, Barrie Treloar wrote:

> I have output in my template that is common enough that I would like
> to refactor this out (avoid typing/typos)
>
> In the example below I would like to create a template to replace the
> RETYPE lines with a template call.
> Something like
> <RETYPE(3)>
> which would iterate over the template
> RETYPE [<it>] 0
>
> But I can only do this from attributes passed into the view from the  
> model.
> And in this case the output is model independent.
>
> Anyone have suggestions on how to do this?
>
> e.g.
> S | ? | S | \& ;  T1 Agnes Road
> COPY_A [1] temp
> CONCAT " " temp
> CONCAT [2] temp
> COPY temp {S1}
> COPY "STREET" {T1}
> RETYPE [1] 0
> RETYPE [2] 0
> RETYPE [3] 0
> RETURN
>
> S | ? | T | D | \& ;  T1 Agnes Court West
> COPY_A [1] temp
> CONCAT " " temp
> CONCAT [2] temp
> COPY temp {S1}
> COPY_A [3] {T1}
> COPY_A [4] {D1}
> RETYPE [1] 0
> RETYPE [2] 0
> RETYPE [3] 0
> RETYPE [4] 0
> RETURN
>
> S | ? | T | D | ** | \& ;  T1 Agnes Court West
> COPY_A [1] temp
> CONCAT " " temp
> CONCAT [2] temp
> COPY temp {S1}
> COPY_A [3] {T1}
> COPY_A [4] {D1}
> COPY_S [5] {Z1}
> RETYPE [1] 0
> RETYPE [2] 0
> RETYPE [3] 0
> RETYPE [4] 0
> RETYPE [5] 0
> RETURN
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest


From baerrach at gmail.com  Thu Jul 16 21:45:57 2009
From: baerrach at gmail.com (Barrie Treloar)
Date: Fri, 17 Jul 2009 14:15:57 +0930
Subject: [stringtemplate-interest] How to write a helper template/macro
	for common stuff in a template (i.e. model and controller
	independent)
In-Reply-To: <BD7A9E00-9FDA-435A-937F-0E8EBB9A9112@cs.usfca.edu>
References: <f6b307f10907162016x21eb5f05q4201b8ed05ba28ec@mail.gmail.com>
	<BD7A9E00-9FDA-435A-937F-0E8EBB9A9112@cs.usfca.edu>
Message-ID: <f6b307f10907162145o2a1ca6eeg1be4f0cf32bc8b0d@mail.gmail.com>

On Fri, Jul 17, 2009 at 1:38 PM, Terence Parr<parrt at cs.usfca.edu> wrote:
> Hi Barrie,
>
> I think <RETYPE(v="3")> would do it. then define RETYPE to take v as
> parameter.

How do I then do the iterate loop?

for i = 1 to v
RETYPE [<v>] 0
end for

I need the RETYPE line repeated V times?

Thanks

> On Jul 16, 2009, at 8:16 PM, Barrie Treloar wrote:
>
>> I have output in my template that is common enough that I would like
>> to refactor this out (avoid typing/typos)
>>
>> In the example below I would like to create a template to replace the
>> RETYPE lines with a template call.
>> Something like
>> <RETYPE(3)>
>> which would iterate over the template
>> RETYPE [<it>] 0
>>
>> But I can only do this from attributes passed into the view from the
>> model.
>> And in this case the output is model independent.
>>
>> Anyone have suggestions on how to do this?
>>
>> e.g.
>> S | ? | S | \& ; ?T1 Agnes Road
>> COPY_A [1] temp
>> CONCAT " " temp
>> CONCAT [2] temp
>> COPY temp {S1}
>> COPY "STREET" {T1}
>> RETYPE [1] 0
>> RETYPE [2] 0
>> RETYPE [3] 0
>> RETURN
>>
>> S | ? | T | D | \& ; ?T1 Agnes Court West
>> COPY_A [1] temp
>> CONCAT " " temp
>> CONCAT [2] temp
>> COPY temp {S1}
>> COPY_A [3] {T1}
>> COPY_A [4] {D1}
>> RETYPE [1] 0
>> RETYPE [2] 0
>> RETYPE [3] 0
>> RETYPE [4] 0
>> RETURN
>>
>> S | ? | T | D | ** | \& ; ?T1 Agnes Court West
>> COPY_A [1] temp
>> CONCAT " " temp
>> CONCAT [2] temp
>> COPY temp {S1}
>> COPY_A [3] {T1}
>> COPY_A [4] {D1}
>> COPY_S [5] {Z1}
>> RETYPE [1] 0
>> RETYPE [2] 0
>> RETYPE [3] 0
>> RETYPE [4] 0
>> RETYPE [5] 0
>> RETURN
>> _______________________________________________
>> stringtemplate-interest mailing list
>> stringtemplate-interest at antlr.org
>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>
>

From parrt at cs.usfca.edu  Thu Jul 16 23:02:12 2009
From: parrt at cs.usfca.edu (Terence Parr)
Date: Thu, 16 Jul 2009 23:02:12 -0700
Subject: [stringtemplate-interest] How to write a helper template/macro
	for common stuff in a template (i.e. model and controller
	independent)
In-Reply-To: <f6b307f10907162145o2a1ca6eeg1be4f0cf32bc8b0d@mail.gmail.com>
References: <f6b307f10907162016x21eb5f05q4201b8ed05ba28ec@mail.gmail.com>
	<BD7A9E00-9FDA-435A-937F-0E8EBB9A9112@cs.usfca.edu>
	<f6b307f10907162145o2a1ca6eeg1be4f0cf32bc8b0d@mail.gmail.com>
Message-ID: <2FA20C28-9BB1-4B2B-A1DE-93C85D151256@cs.usfca.edu>

ah. right. Jim Idle asked for this too.  on todo list. Or, just pass  
in a Iterator "counter" object whose toString() returns 1, 2, 3, 4...   
bad bad bad style but suffices until i can add "n times" thing.
T
On Jul 16, 2009, at 9:45 PM, Barrie Treloar wrote:

> On Fri, Jul 17, 2009 at 1:38 PM, Terence Parr<parrt at cs.usfca.edu>  
> wrote:
>> Hi Barrie,
>>
>> I think <RETYPE(v="3")> would do it. then define RETYPE to take v as
>> parameter.
>
> How do I then do the iterate loop?
>
> for i = 1 to v
> RETYPE [<v>] 0
> end for
>
> I need the RETYPE line repeated V times?
>
> Thanks
>
>> On Jul 16, 2009, at 8:16 PM, Barrie Treloar wrote:
>>
>>> I have output in my template that is common enough that I would like
>>> to refactor this out (avoid typing/typos)
>>>
>>> In the example below I would like to create a template to replace  
>>> the
>>> RETYPE lines with a template call.
>>> Something like
>>> <RETYPE(3)>
>>> which would iterate over the template
>>> RETYPE [<it>] 0
>>>
>>> But I can only do this from attributes passed into the view from the
>>> model.
>>> And in this case the output is model independent.
>>>
>>> Anyone have suggestions on how to do this?
>>>
>>> e.g.
>>> S | ? | S | \& ;  T1 Agnes Road
>>> COPY_A [1] temp
>>> CONCAT " " temp
>>> CONCAT [2] temp
>>> COPY temp {S1}
>>> COPY "STREET" {T1}
>>> RETYPE [1] 0
>>> RETYPE [2] 0
>>> RETYPE [3] 0
>>> RETURN
>>>
>>> S | ? | T | D | \& ;  T1 Agnes Court West
>>> COPY_A [1] temp
>>> CONCAT " " temp
>>> CONCAT [2] temp
>>> COPY temp {S1}
>>> COPY_A [3] {T1}
>>> COPY_A [4] {D1}
>>> RETYPE [1] 0
>>> RETYPE [2] 0
>>> RETYPE [3] 0
>>> RETYPE [4] 0
>>> RETURN
>>>
>>> S | ? | T | D | ** | \& ;  T1 Agnes Court West
>>> COPY_A [1] temp
>>> CONCAT " " temp
>>> CONCAT [2] temp
>>> COPY temp {S1}
>>> COPY_A [3] {T1}
>>> COPY_A [4] {D1}
>>> COPY_S [5] {Z1}
>>> RETYPE [1] 0
>>> RETYPE [2] 0
>>> RETYPE [3] 0
>>> RETYPE [4] 0
>>> RETYPE [5] 0
>>> RETURN
>>> _______________________________________________
>>> stringtemplate-interest mailing list
>>> stringtemplate-interest at antlr.org
>>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>>
>>


From baerrach at gmail.com  Thu Jul 16 23:29:54 2009
From: baerrach at gmail.com (Barrie Treloar)
Date: Fri, 17 Jul 2009 15:59:54 +0930
Subject: [stringtemplate-interest] How to write a helper template/macro
	for common stuff in a template (i.e. model and controller
	independent)
In-Reply-To: <2FA20C28-9BB1-4B2B-A1DE-93C85D151256@cs.usfca.edu>
References: <f6b307f10907162016x21eb5f05q4201b8ed05ba28ec@mail.gmail.com>
	<BD7A9E00-9FDA-435A-937F-0E8EBB9A9112@cs.usfca.edu>
	<f6b307f10907162145o2a1ca6eeg1be4f0cf32bc8b0d@mail.gmail.com>
	<2FA20C28-9BB1-4B2B-A1DE-93C85D151256@cs.usfca.edu>
Message-ID: <f6b307f10907162329g5af4def9g657c4805463fb74a@mail.gmail.com>

On Fri, Jul 17, 2009 at 3:32 PM, Terence Parr<parrt at cs.usfca.edu> wrote:
> ah. right. Jim Idle asked for this too. ?on todo list. Or, just pass in a
> Iterator "counter" object whose toString() returns 1, 2, 3, 4... ?bad bad
> bad style but suffices until i can add "n times" thing.

Fair enough. I didn't think it was possible, but no harm in asking.
In this particular case the counter object would need to be
constructed in the view (which is currently not possible) as the
counter is independent of the model or controller.

I think the work I am doing is an edge case and I'm finding it
difficult to articulate what I am doing succinctly.

I think the closest analogy is that I am pre-processing input to make
the creation of the generated file easier.

The resultant file is 6000 lines full of cumbersome and verbose DSL
and I would like to be applying Dont Repeat Yourself principles to
reduce the maintenance and development effort of that file.

So the model is only really used to control some optional behaviour.
This is where a helper/macro template that can apply itself to the
view would be handy.

I was just thinking that maybe a two pass might fix the problem, but I
am still stuck with no model variables that control the second pass.

Is there a link to the Todo item?
Can anyone think of other scenarios where this behaviour is
appropriate? I'm hoping seeing the problem from an alternative
viewpoint might help my understanding.

For my case, what I think I want is something like:
  <[1..6]: {RETYPE [<it>] 0}>
where [1..6] creates a list on the fly for me of the values [1,2,3,4,5,6]

From baerrach at gmail.com  Fri Jul 17 01:29:59 2009
From: baerrach at gmail.com (Barrie Treloar)
Date: Fri, 17 Jul 2009 17:59:59 +0930
Subject: [stringtemplate-interest] How to write a helper template/macro
	for common stuff in a template (i.e. model and controller
	independent)
In-Reply-To: <f6b307f10907162329g5af4def9g657c4805463fb74a@mail.gmail.com>
References: <f6b307f10907162016x21eb5f05q4201b8ed05ba28ec@mail.gmail.com>
	<BD7A9E00-9FDA-435A-937F-0E8EBB9A9112@cs.usfca.edu>
	<f6b307f10907162145o2a1ca6eeg1be4f0cf32bc8b0d@mail.gmail.com>
	<2FA20C28-9BB1-4B2B-A1DE-93C85D151256@cs.usfca.edu>
	<f6b307f10907162329g5af4def9g657c4805463fb74a@mail.gmail.com>
Message-ID: <f6b307f10907170129w250c7533t18335910c3faf803@mail.gmail.com>

> For my case, what I think I want is something like:
> ?<[1..6]: {RETYPE [<it>] 0}>
> where [1..6] creates a list on the fly for me of the values [1,2,3,4,5,6]

Thanks for the suggestions, this prompted me to try

<[1,2,3,4,5,6]: {RETYPE [<it>] 0<\n>}>

which does what I want but not entirely sure its any better than
pasting in the lines 6 times.

From zen at freedbms.net  Fri Jul 17 02:49:11 2009
From: zen at freedbms.net (Zenaan Harkness)
Date: Fri, 17 Jul 2009 19:49:11 +1000
Subject: [stringtemplate-interest] How to write a helper
	template/macro	for common stuff in a template (i.e. model and
	controller	independent)
In-Reply-To: <f6b307f10907170129w250c7533t18335910c3faf803@mail.gmail.com>
References: <f6b307f10907162016x21eb5f05q4201b8ed05ba28ec@mail.gmail.com>
	<BD7A9E00-9FDA-435A-937F-0E8EBB9A9112@cs.usfca.edu>
	<f6b307f10907162145o2a1ca6eeg1be4f0cf32bc8b0d@mail.gmail.com>
	<2FA20C28-9BB1-4B2B-A1DE-93C85D151256@cs.usfca.edu>
	<f6b307f10907162329g5af4def9g657c4805463fb74a@mail.gmail.com>
	<f6b307f10907170129w250c7533t18335910c3faf803@mail.gmail.com>
Message-ID: <20090717094911.GG8653@freedbms.net>

On Fri, Jul 17, 2009 at 05:59:59PM +0930, Barrie Treloar wrote:
> > For my case, what I think I want is something like:
> > ?<[1..6]: {RETYPE [<it>] 0}>
> > where [1..6] creates a list on the fly for me of the values [1,2,3,4,5,6]
> 
> Thanks for the suggestions, this prompted me to try
> 
> <[1,2,3,4,5,6]: {RETYPE [<it>] 0<\n>}>
> 
> which does what I want but not entirely sure its any better than
> pasting in the lines 6 times.

Better if you happen to want to change the numbers in the list, since
they're all in one place, not spread across 6 lines.

-- 
Homepage: www.SoulSound.net -- Free Australia: www.UPMART.org
Please respect the confidentiality of this email as sensibly warranted.

From parrt at cs.usfca.edu  Fri Jul 17 14:18:26 2009
From: parrt at cs.usfca.edu (Terence Parr)
Date: Fri, 17 Jul 2009 14:18:26 -0700
Subject: [stringtemplate-interest] How to write a helper template/macro
	for common stuff in a template (i.e. model and controller
	independent)
In-Reply-To: <f6b307f10907162329g5af4def9g657c4805463fb74a@mail.gmail.com>
References: <f6b307f10907162016x21eb5f05q4201b8ed05ba28ec@mail.gmail.com>
	<BD7A9E00-9FDA-435A-937F-0E8EBB9A9112@cs.usfca.edu>
	<f6b307f10907162145o2a1ca6eeg1be4f0cf32bc8b0d@mail.gmail.com>
	<2FA20C28-9BB1-4B2B-A1DE-93C85D151256@cs.usfca.edu>
	<f6b307f10907162329g5af4def9g657c4805463fb74a@mail.gmail.com>
Message-ID: <6C7BEF38-64FF-4DFB-BD09-A9219D3376B1@cs.usfca.edu>

See

http://www.antlr.org/jira/browse/ST-56

and

http://www.antlr.org/jira/browse/ST-12

T
On Jul 16, 2009, at 11:29 PM, Barrie Treloar wrote:

> On Fri, Jul 17, 2009 at 3:32 PM, Terence Parr<parrt at cs.usfca.edu>  
> wrote:
>> ah. right. Jim Idle asked for this too.  on todo list. Or, just  
>> pass in a
>> Iterator "counter" object whose toString() returns 1, 2, 3, 4...   
>> bad bad
>> bad style but suffices until i can add "n times" thing.
>
> Fair enough. I didn't think it was possible, but no harm in asking.
> In this particular case the counter object would need to be
> constructed in the view (which is currently not possible) as the
> counter is independent of the model or controller.
>
> I think the work I am doing is an edge case and I'm finding it
> difficult to articulate what I am doing succinctly.
>
> I think the closest analogy is that I am pre-processing input to make
> the creation of the generated file easier.
>
> The resultant file is 6000 lines full of cumbersome and verbose DSL
> and I would like to be applying Dont Repeat Yourself principles to
> reduce the maintenance and development effort of that file.
>
> So the model is only really used to control some optional behaviour.
> This is where a helper/macro template that can apply itself to the
> view would be handy.
>
> I was just thinking that maybe a two pass might fix the problem, but I
> am still stuck with no model variables that control the second pass.
>
> Is there a link to the Todo item?
> Can anyone think of other scenarios where this behaviour is
> appropriate? I'm hoping seeing the problem from an alternative
> viewpoint might help my understanding.
>
> For my case, what I think I want is something like:
>  <[1..6]: {RETYPE [<it>] 0}>
> where [1..6] creates a list on the fly for me of the values  
> [1,2,3,4,5,6]


From parrt at cs.usfca.edu  Fri Jul 17 14:18:58 2009
From: parrt at cs.usfca.edu (Terence Parr)
Date: Fri, 17 Jul 2009 14:18:58 -0700
Subject: [stringtemplate-interest] How to write a helper template/macro
	for common stuff in a template (i.e. model and controller
	independent)
In-Reply-To: <f6b307f10907170129w250c7533t18335910c3faf803@mail.gmail.com>
References: <f6b307f10907162016x21eb5f05q4201b8ed05ba28ec@mail.gmail.com>
	<BD7A9E00-9FDA-435A-937F-0E8EBB9A9112@cs.usfca.edu>
	<f6b307f10907162145o2a1ca6eeg1be4f0cf32bc8b0d@mail.gmail.com>
	<2FA20C28-9BB1-4B2B-A1DE-93C85D151256@cs.usfca.edu>
	<f6b307f10907162329g5af4def9g657c4805463fb74a@mail.gmail.com>
	<f6b307f10907170129w250c7533t18335910c3faf803@mail.gmail.com>
Message-ID: <410C618F-1CD2-4B6A-B55C-19D799B5F324@cs.usfca.edu>

use a Java class whose toString method returns String.valueOf(counter+ 
+).
Ter
On Jul 17, 2009, at 1:29 AM, Barrie Treloar wrote:

>> For my case, what I think I want is something like:
>>  <[1..6]: {RETYPE [<it>] 0}>
>> where [1..6] creates a list on the fly for me of the values  
>> [1,2,3,4,5,6]
>
> Thanks for the suggestions, this prompted me to try
>
> <[1,2,3,4,5,6]: {RETYPE [<it>] 0<\n>}>
>
> which does what I want but not entirely sure its any better than
> pasting in the lines 6 times.


From baerrach at gmail.com  Fri Jul 17 18:21:55 2009
From: baerrach at gmail.com (Barrie Treloar)
Date: Sat, 18 Jul 2009 10:51:55 +0930
Subject: [stringtemplate-interest] How to write a helper template/macro
	for common stuff in a template (i.e. model and controller
	independent)
In-Reply-To: <410C618F-1CD2-4B6A-B55C-19D799B5F324@cs.usfca.edu>
References: <f6b307f10907162016x21eb5f05q4201b8ed05ba28ec@mail.gmail.com>
	<BD7A9E00-9FDA-435A-937F-0E8EBB9A9112@cs.usfca.edu>
	<f6b307f10907162145o2a1ca6eeg1be4f0cf32bc8b0d@mail.gmail.com>
	<2FA20C28-9BB1-4B2B-A1DE-93C85D151256@cs.usfca.edu>
	<f6b307f10907162329g5af4def9g657c4805463fb74a@mail.gmail.com>
	<f6b307f10907170129w250c7533t18335910c3faf803@mail.gmail.com>
	<410C618F-1CD2-4B6A-B55C-19D799B5F324@cs.usfca.edu>
Message-ID: <f6b307f10907171821h156e97f1n88b16e8bc6c8c66a@mail.gmail.com>

I cant use a Java class because these are model and controller independent.
i.e. they are view helper templates to make writing the view easier.

Its one of the reason I am hoping someone else has a similar use case.
Hoping a different view will increase my understanding.


On Sat, Jul 18, 2009 at 6:48 AM, Terence Parr<parrt at cs.usfca.edu> wrote:
> use a Java class whose toString method returns String.valueOf(counter++).
> Ter
> On Jul 17, 2009, at 1:29 AM, Barrie Treloar wrote:
>
>>> For my case, what I think I want is something like:
>>> ?<[1..6]: {RETYPE [<it>] 0}>
>>> where [1..6] creates a list on the fly for me of the values [1,2,3,4,5,6]
>>
>> Thanks for the suggestions, this prompted me to try
>>
>> <[1,2,3,4,5,6]: {RETYPE [<it>] 0<\n>}>
>>
>> which does what I want but not entirely sure its any better than
>> pasting in the lines 6 times.
>
>

From zen at freedbms.net  Fri Jul 17 19:35:49 2009
From: zen at freedbms.net (Zenaan Harkness)
Date: Sat, 18 Jul 2009 12:35:49 +1000
Subject: [stringtemplate-interest] How to write a helper
	template/macro	for common stuff in a template (i.e. model and
	controller	independent)
In-Reply-To: <f6b307f10907171821h156e97f1n88b16e8bc6c8c66a@mail.gmail.com>
References: <f6b307f10907162016x21eb5f05q4201b8ed05ba28ec@mail.gmail.com>
	<BD7A9E00-9FDA-435A-937F-0E8EBB9A9112@cs.usfca.edu>
	<f6b307f10907162145o2a1ca6eeg1be4f0cf32bc8b0d@mail.gmail.com>
	<2FA20C28-9BB1-4B2B-A1DE-93C85D151256@cs.usfca.edu>
	<f6b307f10907162329g5af4def9g657c4805463fb74a@mail.gmail.com>
	<f6b307f10907170129w250c7533t18335910c3faf803@mail.gmail.com>
	<410C618F-1CD2-4B6A-B55C-19D799B5F324@cs.usfca.edu>
	<f6b307f10907171821h156e97f1n88b16e8bc6c8c66a@mail.gmail.com>
Message-ID: <20090718023549.GB8267@freedbms.net>

On Sat, Jul 18, 2009 at 10:51:55AM +0930, Barrie Treloar wrote:
> I cant use a Java class because these are model and controller independent.
> i.e. they are view helper templates to make writing the view easier.
> 
> Its one of the reason I am hoping someone else has a similar use case.
> Hoping a different view will increase my understanding.

(BTW, preferably bottom-post if you will.)

Yes, to separate model, view and controller is a good approach.

I consider my "driver" as independant from "controller", where
controller is more about my model's logic to connect with view.

Whereas, my program or driver is my 'driver', that hooks up the bits for
the model, the bits for the controller, _and_ the bits for the view;

and then, hooks these three together.

I consider my view independant of anything else. My view has its own
hierarchy of templates, and combinations of templates and code, to
create flexible, powerful views.

And logically (and in terms of classes), my view is entirely separate
from my model.

Just because a particular view has one or more java classes directly
associated with the view, does not mean my view is not entirely separate
from my model (assuming I code it with a nice clean separation).

Regards
Zen

-- 
Homepage: www.SoulSound.net -- Free Australia: www.UPMART.org
Please respect the confidentiality of this email as sensibly warranted.

From edeustace at yahoo.com  Sun Jul 19 12:58:13 2009
From: edeustace at yahoo.com (ed ed)
Date: Sun, 19 Jul 2009 12:58:13 -0700 (PDT)
Subject: [stringtemplate-interest] Setting the default lexer on the common
	group loader
Message-ID: <678458.5426.qm@web30604.mail.mud.yahoo.com>

Hello, 
I've been playing around with StringTemplate 3.2 and enjoying it greatly.

When I started I began using the $ as my expression delimiter. This was working great while developing locally. 

I'm now trying to generate a .jar within which I have my bundled Templates. The docs state that you need to use CommonGroupLoader for jar files. (http://www.antlr.org/wiki/display/ST/Group+Files). However the default lexer token for groups is the Angle bracket (<>).

I can see in the docs how to change the delimiter for a template group that I'm creating  a new instance of: 
http://www.antlr.org/wiki/display/ST/Setting+the+expression+delimiters

But I don't know how to change the default delimiter when using the comon group loader.

This is what I'm trying:
StringTemplateGroupLoader loader = new CommonGroupLoader(FOLDER, new ErrorListener() );
StringTemplateGroup.registerGroupLoader(loader);
StringTemplateGroup.registerDefaultLexer(DefaultTemplateLexer.class);
StringTemplateGroup group = StringTemplateGroup.loadGroup("classgroup");
StringTemplate template = group.getInstanceOf("classGenerator");
template.setAttribute("config", "config" );
log.info(template.toString() );

For a template like so:
group classgroup;

classGenerator(config,setup) ::= <<
    hello $config$
    hello "config"
    hello <config>
 >>

I get:
hello $config$
hello "config"
hello config

The closest thing I've found is this:
http://www.antlr.org/pipermail/stringtemplate-interest/2007-May/001046.html

Any tips greatly appreciated,
Best,
Ed


      
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20090719/51574404/attachment.html 

From parrt at cs.usfca.edu  Sun Jul 19 13:01:02 2009
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sun, 19 Jul 2009 13:01:02 -0700
Subject: [stringtemplate-interest] Setting the default lexer on the
	common group loader
In-Reply-To: <678458.5426.qm@web30604.mail.mud.yahoo.com>
References: <678458.5426.qm@web30604.mail.mud.yahoo.com>
Message-ID: <03764766-A28A-40C4-BEEF-7165CC96A61B@cs.usfca.edu>

Hi Ed,

can you try using the lexer argument on the constructor to the group?  
I think the problem is related to loading the templates before the  
appropriate lexer has  been set.
Ter
On Jul 19, 2009, at 12:58 PM, ed ed wrote:

> Hello,
> I've been playing around with StringTemplate 3.2 and enjoying it  
> greatly.
>
> When I started I began using the $ as my expression delimiter. This  
> was working great while developing locally.
>
> I'm now trying to generate a .jar within which I have my bundled  
> Templates. The docs state that you need to use CommonGroupLoader for  
> jar files. (http://www.antlr.org/wiki/display/ST/Group+Files).  
> However the default lexer token for groups is the Angle bracket (<>).
>
> I can see in the docs how to change the delimiter for a template  
> group that I'm creating  a new instance of:
> http://www.antlr.org/wiki/display/ST/Setting+the+expression+delimiters
>
> But I don't know how to change the default delimiter when using the  
> comon group loader.
>
> This is what I'm trying:
> StringTemplateGroupLoader loader = new CommonGroupLoader(FOLDER, new  
> ErrorListener() );
> StringTemplateGroup.registerGroupLoader(loader);
> StringTemplateGroup.registerDefaultLexer(DefaultTemplateLexer.class);
> StringTemplateGroup group =  
> StringTemplateGroup.loadGroup("classgroup");
> StringTemplate template = group.getInstanceOf("classGenerator");
> template.setAttribute("config", "config" );
> log.info(template.toString() );
>
> For a template like so:
> group classgroup;
>
> classGenerator(config,setup) ::= <<
>     hello $config$
>     hello "config"
>     hello <config>
>  >>
>
> I get:
> hello $config$
> hello "config"
> hello config
>
> The closest thing I've found is this:
> http://www.antlr.org/pipermail/stringtemplate-interest/2007-May/001046.html
>
> Any tips greatly appreciated,
> Best,
> Ed
>
>
>
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest


From edeustace at yahoo.com  Sun Jul 19 15:02:45 2009
From: edeustace at yahoo.com (ed ed)
Date: Sun, 19 Jul 2009 15:02:45 -0700 (PDT)
Subject: [stringtemplate-interest] Setting the default lexer on the
	common group loader
In-Reply-To: <03764766-A28A-40C4-BEEF-7165CC96A61B@cs.usfca.edu>
References: <678458.5426.qm@web30604.mail.mud.yahoo.com>
	<03764766-A28A-40C4-BEEF-7165CC96A61B@cs.usfca.edu>
Message-ID: <345245.35646.qm@web30607.mail.mud.yahoo.com>

Terence, 
You are a scholar and a gent!

For the record here is what I have now:
StringTemplateGroupLoader loader = new CommonGroupLoader(FOLDER, new ErrorListener() );
StringTemplateGroup.registerGroupLoader(loader);
StringTemplateGroup group = StringTemplateGroup.loadGroup("classgroup", DefaultTemplateLexer.class, new StringTemplateGroup("super") );
StringTemplate template = group.getInstanceOf("classGenerator");
template.setAttribute("config", "config" );
log.info(template.toString() );

Best,
Ed





________________________________
From: Terence Parr <parrt at cs.usfca.edu>
To: ed ed <edeustace at yahoo.com>
Cc: stringtemplate-interest at antlr.org
Sent: Sunday, July 19, 2009 9:01:02 PM
Subject: Re: [stringtemplate-interest] Setting the default lexer on the common group loader

Hi Ed,

can you try using the lexer argument on the constructor to the group? I think the problem is related to loading the templates before the appropriate lexer has  been set.
Ter
On Jul 19, 2009, at 12:58 PM, ed ed wrote:

> Hello,
> I've been playing around with StringTemplate 3.2 and enjoying it greatly.
> 
> When I started I began using the $ as my expression delimiter. This was working great while developing locally.
> 
> I'm now trying to generate a .jar within which I have my bundled Templates. The docs state that you need to use CommonGroupLoader for jar files. (http://www.antlr.org/wiki/display/ST/Group+Files). However the default lexer token for groups is the Angle bracket (<>).
> 
> I can see in the docs how to change the delimiter for a template group that I'm creating  a new instance of:
> http://www.antlr.org/wiki/display/ST/Setting+the+expression+delimiters
> 
> But I don't know how to change the default delimiter when using the comon group loader.
> 
> This is what I'm trying:
> StringTemplateGroupLoader loader = new CommonGroupLoader(FOLDER, new ErrorListener() );
> StringTemplateGroup.registerGroupLoader(loader);
> StringTemplateGroup.registerDefaultLexer(DefaultTemplateLexer.class);
> StringTemplateGroup group = StringTemplateGroup.loadGroup("classgroup");
> StringTemplate template = group.getInstanceOf("classGenerator");
> template.setAttribute("config", "config" );
> log.info(template.toString() );
> 
> For a template like so:
> group classgroup;
> 
> classGenerator(config,setup) ::= <<
>     hello $config$
>     hello "config"
>     hello <config>
>  >>
> 
> I get:
> hello $config$
> hello "config"
> hello config
> 
> The closest thing I've found is this:
> http://www.antlr.org/pipermail/stringtemplate-interest/2007-May/001046.html
> 
> Any tips greatly appreciated,
> Best,
> Ed
> 
> 
> 
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest


      
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20090719/7a120ab8/attachment.html 

From parrt at cs.usfca.edu  Sun Jul 19 15:04:01 2009
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sun, 19 Jul 2009 15:04:01 -0700
Subject: [stringtemplate-interest] Setting the default lexer on the
	common group loader
In-Reply-To: <345245.35646.qm@web30607.mail.mud.yahoo.com>
References: <678458.5426.qm@web30604.mail.mud.yahoo.com>
	<03764766-A28A-40C4-BEEF-7165CC96A61B@cs.usfca.edu>
	<345245.35646.qm@web30607.mail.mud.yahoo.com>
Message-ID: <699C3509-DC09-46E9-941F-61DA9146AD81@cs.usfca.edu>


On Jul 19, 2009, at 3:02 PM, ed ed wrote:

> Terence,
> You are a scholar and a gent!

Well, I may be a scholar but hardly a gentleman ;)

> For the record here is what I have now:
> StringTemplateGroupLoader loader = new CommonGroupLoader(FOLDER, new  
> ErrorListener() );
> StringTemplateGroup.registerGroupLoader(loader);
> StringTemplateGroup group =  
> StringTemplateGroup.loadGroup("classgroup",  
> DefaultTemplateLexer.class, new StringTemplateGroup("super") );
> StringTemplate template = group.getInstanceOf("classGenerator");
> template.setAttribute("config", "config" );
> log.info(template.toString() );

hooray!
T

From ron.koerner at wincor-nixdorf.com  Wed Jul 22 08:04:38 2009
From: ron.koerner at wincor-nixdorf.com (Koerner, Ron)
Date: Wed, 22 Jul 2009 17:04:38 +0200
Subject: [stringtemplate-interest] The select-option problem
Message-ID: <371853577D3E4A47BA524E160DA7420E01160E3E@DEEXVS02.wincor-nixdorf.com>

Hi list,

I'm encountering the select-option (or input type=radio) problem:

I have a fixed list of selectable options and a variable matching one of
the selected entries. I want to mark the selected entry in some way,
e.g.:

<input type=radio name=opt value=opt1>
...
<input type=radio name=opt value=opt2 checked=checked>
...
<input type=radio name=opt value=opt3>

if my variable equals "opt2".

I found some quite old mailing list entries that this is not easily
possible and since I can't use list comprehension here it is even more
complicated.

So I have two questions:

1. Is there a possibility to do something like
$if(eq(selected,"opt1"))$checked=checked$endif$ ? It doesn't look like
that based on my inspection of the source code...

2. Shouldn't there be something like this?


As a reason why this is currently not there was stated a violation of
model-view-separation. I think it is the contrary case. The current
feature set requires the model to be adapted to satisfy the view!

Proof:

The business logic requires a selection between several choices of some
kind. So this selected choice is in my model.
The view is simply an text input box which is populated with the current
selection. Some Javascript code ensures no invalid values can be
entered.
Now someone says that looks ugly and wants a selection box or radio
buttons.
There is no possibility to implement that without changing the model,
even if the displayed information is the same.

Regards,
Ron

-- 
WINCOR NIXDORF International GmbH 
Sitz der Gesellschaft: Paderborn 
Registergericht Paderborn HRB 3507
Gesch?ftsf?hrer: Eckard Heidloff (Vorsitzender), Stefan Auerbach, Dr. J?rgen Wunram
Vorsitzender des Aufsichtsrats: Karl-Heinz Stiller 
Steuernummer: 339/5884/0020 - Ust-ID Nr.: DE812927716 - WEEE-Reg.-Nr. DE44477193

Diese E-Mail enth?lt vertrauliche Informationen. Wenn Sie nicht der richtige Adressat sind oder diese E-Mail irrt?mlich erhalten haben, informieren Sie bitte sofort den Absender und vernichten Sie diese E-Mail. Das unerlaubte Kopieren sowie die unbefugte Weitergabe dieser E-Mail ist nicht gestattet.

This e-mail may contain confidential information. If you are not the intended recipient (or have received this e-mail in error) please notify the sender immediately and destroy this e-mail. Any unauthorised copying, disclosure or distribution of the material in this e-mail is strictly forbidden. 


From zen at freedbms.net  Wed Jul 22 10:02:07 2009
From: zen at freedbms.net (Zenaan Harkness)
Date: Thu, 23 Jul 2009 03:02:07 +1000
Subject: [stringtemplate-interest] The select-option problem
In-Reply-To: <371853577D3E4A47BA524E160DA7420E01160E3E@DEEXVS02.wincor-nixdorf.com>
References: <371853577D3E4A47BA524E160DA7420E01160E3E@DEEXVS02.wincor-nixdorf.com>
Message-ID: <20090722170207.GK8194@freedbms.net>

> I have a fixed list of selectable options and a variable matching one of
> the selected entries. I want to mark the selected entry in some way,
> e.g.:
> 
> <input type=radio name=opt value=opt1>
> ...
> <input type=radio name=opt value=opt2 checked=checked>
> ...
> <input type=radio name=opt value=opt3>

> I found some quite old mailing list entries that this is not easily
> possible

define 'easy'; if you mean, doing it all in ST, yes, not so easy;
otherwise, see below

> and since I can't use list comprehension here it is even more
> complicated.

more complete list fns should come in next+1 version of ST;
but likely low performance compared to View Controller, see below

> So I have two questions:
> 
> 1. Is there a possibility to do something like
> $if(eq(selected,"opt1"))$checked=checked$endif$ ? It doesn't look like
> that based on my inspection of the source code...

"business logic" is intended to be completely removed from view
generation; ST maximizes MVC separation above other considerations;

> 2. Shouldn't there be something like this?

allowing 'complex' expressions in your view templates is a slippery
slope, and leads almost immediately to views intertwined with business
logic. Just don't! is the answer. But the solution? View controller
class.

Expand your concept of Controller in MVC:

Model controllers ~= business logic;

View controllers ~= business presentation logic;

Your good taste as a systems designer will determine the effectiveness
with which you separate Model and View controllers, and how they
interact.

This is a form of MVC Recursion, or more generally,
Design Pattern Recursion.

You can think of your system as a whole having a model (entities and
their relationships), views (how to display the system), and controllers
(business logic).

Recursively, your model can have it's own MVC design, and your view can
have its own MVC design.

ST is doing us the great service of causing us to think of our systems
more methodically, to really get to the heart of a good design, by
consistently separating view generation infrastructure, from model
representation infrastructure, from model controller and as we can
clearly see here, even view controller infrastructure.

This strict requirement is actually ST's great contribution to the world
of template engines. Stick with it, and you will eventually reap the
benefits.

> As a reason why this is currently not there was stated a violation of
> model-view-separation. I think it is the contrary case. The current
> feature set requires the model to be adapted to satisfy the view!

That would indeed also be a violation of MVC! Don't do it, of course...

Expand your system concept, as described above. It is not that
"my code can only have model-specific stuff, because my code == my model"

Indeed, you could code your views, and implement this in strict MVC.

ST merely goes a long way to making it easy for you to attain strict MVC
separation but cannot force you that way.

ST is strictly view production, not view controller/ view logic,
although it provides for some simple view logic.

So, you write your View Controller/ View Logic code, and keep it very
separate from your model controllers and model view (entity!) classes,
even though your view (ST) controller classes will need to rely on your
model's view (entity) classes.

It's a little complex because of the MVC Recursion...


> Proof:
> 
> The business logic requires a selection between several choices of some
> kind. So this selected choice is in my model.
> The view is simply an text input box which is populated with the current
> selection. Some Javascript code ensures no invalid values can be
> entered.
> Now someone says that looks ugly and wants a selection box or radio
> buttons.

> There is no possibility to implement that without changing the model,
> even if the displayed information is the same.

Your are restricting yourself with your self-imposed limitation 'there
is no possibility to implement such view controller logic...'.

What you meant of course was 'there's no easy way to implement my view
controller logic in ST'; and now that you say it in this way, you are
more correct, and more open to good solutions.

Solution is now obvious: implement view controller logic, in code,
outside of ST, separate to your model and separate to your model
controller; perhaps a layer between your model and your ST.

:)

Good luck,
Zenaan


-- 
Homepage: www.SoulSound.net -- Free Australia: www.UPMART.org
Please respect the confidentiality of this email as sensibly warranted.

From ron.koerner at wincor-nixdorf.com  Wed Jul 22 10:34:13 2009
From: ron.koerner at wincor-nixdorf.com (Koerner, Ron)
Date: Wed, 22 Jul 2009 19:34:13 +0200
Subject: [stringtemplate-interest] The select-option problem
In-Reply-To: <20090722170207.GK8194@freedbms.net>
References: <371853577D3E4A47BA524E160DA7420E01160E3E@DEEXVS02.wincor-nixdorf.com>
	<20090722170207.GK8194@freedbms.net>
Message-ID: <371853577D3E4A47BA524E160DA7420E01160E72@DEEXVS02.wincor-nixdorf.com>

Hi Zenaan,

so I understand that stringtemplate should not access the business
model, but needs a separate code layer which turns the business model
into a specialized view model, which is then modified another time by
the template engine (formatters, removing null elements) to be finally
used to generate output.

The view model and the view itself are highly coupled and if you change
the view you probably will have to change the code to generate the view
model.

On the other hand that means things like custom formatters and
null-element-removal are actually violating this because they are
putting logic into the template which actually belongs into the view
model generator. I'm sure there are more things. So why can't we have
another thing which would be 100% pure functional and would not need us
to revert to code which looks like a dirty hack.

I do not want a full fledged expression language, just an equality
check...

Regards,
Ron



-----Original Message-----
From: stringtemplate-interest-bounces at antlr.org
[mailto:stringtemplate-interest-bounces at antlr.org] On Behalf Of Zenaan
Harkness
Sent: Wednesday, July 22, 2009 7:02 PM
To: stringtemplate-interest at antlr.org
Subject: Re: [stringtemplate-interest] The select-option problem

> I have a fixed list of selectable options and a variable matching one
of
> the selected entries. I want to mark the selected entry in some way,
> e.g.:
> 
> <input type=radio name=opt value=opt1>
> ...
> <input type=radio name=opt value=opt2 checked=checked>
> ...
> <input type=radio name=opt value=opt3>

> I found some quite old mailing list entries that this is not easily
> possible

define 'easy'; if you mean, doing it all in ST, yes, not so easy;
otherwise, see below

> and since I can't use list comprehension here it is even more
> complicated.

more complete list fns should come in next+1 version of ST;
but likely low performance compared to View Controller, see below

> So I have two questions:
> 
> 1. Is there a possibility to do something like
> $if(eq(selected,"opt1"))$checked=checked$endif$ ? It doesn't look like
> that based on my inspection of the source code...

"business logic" is intended to be completely removed from view
generation; ST maximizes MVC separation above other considerations;

> 2. Shouldn't there be something like this?

allowing 'complex' expressions in your view templates is a slippery
slope, and leads almost immediately to views intertwined with business
logic. Just don't! is the answer. But the solution? View controller
class.

Expand your concept of Controller in MVC:

Model controllers ~= business logic;

View controllers ~= business presentation logic;

Your good taste as a systems designer will determine the effectiveness
with which you separate Model and View controllers, and how they
interact.

This is a form of MVC Recursion, or more generally,
Design Pattern Recursion.

You can think of your system as a whole having a model (entities and
their relationships), views (how to display the system), and controllers
(business logic).

Recursively, your model can have it's own MVC design, and your view can
have its own MVC design.

ST is doing us the great service of causing us to think of our systems
more methodically, to really get to the heart of a good design, by
consistently separating view generation infrastructure, from model
representation infrastructure, from model controller and as we can
clearly see here, even view controller infrastructure.

This strict requirement is actually ST's great contribution to the world
of template engines. Stick with it, and you will eventually reap the
benefits.

> As a reason why this is currently not there was stated a violation of
> model-view-separation. I think it is the contrary case. The current
> feature set requires the model to be adapted to satisfy the view!

That would indeed also be a violation of MVC! Don't do it, of course...

Expand your system concept, as described above. It is not that
"my code can only have model-specific stuff, because my code == my
model"

Indeed, you could code your views, and implement this in strict MVC.

ST merely goes a long way to making it easy for you to attain strict MVC
separation but cannot force you that way.

ST is strictly view production, not view controller/ view logic,
although it provides for some simple view logic.

So, you write your View Controller/ View Logic code, and keep it very
separate from your model controllers and model view (entity!) classes,
even though your view (ST) controller classes will need to rely on your
model's view (entity) classes.

It's a little complex because of the MVC Recursion...


> Proof:
> 
> The business logic requires a selection between several choices of
some
> kind. So this selected choice is in my model.
> The view is simply an text input box which is populated with the
current
> selection. Some Javascript code ensures no invalid values can be
> entered.
> Now someone says that looks ugly and wants a selection box or radio
> buttons.

> There is no possibility to implement that without changing the model,
> even if the displayed information is the same.

Your are restricting yourself with your self-imposed limitation 'there
is no possibility to implement such view controller logic...'.

What you meant of course was 'there's no easy way to implement my view
controller logic in ST'; and now that you say it in this way, you are
more correct, and more open to good solutions.

Solution is now obvious: implement view controller logic, in code,
outside of ST, separate to your model and separate to your model
controller; perhaps a layer between your model and your ST.

:)

Good luck,
Zenaan


-- 
Homepage: www.SoulSound.net -- Free Australia: www.UPMART.org
Please respect the confidentiality of this email as sensibly warranted.
_______________________________________________
stringtemplate-interest mailing list
stringtemplate-interest at antlr.org
http://www.antlr.org/mailman/listinfo/stringtemplate-interest

-- 
WINCOR NIXDORF International GmbH 
Sitz der Gesellschaft: Paderborn 
Registergericht Paderborn HRB 3507
Gesch?ftsf?hrer: Eckard Heidloff (Vorsitzender), Stefan Auerbach, Dr. J?rgen Wunram
Vorsitzender des Aufsichtsrats: Karl-Heinz Stiller 
Steuernummer: 339/5884/0020 - Ust-ID Nr.: DE812927716 - WEEE-Reg.-Nr. DE44477193

Diese E-Mail enth?lt vertrauliche Informationen. Wenn Sie nicht der richtige Adressat sind oder diese E-Mail irrt?mlich erhalten haben, informieren Sie bitte sofort den Absender und vernichten Sie diese E-Mail. Das unerlaubte Kopieren sowie die unbefugte Weitergabe dieser E-Mail ist nicht gestattet.

This e-mail may contain confidential information. If you are not the intended recipient (or have received this e-mail in error) please notify the sender immediately and destroy this e-mail. Any unauthorised copying, disclosure or distribution of the material in this e-mail is strictly forbidden. 


From baerrach at gmail.com  Wed Jul 22 18:35:37 2009
From: baerrach at gmail.com (Barrie Treloar)
Date: Thu, 23 Jul 2009 11:05:37 +0930
Subject: [stringtemplate-interest] outputting current template file and line
	number?
Message-ID: <f6b307f10907221835g287933e2s6ab9cf02c87fa9d5@mail.gmail.com>

Is this possible or on the todo list?

Trying to debug my complex template is getting harder :)
If I could include the current template file name and the line number
in the output that would be helpful.
I can then use these in a comment so I can track down errors quicker.

Cheers

From parrt at cs.usfca.edu  Wed Jul 22 18:39:39 2009
From: parrt at cs.usfca.edu (Terence Parr)
Date: Wed, 22 Jul 2009 18:39:39 -0700
Subject: [stringtemplate-interest] outputting current template file and
	line number?
In-Reply-To: <f6b307f10907221835g287933e2s6ab9cf02c87fa9d5@mail.gmail.com>
References: <f6b307f10907221835g287933e2s6ab9cf02c87fa9d5@mail.gmail.com>
Message-ID: <0E5890C8-0BF5-4838-AA55-E83A6B9B9DAD@cs.usfca.edu>

  take a look at the emit start stop tag thing. Is very useful for  
figuring out where some  output came from.
Ter
On Jul 22, 2009, at 6:35 PM, Barrie Treloar wrote:

> Is this possible or on the todo list?
>
> Trying to debug my complex template is getting harder :)
> If I could include the current template file name and the line number
> in the output that would be helpful.
> I can then use these in a comment so I can track down errors quicker.
>
> Cheers
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest


From zen at freedbms.net  Wed Jul 22 19:59:51 2009
From: zen at freedbms.net (Zenaan Harkness)
Date: Thu, 23 Jul 2009 12:59:51 +1000
Subject: [stringtemplate-interest] The select-option problem
In-Reply-To: <371853577D3E4A47BA524E160DA7420E01160E72@DEEXVS02.wincor-nixdorf.com>
References: <371853577D3E4A47BA524E160DA7420E01160E3E@DEEXVS02.wincor-nixdorf.com>
	<20090722170207.GK8194@freedbms.net>
	<371853577D3E4A47BA524E160DA7420E01160E72@DEEXVS02.wincor-nixdorf.com>
Message-ID: <20090723025950.GL8194@freedbms.net>

> so I understand that stringtemplate should not access the business
> model, but needs a separate code layer which turns the business model
> into a specialized view model, which is then modified another time by
> the template engine (formatters, removing null elements) to be finally
> used to generate output.

Assuming the complexity of requirements that it seems you happen to need
for your system, then this might be a suitable approach to achieving
your requirements. It's a decision for you of course.

> The view model and the view itself are highly coupled and if you change

Good design principle is to minimize coupling. If you mean by "the view
itself", your ST templates, then there is still no reason to not
minimize coupling. At least to the extent you can.

But yes, the "view" model will have a greater 'coupling' with the view
templates (view view), than will the model model, model view, etc.

> the view you probably will have to change the code to generate the view
> model.

Your statement is not specific enough to be able to respond properly.

> On the other hand that means things like custom formatters and
> null-element-removal are actually violating this because they are
> putting logic into the template which actually belongs into the view

Yes, from the perspective of view view (templates) and view controller/
model, this is the case.

The question that has been and is still with the ST community, is what
can be included in ST 'code', whilst still strongly encouraging view and
model separation.

With MVC recursion, which should be self-evident by now, we also have to
be careful with our words, or we end up quite ambiguous.

> model generator. I'm sure there are more things. So why can't we have
> another thing which would be 100% pure functional and would not need us
> to revert to code which looks like a dirty hack.

No reason at all. I am personally an advocate for a goodly and full
functional grammar for ST.

Terence (sp?) who is the primary author of ST and ANTLR, is just
finishing a book, and then he is considering the creation of a formal ST
specification, as part of the ST 2.7? to 3.0 transition.

The first step will be specify existing behaviour, with some smallish
tidy ups here and there.

Second step will be specify enhancements.

Third step will be implement enhancements for ST 3.5 (or whatever it
gets called).

It will be a great benefit if you now make your enhancement proposal
in a clear and concise way, which is as suitable for a specification
document as you can achieve. You have joined the ST community at a
rather auspicious time...

Given that ST, being a templating language is sort of a reverse-grammar,
or anti-grammar, to specify it formally with a 'grammar' means an
anti-grammar grammar.

> I do not want a full fledged expression language, just an equality
> check...

Conditionals appears to be the concession to 'functional templating' at
the moment. They've been creeping in over time, getting more full
featured.

To create templates at the level that this community desires, they are
necessary.

Here's a thought: does it make sense to have two templating layers - the
low level 'pure ST declarative/ combinatorial templates' and a higher
view-controller/ view-model layer, which is a functional expression
language tailored specifically for views.

Intriguing...

We'd need to contemplate how the two layers would look, and how they
would interact.

I suspect that the view-controller and view-model will, due to their
potential complexity, simply be best implemented in a regular
programming language. I guess it would be good if someone were so
motivated as to create a lisp layer/ library, as ST controller layer.

Regards
Zenaan

-- 
Homepage: www.SoulSound.net -- Free Australia: www.UPMART.org
Please respect the confidentiality of this email as sensibly warranted.

From baerrach at gmail.com  Wed Jul 22 21:12:25 2009
From: baerrach at gmail.com (Barrie Treloar)
Date: Thu, 23 Jul 2009 13:42:25 +0930
Subject: [stringtemplate-interest] outputting current template file and
	line number?
In-Reply-To: <0E5890C8-0BF5-4838-AA55-E83A6B9B9DAD@cs.usfca.edu>
References: <f6b307f10907221835g287933e2s6ab9cf02c87fa9d5@mail.gmail.com>
	<0E5890C8-0BF5-4838-AA55-E83A6B9B9DAD@cs.usfca.edu>
Message-ID: <f6b307f10907222112w164d1ba3u63429dd59fc1e2f0@mail.gmail.com>

On Thu, Jul 23, 2009 at 11:09 AM, Terence Parr<parrt at cs.usfca.edu> wrote:
> ?take a look at the emit start stop tag thing. Is very useful for figuring
> out where some ?output came from.

Ahh http://www.stringtemplate.org/api/org/antlr/stringtemplate/StringTemplateGroup.html#emitDebugStartStopStrings(boolean)
thanks.

But how do you set what the debug start/stop strings should be?
... looking at the code, I can't.

StringTemplateGroup.emitTemplateStartDebugString() -  Line 1031
			out.write("<"+groupPrefix +st.getName()+">");

This is probably another edge case for me.

The generated template is used in another engine and will print out
the rules that it matches, including any comments on that rule.
So I really want the Template:LineNumber as part of that comment so I
can see which rule fired.

I dont think I want the file:line to be output for every template that
gets invoked... that's probably going to clutter the output and I'd
need the emitter to have a configurable start/end debug string.

Maybe I could push the current template as an attribute so I could do
<template.name>, <template.line> but I would need to expose the
current chunk to pull out the AST since that is what has the line
information.
These all sound like crazy thoughts. Back to the manual way.

Thanks.

From parrt at cs.usfca.edu  Wed Jul 22 22:56:05 2009
From: parrt at cs.usfca.edu (Terence Parr)
Date: Wed, 22 Jul 2009 22:56:05 -0700
Subject: [stringtemplate-interest] outputting current template file and
	line number?
In-Reply-To: <f6b307f10907222112w164d1ba3u63429dd59fc1e2f0@mail.gmail.com>
References: <f6b307f10907221835g287933e2s6ab9cf02c87fa9d5@mail.gmail.com>
	<0E5890C8-0BF5-4838-AA55-E83A6B9B9DAD@cs.usfca.edu>
	<f6b307f10907222112w164d1ba3u63429dd59fc1e2f0@mail.gmail.com>
Message-ID: <10672924-50AB-4AE4-A7EF-A960485AC48A@cs.usfca.edu>

Can you override STG and change the functionality?
Ter

On Jul 22, 2009, at 9:12 PM, Barrie Treloar wrote:

> On Thu, Jul 23, 2009 at 11:09 AM, Terence Parr<parrt at cs.usfca.edu>  
> wrote:
>>  take a look at the emit start stop tag thing. Is very useful for  
>> figuring
>> out where some  output came from.
>
> Ahh http://www.stringtemplate.org/api/org/antlr/stringtemplate/StringTemplateGroup.html#emitDebugStartStopStrings(boolean)
> thanks.
>
> But how do you set what the debug start/stop strings should be?
> ... looking at the code, I can't.
>
> StringTemplateGroup.emitTemplateStartDebugString() -  Line 1031
> 			out.write("<"+groupPrefix +st.getName()+">");
>
> This is probably another edge case for me.
>
> The generated template is used in another engine and will print out
> the rules that it matches, including any comments on that rule.
> So I really want the Template:LineNumber as part of that comment so I
> can see which rule fired.
>
> I dont think I want the file:line to be output for every template that
> gets invoked... that's probably going to clutter the output and I'd
> need the emitter to have a configurable start/end debug string.
>
> Maybe I could push the current template as an attribute so I could do
> <template.name>, <template.line> but I would need to expose the
> current chunk to pull out the AST since that is what has the line
> information.
> These all sound like crazy thoughts. Back to the manual way.
>
> Thanks.


From baerrach at gmail.com  Wed Jul 22 23:43:07 2009
From: baerrach at gmail.com (Barrie Treloar)
Date: Thu, 23 Jul 2009 16:13:07 +0930
Subject: [stringtemplate-interest] outputting current template file and
	line number?
In-Reply-To: <10672924-50AB-4AE4-A7EF-A960485AC48A@cs.usfca.edu>
References: <f6b307f10907221835g287933e2s6ab9cf02c87fa9d5@mail.gmail.com>
	<0E5890C8-0BF5-4838-AA55-E83A6B9B9DAD@cs.usfca.edu>
	<f6b307f10907222112w164d1ba3u63429dd59fc1e2f0@mail.gmail.com>
	<10672924-50AB-4AE4-A7EF-A960485AC48A@cs.usfca.edu>
Message-ID: <f6b307f10907222343s7d894e2bt6f9528e35e35239a@mail.gmail.com>

On Thu, Jul 23, 2009 at 3:26 PM, Terence Parr<parrt at cs.usfca.edu> wrote:
> Can you override STG and change the functionality?

Hmm, I didn't think of that.
For STG and emitting debug start and stop tags, I think the answer is yes.

To get Template filename and line the expression chunk is in the
StringTemplate.write(StringTemplateWriter out) method in the for loop.
So it would be a cut-and-paste extension... I'll give it a go and see
what happens.

From ron.koerner at wincor-nixdorf.com  Fri Jul 24 01:39:46 2009
From: ron.koerner at wincor-nixdorf.com (Koerner, Ron)
Date: Fri, 24 Jul 2009 10:39:46 +0200
Subject: [stringtemplate-interest] FW: FW:  The select-option problem
Message-ID: <371853577D3E4A47BA524E160DA7420E0116114D@DEEXVS02.wincor-nixdorf.com>


>> so I understand that stringtemplate should not access the business
>> model, but needs a separate code layer which turns the business model
>> into a specialized view model, which is then modified another time by
>> the template engine (formatters, removing null elements) to be
finally
>> used to generate output.
>
> Assuming the complexity of requirements that it seems you happen to
need
> for your system, then this might be a suitable approach to achieving
> your requirements. It's a decision for you of course.

I think this is a generalization which is always valid, even if
sometimes certain elements are a litte degenerated.

>> The view model and the view itself are highly coupled and if you
change
>
> Good design principle is to minimize coupling. If you mean by "the
view
> itself", your ST templates, then there is still no reason to not
> minimize coupling. At least to the extent you can.

This is exactly my intention.

>> On the other hand that means things like custom formatters and
>> null-element-removal are actually violating this because they are
>> putting logic into the template which actually belongs into the view
>
> Yes, from the perspective of view view (templates) and view
controller/
> model, this is the case.
>
> The question that has been and is still with the ST community, is what
> can be included in ST 'code', whilst still strongly encouraging view
and
> model separation.

Here we are speaking of business model and view view?

>> model generator. I'm sure there are more things. So why can't we have
>> another thing which would be 100% pure functional and would not need
>> us to revert to code which looks like a dirty hack.
>
> No reason at all. I am personally an advocate for a goodly and full
> functional grammar for ST.

I meant functional in the sense of "no side effects". I assume we are
agreeing very strongly on this point.

> It will be a great benefit if you now make your enhancement proposal
> in a clear and concise way, which is as suitable for a specification
> document as you can achieve. You have joined the ST community at a
> rather auspicious time...

It will be too late for my current problem (which I have solved in
several ways now, some purely within templates), but I'd like to
contribute.

> Here's a thought: does it make sense to have two templating layers -
the
> low level 'pure ST declarative/ combinatorial templates' and a higher
> view-controller/ view-model layer, which is a functional expression
> language tailored specifically for views.

This is something I was wondering about when I went to sleep.

I think we have the following components in about every system, even if
these sometimes collapse or are implicit:

- business model
- page model builder
- page model
- render builder
- render specification
- render model
- renderer

The business model comprises all the data and entities reflecting the
universe of the program. A displayed page will contain some data out
of this universe, either raw or processed. This data is the page
model, which is built by the page model builder. The page model only
contains data that should be displayed, but does not make any
assumptions on how it is displayed. Therefore it must not contain data
which is only used to satisfy something in the render pipeline.
Model-View separation happens between the page model and the render
builder.

The business model would for example contain some total and regional
sales numbers per month. The page model builder would copy or
reference that data and would add percentages per month and an average
per year and put that into the page model.

The render builder uses the page model and a render specification to
build the render model, which is interpreted by the renderer to
produce output.

The render model is more like a scene graph, i.e. it contains simply
all of the elements which are displayed later. The renderer is a fixed
piece of code, i.e. it will not be configured or parametrized. At
least not on a page-by-page base. The easiest forms of render model
and renderer are a list of strings and a piece of code concatenating
these strings and output the result.

The render builder will only compute stuff related purely to
displaying the page model but may not provide additional data or
aggregate provided data.


In our case the page model builder is whoever generates a
StringTemplate and the page model is built by several calls to
st.setAttribute(). The render builder is the string template engine,
the render specification is the template. Render model and renderer
are also buried in the string template engine and not really visible
to the user.

Right now, almost all information only needed for rendering is already
contained in the render specification where it belongs. IMHO, there is
one exception: the render builder cannot identify an entity by name,
it can only select an entity by name.

There are a lot of cases which make it necessary to handle an element
of a list in a special way. Since it is not easily possible to
identify the special element by name the usual workaround is to enrich
the page model with a list containing all the elements paired with a
hint whether it is the special element or not. This clearly violates
model-view separation as explained above.

It is arguable whether the representation of the special element by
name (or by index) is arbitrary or natural (I think a single element
selection is naturally done by name or index) or a per-list-element
hint is arbitrary or natural. Anyway, it is fact that both cases occur
in real-world.

Examples are:
- select/option's and input/radio's HTML representation uses a
per-element-hint
- select/option's and input/radio's data model (i.e. form output) uses
an element-name
- GTK+ radio buttons use a per-element-hint
- GTK+ select box uses an element-name

If someone would build an application which outputs web interfaces and
GTK+ applications, it would not be easily possible to build templates
which would do both unless the page model contains both
representations of the selected element.

(I know it is not too complicated, albeit not good for performance, to
extract the name from a list containing names and hint pairs)

All that said, I'd like to place a feature request to the render
specification and render builder which allows to conditionally
evaluate a piece of text, if two string values, which may be constants
or evaluated templates, are equal. A negated form would fit in
naturally. This does not violate model-view separation but makes it
possible.

This could be implemented either by a function eq(x,y) which evaluates
to true if the evaluated forms of x and y are equal, by an infix
operator == or = or by a special conditional eq(x,y), which can be
used where ever if(x) is used.
Personally I tend to like the function eq(x,y) most. The only problem
with that is an inconsistent appearance with other multi-argument
"functions" i.e. templates, since these have only named parameters
whereas the eq-function would benefit from positional parameters.

I once built a protocol builder targeting multiple programming
languages with string template and found named parameters very unhandy
most of the time. Therefore I'd like to see positional parameters for
templates with more than one parameter.

Regards,
Ron

-- 
WINCOR NIXDORF International GmbH 
Sitz der Gesellschaft: Paderborn 
Registergericht Paderborn HRB 3507
Gesch?ftsf?hrer: Eckard Heidloff (Vorsitzender), Stefan Auerbach, Dr. J?rgen Wunram
Vorsitzender des Aufsichtsrats: Karl-Heinz Stiller 
Steuernummer: 339/5884/0020 - Ust-ID Nr.: DE812927716 - WEEE-Reg.-Nr. DE44477193

Diese E-Mail enth?lt vertrauliche Informationen. Wenn Sie nicht der richtige Adressat sind oder diese E-Mail irrt?mlich erhalten haben, informieren Sie bitte sofort den Absender und vernichten Sie diese E-Mail. Das unerlaubte Kopieren sowie die unbefugte Weitergabe dieser E-Mail ist nicht gestattet.

This e-mail may contain confidential information. If you are not the intended recipient (or have received this e-mail in error) please notify the sender immediately and destroy this e-mail. Any unauthorised copying, disclosure or distribution of the material in this e-mail is strictly forbidden. 


From parrt at cs.usfca.edu  Wed Jul 29 16:14:16 2009
From: parrt at cs.usfca.edu (Terence Parr)
Date: Wed, 29 Jul 2009 16:14:16 -0700
Subject: [stringtemplate-interest] OOPS 2010 Call for Papers
Message-ID: <A1E5F69D-2FB4-4186-85A4-64209695DD9C@cs.usfca.edu>


                     OOPS 2010 Call for Papers

              Object-Oriented Programming Languages and Systems

                      http://oops.disi.unige.it/OOPS10

     Special Track at the 25th ACM Symposium on Applied Computing, SAC  
2010

                     http://www.acm.org/conferences/sac/sac2010

                          Sierre and Lausanne, Switzerland

                                March 22 - 26, 2010

- Important Dates (deadlines are strict)

September 08, 2009: Full Paper Submission

October 19, 2009: Notification of paper acceptance/rejection

November 02, 2009: Camera-ready copies of accepted papers

- Track Co-Chairs

Davide Ancona (davide at disi.unige.it)
DISI, University of Genova, Italy

Alex Buckley (Alex.Buckley at Sun.COM)
Sun Microsystems, USA

Andy Kellens (akellens at vub.ac.be)
Vrije Universiteit Brussel, Belgium

- Program Committee

    * Suad Alagic, University of Southern Maine, USA
    * Curtis Clifton, Rose-Hulman Inst. of Tech., USA
    * Pascal Costanza, Vrije Universiteit Brussel, Belgium
    * Antonio Cunei, Ecole Polytechnique f?d?rale de Lausanne,  
Switzerland
    * Dino Distefano, Queen Mary University of London, UK
    * Sophia Drossopoulou, Imperial College, UK
    * Erik Ernst, University of Aarhus, Denmark
    * Stephan Hermann, Technische Universit?t Berlin, Germany
    * Atsushi Igarashi, Kyoto University, Japan
    * Jakko J?rvi, Texas A&M University, USA
    * Doug Lea, Suny Oswego, USA
    * Francesco Logozzo, Microsoft Research, USA
    * Jeremy Manson, Google, USA
    * Oscar Nierstratz, University of Bern, Switzerland
    * Jacques Noy?, ?cole des Mines de Nantes, France
    * Manuel Oriol, University of York, UK
    * Terence Parr, University of San Francisco, USA
    * David Ungar, IBM Research Almaden, USA
    * Mirko Viroli, University of Bologna, Italy

- SAC 2010

For the past twenty-four years, the ACM Symposium on Applied Computing  
(SAC)
has been a primary gathering forum for applied computer scientists,  
computer
engineers, software engineers, and application developers from around  
the world.
SAC 2010 is sponsored by the ACM Special Interest Group on Applied  
Computing (SIGAPP),
and is hosted by University of Applied Sciences, Western Switzerland  
(HES-SO) and
Ecole Polytechnique f?d?rale de Lausanne (EPFL), Switzerland.

- OOPS Track

The object-oriented (OO) paradigm is extensively used to
design and implement today's large scale software systems.
However, existing OO languages and platforms need to evolve
to better support features like interoperability, software
reuse, dynamic software adaptation, efficiency on multicore
hardware, security, and safety. The aim of OOPS is to foster
the development of extensions to existing OO languages and
platforms, as well as the design and implementation of new
languages and platforms embracing and enhancing the
object-oriented paradigm.
Particularly of interest for OOPS are papers that provide
a thorough analysis covering most of the following aspects:
theory, design, implementation, applicability, performance
evaluation, and comparison/integration with existing constructs and
mechanisms.

The specific topics of interest for the OOPS track include, but are
not limited to, the following:

   * Language design and implementation
   * Type systems, static analysis, formal methods
   * Integration with other paradigms
   * Aspects, components, and modularity
   * Reflection, meta-programming			
   * Databases and persistence			
   * Distributed, concurrent or parallel systems	
   * Interoperability, versioning and software adaptation

- Submission Instructions

Prospective papers should be submitted in pdf format using the eCMS (http://sac.cs.iupui.edu/sac2010 
).

All papers should represent original and previously unpublished works  
that are currently not under review
in any conference or journal. Both basic and applied research papers  
are welcome.

Hardcopy and fax submissions will not be accepted. Submission of the  
same paper to multiple tracks is not allowed.
The author(s) name(s) and address(es) must not appear in the body of  
the paper, and self-reference should be in
the third person. This is to facilitate a blind review process. The  
format of the paper must adhere to the
sig-alternate style (available at http://www.acm.org/conferences/sac/sac2010/downloads10.htm) 
. The paper should not
exceed 8 pages according to the above style; please note that this is  
the same page limit as for the final version.
However, for camera-ready papers exceeding 5 pages each additional  
page will be charged 80 USD.

Papers that fail to comply with length limitations risk rejection. All  
papers must be submitted by September 08, 2009.
For more information please visit the SAC 2010 Website at http://www.acm.org/conferences/sac/sac2010 
.


- Proceedings and special issue

Accepted full papers will be published by ACM in the annual conference  
proceedings. Accepted poster papers
will be published as extended 2-page abstracts in the same proceedings.

Please note that full registration is required for papers and posters  
to be included in the conference proceedings
and CD. Student registration is only intended to encourage student  
attendance and does not cover inclusion of papers/posters
in the conference proceedings.

Finally, following the tradition of the past OOPS editions, after the  
conference some of the accepted papers will be selected
for publication in a journal special issue.

From felix_do at web.de  Fri Jul 31 02:04:44 2009
From: felix_do at web.de (Felix Dorner)
Date: Fri, 31 Jul 2009 11:04:44 +0200
Subject: [stringtemplate-interest] Fail on undefined property
Message-ID: <435563338@web.de>

Hi,

I'm accessing properties of a Properties object in my template. I need to fail generation if a requested property isn't defined (but StringTemplate happily inserts the empty String in such cases.

What I did is to subclass Properties so that it throws a runtime exception upon its get() method on undefined properties. However, I see that you also make use of containsKey(), so I'd need to override that too, and I'm starting to feel that my approach is probably not the right way to go. Isn't there an option that tells StringTemplate to fail if an attribute is not defined?


Thanks,
Felix

From m0.interactive at gmail.com  Fri Jul 31 11:06:35 2009
From: m0.interactive at gmail.com (Mohamed Mansour)
Date: Fri, 31 Jul 2009 14:06:35 -0400
Subject: [stringtemplate-interest] How to use variables inside format
	modifiers
In-Reply-To: <265be4080907311022l2f9b56e1y55b7f1f5ded0b03c@mail.gmail.com>
References: <265be4080907311022l2f9b56e1y55b7f1f5ded0b03c@mail.gmail.com>
Message-ID: <265be4080907311106j6106a9b5va1ab48dd87845e7e@mail.gmail.com>

Hello,
I have been using StringTemplate to produce stylized report files. Some
variables need to be formatted someway, for example if I want to uppercase a
variable I do, therefore I setup an attribute renderer:
$foo;format="uppercase"$

In my specific case I would need to apply more than one formatter (more than
one attribute renderer for a variable), so I created many attribute renders
and I can process them like:
$foo;format="uppercase|fixedlength:10:x:R|lowercase"$ If you notice a
modifer could have parameters ( with colons as seen with fixedlength)

So if $foo is "123aBc" it will return "XXXX123abc", the above works
perfectly fine

My main problem is that, some parameters in my format modifiers need to be
ST variables, for example, I would need to add a number:
$numA;format="calculate:+:$numB$"$

If numA = 10, and numB = 5, the formatter will return15. But my problem is
that, it treats the variables as a string doesn't actually give me the exact
value of the variable.

How can I pass variables in the "format" area?

Thanks!

-- Mohamed Mansour
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20090731/ab53ca24/attachment.html 

From jimi at temporal-wave.com  Fri Jul 31 11:16:35 2009
From: jimi at temporal-wave.com (Jim Idle)
Date: Fri, 31 Jul 2009 11:16:35 -0700
Subject: [stringtemplate-interest] How to use variables inside format
 modifiers
In-Reply-To: <265be4080907311106j6106a9b5va1ab48dd87845e7e@mail.gmail.com>
References: <265be4080907311022l2f9b56e1y55b7f1f5ded0b03c@mail.gmail.com>
	<265be4080907311106j6106a9b5va1ab48dd87845e7e@mail.gmail.com>
Message-ID: <4A733503.9060007@temporal-wave.com>

An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20090731/a0d5760b/attachment.html 

From m0.interactive at gmail.com  Fri Jul 31 11:26:34 2009
From: m0.interactive at gmail.com (Mohamed Mansour)
Date: Fri, 31 Jul 2009 14:26:34 -0400
Subject: [stringtemplate-interest] How to use variables inside format
	modifiers
In-Reply-To: <4A733503.9060007@temporal-wave.com>
References: <265be4080907311022l2f9b56e1y55b7f1f5ded0b03c@mail.gmail.com> 
	<265be4080907311106j6106a9b5va1ab48dd87845e7e@mail.gmail.com> 
	<4A733503.9060007@temporal-wave.com>
Message-ID: <265be4080907311126j422e0008j4291a6d07ec69839@mail.gmail.com>

Hmm, that would be unfortunate. I can't use this kind of approach then. I am
trying to create a generic "Report" where every user can do whatever they
want with it. If they wanted to add 10 to the result to any variable, they
could. But we can't do that with StringTemplate.
I guess that is the limitation of StringTemplate.

Isn't there any way I can make it work, like a hack? A user can modify a
variable by appending(adding) a number to it. (simply scenario)

Thanks,

-- Mohamed Mansour


On Fri, Jul 31, 2009 at 2:16 PM, Jim Idle <jimi at temporal-wave.com> wrote:

>  Mohamed Mansour wrote:
>
> Hello,
>  I have been using StringTemplate to produce stylized report files. Some
> variables need to be formatted someway, for example if I want to uppercase a
> variable I do, therefore I setup an attribute renderer:
> $foo;format="uppercase"$
>
>  In my specific case I would need to apply more than one formatter (more
> than one attribute renderer for a variable), so I created many attribute
> renders and I can process them like:
> $foo;format="uppercase|fixedlength:10:x:R|lowercase"$ If you notice a
> modifer could have parameters ( with colons as seen with fixedlength)
>
>  So if $foo is "123aBc" it will return "XXXX123abc", the above works
> perfectly fine
>
>  My main problem is that, some parameters in my format modifiers need to
> be ST variables, for example, I would need to add a number:
> $numA;format="calculate:+:$numB$"$
>
>  If numA = 10, and numB = 5, the formatter will return15. But my problem
> is that, it treats the variables as a string doesn't actually give me the
> exact value of the variable.
>
>  How can I pass variables in the "format" area?
>
> Calculations need to be performed before setting the values in the
> templates otherwise you are breaking the model/view separation that
> StringTemplate is as strict about as it can be. In other words you should
> not be trying to do this.
>
> The attribute renderer while powerful, has to be used carefully so that you
> do not break this  separation as it is kind of a back door (the only way to
> close it would be to implement a generic formatting engine and get rid of
> attribute renderers, but that is a lot of code bloat of course.
>
> Jim
>
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20090731/58967d02/attachment.html 

From jimi at temporal-wave.com  Fri Jul 31 11:41:26 2009
From: jimi at temporal-wave.com (Jim Idle)
Date: Fri, 31 Jul 2009 11:41:26 -0700
Subject: [stringtemplate-interest] How to use variables inside format
 modifiers
In-Reply-To: <265be4080907311126j422e0008j4291a6d07ec69839@mail.gmail.com>
References: <265be4080907311022l2f9b56e1y55b7f1f5ded0b03c@mail.gmail.com>
	<265be4080907311106j6106a9b5va1ab48dd87845e7e@mail.gmail.com>
	<4A733503.9060007@temporal-wave.com>
	<265be4080907311126j422e0008j4291a6d07ec69839@mail.gmail.com>
Message-ID: <4A733AD6.2020505@temporal-wave.com>

Mohamed Mansour wrote:
> Hmm, that would be unfortunate. I can't use this kind of approach 
> then. I am trying to create a generic "Report" where every user can do 
> whatever they want with it. If they wanted to add 10 to the result to 
> any variable, they could. But we can't do that with StringTemplate.
>
> I guess that is the limitation of StringTemplate.
>
> Isn't there any way I can make it work, like a hack? A user can modify 
> a variable by appending(adding) a number to it. (simply scenario)
There is always a hack for everything, but if you can pass in the + and 
so on to the template then why can you not do this in the model rather 
than the view?

However, you could first pass in the values via other invocations that 
return "" and store them in static variables in your renderer, then 
invoke a format="calculate". Total hack and violation of the idea of 
course, but I suppose that so long as you know this and comment it as 
such, then it is up to you:

$numa;format="storeOp1"$$numb;format="add"$

Or something similar.

Jim

From parrt at cs.usfca.edu  Fri Jul 31 12:38:11 2009
From: parrt at cs.usfca.edu (Terence Parr)
Date: Fri, 31 Jul 2009 12:38:11 -0700
Subject: [stringtemplate-interest] Fail on undefined property
In-Reply-To: <435563338@web.de>
References: <435563338@web.de>
Message-ID: <BB5AD78D-C8B9-44D5-A248-28C1172387FC@cs.usfca.edu>


On Jul 31, 2009, at 2:04 AM, Felix Dorner wrote:

> Hi,
>
> I'm accessing properties of a Properties object in my template. I  
> need to fail generation if a requested property isn't defined (but  
> StringTemplate happily inserts the empty String in such cases.

Yeah, that's it's basic mode but it can be inconsistent about what  
throws an exception.

> What I did is to subclass Properties so that it throws a runtime  
> exception upon its get() method on undefined properties. However, I  
> see that you also make use of containsKey(), so I'd need to override  
> that too, and I'm starting to feel that my approach is probably not  
> the right way to go. Isn't there an option that tells StringTemplate  
> to fail if an attribute is not defined?

Is this these C# version?

You could override StringTemplate an alter its get attribute method.
T

From sharwell at pixelminegames.com  Fri Jul 31 12:48:27 2009
From: sharwell at pixelminegames.com (Sam Harwell)
Date: Fri, 31 Jul 2009 14:48:27 -0500
Subject: [stringtemplate-interest] Fail on undefined property
In-Reply-To: <BB5AD78D-C8B9-44D5-A248-28C1172387FC@cs.usfca.edu>
References: <435563338@web.de>
	<BB5AD78D-C8B9-44D5-A248-28C1172387FC@cs.usfca.edu>
Message-ID: <86403CA0939415448BCCB83855EFE09AA68489@Bloodymary.ironwillgames.com>

The problem is the same code path is used for evaluating conditional
expressions, where a missing attribute is "false". I believe when the
write method encounters an undefined property, it *should* throw an
exception. For example:

Should not throw if x is undefined:

<if(x)><x><endif>

Should throw if x is undefined:

<x>

Note that we already do throw an exception in the following case if x is
defined but has no member f. The behavior should be made consistent, but
we have to be careful about informing people of the change since it's
absolutely a breaking change.

<x.f>

Sam

-----Original Message-----
From: stringtemplate-interest-bounces at antlr.org
[mailto:stringtemplate-interest-bounces at antlr.org] On Behalf Of Terence
Parr
Sent: Friday, July 31, 2009 2:38 PM
To: Felix Dorner
Cc: stringtemplate-interest at antlr.org
Subject: Re: [stringtemplate-interest] Fail on undefined property


On Jul 31, 2009, at 2:04 AM, Felix Dorner wrote:

> Hi,
>
> I'm accessing properties of a Properties object in my template. I  
> need to fail generation if a requested property isn't defined (but  
> StringTemplate happily inserts the empty String in such cases.

Yeah, that's it's basic mode but it can be inconsistent about what  
throws an exception.

> What I did is to subclass Properties so that it throws a runtime  
> exception upon its get() method on undefined properties. However, I  
> see that you also make use of containsKey(), so I'd need to override  
> that too, and I'm starting to feel that my approach is probably not  
> the right way to go. Isn't there an option that tells StringTemplate  
> to fail if an attribute is not defined?

Is this these C# version?

You could override StringTemplate an alter its get attribute method.
T
_______________________________________________
stringtemplate-interest mailing list
stringtemplate-interest at antlr.org
http://www.antlr.org/mailman/listinfo/stringtemplate-interest

From parrt at cs.usfca.edu  Fri Jul 31 12:52:31 2009
From: parrt at cs.usfca.edu (Terence Parr)
Date: Fri, 31 Jul 2009 12:52:31 -0700
Subject: [stringtemplate-interest] Fail on undefined property
In-Reply-To: <86403CA0939415448BCCB83855EFE09AA68489@Bloodymary.ironwillgames.com>
References: <435563338@web.de>
	<BB5AD78D-C8B9-44D5-A248-28C1172387FC@cs.usfca.edu>
	<86403CA0939415448BCCB83855EFE09AA68489@Bloodymary.ironwillgames.com>
Message-ID: <408EECFE-9C90-4060-A772-B64359801F56@cs.usfca.edu>


On Jul 31, 2009, at 12:48 PM, Sam Harwell wrote:

> The problem is the same code path is used for evaluating conditional
> expressions, where a missing attribute is "false". I believe when the
> write method encounters an undefined property, it *should* throw an
> exception. For example:
>
> Should not throw if x is undefined:
>
> <if(x)><x><endif>
>
> Should throw if x is undefined:
>
> <x>

Well, it's very useful to evaluate to an empty string sometimes.

Hi, <firstname> <lastname>

if you only know the first name, we shouldn't have to gate every  
reference to other attributes to prevent an exception.

> Note that we already do throw an exception in the following case if  
> x is
> defined but has no member f. The behavior should be made consistent,  
> but
> we have to be careful about informing people of the change since it's
> absolutely a breaking change.
>
> <x.f>

When I build the new version, I will make a consistent policy. Most  
likely there will be a choice that the user can set about strictness,  
turning on various bits in a set about what should throw an exception.
T

From felix_do at web.de  Fri Jul 31 12:58:37 2009
From: felix_do at web.de (Felix Dorner)
Date: Fri, 31 Jul 2009 21:58:37 +0200
Subject: [stringtemplate-interest] Fail on undefined property
In-Reply-To: <BB5AD78D-C8B9-44D5-A248-28C1172387FC@cs.usfca.edu>
References: <435563338@web.de>
	<BB5AD78D-C8B9-44D5-A248-28C1172387FC@cs.usfca.edu>
Message-ID: <4A734CED.5000802@web.de>

>
>> What I did is to subclass Properties so that it throws a runtime 
>> exception upon its get() method on undefined properties. However, I 
>> see that you also make use of containsKey(), so I'd need to override 
>> that too, and I'm starting to feel that my approach is probably not 
>> the right way to go. Isn't there an option that tells StringTemplate 
>> to fail if an attribute is not defined?
>
> Is this these C# version?
>
Nope, Java.
> You could override StringTemplate an alter its get attribute method.
> T
I've seen there's StringTemplateErrorListener and getWarning(). Would a 
warning be issued on an empty attribute? I could then set a flag and 
'define' the run as failed afterwards..



From jdmitchell at gmail.com  Fri Jul 31 13:01:02 2009
From: jdmitchell at gmail.com (John D. Mitchell)
Date: Fri, 31 Jul 2009 13:01:02 -0700
Subject: [stringtemplate-interest] Fail on undefined property
In-Reply-To: <408EECFE-9C90-4060-A772-B64359801F56@cs.usfca.edu>
References: <435563338@web.de>
	<BB5AD78D-C8B9-44D5-A248-28C1172387FC@cs.usfca.edu>
	<86403CA0939415448BCCB83855EFE09AA68489@Bloodymary.ironwillgames.com>
	<408EECFE-9C90-4060-A772-B64359801F56@cs.usfca.edu>
Message-ID: <B5F1F804-33FA-4614-9E6E-A6151A018735@gmail.com>

Howdy,

I haven't followed this thread too closely but in terms of  
optionality, one trick would be to add syntactic support for something  
like:
<x?> or <x!>
or
<?x> or <!x>

The ? meaning you know it might not be there so do the current behavior.
The ! meaning that it must be there so bitch if it's not.

Given the backwards compatibility, it would seem like adding the !  
would do the trick methinks (but I haven't done any ST stuff in awhile  
so take that for what it's worth :-).

Have fun,
John

On Jul 31, 2009, at 12:52 , Terence Parr wrote:

>
> On Jul 31, 2009, at 12:48 PM, Sam Harwell wrote:
>
>> The problem is the same code path is used for evaluating conditional
>> expressions, where a missing attribute is "false". I believe when the
>> write method encounters an undefined property, it *should* throw an
>> exception. For example:
>>
>> Should not throw if x is undefined:
>>
>> <if(x)><x><endif>
>>
>> Should throw if x is undefined:
>>
>> <x>
>
> Well, it's very useful to evaluate to an empty string sometimes.
>
> Hi, <firstname> <lastname>
>
> if you only know the first name, we shouldn't have to gate every
> reference to other attributes to prevent an exception.
>
>> Note that we already do throw an exception in the following case if
>> x is
>> defined but has no member f. The behavior should be made consistent,
>> but
>> we have to be careful about informing people of the change since it's
>> absolutely a breaking change.
>>
>> <x.f>
>
> When I build the new version, I will make a consistent policy. Most
> likely there will be a choice that the user can set about strictness,
> turning on various bits in a set about what should throw an exception.
> T
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest


From parrt at cs.usfca.edu  Fri Jul 31 13:02:46 2009
From: parrt at cs.usfca.edu (Terence Parr)
Date: Fri, 31 Jul 2009 13:02:46 -0700
Subject: [stringtemplate-interest] Fail on undefined property
In-Reply-To: <B5F1F804-33FA-4614-9E6E-A6151A018735@gmail.com>
References: <435563338@web.de>
	<BB5AD78D-C8B9-44D5-A248-28C1172387FC@cs.usfca.edu>
	<86403CA0939415448BCCB83855EFE09AA68489@Bloodymary.ironwillgames.com>
	<408EECFE-9C90-4060-A772-B64359801F56@cs.usfca.edu>
	<B5F1F804-33FA-4614-9E6E-A6151A018735@gmail.com>
Message-ID: <11ACB9D5-7C4C-481C-9C62-1038749C0376@cs.usfca.edu>


On Jul 31, 2009, at 1:01 PM, John D. Mitchell wrote:

> Howdy,
>
> I haven't followed this thread too closely but in terms of  
> optionality, one trick would be to add syntactic support for  
> something like:
> <x?> or <x!>

  that could work but I would prefer to have it on the parameter  
definitions not the usage:

mytemplate(firstname, lastname?) ::= "..."


Ter

From jdmitchell at gmail.com  Fri Jul 31 13:11:45 2009
From: jdmitchell at gmail.com (John D. Mitchell)
Date: Fri, 31 Jul 2009 13:11:45 -0700
Subject: [stringtemplate-interest] Fail on undefined property
In-Reply-To: <11ACB9D5-7C4C-481C-9C62-1038749C0376@cs.usfca.edu>
References: <435563338@web.de>
	<BB5AD78D-C8B9-44D5-A248-28C1172387FC@cs.usfca.edu>
	<86403CA0939415448BCCB83855EFE09AA68489@Bloodymary.ironwillgames.com>
	<408EECFE-9C90-4060-A772-B64359801F56@cs.usfca.edu>
	<B5F1F804-33FA-4614-9E6E-A6151A018735@gmail.com>
	<11ACB9D5-7C4C-481C-9C62-1038749C0376@cs.usfca.edu>
Message-ID: <F1161CC9-C541-4871-993A-026B7A91EC52@gmail.com>

On Jul 31, 2009, at 13:02 , Terence Parr wrote:
> On Jul 31, 2009, at 1:01 PM, John D. Mitchell wrote:
>> I haven't followed this thread too closely but in terms of
>> optionality, one trick would be to add syntactic support for
>> something like:
>> <x?> or <x!>
>
>  that could work but I would prefer to have it on the parameter
> definitions not the usage:
>
> mytemplate(firstname, lastname?) ::= "..."

FWIW, I'm more on the side of "at the point of usage" because I think  
having the fact be very explicit is a good thing. I.e., when one is  
reading through the template, having it jump out as different behavior  
is helpful -- having the same looking thing with two different  
behaviors just bothers me, I guess.

Hope this helps,
John



From parrt at cs.usfca.edu  Fri Jul 31 13:13:10 2009
From: parrt at cs.usfca.edu (Terence Parr)
Date: Fri, 31 Jul 2009 13:13:10 -0700
Subject: [stringtemplate-interest] Fail on undefined property
In-Reply-To: <F1161CC9-C541-4871-993A-026B7A91EC52@gmail.com>
References: <435563338@web.de>
	<BB5AD78D-C8B9-44D5-A248-28C1172387FC@cs.usfca.edu>
	<86403CA0939415448BCCB83855EFE09AA68489@Bloodymary.ironwillgames.com>
	<408EECFE-9C90-4060-A772-B64359801F56@cs.usfca.edu>
	<B5F1F804-33FA-4614-9E6E-A6151A018735@gmail.com>
	<11ACB9D5-7C4C-481C-9C62-1038749C0376@cs.usfca.edu>
	<F1161CC9-C541-4871-993A-026B7A91EC52@gmail.com>
Message-ID: <04C02089-B3A0-4679-9AF9-520008AC748E@cs.usfca.edu>

Yeah, I hear that. On the other hand, we already have syntax for this

<x> is mandatory
<if(x)><x><endif> is not mandatory

  verbose, but functionality  already exists ;)

T
On Jul 31, 2009, at 1:11 PM, John D. Mitchell wrote:

> On Jul 31, 2009, at 13:02 , Terence Parr wrote:
>> On Jul 31, 2009, at 1:01 PM, John D. Mitchell wrote:
>>> I haven't followed this thread too closely but in terms of
>>> optionality, one trick would be to add syntactic support for
>>> something like:
>>> <x?> or <x!>
>>
>> that could work but I would prefer to have it on the parameter
>> definitions not the usage:
>>
>> mytemplate(firstname, lastname?) ::= "..."
>
> FWIW, I'm more on the side of "at the point of usage" because I  
> think having the fact be very explicit is a good thing. I.e., when  
> one is reading through the template, having it jump out as different  
> behavior is helpful -- having the same looking thing with two  
> different behaviors just bothers me, I guess.
>
> Hope this helps,
> John
>
>


