From ub at abego-software.de  Tue Feb  1 07:26:32 2011
From: ub at abego-software.de (Udo Borkowski)
Date: Tue, 1 Feb 2011 16:26:32 +0100
Subject: [stringtemplate-interest] [ST4] Help needed with recursive template
	to traverse a tree
Message-ID: <373342FA-CF34-427E-B34E-D5351DB4CD0D@abego-software.de>

I need some help with a recursive template.

Assume you have a tree like this:

      A
     / \
    /   \
  B1     B2
 /  \   /  \
C1  C2 C3  C4

A node is implemented as a map with a "name" key (String) and a "children" key (list of node objects).

How to get a list of all "pathes" to the nodes (in preorder)?

I.e. I want this output:
A
A/B1
A/B1/C1
A/B1/C2
A/B2
A/B2/C3
A/B2/C4

I tried things like the following but run into problems with cycles. E.g. I need to refer to the "outer" prefix and node.name to build the new prefix and assign it to the argument:

allTreeNodePathes(node,prefix) ::= <<
?prefix??node.name?
?node.children:
    {child|?allTreeNodePathes(
               node=child,
               prefix={?prefix??node.name?/})?}?
>>


main(p) ::= <<
?(allTreeNodePathes(node=p,prefix=""))?
>>


Any suggestions?

Udo

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20110201/d21d9e98/attachment.html 

From mwipliez at yahoo.fr  Tue Feb  1 10:02:34 2011
From: mwipliez at yahoo.fr (Matthieu Wipliez)
Date: Tue, 1 Feb 2011 18:02:34 +0000 (GMT)
Subject: [stringtemplate-interest] [ST4] Warning when no variables declared
	in anonymous template
In-Reply-To: <E3B6D313-5C37-42DE-A0FB-1B1CA7CD2549@cs.usfca.edu>
References: <C829FB40-F12C-45D8-B5E8-DD5D5D8FDB4B@abego-software.de>
	<E3B6D313-5C37-42DE-A0FB-1B1CA7CD2549@cs.usfca.edu>
Message-ID: <905964.76254.qm@web25708.mail.ukl.yahoo.com>

Hi,

the following

<values: {something}; separator="\n">

causes the following error:
"anonymous template has 0 arg(s) but mapped across 1 value(s)"

I think this error is a bit strange, because I don't need to declare a variable 
in this case, and I believe this is allowed by the grammar.

Declaring a variable in the template solves the problem, but I find it strange 
to declare a variable I know I won't need:

<values: {unused | something}; separator="\n">

Cheers
Matthieu



      
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20110201/daae87ca/attachment-0001.html 

From sharwell at pixelminegames.com  Tue Feb  1 13:32:57 2011
From: sharwell at pixelminegames.com (Sam Harwell)
Date: Tue, 1 Feb 2011 15:32:57 -0600
Subject: [stringtemplate-interest] [ST4] Warning when no variables
	declared	in anonymous template
In-Reply-To: <905964.76254.qm@web25708.mail.ukl.yahoo.com>
References: <C829FB40-F12C-45D8-B5E8-DD5D5D8FDB4B@abego-software.de>	<E3B6D313-5C37-42DE-A0FB-1B1CA7CD2549@cs.usfca.edu>
	<905964.76254.qm@web25708.mail.ukl.yahoo.com>
Message-ID: <01e001cbc257$98c239c0$ca46ad40$@pixelminegames.com>

Hi Matthieu,

 

The warning you?re seeing is especially useful for users who previously worked with StringTemplate 3. In the old version, there was an implicit variable ?it? that represented the iteration variable. In StringTemplate 3, the following two lines are essentially the same:

 

<values:{something}>

<values:{it|something}>

 

StringTemplate 4 no longer uses this implicit declaration. If it were me, and I was using an anonymous template that ignored the argument, I?d probably expect one of the following (I would personally write the first, but that?s just my style).

 

<values:{value|something}>

<values:{_|something}>

 

Sam

 

PS: Anonymous templates do not always need arguments, which is why the grammar allows that. For example:

 

bold(x) ::= "\<b><x>\</b>"

test() ::= "<bold(x={bold text})>"

 

From: stringtemplate-interest-bounces at antlr.org [mailto:stringtemplate-interest-bounces at antlr.org] On Behalf Of Matthieu Wipliez
Sent: Tuesday, February 01, 2011 12:03 PM
To: stringtemplate-interest at antlr.orgList
Subject: [stringtemplate-interest] [ST4] Warning when no variables declared in anonymous template

 

Hi,

the following

<values: {something}; separator="\n">

causes the following error:
"anonymous template has 0 arg(s) but mapped across 1 value(s)"

I think this error is a bit strange, because I don't need to declare a variable in this case, and I believe this is allowed by the grammar.

Declaring a variable in the template solves the problem, but I find it strange to declare a variable I know I won't need:

<values: {unused | something}; separator="\n">

Cheers
Matthieu

 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20110201/068ae496/attachment.html 

From collin.fagan at gmail.com  Tue Feb  1 18:54:02 2011
From: collin.fagan at gmail.com (Collin Fagan)
Date: Tue, 1 Feb 2011 20:54:02 -0600
Subject: [stringtemplate-interest] ST4: varargs version of add ?
Message-ID: <AANLkTikpCcud8gsAF1wCVn21MPZpegNXXkN3Oay0WHaF@mail.gmail.com>

Hi,

I find I would like to pass multiple items to add. Would it be possible  to
get a varargs version of add?

Maybe something like this?

   public synchronized void add(String name, Object value, Object ...
moreValues) {
       List<Object> allObjects = new ArrayList<Object>();
       allObjects.add(value);
       Collections.addAll(allObjects, moreValues);
       add(name, allObjects);
   }

Of course this isn't the most efficient implementation one could write but
we could deal with that if anyone liked the idea of a varargs add.

Collin
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20110201/62917fe0/attachment.html 

From ub at abego-software.de  Wed Feb  2 02:26:34 2011
From: ub at abego-software.de (Udo Borkowski)
Date: Wed, 2 Feb 2011 11:26:34 +0100
Subject: [stringtemplate-interest] ST4: varargs version of add ?
In-Reply-To: <AANLkTikpCcud8gsAF1wCVn21MPZpegNXXkN3Oay0WHaF@mail.gmail.com>
References: <AANLkTikpCcud8gsAF1wCVn21MPZpegNXXkN3Oay0WHaF@mail.gmail.com>
Message-ID: <69FFB4C5-145F-4270-8A8C-F96694ED9B61@abego-software.de>

I like the idea.

Udo

On 02.02.2011, at 03:54, Collin Fagan wrote:

> Hi, 
> 
> I find I would like to pass multiple items to add. Would it be possible  to get a varargs version of add?
> 
> Maybe something like this?
> 
>    public synchronized void add(String name, Object value, Object ... moreValues) {
>        List<Object> allObjects = new ArrayList<Object>();
>        allObjects.add(value);
>        Collections.addAll(allObjects, moreValues);
>        add(name, allObjects);
>    }
> 
> Of course this isn't the most efficient implementation one could write but we could deal with that if anyone liked the idea of a varargs add.
> 
> Collin
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20110202/68c5b7ea/attachment.html 

From maxgbr at hotmail.it  Wed Feb  2 10:59:39 2011
From: maxgbr at hotmail.it (Massimiliano Donini)
Date: Wed, 2 Feb 2011 19:59:39 +0100
Subject: [stringtemplate-interest] Region Usage
Message-ID: <BLU0-SMTP809788AD7BED256C2F6751B0E40@phx.gbl>

  Hi, i have read following on link 
http://www.antlr.org/wiki/display/ST/Template+regions region usage but 
i'm unable to find code usage.
I have 2 simple questions:
     1) can i define region inside the same templategroup file?
     2) how can i turn on/off region template (starting  from 1? wiki 
region example, how could i generate code with <@preamble()> and without 
it?)

Best Regards
Max
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20110202/43b13c55/attachment.html 

From ub at abego-software.de  Wed Feb  2 14:01:46 2011
From: ub at abego-software.de (Udo Borkowski)
Date: Wed, 2 Feb 2011 23:01:46 +0100
Subject: [stringtemplate-interest] Region Usage
In-Reply-To: <BLU0-SMTP809788AD7BED256C2F6751B0E40@phx.gbl>
References: <BLU0-SMTP809788AD7BED256C2F6751B0E40@phx.gbl>
Message-ID: <BFA66224-E217-49E4-8769-266B5E2DFD85@abego-software.de>

I can only talk about StringTemplate 4.0, but I assume it is same with ST 3:

>     1) can i define region inside the same templategroup file?

Yes. Rendering this group's main() template:
-----
/* RegionTest.stg */

method(name,code) ::= <<
public void <name>() {
    <@preamble()>
    <code>
}
>>

@method.preamble() ::= <<System.out.println("enter");>>

main() ::= <<
<method(name="sample",code="beep();")>
>>
--------
will output:
--------
public void sample() {
    System.out.println("enter");
    beep();
}
--------

>     2) how can i turn on/off region template (starting  from 1? wiki region example, how could i generate code with <@preamble()> and without it?)
If you don't define the region referenced by <@preamble()> nothing will be generated. E.g. back to the above example: without the @method.preamble()? stuff, i.e. with this group:
-------------
/* RegionTest2.stg */

method(name,code) ::= <<
public void <name>() {
    <@preamble()>
    <code>
}
>>

main() ::= <<
<method(name="sample",code="beep();")>
>>
-------------
the output will be
-------------
public void sample() {
    beep();
}
-------------


You may now create a new group and import the above group:
------------
import "RegionTest2.stg"

main() ::= <<
<method(name="makeNoise",code="beep();")>
>>
------------
to use the method template from the "RegionTest" group. Here we get the following result:
------------
public void makeNoise() {
    beep();
}
-------------

And in this new group you may define the region, too.
------------
import "RegionTest2.stg"

@method.preamble() ::= <<log("enter");>>

main() ::= <<
<method(name="makeNoise",code="beep();")>
>>
------------
resulting in this output:
------------
public void makeNoise() {
    log("enter");
    beep();
}
-------------


Hope this helps,

Udo




On 02.02.2011, at 19:59, Massimiliano Donini wrote:

> Hi, i have read following on link http://www.antlr.org/wiki/display/ST/Template+regions region usage but i'm unable to find code usage.
> I have 2 simple questions:
>     1) can i define region inside the same templategroup file?
>     2) how can i turn on/off region template (starting  from 1? wiki region example, how could i generate code with <@preamble()> and without it?)
> 
> Best Regards 
> Max
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20110202/2311fe73/attachment.html 

From maxgbr at hotmail.it  Wed Feb  2 14:42:45 2011
From: maxgbr at hotmail.it (Massimiliano Donini)
Date: Wed, 2 Feb 2011 23:42:45 +0100
Subject: [stringtemplate-interest] Region Usage
In-Reply-To: <BFA66224-E217-49E4-8769-266B5E2DFD85@abego-software.de>
References: <BLU0-SMTP809788AD7BED256C2F6751B0E40@phx.gbl>
	<BFA66224-E217-49E4-8769-266B5E2DFD85@abego-software.de>
Message-ID: <BLU0-SMTP2323A684406BF92F658ED7B0E40@phx.gbl>

  Tanks for your replu Udo, it helps me to understand bette rregion from 
the StringTemplate point of view, only one more thing: in question 2 i 
would understand how i can turn on and off from the client's code point 
of view (e.g from java or better C#).
My request was ambiguos sorry, but how can i achieve same result from 
code assuming that i have one template in test1.stg that refences a 
region defined in test2.stg?

e.g.
/* test1.stg */

method(name,code) ::= <<
public void <name>() {
<@preamble()>
<code>
}
 >>

/* test2.stg */

@method.preamble() ::= <<System.out.println("enter");>>


Best Regards
Max

Il 02/02/2011 23:01, Udo Borkowski ha scritto:
> I can only talk about StringTemplate 4.0, but I assume it is same with 
> ST 3:
>
>>     1) can i define region inside the same templategroup file?
>
> Yes. Rendering this group's main() template:
> -----
> /* RegionTest.stg */
>
> method(name,code) ::= <<
> public void <name>() {
> <@preamble()>
> <code>
> }
> >>
>
> @method.preamble() ::= <<System.out.println("enter");>>
>
> main() ::= <<
> <method(name="sample",code="beep();")>
> >>
> --------
> will output:
> --------
> public void sample() {
>     System.out.println("enter");
>     beep();
> }
> --------
>
>>     2) how can i turn on/off region template (starting  from 1? wiki 
>> region example, how could i generate code with <@preamble()> and 
>> without it?)
> If you don't define the region referenced by <@preamble()> nothing 
> will be generated. E.g. back to the above example: without the 
> @method.preamble()? stuff, i.e. with this group:
> -------------
> /* RegionTest2.stg */
>
> method(name,code) ::= <<
> public void <name>() {
> <@preamble()>
> <code>
> }
> >>
>
> main() ::= <<
> <method(name="sample",code="beep();")>
> >>
> -------------
> the output will be
> -------------
> public void sample() {
>     beep();
> }
> -------------
>
>
> You may now create a new group and import the above group:
> ------------
> import "RegionTest2.stg"
>
> main() ::= <<
> <method(name="makeNoise",code="beep();")>
> >>
> ------------
> to use the method template from the "RegionTest" group. Here we get 
> the following result:
> ------------
> public void makeNoise() {
>     beep();
> }
> -------------
>
> And in this new group you may define the region, too.
> ------------
> import "RegionTest2.stg"
>
> @method.preamble() ::= <<log("enter");>>
>
> main() ::= <<
> <method(name="makeNoise",code="beep();")>
> >>
> ------------
> resulting in this output:
> ------------
> public void makeNoise() {
>     log("enter");
>     beep();
> }
> -------------
>
>
> Hope this helps,
>
> Udo
>
>
>
>
> On 02.02.2011, at 19:59, Massimiliano Donini wrote:
>
>> Hi, i have read following on link 
>> http://www.antlr.org/wiki/display/ST/Template+regions region usage 
>> but i'm unable to find code usage.
>> I have 2 simple questions:
>>     1) can i define region inside the same templategroup file?
>>     2) how can i turn on/off region template (starting  from 1? wiki 
>> region example, how could i generate code with <@preamble()> and 
>> without it?)
>>
>> Best Regards
>> Max
>> _______________________________________________
>> stringtemplate-interest mailing list
>> stringtemplate-interest at antlr.org 
>> <mailto:stringtemplate-interest at antlr.org>
>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20110202/ff65469d/attachment-0001.html 

From ub at abego-software.de  Thu Feb  3 09:34:21 2011
From: ub at abego-software.de (Udo Borkowski)
Date: Thu, 3 Feb 2011 18:34:21 +0100
Subject: [stringtemplate-interest] Region Usage
In-Reply-To: <BLU0-SMTP2323A684406BF92F658ED7B0E40@phx.gbl>
References: <BLU0-SMTP809788AD7BED256C2F6751B0E40@phx.gbl>
	<BFA66224-E217-49E4-8769-266B5E2DFD85@abego-software.de>
	<BLU0-SMTP2323A684406BF92F658ED7B0E40@phx.gbl>
Message-ID: <365B2BF1-61BF-453A-AF46-268F2186EBAF@abego-software.de>

If you want to switch of the region programmatically you could add an "if" block around the preamble:

--------------

/* test1.stg */
method(name,code,withPreamble) ::= <<
public void <name>() {
    <if(withPreamble)>
    <@preamble()>
    <endif>
    <code>
}
>>
--------------

test2.stg
--------------
import "test1.stg"

@method.preamble() ::= <<System.out.println("enter");>>

main(p) ::= <<
<method(name="sample",code="beep();",withPreamble=p)>
>>
--------------

When main is called with p == false, no preamble code is written.


Udo



On 02.02.2011, at 23:42, Massimiliano Donini wrote:

> Tanks for your replu Udo, it helps me to understand bette rregion from the StringTemplate point of view, only one more thing: in question 2 i would understand how i can turn on and off from the client's code point of view (e.g from java or better C#).
> My request was ambiguos sorry, but how can i achieve same result from code assuming that i have one template in test1.stg that refences a region defined in test2.stg?
> 
> e.g.
> /* test1.stg */
> 
> method(name,code) ::= <<
> public void <name>() {
>     <@preamble()>
>     <code>
> }
> >>
> 
> /* test2.stg */
> 
> @method.preamble() ::= <<System.out.println("enter");>>
> 
> 
> Best Regards
> Max
> 
> Il 02/02/2011 23:01, Udo Borkowski ha scritto:
>> 
>> I can only talk about StringTemplate 4.0, but I assume it is same with ST 3:
>> 
>>>     1) can i define region inside the same templategroup file?
>> 
>> Yes. Rendering this group's main() template:
>> -----
>> /* RegionTest.stg */
>> 
>> method(name,code) ::= <<
>> public void <name>() {
>>     <@preamble()>
>>     <code>
>> }
>> >>
>> 
>> @method.preamble() ::= <<System.out.println("enter");>>
>> 
>> main() ::= <<
>> <method(name="sample",code="beep();")>
>> >>
>> --------
>> will output:
>> --------
>> public void sample() {
>>     System.out.println("enter");
>>     beep();
>> }
>> --------
>> 
>>>     2) how can i turn on/off region template (starting  from 1? wiki region example, how could i generate code with <@preamble()> and without it?)
>> If you don't define the region referenced by <@preamble()> nothing will be generated. E.g. back to the above example: without the @method.preamble()? stuff, i.e. with this group:
>> -------------
>> /* RegionTest2.stg */
>> 
>> method(name,code) ::= <<
>> public void <name>() {
>>     <@preamble()>
>>     <code>
>> }
>> >>
>> 
>> main() ::= <<
>> <method(name="sample",code="beep();")>
>> >>
>> -------------
>> the output will be
>> -------------
>> public void sample() {
>>     beep();
>> }
>> -------------
>> 
>> 
>> You may now create a new group and import the above group:
>> ------------
>> import "RegionTest2.stg"
>> 
>> main() ::= <<
>> <method(name="makeNoise",code="beep();")>
>> >>
>> ------------
>> to use the method template from the "RegionTest" group. Here we get the following result:
>> ------------
>> public void makeNoise() {
>>     beep();
>> }
>> -------------
>> 
>> And in this new group you may define the region, too.
>> ------------
>> import "RegionTest2.stg"
>> 
>> @method.preamble() ::= <<log("enter");>>
>> 
>> main() ::= <<
>> <method(name="makeNoise",code="beep();")>
>> >>
>> ------------
>> resulting in this output:
>> ------------
>> public void makeNoise() {
>>     log("enter");
>>     beep();
>> }
>> -------------
>> 
>> 
>> Hope this helps,
>> 
>> Udo
>> 
>> 
>> 
>> 
>> On 02.02.2011, at 19:59, Massimiliano Donini wrote:
>> 
>>> Hi, i have read following on link http://www.antlr.org/wiki/display/ST/Template+regions region usage but i'm unable to find code usage.
>>> I have 2 simple questions:
>>>     1) can i define region inside the same templategroup file?
>>>     2) how can i turn on/off region template (starting  from 1? wiki region example, how could i generate code with <@preamble()> and without it?)
>>> 
>>> Best Regards 
>>> Max
>>> _______________________________________________
>>> stringtemplate-interest mailing list
>>> stringtemplate-interest at antlr.org
>>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>> 
> 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20110203/d503000e/attachment.html 

From ub at abego-software.de  Thu Feb  3 10:22:09 2011
From: ub at abego-software.de (Udo Borkowski)
Date: Thu, 3 Feb 2011 19:22:09 +0100
Subject: [stringtemplate-interest] [ST4 Beta-3] Endless loop when template
	comment is not closed.
Message-ID: <91177699-7DF0-4CAD-99CC-9F728C0DE3E1@abego-software.de>

A template comment that is not closed, e.g.

t() ::= <<
<!bad comment>
...
>>

leads to an endless loop.


I changed STLexer#COMMENT to work around this issue:

    void COMMENT() {
        match('!');
        while ( !(c=='!' && input.LA(2)==delimiterStopChar) ) {
        	if (c==EOF) {
				RecognitionException re =
					new MismatchedTokenException((int)'!', input);
				re.line = input.getLine();
				re.charPositionInLine = input.getCharPositionInLine();
				errMgr.lexerError(input.getSourceName(), "Comment not closed. '!"+delimiterStopChar+"' missing", templateToken, re);
				break;        		
        	}
        	consume();
        }
        consume(); consume(); // kill !>
    }


This fix works. However I guess it would be better if the error message could refer to the opening "<!", but I am not sure how to write this.

Udo



-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20110203/dd498596/attachment-0001.html 

From ub at abego-software.de  Thu Feb  3 10:28:41 2011
From: ub at abego-software.de (Udo Borkowski)
Date: Thu, 3 Feb 2011 19:28:41 +0100
Subject: [stringtemplate-interest] [ST4] Introduce Boolean literals (e.g.
	true/false)?
Message-ID: <77435A96-5EFD-409C-9282-6358E36CAF1A@abego-software.de>

How about adding two literals "true" and "false" to the grammar of ST4, refering to the Boolean.TRUE and FALSE?

I would like to use these as default values.

E.g. 

	myTemplate(withPrefix=true, withLog=false) ::= ?


I found no nice way to express something like this. How do others work around this?


Udo


From ub at abego-software.de  Thu Feb  3 11:39:40 2011
From: ub at abego-software.de (Udo Borkowski)
Date: Thu, 3 Feb 2011 20:39:40 +0100
Subject: [stringtemplate-interest] [ST4 Beta-3] Cannot nest anonymous
	templates in default expression
Message-ID: <9D322998-807C-4953-B224-EDC0FEE1F374@abego-software.de>

The following template will issue an "no such template: _sub1149" error.

t1(x,y={?x:{s|?s??s?}?}) ::= <<
x: ?x?
y: ?y?
>>

When called with t1(x="a") I expected the output:
a
aa


I assume this has to do with the nested anonymous template.

If I make the anonymous template a normal one the group behaves as expected. I.e.:

dup(s) ::= <<
?s??s?
>>

t1(x,y={?dup(x)?}) ::= <<
x: ?x?
y: ?y?
>>

called with t1(x="a") returns 
a
aa



Udo

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20110203/aa894b54/attachment.html 

From parrt at cs.usfca.edu  Thu Feb  3 18:21:06 2011
From: parrt at cs.usfca.edu (Terence Parr)
Date: Thu, 3 Feb 2011 18:21:06 -0800
Subject: [stringtemplate-interest] ST4: varargs version of add ?
In-Reply-To: <AANLkTikpCcud8gsAF1wCVn21MPZpegNXXkN3Oay0WHaF@mail.gmail.com>
References: <AANLkTikpCcud8gsAF1wCVn21MPZpegNXXkN3Oay0WHaF@mail.gmail.com>
Message-ID: <3B18F0CE-30D5-4C64-93AC-C52D768FD125@cs.usfca.edu>

Hi. I was thinking about this but wasn't sure about it. so the usage is something like:

st.add("names", "parrt", "tombu", "dmose");

Is that what you're thinking?

Ter

On Feb 1, 2011, at 6:54 PM, Collin Fagan wrote:

> Hi, 
> 
> I find I would like to pass multiple items to add. Would it be possible  to get a varargs version of add?
> 
> Maybe something like this?
> 
>    public synchronized void add(String name, Object value, Object ... moreValues) {
>        List<Object> allObjects = new ArrayList<Object>();
>        allObjects.add(value);
>        Collections.addAll(allObjects, moreValues);
>        add(name, allObjects);
>    }
> 
> Of course this isn't the most efficient implementation one could write but we could deal with that if anyone liked the idea of a varargs add.
> 
> Collin
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest


From parrt at cs.usfca.edu  Thu Feb  3 18:32:00 2011
From: parrt at cs.usfca.edu (Terence Parr)
Date: Thu, 3 Feb 2011 18:32:00 -0800
Subject: [stringtemplate-interest] [ST4] Specify the encoding in the
	template group file
In-Reply-To: <AANLkTimG6mACNWc5hboxpsYCEqvzogq7wXxWo6H+wiwp@mail.gmail.com>
References: <DCC543C0-1E4F-4F2D-8B3A-02FE78DD4116@abego-software.de>
	<8E30BFB5-618B-4F79-A140-11D50CFF2954@cs.usfca.edu>
	<A1B4DEB6-9199-4A0A-A6EF-CBD48739919F@abego-software.de>
	<A7B4A029-EBB7-4847-B8E5-59A2C170E218@cs.usfca.edu>
	<cc8e0fe4a8109d6d9890bfd76db76331@mail.gmail.com>
	<A0351FD3-1B05-4D99-B0D9-F86E6A0A2694@cs.usfca.edu>
	<AANLkTimG6mACNWc5hboxpsYCEqvzogq7wXxWo6H+wiwp@mail.gmail.com>
Message-ID: <2A49C255-5CAE-457F-B3A3-BF8D53BDD70B@cs.usfca.edu>

changed STGroup.java:

    /** Load files using what encoding? */
    public String encoding = "UTF-8";

All unit tests are passing as before and I write out a lot of ascii text. must be okay then :)

Ter

From collin.fagan at gmail.com  Fri Feb  4 05:30:22 2011
From: collin.fagan at gmail.com (Collin Fagan)
Date: Fri, 4 Feb 2011 07:30:22 -0600
Subject: [stringtemplate-interest] ST4: varargs version of add ?
In-Reply-To: <3B18F0CE-30D5-4C64-93AC-C52D768FD125@cs.usfca.edu>
References: <AANLkTikpCcud8gsAF1wCVn21MPZpegNXXkN3Oay0WHaF@mail.gmail.com>
	<3B18F0CE-30D5-4C64-93AC-C52D768FD125@cs.usfca.edu>
Message-ID: <AANLkTi=TTwXr_470p=Waoq+W9nCd=CKD9feTAAMLpYAO@mail.gmail.com>

Yes thats it. It removes the necessity for Arrays.asList() or new Object[]
when you want to add just a specific few items.

Collin

On Thu, Feb 3, 2011 at 8:21 PM, Terence Parr <parrt at cs.usfca.edu> wrote:

> Hi. I was thinking about this but wasn't sure about it. so the usage is
> something like:
>
> st.add("names", "parrt", "tombu", "dmose");
>
> Is that what you're thinking?
>
> Ter
>
> On Feb 1, 2011, at 6:54 PM, Collin Fagan wrote:
>
> > Hi,
> >
> > I find I would like to pass multiple items to add. Would it be possible
>  to get a varargs version of add?
> >
> > Maybe something like this?
> >
> >    public synchronized void add(String name, Object value, Object ...
> moreValues) {
> >        List<Object> allObjects = new ArrayList<Object>();
> >        allObjects.add(value);
> >        Collections.addAll(allObjects, moreValues);
> >        add(name, allObjects);
> >    }
> >
> > Of course this isn't the most efficient implementation one could write
> but we could deal with that if anyone liked the idea of a varargs add.
> >
> > Collin
> > _______________________________________________
> > stringtemplate-interest mailing list
> > stringtemplate-interest at antlr.org
> > http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20110204/d204923f/attachment.html 

From parrt at cs.usfca.edu  Fri Feb  4 07:52:09 2011
From: parrt at cs.usfca.edu (Terence Parr)
Date: Fri, 4 Feb 2011 07:52:09 -0800
Subject: [stringtemplate-interest] ST4: varargs version of add ?
In-Reply-To: <AANLkTi=TTwXr_470p=Waoq+W9nCd=CKD9feTAAMLpYAO@mail.gmail.com>
References: <AANLkTikpCcud8gsAF1wCVn21MPZpegNXXkN3Oay0WHaF@mail.gmail.com>
	<3B18F0CE-30D5-4C64-93AC-C52D768FD125@cs.usfca.edu>
	<AANLkTi=TTwXr_470p=Waoq+W9nCd=CKD9feTAAMLpYAO@mail.gmail.com>
Message-ID: <B31613B3-22E6-4951-894B-F6EF71FDE7CF@cs.usfca.edu>

isn't that just

st.add("names", "parrt");
st.add("names", "tombu");

then?

Ter

On Feb 4, 2011, at 5:30 AM, Collin Fagan wrote:

> Yes thats it. It removes the necessity for Arrays.asList() or new Object[] when you want to add just a specific few items.
> 
> Collin
> 
> On Thu, Feb 3, 2011 at 8:21 PM, Terence Parr <parrt at cs.usfca.edu> wrote:
> Hi. I was thinking about this but wasn't sure about it. so the usage is something like:
> 
> st.add("names", "parrt", "tombu", "dmose");
> 
> Is that what you're thinking?
> 
> Ter
> 
> On Feb 1, 2011, at 6:54 PM, Collin Fagan wrote:
> 
> > Hi,
> >
> > I find I would like to pass multiple items to add. Would it be possible  to get a varargs version of add?
> >
> > Maybe something like this?
> >
> >    public synchronized void add(String name, Object value, Object ... moreValues) {
> >        List<Object> allObjects = new ArrayList<Object>();
> >        allObjects.add(value);
> >        Collections.addAll(allObjects, moreValues);
> >        add(name, allObjects);
> >    }
> >
> > Of course this isn't the most efficient implementation one could write but we could deal with that if anyone liked the idea of a varargs add.
> >
> > Collin
> > _______________________________________________
> > stringtemplate-interest mailing list
> > stringtemplate-interest at antlr.org
> > http://www.antlr.org/mailman/listinfo/stringtemplate-interest
> 
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
> 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20110204/dbdfe203/attachment.html 

From collin.fagan at gmail.com  Fri Feb  4 07:57:44 2011
From: collin.fagan at gmail.com (Collin Fagan)
Date: Fri, 4 Feb 2011 09:57:44 -0600
Subject: [stringtemplate-interest] ST4: varargs version of add ?
In-Reply-To: <B31613B3-22E6-4951-894B-F6EF71FDE7CF@cs.usfca.edu>
References: <AANLkTikpCcud8gsAF1wCVn21MPZpegNXXkN3Oay0WHaF@mail.gmail.com>
	<3B18F0CE-30D5-4C64-93AC-C52D768FD125@cs.usfca.edu>
	<AANLkTi=TTwXr_470p=Waoq+W9nCd=CKD9feTAAMLpYAO@mail.gmail.com>
	<B31613B3-22E6-4951-894B-F6EF71FDE7CF@cs.usfca.edu>
Message-ID: <AANLkTi=CCs6JkZp4MSSHgHFGP=tA_Gihg-5DMm7KfniT@mail.gmail.com>

Yes, I'm sorry if it's too trivial but varags is around mostly for
convenience and I though this would a convient place to put it.

Collin

On Fri, Feb 4, 2011 at 9:52 AM, Terence Parr <parrt at cs.usfca.edu> wrote:

> isn't that just
>
> st.add("names", "parrt");
> st.add("names", "tombu");
>
> then?
>
> Ter
>
> On Feb 4, 2011, at 5:30 AM, Collin Fagan wrote:
>
> Yes thats it. It removes the necessity for Arrays.asList() or new Object[]
> when you want to add just a specific few items.
>
> Collin
>
> On Thu, Feb 3, 2011 at 8:21 PM, Terence Parr <parrt at cs.usfca.edu> wrote:
>
>> Hi. I was thinking about this but wasn't sure about it. so the usage is
>> something like:
>>
>> st.add("names", "parrt", "tombu", "dmose");
>>
>> Is that what you're thinking?
>>
>> Ter
>>
>> On Feb 1, 2011, at 6:54 PM, Collin Fagan wrote:
>>
>> > Hi,
>> >
>> > I find I would like to pass multiple items to add. Would it be possible
>>  to get a varargs version of add?
>> >
>> > Maybe something like this?
>> >
>> >    public synchronized void add(String name, Object value, Object ...
>> moreValues) {
>> >        List<Object> allObjects = new ArrayList<Object>();
>> >        allObjects.add(value);
>> >        Collections.addAll(allObjects, moreValues);
>> >        add(name, allObjects);
>> >    }
>> >
>> > Of course this isn't the most efficient implementation one could write
>> but we could deal with that if anyone liked the idea of a varargs add.
>> >
>> > Collin
>> > _______________________________________________
>> > stringtemplate-interest mailing list
>> > stringtemplate-interest at antlr.org
>> > http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>>
>> _______________________________________________
>> stringtemplate-interest mailing list
>> stringtemplate-interest at antlr.org
>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>>
>
>
>
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20110204/3c8fca28/attachment.html 

From parrt at cs.usfca.edu  Fri Feb  4 09:29:50 2011
From: parrt at cs.usfca.edu (Terence Parr)
Date: Fri, 4 Feb 2011 09:29:50 -0800
Subject: [stringtemplate-interest] ST4: varargs version of add ?
In-Reply-To: <AANLkTi=CCs6JkZp4MSSHgHFGP=tA_Gihg-5DMm7KfniT@mail.gmail.com>
References: <AANLkTikpCcud8gsAF1wCVn21MPZpegNXXkN3Oay0WHaF@mail.gmail.com>
	<3B18F0CE-30D5-4C64-93AC-C52D768FD125@cs.usfca.edu>
	<AANLkTi=TTwXr_470p=Waoq+W9nCd=CKD9feTAAMLpYAO@mail.gmail.com>
	<B31613B3-22E6-4951-894B-F6EF71FDE7CF@cs.usfca.edu>
	<AANLkTi=CCs6JkZp4MSSHgHFGP=tA_Gihg-5DMm7KfniT@mail.gmail.com>
Message-ID: <92260DE5-A9F1-451E-9619-3F0DE6725975@cs.usfca.edu>

It's a good idea, i'm just trying to keep ST as braindead simple as possible for ports and such.  

Ter
On Feb 4, 2011, at 7:57 AM, Collin Fagan wrote:

> Yes, I'm sorry if it's too trivial but varags is around mostly for convenience and I though this would a convient place to put it. 
> 
> Collin
> 
> On Fri, Feb 4, 2011 at 9:52 AM, Terence Parr <parrt at cs.usfca.edu> wrote:
> isn't that just
> 
> st.add("names", "parrt");
> st.add("names", "tombu");
> 
> then?
> 
> Ter
> 
> On Feb 4, 2011, at 5:30 AM, Collin Fagan wrote:
> 
>> Yes thats it. It removes the necessity for Arrays.asList() or new Object[] when you want to add just a specific few items.
>> 
>> Collin
>> 
>> On Thu, Feb 3, 2011 at 8:21 PM, Terence Parr <parrt at cs.usfca.edu> wrote:
>> Hi. I was thinking about this but wasn't sure about it. so the usage is something like:
>> 
>> st.add("names", "parrt", "tombu", "dmose");
>> 
>> Is that what you're thinking?
>> 
>> Ter
>> 
>> On Feb 1, 2011, at 6:54 PM, Collin Fagan wrote:
>> 
>> > Hi,
>> >
>> > I find I would like to pass multiple items to add. Would it be possible  to get a varargs version of add?
>> >
>> > Maybe something like this?
>> >
>> >    public synchronized void add(String name, Object value, Object ... moreValues) {
>> >        List<Object> allObjects = new ArrayList<Object>();
>> >        allObjects.add(value);
>> >        Collections.addAll(allObjects, moreValues);
>> >        add(name, allObjects);
>> >    }
>> >
>> > Of course this isn't the most efficient implementation one could write but we could deal with that if anyone liked the idea of a varargs add.
>> >
>> > Collin
>> > _______________________________________________
>> > stringtemplate-interest mailing list
>> > stringtemplate-interest at antlr.org
>> > http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>> 
>> _______________________________________________
>> stringtemplate-interest mailing list
>> stringtemplate-interest at antlr.org
>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>> 
> 
> 
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
> 
> 
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest


From parrt at cs.usfca.edu  Fri Feb  4 11:26:26 2011
From: parrt at cs.usfca.edu (Terence Parr)
Date: Fri, 4 Feb 2011 11:26:26 -0800
Subject: [stringtemplate-interest] code-generation to "compile" string
	templates?
In-Reply-To: <AANLkTi=1bfPJjq5s1Osrds5m+kwuArtbSvR3KbHTnsBi@mail.gmail.com>
References: <AANLkTi=1bfPJjq5s1Osrds5m+kwuArtbSvR3KbHTnsBi@mail.gmail.com>
Message-ID: <4536F2A3-A419-4F23-BE17-2C3C3D68C4ED@cs.usfca.edu>

Hi Eric,

We have discussed this concept previously. Sam Harwell and others clearly identified the reflection bottleneck. For v4, I'm caching that, which makes it much faster. Oliver Zeigermann is doing some comparison work at the moment:

http://code.google.com/p/jmte/wiki/Comparison

It looks to me like v4 is about 2x faster.  that is partially the cache of the reflection and partially the fact that I'm using a byte code interpreter.

Note that I have not even once tried to make the software more efficient using a profiler. presumably that will get us a little bit faster.

As you say, getting rid of reflection when generating Java byte codes means typing the templates, which is an entanglement factor between model and view. dynamic typing is more flexible. The byte codes obviously would go a lot faster on the job of VM instead of my own because of hotspot compiler. Unfortunately, this means that two reloaded template after a change, you have to be able to unload classes and reload them. that used to be a hassle; not sure where Java is at this point on class reloading.

given the new architecture of the STv4 compiler, it would be fairly straightforward to generate Java byte codes I suppose. Given the dynamic scoping as well that the dynamic typing of ST, we I would definitely not get a one-to-one mapping of byte codes. there would be a bunch of runtime to, for example, look up an attribute up the inheritance chain.

I shouldn't be looking at this at the moment, but perhaps I'll spend a few minutes and look at the profiler today.

Ter


On Jan 30, 2011, at 9:04 PM, Eric B wrote:

> Hi,
> 
> I searched around and could not see if this has been discussed before.  I was curious if the StringTemplate community has discussed compiling templates to Java classes as a means to reduce all the reflection used in resolving extremely dynamic, large templates.  Basically, coders would still use the StringTemplate language to code up the templates.  At runtime, though, instead of resolving tokens using reflection, the templates would go through a one-time process of compiling the template down to bytecode.  The idea would be that the StringTemplate would not have to use reflection to resolve templates like the following:
> someTemplate(person) ::= <<
> <b>$person.address$</b>
> >>
> 
> At runtime, it instead would compile the template to a class that could do it without reflection.   Something like the following...
> public String someTemplate(Person person){
> StringBuilder sb  = new StringBuilder();
> sb.append("<b>").append(person.getAddress()).append("</b>");
> return sb.toString();
> }
> 
> The big downside of not using reflection is that it requires the developer to somehow identify what type of object person is.  
> 
> Other frameworks/libraries make use of this class-generation technique to optimize their runtime.  For examples... JSP transparently compiles down to a Java class and it is that Java class that is used at runtime. Spring uses CGLIB to optimize their AOP proxies http://static.springsource.org/spring/docs/1.2.x/reference/aop.html .  Hibernate makes use of CGLIB... http://docs.jboss.org/hibernate/core/3.3/reference/en/html/session-configuration.html.    JSP is bit different in that it generates physical Java classes on the file system.  Spring simply generates the byte-code in memory.
> 
> Perhaps the StringTemplate syntax could be enhanced so developers could develop "strongly-typed" templates?  These types of templates could make use of a more-optimal code-generation mode.  And the untyped templates would just be interpreted via reflection as they are today.  Just a thought.
> 
> History behind my question... 
> We brought StringTemplate in to our stack a few years ago while doing some maintenance work in our UI code.  At this point, we were on Java 1.4.  Prior to using StringTemplate, much of our HTML was generated in plain Java by appending on to a big StringBuffer.  We did a bunch of research at the time... we selected StringTemplate because it would get our string-building code in to a more maintainable state.  However, after doing this refactor of our UI code out of Java string-building and in to StringTemplate, there was a noticeable drop in response time when the system was under load.  I don't remember the numbers, but using StringTemplate under load was more taxing on our CPU than the prior approach of building up the strings in Java.  When we hooked up a profiler and did some analysis on the before/after refactor behavior, we found the difference was due to the reflection that was used in resolving our StringTemplates.   
> 
> As I recently came across this interest list, I thought I'd pose the question... see if there has been any discussion on the topic.
> 
> Thanks,
> 
> Eric
> 
> 
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest


From parrt at cs.usfca.edu  Fri Feb  4 11:38:03 2011
From: parrt at cs.usfca.edu (Terence Parr)
Date: Fri, 4 Feb 2011 11:38:03 -0800
Subject: [stringtemplate-interest] code-generation to "compile" string
	templates?
In-Reply-To: <4536F2A3-A419-4F23-BE17-2C3C3D68C4ED@cs.usfca.edu>
References: <AANLkTi=1bfPJjq5s1Osrds5m+kwuArtbSvR3KbHTnsBi@mail.gmail.com>
	<4536F2A3-A419-4F23-BE17-2C3C3D68C4ED@cs.usfca.edu>
Message-ID: <FE0FDEEC-6F45-41FF-A2AA-6D5B47FEF8A5@cs.usfca.edu>

PS: My own micro benchmark stuff shows pre-optimization:

# Env Host maniac.cs.usfca.edu, Feb 4, 2011 11:34:59 AM, Java 1.6.0_22-b04-307-10M3261, Mac OS X 10.6.5 on x86_64
# HotSpot warmup
# Computing number of reps per trial
# time2Args benchmarking
# timeLotsOfArgs benchmarking
# timeSimplePropsOfArgs benchmarking
# timeDynamicAttributeLookup benchmarking
# timeDeepDynamicLookup benchmarking
timeSimplePropsOfArgs         :   431.10  434.84  438.03  444.46  443.65 =   438.41 units of work / ms
timeDeepDynamicLookup         :    81.00   81.76   82.23   82.69   83.09 =    82.16 units of work / ms
timeDynamicAttributeLookup    :   802.69  807.83  811.21  813.81  810.46 =   809.20 units of work / ms
time2Args                     :   842.24  848.96  870.76  967.11  951.33 =   896.08 units of work / ms warning: variable average work
timeLotsOfArgs                :   188.98  193.43  195.22  196.27  195.64 =   193.91 units of work / ms
# HotSpot warmup
# Computing number of reps per trial
# timeSingle benchmarking
# timeSingleBigger benchmarking
timeSingleBigger              :     6.01    6.07    6.04    6.03    6.04 =     6.04 units of work / ms
timeSingle                    :   715.51  703.23  697.71  707.37  714.45 =   707.65 units of work / ms


On Feb 4, 2011, at 11:26 AM, Terence Parr wrote:

> Hi Eric,
> 
> We have discussed this concept previously. Sam Harwell and others clearly identified the reflection bottleneck. For v4, I'm caching that, which makes it much faster. Oliver Zeigermann is doing some comparison work at the moment:
> 
> http://code.google.com/p/jmte/wiki/Comparison
> 
> It looks to me like v4 is about 2x faster.  that is partially the cache of the reflection and partially the fact that I'm using a byte code interpreter.
> 
> Note that I have not even once tried to make the software more efficient using a profiler. presumably that will get us a little bit faster.
> 
> As you say, getting rid of reflection when generating Java byte codes means typing the templates, which is an entanglement factor between model and view. dynamic typing is more flexible. The byte codes obviously would go a lot faster on the job of VM instead of my own because of hotspot compiler. Unfortunately, this means that two reloaded template after a change, you have to be able to unload classes and reload them. that used to be a hassle; not sure where Java is at this point on class reloading.
> 
> given the new architecture of the STv4 compiler, it would be fairly straightforward to generate Java byte codes I suppose. Given the dynamic scoping as well that the dynamic typing of ST, we I would definitely not get a one-to-one mapping of byte codes. there would be a bunch of runtime to, for example, look up an attribute up the inheritance chain.
> 
> I shouldn't be looking at this at the moment, but perhaps I'll spend a few minutes and look at the profiler today.
> 
> Ter
> 
> 
> On Jan 30, 2011, at 9:04 PM, Eric B wrote:
> 
>> Hi,
>> 
>> I searched around and could not see if this has been discussed before.  I was curious if the StringTemplate community has discussed compiling templates to Java classes as a means to reduce all the reflection used in resolving extremely dynamic, large templates.  Basically, coders would still use the StringTemplate language to code up the templates.  At runtime, though, instead of resolving tokens using reflection, the templates would go through a one-time process of compiling the template down to bytecode.  The idea would be that the StringTemplate would not have to use reflection to resolve templates like the following:
>> someTemplate(person) ::= <<
>> <b>$person.address$</b>
>>>> 
>> 
>> At runtime, it instead would compile the template to a class that could do it without reflection.   Something like the following...
>> public String someTemplate(Person person){
>> StringBuilder sb  = new StringBuilder();
>> sb.append("<b>").append(person.getAddress()).append("</b>");
>> return sb.toString();
>> }
>> 
>> The big downside of not using reflection is that it requires the developer to somehow identify what type of object person is.  
>> 
>> Other frameworks/libraries make use of this class-generation technique to optimize their runtime.  For examples... JSP transparently compiles down to a Java class and it is that Java class that is used at runtime. Spring uses CGLIB to optimize their AOP proxies http://static.springsource.org/spring/docs/1.2.x/reference/aop.html .  Hibernate makes use of CGLIB... http://docs.jboss.org/hibernate/core/3.3/reference/en/html/session-configuration.html.    JSP is bit different in that it generates physical Java classes on the file system.  Spring simply generates the byte-code in memory.
>> 
>> Perhaps the StringTemplate syntax could be enhanced so developers could develop "strongly-typed" templates?  These types of templates could make use of a more-optimal code-generation mode.  And the untyped templates would just be interpreted via reflection as they are today.  Just a thought.
>> 
>> History behind my question... 
>> We brought StringTemplate in to our stack a few years ago while doing some maintenance work in our UI code.  At this point, we were on Java 1.4.  Prior to using StringTemplate, much of our HTML was generated in plain Java by appending on to a big StringBuffer.  We did a bunch of research at the time... we selected StringTemplate because it would get our string-building code in to a more maintainable state.  However, after doing this refactor of our UI code out of Java string-building and in to StringTemplate, there was a noticeable drop in response time when the system was under load.  I don't remember the numbers, but using StringTemplate under load was more taxing on our CPU than the prior approach of building up the strings in Java.  When we hooked up a profiler and did some analysis on the before/after refactor behavior, we found the difference was due to the reflection that was used in resolving our StringTemplates.   
>> 
>> As I recently came across this interest list, I thought I'd pose the question... see if there has been any discussion on the topic.
>> 
>> Thanks,
>> 
>> Eric
>> 
>> 
>> _______________________________________________
>> stringtemplate-interest mailing list
>> stringtemplate-interest at antlr.org
>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
> 
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest


From parrt at antlr.org  Fri Feb  4 11:57:29 2011
From: parrt at antlr.org (Terence Parr)
Date: Fri, 4 Feb 2011 11:57:29 -0800
Subject: [stringtemplate-interest] loading via classpath
Message-ID: <BFA3CD6B-E94F-47EF-B7F8-694088E355A0@antlr.org>

yo, this doesn't see to work:

             File f = new File(fileName);
            if ( f.exists() ) {
                url = f.toURI().toURL();
            }
            else { // try in classpath
                ClassLoader cl = Thread.currentThread().getContextClassLoader();
                url = cl.getResource(fileName);
                if ( url==null ) {
                    cl = this.getClass().getClassLoader();
                    url = cl.getResource(fileName);
                }
                if ( url==null ) {
                    throw new IllegalArgumentException("No such group file: "+
                                                       fileName);
                }
            }
        }

trying Oliver's code to load a template via

	static STGroup test = new STGroupFile("org/stringtemplate/v4/benchmark/email.stg"); // tried with and w/o leading '/'

won't find the file. ideas?

Ter

From collin.fagan at gmail.com  Fri Feb  4 12:06:57 2011
From: collin.fagan at gmail.com (Collin Fagan)
Date: Fri, 4 Feb 2011 14:06:57 -0600
Subject: [stringtemplate-interest] loading via classpath
In-Reply-To: <BFA3CD6B-E94F-47EF-B7F8-694088E355A0@antlr.org>
References: <BFA3CD6B-E94F-47EF-B7F8-694088E355A0@antlr.org>
Message-ID: <AANLkTimuu9HQ+NKHfqDMbCdZBStCw5eZuQRR4nEZyq4E@mail.gmail.com>

Is this isn't from a static method, right? I've never had luck with
Thread.currentThread().getContextClassLoader().

You could try

new Object().getClass().getClassLoader().

Collin


On Fri, Feb 4, 2011 at 1:57 PM, Terence Parr <parrt at antlr.org> wrote:

> yo, this doesn't see to work:
>
>             File f = new File(fileName);
>            if ( f.exists() ) {
>                url = f.toURI().toURL();
>            }
>            else { // try in classpath
>                ClassLoader cl =
> Thread.currentThread().getContextClassLoader();
>                url = cl.getResource(fileName);
>                if ( url==null ) {
>                    cl = this.getClass().getClassLoader();
>                    url = cl.getResource(fileName);
>                }
>                if ( url==null ) {
>                    throw new IllegalArgumentException("No such group file:
> "+
>                                                       fileName);
>                }
>            }
>        }
>
> trying Oliver's code to load a template via
>
>        static STGroup test = new
> STGroupFile("org/stringtemplate/v4/benchmark/email.stg"); // tried with and
> w/o leading '/'
>
> won't find the file. ideas?
>
> Ter
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20110204/ebc0c959/attachment.html 

From parrt at antlr.org  Fri Feb  4 12:12:29 2011
From: parrt at antlr.org (Terence Parr)
Date: Fri, 4 Feb 2011 12:12:29 -0800
Subject: [stringtemplate-interest] loading via classpath
In-Reply-To: <AANLkTimuu9HQ+NKHfqDMbCdZBStCw5eZuQRR4nEZyq4E@mail.gmail.com>
References: <BFA3CD6B-E94F-47EF-B7F8-694088E355A0@antlr.org>
	<AANLkTimuu9HQ+NKHfqDMbCdZBStCw5eZuQRR4nEZyq4E@mail.gmail.com>
Message-ID: <D3CBF6E0-9144-4342-880D-BEBB7DC0028F@antlr.org>


On Feb 4, 2011, at 12:06 PM, Collin Fagan wrote:

> Is this isn't from a static method, right? I've never had luck with Thread.currentThread().getContextClassLoader(). 
> 
> You could try 
> 
> new Object().getClass().getClassLoader(). 

i try that too:

>                    cl = this.getClass().getClassLoader();
>                    url = cl.getResource(fileName);


weird.
T

From parrt at antlr.org  Fri Feb  4 12:14:35 2011
From: parrt at antlr.org (Terence Parr)
Date: Fri, 4 Feb 2011 12:14:35 -0800
Subject: [stringtemplate-interest] oliver benchmarks
Message-ID: <696B2FC9-6BC0-4F34-B5D3-138BB3F7DE4C@antlr.org>

# Env Host maniac.cs.usfca.edu, Feb 4, 2011 12:13:16 PM, Java 1.6.0_22-b04-307-10M3261, Mac OS X 10.6.5 on x86_64
# HotSpot warmup
# Computing number of reps per trial
# timeEmail benchmarking
# timeEmailWriteToStringBuffer benchmarking
# timeEmailWithRenderers benchmarking
timeEmail                     :    34.73   35.10   49.27   49.21   49.16 =    43.50 units of work / ms warning: variable average work
timeEmailWriteToStringBuffer  :    50.41   50.09   50.25   50.04   49.98 =    50.16 units of work / ms
timeEmailWithRenderers        :    31.61   31.73   32.41   32.66   32.49 =    32.18 units of work / ms

ok, now off to profile this and others.

	public void timeEmail(int reps) {
		ST st = test.getInstanceOf("email");
		st.add("order", Helper.order);
		st.add("separator", "----------------");
		for (int i = 0; i < reps; i++) {
			st.render();
		}
	}

	public void timeEmailWriteToStringBuffer(int reps) {
		ST st = test.getInstanceOf("email");
		st.add("order", Helper.order);
		st.add("separator", "----------------");
		for (int i = 0; i < reps; i++) {
			StringWriter sw = new StringWriter();
			AutoIndentWriter w = new AutoIndentWriter(sw);
			try {st.write(w);} catch (IOException ioe) {;}
		}
	}

	public void timeEmailWithRenderers(int reps) {
		STGroup test = new STGroupFile("email.stg");
		test.registerRenderer(Date.class, new DateRenderer());
		test.registerRenderer(BigDecimal.class, new BigDecimalRenderer());
		ST st = test.getInstanceOf("email");
		st.add("order", Helper.order);
		st.add("separator", "----------------");
		for (int i = 0; i < reps; i++) {
			st.render();
		}
	}

Ter

From parrt at cs.usfca.edu  Fri Feb  4 12:44:10 2011
From: parrt at cs.usfca.edu (Terence Parr)
Date: Fri, 4 Feb 2011 12:44:10 -0800
Subject: [stringtemplate-interest] it's 60% of time in
	ObjectModelAdaptor.getProperty()
Message-ID: <DD516DA0-C59E-43F1-A9CC-FC5024AAB5B4@cs.usfca.edu>

and NOT the part that does reflection lookup.

	public Object getProperty(ST self, Object o, Object property, String propertyName)
		throws STNoSuchPropertyException
	{
		Object value = null;
        Class c = o.getClass();

		if ( property==null ) {
			return throwNoSuchProperty(c.getName() + "." + propertyName);
		}

		// Look in cache for Member first
		Member member = classAndPropertyToMemberCache.get(c, propertyName);
		if ( member!=null ) {
			try {
				if ( member.getClass() == Method.class ) return ((Method)member).invoke(o);
				if ( member.getClass() == Field.class ) return ((Field)member).get(o);
			}
			catch (Exception e) {
				throwNoSuchProperty(c.getName() + "." + propertyName);
			}
		}
		return lookupMethod(o, propertyName, value, c);
	}

lookupMethod doesn't even show up of course.  The double hashmap classAndPropertyToMemberCache could be an issue but it calls this method A LOT.  can't see how to remove w/o static types.  any ideas?

Ter

From sharwell at pixelminegames.com  Fri Feb  4 13:50:46 2011
From: sharwell at pixelminegames.com (Sam Harwell)
Date: Fri, 4 Feb 2011 15:50:46 -0600
Subject: [stringtemplate-interest] it's 60% of time in
	ObjectModelAdaptor.getProperty()
In-Reply-To: <DD516DA0-C59E-43F1-A9CC-FC5024AAB5B4@cs.usfca.edu>
References: <DD516DA0-C59E-43F1-A9CC-FC5024AAB5B4@cs.usfca.edu>
Message-ID: <033701cbc4b5$94f01dc0$bed05940$@pixelminegames.com>

In the CLR, it's particularly expensive to invoke a method through
MethodInfo.Invoke or access a field through FieldInfo.GetValue. Most of the
cost is due to various security/permission/binding checks associated with
dynamic invocation. To save time, I dynamically generate stub methods and
call them through delegates. This way, the binding only occurs once per
method involved in the process. I don't have a large enough test available
for real-world ST4 testing, but I'm working on porting over one of my ST3
templates (produces several MB of output text). In ST3, GetProperty was less
than 5% of the inclusive rendering time, and I don't expect that to change
much for ST4. I'll let you know.

Sam

-----Original Message-----
From: Terence Parr [mailto:parrt at cs.usfca.edu] 
Sent: Friday, February 04, 2011 2:44 PM
To: stringtemplate-interest List
Cc: Sam Harwell
Subject: it's 60% of time in ObjectModelAdaptor.getProperty()

and NOT the part that does reflection lookup.

	public Object getProperty(ST self, Object o, Object property, String
propertyName)
		throws STNoSuchPropertyException
	{
		Object value = null;
        Class c = o.getClass();

		if ( property==null ) {
			return throwNoSuchProperty(c.getName() + "." +
propertyName);
		}

		// Look in cache for Member first
		Member member = classAndPropertyToMemberCache.get(c,
propertyName);
		if ( member!=null ) {
			try {
				if ( member.getClass() == Method.class )
return ((Method)member).invoke(o);
				if ( member.getClass() == Field.class )
return ((Field)member).get(o);
			}
			catch (Exception e) {
				throwNoSuchProperty(c.getName() + "." +
propertyName);
			}
		}
		return lookupMethod(o, propertyName, value, c);
	}

lookupMethod doesn't even show up of course.  The double hashmap
classAndPropertyToMemberCache could be an issue but it calls this method A
LOT.  can't see how to remove w/o static types.  any ideas?

Ter=


From parrt at cs.usfca.edu  Fri Feb  4 13:55:11 2011
From: parrt at cs.usfca.edu (Terence Parr)
Date: Fri, 4 Feb 2011 13:55:11 -0800
Subject: [stringtemplate-interest] it's 60% of time in
	ObjectModelAdaptor.getProperty()
In-Reply-To: <033701cbc4b5$94f01dc0$bed05940$@pixelminegames.com>
References: <DD516DA0-C59E-43F1-A9CC-FC5024AAB5B4@cs.usfca.edu>
	<033701cbc4b5$94f01dc0$bed05940$@pixelminegames.com>
Message-ID: <528EB850-A4FD-4410-BECD-B281F99FA5FF@cs.usfca.edu>

great info. i remember you told me a while back.

i wonder how easy this is in java using ASM or whatever.  i'd have to generate stubs and then figure out how to load. it's a solved problem but i wonder if there is a simple example.
Ter

On Feb 4, 2011, at 1:50 PM, Sam Harwell wrote:

> In the CLR, it's particularly expensive to invoke a method through
> MethodInfo.Invoke or access a field through FieldInfo.GetValue. Most of the
> cost is due to various security/permission/binding checks associated with
> dynamic invocation. To save time, I dynamically generate stub methods and
> call them through delegates. This way, the binding only occurs once per
> method involved in the process. I don't have a large enough test available
> for real-world ST4 testing, but I'm working on porting over one of my ST3
> templates (produces several MB of output text). In ST3, GetProperty was less
> than 5% of the inclusive rendering time, and I don't expect that to change
> much for ST4. I'll let you know.


From parrt at cs.usfca.edu  Fri Feb  4 13:58:50 2011
From: parrt at cs.usfca.edu (Terence Parr)
Date: Fri, 4 Feb 2011 13:58:50 -0800
Subject: [stringtemplate-interest] it's 60% of time in
	ObjectModelAdaptor.getProperty()
In-Reply-To: <528EB850-A4FD-4410-BECD-B281F99FA5FF@cs.usfca.edu>
References: <DD516DA0-C59E-43F1-A9CC-FC5024AAB5B4@cs.usfca.edu>
	<033701cbc4b5$94f01dc0$bed05940$@pixelminegames.com>
	<528EB850-A4FD-4410-BECD-B281F99FA5FF@cs.usfca.edu>
Message-ID: <7B3CFEFB-8D9B-43D7-A621-67D27EDB0DD6@cs.usfca.edu>


On Feb 4, 2011, at 1:55 PM, Terence Parr wrote:

> great info. i remember you told me a while back.
> 
> i wonder how easy this is in java using ASM or whatever.  i'd have to generate stubs and then figure out how to load. it's a solved problem but i wonder if there is a simple example.

looks easy enough:

http://www.javaworld.com/javaworld/jw-06-2006/jw-0612-dynamic.html?page=3

Ter


From collin.fagan at gmail.com  Fri Feb  4 14:18:15 2011
From: collin.fagan at gmail.com (Collin Fagan)
Date: Fri, 4 Feb 2011 16:18:15 -0600
Subject: [stringtemplate-interest] it's 60% of time in
	ObjectModelAdaptor.getProperty()
In-Reply-To: <7B3CFEFB-8D9B-43D7-A621-67D27EDB0DD6@cs.usfca.edu>
References: <DD516DA0-C59E-43F1-A9CC-FC5024AAB5B4@cs.usfca.edu>
	<033701cbc4b5$94f01dc0$bed05940$@pixelminegames.com>
	<528EB850-A4FD-4410-BECD-B281F99FA5FF@cs.usfca.edu>
	<7B3CFEFB-8D9B-43D7-A621-67D27EDB0DD6@cs.usfca.edu>
Message-ID: <AANLkTinWPyxMR6xhh2xB-MoqDrM13PA-3++=6uHaBhmv@mail.gmail.com>

Ahh yes the compiler API, it's very cool. I remember experimenting with this
to do something similar to what you want, I was implementing a simple
interface that just returned a value and it was faster then reflection at
the time. I would warn though that using tools.jar in an application is not
a simple matter. tools.jar comes with a JDK because it is bound to *that *jdk.
As an example my current application uses JMX dynamic attach, also in
tools.jar. We have to compile against one tools.jar and then add the jdk's
tools.jar at run time to the classpath at *install *time. This is becouse
tools.jar has platform dependent code in it, or it refrences platform
dependand libraries. It's possible that the compiler API uses nothing of the
native libraries and that it might work to include tools.jar as a part of
ST, but I wouldn't count on it. ASM, cglib, and javasist all try to do the
same kinds of things... just in a more verbose way that I've never been able
to get my head around completely yet.

I really like the idea though.

Collin

On Fri, Feb 4, 2011 at 3:58 PM, Terence Parr <parrt at cs.usfca.edu> wrote:

>
> On Feb 4, 2011, at 1:55 PM, Terence Parr wrote:
>
> > great info. i remember you told me a while back.
> >
> > i wonder how easy this is in java using ASM or whatever.  i'd have to
> generate stubs and then figure out how to load. it's a solved problem but i
> wonder if there is a simple example.
>
> looks easy enough:
>
> http://www.javaworld.com/javaworld/jw-06-2006/jw-0612-dynamic.html?page=3
>
> Ter
>
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20110204/b8802b30/attachment-0001.html 

From parrt at cs.usfca.edu  Fri Feb  4 15:43:17 2011
From: parrt at cs.usfca.edu (Terence Parr)
Date: Fri, 4 Feb 2011 15:43:17 -0800
Subject: [stringtemplate-interest] it's 60% of time in
	ObjectModelAdaptor.getProperty()
In-Reply-To: <AANLkTinWPyxMR6xhh2xB-MoqDrM13PA-3++=6uHaBhmv@mail.gmail.com>
References: <DD516DA0-C59E-43F1-A9CC-FC5024AAB5B4@cs.usfca.edu>
	<033701cbc4b5$94f01dc0$bed05940$@pixelminegames.com>
	<528EB850-A4FD-4410-BECD-B281F99FA5FF@cs.usfca.edu>
	<7B3CFEFB-8D9B-43D7-A621-67D27EDB0DD6@cs.usfca.edu>
	<AANLkTinWPyxMR6xhh2xB-MoqDrM13PA-3++=6uHaBhmv@mail.gmail.com>
Message-ID: <B40B09F6-16A9-4A1A-B4C1-DD844E8B88D2@cs.usfca.edu>

yeah,I like the idea a lot too, but I'm also worried about the tools.jar thing.

when it comes down to it, ST v3 was the fastest in the world but it worked for most people. STv4 is at least two times faster so I think perhaps we can just leave it is as-is for now. The easier thing to do might be to generate Java code from the templates and give people a jar to include in their application. The only problem is dynamic  field and method eval is still there. without static types, I'm not sure there's a real reason to add the complexity of generating java.

Ter

On Feb 4, 2011, at 2:18 PM, Collin Fagan wrote:

> Ahh yes the compiler API, it's very cool. I remember experimenting with this to do something similar to what you want, I was implementing a simple interface that just returned a value and it was faster then reflection at the time. I would warn though that using tools.jar in an application is not a simple matter. tools.jar comes with a JDK because it is bound to that jdk. As an example my current application uses JMX dynamic attach, also in tools.jar. We have to compile against one tools.jar and then add the jdk's tools.jar at run time to the classpath at install time. This is becouse tools.jar has platform dependent code in it, or it refrences platform dependand libraries. It's possible that the compiler API uses nothing of the native libraries and that it might work to include tools.jar as a part of ST, but I wouldn't count on it. ASM, cglib, and javasist all try to do the same kinds of things... just in a more verbose way that I've never been able to get my head around completely yet. 
> 
> I really like the idea though. 
> 
> Collin 
> 
> On Fri, Feb 4, 2011 at 3:58 PM, Terence Parr <parrt at cs.usfca.edu> wrote:
> 
> On Feb 4, 2011, at 1:55 PM, Terence Parr wrote:
> 
> > great info. i remember you told me a while back.
> >
> > i wonder how easy this is in java using ASM or whatever.  i'd have to generate stubs and then figure out how to load. it's a solved problem but i wonder if there is a simple example.
> 
> looks easy enough:
> 
> http://www.javaworld.com/javaworld/jw-06-2006/jw-0612-dynamic.html?page=3
> 
> Ter
> 
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
> 


From j.stuyts at javathinker.com  Fri Feb  4 23:24:16 2011
From: j.stuyts at javathinker.com (Johan Stuyts)
Date: Sat, 05 Feb 2011 08:24:16 +0100
Subject: [stringtemplate-interest] it's 60% of time in
 ObjectModelAdaptor.getProperty()
In-Reply-To: <B40B09F6-16A9-4A1A-B4C1-DD844E8B88D2@cs.usfca.edu>
References: <DD516DA0-C59E-43F1-A9CC-FC5024AAB5B4@cs.usfca.edu>
	<033701cbc4b5$94f01dc0$bed05940$@pixelminegames.com>
	<528EB850-A4FD-4410-BECD-B281F99FA5FF@cs.usfca.edu>
	<7B3CFEFB-8D9B-43D7-A621-67D27EDB0DD6@cs.usfca.edu>
	<AANLkTinWPyxMR6xhh2xB-MoqDrM13PA-3++=6uHaBhmv@mail.gmail.com>
	<B40B09F6-16A9-4A1A-B4C1-DD844E8B88D2@cs.usfca.edu>
Message-ID: <op.vqe5iqmac4vsc3@frank-black.lan>

> yeah,I like the idea a lot too, but I'm also worried about the tools.jar  
> thing.
>
> when it comes down to it, ST v3 was the fastest in the world but it  
> worked for most people. STv4 is at least two times faster so I think  
> perhaps we can just leave it is as-is for now. The easier thing to do  
> might be to generate Java code from the templates and give people a jar  
> to include in their application. The only problem is dynamic  field and  
> method eval is still there. without static types, I'm not sure there's a  
> real reason to add the complexity of generating java.

You may also consider using a custom class loader. The only thing you  
would have to do is replace a number of byte strings in a byte array for  
each adapter, and then use defineClass(...):
- build the byte array by concatenating template parts and  
instance-specific parts
- tell the custom class loader to define the class
- use newInstance() on the resulting class
- cast the object to the interface you have defined for this purpose
- invoke the method

Johan

From oliver.zeigermann at gmail.com  Sat Feb  5 08:24:37 2011
From: oliver.zeigermann at gmail.com (Oliver Zeigermann)
Date: Sat, 5 Feb 2011 17:24:37 +0100
Subject: [stringtemplate-interest] loading via classpath
In-Reply-To: <BFA3CD6B-E94F-47EF-B7F8-694088E355A0@antlr.org>
References: <BFA3CD6B-E94F-47EF-B7F8-694088E355A0@antlr.org>
Message-ID: <AANLkTikFxp3wErpD-_+bXjpn5+GE-Jy68WLbS_guyHeG@mail.gmail.com>

public static STGroup simple = new STGroupFile("st4/simple.stg");

works for me. Check that in your *build* directory there actually is
that template group file in folder st4 (or whatever you have). Using
ant to build you have to do this explicitly, while Eclipse does this
automatically. I will add a build target to the ant file of the
template survey and upload that.

2011/2/4 Terence Parr <parrt at antlr.org>:
> yo, this doesn't see to work:
>
> ? ? ? ? ? ? File f = new File(fileName);
> ? ? ? ? ? ?if ( f.exists() ) {
> ? ? ? ? ? ? ? ?url = f.toURI().toURL();
> ? ? ? ? ? ?}
> ? ? ? ? ? ?else { // try in classpath
> ? ? ? ? ? ? ? ?ClassLoader cl = Thread.currentThread().getContextClassLoader();
> ? ? ? ? ? ? ? ?url = cl.getResource(fileName);
> ? ? ? ? ? ? ? ?if ( url==null ) {
> ? ? ? ? ? ? ? ? ? ?cl = this.getClass().getClassLoader();
> ? ? ? ? ? ? ? ? ? ?url = cl.getResource(fileName);
> ? ? ? ? ? ? ? ?}
> ? ? ? ? ? ? ? ?if ( url==null ) {
> ? ? ? ? ? ? ? ? ? ?throw new IllegalArgumentException("No such group file: "+
> ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? fileName);
> ? ? ? ? ? ? ? ?}
> ? ? ? ? ? ?}
> ? ? ? ?}
>
> trying Oliver's code to load a template via
>
> ? ? ? ?static STGroup test = new STGroupFile("org/stringtemplate/v4/benchmark/email.stg"); // tried with and w/o leading '/'
>
> won't find the file. ideas?
>
> Ter
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>

From oliver.zeigermann at gmail.com  Sat Feb  5 09:07:53 2011
From: oliver.zeigermann at gmail.com (Oliver Zeigermann)
Date: Sat, 5 Feb 2011 18:07:53 +0100
Subject: [stringtemplate-interest] loading via classpath
In-Reply-To: <AANLkTikFxp3wErpD-_+bXjpn5+GE-Jy68WLbS_guyHeG@mail.gmail.com>
References: <BFA3CD6B-E94F-47EF-B7F8-694088E355A0@antlr.org>
	<AANLkTikFxp3wErpD-_+bXjpn5+GE-Jy68WLbS_guyHeG@mail.gmail.com>
Message-ID: <AANLkTinEQBe2thZLzN_x86uaPzv1hDH0jefJhgOH4icw@mail.gmail.com>

There now is a complete build file inside

http://jmte.googlecode.com/files/templatesurvey.zip

that copies the templates.

2011/2/5 Oliver Zeigermann <oliver.zeigermann at gmail.com>:
> public static STGroup simple = new STGroupFile("st4/simple.stg");
>
> works for me. Check that in your *build* directory there actually is
> that template group file in folder st4 (or whatever you have). Using
> ant to build you have to do this explicitly, while Eclipse does this
> automatically. I will add a build target to the ant file of the
> template survey and upload that.
>
> 2011/2/4 Terence Parr <parrt at antlr.org>:
>> yo, this doesn't see to work:
>>
>> ? ? ? ? ? ? File f = new File(fileName);
>> ? ? ? ? ? ?if ( f.exists() ) {
>> ? ? ? ? ? ? ? ?url = f.toURI().toURL();
>> ? ? ? ? ? ?}
>> ? ? ? ? ? ?else { // try in classpath
>> ? ? ? ? ? ? ? ?ClassLoader cl = Thread.currentThread().getContextClassLoader();
>> ? ? ? ? ? ? ? ?url = cl.getResource(fileName);
>> ? ? ? ? ? ? ? ?if ( url==null ) {
>> ? ? ? ? ? ? ? ? ? ?cl = this.getClass().getClassLoader();
>> ? ? ? ? ? ? ? ? ? ?url = cl.getResource(fileName);
>> ? ? ? ? ? ? ? ?}
>> ? ? ? ? ? ? ? ?if ( url==null ) {
>> ? ? ? ? ? ? ? ? ? ?throw new IllegalArgumentException("No such group file: "+
>> ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? fileName);
>> ? ? ? ? ? ? ? ?}
>> ? ? ? ? ? ?}
>> ? ? ? ?}
>>
>> trying Oliver's code to load a template via
>>
>> ? ? ? ?static STGroup test = new STGroupFile("org/stringtemplate/v4/benchmark/email.stg"); // tried with and w/o leading '/'
>>
>> won't find the file. ideas?
>>
>> Ter
>> _______________________________________________
>> stringtemplate-interest mailing list
>> stringtemplate-interest at antlr.org
>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>>
>

From parrt at cs.usfca.edu  Sat Feb  5 09:23:07 2011
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sat, 5 Feb 2011 09:23:07 -0800
Subject: [stringtemplate-interest] it's 60% of time in
	ObjectModelAdaptor.getProperty()
In-Reply-To: <op.vqe5iqmac4vsc3@frank-black.lan>
References: <DD516DA0-C59E-43F1-A9CC-FC5024AAB5B4@cs.usfca.edu>
	<033701cbc4b5$94f01dc0$bed05940$@pixelminegames.com>
	<528EB850-A4FD-4410-BECD-B281F99FA5FF@cs.usfca.edu>
	<7B3CFEFB-8D9B-43D7-A621-67D27EDB0DD6@cs.usfca.edu>
	<AANLkTinWPyxMR6xhh2xB-MoqDrM13PA-3++=6uHaBhmv@mail.gmail.com>
	<B40B09F6-16A9-4A1A-B4C1-DD844E8B88D2@cs.usfca.edu>
	<op.vqe5iqmac4vsc3@frank-black.lan>
Message-ID: <34454D9D-EDD3-43D3-9BD3-D73BE627ACBF@cs.usfca.edu>

Hi Johan, good idea.  Still though, w/o a type, it's still got to use .invoke.  There is no interface that covers every field / method in all possible incoming objects.

Ter

On Feb 4, 2011, at 11:24 PM, Johan Stuyts wrote:

>> yeah,I like the idea a lot too, but I'm also worried about the tools.jar  
>> thing.
>> 
>> when it comes down to it, ST v3 was the fastest in the world but it  
>> worked for most people. STv4 is at least two times faster so I think  
>> perhaps we can just leave it is as-is for now. The easier thing to do  
>> might be to generate Java code from the templates and give people a jar  
>> to include in their application. The only problem is dynamic  field and  
>> method eval is still there. without static types, I'm not sure there's a  
>> real reason to add the complexity of generating java.
> 
> You may also consider using a custom class loader. The only thing you  
> would have to do is replace a number of byte strings in a byte array for  
> each adapter, and then use defineClass(...):
> - build the byte array by concatenating template parts and  
> instance-specific parts
> - tell the custom class loader to define the class
> - use newInstance() on the resulting class
> - cast the object to the interface you have defined for this purpose
> - invoke the method
> 
> Johan
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest


From oliver.zeigermann at gmail.com  Sat Feb  5 09:23:25 2011
From: oliver.zeigermann at gmail.com (Oliver Zeigermann)
Date: Sat, 5 Feb 2011 18:23:25 +0100
Subject: [stringtemplate-interest] it's 60% of time in
	ObjectModelAdaptor.getProperty()
In-Reply-To: <B40B09F6-16A9-4A1A-B4C1-DD844E8B88D2@cs.usfca.edu>
References: <DD516DA0-C59E-43F1-A9CC-FC5024AAB5B4@cs.usfca.edu>
	<033701cbc4b5$94f01dc0$bed05940$@pixelminegames.com>
	<528EB850-A4FD-4410-BECD-B281F99FA5FF@cs.usfca.edu>
	<7B3CFEFB-8D9B-43D7-A621-67D27EDB0DD6@cs.usfca.edu>
	<AANLkTinWPyxMR6xhh2xB-MoqDrM13PA-3++=6uHaBhmv@mail.gmail.com>
	<B40B09F6-16A9-4A1A-B4C1-DD844E8B88D2@cs.usfca.edu>
Message-ID: <AANLkTikXU98tv_-dG0m3tERrBuB6P4O8bE=D6g3b1ZF-@mail.gmail.com>

Compiling does not bring much without static typing. Caching the
internal data structure (e.g. AST or custom byte code) at least for me
was almost as fast as compiling to byte code. But with static types
you could be as fast as hand written Java code.

Generating bytecode directly or first creating source and then
compiling it should both work. Generating bytecode certainly is faster
(not for runtime, just compile time), but generating source should be
easier to do and maintain.

You would probably use javax.tools.JavaCompiler instead to avoid
dependencies to the JDK installed and then you do not need that
tools.jar.

E.g.

JavaCompiler compiler = ToolProvider.getSystemJavaCompiler();

Just my 5 cents.

- Oliver

2011/2/5 Terence Parr <parrt at cs.usfca.edu>:
> yeah,I like the idea a lot too, but I'm also worried about the tools.jar thing.
>
> when it comes down to it, ST v3 was the fastest in the world but it worked for most people. STv4 is at least two times faster so I think perhaps we can just leave it is as-is for now. The easier thing to do might be to generate Java code from the templates and give people a jar to include in their application. The only problem is dynamic ?field and method eval is still there. without static types, I'm not sure there's a real reason to add the complexity of generating java.
>
> Ter
>
> On Feb 4, 2011, at 2:18 PM, Collin Fagan wrote:
>
>> Ahh yes the compiler API, it's very cool. I remember experimenting with this to do something similar to what you want, I was implementing a simple interface that just returned a value and it was faster then reflection at the time. I would warn though that using tools.jar in an application is not a simple matter. tools.jar comes with a JDK because it is bound to that jdk. As an example my current application uses JMX dynamic attach, also in tools.jar. We have to compile against one tools.jar and then add the jdk's tools.jar at run time to the classpath at install time. This is becouse tools.jar has platform dependent code in it, or it refrences platform dependand libraries. It's possible that the compiler API uses nothing of the native libraries and that it might work to include tools.jar as a part of ST, but I wouldn't count on it. ASM, cglib, and javasist all try to do the same kinds of things... just in a more verbose way that I've never been able to get my head around co
> ?mpletely yet.
>>
>> I really like the idea though.
>>
>> Collin
>>
>> On Fri, Feb 4, 2011 at 3:58 PM, Terence Parr <parrt at cs.usfca.edu> wrote:
>>
>> On Feb 4, 2011, at 1:55 PM, Terence Parr wrote:
>>
>> > great info. i remember you told me a while back.
>> >
>> > i wonder how easy this is in java using ASM or whatever. ?i'd have to generate stubs and then figure out how to load. it's a solved problem but i wonder if there is a simple example.
>>
>> looks easy enough:
>>
>> http://www.javaworld.com/javaworld/jw-06-2006/jw-0612-dynamic.html?page=3
>>
>> Ter
>>
>> _______________________________________________
>> stringtemplate-interest mailing list
>> stringtemplate-interest at antlr.org
>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>>
>
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>

From parrt at cs.usfca.edu  Sat Feb  5 09:23:58 2011
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sat, 5 Feb 2011 09:23:58 -0800
Subject: [stringtemplate-interest] loading via classpath
In-Reply-To: <AANLkTikFxp3wErpD-_+bXjpn5+GE-Jy68WLbS_guyHeG@mail.gmail.com>
References: <BFA3CD6B-E94F-47EF-B7F8-694088E355A0@antlr.org>
	<AANLkTikFxp3wErpD-_+bXjpn5+GE-Jy68WLbS_guyHeG@mail.gmail.com>
Message-ID: <7D9E703F-F274-454F-98E9-F7DBD44A0C97@cs.usfca.edu>

oh right! dang it.  i keep assuming my build path is where my source / .stg are. grrr!!!
Ter
On Feb 5, 2011, at 8:24 AM, Oliver Zeigermann wrote:

> public static STGroup simple = new STGroupFile("st4/simple.stg");
> 
> works for me. Check that in your *build* directory there actually is
> that template group file in folder st4 (or whatever you have). Using
> ant to build you have to do this explicitly, while Eclipse does this
> automatically. I will add a build target to the ant file of the
> template survey and upload that.
> 
> 2011/2/4 Terence Parr <parrt at antlr.org>:
>> yo, this doesn't see to work:
>> 
>>             File f = new File(fileName);
>>            if ( f.exists() ) {
>>                url = f.toURI().toURL();
>>            }
>>            else { // try in classpath
>>                ClassLoader cl = Thread.currentThread().getContextClassLoader();
>>                url = cl.getResource(fileName);
>>                if ( url==null ) {
>>                    cl = this.getClass().getClassLoader();
>>                    url = cl.getResource(fileName);
>>                }
>>                if ( url==null ) {
>>                    throw new IllegalArgumentException("No such group file: "+
>>                                                       fileName);
>>                }
>>            }
>>        }
>> 
>> trying Oliver's code to load a template via
>> 
>>        static STGroup test = new STGroupFile("org/stringtemplate/v4/benchmark/email.stg"); // tried with and w/o leading '/'
>> 
>> won't find the file. ideas?
>> 
>> Ter
>> _______________________________________________
>> stringtemplate-interest mailing list
>> stringtemplate-interest at antlr.org
>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>> 


From oliver.zeigermann at gmail.com  Sat Feb  5 09:28:18 2011
From: oliver.zeigermann at gmail.com (Oliver Zeigermann)
Date: Sat, 5 Feb 2011 18:28:18 +0100
Subject: [stringtemplate-interest] it's 60% of time in
	ObjectModelAdaptor.getProperty()
In-Reply-To: <34454D9D-EDD3-43D3-9BD3-D73BE627ACBF@cs.usfca.edu>
References: <DD516DA0-C59E-43F1-A9CC-FC5024AAB5B4@cs.usfca.edu>
	<033701cbc4b5$94f01dc0$bed05940$@pixelminegames.com>
	<528EB850-A4FD-4410-BECD-B281F99FA5FF@cs.usfca.edu>
	<7B3CFEFB-8D9B-43D7-A621-67D27EDB0DD6@cs.usfca.edu>
	<AANLkTinWPyxMR6xhh2xB-MoqDrM13PA-3++=6uHaBhmv@mail.gmail.com>
	<B40B09F6-16A9-4A1A-B4C1-DD844E8B88D2@cs.usfca.edu>
	<op.vqe5iqmac4vsc3@frank-black.lan>
	<34454D9D-EDD3-43D3-9BD3-D73BE627ACBF@cs.usfca.edu>
Message-ID: <AANLkTimnTU_rx+UNNfohvx56fyJDfwa34F8+XKmaLVNZ@mail.gmail.com>

Another problem with compiling to bytecode is that for each
compilation you have a new class lurking around. You can still reuse
them, but getting rid of them (unloading) would probably require a
classloader for each new class:

http://stackoverflow.com/questions/148681/unloading-classes-in-java

2011/2/5 Terence Parr <parrt at cs.usfca.edu>:
> Hi Johan, good idea. ?Still though, w/o a type, it's still got to use .invoke. ?There is no interface that covers every field / method in all possible incoming objects.
>
> Ter
>
> On Feb 4, 2011, at 11:24 PM, Johan Stuyts wrote:
>
>>> yeah,I like the idea a lot too, but I'm also worried about the tools.jar
>>> thing.
>>>
>>> when it comes down to it, ST v3 was the fastest in the world but it
>>> worked for most people. STv4 is at least two times faster so I think
>>> perhaps we can just leave it is as-is for now. The easier thing to do
>>> might be to generate Java code from the templates and give people a jar
>>> to include in their application. The only problem is dynamic ?field and
>>> method eval is still there. without static types, I'm not sure there's a
>>> real reason to add the complexity of generating java.
>>
>> You may also consider using a custom class loader. The only thing you
>> would have to do is replace a number of byte strings in a byte array for
>> each adapter, and then use defineClass(...):
>> - build the byte array by concatenating template parts and
>> instance-specific parts
>> - tell the custom class loader to define the class
>> - use newInstance() on the resulting class
>> - cast the object to the interface you have defined for this purpose
>> - invoke the method
>>
>> Johan
>> _______________________________________________
>> stringtemplate-interest mailing list
>> stringtemplate-interest at antlr.org
>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>

From parrt at cs.usfca.edu  Sat Feb  5 10:42:10 2011
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sat, 5 Feb 2011 10:42:10 -0800
Subject: [stringtemplate-interest] [ST4 Beta-3] Endless loop when
	referencing argument in default value
In-Reply-To: <3B478F96-7C13-4BF7-BC88-E1BA7396AF32@abego-software.de>
References: <3B478F96-7C13-4BF7-BC88-E1BA7396AF32@abego-software.de>
Message-ID: <20AFAECF-64A7-4D42-8088-7FC411845E8B@cs.usfca.edu>

Oh right. i have to add a "lint mode" back in. adding to todo list.
Ter
On Jan 31, 2011, at 2:07 PM, Udo Borkowski wrote:

> Hi,
> 
> the following leads to an endless loop in ST4 Beta-3. 
> 
> t(s={<s>}) ::= <<
> <s>
> >>
> 
> main() ::= <<
> <t()>
> >>
> 
> It's a cyclic reference introduced by a default value expression referencing the argument it belongs to.
> 
> I added the following code to class ST to work around this issue:
> 
>     public static final int MAX_ST_CHAIN_LENGTH = 10000;
>     ...
>     public Object getAttribute(String name) {
>         ST p = this;
>         int i = MAX_ST_CHAIN_LENGTH;
>         while ( p!=null ) {
>             .
>             .
>             .
>             p = p.enclosingInstance;
>             
>             // check for cycles
>             i--;
>             if (i < 0) {
>                 throw new STException(
> 		         String.format("Cyclic reference detected when looking for attribute %s in template %s",
>                          name, p.getName()), null);
>             }
>         }
>         .
>         .
>         .
>     }
> 
> This breaks the cycle with an exception when a given limit for the iterations is reached.
> 
> 
> Udo
> 
> P.S.: The given example is the most simple template I could find to demonstrate the issue. Here the cycle is obvious. However it took me quite a while to find this bug because originally this was caused by a missing "}" for the default argument. The parser went on looking for the closing '}', also scanning the body of the template that (correctly) contained the <s> until it found the '}' in a following template. So it looked something like this, but more complicated: 
> 
> t(s={xyz) ::= "<s>"
> 
> otherTemplate(q={abc}) ::= << ... >>
> 
> P.P.S.: One can think of other ("more correct") ways to check for the cycle, like tracking the templates already handled in the loop, e.g. in a set. However the counter solution seems to require much less resources (time and space). 
> 
> 
> 
> 
> 
> 
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20110205/cffbfaaa/attachment.html 

From parrt at cs.usfca.edu  Sat Feb  5 11:10:53 2011
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sat, 5 Feb 2011 11:10:53 -0800
Subject: [stringtemplate-interest] Using the "format" option with a
	template calls
In-Reply-To: <6A50EDB7-F6EB-4653-80A9-80EB21229F48@abego-software.de>
References: <C86262A2-C348-46EC-8E16-5F8EC4666CE2@abego-software.de>
	<C47DD5F6-849E-4012-B1CF-AEE0D399481E@cs.usfca.edu>
	<354A2DD2-D97D-43F9-AB04-07B1BAF664CC@gmx.de>
	<0F719C16-B904-4005-93BE-C056AD0097D3@cs.usfca.edu>
	<E3BEB04C-CEE4-4116-BB81-7422010E7C67@abego-software.de>
	<572F8851-F1BA-45DD-8256-C0212CC052A6@cs.usfca.edu>
	<7118AAEE-85C7-44E1-8A46-B3A267014A81@gmx.de>
	<C0A8BABF-C2C5-41E9-B0F1-AF1318C176BB@cs.usfca.edu>
	<6A50EDB7-F6EB-4653-80A9-80EB21229F48@abego-software.de>
Message-ID: <5778376D-A224-4DD3-A06D-D9999CFC47B6@cs.usfca.edu>

Oh, i'm an idiot. it should obviously just create same kind of writer as outer templ is using.

			StringWriter sw = new StringWriter();
			STWriter stw = null;
			try {
				Class writerClass = out.getClass();
				Constructor ctor =
					writerClass.getConstructor(new Class[] {Writer.class});
				stw = (STWriter)ctor.newInstance(sw);
			}
			catch (Exception e) {
				stw = new AutoIndentWriter(sw);
				errMgr.runTimeError(self, current_ip, ErrorType.WRITER_CTOR_ISSUE, out.getClass().getSimpleName());
			}
			writeObjectNoOptions(stw, self, value);

Unit tests:

	/** (...) forces early eval to string. early eval <(x)> using new
	 *  STWriter derived from type of current STWriter. e.g., AutoIndentWriter.
	 */
	@Test public void testEarlyEvalIndent() throws Exception {
		String templates =
			"t() ::= <<  abc>>\n" +
			"main() ::= <<\n" +
			"<t()>\n" +
			"<(t())>\n" + // early eval ignores indents; mostly for simply strings
			"  <t()>\n" +
			"  <(t())>\n" +
			">>\n";

		writeFile(tmpdir, "t.stg", templates);
		STGroup group = new STGroupFile(tmpdir+"/"+"t.stg");
		ST st = group.getInstanceOf("main");
		String result = st.render();
		String expected =
			"  abc\n" +
			"  abc\n" +
			"    abc\n" +
			"    abc";
		assertEquals(expected, result);
	}

	@Test public void testEarlyEvalNoIndent() throws Exception {
		String templates =
			"t() ::= <<  abc>>\n" +
			"main() ::= <<\n" +
			"<t()>\n" +
			"<(t())>\n" + // early eval ignores indents; mostly for simply strings
			"  <t()>\n" +
			"  <(t())>\n" +
			">>\n";

		writeFile(tmpdir, "t.stg", templates);
		STGroup group = new STGroupFile(tmpdir+"/"+"t.stg");
		ST st = group.getInstanceOf("main");
		StringWriter sw = new StringWriter();
		NoIndentWriter w = new NoIndentWriter(sw);
		st.write(w);
		String result = sw.toString();
		String expected =
			"abc\n" +
			"abc\n" +
			"abc\n" +
			"abc";
		assertEquals(expected, result);
	}

On Jan 31, 2011, at 2:11 PM, Udo Borkowski wrote:

> Hi Ter,
> 
>> The early eval is really meant for small chunks.
> For the property name case and possibly the option value case this assumption is fine. However for the default value this seems to be quite restrictive. Why should default values always be small chunks?
> 
> 
> 
> Anyhow, I guess we could go on with this discussion for quite a while. What about shortcutting this?
> 
> As you may tell from my postings I would like to use an AutoIndentWriter instead of the NoIndentWriter for the "toString"/"early eval" case. What about making this configurable? I.e. by default the NoIndentWriter is used but one may use a different one, if desired.
> 
> One way to achieve this: instead of calling "new NoIndentWriter(sw)" directly in Interpreter#toString(?) ask a factory object to return the "early eval" writer. By default this is a NoIndentWriter.
> 
> E.g.:
> 
> Add new interface:
> 
> public interface EarlyEvalWriterFactory {
> 
> 	/**
> 	 * Returns a newly created STWriter used to write the given value as a
> 	 * String with the StringWriter out.
> 	 * 
> 	 * @param out
> 	 * @param template
> 	 * @param value
> 	 * @return
> 	 */
> 	STWriter createEarlyEvalWriter(StringWriter out, ST template, Object value);
> }
> 
> In Interpreter add:
> 
> 	public static EarlyEvalWriterFactory earlyEvalWriterFactory = new EarlyEvalWriterFactory() {
> 		@Override
> 		public STWriter createEarlyEvalWriter(StringWriter sw, ST template,
> 				Object value) {
> 			return new NoIndentWriter(sw);
> 		}
> 	};
> 	
> In Interpreter#toString(ST self, Object value) use
> 
> 			STWriter out = earlyEvalWriterFactory.createEarlyEvalWriter(sw,
> 					self, value);
> 			writeObjectNoOptions(out, self, value);
> 
> 			return sw.toString();
> 
> This way one could replace the earlyEvalWriterFactory if a different STWriter than the NoIndentWriter should be used for early string evaluation.
> 
> I would really appreciate this extension.
> 
> 
> Udo
> 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20110205/a7cfeebe/attachment-0001.html 

From parrt at cs.usfca.edu  Sat Feb  5 11:23:02 2011
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sat, 5 Feb 2011 11:23:02 -0800
Subject: [stringtemplate-interest] [ST4 Beta-3] Endless loop when
	template comment is not closed.
In-Reply-To: <91177699-7DF0-4CAD-99CC-9F728C0DE3E1@abego-software.de>
References: <91177699-7DF0-4CAD-99CC-9F728C0DE3E1@abego-software.de>
Message-ID: <AF86372E-06DD-427A-AF9A-5BD452D9B6E2@cs.usfca.edu>

fixed. now it's like this:

t.stg 1:20: Nonterminated comment starting at 1:1: '!>' missing

Ter
On Feb 3, 2011, at 10:22 AM, Udo Borkowski wrote:

> A template comment that is not closed, e.g.
> 
> t() ::= <<
> <!bad comment>
> ...
> >>
> 
> leads to an endless loop.
> 
> 
> I changed STLexer#COMMENT to work around this issue:
> 
>     void COMMENT() {
>         match('!');
>         while ( !(c=='!' && input.LA(2)==delimiterStopChar) ) {
>         	if (c==EOF) {
> 				RecognitionException re =
> 					new MismatchedTokenException((int)'!', input);
> 				re.line = input.getLine();
> 				re.charPositionInLine = input.getCharPositionInLine();
> 				errMgr.lexerError(input.getSourceName(), "Comment not closed. '!"+delimiterStopChar+"' missing", templateToken, re);
> 				break;        		
>         	}
>         	consume();
>         }
>         consume(); consume(); // kill !>
>     }
> 
> 
> This fix works. However I guess it would be better if the error message could refer to the opening "<!", but I am not sure how to write this.
> 
> Udo
> 
> 
> 
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20110205/964abcaf/attachment.html 

From parrt at cs.usfca.edu  Sat Feb  5 12:02:30 2011
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sat, 5 Feb 2011 12:02:30 -0800
Subject: [stringtemplate-interest] [ST4] Introduce Boolean literals
	(e.g. true/false)?
In-Reply-To: <77435A96-5EFD-409C-9282-6358E36CAF1A@abego-software.de>
References: <77435A96-5EFD-409C-9282-6358E36CAF1A@abego-software.de>
Message-ID: <33C79A55-AEF2-40C8-8AAC-A868218A8877@cs.usfca.edu>

* added two literals "true" and "false" to the template argument syntax; e.g.,
  stat(name,x=true,y=false) ::= "..."

Wow. thanks for all the help, Udo! I really appreciate you catching all of this stuff.

Ter
On Feb 3, 2011, at 10:28 AM, Udo Borkowski wrote:

> How about adding two literals "true" and "false" to the grammar of ST4, refering to the Boolean.TRUE and FALSE?
> 
> I would like to use these as default values.
> 
> E.g. 
> 
> 	myTemplate(withPrefix=true, withLog=false) ::= ?
> 
> 
> I found no nice way to express something like this. How do others work around this?
> 
> 
> Udo
> 
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest


From parrt at cs.usfca.edu  Sat Feb  5 12:07:00 2011
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sat, 5 Feb 2011 12:07:00 -0800
Subject: [stringtemplate-interest] [ST4] How to notice errors when a
	file was not imported?
In-Reply-To: <A507B6FA-947E-48E4-8A0B-8D3FD02EF10F@abego-software.de>
References: <A507B6FA-947E-48E4-8A0B-8D3FD02EF10F@abego-software.de>
Message-ID: <84C40FF2-39DF-48EE-952E-257D30A70CFA@cs.usfca.edu>

Good suggestion.
fixed.
Ter
On Jan 31, 2011, at 3:17 PM, Udo Borkowski wrote:

> Hi,
> 
> I created an own ErrorListener that collects all error message in a list for later retrieval. I set the listener for every group immediately after it is created.
> 
> I now noticed that I don't get the errors when I am importing a group and the referenced group file does not exist. The error is written to the console, using the STGroup.DEFAULT_ERR_MGR.
> 
> This is because the error occurs inside the constructor STGroupFile(String fileName, char delimiterStartChar, char delimiterStopChar) and it writes to the group's errMgr. This errMgr is always the STGroup.DEFAULT_ERR_MGR because there is no chance to change the errMgr as the group is just instantiated.
> 
> Any idea how to fix this?
> 
> What about throwing an exception when an error occurs in the STGroupFile constructor (instead of using the errMgr) and let the caller handle the rest? E.g. in the STGroupFile constructor replace
> 
>             errMgr.internalError(null, "can't load group file "+fileName, e);
> with
>             throw new STException("can't load group file "+fileName, e);
> ?
> 
> 
> 
> Udo
> 
> 
> P.S.: the same problem exists for STGroupDir, I guess.
> 
> 
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20110205/85ad6471/attachment.html 

From parrt at cs.usfca.edu  Sat Feb  5 12:11:04 2011
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sat, 5 Feb 2011 12:11:04 -0800
Subject: [stringtemplate-interest] [ST4] Help needed with recursive
	template to traverse a tree
In-Reply-To: <373342FA-CF34-427E-B34E-D5351DB4CD0D@abego-software.de>
References: <373342FA-CF34-427E-B34E-D5351DB4CD0D@abego-software.de>
Message-ID: <1C93F4E9-1E76-482F-9A92-8E01368F2554@cs.usfca.edu>

my suggestion is to avoid walking data structures in the template.  i've come to conclusion it is most proper for model / controller to do this.

Ter
On Feb 1, 2011, at 7:26 AM, Udo Borkowski wrote:

> I need some help with a recursive template.
> 
> Assume you have a tree like this:
> 
>       A
>      / \
>     /   \
>   B1     B2
>  /  \   /  \
> C1  C2 C3  C4
> 
> A node is implemented as a map with a "name" key (String) and a "children" key (list of node objects).
> 
> How to get a list of all "pathes" to the nodes (in preorder)?
> 
> I.e. I want this output:
> A
> A/B1
> A/B1/C1
> A/B1/C2
> A/B2
> A/B2/C3
> A/B2/C4
> 
> I tried things like the following but run into problems with cycles. E.g. I need to refer to the "outer" prefix and node.name to build the new prefix and assign it to the argument:
> 
> allTreeNodePathes(node,prefix) ::= <<
> ?prefix??node.name?
> ?node.children:
>     {child|?allTreeNodePathes(
>                node=child,
>                prefix={?prefix??node.name?/})?}?
> >>
> 
> 
> main(p) ::= <<
> ?(allTreeNodePathes(node=p,prefix=""))?
> >>
> 
> 
> Any suggestions?
> 
> Udo
> 
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20110205/31536357/attachment.html 

From collin.fagan at gmail.com  Sat Feb  5 12:38:22 2011
From: collin.fagan at gmail.com (Collin Fagan)
Date: Sat, 5 Feb 2011 14:38:22 -0600
Subject: [stringtemplate-interest] it's 60% of time in
	ObjectModelAdaptor.getProperty()
In-Reply-To: <AANLkTikXU98tv_-dG0m3tERrBuB6P4O8bE=D6g3b1ZF-@mail.gmail.com>
References: <DD516DA0-C59E-43F1-A9CC-FC5024AAB5B4@cs.usfca.edu>
	<033701cbc4b5$94f01dc0$bed05940$@pixelminegames.com>
	<528EB850-A4FD-4410-BECD-B281F99FA5FF@cs.usfca.edu>
	<7B3CFEFB-8D9B-43D7-A621-67D27EDB0DD6@cs.usfca.edu>
	<AANLkTinWPyxMR6xhh2xB-MoqDrM13PA-3++=6uHaBhmv@mail.gmail.com>
	<B40B09F6-16A9-4A1A-B4C1-DD844E8B88D2@cs.usfca.edu>
	<AANLkTikXU98tv_-dG0m3tERrBuB6P4O8bE=D6g3b1ZF-@mail.gmail.com>
Message-ID: <AANLkTimUWrENu2yFMRwyTXkXgK5_RUXpvHPUmHidMfJS@mail.gmail.com>

Hi Oliver,

Thanks for pointing this out. I can't believe I missed this.

Collin

On Sat, Feb 5, 2011 at 11:23 AM, Oliver Zeigermann <
oliver.zeigermann at gmail.com> wrote:

> Compiling does not bring much without static typing. Caching the
> internal data structure (e.g. AST or custom byte code) at least for me
> was almost as fast as compiling to byte code. But with static types
> you could be as fast as hand written Java code.
>
> Generating bytecode directly or first creating source and then
> compiling it should both work. Generating bytecode certainly is faster
> (not for runtime, just compile time), but generating source should be
> easier to do and maintain.
>
> You would probably use javax.tools.JavaCompiler instead to avoid
> dependencies to the JDK installed and then you do not need that
> tools.jar.
>
> E.g.
>
> JavaCompiler compiler = ToolProvider.getSystemJavaCompiler();
>
> Just my 5 cents.
>
> - Oliver
>
> 2011/2/5 Terence Parr <parrt at cs.usfca.edu>:
> > yeah,I like the idea a lot too, but I'm also worried about the tools.jar
> thing.
> >
> > when it comes down to it, ST v3 was the fastest in the world but it
> worked for most people. STv4 is at least two times faster so I think perhaps
> we can just leave it is as-is for now. The easier thing to do might be to
> generate Java code from the templates and give people a jar to include in
> their application. The only problem is dynamic  field and method eval is
> still there. without static types, I'm not sure there's a real reason to add
> the complexity of generating java.
> >
> > Ter
> >
> > On Feb 4, 2011, at 2:18 PM, Collin Fagan wrote:
> >
> >> Ahh yes the compiler API, it's very cool. I remember experimenting with
> this to do something similar to what you want, I was implementing a simple
> interface that just returned a value and it was faster then reflection at
> the time. I would warn though that using tools.jar in an application is not
> a simple matter. tools.jar comes with a JDK because it is bound to that jdk.
> As an example my current application uses JMX dynamic attach, also in
> tools.jar. We have to compile against one tools.jar and then add the jdk's
> tools.jar at run time to the classpath at install time. This is becouse
> tools.jar has platform dependent code in it, or it refrences platform
> dependand libraries. It's possible that the compiler API uses nothing of the
> native libraries and that it might work to include tools.jar as a part of
> ST, but I wouldn't count on it. ASM, cglib, and javasist all try to do the
> same kinds of things... just in a more verbose way that I've never been able
> to get my head around co
> >  mpletely yet.
> >>
> >> I really like the idea though.
> >>
> >> Collin
> >>
> >> On Fri, Feb 4, 2011 at 3:58 PM, Terence Parr <parrt at cs.usfca.edu>
> wrote:
> >>
> >> On Feb 4, 2011, at 1:55 PM, Terence Parr wrote:
> >>
> >> > great info. i remember you told me a while back.
> >> >
> >> > i wonder how easy this is in java using ASM or whatever.  i'd have to
> generate stubs and then figure out how to load. it's a solved problem but i
> wonder if there is a simple example.
> >>
> >> looks easy enough:
> >>
> >>
> http://www.javaworld.com/javaworld/jw-06-2006/jw-0612-dynamic.html?page=3
> >>
> >> Ter
> >>
> >> _______________________________________________
> >> stringtemplate-interest mailing list
> >> stringtemplate-interest at antlr.org
> >> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
> >>
> >
> > _______________________________________________
> > stringtemplate-interest mailing list
> > stringtemplate-interest at antlr.org
> > http://www.antlr.org/mailman/listinfo/stringtemplate-interest
> >
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20110205/ea8a1f2f/attachment-0001.html 

From parrt at cs.usfca.edu  Sat Feb  5 12:55:00 2011
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sat, 5 Feb 2011 12:55:00 -0800
Subject: [stringtemplate-interest] [ST4 Beta-3] Cannot nest anonymous
	templates in default expression
In-Reply-To: <9D322998-807C-4953-B224-EDC0FEE1F374@abego-software.de>
References: <9D322998-807C-4953-B224-EDC0FEE1F374@abego-software.de>
Message-ID: <D15ED56D-AF10-4E6E-8B04-CA2ED7EFADA8@cs.usfca.edu>

fixed. forgot to call method that defines subtemplates in default args.
Ter
On Feb 3, 2011, at 11:39 AM, Udo Borkowski wrote:

> The following template will issue an "no such template: _sub1149" error.
> 
> t1(x,y={?x:{s|?s??s?}?}) ::= <<
> x: ?x?
> y: ?y?
> >>
> 
> When called with t1(x="a") I expected the output:
> a
> aa
> 
> 
> I assume this has to do with the nested anonymous template.
> 
> If I make the anonymous template a normal one the group behaves as expected. I.e.:
> 
> dup(s) ::= <<
> ?s??s?
> >>
> 
> t1(x,y={?dup(x)?}) ::= <<
> x: ?x?
> y: ?y?
> >>
> 
> called with t1(x="a") returns 
> a
> aa
> 
> 
> 
> Udo
> 
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20110205/44dc13a7/attachment.html 

From parrt at cs.usfca.edu  Sat Feb  5 13:11:17 2011
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sat, 5 Feb 2011 13:11:17 -0800
Subject: [stringtemplate-interest] StringTemplate 4.0b4 released
Message-ID: <6C5D56F0-362A-4089-8888-844FA238E2A9@cs.usfca.edu>

http://www.antlr.org/wiki/display/ST/2011/01/14/StringTemplate+v4+beta+released

http://www.stringtemplate.org/download/ST-4.0b4-src.zip
http://www.stringtemplate.org/download/ST-4.0b4.jar

4.0b4 -- February 5, 2011

BIG THANKS to Udo Borkowski for his help debugging these betas and his
suggestions.

* added write to file methods
* had infinite loop for expr: "<t()$"
* the default file encoding is now UTF-8
* early eval <(x)> using new STWriter derived from type of current STWriter.
  e.g., AutoIndentWriter.
* didn't detect nonterminated comment. <!bad comment>
* added two literals "true" and "false" to the template argument syntax; e.g.,
  stat(name,x=true,y=false) ::= "..."
* it was treating "..." default arg as a template not string.
* throws STException now upon not finding group file or group dir instead
  of sending err to listener.
* default args couldn't have subtemplates
  t(x,y={<x:{s|<s>}>}) ::= "..."
* Added a new benchmark from Oliver Zeigermann. Discovered 60% of time is
  spent using reflection invoke() for properties.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20110205/fb71f678/attachment.html 

From sharwell at pixelminegames.com  Sat Feb  5 16:26:14 2011
From: sharwell at pixelminegames.com (Sam Harwell)
Date: Sat, 5 Feb 2011 18:26:14 -0600
Subject: [stringtemplate-interest] [ST4] Introduce Boolean
	literals	(e.g. true/false)?
In-Reply-To: <33C79A55-AEF2-40C8-8AAC-A868218A8877@cs.usfca.edu>
References: <77435A96-5EFD-409C-9282-6358E36CAF1A@abego-software.de>
	<33C79A55-AEF2-40C8-8AAC-A868218A8877@cs.usfca.edu>
Message-ID: <03af01cbc594$772bc520$65834f60$@pixelminegames.com>

I just opened outlook to send this very question. :)

Thanks, very much needed! :)

Sam

-----Original Message-----
From: stringtemplate-interest-bounces at antlr.org
[mailto:stringtemplate-interest-bounces at antlr.org] On Behalf Of Terence Parr
Sent: Saturday, February 05, 2011 2:03 PM
To: stringtemplate-interest List
Subject: Re: [stringtemplate-interest] [ST4] Introduce Boolean literals
(e.g. true/false)?

* added two literals "true" and "false" to the template argument syntax;
e.g.,
  stat(name,x=true,y=false) ::= "..."

Wow. thanks for all the help, Udo! I really appreciate you catching all of
this stuff.

Ter
On Feb 3, 2011, at 10:28 AM, Udo Borkowski wrote:

> How about adding two literals "true" and "false" to the grammar of ST4,
refering to the Boolean.TRUE and FALSE?
> 
> I would like to use these as default values.
> 
> E.g. 
> 
> 	myTemplate(withPrefix=true, withLog=false) ::= .
> 
> 
> I found no nice way to express something like this. How do others work
around this?
> 
> 
> Udo
> 
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest

_______________________________________________
stringtemplate-interest mailing list
stringtemplate-interest at antlr.org
http://www.antlr.org/mailman/listinfo/stringtemplate-interest


From parrt at cs.usfca.edu  Sat Feb  5 16:43:36 2011
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sat, 5 Feb 2011 16:43:36 -0800
Subject: [stringtemplate-interest] [ST4] Introduce Boolean
	literals	(e.g. true/false)?
In-Reply-To: <03af01cbc594$772bc520$65834f60$@pixelminegames.com>
References: <77435A96-5EFD-409C-9282-6358E36CAF1A@abego-software.de>
	<33C79A55-AEF2-40C8-8AAC-A868218A8877@cs.usfca.edu>
	<03af01cbc594$772bc520$65834f60$@pixelminegames.com>
Message-ID: <826A2831-6070-4230-9424-523FE83C176B@cs.usfca.edu>

cool, but Oops. fixed remaining part:

* true/false were only allowed as default args; now allowed as template
  arg expressions in templates.

pushed.

Ter
On Feb 5, 2011, at 4:26 PM, Sam Harwell wrote:

> I just opened outlook to send this very question. :)
> 
> Thanks, very much needed! :)
> 
> Sam
> 
> -----Original Message-----
> From: stringtemplate-interest-bounces at antlr.org
> [mailto:stringtemplate-interest-bounces at antlr.org] On Behalf Of Terence Parr
> Sent: Saturday, February 05, 2011 2:03 PM
> To: stringtemplate-interest List
> Subject: Re: [stringtemplate-interest] [ST4] Introduce Boolean literals
> (e.g. true/false)?
> 
> * added two literals "true" and "false" to the template argument syntax;
> e.g.,
>  stat(name,x=true,y=false) ::= "..."
> 
> Wow. thanks for all the help, Udo! I really appreciate you catching all of
> this stuff.
> 
> Ter
> On Feb 3, 2011, at 10:28 AM, Udo Borkowski wrote:
> 
>> How about adding two literals "true" and "false" to the grammar of ST4,
> refering to the Boolean.TRUE and FALSE?
>> 
>> I would like to use these as default values.
>> 
>> E.g. 
>> 
>> 	myTemplate(withPrefix=true, withLog=false) ::= .
>> 
>> 
>> I found no nice way to express something like this. How do others work
> around this?
>> 
>> 
>> Udo
>> 
>> _______________________________________________
>> stringtemplate-interest mailing list
>> stringtemplate-interest at antlr.org
>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
> 
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
> 


From sharwell at pixelminegames.com  Sat Feb  5 17:04:34 2011
From: sharwell at pixelminegames.com (Sam Harwell)
Date: Sat, 5 Feb 2011 19:04:34 -0600
Subject: [stringtemplate-interest] [ST4] Introduce
	Boolean	literals	(e.g. true/false)?
In-Reply-To: <826A2831-6070-4230-9424-523FE83C176B@cs.usfca.edu>
References: <77435A96-5EFD-409C-9282-6358E36CAF1A@abego-software.de>	<33C79A55-AEF2-40C8-8AAC-A868218A8877@cs.usfca.edu>	<03af01cbc594$772bc520$65834f60$@pixelminegames.com>
	<826A2831-6070-4230-9424-523FE83C176B@cs.usfca.edu>
Message-ID: <03b001cbc599$d22ace80$76806b80$@pixelminegames.com>

Still have one left in Group.g, rule keyValue ;)

Sam

-----Original Message-----
From: stringtemplate-interest-bounces at antlr.org
[mailto:stringtemplate-interest-bounces at antlr.org] On Behalf Of Terence Parr
Sent: Saturday, February 05, 2011 6:44 PM
To: stringtemplate-interest List
Subject: Re: [stringtemplate-interest] [ST4] Introduce Boolean literals
(e.g. true/false)?

cool, but Oops. fixed remaining part:

* true/false were only allowed as default args; now allowed as template
  arg expressions in templates.

pushed.

Ter
On Feb 5, 2011, at 4:26 PM, Sam Harwell wrote:

> I just opened outlook to send this very question. :)
> 
> Thanks, very much needed! :)
> 
> Sam
> 
> -----Original Message-----
> From: stringtemplate-interest-bounces at antlr.org
> [mailto:stringtemplate-interest-bounces at antlr.org] On Behalf Of 
> Terence Parr
> Sent: Saturday, February 05, 2011 2:03 PM
> To: stringtemplate-interest List
> Subject: Re: [stringtemplate-interest] [ST4] Introduce Boolean 
> literals (e.g. true/false)?
> 
> * added two literals "true" and "false" to the template argument 
> syntax; e.g.,
>  stat(name,x=true,y=false) ::= "..."
> 
> Wow. thanks for all the help, Udo! I really appreciate you catching 
> all of this stuff.
> 
> Ter
> On Feb 3, 2011, at 10:28 AM, Udo Borkowski wrote:
> 
>> How about adding two literals "true" and "false" to the grammar of 
>> ST4,
> refering to the Boolean.TRUE and FALSE?
>> 
>> I would like to use these as default values.
>> 
>> E.g. 
>> 
>> 	myTemplate(withPrefix=true, withLog=false) ::= .
>> 
>> 
>> I found no nice way to express something like this. How do others 
>> work
> around this?
>> 
>> 
>> Udo
>> 
>> _______________________________________________
>> stringtemplate-interest mailing list
>> stringtemplate-interest at antlr.org
>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
> 
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
> 

_______________________________________________
stringtemplate-interest mailing list
stringtemplate-interest at antlr.org
http://www.antlr.org/mailman/listinfo/stringtemplate-interest


From parrt at cs.usfca.edu  Sat Feb  5 17:14:03 2011
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sat, 5 Feb 2011 17:14:03 -0800
Subject: [stringtemplate-interest] [ST4] Introduce
	Boolean	literals	(e.g. true/false)?
In-Reply-To: <03b001cbc599$d22ace80$76806b80$@pixelminegames.com>
References: <77435A96-5EFD-409C-9282-6358E36CAF1A@abego-software.de>	<33C79A55-AEF2-40C8-8AAC-A868218A8877@cs.usfca.edu>	<03af01cbc594$772bc520$65834f60$@pixelminegames.com>
	<826A2831-6070-4230-9424-523FE83C176B@cs.usfca.edu>
	<03b001cbc599$d22ace80$76806b80$@pixelminegames.com>
Message-ID: <5F10B369-6D96-44F6-996D-B4CD55894DA6@cs.usfca.edu>

ah. crap. ok, fixed.
tre
On Feb 5, 2011, at 5:04 PM, Sam Harwell wrote:

> Still have one left in Group.g, rule keyValue ;)
> 
> Sam
> 
> -----Original Message-----
> From: stringtemplate-interest-bounces at antlr.org
> [mailto:stringtemplate-interest-bounces at antlr.org] On Behalf Of Terence Parr
> Sent: Saturday, February 05, 2011 6:44 PM
> To: stringtemplate-interest List
> Subject: Re: [stringtemplate-interest] [ST4] Introduce Boolean literals
> (e.g. true/false)?
> 
> cool, but Oops. fixed remaining part:
> 
> * true/false were only allowed as default args; now allowed as template
>  arg expressions in templates.
> 
> pushed.
> 
> Ter
> On Feb 5, 2011, at 4:26 PM, Sam Harwell wrote:
> 
>> I just opened outlook to send this very question. :)
>> 
>> Thanks, very much needed! :)
>> 
>> Sam
>> 
>> -----Original Message-----
>> From: stringtemplate-interest-bounces at antlr.org
>> [mailto:stringtemplate-interest-bounces at antlr.org] On Behalf Of 
>> Terence Parr
>> Sent: Saturday, February 05, 2011 2:03 PM
>> To: stringtemplate-interest List
>> Subject: Re: [stringtemplate-interest] [ST4] Introduce Boolean 
>> literals (e.g. true/false)?
>> 
>> * added two literals "true" and "false" to the template argument 
>> syntax; e.g.,
>> stat(name,x=true,y=false) ::= "..."
>> 
>> Wow. thanks for all the help, Udo! I really appreciate you catching 
>> all of this stuff.
>> 
>> Ter
>> On Feb 3, 2011, at 10:28 AM, Udo Borkowski wrote:
>> 
>>> How about adding two literals "true" and "false" to the grammar of 
>>> ST4,
>> refering to the Boolean.TRUE and FALSE?
>>> 
>>> I would like to use these as default values.
>>> 
>>> E.g. 
>>> 
>>> 	myTemplate(withPrefix=true, withLog=false) ::= .
>>> 
>>> 
>>> I found no nice way to express something like this. How do others 
>>> work
>> around this?
>>> 
>>> 
>>> Udo
>>> 
>>> _______________________________________________
>>> stringtemplate-interest mailing list
>>> stringtemplate-interest at antlr.org
>>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>> 
>> _______________________________________________
>> stringtemplate-interest mailing list
>> stringtemplate-interest at antlr.org
>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>> 
> 
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
> 


From erwin.mueller at deventm.org  Sat Feb  5 22:26:02 2011
From: erwin.mueller at deventm.org (erwin.mueller at deventm.org)
Date: Sun, 6 Feb 2011 01:26:02 -0500 (GMT-05:00)
Subject: [stringtemplate-interest] Conditionally included subtemplates?
In-Reply-To: <27960824.431296973541082.JavaMail.root@mail.deventm-group.org>
Message-ID: <30183432.451296973562009.JavaMail.root@mail.deventm-group.org>

Hello,

    I'm a new user of StringTemplate and so far I have manage my simple
templates w/o any problems. But I wonder in a template like [1] I understood the
documentation that the subtemplate will be included if the attribute ``address''
exists. Why do I get then NoSuchFieldException [2]? My classes are like in [3]
where ``httpd'' is an object of classes implementing the ``HttpdDirective''
interface.

    I understood the documentation ``IF actions test the presence or absence of
an attribute unless the object is a Boolean/bool, true".
For example,"$if(!member)$...$endif$".'' Presence or absence is for me whether
the object have the attribute or not. What is the documentation understands as
``presence'' or ``absence''?

Kind regards, Erwin.

[1]
domains(httpd) ::= <<
\<!-- domains --\>
<httpd.directives:{<if(it.address)>{NameVirtualHost <it.address><\n>}<endif>}>
>>

[2]
Class
com.globalscalingsoftware.sscontrol.cli.internal.application.services.httpd.
directives.SetupJkWorkerDirective$$EnhancerByGuice$$f9c51395 has no such
attribute: address in template context [httpd_default domains anonymous]
java.lang.NoSuchFieldException: address

[3]
public interface HttpdDirective {

    String getTemplateName();

    HttpdDirective setProperty(String name, Object value);

}

public class DomainDirective implements HttpdDirective {

    public String getAddress() {
        return address;
    }

}

public class SetupJkWorkerDirective implements HttpdDirective {
    // no getAddress() method
}
-- 
Erwin Mueller, erwin.mueller at deventm.org
http://www.global-scaling-institute.de/
http://www.deventm.org

From j.stuyts at javathinker.com  Sun Feb  6 07:23:16 2011
From: j.stuyts at javathinker.com (Johan Stuyts)
Date: Sun, 06 Feb 2011 16:23:16 +0100
Subject: [stringtemplate-interest] it's 60% of time in
 ObjectModelAdaptor.getProperty()
In-Reply-To: <34454D9D-EDD3-43D3-9BD3-D73BE627ACBF@cs.usfca.edu>
References: <DD516DA0-C59E-43F1-A9CC-FC5024AAB5B4@cs.usfca.edu>
	<033701cbc4b5$94f01dc0$bed05940$@pixelminegames.com>
	<528EB850-A4FD-4410-BECD-B281F99FA5FF@cs.usfca.edu>
	<7B3CFEFB-8D9B-43D7-A621-67D27EDB0DD6@cs.usfca.edu>
	<AANLkTinWPyxMR6xhh2xB-MoqDrM13PA-3++=6uHaBhmv@mail.gmail.com>
	<B40B09F6-16A9-4A1A-B4C1-DD844E8B88D2@cs.usfca.edu>
	<op.vqe5iqmac4vsc3@frank-black.lan>
	<34454D9D-EDD3-43D3-9BD3-D73BE627ACBF@cs.usfca.edu>
Message-ID: <op.vqhmc0gqc4vsc3@frank-black>

> Hi Johan, good idea.  Still though, w/o a type, it's still got to use  
> .invoke.  There is no interface that covers every field / method in all  
> possible incoming objects.

What if you included a cast in the generated bytecode? Then you can always  
invoke with type Object.

Johan

From j.stuyts at javathinker.com  Sun Feb  6 07:32:17 2011
From: j.stuyts at javathinker.com (Johan Stuyts)
Date: Sun, 06 Feb 2011 16:32:17 +0100
Subject: [stringtemplate-interest] it's 60% of time in
 ObjectModelAdaptor.getProperty()
In-Reply-To: <AANLkTimnTU_rx+UNNfohvx56fyJDfwa34F8+XKmaLVNZ@mail.gmail.com>
References: <DD516DA0-C59E-43F1-A9CC-FC5024AAB5B4@cs.usfca.edu>
	<033701cbc4b5$94f01dc0$bed05940$@pixelminegames.com>
	<528EB850-A4FD-4410-BECD-B281F99FA5FF@cs.usfca.edu>
	<7B3CFEFB-8D9B-43D7-A621-67D27EDB0DD6@cs.usfca.edu>
	<AANLkTinWPyxMR6xhh2xB-MoqDrM13PA-3++=6uHaBhmv@mail.gmail.com>
	<B40B09F6-16A9-4A1A-B4C1-DD844E8B88D2@cs.usfca.edu>
	<op.vqe5iqmac4vsc3@frank-black.lan>
	<34454D9D-EDD3-43D3-9BD3-D73BE627ACBF@cs.usfca.edu>
	<AANLkTimnTU_rx+UNNfohvx56fyJDfwa34F8+XKmaLVNZ@mail.gmail.com>
Message-ID: <op.vqhmr3u7c4vsc3@frank-black>

> Another problem with compiling to bytecode is that for each
> compilation you have a new class lurking around. You can still reuse
> them, but getting rid of them (unloading) would probably require a
> classloader for each new class:
>
> http://stackoverflow.com/questions/148681/unloading-classes-in-java

I believe classes are properly garbage collected in modern JVMs, so you  
don't have to worry about that and can use a single class loader for all  
adapters. But this should be tested to be sure.

One problem with custom class loaders is that in secure environments you  
need to have permissions to be able to create one. But as many frameworks  
use custom class loaders nowadays, this is not a problem in most cases, I  
guess.

Johan

From oliver.zeigermann at gmail.com  Sun Feb  6 08:44:59 2011
From: oliver.zeigermann at gmail.com (Oliver Zeigermann)
Date: Sun, 6 Feb 2011 17:44:59 +0100
Subject: [stringtemplate-interest] it's 60% of time in
	ObjectModelAdaptor.getProperty()
In-Reply-To: <op.vqhmr3u7c4vsc3@frank-black>
References: <DD516DA0-C59E-43F1-A9CC-FC5024AAB5B4@cs.usfca.edu>
	<033701cbc4b5$94f01dc0$bed05940$@pixelminegames.com>
	<528EB850-A4FD-4410-BECD-B281F99FA5FF@cs.usfca.edu>
	<7B3CFEFB-8D9B-43D7-A621-67D27EDB0DD6@cs.usfca.edu>
	<AANLkTinWPyxMR6xhh2xB-MoqDrM13PA-3++=6uHaBhmv@mail.gmail.com>
	<B40B09F6-16A9-4A1A-B4C1-DD844E8B88D2@cs.usfca.edu>
	<op.vqe5iqmac4vsc3@frank-black.lan>
	<34454D9D-EDD3-43D3-9BD3-D73BE627ACBF@cs.usfca.edu>
	<AANLkTimnTU_rx+UNNfohvx56fyJDfwa34F8+XKmaLVNZ@mail.gmail.com>
	<op.vqhmr3u7c4vsc3@frank-black>
Message-ID: <AANLkTin-08AgG5RgYrH9p7Bh05Hna75A7rjKVHZvQhK_@mail.gmail.com>

2011/2/6 Johan Stuyts <j.stuyts at javathinker.com>:
>> Another problem with compiling to bytecode is that for each
>> compilation you have a new class lurking around. You can still reuse
>> them, but getting rid of them (unloading) would probably require a
>> classloader for each new class:
>>
>> http://stackoverflow.com/questions/148681/unloading-classes-in-java
>
> I believe classes are properly garbage collected in modern JVMs, so you
> don't have to worry about that and can use a single class loader for all
> adapters. But this should be tested to be sure.

Yes, classes are garbage collected, but as they have a reference to
their class loader, they won't be garbage until the class loader is
garbage. Which can only be when you have created it. Or am I missing
anything here?

> One problem with custom class loaders is that in secure environments you
> need to have permissions to be able to create one. But as many frameworks
> use custom class loaders nowadays, this is not a problem in most cases, I
> guess.

When dynamically loading classes from byte arrays I do not know of any
other way than creating your own class loader anyway. I sure know that
the - know to be picky - Google App Engine allows you to do so - as I
tried it :)

Does that make sense?

- Oliver

From j.stuyts at javathinker.com  Sun Feb  6 09:32:21 2011
From: j.stuyts at javathinker.com (Johan Stuyts)
Date: Sun, 06 Feb 2011 18:32:21 +0100
Subject: [stringtemplate-interest] it's 60% of time in
 ObjectModelAdaptor.getProperty()
In-Reply-To: <AANLkTin-08AgG5RgYrH9p7Bh05Hna75A7rjKVHZvQhK_@mail.gmail.com>
References: <DD516DA0-C59E-43F1-A9CC-FC5024AAB5B4@cs.usfca.edu>
	<033701cbc4b5$94f01dc0$bed05940$@pixelminegames.com>
	<528EB850-A4FD-4410-BECD-B281F99FA5FF@cs.usfca.edu>
	<7B3CFEFB-8D9B-43D7-A621-67D27EDB0DD6@cs.usfca.edu>
	<AANLkTinWPyxMR6xhh2xB-MoqDrM13PA-3++=6uHaBhmv@mail.gmail.com>
	<B40B09F6-16A9-4A1A-B4C1-DD844E8B88D2@cs.usfca.edu>
	<op.vqe5iqmac4vsc3@frank-black.lan>
	<34454D9D-EDD3-43D3-9BD3-D73BE627ACBF@cs.usfca.edu>
	<AANLkTimnTU_rx+UNNfohvx56fyJDfwa34F8+XKmaLVNZ@mail.gmail.com>
	<op.vqhmr3u7c4vsc3@frank-black>
	<AANLkTin-08AgG5RgYrH9p7Bh05Hna75A7rjKVHZvQhK_@mail.gmail.com>
Message-ID: <op.vqhsb7rvc4vsc3@frank-black>

> Yes, classes are garbage collected, but as they have a reference to
> their class loader, they won't be garbage until the class loader is
> garbage. Which can only be when you have created it. Or am I missing
> anything here?

I think you mean the other way around: the class loaders have a reference  
to their classes.

I am not familiar with the internals of class loaders, but if class  
loaders use normal references to their classes then this would of course  
prevent the classes from being collected. In that case you would need to  
use more class loaders to make sure old classes are unloaded. Although I  
feel that one class loader per class is a bit extreme. There must be other  
'units' in StringTemplate to tie a class loader to.

I am fairly confident that class loaders don't hold on to their classes  
indefintely, but I am not 100% sure. A simple test can show how (custom)  
class loaders behave.

> When dynamically loading classes from byte arrays I do not know of any
> other way than creating your own class loader anyway.

Me neither.

> I sure know that
> the - know to be picky - Google App Engine allows you to do so - as I
> tried it :)

Cool. And like I said: custom class loaders are common practice so most  
people won't have any problem with using them. But there might be  
enthousiastic StringTemplate users who have to deploy to more restricted  
environments. I guess these users would be disappointed if they cannot  
migrate to version 4 of StringTemplate because of the additional security  
restrictions. It's just something to keep in mind when the introduction of  
a custom class loader comes up.

Johan

From ebatzdor at gmail.com  Sun Feb  6 09:45:58 2011
From: ebatzdor at gmail.com (Eric B)
Date: Sun, 6 Feb 2011 09:45:58 -0800
Subject: [stringtemplate-interest] it's 60% of time in
	ObjectModelAdaptor.getProperty()
In-Reply-To: <op.vqhsb7rvc4vsc3@frank-black>
References: <DD516DA0-C59E-43F1-A9CC-FC5024AAB5B4@cs.usfca.edu>
	<033701cbc4b5$94f01dc0$bed05940$@pixelminegames.com>
	<528EB850-A4FD-4410-BECD-B281F99FA5FF@cs.usfca.edu>
	<7B3CFEFB-8D9B-43D7-A621-67D27EDB0DD6@cs.usfca.edu>
	<AANLkTinWPyxMR6xhh2xB-MoqDrM13PA-3++=6uHaBhmv@mail.gmail.com>
	<B40B09F6-16A9-4A1A-B4C1-DD844E8B88D2@cs.usfca.edu>
	<op.vqe5iqmac4vsc3@frank-black.lan>
	<34454D9D-EDD3-43D3-9BD3-D73BE627ACBF@cs.usfca.edu>
	<AANLkTimnTU_rx+UNNfohvx56fyJDfwa34F8+XKmaLVNZ@mail.gmail.com>
	<op.vqhmr3u7c4vsc3@frank-black>
	<AANLkTin-08AgG5RgYrH9p7Bh05Hna75A7rjKVHZvQhK_@mail.gmail.com>
	<op.vqhsb7rvc4vsc3@frank-black>
Message-ID: <AANLkTimhN5b6Ocf43e-DE2B2rWBX-va7bB5ygFR6WNsj@mail.gmail.com>

I think, like Spring, the compiled-to-bytecode feature could be
optional.  Those who can't go with dynamic classes for whatever
reason, can go with an "interpreted mode" that is basically how the
templates are resolved today.

Eric

On 2/6/11, Johan Stuyts <j.stuyts at javathinker.com> wrote:
>> Yes, classes are garbage collected, but as they have a reference to
>> their class loader, they won't be garbage until the class loader is
>> garbage. Which can only be when you have created it. Or am I missing
>> anything here?
>
> I think you mean the other way around: the class loaders have a reference
> to their classes.
>
> I am not familiar with the internals of class loaders, but if class
> loaders use normal references to their classes then this would of course
> prevent the classes from being collected. In that case you would need to
> use more class loaders to make sure old classes are unloaded. Although I
> feel that one class loader per class is a bit extreme. There must be other
> 'units' in StringTemplate to tie a class loader to.
>
> I am fairly confident that class loaders don't hold on to their classes
> indefintely, but I am not 100% sure. A simple test can show how (custom)
> class loaders behave.
>
>> When dynamically loading classes from byte arrays I do not know of any
>> other way than creating your own class loader anyway.
>
> Me neither.
>
>> I sure know that
>> the - know to be picky - Google App Engine allows you to do so - as I
>> tried it :)
>
> Cool. And like I said: custom class loaders are common practice so most
> people won't have any problem with using them. But there might be
> enthousiastic StringTemplate users who have to deploy to more restricted
> environments. I guess these users would be disappointed if they cannot
> migrate to version 4 of StringTemplate because of the additional security
> restrictions. It's just something to keep in mind when the introduction of
> a custom class loader comes up.
>
> Johan
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>

-- 
Sent from my mobile device

From oliver.zeigermann at gmail.com  Sun Feb  6 10:04:25 2011
From: oliver.zeigermann at gmail.com (Oliver Zeigermann)
Date: Sun, 6 Feb 2011 19:04:25 +0100
Subject: [stringtemplate-interest] it's 60% of time in
	ObjectModelAdaptor.getProperty()
In-Reply-To: <op.vqhsb7rvc4vsc3@frank-black>
References: <DD516DA0-C59E-43F1-A9CC-FC5024AAB5B4@cs.usfca.edu>
	<033701cbc4b5$94f01dc0$bed05940$@pixelminegames.com>
	<528EB850-A4FD-4410-BECD-B281F99FA5FF@cs.usfca.edu>
	<7B3CFEFB-8D9B-43D7-A621-67D27EDB0DD6@cs.usfca.edu>
	<AANLkTinWPyxMR6xhh2xB-MoqDrM13PA-3++=6uHaBhmv@mail.gmail.com>
	<B40B09F6-16A9-4A1A-B4C1-DD844E8B88D2@cs.usfca.edu>
	<op.vqe5iqmac4vsc3@frank-black.lan>
	<34454D9D-EDD3-43D3-9BD3-D73BE627ACBF@cs.usfca.edu>
	<AANLkTimnTU_rx+UNNfohvx56fyJDfwa34F8+XKmaLVNZ@mail.gmail.com>
	<op.vqhmr3u7c4vsc3@frank-black>
	<AANLkTin-08AgG5RgYrH9p7Bh05Hna75A7rjKVHZvQhK_@mail.gmail.com>
	<op.vqhsb7rvc4vsc3@frank-black>
Message-ID: <AANLkTimhNQZJR7J+f2cbcQou_0oFPTNY+B1eAM-UdkVR@mail.gmail.com>

2011/2/6 Johan Stuyts <j.stuyts at javathinker.com>:
>> Yes, classes are garbage collected, but as they have a reference to
>> their class loader, they won't be garbage until the class loader is
>> garbage. Which can only be when you have created it. Or am I missing
>> anything here?
>
> I think you mean the other way around: the class loaders have a reference
> to their classes.

Right. Mixed that up.

> I am not familiar with the internals of class loaders, but if class
> loaders use normal references to their classes then this would of course
> prevent the classes from being collected. In that case you would need to
> use more class loaders to make sure old classes are unloaded. Although I
> feel that one class loader per class is a bit extreme. There must be other
> 'units' in StringTemplate to tie a class loader to.

Right. Like one per group maybe.

> I am fairly confident that class loaders don't hold on to their classes
> indefintely, but I am not 100% sure. A simple test can show how (custom)
> class loaders behave.

Talking about the default class loaders here I am almost 100% sure
they keep their classes forever. Otherwise static fields once
initialized might loose their values.

>> When dynamically loading classes from byte arrays I do not know of any
>> other way than creating your own class loader anyway.
>
> Me neither.
>
>> I sure know that
>> the - know to be picky - Google App Engine allows you to do so - as I
>> tried it :)
>
> Cool. And like I said: custom class loaders are common practice so most
> people won't have any problem with using them. But there might be
> enthousiastic StringTemplate users who have to deploy to more restricted
> environments. I guess these users would be disappointed if they cannot
> migrate to version 4 of StringTemplate because of the additional security
> restrictions. It's just something to keep in mind when the introduction of
> a custom class loader comes up.

Right. Compilation to JVM byte code should be optional.

- Oliver

From parrt at cs.usfca.edu  Sun Feb  6 10:04:36 2011
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sun, 6 Feb 2011 10:04:36 -0800
Subject: [stringtemplate-interest] it's 60% of time in
	ObjectModelAdaptor.getProperty()
In-Reply-To: <op.vqhmc0gqc4vsc3@frank-black>
References: <DD516DA0-C59E-43F1-A9CC-FC5024AAB5B4@cs.usfca.edu>
	<033701cbc4b5$94f01dc0$bed05940$@pixelminegames.com>
	<528EB850-A4FD-4410-BECD-B281F99FA5FF@cs.usfca.edu>
	<7B3CFEFB-8D9B-43D7-A621-67D27EDB0DD6@cs.usfca.edu>
	<AANLkTinWPyxMR6xhh2xB-MoqDrM13PA-3++=6uHaBhmv@mail.gmail.com>
	<B40B09F6-16A9-4A1A-B4C1-DD844E8B88D2@cs.usfca.edu>
	<op.vqe5iqmac4vsc3@frank-black.lan>
	<34454D9D-EDD3-43D3-9BD3-D73BE627ACBF@cs.usfca.edu>
	<op.vqhmc0gqc4vsc3@frank-black>
Message-ID: <CF0C58A7-4B08-43FB-AA78-61E3FD0FEDDF@cs.usfca.edu>

here's the issue: what's the type in the cast? we don't know it.
Ter
On Feb 6, 2011, at 7:23 AM, Johan Stuyts wrote:

>> Hi Johan, good idea.  Still though, w/o a type, it's still got to use  
>> .invoke.  There is no interface that covers every field / method in all  
>> possible incoming objects.
> 
> What if you included a cast in the generated bytecode? Then you can always  
> invoke with type Object.
> 
> Johan
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest


From oliver.zeigermann at gmail.com  Sun Feb  6 10:05:23 2011
From: oliver.zeigermann at gmail.com (Oliver Zeigermann)
Date: Sun, 6 Feb 2011 19:05:23 +0100
Subject: [stringtemplate-interest] it's 60% of time in
	ObjectModelAdaptor.getProperty()
In-Reply-To: <AANLkTimhN5b6Ocf43e-DE2B2rWBX-va7bB5ygFR6WNsj@mail.gmail.com>
References: <DD516DA0-C59E-43F1-A9CC-FC5024AAB5B4@cs.usfca.edu>
	<033701cbc4b5$94f01dc0$bed05940$@pixelminegames.com>
	<528EB850-A4FD-4410-BECD-B281F99FA5FF@cs.usfca.edu>
	<7B3CFEFB-8D9B-43D7-A621-67D27EDB0DD6@cs.usfca.edu>
	<AANLkTinWPyxMR6xhh2xB-MoqDrM13PA-3++=6uHaBhmv@mail.gmail.com>
	<B40B09F6-16A9-4A1A-B4C1-DD844E8B88D2@cs.usfca.edu>
	<op.vqe5iqmac4vsc3@frank-black.lan>
	<34454D9D-EDD3-43D3-9BD3-D73BE627ACBF@cs.usfca.edu>
	<AANLkTimnTU_rx+UNNfohvx56fyJDfwa34F8+XKmaLVNZ@mail.gmail.com>
	<op.vqhmr3u7c4vsc3@frank-black>
	<AANLkTin-08AgG5RgYrH9p7Bh05Hna75A7rjKVHZvQhK_@mail.gmail.com>
	<op.vqhsb7rvc4vsc3@frank-black>
	<AANLkTimhN5b6Ocf43e-DE2B2rWBX-va7bB5ygFR6WNsj@mail.gmail.com>
Message-ID: <AANLkTi=aXxV4Gyp-ODMtWGt9EegKqbtGVnsUmWe1vtjg@mail.gmail.com>

Right. Generally, I think the use case of a compiled template for
highest performance would be an edge case anyway.

2011/2/6 Eric B <ebatzdor at gmail.com>:
> I think, like Spring, the compiled-to-bytecode feature could be
> optional. ?Those who can't go with dynamic classes for whatever
> reason, can go with an "interpreted mode" that is basically how the
> templates are resolved today.
>
> Eric
>
> On 2/6/11, Johan Stuyts <j.stuyts at javathinker.com> wrote:
>>> Yes, classes are garbage collected, but as they have a reference to
>>> their class loader, they won't be garbage until the class loader is
>>> garbage. Which can only be when you have created it. Or am I missing
>>> anything here?
>>
>> I think you mean the other way around: the class loaders have a reference
>> to their classes.
>>
>> I am not familiar with the internals of class loaders, but if class
>> loaders use normal references to their classes then this would of course
>> prevent the classes from being collected. In that case you would need to
>> use more class loaders to make sure old classes are unloaded. Although I
>> feel that one class loader per class is a bit extreme. There must be other
>> 'units' in StringTemplate to tie a class loader to.
>>
>> I am fairly confident that class loaders don't hold on to their classes
>> indefintely, but I am not 100% sure. A simple test can show how (custom)
>> class loaders behave.
>>
>>> When dynamically loading classes from byte arrays I do not know of any
>>> other way than creating your own class loader anyway.
>>
>> Me neither.
>>
>>> I sure know that
>>> the - know to be picky - Google App Engine allows you to do so - as I
>>> tried it :)
>>
>> Cool. And like I said: custom class loaders are common practice so most
>> people won't have any problem with using them. But there might be
>> enthousiastic StringTemplate users who have to deploy to more restricted
>> environments. I guess these users would be disappointed if they cannot
>> migrate to version 4 of StringTemplate because of the additional security
>> restrictions. It's just something to keep in mind when the introduction of
>> a custom class loader comes up.
>>
>> Johan
>> _______________________________________________
>> stringtemplate-interest mailing list
>> stringtemplate-interest at antlr.org
>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>>
>
> --
> Sent from my mobile device
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>

From oliver.zeigermann at gmail.com  Sun Feb  6 10:06:46 2011
From: oliver.zeigermann at gmail.com (Oliver Zeigermann)
Date: Sun, 6 Feb 2011 19:06:46 +0100
Subject: [stringtemplate-interest] it's 60% of time in
	ObjectModelAdaptor.getProperty()
In-Reply-To: <CF0C58A7-4B08-43FB-AA78-61E3FD0FEDDF@cs.usfca.edu>
References: <DD516DA0-C59E-43F1-A9CC-FC5024AAB5B4@cs.usfca.edu>
	<033701cbc4b5$94f01dc0$bed05940$@pixelminegames.com>
	<528EB850-A4FD-4410-BECD-B281F99FA5FF@cs.usfca.edu>
	<7B3CFEFB-8D9B-43D7-A621-67D27EDB0DD6@cs.usfca.edu>
	<AANLkTinWPyxMR6xhh2xB-MoqDrM13PA-3++=6uHaBhmv@mail.gmail.com>
	<B40B09F6-16A9-4A1A-B4C1-DD844E8B88D2@cs.usfca.edu>
	<op.vqe5iqmac4vsc3@frank-black.lan>
	<34454D9D-EDD3-43D3-9BD3-D73BE627ACBF@cs.usfca.edu>
	<op.vqhmc0gqc4vsc3@frank-black>
	<CF0C58A7-4B08-43FB-AA78-61E3FD0FEDDF@cs.usfca.edu>
Message-ID: <AANLkTin+KL5_98ss52K1wxj4YZ5nGZkQpSfhPSu=6E6O@mail.gmail.com>

You will never know without static type declarations.

2011/2/6 Terence Parr <parrt at cs.usfca.edu>:
> here's the issue: what's the type in the cast? we don't know it.
> Ter
> On Feb 6, 2011, at 7:23 AM, Johan Stuyts wrote:
>
>>> Hi Johan, good idea. ?Still though, w/o a type, it's still got to use
>>> .invoke. ?There is no interface that covers every field / method in all
>>> possible incoming objects.
>>
>> What if you included a cast in the generated bytecode? Then you can always
>> invoke with type Object.
>>
>> Johan
>> _______________________________________________
>> stringtemplate-interest mailing list
>> stringtemplate-interest at antlr.org
>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>

From parrt at cs.usfca.edu  Sun Feb  6 11:03:40 2011
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sun, 6 Feb 2011 11:03:40 -0800
Subject: [stringtemplate-interest] it's 60% of time in
	ObjectModelAdaptor.getProperty()
In-Reply-To: <AANLkTin+KL5_98ss52K1wxj4YZ5nGZkQpSfhPSu=6E6O@mail.gmail.com>
References: <DD516DA0-C59E-43F1-A9CC-FC5024AAB5B4@cs.usfca.edu>
	<033701cbc4b5$94f01dc0$bed05940$@pixelminegames.com>
	<528EB850-A4FD-4410-BECD-B281F99FA5FF@cs.usfca.edu>
	<7B3CFEFB-8D9B-43D7-A621-67D27EDB0DD6@cs.usfca.edu>
	<AANLkTinWPyxMR6xhh2xB-MoqDrM13PA-3++=6uHaBhmv@mail.gmail.com>
	<B40B09F6-16A9-4A1A-B4C1-DD844E8B88D2@cs.usfca.edu>
	<op.vqe5iqmac4vsc3@frank-black.lan>
	<34454D9D-EDD3-43D3-9BD3-D73BE627ACBF@cs.usfca.edu>
	<op.vqhmc0gqc4vsc3@frank-black>
	<CF0C58A7-4B08-43FB-AA78-61E3FD0FEDDF@cs.usfca.edu>
	<AANLkTin+KL5_98ss52K1wxj4YZ5nGZkQpSfhPSu=6E6O@mail.gmail.com>
Message-ID: <C05D33CF-A912-442A-8EF0-D12565707493@cs.usfca.edu>

Yep, so i can't really ever see compilation being useful for ST since i can't add static types.
Ter
On Feb 6, 2011, at 10:06 AM, Oliver Zeigermann wrote:

> You will never know without static type declarations.
> 
> 2011/2/6 Terence Parr <parrt at cs.usfca.edu>:
>> here's the issue: what's the type in the cast? we don't know it.
>> Ter
>> On Feb 6, 2011, at 7:23 AM, Johan Stuyts wrote:
>> 
>>>> Hi Johan, good idea.  Still though, w/o a type, it's still got to use
>>>> .invoke.  There is no interface that covers every field / method in all
>>>> possible incoming objects.
>>> 
>>> What if you included a cast in the generated bytecode? Then you can always
>>> invoke with type Object.


From sharwell at pixelminegames.com  Sun Feb  6 12:59:15 2011
From: sharwell at pixelminegames.com (Sam Harwell)
Date: Sun, 6 Feb 2011 14:59:15 -0600
Subject: [stringtemplate-interest] it's 60% of time
	in	ObjectModelAdaptor.getProperty()
In-Reply-To: <C05D33CF-A912-442A-8EF0-D12565707493@cs.usfca.edu>
References: <DD516DA0-C59E-43F1-A9CC-FC5024AAB5B4@cs.usfca.edu>	<033701cbc4b5$94f01dc0$bed05940$@pixelminegames.com>	<528EB850-A4FD-4410-BECD-B281F99FA5FF@cs.usfca.edu>	<7B3CFEFB-8D9B-43D7-A621-67D27EDB0DD6@cs.usfca.edu>	<AANLkTinWPyxMR6xhh2xB-MoqDrM13PA-3++=6uHaBhmv@mail.gmail.com>	<B40B09F6-16A9-4A1A-B4C1-DD844E8B88D2@cs.usfca.edu>	<op.vqe5iqmac4vsc3@frank-black.lan>	<34454D9D-EDD3-43D3-9BD3-D73BE627ACBF@cs.usfca.edu>	<op.vqhmc0gqc4vsc3@frank-black>	<CF0C58A7-4B08-43FB-AA78-61E3FD0FEDDF@cs.usfca.edu>	<AANLkTin+KL5_98ss52K1wxj4YZ5nGZkQpSfhPSu=6E6O@mail.gmail.com>
	<C05D33CF-A912-442A-8EF0-D12565707493@cs.usfca.edu>
Message-ID: <03e401cbc640$b79960c0$26cc2240$@pixelminegames.com>

The C# version generates the equivalent of this (one accessor class modeled
but not derived from ExampleAccessor per type/property name):

interface AccessorStub {
    Object getValue(Object o);
}

class ExampleAccessor implements AccessorStub {
    public Object getValue(Object o) {
        return (Object)((T)o).getSomePropertyName();
    }
}

This handles auto-boxing as well. I then store the instances of the
accessors in a map from Type->Property name->Accessor. The implementation
for field accesses is similar to this, but emits a ldfld bytecode
instruction instead of a callvirt instruction.

Sam

-----Original Message-----
From: stringtemplate-interest-bounces at antlr.org
[mailto:stringtemplate-interest-bounces at antlr.org] On Behalf Of Terence Parr
Sent: Sunday, February 06, 2011 1:04 PM
To: stringtemplate-interest List
Subject: Re: [stringtemplate-interest] it's 60% of time in
ObjectModelAdaptor.getProperty()

Yep, so i can't really ever see compilation being useful for ST since i
can't add static types.
Ter
On Feb 6, 2011, at 10:06 AM, Oliver Zeigermann wrote:

> You will never know without static type declarations.
> 
> 2011/2/6 Terence Parr <parrt at cs.usfca.edu>:
>> here's the issue: what's the type in the cast? we don't know it.
>> Ter
>> On Feb 6, 2011, at 7:23 AM, Johan Stuyts wrote:
>> 
>>>> Hi Johan, good idea.  Still though, w/o a type, it's still got to 
>>>> use .invoke.  There is no interface that covers every field / 
>>>> method in all possible incoming objects.
>>> 
>>> What if you included a cast in the generated bytecode? Then you can 
>>> always invoke with type Object.

_______________________________________________
stringtemplate-interest mailing list
stringtemplate-interest at antlr.org
http://www.antlr.org/mailman/listinfo/stringtemplate-interest


From j.stuyts at javathinker.com  Sun Feb  6 12:59:55 2011
From: j.stuyts at javathinker.com (Johan Stuyts)
Date: Sun, 06 Feb 2011 21:59:55 +0100
Subject: [stringtemplate-interest] it's 60% of time in
 ObjectModelAdaptor.getProperty()
In-Reply-To: <CF0C58A7-4B08-43FB-AA78-61E3FD0FEDDF@cs.usfca.edu>
References: <DD516DA0-C59E-43F1-A9CC-FC5024AAB5B4@cs.usfca.edu>
	<033701cbc4b5$94f01dc0$bed05940$@pixelminegames.com>
	<528EB850-A4FD-4410-BECD-B281F99FA5FF@cs.usfca.edu>
	<7B3CFEFB-8D9B-43D7-A621-67D27EDB0DD6@cs.usfca.edu>
	<AANLkTinWPyxMR6xhh2xB-MoqDrM13PA-3++=6uHaBhmv@mail.gmail.com>
	<B40B09F6-16A9-4A1A-B4C1-DD844E8B88D2@cs.usfca.edu>
	<op.vqe5iqmac4vsc3@frank-black.lan>
	<34454D9D-EDD3-43D3-9BD3-D73BE627ACBF@cs.usfca.edu>
	<op.vqhmc0gqc4vsc3@frank-black>
	<CF0C58A7-4B08-43FB-AA78-61E3FD0FEDDF@cs.usfca.edu>
Message-ID: <op.vqh1x5dlc4vsc3@frank-black.lan>

> here's the issue: what's the type in the cast? we don't know it.

Once you have the Member (Method or Attribute) object for the property,  
you can use the declaring class of that member for the cast. For example:

interface PropertyRetriever {
   Object getValue(Object o);
}

class DynGenForMethodNameOfPerson implements PropertyRetriever {
   Object getValue(Object o) {
     return ((Person)o).getName();
   }
}

class DynGenForAttrAgeOfPerson implements PropertyRetriever {
   Object getValue(Object o) {
     return ((Person)o).age;
   }
}

You have to insert references to the class (Person) and the member  
(getName()/age) in the byte array you use to define the retriever class.

You can then replace the code section that looks up and invokes/gets the  
member with (note: exception handling omitted):
...
// Look in cache for PropertyRetriever first
PropertyRetriever retriever = classAndPropertyToRetrieverCache.get(c,  
propertyName);
if ( retriever!=null ) {
   return retriver.getValue(o);
}
...

Please note that the cache uses the actual class of the object to retrieve  
the PropertyRetriever. To prevent multiple retriever classes being defined  
for the same declaring class and property (and filling up the PermGen  
space), you have to search the cache for the declaring class of the member  
when you have a cache miss:

Class c = Object.getClass();
Method method = c.getMetod(getGetterName(propertyName));
PropertyRetriever retriever =  
classAndPropertyToRetrieverCache.get(method.getDeclaringClass(),  
propertyName);
if ( retriever==null ) {
   Object newRetriever = generateRetrieverClassAndCreateInstance(method);
   PropertyRetriever retriever = (PropertyRetriever)newRetriever;
   classAndPropertyToRetrieverCache.put(method.getDeclaringClass(),  
propertyName, retriever);
}
classAndPropertyToRetrieverCache.put(c, propertyName, retriever);

Johan

From j.stuyts at javathinker.com  Sun Feb  6 13:08:44 2011
From: j.stuyts at javathinker.com (Johan Stuyts)
Date: Sun, 06 Feb 2011 22:08:44 +0100
Subject: [stringtemplate-interest] it's 60% of time in
 ObjectModelAdaptor.getProperty()
In-Reply-To: <AANLkTimhNQZJR7J+f2cbcQou_0oFPTNY+B1eAM-UdkVR@mail.gmail.com>
References: <DD516DA0-C59E-43F1-A9CC-FC5024AAB5B4@cs.usfca.edu>
	<033701cbc4b5$94f01dc0$bed05940$@pixelminegames.com>
	<528EB850-A4FD-4410-BECD-B281F99FA5FF@cs.usfca.edu>
	<7B3CFEFB-8D9B-43D7-A621-67D27EDB0DD6@cs.usfca.edu>
	<AANLkTinWPyxMR6xhh2xB-MoqDrM13PA-3++=6uHaBhmv@mail.gmail.com>
	<B40B09F6-16A9-4A1A-B4C1-DD844E8B88D2@cs.usfca.edu>
	<op.vqe5iqmac4vsc3@frank-black.lan>
	<34454D9D-EDD3-43D3-9BD3-D73BE627ACBF@cs.usfca.edu>
	<AANLkTimnTU_rx+UNNfohvx56fyJDfwa34F8+XKmaLVNZ@mail.gmail.com>
	<op.vqhmr3u7c4vsc3@frank-black>
	<AANLkTin-08AgG5RgYrH9p7Bh05Hna75A7rjKVHZvQhK_@mail.gmail.com>
	<op.vqhsb7rvc4vsc3@frank-black>
	<AANLkTimhNQZJR7J+f2cbcQou_0oFPTNY+B1eAM-UdkVR@mail.gmail.com>
Message-ID: <op.vqh2cuzcc4vsc3@frank-black.lan>

> Talking about the default class loaders here I am almost 100% sure
> they keep their classes forever. Otherwise static fields once
> initialized might loose their values.

This could indeed be a reason why it won't work. The semantics of static  
fields is affected by unloading classes, and this can be a reason to  
prevent a class from being unloaded before its class loader is garbage.

Anyway, moving away from a single class loader makes this point moot.

Johan

From oliver.zeigermann at gmail.com  Sun Feb  6 13:51:04 2011
From: oliver.zeigermann at gmail.com (Oliver Zeigermann)
Date: Sun, 6 Feb 2011 22:51:04 +0100
Subject: [stringtemplate-interest] it's 60% of time in
	ObjectModelAdaptor.getProperty()
In-Reply-To: <C05D33CF-A912-442A-8EF0-D12565707493@cs.usfca.edu>
References: <DD516DA0-C59E-43F1-A9CC-FC5024AAB5B4@cs.usfca.edu>
	<033701cbc4b5$94f01dc0$bed05940$@pixelminegames.com>
	<528EB850-A4FD-4410-BECD-B281F99FA5FF@cs.usfca.edu>
	<7B3CFEFB-8D9B-43D7-A621-67D27EDB0DD6@cs.usfca.edu>
	<AANLkTinWPyxMR6xhh2xB-MoqDrM13PA-3++=6uHaBhmv@mail.gmail.com>
	<B40B09F6-16A9-4A1A-B4C1-DD844E8B88D2@cs.usfca.edu>
	<op.vqe5iqmac4vsc3@frank-black.lan>
	<34454D9D-EDD3-43D3-9BD3-D73BE627ACBF@cs.usfca.edu>
	<op.vqhmc0gqc4vsc3@frank-black>
	<CF0C58A7-4B08-43FB-AA78-61E3FD0FEDDF@cs.usfca.edu>
	<AANLkTin+KL5_98ss52K1wxj4YZ5nGZkQpSfhPSu=6E6O@mail.gmail.com>
	<C05D33CF-A912-442A-8EF0-D12565707493@cs.usfca.edu>
Message-ID: <AANLkTik7J_OwUkyLCrZE9=vRBcpeFuQ9X1QS_v4JtSjV@mail.gmail.com>

If you can't add static types I totally agree. And as far as I
understand you can't add static types (not even as an option) because
this would make portability of templates over target languages
impossible, right?

2011/2/6 Terence Parr <parrt at cs.usfca.edu>:
> Yep, so i can't really ever see compilation being useful for ST since i can't add static types.
> Ter
> On Feb 6, 2011, at 10:06 AM, Oliver Zeigermann wrote:
>
>> You will never know without static type declarations.
>>
>> 2011/2/6 Terence Parr <parrt at cs.usfca.edu>:
>>> here's the issue: what's the type in the cast? we don't know it.
>>> Ter
>>> On Feb 6, 2011, at 7:23 AM, Johan Stuyts wrote:
>>>
>>>>> Hi Johan, good idea. ?Still though, w/o a type, it's still got to use
>>>>> .invoke. ?There is no interface that covers every field / method in all
>>>>> possible incoming objects.
>>>>
>>>> What if you included a cast in the generated bytecode? Then you can always
>>>> invoke with type Object.
>
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>

From parrt at cs.usfca.edu  Sun Feb  6 14:07:07 2011
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sun, 6 Feb 2011 14:07:07 -0800
Subject: [stringtemplate-interest] it's 60% of time in
	ObjectModelAdaptor.getProperty()
In-Reply-To: <op.vqh1x5dlc4vsc3@frank-black.lan>
References: <DD516DA0-C59E-43F1-A9CC-FC5024AAB5B4@cs.usfca.edu>
	<033701cbc4b5$94f01dc0$bed05940$@pixelminegames.com>
	<528EB850-A4FD-4410-BECD-B281F99FA5FF@cs.usfca.edu>
	<7B3CFEFB-8D9B-43D7-A621-67D27EDB0DD6@cs.usfca.edu>
	<AANLkTinWPyxMR6xhh2xB-MoqDrM13PA-3++=6uHaBhmv@mail.gmail.com>
	<B40B09F6-16A9-4A1A-B4C1-DD844E8B88D2@cs.usfca.edu>
	<op.vqe5iqmac4vsc3@frank-black.lan>
	<34454D9D-EDD3-43D3-9BD3-D73BE627ACBF@cs.usfca.edu>
	<op.vqhmc0gqc4vsc3@frank-black>
	<CF0C58A7-4B08-43FB-AA78-61E3FD0FEDDF@cs.usfca.edu>
	<op.vqh1x5dlc4vsc3@frank-black.lan>
Message-ID: <C6EAE3CC-7E4A-4461-8E93-C8C976FA186A@cs.usfca.edu>

oh right. at run-time we could compile on the fly since we know the types. i was thinking at ST bytecode compile time.  

anyway, i ran visualvm to compute that 60% number.  YourKit profiler says otherwise (the exec() interp method) so i'll look some more.
ter

From sharwell at pixelminegames.com  Sun Feb  6 14:12:13 2011
From: sharwell at pixelminegames.com (Sam Harwell)
Date: Sun, 6 Feb 2011 16:12:13 -0600
Subject: [stringtemplate-interest] ST3/ST4 comparison on large output
Message-ID: <03ec01cbc64a$e92f45a0$bb8dd0e0$@pixelminegames.com>

I finally converted my largest ST use case over to ST4. I'm working with the
C# ports of ST3 and ST4.

 

Package "Core", producing 29.3k of output:

ST3 header generation time: 481ms

ST4 header generation time: 208ms

 

Package "Engine", producing 2.81MB of output:

ST3 header generation time: 42182ms

ST4 header generation time: 1456ms

 

Sam

 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20110206/274c72ee/attachment.html 

From oliver.zeigermann at gmail.com  Sun Feb  6 14:14:27 2011
From: oliver.zeigermann at gmail.com (Oliver Zeigermann)
Date: Sun, 6 Feb 2011 23:14:27 +0100
Subject: [stringtemplate-interest] it's 60% of time in
	ObjectModelAdaptor.getProperty()
In-Reply-To: <C6EAE3CC-7E4A-4461-8E93-C8C976FA186A@cs.usfca.edu>
References: <DD516DA0-C59E-43F1-A9CC-FC5024AAB5B4@cs.usfca.edu>
	<033701cbc4b5$94f01dc0$bed05940$@pixelminegames.com>
	<528EB850-A4FD-4410-BECD-B281F99FA5FF@cs.usfca.edu>
	<7B3CFEFB-8D9B-43D7-A621-67D27EDB0DD6@cs.usfca.edu>
	<AANLkTinWPyxMR6xhh2xB-MoqDrM13PA-3++=6uHaBhmv@mail.gmail.com>
	<B40B09F6-16A9-4A1A-B4C1-DD844E8B88D2@cs.usfca.edu>
	<op.vqe5iqmac4vsc3@frank-black.lan>
	<34454D9D-EDD3-43D3-9BD3-D73BE627ACBF@cs.usfca.edu>
	<op.vqhmc0gqc4vsc3@frank-black>
	<CF0C58A7-4B08-43FB-AA78-61E3FD0FEDDF@cs.usfca.edu>
	<op.vqh1x5dlc4vsc3@frank-black.lan>
	<C6EAE3CC-7E4A-4461-8E93-C8C976FA186A@cs.usfca.edu>
Message-ID: <AANLkTinB=vx+KyPxk+=BFbv_r0fWhoev04OCWGZTD8Mg@mail.gmail.com>

Oh, I thought you were talking about on the fly compilation. I highly
doubt (though I have zero numbers to prove) that there are many
scenarios where on the fly compilation is actually faster than dynamic
invocation.

2011/2/6 Terence Parr <parrt at cs.usfca.edu>:
> oh right. at run-time we could compile on the fly since we know the types. i was thinking at ST bytecode compile time.
>
> anyway, i ran visualvm to compute that 60% number. ?YourKit profiler says otherwise (the exec() interp method) so i'll look some more.
> ter
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>

From parrt at cs.usfca.edu  Sun Feb  6 14:26:50 2011
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sun, 6 Feb 2011 14:26:50 -0800
Subject: [stringtemplate-interest] ST3/ST4 comparison on large output
In-Reply-To: <03ec01cbc64a$e92f45a0$bb8dd0e0$@pixelminegames.com>
References: <03ec01cbc64a$e92f45a0$bb8dd0e0$@pixelminegames.com>
Message-ID: <AB729759-EF4B-448E-92A0-A6AE7FF77B3A@cs.usfca.edu>

wow. impressive. so the algorithm (bytecode vs tree interp) is much faster. 30x faster for big output?
ter
On Feb 6, 2011, at 2:12 PM, Sam Harwell wrote:

> I finally converted my largest ST use case over to ST4. I?m working with the C# ports of ST3 and ST4.
>  
> Package ?Core?, producing 29.3k of output:
> ST3 header generation time: 481ms
> ST4 header generation time: 208ms
>  
> Package ?Engine?, producing 2.81MB of output:
> ST3 header generation time: 42182ms
> ST4 header generation time: 1456ms
>  
> Sam
>  
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest


From j.stuyts at javathinker.com  Sun Feb  6 21:47:32 2011
From: j.stuyts at javathinker.com (Johan Stuyts)
Date: Mon, 07 Feb 2011 06:47:32 +0100
Subject: [stringtemplate-interest] it's 60% of time in
 ObjectModelAdaptor.getProperty()
In-Reply-To: <AANLkTinB=vx+KyPxk+=BFbv_r0fWhoev04OCWGZTD8Mg@mail.gmail.com>
References: <DD516DA0-C59E-43F1-A9CC-FC5024AAB5B4@cs.usfca.edu>
	<033701cbc4b5$94f01dc0$bed05940$@pixelminegames.com>
	<528EB850-A4FD-4410-BECD-B281F99FA5FF@cs.usfca.edu>
	<7B3CFEFB-8D9B-43D7-A621-67D27EDB0DD6@cs.usfca.edu>
	<AANLkTinWPyxMR6xhh2xB-MoqDrM13PA-3++=6uHaBhmv@mail.gmail.com>
	<B40B09F6-16A9-4A1A-B4C1-DD844E8B88D2@cs.usfca.edu>
	<op.vqe5iqmac4vsc3@frank-black.lan>
	<34454D9D-EDD3-43D3-9BD3-D73BE627ACBF@cs.usfca.edu>
	<op.vqhmc0gqc4vsc3@frank-black>
	<CF0C58A7-4B08-43FB-AA78-61E3FD0FEDDF@cs.usfca.edu>
	<op.vqh1x5dlc4vsc3@frank-black.lan>
	<C6EAE3CC-7E4A-4461-8E93-C8C976FA186A@cs.usfca.edu>
	<AANLkTinB=vx+KyPxk+=BFbv_r0fWhoev04OCWGZTD8Mg@mail.gmail.com>
Message-ID: <op.vqiqdivbc4vsc3@frank-black>

> Oh, I thought you were talking about on the fly compilation. I highly
> doubt (though I have zero numbers to prove) that there are many
> scenarios where on the fly compilation is actually faster than dynamic
> invocation.

Indeed. You would have to benchmark it to see if the additional complexity  
and effort is worth it.

I once ran a simple test where I replaced an Interpreter pattern with code  
compiled with Janino[1]. The code got called very often, so I figured  
HotSpot would kick in and convert it to very efficient native code.  
Unfortunately the results were disappointing. The Interpreter-style code  
was faster than the generated classes. But this was quite a number of  
years ago, so things might have changed.

Johan

1. http://docs.codehaus.org/display/JANINO/Home

From ub at abego-software.de  Mon Feb  7 03:12:08 2011
From: ub at abego-software.de (Udo Borkowski)
Date: Mon, 7 Feb 2011 12:12:08 +0100
Subject: [stringtemplate-interest] [ST4 Beta-4] Cannot intercept error
	messages from imported groups
Message-ID: <2894B9F8-7781-4324-8E50-0D0FAE40BBC8@abego-software.de>

Hi,

I am using my own ErrorListener and set it when a new group is created. 

With Beta-4 it is now possible to notice when an imported group file does not exist.

However I do not notice when the imported group is buggy. The error message is still written to the standard error listener.

This is because the error listeners of the imported groups haven't been updated to my error listener. I tried to do so at the same time when setting the listener for the parent group. However I noticed the "imports" are not yet defined after creating the parent group but when the first instance of the parent group is created. 

Any idea how I can set the error listeners for the imported groups to my error listener?


One idea: as I am using ONE error listener for ALL groups it would be fine for me just to replace the "standard error listener" globally. E.g.

> What about making the constant STGroup.DEFAULT_ERR_MGR a static variable/property? This way a different DefaultErrorManager could be defined. The default would be the current "new ErrorManager()". 


I already suggested this in an earlier post to work around the "missing imported group" issue. But this also seems to be an easy solution for the "cannot intercept error messages from imported groups" issue. I already tried it out and it works fine.


Udo
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20110207/c1a687e8/attachment.html 

From ub at abego-software.de  Mon Feb  7 06:25:46 2011
From: ub at abego-software.de (Udo Borkowski)
Date: Mon, 7 Feb 2011 15:25:46 +0100
Subject: [stringtemplate-interest] [ST4 Beta-4] Retrieving version
	information
Message-ID: <B12CDEE0-CB17-46B9-913D-53F5B6CE1828@abego-software.de>

Hi,

what about providing "version information" to be used in a template? 

I got this idea because I was using an older version of the engine (Beta3 instead of Beta4) without noticing.


One could then use this information e.g. to include a text like

	"(Rendered with StringTemplate 4.0 Beta-4)"

into generated web pages etc.


One way to achieve this without adding "build-in" attributes etc. could be extending the class ST.

E.g. add the following method to the class ST:

	
	public String getVersionText() {
		return "StringTemplate 4.0 Beta-4";
	}


Then one could use

		(Rendered with <{ }.versionText>)

in a template to render

		(Rendered with StringTemplate 4.0 Beta-4)


Udo

	


-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20110207/8264be77/attachment.html 

From parrt at cs.usfca.edu  Mon Feb  7 08:56:45 2011
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon, 7 Feb 2011 08:56:45 -0800
Subject: [stringtemplate-interest] it's 60% of time in
	ObjectModelAdaptor.getProperty()
In-Reply-To: <op.vqiqdivbc4vsc3@frank-black>
References: <DD516DA0-C59E-43F1-A9CC-FC5024AAB5B4@cs.usfca.edu>
	<033701cbc4b5$94f01dc0$bed05940$@pixelminegames.com>
	<528EB850-A4FD-4410-BECD-B281F99FA5FF@cs.usfca.edu>
	<7B3CFEFB-8D9B-43D7-A621-67D27EDB0DD6@cs.usfca.edu>
	<AANLkTinWPyxMR6xhh2xB-MoqDrM13PA-3++=6uHaBhmv@mail.gmail.com>
	<B40B09F6-16A9-4A1A-B4C1-DD844E8B88D2@cs.usfca.edu>
	<op.vqe5iqmac4vsc3@frank-black.lan>
	<34454D9D-EDD3-43D3-9BD3-D73BE627ACBF@cs.usfca.edu>
	<op.vqhmc0gqc4vsc3@frank-black>
	<CF0C58A7-4B08-43FB-AA78-61E3FD0FEDDF@cs.usfca.edu>
	<op.vqh1x5dlc4vsc3@frank-black.lan>
	<C6EAE3CC-7E4A-4461-8E93-C8C976FA186A@cs.usfca.edu>
	<AANLkTinB=vx+KyPxk+=BFbv_r0fWhoev04OCWGZTD8Mg@mail.gmail.com>
	<op.vqiqdivbc4vsc3@frank-black>
Message-ID: <4FE44921-48F9-4572-A55C-A57445A7AE82@cs.usfca.edu>

compiler has to warm up 10,000 execs on that code and you have to count compilation time + additional GC etc...
Ter
On Feb 6, 2011, at 9:47 PM, Johan Stuyts wrote:

>> Oh, I thought you were talking about on the fly compilation. I highly
>> doubt (though I have zero numbers to prove) that there are many
>> scenarios where on the fly compilation is actually faster than dynamic
>> invocation.
> 
> Indeed. You would have to benchmark it to see if the additional complexity  
> and effort is worth it.
> 
> I once ran a simple test where I replaced an Interpreter pattern with code  
> compiled with Janino[1]. The code got called very often, so I figured  
> HotSpot would kick in and convert it to very efficient native code.  
> Unfortunately the results were disappointing. The Interpreter-style code  
> was faster than the generated classes. But this was quite a number of  
> years ago, so things might have changed.
> 
> Johan
> 
> 1. http://docs.codehaus.org/display/JANINO/Home
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest


From ub at abego-software.de  Mon Feb  7 09:37:36 2011
From: ub at abego-software.de (Udo Borkowski)
Date: Mon, 7 Feb 2011 18:37:36 +0100
Subject: [stringtemplate-interest] [ST4] Help needed with recursive
	template to traverse a tree
In-Reply-To: <1C93F4E9-1E76-482F-9A92-8E01368F2554@cs.usfca.edu>
References: <373342FA-CF34-427E-B34E-D5351DB4CD0D@abego-software.de>
	<1C93F4E9-1E76-482F-9A92-8E01368F2554@cs.usfca.edu>
Message-ID: <962402F0-FB29-4A12-A803-1DEEEC4FBEE3@abego-software.de>

> my suggestion is to avoid walking data structures in the template. 

I guess this highly depends on the application.

In my case the model (a tree) is very simple. 

Actually it was very easy to render the tree in "XML style", with proper indentation and everything. I.e. I got an output like this:

<A>
    <B1>
        <C1>...</C1>
        <C2>...</C2>
    </B1>
    <B2>
        <C3>...</C3>
        <C4>...</C4>
    </B2>
</A>

with a simple four line ST4 template.

I thought displaying the tree in a different representation in an even "easier" way, with just the pathes of the nodes, like: 

A
A/B1
A/B1/C1
A/B1/C2
A/B2
A/B2/C3
A/B2/C4

should be possible, too. I am still trying to understand why this seems to be harder to do in ST4 than in other languages I used. 


Udo



On 05.02.2011, at 21:11, Terence Parr wrote:

> my suggestion is to avoid walking data structures in the template.  i've come to conclusion it is most proper for model / controller to do this.
> 
> Ter
> On Feb 1, 2011, at 7:26 AM, Udo Borkowski wrote:
> 
>> I need some help with a recursive template.
>> 
>> Assume you have a tree like this:
>> 
>>       A
>>      / \
>>     /   \
>>   B1     B2
>>  /  \   /  \
>> C1  C2 C3  C4
>> 
>> A node is implemented as a map with a "name" key (String) and a "children" key (list of node objects).
>> 
>> How to get a list of all "pathes" to the nodes (in preorder)?
>> 
>> I.e. I want this output:
>> A
>> A/B1
>> A/B1/C1
>> A/B1/C2
>> A/B2
>> A/B2/C3
>> A/B2/C4
>> 
>> I tried things like the following but run into problems with cycles. E.g. I need to refer to the "outer" prefix and node.name to build the new prefix and assign it to the argument:
>> 
>> allTreeNodePathes(node,prefix) ::= <<
>> ?prefix??node.name?
>> ?node.children:
>>     {child|?allTreeNodePathes(
>>                node=child,
>>                prefix={?prefix??node.name?/})?}?
>> >>
>> 
>> 
>> main(p) ::= <<
>> ?(allTreeNodePathes(node=p,prefix=""))?
>> >>
>> 
>> 
>> Any suggestions?
>> 
>> Udo
>> 
>> _______________________________________________
>> stringtemplate-interest mailing list
>> stringtemplate-interest at antlr.org
>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
> 
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20110207/faa63f39/attachment-0001.html 

From ub at abego-software.de  Mon Feb  7 10:00:30 2011
From: ub at abego-software.de (Udo Borkowski)
Date: Mon, 7 Feb 2011 19:00:30 +0100
Subject: [stringtemplate-interest] [ST4] Help needed with recursive
	template to traverse a tree
In-Reply-To: <373342FA-CF34-427E-B34E-D5351DB4CD0D@abego-software.de>
References: <373342FA-CF34-427E-B34E-D5351DB4CD0D@abego-software.de>
Message-ID: <967117AD-BF1B-4445-B8F5-99441997B884@abego-software.de>

I finally found a solution (requires ST4 Beta-4). 

The following template can be used to write the pathes of all nodes:

allTreeNodePathes(node,prefix="",
			newPrefix={?({?prefix??node.name?/})?}) ::= <<
?prefix??node.name?
?node.children:
    {child|?allTreeNodePathes(
               node=child,
               prefix=newPrefix)?}?
>>

main(p) ::= <<
?allTreeNodePathes(node=p)?
>>


I.e. it will write

A
A/B1
A/B1/C1
A/B1/C2
A/B2
A/B2/C3
A/B2/C4


You will notice the template is very similar to my original attempt that led to cycles. 

To get rid of the cycle I "pre-calculated" the argument value {?prefix??node.name?/}, that led to the cycle.

For the pre-calculation I introduced an extra parameter newPrefix with the evaluated argument value {?prefix??node.name?/} as the default value. Callers will never set values to newPrefix but it will always use its default value. So newPrefix is more a (final) "helper variable" for internal use than a real parameter.

This "trick" may also be helpful in other cases.

Udo



On 01.02.2011, at 16:26, Udo Borkowski wrote:

> I need some help with a recursive template.
> 
> Assume you have a tree like this:
> 
>       A
>      / \
>     /   \
>   B1     B2
>  /  \   /  \
> C1  C2 C3  C4
> 
> A node is implemented as a map with a "name" key (String) and a "children" key (list of node objects).
> 
> How to get a list of all "pathes" to the nodes (in preorder)?
> 
> I.e. I want this output:
> A
> A/B1
> A/B1/C1
> A/B1/C2
> A/B2
> A/B2/C3
> A/B2/C4
> 
> I tried things like the following but run into problems with cycles. E.g. I need to refer to the "outer" prefix and node.name to build the new prefix and assign it to the argument:
> 
> allTreeNodePathes(node,prefix) ::= <<
> ?prefix??node.name?
> ?node.children:
>     {child|?allTreeNodePathes(
>                node=child,
>                prefix={?prefix??node.name?/})?}?
> >>
> 
> 
> main(p) ::= <<
> ?(allTreeNodePathes(node=p,prefix=""))?
> >>
> 
> 
> Any suggestions?
> 
> Udo
> 
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20110207/680eaf0d/attachment.html 

From ub at abego-software.de  Mon Feb  7 14:34:48 2011
From: ub at abego-software.de (Udo Borkowski)
Date: Mon, 7 Feb 2011 23:34:48 +0100
Subject: [stringtemplate-interest] [ST4 Beta-4] NullPointerException in STViz
Message-ID: <A675FD79-552E-4C48-9258-F5AF654F3070@abego-software.de>

STViz may throw an NPE. 

Steps to reproduce:

1) Inspect this group, rendering main():

t1(q1="Some\nText") ::= <<
<q1>
>>

t2(p1) ::= <<
<p1>
>>

main() ::= <<
START-<t1()>-END

START-<t2(p1="Some\nText")>-END
>>


2) select "t2" in the upper left tree

3) select "p1" under "EXPR" in bottom right tree ("template")

4) select "t1" in the upper left tree

--> throws this exception:

Exception in thread "AWT-EventQueue-0" java.lang.NullPointerException
	at org.stringtemplate.v4.gui.STViz$2.valueChanged(STViz.java:100)
	at javax.swing.JTree.fireValueChanged(JTree.java:2820)
	at javax.swing.JTree$TreeSelectionRedirector.valueChanged(JTree.java:3191)
	at javax.swing.tree.DefaultTreeSelectionModel.fireValueChanged(DefaultTreeSelectionModel.java:629)
	at javax.swing.tree.DefaultTreeSelectionModel.clearSelection(DefaultTreeSelectionModel.java:570)
	at javax.swing.JTree.clearSelection(JTree.java:2557)
	at javax.swing.JTree.setModel(JTree.java:833)
	at org.stringtemplate.v4.gui.STViz.updateCurrentST(STViz.java:198)
	at org.stringtemplate.v4.gui.STViz.access$0(STViz.java:193)
	at org.stringtemplate.v4.gui.STViz$1.valueChanged(STViz.java:90)
	at javax.swing.JTree.fireValueChanged(JTree.java:2820)
	at javax.swing.JTree$TreeSelectionRedirector.valueChanged(JTree.java:3191)
	at javax.swing.tree.DefaultTreeSelectionModel.fireValueChanged(DefaultTreeSelectionModel.java:629)
	at javax.swing.tree.DefaultTreeSelectionModel.notifyPathChange(DefaultTreeSelectionModel.java:1078)
	at javax.swing.tree.DefaultTreeSelectionModel.setSelectionPaths(DefaultTreeSelectionModel.java:287)
	at javax.swing.tree.DefaultTreeSelectionModel.setSelectionPath(DefaultTreeSelectionModel.java:170)
	at javax.swing.JTree.setSelectionPath(JTree.java:1598)
	at javax.swing.plaf.basic.BasicTreeUI.selectPathForEvent(BasicTreeUI.java:2311)
	at javax.swing.plaf.basic.BasicTreeUI$Handler.handleSelection(BasicTreeUI.java:3520)
	at javax.swing.plaf.basic.BasicTreeUI$Handler.mousePressed(BasicTreeUI.java:3459)
	at java.awt.Component.processMouseEvent(Component.java:6349)
	at javax.swing.JComponent.processMouseEvent(JComponent.java:3267)
	at java.awt.Component.processEvent(Component.java:6117)
	at java.awt.Container.processEvent(Container.java:2085)
	at java.awt.Component.dispatchEventImpl(Component.java:4714)
	at java.awt.Container.dispatchEventImpl(Container.java:2143)
	at java.awt.Component.dispatchEvent(Component.java:4544)
	at java.awt.LightweightDispatcher.retargetMouseEvent(Container.java:4621)
	at java.awt.LightweightDispatcher.processMouseEvent(Container.java:4279)
	at java.awt.LightweightDispatcher.dispatchEvent(Container.java:4212)
	at java.awt.Container.dispatchEventImpl(Container.java:2129)
	at java.awt.Window.dispatchEventImpl(Window.java:2478)
	at java.awt.Component.dispatchEvent(Component.java:4544)
	at java.awt.EventQueue.dispatchEvent(EventQueue.java:635)
	at java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:296)
	at java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:211)
	at java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:201)
	at java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:196)
	at java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:188)
	at java.awt.EventDispatchThread.run(EventDispatchThread.java:122)

Udo

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20110207/c9326ec6/attachment.html 

From collin.fagan at gmail.com  Mon Feb  7 17:18:23 2011
From: collin.fagan at gmail.com (Collin Fagan)
Date: Mon, 7 Feb 2011 19:18:23 -0600
Subject: [stringtemplate-interest] Strum - ST4 extension project v0.01
	(alpha)
Message-ID: <AANLkTinnqJCedV1bCf_Nbp-gMnGTGaZxR5fSFrBEqT=T@mail.gmail.com>

Hi Everyone,

I was encouraged to start my own "3rd party" project for some of the code I
was writing with ST4.

I am pleased to announce the [S]trng [T]emplate [U]tilities [R]enderers and
[M]odel adapters project, or I call it, "Strum".

Here are the latest files:

https://sourceforge.net/projects/project-strum/files/strum-00.01/

strum-0.01-SNAPSHOT.jar  - library jar
adaptors
    DeclaredFieldsModelAdapter  - access private and protected fields from
ST
    DeclaredMethodsModelAdapter - access private and protected methods from
ST
    PublicMethodModelAdapter - access any public method from ST
    StaticMethodModelAdaptor  - 'add' methods to an object when accessing it
from ST
adaptors.xml
    NodeModelAdapter  - makes working with XML easy (Xpath support)
    NodeRenderer
renderers
    BooleanRenderer
    StaticMethodAttributeRenderer - Create a Renderer from compatible static
methods of a util class.


strum-demos-0.01-SNAPSHOT-source.jar - demo code for how to use the
different parts of strum

strum-sxtt-assembly.zip - sxtt the "Strum Xml Transformation Tool" a command
line utility that lets you transform XML with just a template and no java
code. (like STST but for XML)

For those interested in the source it is available here:
http://project-strum.svn.sourceforge.net/viewvc/project-strum/

It's all alpha officially alpha at least until ST4 is out of beta, then I
can think about a real 1.0.

Let me know what you think and if it's you find anything here useful.

Thanks,

Collin
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20110207/99c31ef4/attachment.html 

From jab.antlr at species.org  Tue Feb  8 19:59:23 2011
From: jab.antlr at species.org (James Briant)
Date: Tue, 8 Feb 2011 19:59:23 -0800
Subject: [stringtemplate-interest] C# 3.2 Source Code
Message-ID: <AANLkTimv5YhUhRYFBHLTPiB5auz6jt-zqdeTvwoxPhbD@mail.gmail.com>

How to get it? I see the link to fisheye, but how do I download off that?
Alternatively, can we get a source download .zip file like the java one. Or
better yet, how about githug?
Thanks,

Jamie
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20110208/9bf93a8a/attachment.html 

From ub at abego-software.de  Wed Feb  9 00:45:16 2011
From: ub at abego-software.de (Udo Borkowski)
Date: Wed, 9 Feb 2011 09:45:16 +0100
Subject: [stringtemplate-interest] [ST4 Beta-4] Extra import in Java sources
Message-ID: <B380840C-7DBE-4203-B469-425A87D140B9@abego-software.de>

Hi,

there is an extra import in Interpreter.java:
	import org.antlr.stringtemplate.StringTemplateWriter;


Talking about extra imports: Eclipse writes warnings for these imports:

GroupLexer.java, GroupParser.java
	import java.util.Stack;
	import java.util.List;
	import java.util.ArrayList;

 STParser.java	
	import java.util.Stack;

These imports are generated by ANTLR. If it is hard to generate these imports only when they are needed I suggest ANTLR will generate instead of

	import java.util.Stack;
	import java.util.List;
	import java.util.ArrayList;

just this one wildcard import:

	import java.util.*

This should make the warnings go away.


Udo



From collin.fagan at gmail.com  Wed Feb  9 06:08:39 2011
From: collin.fagan at gmail.com (Collin Fagan)
Date: Wed, 9 Feb 2011 08:08:39 -0600
Subject: [stringtemplate-interest] Maven and ST4?
Message-ID: <AANLkTinEiS4Bc62bjMxH1JU9yk+LCFcfmExWVs5ZXxYc@mail.gmail.com>

Hi,

At one time there was a maven build of ST3. Is there a plan for a maven
build of ST4? Also when should one expect to see ST4 to show up in the main
repository?

Thanks,

Collin
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20110209/3bf29902/attachment.html 

From parrt at antlr.org  Wed Feb  9 17:00:02 2011
From: parrt at antlr.org (Terence Parr)
Date: Wed, 9 Feb 2011 17:00:02 -0800
Subject: [stringtemplate-interest] bytecode histogram for Oliver's email
	benchmark
Message-ID: <8C2F2614-B252-415F-952D-10FC213908FD@antlr.org>

the relative num is important not the value.

38810990 load_prop
33457750 write
29442820 load_str
26766200 load_local
17398030 newline
9368170 write_opt
9368170 store_option
9368170 options
4014930 brf
1338310 null
1338310 not
1338310 new
1338310 map
1338310 br
0 zip_map
0 trunc
0 true
0 trim
0 tostr
0 super_new_box_args
0 super_new
0 strlen
0 strip
0 store_arg
0 rot_map
0 reverse
0 rest
0 pop
0 or
0 noop
0 new_ind
0 new_box_args
0 load_prop_ind
0 load_attr
0 list
0 length
0 last
0 indent
0 first
0 false
0 dedent
0 args
0 and
0 add


From parrt at cs.usfca.edu  Wed Feb  9 17:47:43 2011
From: parrt at cs.usfca.edu (Terence Parr)
Date: Wed, 9 Feb 2011 17:47:43 -0800
Subject: [stringtemplate-interest] Maven and ST4?
In-Reply-To: <AANLkTinEiS4Bc62bjMxH1JU9yk+LCFcfmExWVs5ZXxYc@mail.gmail.com>
References: <AANLkTinEiS4Bc62bjMxH1JU9yk+LCFcfmExWVs5ZXxYc@mail.gmail.com>
Message-ID: <888A613A-23A7-469E-83AD-A9C6A6B2BA2F@cs.usfca.edu>

I'm using ANT this time because it's so much simpler.

 do you mean and the perforce depot or on the web?

http://stringtemplate.org/depot/ST4

Ter 
On Feb 9, 2011, at 6:08 AM, Collin Fagan wrote:

> Hi,
> 
> At one time there was a maven build of ST3. Is there a plan for a maven build of ST4? Also when should one expect to see ST4 to show up in the main repository? 
> 
> Thanks,
> 
> Collin
> 
>  
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest


From parrt at cs.usfca.edu  Wed Feb  9 17:49:06 2011
From: parrt at cs.usfca.edu (Terence Parr)
Date: Wed, 9 Feb 2011 17:49:06 -0800
Subject: [stringtemplate-interest] [ST4 Beta-4] Extra import in Java
	sources
In-Reply-To: <B380840C-7DBE-4203-B469-425A87D140B9@abego-software.de>
References: <B380840C-7DBE-4203-B469-425A87D140B9@abego-software.de>
Message-ID: <A9AB3767-95EB-40CC-9F21-4721D19F6AA0@cs.usfca.edu>


On Feb 9, 2011, at 12:45 AM, Udo Borkowski wrote:

> Hi,
> 
> there is an extra import in Interpreter.java:
> 	import org.antlr.stringtemplate.StringTemplateWriter;
> 

  thanks. I think I quickly removed it from my version but it might have gotten into the beta release.

> 
> Talking about extra imports: Eclipse writes warnings for these imports:
> 
> GroupLexer.java, GroupParser.java
> 	import java.util.Stack;
> 	import java.util.List;
> 	import java.util.ArrayList;
> 
> STParser.java	
> 	import java.util.Stack;
> 
> These imports are generated by ANTLR. If it is hard to generate these imports only when they are needed I suggest ANTLR will generate instead of
> 
> 	import java.util.Stack;
> 	import java.util.List;
> 	import java.util.ArrayList;
> 
> just this one wildcard import:
> 
> 	import java.util.*
> 
> This should make the warnings go away.

Unfortunately it doesn't because there is a conflict with BitSet.
Ter

From parrt at cs.usfca.edu  Wed Feb  9 17:50:00 2011
From: parrt at cs.usfca.edu (Terence Parr)
Date: Wed, 9 Feb 2011 17:50:00 -0800
Subject: [stringtemplate-interest] C# 3.2 Source Code
In-Reply-To: <AANLkTimv5YhUhRYFBHLTPiB5auz6jt-zqdeTvwoxPhbD@mail.gmail.com>
References: <AANLkTimv5YhUhRYFBHLTPiB5auz6jt-zqdeTvwoxPhbD@mail.gmail.com>
Message-ID: <2919A3AA-E75E-4A0C-A1E7-0362D005D0C0@cs.usfca.edu>

well,I see this link from the download page

http://www.stringtemplate.org/download/StringTemplate.Net.v3.0.1.src.zip

but are you looking for Sam Harwell's latest stuff?

Ter

On Feb 8, 2011, at 7:59 PM, James Briant wrote:

> How to get it? I see the link to fisheye, but how do I download off that? Alternatively, can we get a source download .zip file like the java one. Or better yet, how about githug?
> Thanks,
> 
> Jamie
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest


From zhaotq at gmail.com  Wed Feb  9 17:58:28 2011
From: zhaotq at gmail.com (Cliff Zhao)
Date: Wed, 9 Feb 2011 20:58:28 -0500
Subject: [stringtemplate-interest] Maven and ST4?
In-Reply-To: <888A613A-23A7-469E-83AD-A9C6A6B2BA2F@cs.usfca.edu>
References: <AANLkTinEiS4Bc62bjMxH1JU9yk+LCFcfmExWVs5ZXxYc@mail.gmail.com>
	<888A613A-23A7-469E-83AD-A9C6A6B2BA2F@cs.usfca.edu>
Message-ID: <AANLkTi=kGudvu3KuVczQSC98pRFZdt3ZuS=MUqbFT99j@mail.gmail.com>

There are a lot people and companies using maven, ivy, gradle, sbt, etc.
build tool. To make things easy for the people using those tools is to put
ST4 in a public maven repository.

Cliff

On Wed, Feb 9, 2011 at 8:47 PM, Terence Parr <parrt at cs.usfca.edu> wrote:

> I'm using ANT this time because it's so much simpler.
>
>  do you mean and the perforce depot or on the web?
>
> http://stringtemplate.org/depot/ST4
>
> Ter
> On Feb 9, 2011, at 6:08 AM, Collin Fagan wrote:
>
> > Hi,
> >
> > At one time there was a maven build of ST3. Is there a plan for a maven
> build of ST4? Also when should one expect to see ST4 to show up in the main
> repository?
> >
> > Thanks,
> >
> > Collin
> >
> >
> > _______________________________________________
> > stringtemplate-interest mailing list
> > stringtemplate-interest at antlr.org
> > http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20110209/5cbb4b87/attachment.html 

From parrt at cs.usfca.edu  Wed Feb  9 21:13:43 2011
From: parrt at cs.usfca.edu (Terence Parr)
Date: Wed, 9 Feb 2011 21:13:43 -0800
Subject: [stringtemplate-interest] Maven and ST4?
In-Reply-To: <AANLkTi=kGudvu3KuVczQSC98pRFZdt3ZuS=MUqbFT99j@mail.gmail.com>
References: <AANLkTinEiS4Bc62bjMxH1JU9yk+LCFcfmExWVs5ZXxYc@mail.gmail.com>
	<888A613A-23A7-469E-83AD-A9C6A6B2BA2F@cs.usfca.edu>
	<AANLkTi=kGudvu3KuVczQSC98pRFZdt3ZuS=MUqbFT99j@mail.gmail.com>
Message-ID: <B9A5B4E4-9406-4329-8D81-F3078154B2CF@cs.usfca.edu>

Hi. do you mean the maven mojo (equiv of ANT task) or the project itself?
Ter
On Feb 9, 2011, at 5:58 PM, Cliff Zhao wrote:

> There are a lot people and companies using maven, ivy, gradle, sbt, etc. build tool. To make things easy for the people using those tools is to put ST4 in a public maven repository.
> 
> Cliff  
> 
> On Wed, Feb 9, 2011 at 8:47 PM, Terence Parr <parrt at cs.usfca.edu> wrote:
> I'm using ANT this time because it's so much simpler.
> 
>  do you mean and the perforce depot or on the web?
> 
> http://stringtemplate.org/depot/ST4
> 
> Ter
> On Feb 9, 2011, at 6:08 AM, Collin Fagan wrote:
> 
> > Hi,
> >
> > At one time there was a maven build of ST3. Is there a plan for a maven build of ST4? Also when should one expect to see ST4 to show up in the main repository?
> >
> > Thanks,
> >
> > Collin
> >
> >
> > _______________________________________________
> > stringtemplate-interest mailing list
> > stringtemplate-interest at antlr.org
> > http://www.antlr.org/mailman/listinfo/stringtemplate-interest
> 
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
> 
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20110209/98cffbd4/attachment.html 

From collin.fagan at gmail.com  Thu Feb 10 04:28:51 2011
From: collin.fagan at gmail.com (Collin Fagan)
Date: Thu, 10 Feb 2011 06:28:51 -0600
Subject: [stringtemplate-interest] Maven and ST4?
In-Reply-To: <B9A5B4E4-9406-4329-8D81-F3078154B2CF@cs.usfca.edu>
References: <AANLkTinEiS4Bc62bjMxH1JU9yk+LCFcfmExWVs5ZXxYc@mail.gmail.com>
	<888A613A-23A7-469E-83AD-A9C6A6B2BA2F@cs.usfca.edu>
	<AANLkTi=kGudvu3KuVczQSC98pRFZdt3ZuS=MUqbFT99j@mail.gmail.com>
	<B9A5B4E4-9406-4329-8D81-F3078154B2CF@cs.usfca.edu>
Message-ID: <AANLkTin2u3dJbYR_unfx3CH-YXbBz5HRz_Usk3GeEBnx@mail.gmail.com>

Hi,

To clarify:

My first question was about the source code. I understand if you are not
comfortable with Maven and wish to use Ant as your build tool for ST. I was
just hoping to experiment with some tools that are simple to configure in
Maven and run them against the ST code base. It's not a big deal.

My second question had to do with those of us who do use Maven (or other
dependency management tools). Right now one can find ST3 available in the
main Maven repository:
http://repo1.maven.org/maven2/org/antlr/stringtemplate/3.2.1/stringtemplate-3.2.1.jar.
As an example my strum project has a reference in it's POM file to ST4
beta 5
http://project-strum.svn.sourceforge.net/viewvc/project-strum/trunk/strum-project/strum/pom.xml?revision=8&view=markup.
Since this version is not in the public repository Maven pukes and I
have
to manually install it locally, which would not be so bad, except that
anyone who downloads my code from sourceforge needs to do the same thing. My
question was quickly asking if you had a timetable for deploying ST4 to the
main Maven repo and if Betas would be installed or just the first release
onward. I'd also like to start using ST4 at work which also uses Maven as
it's build tool.

Thanks,

Collin

On Wed, Feb 9, 2011 at 11:13 PM, Terence Parr <parrt at cs.usfca.edu> wrote:

> Hi. do you mean the maven mojo (equiv of ANT task) or the project itself?
> Ter
>
> On Feb 9, 2011, at 5:58 PM, Cliff Zhao wrote:
>
> There are a lot people and companies using maven, ivy, gradle, sbt, etc.
> build tool. To make things easy for the people using those tools is to put
> ST4 in a public maven repository.
>
> Cliff
>
> On Wed, Feb 9, 2011 at 8:47 PM, Terence Parr <parrt at cs.usfca.edu> wrote:
>
>> I'm using ANT this time because it's so much simpler.
>>
>>  do you mean and the perforce depot or on the web?
>>
>> http://stringtemplate.org/depot/ST4
>>
>> Ter
>> On Feb 9, 2011, at 6:08 AM, Collin Fagan wrote:
>>
>> > Hi,
>> >
>> > At one time there was a maven build of ST3. Is there a plan for a maven
>> build of ST4? Also when should one expect to see ST4 to show up in the main
>> repository?
>> >
>> > Thanks,
>> >
>> > Collin
>> >
>> >
>> > _______________________________________________
>> > stringtemplate-interest mailing list
>> > stringtemplate-interest at antlr.org
>> > http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>>
>> _______________________________________________
>> stringtemplate-interest mailing list
>> stringtemplate-interest at antlr.org
>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>>
>
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>
>
>
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20110210/e5c039dd/attachment-0001.html 

From jimi at temporal-wave.com  Thu Feb 10 07:58:31 2011
From: jimi at temporal-wave.com (Jim Idle)
Date: Thu, 10 Feb 2011 07:58:31 -0800
Subject: [stringtemplate-interest] Maven and ST4?
In-Reply-To: <B9A5B4E4-9406-4329-8D81-F3078154B2CF@cs.usfca.edu>
References: <AANLkTinEiS4Bc62bjMxH1JU9yk+LCFcfmExWVs5ZXxYc@mail.gmail.com>
	<888A613A-23A7-469E-83AD-A9C6A6B2BA2F@cs.usfca.edu>	<AANLkTi=kGudvu3KuVczQSC98pRFZdt3ZuS=MUqbFT99j@mail.gmail.com>
	<B9A5B4E4-9406-4329-8D81-F3078154B2CF@cs.usfca.edu>
Message-ID: <e9e6c3f4876e551213a2f5822388ba6d@mail.gmail.com>

I will make the maven build happen when Ter is finished playing but there is
little point just yet as you can place the jar in your local repository.



However, ant being simpler than maven is a matter of opinion Ter ;-) I
always find ant scripts to be a complete mess myself!



Jim



*From:* stringtemplate-interest-bounces at antlr.org [mailto:
stringtemplate-interest-bounces at antlr.org] *On Behalf Of *Terence Parr
*Sent:* Wednesday, February 09, 2011 9:14 PM
*To:* stringtemplate-interest List
*Subject:* Re: [stringtemplate-interest] Maven and ST4?



Hi. do you mean the maven mojo (equiv of ANT task) or the project itself?

Ter

On Feb 9, 2011, at 5:58 PM, Cliff Zhao wrote:



There are a lot people and companies using maven, ivy, gradle, sbt, etc.
build tool. To make things easy for the people using those tools is to put
ST4 in a public maven repository.



Cliff

On Wed, Feb 9, 2011 at 8:47 PM, Terence Parr <parrt at cs.usfca.edu> wrote:

I'm using ANT this time because it's so much simpler.

 do you mean and the perforce depot or on the web?

http://stringtemplate.org/depot/ST4

Ter
On Feb 9, 2011, at 6:08 AM, Collin Fagan wrote:

> Hi,
>
> At one time there was a maven build of ST3. Is there a plan for a maven
build of ST4? Also when should one expect to see ST4 to show up in the main
repository?
>
> Thanks,
>
> Collin
>
>
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest

_______________________________________________
stringtemplate-interest mailing list
stringtemplate-interest at antlr.org
http://www.antlr.org/mailman/listinfo/stringtemplate-interest



_______________________________________________
stringtemplate-interest mailing list
stringtemplate-interest at antlr.org
http://www.antlr.org/mailman/listinfo/stringtemplate-interest
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20110210/a71108ac/attachment.html 

From parrt at cs.usfca.edu  Thu Feb 10 11:00:11 2011
From: parrt at cs.usfca.edu (Terence Parr)
Date: Thu, 10 Feb 2011 11:00:11 -0800
Subject: [stringtemplate-interest] Maven and ST4?
In-Reply-To: <e9e6c3f4876e551213a2f5822388ba6d@mail.gmail.com>
References: <AANLkTinEiS4Bc62bjMxH1JU9yk+LCFcfmExWVs5ZXxYc@mail.gmail.com>
	<888A613A-23A7-469E-83AD-A9C6A6B2BA2F@cs.usfca.edu>	<AANLkTi=kGudvu3KuVczQSC98pRFZdt3ZuS=MUqbFT99j@mail.gmail.com>
	<B9A5B4E4-9406-4329-8D81-F3078154B2CF@cs.usfca.edu>
	<e9e6c3f4876e551213a2f5822388ba6d@mail.gmail.com>
Message-ID: <2D4D7844-31F0-42E0-ABCE-AB4567162D9D@cs.usfca.edu>


On Feb 10, 2011, at 7:58 AM, Jim Idle wrote:

> I will make the maven build happen when Ter is finished playing but there is little point just yet as you can place the jar in your local repository.

kewl.

>  
> However, ant being simpler than maven is a matter of opinion Ter ;-) I always find ant scripts to be a complete mess myself!
> 

working on Humant but it's way simpler to do a release. i simply have ant build the files and i push :)

Ter
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20110210/1e5ae6a7/attachment.html 

From parrt at cs.usfca.edu  Thu Feb 10 12:03:37 2011
From: parrt at cs.usfca.edu (Terence Parr)
Date: Thu, 10 Feb 2011 12:03:37 -0800
Subject: [stringtemplate-interest] [ST4 Beta-4] NullPointerException in
	STViz
In-Reply-To: <A675FD79-552E-4C48-9258-F5AF654F3070@abego-software.de>
References: <A675FD79-552E-4C48-9258-F5AF654F3070@abego-software.de>
Message-ID: <E6A73B5C-4ABE-4EEE-B1DD-3294E2F39E82@cs.usfca.edu>

fixed. STViz tried to highlight AST pane even when we switched ASTs.
thanks!
Ter
On Feb 7, 2011, at 2:34 PM, Udo Borkowski wrote:

> STViz may throw an NPE. 
> 
> Steps to reproduce:
> 
> 1) Inspect this group, rendering main():
> 
> t1(q1="Some\nText") ::= <<
> <q1>
> >>
> 
> t2(p1) ::= <<
> <p1>
> >>
> 
> main() ::= <<
> START-<t1()>-END
> 
> START-<t2(p1="Some\nText")>-END
> >>
> 
> 
> 2) select "t2" in the upper left tree
> 
> 3) select "p1" under "EXPR" in bottom right tree ("template")
> 
> 4) select "t1" in the upper left tree
> 
> --> throws this exception:
> 
> Exception in thread "AWT-EventQueue-0" java.lang.NullPointerException
> 	at org.stringtemplate.v4.gui.STViz$2.valueChanged(STViz.java:100)
> 	at javax.swing.JTree.fireValueChanged(JTree.java:2820)
> 	at javax.swing.JTree$TreeSelectionRedirector.valueChanged(JTree.java:3191)
> 	at javax.swing.tree.DefaultTreeSelectionModel.fireValueChanged(DefaultTreeSelectionModel.java:629)
> 	at javax.swing.tree.DefaultTreeSelectionModel.clearSelection(DefaultTreeSelectionModel.java:570)
> 	at javax.swing.JTree.clearSelection(JTree.java:2557)
> 	at javax.swing.JTree.setModel(JTree.java:833)
> 	at org.stringtemplate.v4.gui.STViz.updateCurrentST(STViz.java:198)
> 	at org.stringtemplate.v4.gui.STViz.access$0(STViz.java:193)
> 	at org.stringtemplate.v4.gui.STViz$1.valueChanged(STViz.java:90)
> 	at javax.swing.JTree.fireValueChanged(JTree.java:2820)
> 	at javax.swing.JTree$TreeSelectionRedirector.valueChanged(JTree.java:3191)
> 	at javax.swing.tree.DefaultTreeSelectionModel.fireValueChanged(DefaultTreeSelectionModel.java:629)
> 	at javax.swing.tree.DefaultTreeSelectionModel.notifyPathChange(DefaultTreeSelectionModel.java:1078)
> 	at javax.swing.tree.DefaultTreeSelectionModel.setSelectionPaths(DefaultTreeSelectionModel.java:287)
> 	at javax.swing.tree.DefaultTreeSelectionModel.setSelectionPath(DefaultTreeSelectionModel.java:170)
> 	at javax.swing.JTree.setSelectionPath(JTree.java:1598)
> 	at javax.swing.plaf.basic.BasicTreeUI.selectPathForEvent(BasicTreeUI.java:2311)
> 	at javax.swing.plaf.basic.BasicTreeUI$Handler.handleSelection(BasicTreeUI.java:3520)
> 	at javax.swing.plaf.basic.BasicTreeUI$Handler.mousePressed(BasicTreeUI.java:3459)
> 	at java.awt.Component.processMouseEvent(Component.java:6349)
> 	at javax.swing.JComponent.processMouseEvent(JComponent.java:3267)
> 	at java.awt.Component.processEvent(Component.java:6117)
> 	at java.awt.Container.processEvent(Container.java:2085)
> 	at java.awt.Component.dispatchEventImpl(Component.java:4714)
> 	at java.awt.Container.dispatchEventImpl(Container.java:2143)
> 	at java.awt.Component.dispatchEvent(Component.java:4544)
> 	at java.awt.LightweightDispatcher.retargetMouseEvent(Container.java:4621)
> 	at java.awt.LightweightDispatcher.processMouseEvent(Container.java:4279)
> 	at java.awt.LightweightDispatcher.dispatchEvent(Container.java:4212)
> 	at java.awt.Container.dispatchEventImpl(Container.java:2129)
> 	at java.awt.Window.dispatchEventImpl(Window.java:2478)
> 	at java.awt.Component.dispatchEvent(Component.java:4544)
> 	at java.awt.EventQueue.dispatchEvent(EventQueue.java:635)
> 	at java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:296)
> 	at java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:211)
> 	at java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:201)
> 	at java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:196)
> 	at java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:188)
> 	at java.awt.EventDispatchThread.run(EventDispatchThread.java:122)
> 
> Udo
> 
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20110210/92279c92/attachment.html 

From parrt at cs.usfca.edu  Thu Feb 10 12:32:51 2011
From: parrt at cs.usfca.edu (Terence Parr)
Date: Thu, 10 Feb 2011 12:32:51 -0800
Subject: [stringtemplate-interest] null vs empty
Message-ID: <0261C4F4-5183-4CC1-A3EE-6332B16DAF05@cs.usfca.edu>

Hi.  http://bit.ly/e180eE shows that I think ST 3.2.1 sent null vs empty vs missing in a "bad" direction.  ST v4 behaves now that missing/null are same thing but different from empty. empty is {} or "" of <if(false)><endif> whereas missing is "no such attribute".  The new rules are

* null in a list ignored in iteration
* no separator generated for null values unless null=... option used
* null values not counted for i, i0
* template applied to missing or null attr yields ""
* empty values in iteration aren't ignored.

So, with 

st.add("values", new String[] {"x", "", "y"});

the template

<values; separator=" ">

yields: "x  y" with 2 not 1 space.  Empty "" is still there.

Same for this:

<values:{v|<if(v)>x<endif>}; separator=" ">

with 

st.add("values", new boolean[] {true, false, true});

yields "x  x".

See TestNullAndEmptyValues:

http://bit.ly/hZENBc

Sam reminded me this different than in v3.2.1 (though not < 3.2.1). Thought I'd point this out.

Ter

From parrt at cs.usfca.edu  Thu Feb 10 15:51:22 2011
From: parrt at cs.usfca.edu (Terence Parr)
Date: Thu, 10 Feb 2011 15:51:22 -0800
Subject: [stringtemplate-interest] Conditionally included subtemplates?
In-Reply-To: <30183432.451296973562009.JavaMail.root@mail.deventm-group.org>
References: <30183432.451296973562009.JavaMail.root@mail.deventm-group.org>
Message-ID: <71E0F3AE-043E-4FC1-A8EF-73CEB2B742B2@cs.usfca.edu>

Yeah, it throws an exception for missing properties. a quirky thing but my view of the past was that a missing method or field was a programming error; in ST v4 coming soon to a theater near you, this does not generate an exception
Ter
On Feb 5, 2011, at 10:26 PM, erwin.mueller at deventm.org wrote:

> Hello,
> 
>    I'm a new user of StringTemplate and so far I have manage my simple
> templates w/o any problems. But I wonder in a template like [1] I understood the
> documentation that the subtemplate will be included if the attribute ``address''
> exists. Why do I get then NoSuchFieldException [2]? My classes are like in [3]
> where ``httpd'' is an object of classes implementing the ``HttpdDirective''
> interface.
> 
>    I understood the documentation ``IF actions test the presence or absence of
> an attribute unless the object is a Boolean/bool, true".
> For example,"$if(!member)$...$endif$".'' Presence or absence is for me whether
> the object have the attribute or not. What is the documentation understands as
> ``presence'' or ``absence''?
> 
> Kind regards, Erwin.
> 
> [1]
> domains(httpd) ::= <<
> \<!-- domains --\>
> <httpd.directives:{<if(it.address)>{NameVirtualHost <it.address><\n>}<endif>}>
>>> 
> 
> [2]
> Class
> com.globalscalingsoftware.sscontrol.cli.internal.application.services.httpd.
> directives.SetupJkWorkerDirective$$EnhancerByGuice$$f9c51395 has no such
> attribute: address in template context [httpd_default domains anonymous]
> java.lang.NoSuchFieldException: address
> 
> [3]
> public interface HttpdDirective {
> 
>    String getTemplateName();
> 
>    HttpdDirective setProperty(String name, Object value);
> 
> }
> 
> public class DomainDirective implements HttpdDirective {
> 
>    public String getAddress() {
>        return address;
>    }
> 
> }
> 
> public class SetupJkWorkerDirective implements HttpdDirective {
>    // no getAddress() method
> }
> -- 
> Erwin Mueller, erwin.mueller at deventm.org
> http://www.global-scaling-institute.de/
> http://www.deventm.org
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest


From parrt at cs.usfca.edu  Thu Feb 10 15:55:25 2011
From: parrt at cs.usfca.edu (Terence Parr)
Date: Thu, 10 Feb 2011 15:55:25 -0800
Subject: [stringtemplate-interest] [ST4 Beta-4] Retrieving version
	information
In-Reply-To: <B12CDEE0-CB17-46B9-913D-53F5B6CE1828@abego-software.de>
References: <B12CDEE0-CB17-46B9-913D-53F5B6CE1828@abego-software.de>
Message-ID: <B8FF2939-E456-41E4-A968-E0E09430727E@cs.usfca.edu>

Hi Udo,

Seems like the more common use case would be to test the version number and do something different to  avoidable or use a feature only if a particular version is available. but we can't test values in the template so it would have to be a Boolean set  for the various versions; might be hard to add one for every random version we make.

<if(v4_0b1)>...<endif>

Hmm... also I would have to figure out how to make ANT alter my software automatically to include the right version string; it would have to know about perforce version control and so on. setting this by hand would be a problem as it would get out of sync.

Ter
On Feb 7, 2011, at 6:25 AM, Udo Borkowski wrote:

> Hi,
> 
> what about providing "version information" to be used in a template? 
> 
> I got this idea because I was using an older version of the engine (Beta3 instead of Beta4) without noticing.
> 
> 
> One could then use this information e.g. to include a text like
> 
> 	"(Rendered with StringTemplate 4.0 Beta-4)"
> 
> into generated web pages etc.
> 
> 
> One way to achieve this without adding "build-in" attributes etc. could be extending the class ST.
> 
> E.g. add the following method to the class ST:
> 
> 	
> 	public String getVersionText() {
> 		return "StringTemplate 4.0 Beta-4";
> 	}
> 
> 
> Then one could use
> 
> 		(Rendered with <{ }.versionText>)
> 
> in a template to render
> 
> 		(Rendered with StringTemplate 4.0 Beta-4)
> 
> 
> Udo
> 
> 	
> 
> 
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest


From parrt at cs.usfca.edu  Thu Feb 10 15:58:57 2011
From: parrt at cs.usfca.edu (Terence Parr)
Date: Thu, 10 Feb 2011 15:58:57 -0800
Subject: [stringtemplate-interest] Strum - ST4 extension project v0.01
	(alpha)
In-Reply-To: <AANLkTinnqJCedV1bCf_Nbp-gMnGTGaZxR5fSFrBEqT=T@mail.gmail.com>
References: <AANLkTinnqJCedV1bCf_Nbp-gMnGTGaZxR5fSFrBEqT=T@mail.gmail.com>
Message-ID: <103FF020-6A38-4B4A-94D7-2F1ADB45AF75@cs.usfca.edu>

Hi Collin,This all looks pretty cool. I added it to the filesharing area

http://www.stringtemplate.org/share/list

Ter
On Feb 7, 2011, at 5:18 PM, Collin Fagan wrote:

> Hi Everyone,
> 
> I was encouraged to start my own "3rd party" project for some of the code I was writing with ST4. 
> 
> I am pleased to announce the [S]trng [T]emplate [U]tilities [R]enderers and [M]odel adapters project, or I call it, "Strum". 
> 
> Here are the latest files:
> 
> https://sourceforge.net/projects/project-strum/files/strum-00.01/
> 
> strum-0.01-SNAPSHOT.jar  - library jar
> adaptors 
>     DeclaredFieldsModelAdapter  - access private and protected fields from ST
>     DeclaredMethodsModelAdapter - access private and protected methods from ST
>     PublicMethodModelAdapter - access any public method from ST
>     StaticMethodModelAdaptor  - 'add' methods to an object when accessing it from ST
> adaptors.xml 
>     NodeModelAdapter  - makes working with XML easy (Xpath support)
>     NodeRenderer  
> renderers 
>     BooleanRenderer 
>     StaticMethodAttributeRenderer - Create a Renderer from compatible static methods of a util class. 
> 
>         
> strum-demos-0.01-SNAPSHOT-source.jar - demo code for how to use the different parts of strum
> 
> strum-sxtt-assembly.zip - sxtt the "Strum Xml Transformation Tool" a command line utility that lets you transform XML with just a template and no java code. (like STST but for XML)
> 
> For those interested in the source it is available here: http://project-strum.svn.sourceforge.net/viewvc/project-strum/
> 
> It's all alpha officially alpha at least until ST4 is out of beta, then I can think about a real 1.0.
> 
> Let me know what you think and if it's you find anything here useful. 
> 
> Thanks,
> 
> Collin
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest


From collin.fagan at gmail.com  Thu Feb 10 16:02:23 2011
From: collin.fagan at gmail.com (Collin Fagan)
Date: Thu, 10 Feb 2011 18:02:23 -0600
Subject: [stringtemplate-interest] [ST4 Beta-4] Retrieving version
	information
In-Reply-To: <B8FF2939-E456-41E4-A968-E0E09430727E@cs.usfca.edu>
References: <B12CDEE0-CB17-46B9-913D-53F5B6CE1828@abego-software.de>
	<B8FF2939-E456-41E4-A968-E0E09430727E@cs.usfca.edu>
Message-ID: <AANLkTimDkBepr1n52VPkbQ6byY-VhT32u+rDphL8ht8b@mail.gmail.com>

Maven makes this easy. ...,*ducks*

On Feb 10, 2011 5:55 PM, "Terence Parr" <parrt at cs.usfca.edu> wrote:

Hi Udo,

Seems like the more common use case would be to test the version number and
do something different to  avoidable or use a feature only if a particular
version is available. but we can't test values in the template so it would
have to be a Boolean set  for the various versions; might be hard to add one
for every random version we make.

<if(v4_0b1)>...<endif>

Hmm... also I would have to figure out how to make ANT alter my software
automatically to include the right version string; it would have to know
about perforce version control and so on. setting this by hand would be a
problem as it would get out of sync.

Ter

On Feb 7, 2011, at 6:25 AM, Udo Borkowski wrote:

> Hi,
>
> what about providing "version informati...
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest

_______________________________________________
stringtemplate-interest mailing list
stringtemplate-interest at antlr.org
http://www.antlr.org/mailman/listinfo/stringtemplate-interest
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20110210/8ec0ab6b/attachment.html 

From collin.fagan at gmail.com  Thu Feb 10 16:06:37 2011
From: collin.fagan at gmail.com (Collin Fagan)
Date: Thu, 10 Feb 2011 18:06:37 -0600
Subject: [stringtemplate-interest] Strum - ST4 extension project v0.01
	(alpha)
In-Reply-To: <103FF020-6A38-4B4A-94D7-2F1ADB45AF75@cs.usfca.edu>
References: <AANLkTinnqJCedV1bCf_Nbp-gMnGTGaZxR5fSFrBEqT=T@mail.gmail.com>
	<103FF020-6A38-4B4A-94D7-2F1ADB45AF75@cs.usfca.edu>
Message-ID: <AANLkTinpj7VdojH5AYpyo9cdjupdSrsN9mFSARfUAUQm@mail.gmail.com>

Thank you, oh and I noticed that you added write methods to ST in ST4 that
take files, thank you for that too.

On Feb 10, 2011 5:59 PM, "Terence Parr" <parrt at cs.usfca.edu> wrote:

Hi Collin,This all looks pretty cool. I added it to the filesharing area

http://www.stringtemplate.org/share/list

Ter

On Feb 7, 2011, at 5:18 PM, Collin Fagan wrote:

> Hi Everyone,
>
> I was encouraged to start my ow...

> _______________________________________________
> stringtemplate-interest mailing list
> stringtem...
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20110210/c696957c/attachment.html 

From parrt at cs.usfca.edu  Thu Feb 10 16:08:26 2011
From: parrt at cs.usfca.edu (Terence Parr)
Date: Thu, 10 Feb 2011 16:08:26 -0800
Subject: [stringtemplate-interest] Strum - ST4 extension project v0.01
	(alpha)
In-Reply-To: <AANLkTinpj7VdojH5AYpyo9cdjupdSrsN9mFSARfUAUQm@mail.gmail.com>
References: <AANLkTinnqJCedV1bCf_Nbp-gMnGTGaZxR5fSFrBEqT=T@mail.gmail.com>
	<103FF020-6A38-4B4A-94D7-2F1ADB45AF75@cs.usfca.edu>
	<AANLkTinpj7VdojH5AYpyo9cdjupdSrsN9mFSARfUAUQm@mail.gmail.com>
Message-ID: <A4FB24BD-2600-4F07-80F4-BF4D8443923C@cs.usfca.edu>


On Feb 10, 2011, at 4:06 PM, Collin Fagan wrote:

> Thank you, oh and I noticed that you added write methods to ST in ST4 that take files, thank you for that too.
> 

I'm customer driven unless it violates the principles of simplicity and purity ;)

Ter

From parrt at cs.usfca.edu  Thu Feb 10 16:28:27 2011
From: parrt at cs.usfca.edu (Terence Parr)
Date: Thu, 10 Feb 2011 16:28:27 -0800
Subject: [stringtemplate-interest] [ST4 Beta-4] Cannot intercept error
	messages from imported groups
In-Reply-To: <2894B9F8-7781-4324-8E50-0D0FAE40BBC8@abego-software.de>
References: <2894B9F8-7781-4324-8E50-0D0FAE40BBC8@abego-software.de>
Message-ID: <094A2F40-163F-4523-A65B-2978FFC8CEBA@cs.usfca.edu>

Hi Udo, can we add an ErrorManager arg to the STGroup* ctors?
Ter
On Feb 7, 2011, at 3:12 AM, Udo Borkowski wrote:

> Hi,
> 
> I am using my own ErrorListener and set it when a new group is created. 
> 
> With Beta-4 it is now possible to notice when an imported group file does not exist.
> 
> However I do not notice when the imported group is buggy. The error message is still written to the standard error listener.
> 
> This is because the error listeners of the imported groups haven't been updated to my error listener. I tried to do so at the same time when setting the listener for the parent group. However I noticed the "imports" are not yet defined after creating the parent group but when the first instance of the parent group is created. 
> 
> Any idea how I can set the error listeners for the imported groups to my error listener?
> 
> 
> One idea: as I am using ONE error listener for ALL groups it would be fine for me just to replace the "standard error listener" globally. E.g.
> 
>> What about making the constant STGroup.DEFAULT_ERR_MGR a static variable/property? This way a different DefaultErrorManager could be defined. The default would be the current "new ErrorManager()". 
> 
> I already suggested this in an earlier post to work around the "missing imported group" issue. But this also seems to be an easy solution for the "cannot intercept error messages from imported groups" issue. I already tried it out and it works fine.
> 
> 
> Udo
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest


From ub at abego-software.de  Fri Feb 11 03:38:35 2011
From: ub at abego-software.de (Udo Borkowski)
Date: Fri, 11 Feb 2011 12:38:35 +0100
Subject: [stringtemplate-interest] [ST4 Beta-4] Cannot intercept error
	messages from imported groups
In-Reply-To: <094A2F40-163F-4523-A65B-2978FFC8CEBA@cs.usfca.edu>
References: <2894B9F8-7781-4324-8E50-0D0FAE40BBC8@abego-software.de>
	<094A2F40-163F-4523-A65B-2978FFC8CEBA@cs.usfca.edu>
Message-ID: <6F4E6385-528A-42B1-A327-9FA28559A06F@abego-software.de>

> Hi Udo, can we add an ErrorManager arg to the STGroup* ctors?

Adding an ErrorManager arg to the STGroup* ctors will only work if the error manager of the "importing" group is passed in when an imported group is created (e.g. in "importTemplates"). 

This way the imported group "inherits" the ErrorManager of the importing group. Sounds good to me.

?

In an afterthought: I think, I'd rather add an "STGroup importer" arg to the STGroup* ctors.

In the above approach imported groups will use the ErrorManager of their importer as defined when they are constructed. I.e. changing the ErrorManager in the importer will not affect the imported groups.

By using the "importer" link to the importer we can make sure an STGroup will always use the "ErrorManager" of the importing group if it defines no "own" ErrorManager. 

E.g. extend STGroup :

	private STGroup importer; 
	
	public ErrorManager getErrMgr() {
		return 
			errMgr != null ?  errMgr :
			importer != null ? importer.getErrMgr() 
			: DEFAULT_ERR_MGR;
	}

	public void setErrMgr(ErrorManager errMgr) {
		this.errMgr = errMgr;
	}	

Having this link back to the "importer" STGroup may also come handy in other cases.

(Of cause we can no longer directly access the errMgr field but use the accessor when using this approach)

How does this sound?

Udo


On 11.02.2011, at 01:28, Terence Parr wrote:

> Hi Udo, can we add an ErrorManager arg to the STGroup* ctors?
> Ter
> On Feb 7, 2011, at 3:12 AM, Udo Borkowski wrote:
> 
>> Hi,
>> 
>> I am using my own ErrorListener and set it when a new group is created. 
>> 
>> With Beta-4 it is now possible to notice when an imported group file does not exist.
>> 
>> However I do not notice when the imported group is buggy. The error message is still written to the standard error listener.
>> 
>> This is because the error listeners of the imported groups haven't been updated to my error listener. I tried to do so at the same time when setting the listener for the parent group. However I noticed the "imports" are not yet defined after creating the parent group but when the first instance of the parent group is created. 
>> 
>> Any idea how I can set the error listeners for the imported groups to my error listener?
>> 
>> 
>> One idea: as I am using ONE error listener for ALL groups it would be fine for me just to replace the "standard error listener" globally. E.g.
>> 
>>> What about making the constant STGroup.DEFAULT_ERR_MGR a static variable/property? This way a different DefaultErrorManager could be defined. The default would be the current "new ErrorManager()". 
>> 
>> I already suggested this in an earlier post to work around the "missing imported group" issue. But this also seems to be an easy solution for the "cannot intercept error messages from imported groups" issue. I already tried it out and it works fine.
>> 
>> 
>> Udo
>> _______________________________________________
>> stringtemplate-interest mailing list
>> stringtemplate-interest at antlr.org
>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
> 
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20110211/9ab305be/attachment-0001.html 

From ub at abego-software.de  Fri Feb 11 04:56:21 2011
From: ub at abego-software.de (Udo Borkowski)
Date: Fri, 11 Feb 2011 13:56:21 +0100
Subject: [stringtemplate-interest] [ST4 Beta-4] Retrieving version
	information
In-Reply-To: <B8FF2939-E456-41E4-A968-E0E09430727E@cs.usfca.edu>
References: <B12CDEE0-CB17-46B9-913D-53F5B6CE1828@abego-software.de>
	<B8FF2939-E456-41E4-A968-E0E09430727E@cs.usfca.edu>
Message-ID: <1F3DAECB-2566-4814-A43E-6588D3297F56@abego-software.de>

Hi Ter,

I agree this will only work if the version information (text and/or boolean flag) is really in sync with the version control system (i.e. requires automated solution). Not sure how hard this is to implement.

Regarding the test for the version: I haven't thought of this yet, but it would definitely be useful. 

Udo

On 11.02.2011, at 00:55, Terence Parr wrote:

> Hi Udo,
> 
> Seems like the more common use case would be to test the version number and do something different to  avoidable or use a feature only if a particular version is available. but we can't test values in the template so it would have to be a Boolean set  for the various versions; might be hard to add one for every random version we make.
> 
> <if(v4_0b1)>...<endif>
> 
> Hmm... also I would have to figure out how to make ANT alter my software automatically to include the right version string; it would have to know about perforce version control and so on. setting this by hand would be a problem as it would get out of sync.
> 
> Ter
> On Feb 7, 2011, at 6:25 AM, Udo Borkowski wrote:
> 
>> Hi,
>> 
>> what about providing "version information" to be used in a template? 
>> 
>> I got this idea because I was using an older version of the engine (Beta3 instead of Beta4) without noticing.
>> 
>> 
>> One could then use this information e.g. to include a text like
>> 
>> 	"(Rendered with StringTemplate 4.0 Beta-4)"
>> 
>> into generated web pages etc.
>> 
>> 
>> One way to achieve this without adding "build-in" attributes etc. could be extending the class ST.
>> 
>> E.g. add the following method to the class ST:
>> 
>> 	
>> 	public String getVersionText() {
>> 		return "StringTemplate 4.0 Beta-4";
>> 	}
>> 
>> 
>> Then one could use
>> 
>> 		(Rendered with <{ }.versionText>)
>> 
>> in a template to render
>> 
>> 		(Rendered with StringTemplate 4.0 Beta-4)
>> 
>> 
>> Udo
>> 
>> 	
>> 
>> 
>> _______________________________________________
>> stringtemplate-interest mailing list
>> stringtemplate-interest at antlr.org
>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
> 
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest


From ub at abego-software.de  Fri Feb 11 05:45:55 2011
From: ub at abego-software.de (Udo Borkowski)
Date: Fri, 11 Feb 2011 14:45:55 +0100
Subject: [stringtemplate-interest] [ST4] How to avoid map key iteration?
Message-ID: <F3D7C90A-9183-498A-A5CE-4B64041A4945@abego-software.de>

Hi,

is there any way to prevent the "iteration" over map keys when using a template like <m:{t|?}> (m may be a map or a simple object)?

Details:

I am using a template like this:

writeAddress(adr) ::= <<
...
<adr:{t|<t.zip> <t.city>}>
...
>>

adr represents an "Address" with properties "street", "zip", "city" etc.

Initially this was implemented by a bean-style model class Address. Everything worked as expected.

Now I changed the model class to a more "dynamic" implementation by using a Map. I.e. "zip", "city", etc. are now keys in the map, mapping to their resp. values.

Expressions like this:

<a.zip>

still work fine, but 

<adr:{t|<t.zip> <t.city>}>

runs into an error: 

no such property or can't access: java.lang.String.zip

This is because the new model instance "accidentally" is a Map and the expression now iterates over the keys of the map ("zip" being the first).

How can this iteration be avoided?


Udo


-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20110211/e4611c21/attachment.html 

From parrt at cs.usfca.edu  Fri Feb 11 08:39:07 2011
From: parrt at cs.usfca.edu (Terence Parr)
Date: Fri, 11 Feb 2011 08:39:07 -0800
Subject: [stringtemplate-interest] [ST4] How to avoid map key iteration?
In-Reply-To: <F3D7C90A-9183-498A-A5CE-4B64041A4945@abego-software.de>
References: <F3D7C90A-9183-498A-A5CE-4B64041A4945@abego-software.de>
Message-ID: <24B9706C-57C1-462B-A823-38404C341EDE@cs.usfca.edu>

Hi. my first thought is, don't try to iterate over the object.  

<adr.zip> <adr.city>

is same as:

<adr:{t|<t.zip> <t.city>}>

Ter
On Feb 11, 2011, at 5:45 AM, Udo Borkowski wrote:

> Hi,
> 
> is there any way to prevent the "iteration" over map keys when using a template like <m:{t|?}> (m may be a map or a simple object)?
> 
> Details:
> 
> I am using a template like this:
> 
> writeAddress(adr) ::= <<
> ...
> <adr:{t|<t.zip> <t.city>}>
> ...
> >>
> 
> adr represents an "Address" with properties "street", "zip", "city" etc.
> 
> Initially this was implemented by a bean-style model class Address. Everything worked as expected.
> 
> Now I changed the model class to a more "dynamic" implementation by using a Map. I.e. "zip", "city", etc. are now keys in the map, mapping to their resp. values.
> 
> Expressions like this:
> 
> <a.zip>
> 
> still work fine, but 
> 
> <adr:{t|<t.zip> <t.city>}>
> 
> runs into an error: 
> 
> no such property or can't access: java.lang.String.zip
> 
> This is because the new model instance "accidentally" is a Map and the expression now iterates over the keys of the map ("zip" being the first).
> 
> How can this iteration be avoided?
> 
> 
> Udo
> 
> 
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20110211/7bd5cc8d/attachment.html 

From sharwell at pixelminegames.com  Fri Feb 11 15:17:28 2011
From: sharwell at pixelminegames.com (Sam Harwell)
Date: Fri, 11 Feb 2011 17:17:28 -0600
Subject: [stringtemplate-interest] ST3/ST4 comparison on large output
In-Reply-To: <AB729759-EF4B-448E-92A0-A6AE7FF77B3A@cs.usfca.edu>
References: <03ec01cbc64a$e92f45a0$bb8dd0e0$@pixelminegames.com>
	<AB729759-EF4B-448E-92A0-A6AE7FF77B3A@cs.usfca.edu>
Message-ID: <00fd01cbca41$da973a20$8fc5ae60$@pixelminegames.com>

I modified my ST3 templates to use some information I had to add to the
model to support ST4 (primarily due to the way filtering lists of elements
works in ST4).

ST3 header generation time: 20850.3592ms
ST3 header generation time (compilation only): 21986.4881ms
ST3 header generation time (caching only): 21164.8125ms
ST3 header generation time (compilation & caching): 16883.8046ms
ST4 header generation time: 1465.3687ms

Also note the size of the generated output. These are *very* large files.

To further improve the performance of ST3, I'd have to alter it to support
Boolean literals and conditional expressions like ST4, but I'm not sure how
much of the gap it would pick up (this is a 10:1 discrepancy). I do believe
this would improve things because the following template is rendered MANY
times in the output (the actual template is much longer, but this is the
most complex single condition in it).

ST4:

someTemplate(x, A1=true, A2=false, A3=false, A4=false) ::= <<
<if((A3&&(A2||(x.Prop1&&!x.Prop2)))||((A2&&!A4)&&(x.Prop3||x.Prop4)))>value<
endif>
>>

ST3:

someTemplate(x, A1={<true()>}, A2={<false()>}, A3={<false()>},
A4={<false()>}) ::= <<
<(or(a=and(a=A3, b=or(a=A2, b=and(a=test(x.Prop1), b=test(x.Prop2):not()))),
b=and(a=and(a=A2, b=A4:not()), b=or(a=test(x.Prop3),
b=test(x.Prop4)))))("value")>
>>

test(x) ::= "<if(x)>true<else>false<endif>"
testn(x) ::= "<if(!x)>true<else>false<endif>"

true(result) ::= "<if(result)><result><else>true<endif>"
false(result) ::= "<if(result)><else>false<endif>"

not(condition) ::= "not_<(condition)()>"
not_true(result) ::= "<false(...)>"
not_false(result) ::= "<true(...)>"

and(a, b) ::= "and_<(a)()>_<(b)()>"
and_true_true(result) ::= "<true(...)>"
and_true_false(result) ::= "<false(...)>"
and_false_true(result) ::= "<false(...)>"
and_false_false(result) ::= "<false(...)>"

or(a, b) ::= "or_<(a)()>_<(b)()>"
or_true_true(result) ::= "<true(...)>"
or_true_false(result) ::= "<true(...)>"
or_false_true(result) ::= "<true(...)>"
or_false_false(result) ::= "<false(...)>"

Sam

-----Original Message-----
From: stringtemplate-interest-bounces at antlr.org
[mailto:stringtemplate-interest-bounces at antlr.org] On Behalf Of Terence Parr
Sent: Sunday, February 06, 2011 4:27 PM
To: stringtemplate-interest List
Subject: Re: [stringtemplate-interest] ST3/ST4 comparison on large output

wow. impressive. so the algorithm (bytecode vs tree interp) is much faster.
30x faster for big output?
ter
On Feb 6, 2011, at 2:12 PM, Sam Harwell wrote:

> I finally converted my largest ST use case over to ST4. I'm working with
the C# ports of ST3 and ST4.
>  
> Package "Core", producing 29.3k of output:
> ST3 header generation time: 481ms
> ST4 header generation time: 208ms
>  
> Package "Engine", producing 2.81MB of output:
> ST3 header generation time: 42182ms
> ST4 header generation time: 1456ms
>  
> Sam
>  
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest

_______________________________________________
stringtemplate-interest mailing list
stringtemplate-interest at antlr.org
http://www.antlr.org/mailman/listinfo/stringtemplate-interest


From parrt at cs.usfca.edu  Fri Feb 11 16:11:50 2011
From: parrt at cs.usfca.edu (Terence Parr)
Date: Fri, 11 Feb 2011 16:11:50 -0800
Subject: [stringtemplate-interest] ST3/ST4 comparison on large output
In-Reply-To: <00fd01cbca41$da973a20$8fc5ae60$@pixelminegames.com>
References: <03ec01cbc64a$e92f45a0$bb8dd0e0$@pixelminegames.com>
	<AB729759-EF4B-448E-92A0-A6AE7FF77B3A@cs.usfca.edu>
	<00fd01cbca41$da973a20$8fc5ae60$@pixelminegames.com>
Message-ID: <D8C2E1CC-3F11-4895-82DB-242E50259D4D@cs.usfca.edu>

wow. 10x is a great improvement. :)
Ter
On Feb 11, 2011, at 3:17 PM, Sam Harwell wrote:

> I modified my ST3 templates to use some information I had to add to the
> model to support ST4 (primarily due to the way filtering lists of elements
> works in ST4).
> 
> ST3 header generation time: 20850.3592ms
> ST3 header generation time (compilation only): 21986.4881ms
> ST3 header generation time (caching only): 21164.8125ms
> ST3 header generation time (compilation & caching): 16883.8046ms
> ST4 header generation time: 1465.3687ms
> 
> Also note the size of the generated output. These are *very* large files.
> 
> To further improve the performance of ST3, I'd have to alter it to support
> Boolean literals and conditional expressions like ST4, but I'm not sure how
> much of the gap it would pick up (this is a 10:1 discrepancy). I do believe
> this would improve things because the following template is rendered MANY
> times in the output (the actual template is much longer, but this is the
> most complex single condition in it).
> 
> ST4:
> 
> someTemplate(x, A1=true, A2=false, A3=false, A4=false) ::= <<
> <if((A3&&(A2||(x.Prop1&&!x.Prop2)))||((A2&&!A4)&&(x.Prop3||x.Prop4)))>value<
> endif>
>>> 
> 
> ST3:
> 
> someTemplate(x, A1={<true()>}, A2={<false()>}, A3={<false()>},
> A4={<false()>}) ::= <<
> <(or(a=and(a=A3, b=or(a=A2, b=and(a=test(x.Prop1), b=test(x.Prop2):not()))),
> b=and(a=and(a=A2, b=A4:not()), b=or(a=test(x.Prop3),
> b=test(x.Prop4)))))("value")>
>>> 
> 
> test(x) ::= "<if(x)>true<else>false<endif>"
> testn(x) ::= "<if(!x)>true<else>false<endif>"
> 
> true(result) ::= "<if(result)><result><else>true<endif>"
> false(result) ::= "<if(result)><else>false<endif>"
> 
> not(condition) ::= "not_<(condition)()>"
> not_true(result) ::= "<false(...)>"
> not_false(result) ::= "<true(...)>"
> 
> and(a, b) ::= "and_<(a)()>_<(b)()>"
> and_true_true(result) ::= "<true(...)>"
> and_true_false(result) ::= "<false(...)>"
> and_false_true(result) ::= "<false(...)>"
> and_false_false(result) ::= "<false(...)>"
> 
> or(a, b) ::= "or_<(a)()>_<(b)()>"
> or_true_true(result) ::= "<true(...)>"
> or_true_false(result) ::= "<true(...)>"
> or_false_true(result) ::= "<true(...)>"
> or_false_false(result) ::= "<false(...)>"
> 
> Sam
> 
> -----Original Message-----
> From: stringtemplate-interest-bounces at antlr.org
> [mailto:stringtemplate-interest-bounces at antlr.org] On Behalf Of Terence Parr
> Sent: Sunday, February 06, 2011 4:27 PM
> To: stringtemplate-interest List
> Subject: Re: [stringtemplate-interest] ST3/ST4 comparison on large output
> 
> wow. impressive. so the algorithm (bytecode vs tree interp) is much faster.
> 30x faster for big output?
> ter
> On Feb 6, 2011, at 2:12 PM, Sam Harwell wrote:
> 
>> I finally converted my largest ST use case over to ST4. I'm working with
> the C# ports of ST3 and ST4.
>> 
>> Package "Core", producing 29.3k of output:
>> ST3 header generation time: 481ms
>> ST4 header generation time: 208ms
>> 
>> Package "Engine", producing 2.81MB of output:
>> ST3 header generation time: 42182ms
>> ST4 header generation time: 1456ms
>> 
>> Sam
>> 
>> _______________________________________________
>> stringtemplate-interest mailing list
>> stringtemplate-interest at antlr.org
>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
> 
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
> 


From sharwell at pixelminegames.com  Fri Feb 11 18:43:06 2011
From: sharwell at pixelminegames.com (Sam Harwell)
Date: Fri, 11 Feb 2011 20:43:06 -0600
Subject: [stringtemplate-interest] ST3/ST4 comparison on large output
In-Reply-To: <D8C2E1CC-3F11-4895-82DB-242E50259D4D@cs.usfca.edu>
References: <03ec01cbc64a$e92f45a0$bb8dd0e0$@pixelminegames.com>	<AB729759-EF4B-448E-92A0-A6AE7FF77B3A@cs.usfca.edu>	<00fd01cbca41$da973a20$8fc5ae60$@pixelminegames.com>
	<D8C2E1CC-3F11-4895-82DB-242E50259D4D@cs.usfca.edu>
Message-ID: <000001cbca5e$9462ca70$bd285f50$@pixelminegames.com>

I ran the profiler on just the ST4-based output. Here's a breakdown of some
interesting portions. Percentages are inclusive total execution time unless
otherwise specified (named item plus anything called by it).

65% total time is parsing the input (~1000 source files?).
0.27% is spent loading the group file.

22.7% spent in Template.Render(), all of which is in
Interpreter.ExecuteImpl.
3.3% spent in Interpreter.Map
0.9% in GetShort
0.8% in each of Template.GetAttribute, Interpreter.Rest, and each of the
Interpreter.StoreArguments methods
10.8% spent in Interpreter.GetObjectProperty().
4.4% spent in ObjectModelAdaptor.GetProperty() - 2.2% binding to properties,
2.1% in my data model.
2% spent in each of TemplateGroup.GetModelAdaptor() and
TemplateGroup.GetTypeProxyFactory().
2% spent wrapping objects in their proxy types (entirely due to calling
ToArray() on my wrapped enumerations).

Approximately 6% (total exec time) of the 10.8% (total exec time) in
GetObjectProperty is "recoverable" ST4 overhead.

More tomorrow! :)

Sam

-----Original Message-----
From: stringtemplate-interest-bounces at antlr.org
[mailto:stringtemplate-interest-bounces at antlr.org] On Behalf Of Terence Parr
Sent: Friday, February 11, 2011 6:12 PM
To: stringtemplate-interest List
Subject: Re: [stringtemplate-interest] ST3/ST4 comparison on large output

wow. 10x is a great improvement. :)
Ter
On Feb 11, 2011, at 3:17 PM, Sam Harwell wrote:

> I modified my ST3 templates to use some information I had to add to the
> model to support ST4 (primarily due to the way filtering lists of elements
> works in ST4).
> 
> ST3 header generation time: 20850.3592ms
> ST3 header generation time (compilation only): 21986.4881ms
> ST3 header generation time (caching only): 21164.8125ms
> ST3 header generation time (compilation & caching): 16883.8046ms
> ST4 header generation time: 1465.3687ms
> 
> Also note the size of the generated output. These are *very* large files.
> 
> To further improve the performance of ST3, I'd have to alter it to support
> Boolean literals and conditional expressions like ST4, but I'm not sure
how
> much of the gap it would pick up (this is a 10:1 discrepancy). I do
believe
> this would improve things because the following template is rendered MANY
> times in the output (the actual template is much longer, but this is the
> most complex single condition in it).
> 
> ST4:
> 
> someTemplate(x, A1=true, A2=false, A3=false, A4=false) ::= <<
>
<if((A3&&(A2||(x.Prop1&&!x.Prop2)))||((A2&&!A4)&&(x.Prop3||x.Prop4)))>value<
> endif>
>>> 
> 
> ST3:
> 
> someTemplate(x, A1={<true()>}, A2={<false()>}, A3={<false()>},
> A4={<false()>}) ::= <<
> <(or(a=and(a=A3, b=or(a=A2, b=and(a=test(x.Prop1),
b=test(x.Prop2):not()))),
> b=and(a=and(a=A2, b=A4:not()), b=or(a=test(x.Prop3),
> b=test(x.Prop4)))))("value")>
>>> 
> 
> test(x) ::= "<if(x)>true<else>false<endif>"
> testn(x) ::= "<if(!x)>true<else>false<endif>"
> 
> true(result) ::= "<if(result)><result><else>true<endif>"
> false(result) ::= "<if(result)><else>false<endif>"
> 
> not(condition) ::= "not_<(condition)()>"
> not_true(result) ::= "<false(...)>"
> not_false(result) ::= "<true(...)>"
> 
> and(a, b) ::= "and_<(a)()>_<(b)()>"
> and_true_true(result) ::= "<true(...)>"
> and_true_false(result) ::= "<false(...)>"
> and_false_true(result) ::= "<false(...)>"
> and_false_false(result) ::= "<false(...)>"
> 
> or(a, b) ::= "or_<(a)()>_<(b)()>"
> or_true_true(result) ::= "<true(...)>"
> or_true_false(result) ::= "<true(...)>"
> or_false_true(result) ::= "<true(...)>"
> or_false_false(result) ::= "<false(...)>"
> 
> Sam
> 
> -----Original Message-----
> From: stringtemplate-interest-bounces at antlr.org
> [mailto:stringtemplate-interest-bounces at antlr.org] On Behalf Of Terence
Parr
> Sent: Sunday, February 06, 2011 4:27 PM
> To: stringtemplate-interest List
> Subject: Re: [stringtemplate-interest] ST3/ST4 comparison on large output
> 
> wow. impressive. so the algorithm (bytecode vs tree interp) is much
faster.
> 30x faster for big output?
> ter
> On Feb 6, 2011, at 2:12 PM, Sam Harwell wrote:
> 
>> I finally converted my largest ST use case over to ST4. I'm working with
> the C# ports of ST3 and ST4.
>> 
>> Package "Core", producing 29.3k of output:
>> ST3 header generation time: 481ms
>> ST4 header generation time: 208ms
>> 
>> Package "Engine", producing 2.81MB of output:
>> ST3 header generation time: 42182ms
>> ST4 header generation time: 1456ms
>> 
>> Sam
>> 
>> _______________________________________________
>> stringtemplate-interest mailing list
>> stringtemplate-interest at antlr.org
>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
> 
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
> 

_______________________________________________
stringtemplate-interest mailing list
stringtemplate-interest at antlr.org
http://www.antlr.org/mailman/listinfo/stringtemplate-interest


From oliver.zeigermann at gmail.com  Sat Feb 12 02:27:20 2011
From: oliver.zeigermann at gmail.com (Oliver Zeigermann)
Date: Sat, 12 Feb 2011 11:27:20 +0100
Subject: [stringtemplate-interest] [ST4 Beta-4] Retrieving version
	information
In-Reply-To: <1F3DAECB-2566-4814-A43E-6588D3297F56@abego-software.de>
References: <B12CDEE0-CB17-46B9-913D-53F5B6CE1828@abego-software.de>
	<B8FF2939-E456-41E4-A968-E0E09430727E@cs.usfca.edu>
	<1F3DAECB-2566-4814-A43E-6588D3297F56@abego-software.de>
Message-ID: <AANLkTinNzGUvjpfXhorWO1Qry5XdWT_+WWJ3Nd61pj0g@mail.gmail.com>

Using ant that is fairly easy. I attached a patch for the ant build
file that replaces every @version@ inside the source with the version
information from build.properties (no idea if this is the best
solution, though).

E.g. adding

    public final static String VERSION = "@version@";

to ST.java

would result to

    public final static String VERSION = "4.0b4";

in the compiled classes.

Hope that helps

- Oliver

2011/2/11 Udo Borkowski <ub at abego-software.de>:
> Hi Ter,
>
> I agree this will only work if the version information (text and/or boolean flag) is really in sync with the version control system (i.e. requires automated solution). Not sure how hard this is to implement.
>
> Regarding the test for the version: I haven't thought of this yet, but it would definitely be useful.
>
> Udo
>
> On 11.02.2011, at 00:55, Terence Parr wrote:
>
>> Hi Udo,
>>
>> Seems like the more common use case would be to test the version number and do something different to ?avoidable or use a feature only if a particular version is available. but we can't test values in the template so it would have to be a Boolean set ?for the various versions; might be hard to add one for every random version we make.
>>
>> <if(v4_0b1)>...<endif>
>>
>> Hmm... also I would have to figure out how to make ANT alter my software automatically to include the right version string; it would have to know about perforce version control and so on. setting this by hand would be a problem as it would get out of sync.
>>
>> Ter
>> On Feb 7, 2011, at 6:25 AM, Udo Borkowski wrote:
>>
>>> Hi,
>>>
>>> what about providing "version information" to be used in a template?
>>>
>>> I got this idea because I was using an older version of the engine (Beta3 instead of Beta4) without noticing.
>>>
>>>
>>> One could then use this information e.g. to include a text like
>>>
>>> ? ? ?"(Rendered with StringTemplate 4.0 Beta-4)"
>>>
>>> into generated web pages etc.
>>>
>>>
>>> One way to achieve this without adding "build-in" attributes etc. could be extending the class ST.
>>>
>>> E.g. add the following method to the class ST:
>>>
>>>
>>> ? ? ?public String getVersionText() {
>>> ? ? ? ? ? ? ?return "StringTemplate 4.0 Beta-4";
>>> ? ? ?}
>>>
>>>
>>> Then one could use
>>>
>>> ? ? ? ? ? ? ?(Rendered with <{ }.versionText>)
>>>
>>> in a template to render
>>>
>>> ? ? ? ? ? ? ?(Rendered with StringTemplate 4.0 Beta-4)
>>>
>>>
>>> Udo
>>>
>>>
>>>
>>>
>>> _______________________________________________
>>> stringtemplate-interest mailing list
>>> stringtemplate-interest at antlr.org
>>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>>
>> _______________________________________________
>> stringtemplate-interest mailing list
>> stringtemplate-interest at antlr.org
>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: build.xml.patch
Type: application/octet-stream
Size: 849 bytes
Desc: not available
Url : http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20110212/43bc8c0e/attachment.obj 

From oliver.zeigermann at gmail.com  Sat Feb 12 02:34:47 2011
From: oliver.zeigermann at gmail.com (Oliver Zeigermann)
Date: Sat, 12 Feb 2011 11:34:47 +0100
Subject: [stringtemplate-interest] [ST4 Beta-4] Retrieving version
	information
In-Reply-To: <AANLkTinNzGUvjpfXhorWO1Qry5XdWT_+WWJ3Nd61pj0g@mail.gmail.com>
References: <B12CDEE0-CB17-46B9-913D-53F5B6CE1828@abego-software.de>
	<B8FF2939-E456-41E4-A968-E0E09430727E@cs.usfca.edu>
	<1F3DAECB-2566-4814-A43E-6588D3297F56@abego-software.de>
	<AANLkTinNzGUvjpfXhorWO1Qry5XdWT_+WWJ3Nd61pj0g@mail.gmail.com>
Message-ID: <AANLkTi=YVdsmvMPDzB978Eo5Ztq-jBtnCFH1kxTBnbdG@mail.gmail.com>

By the way, wouldn't it be a good idea to either include the necessary
jars into the source distribution or let ant download them if not
present as an alterantive?

2011/2/12 Oliver Zeigermann <oliver.zeigermann at gmail.com>:
> Using ant that is fairly easy. I attached a patch for the ant build
> file that replaces every @version@ inside the source with the version
> information from build.properties (no idea if this is the best
> solution, though).
>
> E.g. adding
>
> ? ?public final static String VERSION = "@version@";
>
> to ST.java
>
> would result to
>
> ? ?public final static String VERSION = "4.0b4";
>
> in the compiled classes.
>
> Hope that helps
>
> - Oliver
>
> 2011/2/11 Udo Borkowski <ub at abego-software.de>:
>> Hi Ter,
>>
>> I agree this will only work if the version information (text and/or boolean flag) is really in sync with the version control system (i.e. requires automated solution). Not sure how hard this is to implement.
>>
>> Regarding the test for the version: I haven't thought of this yet, but it would definitely be useful.
>>
>> Udo
>>
>> On 11.02.2011, at 00:55, Terence Parr wrote:
>>
>>> Hi Udo,
>>>
>>> Seems like the more common use case would be to test the version number and do something different to ?avoidable or use a feature only if a particular version is available. but we can't test values in the template so it would have to be a Boolean set ?for the various versions; might be hard to add one for every random version we make.
>>>
>>> <if(v4_0b1)>...<endif>
>>>
>>> Hmm... also I would have to figure out how to make ANT alter my software automatically to include the right version string; it would have to know about perforce version control and so on. setting this by hand would be a problem as it would get out of sync.
>>>
>>> Ter
>>> On Feb 7, 2011, at 6:25 AM, Udo Borkowski wrote:
>>>
>>>> Hi,
>>>>
>>>> what about providing "version information" to be used in a template?
>>>>
>>>> I got this idea because I was using an older version of the engine (Beta3 instead of Beta4) without noticing.
>>>>
>>>>
>>>> One could then use this information e.g. to include a text like
>>>>
>>>> ? ? ?"(Rendered with StringTemplate 4.0 Beta-4)"
>>>>
>>>> into generated web pages etc.
>>>>
>>>>
>>>> One way to achieve this without adding "build-in" attributes etc. could be extending the class ST.
>>>>
>>>> E.g. add the following method to the class ST:
>>>>
>>>>
>>>> ? ? ?public String getVersionText() {
>>>> ? ? ? ? ? ? ?return "StringTemplate 4.0 Beta-4";
>>>> ? ? ?}
>>>>
>>>>
>>>> Then one could use
>>>>
>>>> ? ? ? ? ? ? ?(Rendered with <{ }.versionText>)
>>>>
>>>> in a template to render
>>>>
>>>> ? ? ? ? ? ? ?(Rendered with StringTemplate 4.0 Beta-4)
>>>>
>>>>
>>>> Udo
>>>>
>>>>
>>>>
>>>>
>>>> _______________________________________________
>>>> stringtemplate-interest mailing list
>>>> stringtemplate-interest at antlr.org
>>>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>>>
>>> _______________________________________________
>>> stringtemplate-interest mailing list
>>> stringtemplate-interest at antlr.org
>>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>>
>> _______________________________________________
>> stringtemplate-interest mailing list
>> stringtemplate-interest at antlr.org
>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>>
>

From parrt at cs.usfca.edu  Sat Feb 12 09:31:32 2011
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sat, 12 Feb 2011 09:31:32 -0800
Subject: [stringtemplate-interest] [ST4 Beta-4] Retrieving version
	information
In-Reply-To: <AANLkTi=YVdsmvMPDzB978Eo5Ztq-jBtnCFH1kxTBnbdG@mail.gmail.com>
References: <B12CDEE0-CB17-46B9-913D-53F5B6CE1828@abego-software.de>
	<B8FF2939-E456-41E4-A968-E0E09430727E@cs.usfca.edu>
	<1F3DAECB-2566-4814-A43E-6588D3297F56@abego-software.de>
	<AANLkTinNzGUvjpfXhorWO1Qry5XdWT_+WWJ3Nd61pj0g@mail.gmail.com>
	<AANLkTi=YVdsmvMPDzB978Eo5Ztq-jBtnCFH1kxTBnbdG@mail.gmail.com>
Message-ID: <7C8002D4-08E8-44BF-8CD4-BC817C4601D6@cs.usfca.edu>

you mean antlr-3.3?
Ter
On Feb 12, 2011, at 2:34 AM, Oliver Zeigermann wrote:

> By the way, wouldn't it be a good idea to either include the necessary
> jars into the source distribution or let ant download them if not
> present as an alterantive?


From parrt at cs.usfca.edu  Sat Feb 12 09:33:18 2011
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sat, 12 Feb 2011 09:33:18 -0800
Subject: [stringtemplate-interest] [ST4 Beta-4] Retrieving version
	information
In-Reply-To: <AANLkTinNzGUvjpfXhorWO1Qry5XdWT_+WWJ3Nd61pj0g@mail.gmail.com>
References: <B12CDEE0-CB17-46B9-913D-53F5B6CE1828@abego-software.de>
	<B8FF2939-E456-41E4-A968-E0E09430727E@cs.usfca.edu>
	<1F3DAECB-2566-4814-A43E-6588D3297F56@abego-software.de>
	<AANLkTinNzGUvjpfXhorWO1Qry5XdWT_+WWJ3Nd61pj0g@mail.gmail.com>
Message-ID: <4877D31B-7D22-47EF-9400-F43B645081CA@cs.usfca.edu>

Interesting.  BTW, are you for or against adding a predefined property called version or whatever?  We couldn't test against it though; not sure it's worth adding.
Ter

On Feb 12, 2011, at 2:27 AM, Oliver Zeigermann wrote:
> Using ant that is fairly easy. I attached a patch for the ant build
> file that replaces every @version@ inside the source with the version
> information from build.properties (no idea if this is the best
> solution, though).
> 
> E.g. adding
> 
>    public final static String VERSION = "@version@";
> 
> to ST.java
> 
> would result to
> 
>    public final static String VERSION = "4.0b4";
> 
> in the compiled classes.
> 
> Hope that helps
> 
> - Oliver


From parrt at cs.usfca.edu  Sat Feb 12 11:25:45 2011
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sat, 12 Feb 2011 11:25:45 -0800
Subject: [stringtemplate-interest] [ST4 Beta-4] Retrieving version
	information
In-Reply-To: <AANLkTinNzGUvjpfXhorWO1Qry5XdWT_+WWJ3Nd61pj0g@mail.gmail.com>
References: <B12CDEE0-CB17-46B9-913D-53F5B6CE1828@abego-software.de>
	<B8FF2939-E456-41E4-A968-E0E09430727E@cs.usfca.edu>
	<1F3DAECB-2566-4814-A43E-6588D3297F56@abego-software.de>
	<AANLkTinNzGUvjpfXhorWO1Qry5XdWT_+WWJ3Nd61pj0g@mail.gmail.com>
Message-ID: <84BE78A9-5036-4491-A57A-6A3F3AC1CDA3@cs.usfca.edu>

didn't seem to work.

        public final static String VERSION = "@version@";

in src zip.

Ter
On Feb 12, 2011, at 2:27 AM, Oliver Zeigermann wrote:

> Using ant that is fairly easy. I attached a patch for the ant build
> file that replaces every @version@ inside the source with the version
> information from build.properties (no idea if this is the best
> solution, though).
> 
> E.g. adding
> 
>    public final static String VERSION = "@version@";
> 
> to ST.java
> 
> would result to
> 
>    public final static String VERSION = "4.0b4";
> 
> in the compiled classes.
> 
> Hope that helps
> 
> - Oliver
> 
> 2011/2/11 Udo Borkowski <ub at abego-software.de>:
>> Hi Ter,
>> 
>> I agree this will only work if the version information (text and/or boolean flag) is really in sync with the version control system (i.e. requires automated solution). Not sure how hard this is to implement.
>> 
>> Regarding the test for the version: I haven't thought of this yet, but it would definitely be useful.
>> 
>> Udo
>> 
>> On 11.02.2011, at 00:55, Terence Parr wrote:
>> 
>>> Hi Udo,
>>> 
>>> Seems like the more common use case would be to test the version number and do something different to  avoidable or use a feature only if a particular version is available. but we can't test values in the template so it would have to be a Boolean set  for the various versions; might be hard to add one for every random version we make.
>>> 
>>> <if(v4_0b1)>...<endif>
>>> 
>>> Hmm... also I would have to figure out how to make ANT alter my software automatically to include the right version string; it would have to know about perforce version control and so on. setting this by hand would be a problem as it would get out of sync.
>>> 
>>> Ter
>>> On Feb 7, 2011, at 6:25 AM, Udo Borkowski wrote:
>>> 
>>>> Hi,
>>>> 
>>>> what about providing "version information" to be used in a template?
>>>> 
>>>> I got this idea because I was using an older version of the engine (Beta3 instead of Beta4) without noticing.
>>>> 
>>>> 
>>>> One could then use this information e.g. to include a text like
>>>> 
>>>>      "(Rendered with StringTemplate 4.0 Beta-4)"
>>>> 
>>>> into generated web pages etc.
>>>> 
>>>> 
>>>> One way to achieve this without adding "build-in" attributes etc. could be extending the class ST.
>>>> 
>>>> E.g. add the following method to the class ST:
>>>> 
>>>> 
>>>>      public String getVersionText() {
>>>>              return "StringTemplate 4.0 Beta-4";
>>>>      }
>>>> 
>>>> 
>>>> Then one could use
>>>> 
>>>>              (Rendered with <{ }.versionText>)
>>>> 
>>>> in a template to render
>>>> 
>>>>              (Rendered with StringTemplate 4.0 Beta-4)
>>>> 
>>>> 
>>>> Udo
>>>> 
>>>> 
>>>> 
>>>> 
>>>> _______________________________________________
>>>> stringtemplate-interest mailing list
>>>> stringtemplate-interest at antlr.org
>>>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>>> 
>>> _______________________________________________
>>> stringtemplate-interest mailing list
>>> stringtemplate-interest at antlr.org
>>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>> 
>> _______________________________________________
>> stringtemplate-interest mailing list
>> stringtemplate-interest at antlr.org
>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>> 
> <build.xml.patch>_______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest


From oliver.zeigermann at gmail.com  Sat Feb 12 12:34:07 2011
From: oliver.zeigermann at gmail.com (Oliver Zeigermann)
Date: Sat, 12 Feb 2011 21:34:07 +0100
Subject: [stringtemplate-interest] [ST4 Beta-4] Retrieving version
	information
In-Reply-To: <84BE78A9-5036-4491-A57A-6A3F3AC1CDA3@cs.usfca.edu>
References: <B12CDEE0-CB17-46B9-913D-53F5B6CE1828@abego-software.de>
	<B8FF2939-E456-41E4-A968-E0E09430727E@cs.usfca.edu>
	<1F3DAECB-2566-4814-A43E-6588D3297F56@abego-software.de>
	<AANLkTinNzGUvjpfXhorWO1Qry5XdWT_+WWJ3Nd61pj0g@mail.gmail.com>
	<84BE78A9-5036-4491-A57A-6A3F3AC1CDA3@cs.usfca.edu>
Message-ID: <AANLkTi=9MMMcBiB9Q=HiJAGQZezj8iQE4OaOqEno7xjz@mail.gmail.com>

Sources remain untouched
Am 12.02.2011 20:26 schrieb "Terence Parr" <parrt at cs.usfca.edu>:
> didn't seem to work.
>
> public final static String VERSION = "@version@";
>
> in src zip.
>
> Ter
> On Feb 12, 2011, at 2:27 AM, Oliver Zeigermann wrote:
>
>> Using ant that is fairly easy. I attached a patch for the ant build
>> file that replaces every @version@ inside the source with the version
>> information from build.properties (no idea if this is the best
>> solution, though).
>>
>> E.g. adding
>>
>> public final static String VERSION = "@version@";
>>
>> to ST.java
>>
>> would result to
>>
>> public final static String VERSION = "4.0b4";
>>
>> in the compiled classes.
>>
>> Hope that helps
>>
>> - Oliver
>>
>> 2011/2/11 Udo Borkowski <ub at abego-software.de>:
>>> Hi Ter,
>>>
>>> I agree this will only work if the version information (text and/or
boolean flag) is really in sync with the version control system (i.e.
requires automated solution). Not sure how hard this is to implement.
>>>
>>> Regarding the test for the version: I haven't thought of this yet, but
it would definitely be useful.
>>>
>>> Udo
>>>
>>> On 11.02.2011, at 00:55, Terence Parr wrote:
>>>
>>>> Hi Udo,
>>>>
>>>> Seems like the more common use case would be to test the version number
and do something different to avoidable or use a feature only if a
particular version is available. but we can't test values in the template so
it would have to be a Boolean set for the various versions; might be hard to
add one for every random version we make.
>>>>
>>>> <if(v4_0b1)>...<endif>
>>>>
>>>> Hmm... also I would have to figure out how to make ANT alter my
software automatically to include the right version string; it would have to
know about perforce version control and so on. setting this by hand would be
a problem as it would get out of sync.
>>>>
>>>> Ter
>>>> On Feb 7, 2011, at 6:25 AM, Udo Borkowski wrote:
>>>>
>>>>> Hi,
>>>>>
>>>>> what about providing "version information" to be used in a template?
>>>>>
>>>>> I got this idea because I was using an older version of the engine
(Beta3 instead of Beta4) without noticing.
>>>>>
>>>>>
>>>>> One could then use this information e.g. to include a text like
>>>>>
>>>>> "(Rendered with StringTemplate 4.0 Beta-4)"
>>>>>
>>>>> into generated web pages etc.
>>>>>
>>>>>
>>>>> One way to achieve this without adding "build-in" attributes etc.
could be extending the class ST.
>>>>>
>>>>> E.g. add the following method to the class ST:
>>>>>
>>>>>
>>>>> public String getVersionText() {
>>>>> return "StringTemplate 4.0 Beta-4";
>>>>> }
>>>>>
>>>>>
>>>>> Then one could use
>>>>>
>>>>> (Rendered with <{ }.versionText>)
>>>>>
>>>>> in a template to render
>>>>>
>>>>> (Rendered with StringTemplate 4.0 Beta-4)
>>>>>
>>>>>
>>>>> Udo
>>>>>
>>>>>
>>>>>
>>>>>
>>>>> _______________________________________________
>>>>> stringtemplate-interest mailing list
>>>>> stringtemplate-interest at antlr.org
>>>>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>>>>
>>>> _______________________________________________
>>>> stringtemplate-interest mailing list
>>>> stringtemplate-interest at antlr.org
>>>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>>>
>>> _______________________________________________
>>> stringtemplate-interest mailing list
>>> stringtemplate-interest at antlr.org
>>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>>>
>> <build.xml.patch>_______________________________________________
>> stringtemplate-interest mailing list
>> stringtemplate-interest at antlr.org
>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20110212/868db995/attachment.html 

From parrt at cs.usfca.edu  Sat Feb 12 12:42:13 2011
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sat, 12 Feb 2011 12:42:13 -0800
Subject: [stringtemplate-interest] [ST4 Beta-4] Retrieving version
	information
In-Reply-To: <AANLkTi=9MMMcBiB9Q=HiJAGQZezj8iQE4OaOqEno7xjz@mail.gmail.com>
References: <B12CDEE0-CB17-46B9-913D-53F5B6CE1828@abego-software.de>
	<B8FF2939-E456-41E4-A968-E0E09430727E@cs.usfca.edu>
	<1F3DAECB-2566-4814-A43E-6588D3297F56@abego-software.de>
	<AANLkTinNzGUvjpfXhorWO1Qry5XdWT_+WWJ3Nd61pj0g@mail.gmail.com>
	<84BE78A9-5036-4491-A57A-6A3F3AC1CDA3@cs.usfca.edu>
	<AANLkTi=9MMMcBiB9Q=HiJAGQZezj8iQE4OaOqEno7xjz@mail.gmail.com>
Message-ID: <B7D2D637-BC3D-4124-88A4-519614E8F39F@cs.usfca.edu>

Ah. so in the jar it's okay. cool. I tried to test that, but found javap not in my PATH on the Linux box :(
Ter
On Feb 12, 2011, at 12:34 PM, Oliver Zeigermann wrote:

> Sources remain untouched
> 
> Am 12.02.2011 20:26 schrieb "Terence Parr" <parrt at cs.usfca.edu>:
> > didn't seem to work.
> > 
> > public final static String VERSION = "@version@";
> > 
> > in src zip.
> > 
> > Ter
> > On Feb 12, 2011, at 2:27 AM, Oliver Zeigermann wrote:
> > 
> >> Using ant that is fairly easy. I attached a patch for the ant build
> >> file that replaces every @version@ inside the source with the version
> >> information from build.properties (no idea if this is the best
> >> solution, though).
> >> 
> >> E.g. adding
> >> 
> >> public final static String VERSION = "@version@";
> >> 
> >> to ST.java
> >> 
> >> would result to
> >> 
> >> public final static String VERSION = "4.0b4";
> >> 
> >> in the compiled classes.
> >> 
> >> Hope that helps
> >> 
> >> - Oliver
> >> 
> >> 2011/2/11 Udo Borkowski <ub at abego-software.de>:
> >>> Hi Ter,
> >>> 
> >>> I agree this will only work if the version information (text and/or boolean flag) is really in sync with the version control system (i.e. requires automated solution). Not sure how hard this is to implement.
> >>> 
> >>> Regarding the test for the version: I haven't thought of this yet, but it would definitely be useful.
> >>> 
> >>> Udo
> >>> 
> >>> On 11.02.2011, at 00:55, Terence Parr wrote:
> >>> 
> >>>> Hi Udo,
> >>>> 
> >>>> Seems like the more common use case would be to test the version number and do something different to avoidable or use a feature only if a particular version is available. but we can't test values in the template so it would have to be a Boolean set for the various versions; might be hard to add one for every random version we make.
> >>>> 
> >>>> <if(v4_0b1)>...<endif>
> >>>> 
> >>>> Hmm... also I would have to figure out how to make ANT alter my software automatically to include the right version string; it would have to know about perforce version control and so on. setting this by hand would be a problem as it would get out of sync.
> >>>> 
> >>>> Ter
> >>>> On Feb 7, 2011, at 6:25 AM, Udo Borkowski wrote:
> >>>> 
> >>>>> Hi,
> >>>>> 
> >>>>> what about providing "version information" to be used in a template?
> >>>>> 
> >>>>> I got this idea because I was using an older version of the engine (Beta3 instead of Beta4) without noticing.
> >>>>> 
> >>>>> 
> >>>>> One could then use this information e.g. to include a text like
> >>>>> 
> >>>>> "(Rendered with StringTemplate 4.0 Beta-4)"
> >>>>> 
> >>>>> into generated web pages etc.
> >>>>> 
> >>>>> 
> >>>>> One way to achieve this without adding "build-in" attributes etc. could be extending the class ST.
> >>>>> 
> >>>>> E.g. add the following method to the class ST:
> >>>>> 
> >>>>> 
> >>>>> public String getVersionText() {
> >>>>> return "StringTemplate 4.0 Beta-4";
> >>>>> }
> >>>>> 
> >>>>> 
> >>>>> Then one could use
> >>>>> 
> >>>>> (Rendered with <{ }.versionText>)
> >>>>> 
> >>>>> in a template to render
> >>>>> 
> >>>>> (Rendered with StringTemplate 4.0 Beta-4)
> >>>>> 
> >>>>> 
> >>>>> Udo
> >>>>> 
> >>>>> 
> >>>>> 
> >>>>> 
> >>>>> _______________________________________________
> >>>>> stringtemplate-interest mailing list
> >>>>> stringtemplate-interest at antlr.org
> >>>>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
> >>>> 
> >>>> _______________________________________________
> >>>> stringtemplate-interest mailing list
> >>>> stringtemplate-interest at antlr.org
> >>>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
> >>> 
> >>> _______________________________________________
> >>> stringtemplate-interest mailing list
> >>> stringtemplate-interest at antlr.org
> >>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
> >>> 
> >> <build.xml.patch>_______________________________________________
> >> stringtemplate-interest mailing list
> >> stringtemplate-interest at antlr.org
> >> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
> > 
> > _______________________________________________
> > stringtemplate-interest mailing list
> > stringtemplate-interest at antlr.org
> > http://www.antlr.org/mailman/listinfo/stringtemplate-interest


From parrt at cs.usfca.edu  Sat Feb 12 12:46:50 2011
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sat, 12 Feb 2011 12:46:50 -0800
Subject: [stringtemplate-interest] Moving closer to 4.0 ST release (what to
	do with the doc)
Message-ID: <210E6657-F577-4996-917A-88A6B16E6655@cs.usfca.edu>

Hi,Things seem to be quieting down in the beta. thanks very much to all the help from Udo Borkowski, Sam Harwell, Collin Fagan, Oliver Zeigermann, and others.

Before I can make a full 4.0 release, however, I need to figure out what to do with the documentation. I'm tempted to simply make a wholesale copy and then tweak it according to the changes in 4.0. One of the things that stops me is that Graham Wideman felt the old documentation wasn't that great. If that's true, then perhaps I should start over from scratch. That is probably unrealistic though given how much I am revving my engines to get restarted on ANTLR 4.0.

Any suggestions about how to proceed with the documentation would be greatly appreciated!
 
Ter

From ub at abego-software.de  Sat Feb 12 15:11:06 2011
From: ub at abego-software.de (Udo Borkowski)
Date: Sun, 13 Feb 2011 00:11:06 +0100
Subject: [stringtemplate-interest] [ST4 Beta-4] Map is not imported
Message-ID: <B1180D09-A6BE-4BFD-877D-A8B34DBC26C0@abego-software.de>

Hi,

it looks like a map defined in an STGroup is not imported when using the "import" statement for that group.

Steps to reproduce:

File "mapAndTemplate.stg"
---------
mapname ::= [ "name1":"val1", "name2":"val2", default:"err"]

template1() ::= <<
one
>>

main() ::= <<
mapOutput: <mapname.name1>, <mapname.xyz>
templateOutput: <template1()>
>>
--------

"main()" will output (as expected):

mapOutput: val1, err
templateOutput: one



However when the group is imported like here

File "test.stg"
----------
import "~/st/templates/trial/mapAndTemplate.stg"

main() ::= <<
mapOutput: <mapname.name1>, <mapname.xyz>
templateOutput: <template1()>
>>
----------

the output is:

mapOutput: , 
templateOutput: one

I.e. the map entries are not found. However the template "template1()" is correctly used.


Udo


From ub at abego-software.de  Sat Feb 12 15:22:42 2011
From: ub at abego-software.de (Udo Borkowski)
Date: Sun, 13 Feb 2011 00:22:42 +0100
Subject: [stringtemplate-interest] [ST4 Beta-4] Retrieving version
	information
In-Reply-To: <B7D2D637-BC3D-4124-88A4-519614E8F39F@cs.usfca.edu>
References: <B12CDEE0-CB17-46B9-913D-53F5B6CE1828@abego-software.de>
	<B8FF2939-E456-41E4-A968-E0E09430727E@cs.usfca.edu>
	<1F3DAECB-2566-4814-A43E-6588D3297F56@abego-software.de>
	<AANLkTinNzGUvjpfXhorWO1Qry5XdWT_+WWJ3Nd61pj0g@mail.gmail.com>
	<84BE78A9-5036-4491-A57A-6A3F3AC1CDA3@cs.usfca.edu>
	<AANLkTi=9MMMcBiB9Q=HiJAGQZezj8iQE4OaOqEno7xjz@mail.gmail.com>
	<B7D2D637-BC3D-4124-88A4-519614E8F39F@cs.usfca.edu>
Message-ID: <FC5DA6E3-54EC-448E-B5DB-4DD381F84419@abego-software.de>

Instead of writing the version information into a java file what about adding a file

	"org/stringtemplate/v4/system.stg"

to the sources/jar with a content like this:

engineInfo ::= [
"v4_0b4":"",
"versionText":"StringTemplate 4.0b4",
"versionDate":"2011-02-28"
]

(ANT replacements already done)

This way people wishing to access the version information could just "import" the "system.stg" file and access the information through the map. E.g.

-----------
import "org/stringtemplate/v4/system.stg"

main(p) ::= <<
<if(engineInfo.v4_0b4)>
stuff special to v4_0b4
<endif>
<if(engineInfo.v4_0)>
stuff special to v4_0
<endif>

(Rendered with <engineInfo.versionText>)
>>
----------

would output:
---------
stuff special to v4_0b4
(Rendered with StringTemplate 4.0b4)
---------

(Notice: the map key with the version ("v4_0b4") must not start with a digit and not contain a "." (e.g. "4.0") because it could not be used in engineInfo.v4_0b4).

Obviously the (build-in) "system.stg" file could also used to include other interesting information about the system. And it easy to extend and maintain.


Udo



On 12.02.2011, at 21:42, Terence Parr wrote:

> Ah. so in the jar it's okay. cool. I tried to test that, but found javap not in my PATH on the Linux box :(
> Ter
> On Feb 12, 2011, at 12:34 PM, Oliver Zeigermann wrote:
> 
>> Sources remain untouched
>> 
>> Am 12.02.2011 20:26 schrieb "Terence Parr" <parrt at cs.usfca.edu>:
>>> didn't seem to work.
>>> 
>>> public final static String VERSION = "@version@";
>>> 
>>> in src zip.
>>> 
>>> Ter
>>> On Feb 12, 2011, at 2:27 AM, Oliver Zeigermann wrote:
>>> 
>>>> Using ant that is fairly easy. I attached a patch for the ant build
>>>> file that replaces every @version@ inside the source with the version
>>>> information from build.properties (no idea if this is the best
>>>> solution, though).
>>>> 
>>>> E.g. adding
>>>> 
>>>> public final static String VERSION = "@version@";
>>>> 
>>>> to ST.java
>>>> 
>>>> would result to
>>>> 
>>>> public final static String VERSION = "4.0b4";
>>>> 
>>>> in the compiled classes.
>>>> 
>>>> Hope that helps
>>>> 
>>>> - Oliver
>>>> 
>>>> 2011/2/11 Udo Borkowski <ub at abego-software.de>:
>>>>> Hi Ter,
>>>>> 
>>>>> I agree this will only work if the version information (text and/or boolean flag) is really in sync with the version control system (i.e. requires automated solution). Not sure how hard this is to implement.
>>>>> 
>>>>> Regarding the test for the version: I haven't thought of this yet, but it would definitely be useful.
>>>>> 
>>>>> Udo
>>>>> 
>>>>> On 11.02.2011, at 00:55, Terence Parr wrote:
>>>>> 
>>>>>> Hi Udo,
>>>>>> 
>>>>>> Seems like the more common use case would be to test the version number and do something different to avoidable or use a feature only if a particular version is available. but we can't test values in the template so it would have to be a Boolean set for the various versions; might be hard to add one for every random version we make.
>>>>>> 
>>>>>> <if(v4_0b1)>...<endif>
>>>>>> 
>>>>>> Hmm... also I would have to figure out how to make ANT alter my software automatically to include the right version string; it would have to know about perforce version control and so on. setting this by hand would be a problem as it would get out of sync.
>>>>>> 
>>>>>> Ter
>>>>>> On Feb 7, 2011, at 6:25 AM, Udo Borkowski wrote:
>>>>>> 
>>>>>>> Hi,
>>>>>>> 
>>>>>>> what about providing "version information" to be used in a template?
>>>>>>> 
>>>>>>> I got this idea because I was using an older version of the engine (Beta3 instead of Beta4) without noticing.
>>>>>>> 
>>>>>>> 
>>>>>>> One could then use this information e.g. to include a text like
>>>>>>> 
>>>>>>> "(Rendered with StringTemplate 4.0 Beta-4)"
>>>>>>> 
>>>>>>> into generated web pages etc.
>>>>>>> 
>>>>>>> 
>>>>>>> One way to achieve this without adding "build-in" attributes etc. could be extending the class ST.
>>>>>>> 
>>>>>>> E.g. add the following method to the class ST:
>>>>>>> 
>>>>>>> 
>>>>>>> public String getVersionText() {
>>>>>>> return "StringTemplate 4.0 Beta-4";
>>>>>>> }
>>>>>>> 
>>>>>>> 
>>>>>>> Then one could use
>>>>>>> 
>>>>>>> (Rendered with <{ }.versionText>)
>>>>>>> 
>>>>>>> in a template to render
>>>>>>> 
>>>>>>> (Rendered with StringTemplate 4.0 Beta-4)
>>>>>>> 
>>>>>>> 
>>>>>>> Udo
>>>>>>> 
>>>>>>> 
>>>>>>> 
>>>>>>> 
>>>>>>> _______________________________________________
>>>>>>> stringtemplate-interest mailing list
>>>>>>> stringtemplate-interest at antlr.org
>>>>>>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>>>>>> 
>>>>>> _______________________________________________
>>>>>> stringtemplate-interest mailing list
>>>>>> stringtemplate-interest at antlr.org
>>>>>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>>>>> 
>>>>> _______________________________________________
>>>>> stringtemplate-interest mailing list
>>>>> stringtemplate-interest at antlr.org
>>>>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>>>>> 
>>>> <build.xml.patch>_______________________________________________
>>>> stringtemplate-interest mailing list
>>>> stringtemplate-interest at antlr.org
>>>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>>> 
>>> _______________________________________________
>>> stringtemplate-interest mailing list
>>> stringtemplate-interest at antlr.org
>>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
> 
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest


From ub at abego-software.de  Sun Feb 13 01:09:16 2011
From: ub at abego-software.de (Udo Borkowski)
Date: Sun, 13 Feb 2011 10:09:16 +0100
Subject: [stringtemplate-interest] [ST4] How to avoid map key iteration?
In-Reply-To: <24B9706C-57C1-462B-A823-38404C341EDE@cs.usfca.edu>
References: <F3D7C90A-9183-498A-A5CE-4B64041A4945@abego-software.de>
	<24B9706C-57C1-462B-A823-38404C341EDE@cs.usfca.edu>
Message-ID: <D6132A62-9748-424F-B049-6644BF3654F9@abego-software.de>

Hi Ter,

> Hi. my first thought is, don't try to iterate over the object.  
> ...
> <adr:{t|<t.zip> <t.city>}>
:-)

OK, I was trying to make the example as simple as possible, just to show my case. Of cause this simple example could be written as you suggest.

My point is: when writing:

    <adr:{t|<t.zip> <t.city>}>

I don't want to "iterate" over the object but rather pass an argument to the anonymous templates. The "iterate" happens accidently, just because adr also is iterable.


Here the more complete example:

Assume we have this template:

    t1(adr) ::= <<
    <adr.firstname> <adr.lastname>
    <adr.zip> <adr.city>
    >>

With my "bean style" model object I get a result like this:

    ---------
    Joe Smith
    12345 Somecity
   ---------

Most times the format "zip city" is OK. However sometimes it needs to be formatted differently.Therefore I make the second line a parameter with the common case as the default:

    t2(adr,line2={<adr:{a|<a.zip> <a.city>}>}) ::= <<
    <adr.firstname> <adr.lastname>
    <line2>
    >>

This way I can still call the template like this most of the time:

    <t2(adr=p)>

and when a different 2nd line format is needed, I pass it in:

    <t2(adr=p,line2={<adr:{a|<a.city>, <a.zip>}>})>

In this example the result would be:

    ----------
    Joe Smith
    Somecity, 12345
    ----------

This all works fine with the bean-style model object. 

However when I switch to a model object that extends a Map class things break and I get an error like:

    no such property or can't access: java.lang.String.zip 


I hope this somewhat lengthy example make things more clearer.


I guess from a language design point of view I would provide different constructs for the "iterate" vs. "pass argument to anonymous template" case, e.g.

    <adr:{?}>  // the "iterate" case, i.e. "anything iterable" is used as an iterator, as now

    <adr::{?}> // the "pass arg" case, i.e. don't handle iterables differently, just pass in to anon template


Udo


On 11.02.2011, at 17:39, Terence Parr wrote:

> Hi. my first thought is, don't try to iterate over the object.  
> 
> <adr.zip> <adr.city>
> 
> is same as:
> 
> <adr:{t|<t.zip> <t.city>}>
> 
> Ter
> On Feb 11, 2011, at 5:45 AM, Udo Borkowski wrote:
> 
>> Hi,
>> 
>> is there any way to prevent the "iteration" over map keys when using a template like <m:{t|?}> (m may be a map or a simple object)?
>> 
>> Details:
>> 
>> I am using a template like this:
>> 
>> writeAddress(adr) ::= <<
>> ...
>> <adr:{t|<t.zip> <t.city>}>
>> ...
>> >>
>> 
>> adr represents an "Address" with properties "street", "zip", "city" etc.
>> 
>> Initially this was implemented by a bean-style model class Address. Everything worked as expected.
>> 
>> Now I changed the model class to a more "dynamic" implementation by using a Map. I.e. "zip", "city", etc. are now keys in the map, mapping to their resp. values.
>> 
>> Expressions like this:
>> 
>> <a.zip>
>> 
>> still work fine, but 
>> 
>> <adr:{t|<t.zip> <t.city>}>
>> 
>> runs into an error: 
>> 
>> no such property or can't access: java.lang.String.zip
>> 
>> This is because the new model instance "accidentally" is a Map and the expression now iterates over the keys of the map ("zip" being the first).
>> 
>> How can this iteration be avoided?
>> 
>> 
>> Udo
>> 
>> 
>> _______________________________________________
>> stringtemplate-interest mailing list
>> stringtemplate-interest at antlr.org
>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
> 
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20110213/d0c92634/attachment.html 

From ub at abego-software.de  Sun Feb 13 01:28:37 2011
From: ub at abego-software.de (Udo Borkowski)
Date: Sun, 13 Feb 2011 10:28:37 +0100
Subject: [stringtemplate-interest] Moving closer to 4.0 ST release (what
	to do with the doc)
In-Reply-To: <210E6657-F577-4996-917A-88A6B16E6655@cs.usfca.edu>
References: <210E6657-F577-4996-917A-88A6B16E6655@cs.usfca.edu>
Message-ID: <0CD79EBD-F7B1-4C84-B385-A4D5331B8D1B@abego-software.de>

> I'm tempted to simply make a wholesale copy and then tweak it according to the changes in 4.0. 

That would also be my approach. 

Plus a little "what is different between 3 and 4.0" for people switching from 3 to 4.

Udo


On 12.02.2011, at 21:46, Terence Parr wrote:

> Hi,Things seem to be quieting down in the beta. thanks very much to all the help from Udo Borkowski, Sam Harwell, Collin Fagan, Oliver Zeigermann, and others.
> 
> Before I can make a full 4.0 release, however, I need to figure out what to do with the documentation. I'm tempted to simply make a wholesale copy and then tweak it according to the changes in 4.0. One of the things that stops me is that Graham Wideman felt the old documentation wasn't that great. If that's true, then perhaps I should start over from scratch. That is probably unrealistic though given how much I am revving my engines to get restarted on ANTLR 4.0.
> 
> Any suggestions about how to proceed with the documentation would be greatly appreciated!
> 
> Ter
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest


From oliver.zeigermann at gmail.com  Sun Feb 13 01:49:14 2011
From: oliver.zeigermann at gmail.com (Oliver Zeigermann)
Date: Sun, 13 Feb 2011 10:49:14 +0100
Subject: [stringtemplate-interest] Moving closer to 4.0 ST release (what
 to do with the doc)
In-Reply-To: <AANLkTikJmYkcL1uk+_E1GwQGQDwXBjQWb-qDELM4Sy70@mail.gmail.com>
References: <210E6657-F577-4996-917A-88A6B16E6655@cs.usfca.edu>
	<0CD79EBD-F7B1-4C84-B385-A4D5331B8D1B@abego-software.de>
	<AANLkTikJmYkcL1uk+_E1GwQGQDwXBjQWb-qDELM4Sy70@mail.gmail.com>
Message-ID: <AANLkTimr+ZpH+7w=HFLTRLp4T21kJGc77jwM=-+xJwqj@mail.gmail.com>

ST3 documentation was always good enough for me. Mosf of the time the
cheating sheet was all I consulted.

Thus I agree to what Udo said.
Am 13.02.2011 10:28 schrieb "Udo Borkowski" <ub at abego-software.de>:
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20110213/3ae4f811/attachment.html 

From collin.fagan at gmail.com  Sun Feb 13 07:31:32 2011
From: collin.fagan at gmail.com (Collin Fagan)
Date: Sun, 13 Feb 2011 09:31:32 -0600
Subject: [stringtemplate-interest] Moving closer to 4.0 ST release (what
 to do with the doc)
In-Reply-To: <AANLkTimr+ZpH+7w=HFLTRLp4T21kJGc77jwM=-+xJwqj@mail.gmail.com>
References: <210E6657-F577-4996-917A-88A6B16E6655@cs.usfca.edu>
	<0CD79EBD-F7B1-4C84-B385-A4D5331B8D1B@abego-software.de>
	<AANLkTikJmYkcL1uk+_E1GwQGQDwXBjQWb-qDELM4Sy70@mail.gmail.com>
	<AANLkTimr+ZpH+7w=HFLTRLp4T21kJGc77jwM=-+xJwqj@mail.gmail.com>
Message-ID: <AANLkTi=1hAvyB6DfpQ5nV_WgVga9_LvOAdNoocSjmnQC@mail.gmail.com>

I learned a lot from the ST3 documentation but I still think it could
benefit from some attention.

Here are some things I consider "missing", I apologise if these are well
documented and I just can't find them.

If statements support "and" and "or" logic.
<if(thing && otherThing)>
... do stuff ...
<endif>

Using (" ") for map keys that contain special characters. (Wait, was that
even in ST3?)


Also I can also never *quickly* find the following information, even though
it is present.

Syntax for a map. - I never remember it.

/**/ for comments in-between templates in a template group. -- I went a
loong time without knowing this one, which was silly of me.

All of this is easily fixable.

At this point I would recommend each of us take a few minuets and try to put
ourselves in the shoes of a beginner who just stumbled onto the ST project,
then re-read the documentation. That might help highlight anything that
might be missing.

Collin



On Sun, Feb 13, 2011 at 3:49 AM, Oliver Zeigermann <
oliver.zeigermann at gmail.com> wrote:

> ST3 documentation was always good enough for me. Mosf of the time the
> cheating sheet was all I consulted.
>
> Thus I agree to what Udo said.
> Am 13.02.2011 10:28 schrieb "Udo Borkowski" <ub at abego-software.de>:
>
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20110213/016330b9/attachment.html 

From sharwell at pixelminegames.com  Sun Feb 13 09:09:10 2011
From: sharwell at pixelminegames.com (Sam Harwell)
Date: Sun, 13 Feb 2011 11:09:10 -0600
Subject: [stringtemplate-interest] [ST4] How to avoid map key iteration?
In-Reply-To: <D6132A62-9748-424F-B049-6644BF3654F9@abego-software.de>
References: <F3D7C90A-9183-498A-A5CE-4B64041A4945@abego-software.de>	<24B9706C-57C1-462B-A823-38404C341EDE@cs.usfca.edu>
	<D6132A62-9748-424F-B049-6644BF3654F9@abego-software.de>
Message-ID: <005801cbcba0$bbad3e10$3307ba30$@pixelminegames.com>

If you write it this way:

 

t2(adr,line2={<adr.zip> <adr.city>}) ::= <<

<adr.firstname> <adr.lastname>

<line2>

>> 

 

Then you can do this:

 

<t2(adr=p,line2={<adr.city>, <a.zip>})>

 

Sam

 

From: stringtemplate-interest-bounces at antlr.org
[mailto:stringtemplate-interest-bounces at antlr.org] On Behalf Of Udo
Borkowski
Sent: Sunday, February 13, 2011 3:09 AM
To: Terence Parr
Cc: stringtemplate-interest List
Subject: Re: [stringtemplate-interest] [ST4] How to avoid map key iteration?

 

Hi Ter,





Hi. my first thought is, don't try to iterate over the object.  

...

<adr:{t|<t.zip> <t.city>}>

:-)

 

OK, I was trying to make the example as simple as possible, just to show my
case. Of cause this simple example could be written as you suggest.

 

My point is: when writing:

 

    <adr:{t|<t.zip> <t.city>}>

 

I don't want to "iterate" over the object but rather pass an argument to the
anonymous templates. The "iterate" happens accidently, just because adr also
is iterable.

 

 

Here the more complete example:

 

Assume we have this template:

 

    t1(adr) ::= <<

    <adr.firstname> <adr.lastname>

    <adr.zip> <adr.city>

    >>

 

With my "bean style" model object I get a result like this:

 

    ---------

    Joe Smith

    12345 Somecity

   ---------

 

Most times the format "zip city" is OK. However sometimes it needs to be
formatted differently.Therefore I make the second line a parameter with the
common case as the default:

 

    t2(adr,line2={<adr:{a|<a.zip> <a.city>}>}) ::= <<

    <adr.firstname> <adr.lastname>

    <line2>

    >>

 

This way I can still call the template like this most of the time:

 

    <t2(adr=p)>

 

and when a different 2nd line format is needed, I pass it in:

 

    <t2(adr=p,line2={<adr:{a|<a.city>, <a.zip>}>})>

 

In this example the result would be:

 

    ----------

    Joe Smith

    Somecity, 12345

    ----------

 

This all works fine with the bean-style model object. 

 

However when I switch to a model object that extends a Map class things
break and I get an error like:

 

    no such property or can't access: java.lang.String.zip 

 

 

I hope this somewhat lengthy example make things more clearer.

 

 

I guess from a language design point of view I would provide different
constructs for the "iterate" vs. "pass argument to anonymous template" case,
e.g.

 

    <adr:{.}>  // the "iterate" case, i.e. "anything iterable" is used as an
iterator, as now

 

    <adr::{.}> // the "pass arg" case, i.e. don't handle iterables
differently, just pass in to anon template

 

 

Udo

 

 

On 11.02.2011, at 17:39, Terence Parr wrote:





Hi. my first thought is, don't try to iterate over the object.  

 

<adr.zip> <adr.city>

 

is same as:

 

<adr:{t|<t.zip> <t.city>}>

 

Ter

On Feb 11, 2011, at 5:45 AM, Udo Borkowski wrote:





Hi,

 

is there any way to prevent the "iteration" over map keys when using a
template like <m:{t|.}> (m may be a map or a simple object)?

 

Details:

 

I am using a template like this:

 

writeAddress(adr) ::= <<

...

<adr:{t|<t.zip> <t.city>}>

...

>> 

 

adr represents an "Address" with properties "street", "zip", "city" etc.

 

Initially this was implemented by a bean-style model class Address.
Everything worked as expected.

 

Now I changed the model class to a more "dynamic" implementation by using a
Map. I.e. "zip", "city", etc. are now keys in the map, mapping to their
resp. values.

 

Expressions like this:

 

<a.zip>

 

still work fine, but 

 

<adr:{t|<t.zip> <t.city>}>

 

runs into an error: 

 

no such property or can't access: java.lang.String.zip

 

This is because the new model instance "accidentally" is a Map and the
expression now iterates over the keys of the map ("zip" being the first).

 

How can this iteration be avoided?

 

 

Udo

 

 

_______________________________________________
stringtemplate-interest mailing list
stringtemplate-interest at antlr.org
http://www.antlr.org/mailman/listinfo/stringtemplate-interest

 

_______________________________________________
stringtemplate-interest mailing list
stringtemplate-interest at antlr.org
http://www.antlr.org/mailman/listinfo/stringtemplate-interest

 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20110213/9299f7dd/attachment-0001.html 

From ub at abego-software.de  Sun Feb 13 11:35:46 2011
From: ub at abego-software.de (Udo Borkowski)
Date: Sun, 13 Feb 2011 20:35:46 +0100
Subject: [stringtemplate-interest] Moving closer to 4.0 ST release (what
	to do with the doc)
In-Reply-To: <AANLkTi=1hAvyB6DfpQ5nV_WgVga9_LvOAdNoocSjmnQC@mail.gmail.com>
References: <210E6657-F577-4996-917A-88A6B16E6655@cs.usfca.edu>
	<0CD79EBD-F7B1-4C84-B385-A4D5331B8D1B@abego-software.de>
	<AANLkTikJmYkcL1uk+_E1GwQGQDwXBjQWb-qDELM4Sy70@mail.gmail.com>
	<AANLkTimr+ZpH+7w=HFLTRLp4T21kJGc77jwM=-+xJwqj@mail.gmail.com>
	<AANLkTi=1hAvyB6DfpQ5nV_WgVga9_LvOAdNoocSjmnQC@mail.gmail.com>
Message-ID: <8C7DF785-2B5D-4CAC-AD85-12B94595D11C@abego-software.de>

I don't know if this is practical and efficient to do: 

what about providing separate "For Java Developer", "For C# Developer" and "For Python Developer" documents, beside the ones that handle all languages in one place with sections like:


Java	
StringTemplate query = new StringTemplate("SELECT $column; separator=\",\"$ FROM $table$;");
query.setAttribute("column", "name");
query.setAttribute("column", "email");
query.setAttribute("table", "User");
C#	
StringTemplate query = new StringTemplate("SELECT $column; separator=\",\"$ FROM $table$;");
query.SetAttribute("column", "name");
query.SetAttribute("column", "email");
query.SetAttribute("table", "User");
Python	
query = stringtemplate3.StringTemplate("SELECT $column; separator=\",\"$ FROM $table$;")
query["column"] = "name"
query["column"] = "email"
query["table"] = "User"


I found it very disturbing (at least at the beginning) to find these blocks, read "my section", skip the other section and continue reading the common text.

Depending on how the documents are "generated" providing these 4 flavors may be not such a big effort.

And maybe add a little "document overview" chapter explain the purpose/differences of the different documents. E.g. when I started I was wondering if it is sufficient to read the "StringTemplate Condensed" stuff or if I am missing something important. The "Documentation Map" is fine, but something more "prose" would be fine. Maybe also some kind of "suggested reading list", depending on the different kinds of users.


Udo



On 13.02.2011, at 16:31, Collin Fagan wrote:

> I learned a lot from the ST3 documentation but I still think it could benefit from some attention.
> 
> Here are some things I consider "missing", I apologise if these are well documented and I just can't find them.
> 
> If statements support "and" and "or" logic.
> <if(thing && otherThing)>
> ... do stuff ...
> <endif>
> 
> Using (" ") for map keys that contain special characters. (Wait, was that even in ST3?)
> 
> 
> Also I can also never quickly find the following information, even though it is present.
> 
> Syntax for a map. - I never remember it. 
> 
> /**/ for comments in-between templates in a template group. -- I went a loong time without knowing this one, which was silly of me. 
> 
> All of this is easily fixable. 
> 
> At this point I would recommend each of us take a few minuets and try to put ourselves in the shoes of a beginner who just stumbled onto the ST project, then re-read the documentation. That might help highlight anything that might be missing. 
> 
> Collin
> 
> 
> 
> On Sun, Feb 13, 2011 at 3:49 AM, Oliver Zeigermann <oliver.zeigermann at gmail.com> wrote:
> ST3 documentation was always good enough for me. Mosf of the time the cheating sheet was all I consulted.
> 
> Thus I agree to what Udo said.
> 
> Am 13.02.2011 10:28 schrieb "Udo Borkowski" <ub at abego-software.de>:
> 
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
> 
> 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20110213/c9384573/attachment.html 

From ub at abego-software.de  Mon Feb 14 01:20:51 2011
From: ub at abego-software.de (Udo Borkowski)
Date: Mon, 14 Feb 2011 10:20:51 +0100
Subject: [stringtemplate-interest] [ST4] How to avoid map key iteration?
In-Reply-To: <005801cbcba0$bbad3e10$3307ba30$@pixelminegames.com>
References: <F3D7C90A-9183-498A-A5CE-4B64041A4945@abego-software.de>	<24B9706C-57C1-462B-A823-38404C341EDE@cs.usfca.edu>
	<D6132A62-9748-424F-B049-6644BF3654F9@abego-software.de>
	<005801cbcba0$bbad3e10$3307ba30$@pixelminegames.com>
Message-ID: <4CF35297-AB87-4215-B872-98EEB92ED4F5@abego-software.de>

Hi Sam,

> If you write it this way:
>  ...
>  <t2(adr=p,line2={<adr.city>, <adr.zip>})>

Good point.

I guess it is just my personal style (and background) that makes me raise the issue. Inside a subtemplate I'd prefer to access the parameters of the subtemplate (the {p1,p2|?}) over the access of something outside of the subtemplate, especially with the dynamic name lookup of ST4 in mind.


Udo

On 13.02.2011, at 18:09, Sam Harwell wrote:

> If you write it this way:
>  
> t2(adr,line2={<adr.zip> <adr.city>}) ::= <<
> <adr.firstname> <adr.lastname>
> <line2>
> >> 
>  
> Then you can do this:
>  
> <t2(adr=p,line2={<adr.city>, <a.zip>})>
>  
> Sam
>  
> From: stringtemplate-interest-bounces at antlr.org [mailto:stringtemplate-interest-bounces at antlr.org] On Behalf Of Udo Borkowski
> Sent: Sunday, February 13, 2011 3:09 AM
> To: Terence Parr
> Cc: stringtemplate-interest List
> Subject: Re: [stringtemplate-interest] [ST4] How to avoid map key iteration?
>  
> Hi Ter,
> 
> 
> Hi. my first thought is, don't try to iterate over the object.  
> ...
> <adr:{t|<t.zip> <t.city>}>
> :-)
>  
> OK, I was trying to make the example as simple as possible, just to show my case. Of cause this simple example could be written as you suggest.
>  
> My point is: when writing:
>  
>     <adr:{t|<t.zip> <t.city>}>
>  
> I don't want to "iterate" over the object but rather pass an argument to the anonymous templates. The "iterate" happens accidently, just because adr also is iterable.
>  
>  
> Here the more complete example:
>  
> Assume we have this template:
>  
>     t1(adr) ::= <<
>     <adr.firstname> <adr.lastname>
>     <adr.zip> <adr.city>
>     >>
>  
> With my "bean style" model object I get a result like this:
>  
>     ---------
>     Joe Smith
>     12345 Somecity
>    ---------
>  
> Most times the format "zip city" is OK. However sometimes it needs to be formatted differently.Therefore I make the second line a parameter with the common case as the default:
>  
>     t2(adr,line2={<adr:{a|<a.zip> <a.city>}>}) ::= <<
>     <adr.firstname> <adr.lastname>
>     <line2>
>     >>
>  
> This way I can still call the template like this most of the time:
>  
>     <t2(adr=p)>
>  
> and when a different 2nd line format is needed, I pass it in:
>  
>     <t2(adr=p,line2={<adr:{a|<a.city>, <a.zip>}>})>
>  
> In this example the result would be:
>  
>     ----------
>     Joe Smith
>     Somecity, 12345
>     ----------
>  
> This all works fine with the bean-style model object. 
>  
> However when I switch to a model object that extends a Map class things break and I get an error like:
>  
>     no such property or can't access: java.lang.String.zip 
>  
>  
> I hope this somewhat lengthy example make things more clearer.
>  
>  
> I guess from a language design point of view I would provide different constructs for the "iterate" vs. "pass argument to anonymous template" case, e.g.
>  
>     <adr:{?}>  // the "iterate" case, i.e. "anything iterable" is used as an iterator, as now
>  
>     <adr::{?}> // the "pass arg" case, i.e. don't handle iterables differently, just pass in to anon template
>  
>  
> Udo
>  
>  
> On 11.02.2011, at 17:39, Terence Parr wrote:
> 
> 
> Hi. my first thought is, don't try to iterate over the object.  
>  
> <adr.zip> <adr.city>
>  
> is same as:
>  
> <adr:{t|<t.zip> <t.city>}>
>  
> Ter
> On Feb 11, 2011, at 5:45 AM, Udo Borkowski wrote:
> 
> 
> Hi,
>  
> is there any way to prevent the "iteration" over map keys when using a template like <m:{t|?}> (m may be a map or a simple object)?
>  
> Details:
>  
> I am using a template like this:
>  
> writeAddress(adr) ::= <<
> ...
> <adr:{t|<t.zip> <t.city>}>
> ...
> >> 
>  
> adr represents an "Address" with properties "street", "zip", "city" etc.
>  
> Initially this was implemented by a bean-style model class Address. Everything worked as expected.
>  
> Now I changed the model class to a more "dynamic" implementation by using a Map. I.e. "zip", "city", etc. are now keys in the map, mapping to their resp. values.
>  
> Expressions like this:
>  
> <a.zip>
>  
> still work fine, but 
>  
> <adr:{t|<t.zip> <t.city>}>
>  
> runs into an error: 
>  
> no such property or can't access: java.lang.String.zip
>  
> This is because the new model instance "accidentally" is a Map and the expression now iterates over the keys of the map ("zip" being the first).
>  
> How can this iteration be avoided?
>  
>  
> Udo
>  
>  
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>  
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>  

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20110214/5974b599/attachment-0001.html 

From sharwell at pixelminegames.com  Mon Feb 14 06:35:13 2011
From: sharwell at pixelminegames.com (Sam Harwell)
Date: Mon, 14 Feb 2011 08:35:13 -0600
Subject: [stringtemplate-interest] [ST4] How to avoid map key iteration?
In-Reply-To: <4CF35297-AB87-4215-B872-98EEB92ED4F5@abego-software.de>
References: <F3D7C90A-9183-498A-A5CE-4B64041A4945@abego-software.de>	<24B9706C-57C1-462B-A823-38404C341EDE@cs.usfca.edu>
	<D6132A62-9748-424F-B049-6644BF3654F9@abego-software.de>
	<005801cbcba0$bbad3e10$3307ba30$@pixelminegames.com>
	<4CF35297-AB87-4215-B872-98EEB92ED4F5@abego-software.de>
Message-ID: <009a01cbcc54$64bc43d0$2e34cb70$@pixelminegames.com>

Hi Udo,

 

The problem is the operation in use when you write it the way you originally
did - the ':' is a map operation as opposed to a pass to a function method.
In theory, the following syntax could solve the problem:

 

t2(adr,line2={x|<x.zip> <x.city>}) ::= <<

<adr.firstname> <adr.lastname>

<line2(adr)>

>> 

 

I know this syntax doesn't work in ST3, and I'm guessing it doesn't in ST4
either. Considering the way parameters and local variables work in many
languages, I don't think allowing this would be unexpected.

 

Sam

 

From: Udo Borkowski [mailto:ub at abego-software.de] 
Sent: Monday, February 14, 2011 3:21 AM
To: Sam Harwell
Cc: stringtemplate-interest List
Subject: Re: [stringtemplate-interest] [ST4] How to avoid map key iteration?

 

Hi Sam,

 

If you write it this way:

 ...

 <t2(adr=p,line2={<adr.city>, <adr.zip>})>

 

Good point.

 

I guess it is just my personal style (and background) that makes me raise
the issue. Inside a subtemplate I'd prefer to access the parameters of the
subtemplate (the {p1,p2|.}) over the access of something outside of the
subtemplate, especially with the dynamic name lookup of ST4 in mind.

 

 

Udo

 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20110214/cca2539d/attachment.html 

From ub at abego-software.de  Mon Feb 14 08:01:26 2011
From: ub at abego-software.de (Udo Borkowski)
Date: Mon, 14 Feb 2011 17:01:26 +0100
Subject: [stringtemplate-interest] [ST4] How to avoid map key iteration?
In-Reply-To: <009a01cbcc54$64bc43d0$2e34cb70$@pixelminegames.com>
References: <F3D7C90A-9183-498A-A5CE-4B64041A4945@abego-software.de>	<24B9706C-57C1-462B-A823-38404C341EDE@cs.usfca.edu>
	<D6132A62-9748-424F-B049-6644BF3654F9@abego-software.de>
	<005801cbcba0$bbad3e10$3307ba30$@pixelminegames.com>
	<4CF35297-AB87-4215-B872-98EEB92ED4F5@abego-software.de>
	<009a01cbcc54$64bc43d0$2e34cb70$@pixelminegames.com>
Message-ID: <F2D2392B-05F1-422B-8190-ECF8C38582DC@abego-software.de>

Hi Sam,

your suggestion of using a syntax like "line2(adr)" to invoke an anonymous template goes exactly in a direction I was thinking for a while now: 

(Start of dreams of the future)

The "Unified ST4 template" syntax 

Currently we defined "normal" templates like

    t1(p1,p2) ::= <<?>> 

or 

    t1(p1,p2) ::= "?"

Anonymous templates (or sub templates) are defines like 

    {p1,p2| ?}.


What about defining a "normal" template like this:

    t1 = {p1,p2| ?}

I.e. a "normal" template is just an anonymous template with a name, i.e. the template can be referenced through this name.

To invoke a template use the same syntax as before:  

    <t1(x,y)>

However one can also just *reference* a template (without invoking it), just by naming it without the (...).

The "iterate" feature would work on a (named or anonymous) template (as now), but would get a slightly different syntax for named templates:

    <x,y:t1>     

I.e. no "t1()" as with a template invocation, but just "t1" to reference the template. This perfectly fits into the "<x,y:{?}>" syntax: here the "{?}" is not written as "{?}()", too.

This changed syntax also makes the difference between a normal template call:

	<t2()>

and the iterate feature:

	<x,y:t1>

a little bit more obvious. (Another way to see this: the () behind the template name in an iterate feature serve no real purpose, they will always be empty).

To come back to my initial question "how to avoid map key iteration" I could imagine an extension to the "iterate" syntax:

Either

	<x*,y:t1>

Meaning: only the x parameter is used as an iterator, the other parameters are just passed to the template unchanged.

Or

	<x,y!:t1>

Meaning: every parameter not marked with "!" is used as an iterator.

( '*' and '!' are just used as examples. Use your favorite syntax here to mark a parameter either as "iterator" or as "pure value").


(End of dreams of the future)


Udo


On 14.02.2011, at 15:35, Sam Harwell wrote:

> Hi Udo,
>  
> The problem is the operation in use when you write it the way you originally did ? the ?:? is a map operation as opposed to a pass to a function method. In theory, the following syntax could solve the problem:
>  
> t2(adr,line2={x|<x.zip> <x.city>}) ::= <<
> <adr.firstname> <adr.lastname>
> <line2(adr)>
> >> 
>  
> I know this syntax doesn?t work in ST3, and I?m guessing it doesn?t in ST4 either. Considering the way parameters and local variables work in many languages, I don?t think allowing this would be unexpected.
>  
> Sam
>  
> From: Udo Borkowski [mailto:ub at abego-software.de] 
> Sent: Monday, February 14, 2011 3:21 AM
> To: Sam Harwell
> Cc: stringtemplate-interest List
> Subject: Re: [stringtemplate-interest] [ST4] How to avoid map key iteration?
>  
> Hi Sam,
>  
> If you write it this way:
>  ...
>  <t2(adr=p,line2={<adr.city>, <adr.zip>})>
>  
> Good point.
>  
> I guess it is just my personal style (and background) that makes me raise the issue. Inside a subtemplate I'd prefer to access the parameters of the subtemplate (the {p1,p2|?}) over the access of something outside of the subtemplate, especially with the dynamic name lookup of ST4 in mind.
>  
>  
> Udo
>  

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20110214/5be6e251/attachment.html 

From jab.antlr at species.org  Mon Feb 14 21:24:01 2011
From: jab.antlr at species.org (James Briant)
Date: Mon, 14 Feb 2011 21:24:01 -0800
Subject: [stringtemplate-interest] C# 3.2 Source Code
In-Reply-To: <2919A3AA-E75E-4A0C-A1E7-0362D005D0C0@cs.usfca.edu>
References: <AANLkTimv5YhUhRYFBHLTPiB5auz6jt-zqdeTvwoxPhbD@mail.gmail.com>
	<2919A3AA-E75E-4A0C-A1E7-0362D005D0C0@cs.usfca.edu>
Message-ID: <AANLkTikbdAYti_wS=yXxfY7YHEw4n-uTqytK9yoYWDmN@mail.gmail.com>

Yes please. The site has the binaries for 3.2, but no source code. I need to
hack on it quite badly!

Thanks,

Jamie

On Wed, Feb 9, 2011 at 5:50 PM, Terence Parr <parrt at cs.usfca.edu> wrote:

> well,I see this link from the download page
>
> http://www.stringtemplate.org/download/StringTemplate.Net.v3.0.1.src.zip
>
> but are you looking for Sam Harwell's latest stuff?
>
> Ter
>
> On Feb 8, 2011, at 7:59 PM, James Briant wrote:
>
> > How to get it? I see the link to fisheye, but how do I download off that?
> Alternatively, can we get a source download .zip file like the java one. Or
> better yet, how about githug?
> > Thanks,
> >
> > Jamie
> > _______________________________________________
> > stringtemplate-interest mailing list
> > stringtemplate-interest at antlr.org
> > http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20110214/97c74793/attachment.html 

From jab.antlr at species.org  Mon Feb 14 21:29:35 2011
From: jab.antlr at species.org (James Briant)
Date: Mon, 14 Feb 2011 21:29:35 -0800
Subject: [stringtemplate-interest] [ST4] How to avoid map key iteration?
In-Reply-To: <F2D2392B-05F1-422B-8190-ECF8C38582DC@abego-software.de>
References: <F3D7C90A-9183-498A-A5CE-4B64041A4945@abego-software.de>
	<24B9706C-57C1-462B-A823-38404C341EDE@cs.usfca.edu>
	<D6132A62-9748-424F-B049-6644BF3654F9@abego-software.de>
	<005801cbcba0$bbad3e10$3307ba30$@pixelminegames.com>
	<4CF35297-AB87-4215-B872-98EEB92ED4F5@abego-software.de>
	<009a01cbcc54$64bc43d0$2e34cb70$@pixelminegames.com>
	<F2D2392B-05F1-422B-8190-ECF8C38582DC@abego-software.de>
Message-ID: <AANLkTimF2pdE3Vs2qtAXLFp=yRKQOZqFDmiE1ioJf-iG@mail.gmail.com>

I ran into this problem a while back on Java and I just hacked ST so it
wouldn't iterate Maps.

Jamie

On Mon, Feb 14, 2011 at 8:01 AM, Udo Borkowski <ub at abego-software.de> wrote:

> Hi Sam,
>
> your suggestion of using a syntax like "line2(adr)" to invoke an anonymous
> template goes exactly in a direction I was thinking for a while now:
>
> (Start of dreams of the future)
>
> The "Unified ST4 template" syntax
>
> Currently we defined "normal" templates like
>
>     t1(p1,p2) ::= <<?>>
>
> or
>
>     t1(p1,p2) ::= "?"
>
> Anonymous templates (or sub templates) are defines like
>
>     {p1,p2| ?}.
>
>
> What about defining a "normal" template like this:
>
>     t1 = {p1,p2| ?}
>
> I.e. a "normal" template is just an anonymous template with a name, i.e.
> the template can be referenced through this name.
>
> To invoke a template use the same syntax as before:
>
>     <t1(x,y)>
>
> However one can also just *reference* a template (without invoking it),
> just by naming it without the (...).
>
> The "iterate" feature would work on a (named or anonymous) template (as
> now), but would get a slightly different syntax for named templates:
>
>     <x,y:t1>
>
> I.e. no "t1()" as with a template invocation, but just "t1" to reference
> the template. This perfectly fits into the "<x,y:{?}>" syntax: here the
> "{?}" is not written as "{?}()", too.
>
> This changed syntax also makes the difference between a normal template
> call:
>
> <t2()>
>
> and the iterate feature:
>
> <x,y:t1>
>
> a little bit more obvious. (Another way to see this: the () behind the
> template name in an iterate feature serve no real purpose, they will always
> be empty).
>
> To come back to my initial question "how to avoid map key iteration" I
> could imagine an extension to the "iterate" syntax:
>
> Either
>
> <x*,y:t1>
>
> Meaning: only the x parameter is used as an iterator, the other parameters
> are just passed to the template unchanged.
>
> Or
>
> <x,y!:t1>
>
> Meaning: every parameter not marked with "!" is used as an iterator.
>
> ( '*' and '!' are just used as examples. Use your favorite syntax here to
> mark a parameter either as "iterator" or as "pure value").
>
>
> (End of dreams of the future)
>
>
> Udo
>
>
> On 14.02.2011, at 15:35, Sam Harwell wrote:
>
> Hi Udo,
>
> The problem is the operation in use when you write it the way you
> originally did ? the ?:? is a map operation as opposed to a pass to a
> function method. In theory, the following syntax could solve the problem:
>
> t2(adr,line2={x|<x.zip> <x.city>}) ::= <<
> <adr.firstname> <adr.lastname>
> <line2(adr)>
> >>
>
> I know this syntax doesn?t work in ST3, and I?m guessing it doesn?t in ST4
> either. Considering the way parameters and local variables work in many
> languages, I don?t think allowing this would be unexpected.
>
> Sam
>
> *From:* Udo Borkowski [mailto:ub at abego-software.de]
> *Sent:* Monday, February 14, 2011 3:21 AM
> *To:* Sam Harwell
> *Cc:* stringtemplate-interest List
> *Subject:* Re: [stringtemplate-interest] [ST4] How to avoid map key
> iteration?
>
> Hi Sam,
>
>
> If you write it this way:
>  ...
>  <t2(adr=p,line2={<adr.city>, <adr.zip>})>
>
>
> Good point.
>
> I guess it is just my personal style (and background) that makes me raise
> the issue. Inside a subtemplate I'd prefer to access the parameters of the
> subtemplate (the {p1,p2|?}) over the access of something outside of the
> subtemplate, especially with the dynamic name lookup of ST4 in mind.
>
>
> Udo
>
>
>
>
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20110214/a1902dd2/attachment.html 

From jab.antlr at species.org  Mon Feb 14 21:44:11 2011
From: jab.antlr at species.org (James Briant)
Date: Mon, 14 Feb 2011 21:44:11 -0800
Subject: [stringtemplate-interest] Strum - ST4 extension project v0.01
	(alpha)
In-Reply-To: <AANLkTinpj7VdojH5AYpyo9cdjupdSrsN9mFSARfUAUQm@mail.gmail.com>
References: <AANLkTinnqJCedV1bCf_Nbp-gMnGTGaZxR5fSFrBEqT=T@mail.gmail.com>
	<103FF020-6A38-4B4A-94D7-2F1ADB45AF75@cs.usfca.edu>
	<AANLkTinpj7VdojH5AYpyo9cdjupdSrsN9mFSARfUAUQm@mail.gmail.com>
Message-ID: <AANLkTimMVNystbF4unkxkKYO+h1imNk+-XrkNgk6V90W@mail.gmail.com>

Any chance you can stick it on github and use submodules to keep it in sync
with ST4?
Thx,
Jamie

On Thu, Feb 10, 2011 at 4:06 PM, Collin Fagan <collin.fagan at gmail.com>wrote:

> Thank you, oh and I noticed that you added write methods to ST in ST4 that
> take files, thank you for that too.
>
> On Feb 10, 2011 5:59 PM, "Terence Parr" <parrt at cs.usfca.edu> wrote:
>
> Hi Collin,This all looks pretty cool. I added it to the filesharing area
>
> http://www.stringtemplate.org/share/list
>
> Ter
>
> On Feb 7, 2011, at 5:18 PM, Collin Fagan wrote:
>
> > Hi Everyone,
> >
> > I was encouraged to start my ow...
>
> > _______________________________________________
> > stringtemplate-interest mailing list
> > stringtem...
>
>
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20110214/868593fc/attachment-0001.html 

From ub at abego-software.de  Mon Feb 14 23:22:14 2011
From: ub at abego-software.de (Udo Borkowski)
Date: Tue, 15 Feb 2011 08:22:14 +0100
Subject: [stringtemplate-interest] [ST4] How to avoid map key iteration?
In-Reply-To: <AANLkTimF2pdE3Vs2qtAXLFp=yRKQOZqFDmiE1ioJf-iG@mail.gmail.com>
References: <F3D7C90A-9183-498A-A5CE-4B64041A4945@abego-software.de>
	<24B9706C-57C1-462B-A823-38404C341EDE@cs.usfca.edu>
	<D6132A62-9748-424F-B049-6644BF3654F9@abego-software.de>
	<005801cbcba0$bbad3e10$3307ba30$@pixelminegames.com>
	<4CF35297-AB87-4215-B872-98EEB92ED4F5@abego-software.de>
	<009a01cbcc54$64bc43d0$2e34cb70$@pixelminegames.com>
	<F2D2392B-05F1-422B-8190-ECF8C38582DC@abego-software.de>
	<AANLkTimF2pdE3Vs2qtAXLFp=yRKQOZqFDmiE1ioJf-iG@mail.gmail.com>
Message-ID: <F76FCFDE-4EB7-46B0-A2E7-289090CA5E97@abego-software.de>

Hi Jamie,

> I ran into this problem a while back on Java and I just hacked ST so it wouldn't iterate Maps. 

thanks for your post. Good to know I am not the only one running into this issue ;-)

Udo

On 15.02.2011, at 06:29, James Briant wrote:

> I ran into this problem a while back on Java and I just hacked ST so it wouldn't iterate Maps. 
> 
> Jamie
> 
> On Mon, Feb 14, 2011 at 8:01 AM, Udo Borkowski <ub at abego-software.de> wrote:
> Hi Sam,
> 
> your suggestion of using a syntax like "line2(adr)" to invoke an anonymous template goes exactly in a direction I was thinking for a while now: 
> 
> (Start of dreams of the future)
> 
> The "Unified ST4 template" syntax 
> 
> Currently we defined "normal" templates like
> 
>     t1(p1,p2) ::= <<?>> 
> 
> or 
> 
>     t1(p1,p2) ::= "?"
> 
> Anonymous templates (or sub templates) are defines like 
> 
>     {p1,p2| ?}.
> 
> 
> What about defining a "normal" template like this:
> 
>     t1 = {p1,p2| ?}
> 
> I.e. a "normal" template is just an anonymous template with a name, i.e. the template can be referenced through this name.
> 
> To invoke a template use the same syntax as before:  
> 
>     <t1(x,y)>
> 
> However one can also just *reference* a template (without invoking it), just by naming it without the (...).
> 
> The "iterate" feature would work on a (named or anonymous) template (as now), but would get a slightly different syntax for named templates:
> 
>     <x,y:t1>     
> 
> I.e. no "t1()" as with a template invocation, but just "t1" to reference the template. This perfectly fits into the "<x,y:{?}>" syntax: here the "{?}" is not written as "{?}()", too.
> 
> This changed syntax also makes the difference between a normal template call:
> 
> 	<t2()>
> 
> and the iterate feature:
> 
> 	<x,y:t1>
> 
> a little bit more obvious. (Another way to see this: the () behind the template name in an iterate feature serve no real purpose, they will always be empty).
> 
> To come back to my initial question "how to avoid map key iteration" I could imagine an extension to the "iterate" syntax:
> 
> Either
> 
> 	<x*,y:t1>
> 
> Meaning: only the x parameter is used as an iterator, the other parameters are just passed to the template unchanged.
> 
> Or
> 
> 	<x,y!:t1>
> 
> Meaning: every parameter not marked with "!" is used as an iterator.
> 
> ( '*' and '!' are just used as examples. Use your favorite syntax here to mark a parameter either as "iterator" or as "pure value").
> 
> 
> (End of dreams of the future)
> 
> 
> Udo
> 
> 
> On 14.02.2011, at 15:35, Sam Harwell wrote:
> 
>> Hi Udo,
>>  
>> The problem is the operation in use when you write it the way you originally did ? the ?:? is a map operation as opposed to a pass to a function method. In theory, the following syntax could solve the problem:
>>  
>> t2(adr,line2={x|<x.zip> <x.city>}) ::= <<
>> <adr.firstname> <adr.lastname>
>> <line2(adr)>
>> >> 
>>  
>> I know this syntax doesn?t work in ST3, and I?m guessing it doesn?t in ST4 either. Considering the way parameters and local variables work in many languages, I don?t think allowing this would be unexpected.
>>  
>> Sam
>>  
>> From: Udo Borkowski [mailto:ub at abego-software.de] 
>> Sent: Monday, February 14, 2011 3:21 AM
>> To: Sam Harwell
>> Cc: stringtemplate-interest List
>> Subject: Re: [stringtemplate-interest] [ST4] How to avoid map key iteration?
>>  
>> Hi Sam,
>>  
>> If you write it this way:
>>  ...
>>  <t2(adr=p,line2={<adr.city>, <adr.zip>})>
>>  
>> Good point.
>>  
>> I guess it is just my personal style (and background) that makes me raise the issue. Inside a subtemplate I'd prefer to access the parameters of the subtemplate (the {p1,p2|?}) over the access of something outside of the subtemplate, especially with the dynamic name lookup of ST4 in mind.
>>  
>>  
>> Udo
>>  
> 
> 
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
> 
> 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20110215/188197ad/attachment.html 

From sharwell at pixelminegames.com  Tue Feb 15 06:47:09 2011
From: sharwell at pixelminegames.com (Sam Harwell)
Date: Tue, 15 Feb 2011 08:47:09 -0600
Subject: [stringtemplate-interest] C# 3.2 Source Code
In-Reply-To: <AANLkTikbdAYti_wS=yXxfY7YHEw4n-uTqytK9yoYWDmN@mail.gmail.com>
References: <AANLkTimv5YhUhRYFBHLTPiB5auz6jt-zqdeTvwoxPhbD@mail.gmail.com>	<2919A3AA-E75E-4A0C-A1E7-0362D005D0C0@cs.usfca.edu>
	<AANLkTikbdAYti_wS=yXxfY7YHEw4n-uTqytK9yoYWDmN@mail.gmail.com>
Message-ID: <004501cbcd1f$3a05a5c0$ae10f140$@pixelminegames.com>

Hi Jamie,

 

I don't have a copy of the code from that build handy, but I'll work on
getting a new one together later today.

 

Sam

 

 

From: stringtemplate-interest-bounces at antlr.org
[mailto:stringtemplate-interest-bounces at antlr.org] On Behalf Of James Briant
Sent: Monday, February 14, 2011 11:24 PM
To: Terence Parr
Cc: stringtemplate-interest at antlr.org List; Sam Harwell
Subject: Re: [stringtemplate-interest] C# 3.2 Source Code

 

Yes please. The site has the binaries for 3.2, but no source code. I need to
hack on it quite badly!

 

Thanks,

 

Jamie

 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20110215/3ba43ab1/attachment.html 

From parrt at cs.usfca.edu  Tue Feb 15 14:45:27 2011
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue, 15 Feb 2011 14:45:27 -0800
Subject: [stringtemplate-interest] [ST4] How to avoid map key iteration?
In-Reply-To: <4CF35297-AB87-4215-B872-98EEB92ED4F5@abego-software.de>
References: <F3D7C90A-9183-498A-A5CE-4B64041A4945@abego-software.de>	<24B9706C-57C1-462B-A823-38404C341EDE@cs.usfca.edu>
	<D6132A62-9748-424F-B049-6644BF3654F9@abego-software.de>
	<005801cbcba0$bbad3e10$3307ba30$@pixelminegames.com>
	<4CF35297-AB87-4215-B872-98EEB92ED4F5@abego-software.de>
Message-ID: <1BA63EA5-9BD2-4719-8BAB-543E7EFC067E@cs.usfca.edu>


On Feb 14, 2011, at 1:20 AM, Udo Borkowski wrote:

> Hi Sam,
> 
>> If you write it this way:
>>  ...
>>  <t2(adr=p,line2={<adr.city>, <adr.zip>})>
> 
> Good point.
> 
> I guess it is just my personal style (and background) that makes me raise the issue. Inside a subtemplate I'd prefer to access the parameters of the subtemplate (the {p1,p2|?}) over the access of something outside of the subtemplate, especially with the dynamic name lookup of ST4 in mind.

In ST v4, the default args are formally defined to have the same context as the template itself, hence, default arguments can see the other arguments.

Ter

From parrt at cs.usfca.edu  Tue Feb 15 14:50:28 2011
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue, 15 Feb 2011 14:50:28 -0800
Subject: [stringtemplate-interest] [ST4] How to avoid map key iteration?
In-Reply-To: <F2D2392B-05F1-422B-8190-ECF8C38582DC@abego-software.de>
References: <F3D7C90A-9183-498A-A5CE-4B64041A4945@abego-software.de>	<24B9706C-57C1-462B-A823-38404C341EDE@cs.usfca.edu>
	<D6132A62-9748-424F-B049-6644BF3654F9@abego-software.de>
	<005801cbcba0$bbad3e10$3307ba30$@pixelminegames.com>
	<4CF35297-AB87-4215-B872-98EEB92ED4F5@abego-software.de>
	<009a01cbcc54$64bc43d0$2e34cb70$@pixelminegames.com>
	<F2D2392B-05F1-422B-8190-ECF8C38582DC@abego-software.de>
Message-ID: <1E29517D-8C97-42B0-B20F-D50ABC479692@cs.usfca.edu>

Everything we add to the language has a cost, which includes new syntax and semantics.

To me, it's simple--the ':' operator means apply a template or templates across a value or multiple values. The left-hand side of ':' is always serialized. If you do not wish it to be serialized, don't use the ':' on that object.  You are basically trying to use it to simply get a new name:

<amap:{x | <x.field>}>

but you should simply use this instead:

<amap.field>

I explored the notion of no () on template mapping; as you point out we should be passing the template name not making a template instantiation. It turns out I decided I like highlighting the fact that it was a template application.

I've generated a lot of structured text with ST over the years from websites to bytecodes to Java. I've never found this to be an issue;  at least from my perspective, there's nothing to fix.

Ter

On Feb 14, 2011, at 8:01 AM, Udo Borkowski wrote:

> Hi Sam,
> 
> your suggestion of using a syntax like "line2(adr)" to invoke an anonymous template goes exactly in a direction I was thinking for a while now: 
> 
> (Start of dreams of the future)
> 
> The "Unified ST4 template" syntax 
> 
> Currently we defined "normal" templates like
> 
>     t1(p1,p2) ::= <<?>> 
> 
> or 
> 
>     t1(p1,p2) ::= "?"
> 
> Anonymous templates (or sub templates) are defines like 
> 
>     {p1,p2| ?}.
> 
> 
> What about defining a "normal" template like this:
> 
>     t1 = {p1,p2| ?}
> 
> I.e. a "normal" template is just an anonymous template with a name, i.e. the template can be referenced through this name.
> 
> To invoke a template use the same syntax as before:  
> 
>     <t1(x,y)>
> 
> However one can also just *reference* a template (without invoking it), just by naming it without the (...).
> 
> The "iterate" feature would work on a (named or anonymous) template (as now), but would get a slightly different syntax for named templates:
> 
>     <x,y:t1>     
> 
> I.e. no "t1()" as with a template invocation, but just "t1" to reference the template. This perfectly fits into the "<x,y:{?}>" syntax: here the "{?}" is not written as "{?}()", too.
> 
> This changed syntax also makes the difference between a normal template call:
> 
> 	<t2()>
> 
> and the iterate feature:
> 
> 	<x,y:t1>
> 
> a little bit more obvious. (Another way to see this: the () behind the template name in an iterate feature serve no real purpose, they will always be empty).
> 
> To come back to my initial question "how to avoid map key iteration" I could imagine an extension to the "iterate" syntax:
> 
> Either
> 
> 	<x*,y:t1>
> 
> Meaning: only the x parameter is used as an iterator, the other parameters are just passed to the template unchanged.
> 
> Or
> 
> 	<x,y!:t1>
> 
> Meaning: every parameter not marked with "!" is used as an iterator.
> 
> ( '*' and '!' are just used as examples. Use your favorite syntax here to mark a parameter either as "iterator" or as "pure value").
> 
> 
> (End of dreams of the future)
> 
> 
> Udo
> 
> 
> On 14.02.2011, at 15:35, Sam Harwell wrote:
> 
>> Hi Udo,
>>  
>> The problem is the operation in use when you write it the way you originally did ? the ?:? is a map operation as opposed to a pass to a function method. In theory, the following syntax could solve the problem:
>>  
>> t2(adr,line2={x|<x.zip> <x.city>}) ::= <<
>> <adr.firstname> <adr.lastname>
>> <line2(adr)>
>> >> 
>>  
>> I know this syntax doesn?t work in ST3, and I?m guessing it doesn?t in ST4 either. Considering the way parameters and local variables work in many languages, I don?t think allowing this would be unexpected.
>>  
>> Sam
>>  
>> From: Udo Borkowski [mailto:ub at abego-software.de] 
>> Sent: Monday, February 14, 2011 3:21 AM
>> To: Sam Harwell
>> Cc: stringtemplate-interest List
>> Subject: Re: [stringtemplate-interest] [ST4] How to avoid map key iteration?
>>  
>> Hi Sam,
>>  
>> If you write it this way:
>>  ...
>>  <t2(adr=p,line2={<adr.city>, <adr.zip>})>
>>  
>> Good point.
>>  
>> I guess it is just my personal style (and background) that makes me raise the issue. Inside a subtemplate I'd prefer to access the parameters of the subtemplate (the {p1,p2|?}) over the access of something outside of the subtemplate, especially with the dynamic name lookup of ST4 in mind.
>>  
>>  
>> Udo
>>  
> 
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest


From parrt at cs.usfca.edu  Tue Feb 15 14:51:25 2011
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue, 15 Feb 2011 14:51:25 -0800
Subject: [stringtemplate-interest] Moving closer to 4.0 ST release (what
	to do with the doc)
In-Reply-To: <8C7DF785-2B5D-4CAC-AD85-12B94595D11C@abego-software.de>
References: <210E6657-F577-4996-917A-88A6B16E6655@cs.usfca.edu>
	<0CD79EBD-F7B1-4C84-B385-A4D5331B8D1B@abego-software.de>
	<AANLkTikJmYkcL1uk+_E1GwQGQDwXBjQWb-qDELM4Sy70@mail.gmail.com>
	<AANLkTimr+ZpH+7w=HFLTRLp4T21kJGc77jwM=-+xJwqj@mail.gmail.com>
	<AANLkTi=1hAvyB6DfpQ5nV_WgVga9_LvOAdNoocSjmnQC@mail.gmail.com>
	<8C7DF785-2B5D-4CAC-AD85-12B94595D11C@abego-software.de>
Message-ID: <257310C0-7857-4B78-B6B8-6E29617018E9@cs.usfca.edu>

I agree.Having multiple languages in the same spot is a bit distracting. I agree that we should simply move all target related stuff to individual documents. that said, I'm not sure how many of these triple code samples there are.

I'm kind of leading towards the cut-and-paste approach to create 4.0 documentation, btw.

Ter
On Feb 13, 2011, at 11:35 AM, Udo Borkowski wrote:

> I don't know if this is practical and efficient to do: 
> 
> what about providing separate "For Java Developer", "For C# Developer" and "For Python Developer" documents, beside the ones that handle all languages in one place with sections like:
> 
> 
> Java	
> StringTemplate query = new StringTemplate("SELECT $column; separator=\",\"$ FROM $table$;"
> );
> query.setAttribute(
> "column", "name"
> );
> query.setAttribute(
> "column", "email"
> );
> query.setAttribute(
> "table", "User"
> );
> 
> C#	
> StringTemplate query = new StringTemplate("SELECT $column; separator=\",\"$ FROM $table$;"
> );
> query.SetAttribute(
> "column", "name"
> );
> query.SetAttribute(
> "column", "email"
> );
> query.SetAttribute(
> "table", "User"
> );
> 
> Python	
> query = stringtemplate3.StringTemplate("SELECT $column; separator=\",\"$ FROM $table$;"
> )
> query[
> "column"] = "name"
> 
> query[
> "column"] = "email"
> 
> query[
> "table"] = "User"
> 
> 
> I found it very disturbing (at least at the beginning) to find these blocks, read "my section", skip the other section and continue reading the common text.
> 
> Depending on how the documents are "generated" providing these 4 flavors may be not such a big effort.
> 
> And maybe add a little "document overview" chapter explain the purpose/differences of the different documents. E.g. when I started I was wondering if it is sufficient to read the "StringTemplate Condensed" stuff or if I am missing something important. The "Documentation Map" is fine, but something more "prose" would be fine. Maybe also some kind of "suggested reading list", depending on the different kinds of users.
> 
> 
> Udo
> 
> 
> 
> On 13.02.2011, at 16:31, Collin Fagan wrote:
> 
>> I learned a lot from the ST3 documentation but I still think it could benefit from some attention.
>> 
>> Here are some things I consider "missing", I apologise if these are well documented and I just can't find them.
>> 
>> If statements support "and" and "or" logic.
>> <if(thing && otherThing)>
>> ... do stuff ...
>> <endif>
>> 
>> Using (" ") for map keys that contain special characters. (Wait, was that even in ST3?)
>> 
>> 
>> Also I can also never quickly find the following information, even though it is present.
>> 
>> Syntax for a map. - I never remember it. 
>> 
>> /**/ for comments in-between templates in a template group. -- I went a loong time without knowing this one, which was silly of me. 
>> 
>> All of this is easily fixable. 
>> 
>> At this point I would recommend each of us take a few minuets and try to put ourselves in the shoes of a beginner who just stumbled onto the ST project, then re-read the documentation. That might help highlight anything that might be missing. 
>> 
>> Collin
>> 
>> 
>> 
>> On Sun, Feb 13, 2011 at 3:49 AM, Oliver Zeigermann <oliver.zeigermann at gmail.com> wrote:
>> ST3 documentation was always good enough for me. Mosf of the time the cheating sheet was all I consulted.
>> 
>> Thus I agree to what Udo said.
>> 
>> Am 13.02.2011 10:28 schrieb "Udo Borkowski" <ub at abego-software.de>:
>> 
>> _______________________________________________
>> stringtemplate-interest mailing list
>> stringtemplate-interest at antlr.org
>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>> 
>> 
> 
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest


From parrt at cs.usfca.edu  Tue Feb 15 14:53:29 2011
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue, 15 Feb 2011 14:53:29 -0800
Subject: [stringtemplate-interest] [ST4 Beta-4] Retrieving version
	information
In-Reply-To: <FC5DA6E3-54EC-448E-B5DB-4DD381F84419@abego-software.de>
References: <B12CDEE0-CB17-46B9-913D-53F5B6CE1828@abego-software.de>
	<B8FF2939-E456-41E4-A968-E0E09430727E@cs.usfca.edu>
	<1F3DAECB-2566-4814-A43E-6588D3297F56@abego-software.de>
	<AANLkTinNzGUvjpfXhorWO1Qry5XdWT_+WWJ3Nd61pj0g@mail.gmail.com>
	<84BE78A9-5036-4491-A57A-6A3F3AC1CDA3@cs.usfca.edu>
	<AANLkTi=9MMMcBiB9Q=HiJAGQZezj8iQE4OaOqEno7xjz@mail.gmail.com>
	<B7D2D637-BC3D-4124-88A4-519614E8F39F@cs.usfca.edu>
	<FC5DA6E3-54EC-448E-B5DB-4DD381F84419@abego-software.de>
Message-ID: <8005C577-C614-418E-8160-68EA87553048@cs.usfca.edu>

 that's an interesting approach. let me think about whether it's worth the extra complexity/ functionality.

Ter
On Feb 12, 2011, at 3:22 PM, Udo Borkowski wrote:

> Instead of writing the version information into a java file what about adding a file
> 
> 	"org/stringtemplate/v4/system.stg"
> 
> to the sources/jar with a content like this:
> 
> engineInfo ::= [
> "v4_0b4":"",
> "versionText":"StringTemplate 4.0b4",
> "versionDate":"2011-02-28"
> ]
> 
> (ANT replacements already done)
> 
> This way people wishing to access the version information could just "import" the "system.stg" file and access the information through the map. E.g.
> 
> -----------
> import "org/stringtemplate/v4/system.stg"
> 
> main(p) ::= <<
> <if(engineInfo.v4_0b4)>
> stuff special to v4_0b4
> <endif>
> <if(engineInfo.v4_0)>
> stuff special to v4_0
> <endif>
> 
> (Rendered with <engineInfo.versionText>)
>>> 
> ----------
> 
> would output:
> ---------
> stuff special to v4_0b4
> (Rendered with StringTemplate 4.0b4)
> ---------
> 
> (Notice: the map key with the version ("v4_0b4") must not start with a digit and not contain a "." (e.g. "4.0") because it could not be used in engineInfo.v4_0b4).
> 
> Obviously the (build-in) "system.stg" file could also used to include other interesting information about the system. And it easy to extend and maintain.
> 
> 
> Udo
> 
> 
> 
> On 12.02.2011, at 21:42, Terence Parr wrote:
> 
>> Ah. so in the jar it's okay. cool. I tried to test that, but found javap not in my PATH on the Linux box :(
>> Ter
>> On Feb 12, 2011, at 12:34 PM, Oliver Zeigermann wrote:
>> 
>>> Sources remain untouched
>>> 
>>> Am 12.02.2011 20:26 schrieb "Terence Parr" <parrt at cs.usfca.edu>:
>>>> didn't seem to work.
>>>> 
>>>> public final static String VERSION = "@version@";
>>>> 
>>>> in src zip.
>>>> 
>>>> Ter
>>>> On Feb 12, 2011, at 2:27 AM, Oliver Zeigermann wrote:
>>>> 
>>>>> Using ant that is fairly easy. I attached a patch for the ant build
>>>>> file that replaces every @version@ inside the source with the version
>>>>> information from build.properties (no idea if this is the best
>>>>> solution, though).
>>>>> 
>>>>> E.g. adding
>>>>> 
>>>>> public final static String VERSION = "@version@";
>>>>> 
>>>>> to ST.java
>>>>> 
>>>>> would result to
>>>>> 
>>>>> public final static String VERSION = "4.0b4";
>>>>> 
>>>>> in the compiled classes.
>>>>> 
>>>>> Hope that helps
>>>>> 
>>>>> - Oliver
>>>>> 
>>>>> 2011/2/11 Udo Borkowski <ub at abego-software.de>:
>>>>>> Hi Ter,
>>>>>> 
>>>>>> I agree this will only work if the version information (text and/or boolean flag) is really in sync with the version control system (i.e. requires automated solution). Not sure how hard this is to implement.
>>>>>> 
>>>>>> Regarding the test for the version: I haven't thought of this yet, but it would definitely be useful.
>>>>>> 
>>>>>> Udo
>>>>>> 
>>>>>> On 11.02.2011, at 00:55, Terence Parr wrote:
>>>>>> 
>>>>>>> Hi Udo,
>>>>>>> 
>>>>>>> Seems like the more common use case would be to test the version number and do something different to avoidable or use a feature only if a particular version is available. but we can't test values in the template so it would have to be a Boolean set for the various versions; might be hard to add one for every random version we make.
>>>>>>> 
>>>>>>> <if(v4_0b1)>...<endif>
>>>>>>> 
>>>>>>> Hmm... also I would have to figure out how to make ANT alter my software automatically to include the right version string; it would have to know about perforce version control and so on. setting this by hand would be a problem as it would get out of sync.
>>>>>>> 
>>>>>>> Ter
>>>>>>> On Feb 7, 2011, at 6:25 AM, Udo Borkowski wrote:
>>>>>>> 
>>>>>>>> Hi,
>>>>>>>> 
>>>>>>>> what about providing "version information" to be used in a template?
>>>>>>>> 
>>>>>>>> I got this idea because I was using an older version of the engine (Beta3 instead of Beta4) without noticing.
>>>>>>>> 
>>>>>>>> 
>>>>>>>> One could then use this information e.g. to include a text like
>>>>>>>> 
>>>>>>>> "(Rendered with StringTemplate 4.0 Beta-4)"
>>>>>>>> 
>>>>>>>> into generated web pages etc.
>>>>>>>> 
>>>>>>>> 
>>>>>>>> One way to achieve this without adding "build-in" attributes etc. could be extending the class ST.
>>>>>>>> 
>>>>>>>> E.g. add the following method to the class ST:
>>>>>>>> 
>>>>>>>> 
>>>>>>>> public String getVersionText() {
>>>>>>>> return "StringTemplate 4.0 Beta-4";
>>>>>>>> }
>>>>>>>> 
>>>>>>>> 
>>>>>>>> Then one could use
>>>>>>>> 
>>>>>>>> (Rendered with <{ }.versionText>)
>>>>>>>> 
>>>>>>>> in a template to render
>>>>>>>> 
>>>>>>>> (Rendered with StringTemplate 4.0 Beta-4)
>>>>>>>> 
>>>>>>>> 
>>>>>>>> Udo
>>>>>>>> 
>>>>>>>> 
>>>>>>>> 
>>>>>>>> 
>>>>>>>> _______________________________________________
>>>>>>>> stringtemplate-interest mailing list
>>>>>>>> stringtemplate-interest at antlr.org
>>>>>>>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>>>>>>> 
>>>>>>> _______________________________________________
>>>>>>> stringtemplate-interest mailing list
>>>>>>> stringtemplate-interest at antlr.org
>>>>>>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>>>>>> 
>>>>>> _______________________________________________
>>>>>> stringtemplate-interest mailing list
>>>>>> stringtemplate-interest at antlr.org
>>>>>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>>>>>> 
>>>>> <build.xml.patch>_______________________________________________
>>>>> stringtemplate-interest mailing list
>>>>> stringtemplate-interest at antlr.org
>>>>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>>>> 
>>>> _______________________________________________
>>>> stringtemplate-interest mailing list
>>>> stringtemplate-interest at antlr.org
>>>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>> 
>> _______________________________________________
>> stringtemplate-interest mailing list
>> stringtemplate-interest at antlr.org
>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
> 


From parrt at cs.usfca.edu  Tue Feb 15 15:02:18 2011
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue, 15 Feb 2011 15:02:18 -0800
Subject: [stringtemplate-interest] [ST4 Beta-4] Map is not imported
In-Reply-To: <B1180D09-A6BE-4BFD-877D-A8B34DBC26C0@abego-software.de>
References: <B1180D09-A6BE-4BFD-877D-A8B34DBC26C0@abego-software.de>
Message-ID: <FB68EE1F-3ECD-42F7-A206-0A7C4F80C18A@cs.usfca.edu>

hiya. I remember thinking about this; apparently I thought about it in an incorrect way! adding to todo list.
Ter
On Feb 12, 2011, at 3:11 PM, Udo Borkowski wrote:

> Hi,
> 
> it looks like a map defined in an STGroup is not imported when using the "import" statement for that group.
> 
> Steps to reproduce:
> 
> File "mapAndTemplate.stg"
> ---------
> mapname ::= [ "name1":"val1", "name2":"val2", default:"err"]
> 
> template1() ::= <<
> one
>>> 
> 
> main() ::= <<
> mapOutput: <mapname.name1>, <mapname.xyz>
> templateOutput: <template1()>
>>> 
> --------
> 
> "main()" will output (as expected):
> 
> mapOutput: val1, err
> templateOutput: one
> 
> 
> 
> However when the group is imported like here
> 
> File "test.stg"
> ----------
> import "~/st/templates/trial/mapAndTemplate.stg"
> 
> main() ::= <<
> mapOutput: <mapname.name1>, <mapname.xyz>
> templateOutput: <template1()>
>>> 
> ----------
> 
> the output is:
> 
> mapOutput: , 
> templateOutput: one
> 
> I.e. the map entries are not found. However the template "template1()" is correctly used.
> 
> 
> Udo
> 
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest


From parrt at cs.usfca.edu  Tue Feb 15 15:14:27 2011
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue, 15 Feb 2011 15:14:27 -0800
Subject: [stringtemplate-interest] [ST4 Beta-4] Retrieving version
	information
In-Reply-To: <955A3641-64BF-413D-989C-38CF1E053ED8@gmx.de>
References: <B12CDEE0-CB17-46B9-913D-53F5B6CE1828@abego-software.de>
	<B8FF2939-E456-41E4-A968-E0E09430727E@cs.usfca.edu>
	<955A3641-64BF-413D-989C-38CF1E053ED8@gmx.de>
Message-ID: <E5F4E066-8E1E-41E4-92F8-986D5B8660C6@cs.usfca.edu>

Now that I think about it, the ctor for the groups don't actually try to load the imported groups. so we can always create the group, set the error manager, then tell it to do a load, right?

That said, I have a note in the todo list:

* should adaptors get imported from super group?

I kind of like the idea of knowing who the importer was. maybe the errors of all imported groups go to the error manager of the root importing template.

 does that say anything about adapters and renderers? In other words, should renderers in the root group be used by all templates in the imported groups? seems like it I guess.

 thanks for thinking of all this!

Ter

On Feb 11, 2011, at 3:06 AM, Udo Borkowski wrote:

> Hi Ter,
> 
> I agree this will only work if the version information (text and/or boolean flag) is really in sync with the version control system. Not sure how hard this is to implement.
> 
> Regarding the test for the version: I haven't thought of this yet, but it would definitely be useful. 
> 
> Udo
> 
> On 11.02.2011, at 00:55, Terence Parr wrote:
> 
>> Hi Udo,
>> 
>> Seems like the more common use case would be to test the version number and do something different to  avoidable or use a feature only if a particular version is available. but we can't test values in the template so it would have to be a Boolean set  for the various versions; might be hard to add one for every random version we make.
>> 
>> <if(v4_0b1)>...<endif>
>> 
>> Hmm... also I would have to figure out how to make ANT alter my software automatically to include the right version string; it would have to know about perforce version control and so on. setting this by hand would be a problem as it would get out of sync.
>> 
>> Ter
>> On Feb 7, 2011, at 6:25 AM, Udo Borkowski wrote:
>> 
>>> Hi,
>>> 
>>> what about providing "version information" to be used in a template? 
>>> 
>>> I got this idea because I was using an older version of the engine (Beta3 instead of Beta4) without noticing.
>>> 
>>> 
>>> One could then use this information e.g. to include a text like
>>> 
>>> 	"(Rendered with StringTemplate 4.0 Beta-4)"
>>> 
>>> into generated web pages etc.
>>> 
>>> 
>>> One way to achieve this without adding "build-in" attributes etc. could be extending the class ST.
>>> 
>>> E.g. add the following method to the class ST:
>>> 
>>> 	
>>> 	public String getVersionText() {
>>> 		return "StringTemplate 4.0 Beta-4";
>>> 	}
>>> 
>>> 
>>> Then one could use
>>> 
>>> 		(Rendered with <{ }.versionText>)
>>> 
>>> in a template to render
>>> 
>>> 		(Rendered with StringTemplate 4.0 Beta-4)
>>> 
>>> 
>>> Udo
>>> 
>>> 	
>>> 
>>> 
>>> _______________________________________________
>>> stringtemplate-interest mailing list
>>> stringtemplate-interest at antlr.org
>>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>> 
>> _______________________________________________
>> stringtemplate-interest mailing list
>> stringtemplate-interest at antlr.org
>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
> 


From sharwell at pixelminegames.com  Tue Feb 15 17:39:54 2011
From: sharwell at pixelminegames.com (Sam Harwell)
Date: Tue, 15 Feb 2011 19:39:54 -0600
Subject: [stringtemplate-interest] Updated C# port and CSharp3 target (C#
	build 3.3.1.7705)
Message-ID: <007601cbcd7a$69df30d0$3d9d9270$@pixelminegames.com>

Hello everyone,

 

First of all, I have to make the following important note: due to a change
in ANTLRCore.sti, this build of Antlr3.exe (the tool) only works properly
with the included CSharp3 target. Likewise, the CSharp3 target only works
properly with this version of the tool (the Java version will not work).

 

I'll have to post the list of changes since the 3.3.0 release online later.

 

For the distribution, there are several options here:

 

.         CSharp3Runtime
<http://www.tunnelvisionlabs.com/downloads/antlr/antlr-dotnet-csharp3runtime
-3.3.1.7705.7z> : Only includes the latest build of Antlr3.Runtime.dll.

.         CSharp3Boostrap
<http://www.tunnelvisionlabs.com/downloads/antlr/antlr-dotnet-csharp3bootstr
ap-3.3.1.7705.7z> : Includes all files necessary to generate code for (and
run) grammars using the CSharp3 target. It also includes the MSBuild targets
file to include ANTLR in the Visual Studio build process.

.         Tool
<http://www.tunnelvisionlabs.com/downloads/antlr/antlr-dotnet-tool-3.3.1.770
5.7z> : In addition to the files in CSharp3Bootstrap, this includes all
targets and debug symbol files (*.PDB) for all binaries. It also includes
Antlr4.StringTemplate.dll and Antlr4.StringTemplate.Visualizer.dll.

.         Source
<http://www.tunnelvisionlabs.com/downloads/antlr/antlr-dotnet-source-3.3.1.7
705.7z> : Includes the source tree for the Tool distribution (no binaries).

 

You may find the following documentation for the CSharp3 target useful as
well. If you installed a previous copy of the Visual Studio extensions,
you'll need to uninstall them thorugh the Visual Studio 2010 Extension
Manager before installing the new versions.

 

http://www.tunnelvisionlabs.com/downloads/antlr/ANTLRCSharp3_VS2010.xps

 

.         Visual Studio project setup for ANTLR grammars with your project.

.         Visual Studio 2010 highlighting and IntelliSense support for ANTLR
v3 grammars and highlighting support for StringTemplate v4 group files.

 

Thank you,

Sam Harwell

 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20110215/6d13b5f5/attachment.html 

From ub at abego-software.de  Wed Feb 16 11:27:27 2011
From: ub at abego-software.de (Udo Borkowski)
Date: Wed, 16 Feb 2011 20:27:27 +0100
Subject: [stringtemplate-interest] [ST4 Beta-4] Retrieving version
	information
In-Reply-To: <8005C577-C614-418E-8160-68EA87553048@cs.usfca.edu>
References: <B12CDEE0-CB17-46B9-913D-53F5B6CE1828@abego-software.de>
	<B8FF2939-E456-41E4-A968-E0E09430727E@cs.usfca.edu>
	<1F3DAECB-2566-4814-A43E-6588D3297F56@abego-software.de>
	<AANLkTinNzGUvjpfXhorWO1Qry5XdWT_+WWJ3Nd61pj0g@mail.gmail.com>
	<84BE78A9-5036-4491-A57A-6A3F3AC1CDA3@cs.usfca.edu>
	<AANLkTi=9MMMcBiB9Q=HiJAGQZezj8iQE4OaOqEno7xjz@mail.gmail.com>
	<B7D2D637-BC3D-4124-88A4-519614E8F39F@cs.usfca.edu>
	<FC5DA6E3-54EC-448E-B5DB-4DD381F84419@abego-software.de>
	<8005C577-C614-418E-8160-68EA87553048@cs.usfca.edu>
Message-ID: <52FE25E7-5608-432F-8AE9-A3DA3B789617@abego-software.de>


> ... let me think about whether it's worth the extra complexity/ functionality.

It is my understanding this adds no more complexity than just adding and maintaining the new "system.stg" file (and documenting it). Especially not source code needs to be changed.

(Assuming the "Map is not imported" bug is fixed (http://www.antlr.org/pipermail/stringtemplate-interest/2011-February/003195.html)).

Udo


On 15.02.2011, at 23:53, Terence Parr wrote:

> that's an interesting approach. let me think about whether it's worth the extra complexity/ functionality.
> 
> Ter
> On Feb 12, 2011, at 3:22 PM, Udo Borkowski wrote:
> 
>> Instead of writing the version information into a java file what about adding a file
>> 
>> 	"org/stringtemplate/v4/system.stg"
>> 
>> to the sources/jar with a content like this:
>> 
>> engineInfo ::= [
>> "v4_0b4":"",
>> "versionText":"StringTemplate 4.0b4",
>> "versionDate":"2011-02-28"
>> ]
>> 
>> (ANT replacements already done)
>> 
>> This way people wishing to access the version information could just "import" the "system.stg" file and access the information through the map. E.g.
>> 
>> -----------
>> import "org/stringtemplate/v4/system.stg"
>> 
>> main(p) ::= <<
>> <if(engineInfo.v4_0b4)>
>> stuff special to v4_0b4
>> <endif>
>> <if(engineInfo.v4_0)>
>> stuff special to v4_0
>> <endif>
>> 
>> (Rendered with <engineInfo.versionText>)
>>>> 
>> ----------
>> 
>> would output:
>> ---------
>> stuff special to v4_0b4
>> (Rendered with StringTemplate 4.0b4)
>> ---------
>> 
>> (Notice: the map key with the version ("v4_0b4") must not start with a digit and not contain a "." (e.g. "4.0") because it could not be used in engineInfo.v4_0b4).
>> 
>> Obviously the (build-in) "system.stg" file could also used to include other interesting information about the system. And it easy to extend and maintain.
>> 
>> 
>> Udo
>> 
>> 
>> 
>> On 12.02.2011, at 21:42, Terence Parr wrote:
>> 
>>> Ah. so in the jar it's okay. cool. I tried to test that, but found javap not in my PATH on the Linux box :(
>>> Ter
>>> On Feb 12, 2011, at 12:34 PM, Oliver Zeigermann wrote:
>>> 
>>>> Sources remain untouched
>>>> 
>>>> Am 12.02.2011 20:26 schrieb "Terence Parr" <parrt at cs.usfca.edu>:
>>>>> didn't seem to work.
>>>>> 
>>>>> public final static String VERSION = "@version@";
>>>>> 
>>>>> in src zip.
>>>>> 
>>>>> Ter
>>>>> On Feb 12, 2011, at 2:27 AM, Oliver Zeigermann wrote:
>>>>> 
>>>>>> Using ant that is fairly easy. I attached a patch for the ant build
>>>>>> file that replaces every @version@ inside the source with the version
>>>>>> information from build.properties (no idea if this is the best
>>>>>> solution, though).
>>>>>> 
>>>>>> E.g. adding
>>>>>> 
>>>>>> public final static String VERSION = "@version@";
>>>>>> 
>>>>>> to ST.java
>>>>>> 
>>>>>> would result to
>>>>>> 
>>>>>> public final static String VERSION = "4.0b4";
>>>>>> 
>>>>>> in the compiled classes.
>>>>>> 
>>>>>> Hope that helps
>>>>>> 
>>>>>> - Oliver
>>>>>> 
>>>>>> 2011/2/11 Udo Borkowski <ub at abego-software.de>:
>>>>>>> Hi Ter,
>>>>>>> 
>>>>>>> I agree this will only work if the version information (text and/or boolean flag) is really in sync with the version control system (i.e. requires automated solution). Not sure how hard this is to implement.
>>>>>>> 
>>>>>>> Regarding the test for the version: I haven't thought of this yet, but it would definitely be useful.
>>>>>>> 
>>>>>>> Udo
>>>>>>> 
>>>>>>> On 11.02.2011, at 00:55, Terence Parr wrote:
>>>>>>> 
>>>>>>>> Hi Udo,
>>>>>>>> 
>>>>>>>> Seems like the more common use case would be to test the version number and do something different to avoidable or use a feature only if a particular version is available. but we can't test values in the template so it would have to be a Boolean set for the various versions; might be hard to add one for every random version we make.
>>>>>>>> 
>>>>>>>> <if(v4_0b1)>...<endif>
>>>>>>>> 
>>>>>>>> Hmm... also I would have to figure out how to make ANT alter my software automatically to include the right version string; it would have to know about perforce version control and so on. setting this by hand would be a problem as it would get out of sync.
>>>>>>>> 
>>>>>>>> Ter
>>>>>>>> On Feb 7, 2011, at 6:25 AM, Udo Borkowski wrote:
>>>>>>>> 
>>>>>>>>> Hi,
>>>>>>>>> 
>>>>>>>>> what about providing "version information" to be used in a template?
>>>>>>>>> 
>>>>>>>>> I got this idea because I was using an older version of the engine (Beta3 instead of Beta4) without noticing.
>>>>>>>>> 
>>>>>>>>> 
>>>>>>>>> One could then use this information e.g. to include a text like
>>>>>>>>> 
>>>>>>>>> "(Rendered with StringTemplate 4.0 Beta-4)"
>>>>>>>>> 
>>>>>>>>> into generated web pages etc.
>>>>>>>>> 
>>>>>>>>> 
>>>>>>>>> One way to achieve this without adding "build-in" attributes etc. could be extending the class ST.
>>>>>>>>> 
>>>>>>>>> E.g. add the following method to the class ST:
>>>>>>>>> 
>>>>>>>>> 
>>>>>>>>> public String getVersionText() {
>>>>>>>>> return "StringTemplate 4.0 Beta-4";
>>>>>>>>> }
>>>>>>>>> 
>>>>>>>>> 
>>>>>>>>> Then one could use
>>>>>>>>> 
>>>>>>>>> (Rendered with <{ }.versionText>)
>>>>>>>>> 
>>>>>>>>> in a template to render
>>>>>>>>> 
>>>>>>>>> (Rendered with StringTemplate 4.0 Beta-4)
>>>>>>>>> 
>>>>>>>>> 
>>>>>>>>> Udo
>>>>>>>>> 
>>>>>>>>> 
>>>>>>>>> 
>>>>>>>>> 
>>>>>>>>> _______________________________________________
>>>>>>>>> stringtemplate-interest mailing list
>>>>>>>>> stringtemplate-interest at antlr.org
>>>>>>>>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>>>>>>>> 
>>>>>>>> _______________________________________________
>>>>>>>> stringtemplate-interest mailing list
>>>>>>>> stringtemplate-interest at antlr.org
>>>>>>>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>>>>>>> 
>>>>>>> _______________________________________________
>>>>>>> stringtemplate-interest mailing list
>>>>>>> stringtemplate-interest at antlr.org
>>>>>>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>>>>>>> 
>>>>>> <build.xml.patch>_______________________________________________
>>>>>> stringtemplate-interest mailing list
>>>>>> stringtemplate-interest at antlr.org
>>>>>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>>>>> 
>>>>> _______________________________________________
>>>>> stringtemplate-interest mailing list
>>>>> stringtemplate-interest at antlr.org
>>>>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>>> 
>>> _______________________________________________
>>> stringtemplate-interest mailing list
>>> stringtemplate-interest at antlr.org
>>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>> 
> 
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20110216/f0c09ef3/attachment-0001.html 

From ub at abego-software.de  Thu Feb 17 03:03:46 2011
From: ub at abego-software.de (Udo Borkowski)
Date: Thu, 17 Feb 2011 12:03:46 +0100
Subject: [stringtemplate-interest] [ST4 Beta4] Default args are not always
	evaluated in the context of their template
Message-ID: <8BFCB2DE-31BE-40ED-9EC3-88579E54ACF2@abego-software.de>

Ter wrote in a recent mail:

> In ST v4, the default args are formally defined to have the same context as the template itself, hence, default arguments can see the other arguments.
> 


Based on this I expected the default args are also evaluated in the context of the template, e.g. if t1 is defined as

	t1(p1,p2={<p1>}) ::= <<?>>

and I call

	<t1(p1="A")>

p1 and p2 both will have the value "A". 

As it turns out this is not always the case.


When the name "p1" is later used in a different template called inside of t1 the new value of p1 is also applied to the default arg (and not the value defined in the context of t1). 

Here a complete example:

-----------
t1(p1,p2={<p1>}) ::= <<
  inside t1: p1=<p1>, p2=<p2>
<t2(p1="B",p2=p2)>
>>

t2(p1,p2) ::= <<
  inside t2: p1=<p1>, p2=<p2>
>>

main() ::= <<
Use default value for p2
<t1(p1="A")>
>> 
------------

This will output:
-------------
Use default value for p2
  inside t1: p1=A, p2=A
  inside t2: p1=B, p2=B
----------

However I had expected:
-------------
Use default value for p2
  inside t1: p1=A, p2=A
  inside t2: p1=B, p2=A
----------

i.e. I expected p2 to be "A" in the template t2, too, as this is the default value defined in the context of t1.

It looks like the names in a default value expression/subtemplate are resolved the "normal" way by dynamically looking up the call chain for the name, starting "at the current scope", i.e. "the point when the default value template is currently expanded". I expected the lookup starts with the template argument definition in t1(p1,p2={<p1>}). If this fails a "normal" lookup may be performed.

I know one could "fix" the above example by changing the definition of t1 from

	t1(p1,p2={<p1>}) ::= <<?>>
to 
	t1(p1,p2={<(p1)>}) ::= <<?>>

i.e. force to "stringify" the default value in the argument definition. 

However 
a) I am not sure if this is obvious for the "casual user".  (BTW: is this "{<(p1)>}" behavior documented somewhere? I learned this by reading the source code.)

b) this does not work in all cases. E.g. the template definition

	t3(p1,p2={<p1>x}) ::= <<?>>

(i.e. append an "x" to the value of p1 to create p2) could not be fixed this way.


To fix the issue I assume one needs to remember the context of the default value subtemplate (i.e. the argument list) with the subtemplate instance and check this context first before doing the normal dynamic name lookup.


Udo


From sharwell at pixelminegames.com  Thu Feb 17 06:45:18 2011
From: sharwell at pixelminegames.com (Sam Harwell)
Date: Thu, 17 Feb 2011 08:45:18 -0600
Subject: [stringtemplate-interest] [ST4 Beta4] Default args are not
	always	evaluated in the context of their template
In-Reply-To: <8BFCB2DE-31BE-40ED-9EC3-88579E54ACF2@abego-software.de>
References: <8BFCB2DE-31BE-40ED-9EC3-88579E54ACF2@abego-software.de>
Message-ID: <015501cbceb1$4c498150$e4dc83f0$@pixelminegames.com>

That's correct. Remember you are passing the template and not its evaluated
result to t2. If you want to pass the evaluated result to t2, you need to
use parentheses (the "tostring" operator) as follows:

t1(p1,p2={<p1>}) ::= <<
  inside t1: p1=<p1>, p2=<p2>
<t2(p1="B",p2=(p2))>
>>

Sam

-----Original Message-----
From: stringtemplate-interest-bounces at antlr.org
[mailto:stringtemplate-interest-bounces at antlr.org] On Behalf Of Udo
Borkowski
Sent: Thursday, February 17, 2011 5:04 AM
To: stringtemplate-interest List
Subject: [stringtemplate-interest] [ST4 Beta4] Default args are not always
evaluated in the context of their template

Ter wrote in a recent mail:

> In ST v4, the default args are formally defined to have the same context
as the template itself, hence, default arguments can see the other
arguments.
> 


Based on this I expected the default args are also evaluated in the context
of the template, e.g. if t1 is defined as

	t1(p1,p2={<p1>}) ::= <<.>>

and I call

	<t1(p1="A")>

p1 and p2 both will have the value "A". 

As it turns out this is not always the case.


When the name "p1" is later used in a different template called inside of t1
the new value of p1 is also applied to the default arg (and not the value
defined in the context of t1). 

Here a complete example:

-----------
t1(p1,p2={<p1>}) ::= <<
  inside t1: p1=<p1>, p2=<p2>
<t2(p1="B",p2=p2)>
>>

t2(p1,p2) ::= <<
  inside t2: p1=<p1>, p2=<p2>
>>

main() ::= <<
Use default value for p2
<t1(p1="A")>
>> 
------------

This will output:
-------------
Use default value for p2
  inside t1: p1=A, p2=A
  inside t2: p1=B, p2=B
----------

However I had expected:
-------------
Use default value for p2
  inside t1: p1=A, p2=A
  inside t2: p1=B, p2=A
----------

i.e. I expected p2 to be "A" in the template t2, too, as this is the default
value defined in the context of t1.

It looks like the names in a default value expression/subtemplate are
resolved the "normal" way by dynamically looking up the call chain for the
name, starting "at the current scope", i.e. "the point when the default
value template is currently expanded". I expected the lookup starts with the
template argument definition in t1(p1,p2={<p1>}). If this fails a "normal"
lookup may be performed.

I know one could "fix" the above example by changing the definition of t1
from

	t1(p1,p2={<p1>}) ::= <<.>>
to 
	t1(p1,p2={<(p1)>}) ::= <<.>>

i.e. force to "stringify" the default value in the argument definition. 

However 
a) I am not sure if this is obvious for the "casual user".  (BTW: is this
"{<(p1)>}" behavior documented somewhere? I learned this by reading the
source code.)

b) this does not work in all cases. E.g. the template definition

	t3(p1,p2={<p1>x}) ::= <<.>>

(i.e. append an "x" to the value of p1 to create p2) could not be fixed this
way.


To fix the issue I assume one needs to remember the context of the default
value subtemplate (i.e. the argument list) with the subtemplate instance and
check this context first before doing the normal dynamic name lookup.


Udo

_______________________________________________
stringtemplate-interest mailing list
stringtemplate-interest at antlr.org
http://www.antlr.org/mailman/listinfo/stringtemplate-interest


From ub at abego-software.de  Thu Feb 17 12:45:27 2011
From: ub at abego-software.de (Udo Borkowski)
Date: Thu, 17 Feb 2011 21:45:27 +0100
Subject: [stringtemplate-interest] [ST4 Beta4] Default args are not
	always	evaluated in the context of their template
In-Reply-To: <015501cbceb1$4c498150$e4dc83f0$@pixelminegames.com>
References: <8BFCB2DE-31BE-40ED-9EC3-88579E54ACF2@abego-software.de>
	<015501cbceb1$4c498150$e4dc83f0$@pixelminegames.com>
Message-ID: <DAE12CAE-A26C-4A3D-9BD5-50A29C96B0D7@abego-software.de>

> ... Remember you are passing the template and not its evaluated
> result to t2. ...

Yes, that's the way the stuff is currently implemented. But passing the subtemplate to t2 is not the issue. I can (and want to) pass the template around and still get the result I expect. It is mainly the question in what context the subtemplate is evaluated later. If it is the context of the template it was defined in everything would be fine.

And this is what I understood when reading Terence's comment "default args ? have the same context of the template itself". Why did he mentioned this explicitly if not there is something special about the way default args are handled?

Currently it looks to me (after my tests) like an anonymous templates used in a default args is not handled differently from an anonymous templates defined somewhere else, especially regarding the way names are resolved: names are resolved dynamically when the subtemplate is evaluated, looking up the call chain. Of cause this also means the arguments of the template are visible to the subtemplates (i.e. there is no need to mention explicitly that "default arguments can see the other arguments).


> If you want to pass the evaluated result to t2, you need to
> use parentheses (the "tostring" operator) as follows:

?
> <t2(p1="B",p2=(p2))>
>> 


OK, that would also be possible. However I want to avoid "toString" whenever possible: 
a) maybe p2 is never used later (because of some "if" or so) then the "toString" would have been a waste of time. 
b) calling toString to early may get you in trouble when it comes to formatting/indenting.

Also: here the "toString" is introduced to fix an issue with the default arg. I.e. I need to change my template body just because I added a default value to a parameter (assume the template was first used without default args).


Udo



On 17.02.2011, at 15:45, Sam Harwell wrote:

> That's correct. Remember you are passing the template and not its evaluated
> result to t2. If you want to pass the evaluated result to t2, you need to
> use parentheses (the "tostring" operator) as follows:
> 
> t1(p1,p2={<p1>}) ::= <<
>  inside t1: p1=<p1>, p2=<p2>
> <t2(p1="B",p2=(p2))>
>>> 
> 
> Sam
> 
> -----Original Message-----
> From: stringtemplate-interest-bounces at antlr.org
> [mailto:stringtemplate-interest-bounces at antlr.org] On Behalf Of Udo
> Borkowski
> Sent: Thursday, February 17, 2011 5:04 AM
> To: stringtemplate-interest List
> Subject: [stringtemplate-interest] [ST4 Beta4] Default args are not always
> evaluated in the context of their template
> 
> Ter wrote in a recent mail:
> 
>> In ST v4, the default args are formally defined to have the same context
> as the template itself, hence, default arguments can see the other
> arguments.
>> 
> 
> 
> Based on this I expected the default args are also evaluated in the context
> of the template, e.g. if t1 is defined as
> 
> 	t1(p1,p2={<p1>}) ::= <<.>>
> 
> and I call
> 
> 	<t1(p1="A")>
> 
> p1 and p2 both will have the value "A". 
> 
> As it turns out this is not always the case.
> 
> 
> When the name "p1" is later used in a different template called inside of t1
> the new value of p1 is also applied to the default arg (and not the value
> defined in the context of t1). 
> 
> Here a complete example:
> 
> -----------
> t1(p1,p2={<p1>}) ::= <<
>  inside t1: p1=<p1>, p2=<p2>
> <t2(p1="B",p2=p2)>
>>> 
> 
> t2(p1,p2) ::= <<
>  inside t2: p1=<p1>, p2=<p2>
>>> 
> 
> main() ::= <<
> Use default value for p2
> <t1(p1="A")>
>>> 
> ------------
> 
> This will output:
> -------------
> Use default value for p2
>  inside t1: p1=A, p2=A
>  inside t2: p1=B, p2=B
> ----------
> 
> However I had expected:
> -------------
> Use default value for p2
>  inside t1: p1=A, p2=A
>  inside t2: p1=B, p2=A
> ----------
> 
> i.e. I expected p2 to be "A" in the template t2, too, as this is the default
> value defined in the context of t1.
> 
> It looks like the names in a default value expression/subtemplate are
> resolved the "normal" way by dynamically looking up the call chain for the
> name, starting "at the current scope", i.e. "the point when the default
> value template is currently expanded". I expected the lookup starts with the
> template argument definition in t1(p1,p2={<p1>}). If this fails a "normal"
> lookup may be performed.
> 
> I know one could "fix" the above example by changing the definition of t1
> from
> 
> 	t1(p1,p2={<p1>}) ::= <<.>>
> to 
> 	t1(p1,p2={<(p1)>}) ::= <<.>>
> 
> i.e. force to "stringify" the default value in the argument definition. 
> 
> However 
> a) I am not sure if this is obvious for the "casual user".  (BTW: is this
> "{<(p1)>}" behavior documented somewhere? I learned this by reading the
> source code.)
> 
> b) this does not work in all cases. E.g. the template definition
> 
> 	t3(p1,p2={<p1>x}) ::= <<.>>
> 
> (i.e. append an "x" to the value of p1 to create p2) could not be fixed this
> way.
> 
> 
> To fix the issue I assume one needs to remember the context of the default
> value subtemplate (i.e. the argument list) with the subtemplate instance and
> check this context first before doing the normal dynamic name lookup.
> 
> 
> Udo
> 
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
> 


From parrt at cs.usfca.edu  Thu Feb 17 12:55:56 2011
From: parrt at cs.usfca.edu (Terence Parr)
Date: Thu, 17 Feb 2011 12:55:56 -0800
Subject: [stringtemplate-interest] [ST4 Beta4] Default args are not
	always evaluated in the context of their template
In-Reply-To: <8BFCB2DE-31BE-40ED-9EC3-88579E54ACF2@abego-software.de>
References: <8BFCB2DE-31BE-40ED-9EC3-88579E54ACF2@abego-software.de>
Message-ID: <02377F9A-683C-4545-98E7-B57380DE107A@cs.usfca.edu>

Hi Udo. I'm pretty sure Sam is correct. This is a lazy evaluation issue.  comment inline ####
On Feb 17, 2011, at 3:03 AM, Udo Borkowski wrote:
> -----------
> t1(p1,p2={<p1>}) ::= <<
>  inside t1: p1=<p1>, p2=<p2>
> <t2(p1="B",p2=p2)>
>>
> 
> t2(p1,p2) ::= <<
>  inside t2: p1=<p1>, p2=<p2>    #### <p2> evaluates {<p1>} and p1 has value "B", right?
>>
> 
> main() ::= <<
> Use default value for p2
> <t1(p1="A")>
>>


From ub at abego-software.de  Thu Feb 17 13:22:38 2011
From: ub at abego-software.de (Udo Borkowski)
Date: Thu, 17 Feb 2011 22:22:38 +0100
Subject: [stringtemplate-interest] [ST4 Beta4] Default args are not
	always evaluated in the context of their template
In-Reply-To: <02377F9A-683C-4545-98E7-B57380DE107A@cs.usfca.edu>
References: <8BFCB2DE-31BE-40ED-9EC3-88579E54ACF2@abego-software.de>
	<02377F9A-683C-4545-98E7-B57380DE107A@cs.usfca.edu>
Message-ID: <8D85389D-48FE-4986-B987-071A89C3E1BD@abego-software.de>

Hi Ter,

> Hi Udo. I'm pretty sure Sam is correct. This is a lazy evaluation issue.  comment inline ####

Yes, Sam is correct, in describing how the system behaves and why. I never doubted this.

My question is: is this the *expected* behavior, i.e. is this the behavior you had in mind when saying "the default args are formally defined to have the same context as the template itself, hence, default arguments can see the other arguments."? Or is it just the way things are currently implemented?

Regarding your question:
>> t2(p1,p2) ::= <<
>> inside t2: p1=<p1>, p2=<p2>    #### <p2> evaluates {<p1>} and p1 has value "B", right?

p1 has the value "A" in the context of t1. p1 has the value "B" in the context of t2. If I understood you correctly the subtemplate {<p1>} has the same context as the template t1, hence p1 in the subtemplate {<p1>} has value "A" (not "B").


Udo



On 17.02.2011, at 21:55, Terence Parr wrote:

> Hi Udo. I'm pretty sure Sam is correct. This is a lazy evaluation issue.  comment inline ####
> On Feb 17, 2011, at 3:03 AM, Udo Borkowski wrote:
>> -----------
>> t1(p1,p2={<p1>}) ::= <<
>> inside t1: p1=<p1>, p2=<p2>
>> <t2(p1="B",p2=p2)>
>>> 
>> 
>> t2(p1,p2) ::= <<
>> inside t2: p1=<p1>, p2=<p2>    #### <p2> evaluates {<p1>} and p1 has value "B", right?
>>> 
>> 
>> main() ::= <<
>> Use default value for p2
>> <t1(p1="A")>
>>> 
> 
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest


From parrt at cs.usfca.edu  Thu Feb 17 13:33:29 2011
From: parrt at cs.usfca.edu (Terence Parr)
Date: Thu, 17 Feb 2011 13:33:29 -0800
Subject: [stringtemplate-interest] [ST4 Beta4] Default args are not
	always evaluated in the context of their template
In-Reply-To: <8D85389D-48FE-4986-B987-071A89C3E1BD@abego-software.de>
References: <8BFCB2DE-31BE-40ED-9EC3-88579E54ACF2@abego-software.de>
	<02377F9A-683C-4545-98E7-B57380DE107A@cs.usfca.edu>
	<8D85389D-48FE-4986-B987-071A89C3E1BD@abego-software.de>
Message-ID: <6DE24292-94A5-408B-95F4-8A4B4878A8A2@cs.usfca.edu>


On Feb 17, 2011, at 1:22 PM, Udo Borkowski wrote:

> Hi Ter,
> 
>> Hi Udo. I'm pretty sure Sam is correct. This is a lazy evaluation issue.  comment inline ####
> 
> Yes, Sam is correct, in describing how the system behaves and why. I never doubted this.
> 
> My question is: is this the *expected* behavior, i.e. is this the behavior you had in mind when saying "the default args are formally defined to have the same context as the template itself, hence, default arguments can see the other arguments."? Or is it just the way things are currently implemented?

That is the intention and how it works.  You are passing p2 to another context so that statement about default args has nothing to do with it.

> 
> Regarding your question:
>>> t2(p1,p2) ::= <<
>>> inside t2: p1=<p1>, p2=<p2>    #### <p2> evaluates {<p1>} and p1 has value "B", right?
> 
> p1 has the value "A" in the context of t1. p1 has the value "B" in the context of t2. If I understood you correctly the subtemplate {<p1>} has the same context as the template t1, hence p1 in the subtemplate {<p1>} has value "A" (not "B").

That is where the default arg with eval.  If you pass to ANOTHER context, it will eval differently (in that context).
Ter

From ub at abego-software.de  Fri Feb 18 02:41:21 2011
From: ub at abego-software.de (Udo Borkowski)
Date: Fri, 18 Feb 2011 11:41:21 +0100
Subject: [stringtemplate-interest] [ST4 Beta4] Bug: IndexOutOfBounds
	Exception when using "cap" format on empty string
Message-ID: <3B88D9F5-CE05-4194-A8B1-95A141CE0948@abego-software.de>

Bug: IndexOutOfBounds Exception when using "cap" format on empty string

E.g. 

main(s="") ::= <<
<s;format="cap">
>>


Testcase:

	public void testIt() throws Exception {
		String templates = "main(s=\"\") ::= <<\n<s;format=\"cap\">\n>>";

		writeFile(tmpdir, "t.stg", templates);
		org.stringtemplate.v4.STGroup group = new org.stringtemplate.v4.STGroupFile(
				tmpdir + "/t.stg");
		group.registerRenderer(String.class, new StringRenderer());

		org.stringtemplate.v4.ST st = group.getInstanceOf("main");
		// Render the string (this led to an IndexOutOfBounds exception)
		String s = st.render();
		
		Assert.assertEquals("", s);
	}

Fix:

--- new/org/stringtemplate/v4/StringRenderer.java	2011-02-05 12:58:28.000000000 +0100
+++ mine/org/stringtemplate/v4/StringRenderer.java	2011-02-07 11:02:38.000000000 +0100
@@ -30,18 +30,19 @@
 import java.net.URLEncoder;
 import java.util.Locale;
 
 /** This render knows to perform a few operations on String objects:
  *  upper, lower, cap, url-encode, xml-encode.
  */
 public class StringRenderer implements AttributeRenderer {
     // trim(s) and strlen(s) built-in funcs; these are format options
     public String toString(Object o, String formatString, Locale locale) {
         String s = (String)o;
         if ( formatString==null ) return s; 
         if ( formatString.equals("upper") ) return s.toUpperCase(locale);
         if ( formatString.equals("lower") ) return s.toLowerCase(locale);
         if ( formatString.equals("cap") ) {
-            return Character.toUpperCase(s.charAt(0))+s.substring(1);
+            return (s.length() > 0) ? Character.toUpperCase(s.charAt(0))
+					+ s.substring(1) : "";
         }
         if ( formatString.equals("url-encode") ) {
             return URLEncoder.encode(s);


Udo


-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20110218/8779e311/attachment.html 

From ub at abego-software.de  Fri Feb 18 14:02:23 2011
From: ub at abego-software.de (Udo Borkowski)
Date: Fri, 18 Feb 2011 23:02:23 +0100
Subject: [stringtemplate-interest] [ST4] How to apply multiple "format"s to
	an expression?
Message-ID: <D7E7A7CA-A38F-4F7D-A426-24501DC029CE@abego-software.de>

Hi,

I would like to generate a constant definition like this:

	public static final int ABC             = 123;
	public static final int GHIJKLMN        = 456;

To make sure the "="s are aligned I can use the Java String format padding feature, e.g. use a template like this:

t1(n,v) ::= <<
public static final int ?n;format="%-15s"? = ?v?;
>>

However the name is given in mixed case and I need to "upper" it, e.g. with something like this:

t2(n,v) ::= <<
public static final int ?n;format="upper"? = ?v?;
>>

Is there a way to combine both formats, so I get an uppercased, right padded name?


Udo

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20110218/0778e4e1/attachment.html 

From sharwell at pixelminegames.com  Fri Feb 18 14:29:22 2011
From: sharwell at pixelminegames.com (Sam Harwell)
Date: Fri, 18 Feb 2011 16:29:22 -0600
Subject: [stringtemplate-interest] [ST4] How to apply multiple "format"s
	to an expression?
Message-ID: <024401cbcfbb$4b4aac10$e1e00430$@pixelminegames.com>

Does this work:

 

<(upper(n)); format="%-15s">

 

With this definition of upper(x)?

 

upper(x) ::= <<

<x; format="upper">

>> 

 

Also, here's an interesting case where if <x.y> checked for a method y()
(zero parameters and non-void return value), you could use <n.toUpperCase;
format="%-15s">. This could actually be done by extending the
ObjectModelAdaptor model adapter to have it check for such a method.

 

Sam

 

From: stringtemplate-interest-bounces at antlr.org
[mailto:stringtemplate-interest-bounces at antlr.org] On Behalf Of Udo
Borkowski
Sent: Friday, February 18, 2011 4:02 PM
To: stringtemplate-interest List
Subject: [stringtemplate-interest] [ST4] How to apply multiple "format"s to
an expression?

 

Hi,

 

I would like to generate a constant definition like this:

 

            public static final int ABC             = 123;

            public static final int GHIJKLMN        = 456;

 

To make sure the "="s are aligned I can use the Java String format padding
feature, e.g. use a template like this:

 

t1(n,v) ::= <<

public static final int <n;format="%-15s"> = <v>;

>> 

 

However the name is given in mixed case and I need to "upper" it, e.g. with
something like this:

 

t2(n,v) ::= <<

public static final int <n;format="upper"> = <v>;

>> 

 

Is there a way to combine both formats, so I get an uppercased, right padded
name?

 

 

Udo

 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20110218/53660b47/attachment.html 

From collin.fagan at gmail.com  Fri Feb 18 14:53:42 2011
From: collin.fagan at gmail.com (Collin Fagan)
Date: Fri, 18 Feb 2011 16:53:42 -0600
Subject: [stringtemplate-interest] [ST4] How to apply multiple "format"s
 to an expression?
In-Reply-To: <024401cbcfbb$4b4aac10$e1e00430$@pixelminegames.com>
References: <024401cbcfbb$4b4aac10$e1e00430$@pixelminegames.com>
Message-ID: <AANLkTin4MOGMvj9KMmbeXwxrimoGQO1QoOAAjEPO1+Xj@mail.gmail.com>

*This could actually be done by extending the ObjectModelAdaptor model
adapter to have it check for such a method.*

Such an adapter is available as part of
STRUM<http://sourceforge.net/apps/mediawiki/project-strum/index.php?title=Main_Page>
.

   - PublicMethodModelAdapter<http://project-strum.svn.sourceforge.net/viewvc/project-strum/trunk/strum-project/strum/src/main/java/com/collinfagan/strum/adaptors/PublicMethodModelAdapter.java?revision=8&view=markup>-
access any public method from ST

Humm ... but it would be interesting to build a Renderer that took a
delimited set of format parameters.

<n;format="%15s,upper">

Of course comma works great here but not for the general case .. maybe make
the delimiter a parameter to the renderer? I might slap something together
to try it out.

Collin

On Fri, Feb 18, 2011 at 4:29 PM, Sam Harwell <sharwell at pixelminegames.com>wrote:

> Does this work:
>
>
>
> <(upper(n)); format="%-15s">
>
>
>
> With this definition of upper(x)?
>
>
>
> upper(x) ::= <<
>
> <x; format="upper">
>
> >>
>
>
>
> Also, here?s an interesting case where if <x.y> checked for a method y()
> (zero parameters and non-void return value), you could use <n.toUpperCase;
> format="%-15s">. This could actually be done by extending the
> ObjectModelAdaptor model adapter to have it check for such a method.
>
>
>
> Sam
>
>
>
> *From:* stringtemplate-interest-bounces at antlr.org [mailto:
> stringtemplate-interest-bounces at antlr.org] *On Behalf Of *Udo Borkowski
> *Sent:* Friday, February 18, 2011 4:02 PM
> *To:* stringtemplate-interest List
> *Subject:* [stringtemplate-interest] [ST4] How to apply multiple "format"s
> to an expression?
>
>
>
> Hi,
>
>
>
> I would like to generate a constant definition like this:
>
>
>
>             public static final int ABC             = 123;
>
>             public static final int GHIJKLMN        = 456;
>
>
>
> To make sure the "="s are aligned I can use the Java String format padding
> feature, e.g. use a template like this:
>
>
>
> t1(n,v) ::= <<
>
> public static final int ?n;*format="%-15s"*? = ?v?;
>
> >>
>
>
>
> However the name is given in mixed case and I need to "upper" it, e.g. with
> something like this:
>
>
>
> t2(n,v) ::= <<
>
> public static final int ?n;*format="upper"*? = ?v?;
>
> >>
>
>
>
> Is there a way to combine both formats, so I get an uppercased, right
> padded name?
>
>
>
>
>
> Udo
>
>
>
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20110218/732fd7d5/attachment.html 

From ub at abego-software.de  Sat Feb 19 00:12:02 2011
From: ub at abego-software.de (Udo Borkowski)
Date: Sat, 19 Feb 2011 09:12:02 +0100
Subject: [stringtemplate-interest] [ST4] How to apply multiple "format"s
	to an expression?
In-Reply-To: <024401cbcfbb$4b4aac10$e1e00430$@pixelminegames.com>
References: <024401cbcfbb$4b4aac10$e1e00430$@pixelminegames.com>
Message-ID: <4488A5DD-A1C9-414F-A92B-4FB2EB8518AE@abego-software.de>

Hi Sam,

> <(upper(n)); format="%-15s">


thanks, that works fine. 

I tried something similar but it didn't worked because I didn't used the "toString" operator (?). Grrr.


Udo

On 18.02.2011, at 23:29, Sam Harwell wrote:

> Does this work:
>  
> <(upper(n)); format="%-15s">
>  
> With this definition of upper(x)?
>  
> upper(x) ::= <<
> <x; format="upper">
> >> 
>  
> Also, here?s an interesting case where if <x.y> checked for a method y() (zero parameters and non-void return value), you could use <n.toUpperCase; format="%-15s">. This could actually be done by extending the ObjectModelAdaptor model adapter to have it check for such a method.
>  
> Sam
>  
> From: stringtemplate-interest-bounces at antlr.org [mailto:stringtemplate-interest-bounces at antlr.org] On Behalf Of Udo Borkowski
> Sent: Friday, February 18, 2011 4:02 PM
> To: stringtemplate-interest List
> Subject: [stringtemplate-interest] [ST4] How to apply multiple "format"s to an expression?
>  
> Hi,
>  
> I would like to generate a constant definition like this:
>  
>             public static final int ABC             = 123;
>             public static final int GHIJKLMN        = 456;
>  
> To make sure the "="s are aligned I can use the Java String format padding feature, e.g. use a template like this:
>  
> t1(n,v) ::= <<
> public static final int ?n;format="%-15s"? = ?v?;
> >> 
>  
> However the name is given in mixed case and I need to "upper" it, e.g. with something like this:
>  
> t2(n,v) ::= <<
> public static final int ?n;format="upper"? = ?v?;
> >> 
>  
> Is there a way to combine both formats, so I get an uppercased, right padded name?
>  
>  
> Udo
>  

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20110219/e193acc9/attachment-0001.html 

From ub at abego-software.de  Sat Feb 19 00:27:23 2011
From: ub at abego-software.de (Udo Borkowski)
Date: Sat, 19 Feb 2011 09:27:23 +0100
Subject: [stringtemplate-interest] [ST4] How to apply multiple "format"s
	to an expression?
In-Reply-To: <AANLkTin4MOGMvj9KMmbeXwxrimoGQO1QoOAAjEPO1+Xj@mail.gmail.com>
References: <024401cbcfbb$4b4aac10$e1e00430$@pixelminegames.com>
	<AANLkTin4MOGMvj9KMmbeXwxrimoGQO1QoOAAjEPO1+Xj@mail.gmail.com>
Message-ID: <B716816C-57BE-40F8-BEFB-646BAC225572@abego-software.de>

Hi Collin,

I tried out your adapter and it works fine. Thanks.


However I had to work around a more general problem. Maybe somebody has a general solution?

I already defined my own ObjectModelAdaptor for Object. As ST4 only allows one ObjectModelAdapter per class I had to change my adaptor to "call" PublicMethodModelAdapter. In my case it was easy: if my adapter does not support the given format I call the PublicMethodModelAdapter. 

This is fine because I own my code and I could change MyAdapter. But other people may want to use several third party adapters in one applications. How will this work? E.g. in the STRUM library there are already 4 adaptors for Object. What do I do if I want to use both the PublicMethodModelAdapter and the StaticMethodModelAdaptor?


Udo


On 18.02.2011, at 23:53, Collin Fagan wrote:

> This could actually be done by extending the ObjectModelAdaptor model adapter to have it check for such a method.
> 
> Such an adapter is available as part of STRUM.
> PublicMethodModelAdapter - access any public method from ST
> Humm ... but it would be interesting to build a Renderer that took a delimited set of format parameters.  
> 
> <n;format="%15s,upper">
> 
> Of course comma works great here but not for the general case .. maybe make the delimiter a parameter to the renderer? I might slap something together to try it out. 
> 
> Collin
> 
> On Fri, Feb 18, 2011 at 4:29 PM, Sam Harwell <sharwell at pixelminegames.com> wrote:
> Does this work:
> 
>  
> <(upper(n)); format="%-15s">
> 
>  
> With this definition of upper(x)?
> 
>  
> upper(x) ::= <<
> 
> <x; format="upper">
> 
> >> 
> 
>  
> Also, here?s an interesting case where if <x.y> checked for a method y() (zero parameters and non-void return value), you could use <n.toUpperCase; format="%-15s">. This could actually be done by extending the ObjectModelAdaptor model adapter to have it check for such a method.
> 
>  
> Sam
> 
>  
> From: stringtemplate-interest-bounces at antlr.org [mailto:stringtemplate-interest-bounces at antlr.org] On Behalf Of Udo Borkowski
> Sent: Friday, February 18, 2011 4:02 PM
> To: stringtemplate-interest List
> Subject: [stringtemplate-interest] [ST4] How to apply multiple "format"s to an expression?
> 
>  
> Hi,
> 
>  
> I would like to generate a constant definition like this:
> 
>  
>             public static final int ABC             = 123;
> 
>             public static final int GHIJKLMN        = 456;
> 
>  
> To make sure the "="s are aligned I can use the Java String format padding feature, e.g. use a template like this:
> 
>  
> t1(n,v) ::= <<
> 
> public static final int ?n;format="%-15s"? = ?v?;
> 
> >> 
> 
>  
> However the name is given in mixed case and I need to "upper" it, e.g. with something like this:
> 
>  
> t2(n,v) ::= <<
> 
> public static final int ?n;format="upper"? = ?v?;
> 
> >> 
> 
>  
> Is there a way to combine both formats, so I get an uppercased, right padded name?
> 
>  
>  
> Udo
> 
>  
> 
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
> 
> 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20110219/a1da8ec4/attachment.html 

From ub at abego-software.de  Sat Feb 19 02:00:07 2011
From: ub at abego-software.de (Udo Borkowski)
Date: Sat, 19 Feb 2011 11:00:07 +0100
Subject: [stringtemplate-interest] [ST4 Beta4] NullPointerException when
	redefining embedded region
Message-ID: <E17ADEC6-77CB-4820-8858-52FC495A6CA7@abego-software.de>

The following template raises an NullPointerException:

------------
main() ::= <<
<@r>a<@end>
<@r()>
>>
------------

The NPE is caught by ST4 and reported through the ErrorManager.


TestCase:

	public void testIt() throws Exception {
		STMessageTextCollector messages = new STMessageTextCollector();

		String templates = "main() ::= <<\n<@r>a<@end>\n<@r()>\n>>";
		writeFile(tmpdir, "t.stg", templates);
		org.stringtemplate.v4.STGroup group = new org.stringtemplate.v4.STGroupFile(
				tmpdir + "/t.stg");
		group.errMgr = new ErrorManager(messages);

		// Force the compilation (this led to an NPE earlier that is reported in
		// the error messages)
		org.stringtemplate.v4.ST st = group.getInstanceOf("main");

		// A proper error messages should be written
		Assert.assertEquals(
				"0:-1: region main.r is embedded and thus already implicitly defined\n",
				messages.getText());
	}


CodeFix:

I don't have a fix for this. I implemented a workaround in ErrorManager#compileTimeError, however the cause for the problem is deeper inside the ST4 code, possibly related to STGroup#rawDefineTemplate and its callers.


Udo

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20110219/d71af7e4/attachment.html 

From ub at abego-software.de  Sat Feb 19 03:22:10 2011
From: ub at abego-software.de (Udo Borkowski)
Date: Sat, 19 Feb 2011 12:22:10 +0100
Subject: [stringtemplate-interest] [ST4 Beta4] Inconsistent handling of
	starting/trailing newline in embedded region
Message-ID: <C7C484BA-F077-4838-A022-EB8829417873@abego-software.de>

Hi,

I suggest to discard a trailing and leading newline in an embedded region. Also the newline following an <@end> should not be discarded.

This is consistent with the way these newlines are handled for templates and externally defined regions (trimOneStarting/TrailingNewline).

Currently a starting/trailing newline in an embedded region is handled differently than ones in an external region definition. This leads to problems e.g. when an embedded region is later redefined (by an external region in a sub group).

E.g.

This template using embedded regions:

==========
embedded() ::= <<
---------
	a<@e1>e1<@end>b
---------
	a<@e2>
	e2
	<@end>b
---------
	a
	<@e3>
	e3
	<@end>b
---------
	a
	<@e4>
	e4
	<@end>
	b
---------
>>
==========

generates this output:

==========
---------
	ae1b
---------
	ae2
b
---------
	a
	e3
b
---------
	a
	e4
	b
---------
==========

If one defines the same template using external regions, e.g.:

==========
nonEmbedded() ::= <<
---------
	a<@r1()>b
---------
	a<@r2()>b
---------
	a
	<@r3()>b
---------
	a
	<@r4()>
	b
---------
>>

@nonEmbedded.r1() ::= <<r1>>

@nonEmbedded.r2() ::= <<
r2
>>

@nonEmbedded.r3() ::= <<
r3
>>

@nonEmbedded.r4() ::= <<
r4
>>
==========

the result is different (and more what I would have expected):
==========
---------
	ar1b
---------
	ar2b
---------
	a
	r3b
---------
	a
	r4
	b
---------
==========

Back to the embedded case: 
when I now redefined the embedded regions in a different group with the same stuff as for the "nonEmbedded" case, with this
==========
@embedded.e1() ::= <<r1>>

@embedded.e2() ::= <<
r2
>>

@embedded.e3() ::= <<
r3
>>

@embedded.e4() ::= <<
r4
>>
==========

I got a completely different picture:

==========
---------
	ar1b
---------
	ar2b
---------
	a
r3b
---------
	a
r4b
---------
==========


Udo

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20110219/2b39f824/attachment-0001.html 

From ub at abego-software.de  Sat Feb 19 06:58:08 2011
From: ub at abego-software.de (Udo Borkowski)
Date: Sat, 19 Feb 2011 15:58:08 +0100
Subject: [stringtemplate-interest] [ST4] How to apply multiple "format"s
	to an expression?
In-Reply-To: <AANLkTin4MOGMvj9KMmbeXwxrimoGQO1QoOAAjEPO1+Xj@mail.gmail.com>
References: <024401cbcfbb$4b4aac10$e1e00430$@pixelminegames.com>
	<AANLkTin4MOGMvj9KMmbeXwxrimoGQO1QoOAAjEPO1+Xj@mail.gmail.com>
Message-ID: <B5E3B210-9627-407E-A0CA-E004542FE4D0@abego-software.de>

Hi Colin,

> Humm ... but it would be interesting to build a Renderer that took a delimited set of format parameters.  
> 
> <n;format="%15s,upper">
> 
> Of course comma works great here but not for the general case .. maybe make the delimiter a parameter to the renderer? I might slap something together to try it out. 


this sounds like a great idea.

May I throw in some suggestions?

Rather than using the commonly used separator "," I would use the pipe '|' character to separate the multiple format parts (by default). Actually the new renderer to be written has some "pipe" functionality: the output of one renderer is the input for another and so on. So ?|? also makes semantically.

Of cause there should be the option to change the separator. However I would not (only) make this a parameter to the renderer but also make this an option in the format string itself. E.g. in one application you may want to use the same renderer (instance) with different separators.

Here two possible formats:

<n;format="|upper|%15s">

Here the initial ?|? indicates the pipe formatting and the pipe renderer splits the rest of the format text and processes each format one after another. 

To define a different separator one could start with ?|x|?, i.e. the new separator is framed by two pipe chars. E.g. to use the ";" one would write:

<n;format="|;|upper;%15s">


An alternative syntax may start with a keyword to indicate we want to do piping. The character following the keyword is then used as the separator. E.g. if we use the keyword "pipe" the tag would look like this:

<n;format="pipe|upper|%15s">

or for the semicolon case:

<n;format="pipe;upper;%15s">

I would prefer the second syntax. In that case there would not even be the need to decide for a good "default separator" ;-)


Udo


 
On 18.02.2011, at 23:53, Collin Fagan wrote:

> This could actually be done by extending the ObjectModelAdaptor model adapter to have it check for such a method.
> 
> Such an adapter is available as part of STRUM.
> PublicMethodModelAdapter - access any public method from ST
> Humm ... but it would be interesting to build a Renderer that took a delimited set of format parameters.  
> 
> <n;format="%15s,upper">
> 
> Of course comma works great here but not for the general case .. maybe make the delimiter a parameter to the renderer? I might slap something together to try it out. 
> 
> Collin
> 
> On Fri, Feb 18, 2011 at 4:29 PM, Sam Harwell <sharwell at pixelminegames.com> wrote:
> Does this work:
> 
>  
> <(upper(n)); format="%-15s">
> 
>  
> With this definition of upper(x)?
> 
>  
> upper(x) ::= <<
> 
> <x; format="upper">
> 
> >> 
> 
>  
> Also, here?s an interesting case where if <x.y> checked for a method y() (zero parameters and non-void return value), you could use <n.toUpperCase; format="%-15s">. This could actually be done by extending the ObjectModelAdaptor model adapter to have it check for such a method.
> 
>  
> Sam
> 
>  
> From: stringtemplate-interest-bounces at antlr.org [mailto:stringtemplate-interest-bounces at antlr.org] On Behalf Of Udo Borkowski
> Sent: Friday, February 18, 2011 4:02 PM
> To: stringtemplate-interest List
> Subject: [stringtemplate-interest] [ST4] How to apply multiple "format"s to an expression?
> 
>  
> Hi,
> 
>  
> I would like to generate a constant definition like this:
> 
>  
>             public static final int ABC             = 123;
> 
>             public static final int GHIJKLMN        = 456;
> 
>  
> To make sure the "="s are aligned I can use the Java String format padding feature, e.g. use a template like this:
> 
>  
> t1(n,v) ::= <<
> 
> public static final int ?n;format="%-15s"? = ?v?;
> 
> >> 
> 
>  
> However the name is given in mixed case and I need to "upper" it, e.g. with something like this:
> 
>  
> t2(n,v) ::= <<
> 
> public static final int ?n;format="upper"? = ?v?;
> 
> >> 
> 
>  
> Is there a way to combine both formats, so I get an uppercased, right padded name?
> 
>  
>  
> Udo
> 
>  
> 
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
> 
> 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20110219/d72659b4/attachment.html 

From ub at abego-software.de  Sat Feb 19 10:58:14 2011
From: ub at abego-software.de (Udo Borkowski)
Date: Sat, 19 Feb 2011 19:58:14 +0100
Subject: [stringtemplate-interest] [ST4 Beta4] Inconsistent handling of
	starting/trailing newline in embedded region
In-Reply-To: <C7C484BA-F077-4838-A022-EB8829417873@abego-software.de>
References: <C7C484BA-F077-4838-A022-EB8829417873@abego-software.de>
Message-ID: <1521C8CA-A7B4-4505-956C-DD40E90D05FA@abego-software.de>

A minor correction to my earlier message:

The redefinition of the embedded regions didn't included the indentation. Here the correct ones:

==========
@embedded.e1() ::= <<r1>>

@embedded.e2() ::= <<
	r2
>>

@embedded.e3() ::= <<
	r3
>>

@embedded.e4() ::= <<
	r4
>>
==========

As a consequence the output now looks like this:

==========
---------
	ar1b
---------
	ar2b
---------
	a
	r3b
---------
	a
	r4b
---------
==========


In the meantime I had a look at the grammar file for the STParser. 

Currently the embedded region is defined as:

region
	:	INDENT? LDELIM '@' ID RDELIM NEWLINE?
		template
		INDENT? LDELIM '@end' RDELIM NEWLINE?
		-> ^(REGION ID template?)
	;

The starting newline is already discarded (good), so we only need to deal with the trailing newline.
Currently the last "NEWLINE?" eats the newline behind the <@end>. Moving the "NEWLINE?" behind the template solves half of the problem: the text following the <@end> is now used completely. 

region
	:	INDENT? LDELIM '@' ID RDELIM NEWLINE?
		template  NEWLINE?
		INDENT? LDELIM '@end' RDELIM
		-> ^(REGION ID template?)
	;

However the "NEWLINE?" behind the template has no effect. I assume the template is parsed in a "greedy" way and "NEWLINE?" is always matched to the empty string. I assume ANTLR could be configured to handle this differently but I am not that familiar with ANTLR. Ter?

For now I am using this workaround:

region
	:	INDENT? LDELIM '@' ID RDELIM NEWLINE?
		template  NEWLINE
		INDENT? LDELIM '@end' RDELIM
		-> ^(REGION ID template?)
	;

I.e. the <@end> must always start in a new line. 


Udo




On 19.02.2011, at 12:22, Udo Borkowski wrote:

> Hi,
> 
> I suggest to discard a trailing and leading newline in an embedded region. Also the newline following an <@end> should not be discarded.
> 
> This is consistent with the way these newlines are handled for templates and externally defined regions (trimOneStarting/TrailingNewline).
> 
> Currently a starting/trailing newline in an embedded region is handled differently than ones in an external region definition. This leads to problems e.g. when an embedded region is later redefined (by an external region in a sub group).
> 
> E.g.
> 
> This template using embedded regions:
> 
> ==========
> embedded() ::= <<
> ---------
> 	a<@e1>e1<@end>b
> ---------
> 	a<@e2>
> 	e2
> 	<@end>b
> ---------
> 	a
> 	<@e3>
> 	e3
> 	<@end>b
> ---------
> 	a
> 	<@e4>
> 	e4
> 	<@end>
> 	b
> ---------
> >>
> ==========
> 
> generates this output:
> 
> ==========
> ---------
> 	ae1b
> ---------
> 	ae2
> b
> ---------
> 	a
> 	e3
> b
> ---------
> 	a
> 	e4
> 	b
> ---------
> ==========
> 
> If one defines the same template using external regions, e.g.:
> 
> ==========
> nonEmbedded() ::= <<
> ---------
> 	a<@r1()>b
> ---------
> 	a<@r2()>b
> ---------
> 	a
> 	<@r3()>b
> ---------
> 	a
> 	<@r4()>
> 	b
> ---------
> >>
> 
> @nonEmbedded.r1() ::= <<r1>>
> 
> @nonEmbedded.r2() ::= <<
> r2
> >>
> 
> @nonEmbedded.r3() ::= <<
> r3
> >>
> 
> @nonEmbedded.r4() ::= <<
> r4
> >>
> ==========
> 
> the result is different (and more what I would have expected):
> ==========
> ---------
> 	ar1b
> ---------
> 	ar2b
> ---------
> 	a
> 	r3b
> ---------
> 	a
> 	r4
> 	b
> ---------
> ==========
> 
> Back to the embedded case: 
> when I now redefined the embedded regions in a different group with the same stuff as for the "nonEmbedded" case, with this
> ==========
> @embedded.e1() ::= <<r1>>
> 
> @embedded.e2() ::= <<
> r2
> >>
> 
> @embedded.e3() ::= <<
> r3
> >>
> 
> @embedded.e4() ::= <<
> r4
> >>
> ==========
> 
> I got a completely different picture:
> 
> ==========
> ---------
> 	ar1b
> ---------
> 	ar2b
> ---------
> 	a
> r3b
> ---------
> 	a
> r4b
> ---------
> ==========
> 
> 
> Udo
> 
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20110219/47b9536b/attachment-0001.html 

From ub at abego-software.de  Sat Feb 19 11:09:20 2011
From: ub at abego-software.de (Udo Borkowski)
Date: Sat, 19 Feb 2011 20:09:20 +0100
Subject: [stringtemplate-interest] [ST4 Beta4] NullPointerException when
	redefining embedded region
In-Reply-To: <E17ADEC6-77CB-4820-8858-52FC495A6CA7@abego-software.de>
References: <E17ADEC6-77CB-4820-8858-52FC495A6CA7@abego-software.de>
Message-ID: <B028D2D3-1CFB-4458-A9E4-CA706C507952@abego-software.de>

An addition to the earlier message: the following (invalid) region definition also raises a NullPointerException, but at a slightly different location. I guess a fix will cover both situations.

---------------
@t.() ::= "" 
---------------

TestCase:

	public void testIt2() throws Exception {
		STMessageTextCollector messages = new STMessageTextCollector();

		String templates = "@t.() ::= \"\"";
		writeFile(tmpdir, "t.stg", templates);
		org.stringtemplate.v4.STGroup group = new org.stringtemplate.v4.STGroupFile(
				tmpdir + "/t.stg");
		group.errMgr = new ErrorManager(messages);

		// Force loading the group
		// (this led to an NPE earlier that is reported in the error messages)
		org.stringtemplate.v4.ST st = group.getInstanceOf("main");

		// A proper error messages should be written
		Assert.assertEquals(
				"t.stg 1:3: missing ID at '('\n"
						+ "1:3: template t doesn't have a region called <missing ID>\n",
				messages.getText());
	}


Udo

On 19.02.2011, at 11:00, Udo Borkowski wrote:

> The following template raises an NullPointerException:
> 
> ------------
> main() ::= <<
> <@r>a<@end>
> <@r()>
> >>
> ------------
> 
> The NPE is caught by ST4 and reported through the ErrorManager.
> 
> 
> TestCase:
> 
> 	public void testIt() throws Exception {
> 		STMessageTextCollector messages = new STMessageTextCollector();
> 
> 		String templates = "main() ::= <<\n<@r>a<@end>\n<@r()>\n>>";
> 		writeFile(tmpdir, "t.stg", templates);
> 		org.stringtemplate.v4.STGroup group = new org.stringtemplate.v4.STGroupFile(
> 				tmpdir + "/t.stg");
> 		group.errMgr = new ErrorManager(messages);
> 
> 		// Force the compilation (this led to an NPE earlier that is reported in
> 		// the error messages)
> 		org.stringtemplate.v4.ST st = group.getInstanceOf("main");
> 
> 		// A proper error messages should be written
> 		Assert.assertEquals(
> 				"0:-1: region main.r is embedded and thus already implicitly defined\n",
> 				messages.getText());
> 	}
> 
> 
> CodeFix:
> 
> I don't have a fix for this. I implemented a workaround in ErrorManager#compileTimeError, however the cause for the problem is deeper inside the ST4 code, possibly related to STGroup#rawDefineTemplate and its callers.
> 
> 
> Udo
> 
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20110219/7bd1501b/attachment.html 

From collin.fagan at gmail.com  Sun Feb 20 18:17:37 2011
From: collin.fagan at gmail.com (Collin Fagan)
Date: Sun, 20 Feb 2011 20:17:37 -0600
Subject: [stringtemplate-interest] [ST4] How to apply multiple "format"s
 to an expression?
In-Reply-To: <B5E3B210-9627-407E-A0CA-E004542FE4D0@abego-software.de>
References: <024401cbcfbb$4b4aac10$e1e00430$@pixelminegames.com>
	<AANLkTin4MOGMvj9KMmbeXwxrimoGQO1QoOAAjEPO1+Xj@mail.gmail.com>
	<B5E3B210-9627-407E-A0CA-E004542FE4D0@abego-software.de>
Message-ID: <AANLkTineqgkRq4we=KzA65gccV2bjOYYeyqavY8TBjzP@mail.gmail.com>

Okay so I did some hacking and have this:

STGroup group = new STGroupFile("templates/MultiFormatStringRenderer.stg");

AttributeRenderer stringRenderer = ... your string renderer here ...
group.registerRenderer(String.class, new
MultiFormatStringRenderer(stringRenderer, " "));

ST st = group.getInstanceOf("main");
st.add("string", "     Renderers are fun!     ");

System.out.println(st.render());

-----

main(string) ::= <<
String - Raw Value = "<string>"

String - format="strip" = "<string; format="strip">"
String - format="strip uncapitalize" = "<string; format="strip
uncapitalize">"
String - format="strip uncapitalize swapCase" = "<string; format="strip
uncapitalize swapCase">"

>>

And it outputs:

String - Raw Value = "     Renderers are fun!     "

String - format="strip" = "Renderers are fun!"
String - format="strip uncapitalize" = "renderers are fun!"
String - format="strip uncapitalize swapCase" = "RENDERERS ARE FUN!

It supports splitting on any regex delimiter, because it just uses
String.split() underneath. I got this far and began to wonder if this is
really worth it. First it will never work for the general case, just for
String. That might surprise someone who might attempt a "cross-type"
rendering scenario.

Example:

<trueBooleanValue; format="YN uncapitalize">

Lets pretend there is a Boolean renderer for which YN transforms a Boolean
value into "Yes" and "No" strings. One  might assume that the above
statement would produce "yes" but this in fact is not the case, it's a error
because the entire string is passed to BooleanRenderer and not my special
StringRenderer. A renderer is just not going to get this done on it's own,
you would need a language change.


Lets contrast this with what one might do with one or more ModelAdapters.

<trueBooleanValue.YN.uncapitalize>

This would produce the expected "yes" output and is more concise then the
format statement.

For your specific example:

<n;format="|upper|%15s">

If you used a model adapter it would look like this:

<n.upper.("%15s")>

So it occurs to me ... why would anyone use a renderer with a parameter when
they can just write a model adapter? I know, I know what you are thinking..
"booo! hissss! renderers are great! Model adapters are not for rendering!"
Which is true but syntactically they are very convenient and are "chain
friendly".

What do others think?

Collin


On Sat, Feb 19, 2011 at 8:58 AM, Udo Borkowski <ub at abego-software.de> wrote:

> Hi Colin,
>
> Humm ... but it would be interesting to build a Renderer that took a
> delimited set of format parameters.
>
> <n;format="%15s,upper">
>
> Of course comma works great here but not for the general case .. maybe make
> the delimiter a parameter to the renderer? I might slap something together
> to try it out.
>
>
>
> this sounds like a great idea.
>
> May I throw in some suggestions?
>
> Rather than using the commonly used separator "," I would use the pipe '|'
> character to separate the multiple format parts (by default). Actually the
> new renderer to be written has some "pipe" functionality: the output of one
> renderer is the input for another and so on. So ?|? also makes semantically.
>
> Of cause there should be the option to change the separator. However I
> would not (only) make this a parameter to the renderer but also make this an
> option in the format string itself. E.g. in one application you may want to
> use the same renderer (instance) with different separators.
>
> Here two possible formats:
>
> <n;format="|upper|%15s">
>
> Here the initial ?|? indicates the pipe formatting and the pipe renderer
> splits the rest of the format text and processes each format one after
> another.
>
> To define a different separator one could start with ?|x|?, i.e. the new
> separator is framed by two pipe chars. E.g. to use the ";" one would write:
>
> <n;format="|;|upper;%15s">
>
>
> An alternative syntax may start with a keyword to indicate we want to do
> piping. The character following the keyword is then used as the separator.
> E.g. if we use the keyword "pipe" the tag would look like this:
>
> <n;format="pipe|upper|%15s">
>
> or for the semicolon case:
>
> <n;format="pipe;upper;%15s">
>
> I would prefer the second syntax. In that case there would not even be the
> need to decide for a good "default separator" ;-)
>
>
> Udo
>
>
>
> On 18.02.2011, at 23:53, Collin Fagan wrote:
>
> *This could actually be done by extending the ObjectModelAdaptor model
> adapter to have it check for such a method.*
>
> Such an adapter is available as part of STRUM<http://sourceforge.net/apps/mediawiki/project-strum/index.php?title=Main_Page>
> .
>
>    - PublicMethodModelAdapter<http://project-strum.svn.sourceforge.net/viewvc/project-strum/trunk/strum-project/strum/src/main/java/com/collinfagan/strum/adaptors/PublicMethodModelAdapter.java?revision=8&view=markup>- access any public method from ST
>
> Humm ... but it would be interesting to build a Renderer that took a
> delimited set of format parameters.
>
> <n;format="%15s,upper">
>
> Of course comma works great here but not for the general case .. maybe make
> the delimiter a parameter to the renderer? I might slap something together
> to try it out.
>
> Collin
>
> On Fri, Feb 18, 2011 at 4:29 PM, Sam Harwell <sharwell at pixelminegames.com>wrote:
>
>> Does this work:
>>
>>
>> <(upper(n)); format="%-15s">
>>
>>
>> With this definition of upper(x)?
>>
>>
>> upper(x) ::= <<
>>
>> <x; format="upper">
>>
>> >>
>>
>>
>> Also, here?s an interesting case where if <x.y> checked for a method y()
>> (zero parameters and non-void return value), you could use <n.toUpperCase;
>> format="%-15s">. This could actually be done by extending the
>> ObjectModelAdaptor model adapter to have it check for such a method.
>>
>>
>> Sam
>>
>>
>> *From:* stringtemplate-interest-bounces at antlr.org [mailto:
>> stringtemplate-interest-bounces at antlr.org] *On Behalf Of *Udo Borkowski
>> *Sent:* Friday, February 18, 2011 4:02 PM
>> *To:* stringtemplate-interest List
>> *Subject:* [stringtemplate-interest] [ST4] How to apply multiple
>> "format"s to an expression?
>>
>>
>> Hi,
>>
>>
>> I would like to generate a constant definition like this:
>>
>>
>>             public static final int ABC             = 123;
>>
>>             public static final int GHIJKLMN        = 456;
>>
>>
>> To make sure the "="s are aligned I can use the Java String format padding
>> feature, e.g. use a template like this:
>>
>>
>> t1(n,v) ::= <<
>>
>> public static final int ?n;*format="%-15s"*? = ?v?;
>>
>> >>
>>
>>
>> However the name is given in mixed case and I need to "upper" it, e.g.
>> with something like this:
>>
>>
>> t2(n,v) ::= <<
>>
>> public static final int ?n;*format="upper"*? = ?v?;
>>
>> >>
>>
>>
>> Is there a way to combine both formats, so I get an uppercased, right
>> padded name?
>>
>>
>>
>> Udo
>>
>>
>> _______________________________________________
>> stringtemplate-interest mailing list
>> stringtemplate-interest at antlr.org
>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>>
>>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20110220/43b7a364/attachment.html 

From ub at abego-software.de  Sun Feb 20 23:41:13 2011
From: ub at abego-software.de (Udo Borkowski)
Date: Mon, 21 Feb 2011 08:41:13 +0100
Subject: [stringtemplate-interest] [ST4] How to apply multiple "format"s
	to an expression?
In-Reply-To: <AANLkTineqgkRq4we=KzA65gccV2bjOYYeyqavY8TBjzP@mail.gmail.com>
References: <024401cbcfbb$4b4aac10$e1e00430$@pixelminegames.com>
	<AANLkTin4MOGMvj9KMmbeXwxrimoGQO1QoOAAjEPO1+Xj@mail.gmail.com>
	<B5E3B210-9627-407E-A0CA-E004542FE4D0@abego-software.de>
	<AANLkTineqgkRq4we=KzA65gccV2bjOYYeyqavY8TBjzP@mail.gmail.com>
Message-ID: <E5056053-EBC1-41B5-8171-A26827188F78@abego-software.de>

Hi Collin,

> Lets contrast this with what one might do with one or more ModelAdapters.

thanks for showing the relation to ModelAdapters. I never thought of it this way but you are right, it looks like using a ModelAdapter solves many of my issues. Great. Syntactically I like the ModelAdapter approach even better.

The MultiFormatStringRenderer also has its virtue as one may reuse existing (third party) string renderers without writing extra code (if applicable). And with a string renderer the template may pass in "parameters", like "%15s". 

So I would go the pragmatic way and use both.

Udo


On 21.02.2011, at 03:17, Collin Fagan wrote:

> Okay so I did some hacking and have this:
> 
> STGroup group = new STGroupFile("templates/MultiFormatStringRenderer.stg");
> 
> AttributeRenderer stringRenderer = ... your string renderer here ...
> group.registerRenderer(String.class, new MultiFormatStringRenderer(stringRenderer, " "));
>         
> ST st = group.getInstanceOf("main");
> st.add("string", "     Renderers are fun!     ");
> 
> System.out.println(st.render());
> 
> -----
> 
> main(string) ::= <<
> String - Raw Value = "<string>"
> 
> String - format="strip" = "<string; format="strip">"
> String - format="strip uncapitalize" = "<string; format="strip uncapitalize">"
> String - format="strip uncapitalize swapCase" = "<string; format="strip uncapitalize swapCase">"
> 
> >>
> 
> And it outputs:
> 
> String - Raw Value = "     Renderers are fun!     "
> 
> String - format="strip" = "Renderers are fun!"
> String - format="strip uncapitalize" = "renderers are fun!"
> String - format="strip uncapitalize swapCase" = "RENDERERS ARE FUN!
> 
> It supports splitting on any regex delimiter, because it just uses String.split() underneath. I got this far and began to wonder if this is really worth it. First it will never work for the general case, just for String. That might surprise someone who might attempt a "cross-type" rendering scenario. 
> 
> Example:
> 
> <trueBooleanValue; format="YN uncapitalize">
> 
> Lets pretend there is a Boolean renderer for which YN transforms a Boolean value into "Yes" and "No" strings. One  might assume that the above statement would produce "yes" but this in fact is not the case, it's a error because the entire string is passed to BooleanRenderer and not my special StringRenderer. A renderer is just not going to get this done on it's own, you would need a language change. 
> 
> 
> Lets contrast this with what one might do with one or more ModelAdapters.
> 
> <trueBooleanValue.YN.uncapitalize>
> 
> This would produce the expected "yes" output and is more concise then the format statement. 
> 
> For your specific example:
> 
> <n;format="|upper|%15s">
> 
> If you used a model adapter it would look like this:
> 
> <n.upper.("%15s")>
> 
> So it occurs to me ... why would anyone use a renderer with a parameter when they can just write a model adapter? I know, I know what you are thinking.. "booo! hissss! renderers are great! Model adapters are not for rendering!" Which is true but syntactically they are very convenient and are "chain friendly". 
> 
> What do others think?
> 
> Collin
> 
> 
> On Sat, Feb 19, 2011 at 8:58 AM, Udo Borkowski <ub at abego-software.de> wrote:
> Hi Colin,
> 
>> Humm ... but it would be interesting to build a Renderer that took a delimited set of format parameters.  
>> 
>> <n;format="%15s,upper">
>> 
>> Of course comma works great here but not for the general case .. maybe make the delimiter a parameter to the renderer? I might slap something together to try it out. 
> 
> 
> this sounds like a great idea.
> 
> May I throw in some suggestions?
> 
> Rather than using the commonly used separator "," I would use the pipe '|' character to separate the multiple format parts (by default). Actually the new renderer to be written has some "pipe" functionality: the output of one renderer is the input for another and so on. So ?|? also makes semantically.
> 
> Of cause there should be the option to change the separator. However I would not (only) make this a parameter to the renderer but also make this an option in the format string itself. E.g. in one application you may want to use the same renderer (instance) with different separators.
> 
> Here two possible formats:
> 
> <n;format="|upper|%15s">
> 
> Here the initial ?|? indicates the pipe formatting and the pipe renderer splits the rest of the format text and processes each format one after another. 
> 
> To define a different separator one could start with ?|x|?, i.e. the new separator is framed by two pipe chars. E.g. to use the ";" one would write:
> 
> <n;format="|;|upper;%15s">
> 
> 
> An alternative syntax may start with a keyword to indicate we want to do piping. The character following the keyword is then used as the separator. E.g. if we use the keyword "pipe" the tag would look like this:
> 
> <n;format="pipe|upper|%15s">
> 
> or for the semicolon case:
> 
> <n;format="pipe;upper;%15s">
> 
> I would prefer the second syntax. In that case there would not even be the need to decide for a good "default separator" ;-)
> 
> 
> Udo
> 
> 
>  
> On 18.02.2011, at 23:53, Collin Fagan wrote:
> 
>> This could actually be done by extending the ObjectModelAdaptor model adapter to have it check for such a method.
>> 
>> Such an adapter is available as part of STRUM.
>> PublicMethodModelAdapter - access any public method from ST
>> Humm ... but it would be interesting to build a Renderer that took a delimited set of format parameters.  
>> 
>> <n;format="%15s,upper">
>> 
>> Of course comma works great here but not for the general case .. maybe make the delimiter a parameter to the renderer? I might slap something together to try it out. 
>> 
>> Collin
>> 
>> On Fri, Feb 18, 2011 at 4:29 PM, Sam Harwell <sharwell at pixelminegames.com> wrote:
>> Does this work:
>> 
>>  
>> <(upper(n)); format="%-15s">
>> 
>>  
>> With this definition of upper(x)?
>> 
>>  
>> upper(x) ::= <<
>> 
>> <x; format="upper">
>> 
>> >> 
>> 
>>  
>> Also, here?s an interesting case where if <x.y> checked for a method y() (zero parameters and non-void return value), you could use <n.toUpperCase; format="%-15s">. This could actually be done by extending the ObjectModelAdaptor model adapter to have it check for such a method.
>> 
>>  
>> Sam
>> 
>>  
>> From: stringtemplate-interest-bounces at antlr.org [mailto:stringtemplate-interest-bounces at antlr.org] On Behalf Of Udo Borkowski
>> Sent: Friday, February 18, 2011 4:02 PM
>> To: stringtemplate-interest List
>> Subject: [stringtemplate-interest] [ST4] How to apply multiple "format"s to an expression?
>> 
>>  
>> Hi,
>> 
>>  
>> I would like to generate a constant definition like this:
>> 
>>  
>>             public static final int ABC             = 123;
>> 
>>             public static final int GHIJKLMN        = 456;
>> 
>>  
>> To make sure the "="s are aligned I can use the Java String format padding feature, e.g. use a template like this:
>> 
>>  
>> t1(n,v) ::= <<
>> 
>> public static final int ?n;format="%-15s"? = ?v?;
>> 
>> >> 
>> 
>>  
>> However the name is given in mixed case and I need to "upper" it, e.g. with something like this:
>> 
>>  
>> t2(n,v) ::= <<
>> 
>> public static final int ?n;format="upper"? = ?v?;
>> 
>> >> 
>> 
>>  
>> Is there a way to combine both formats, so I get an uppercased, right padded name?
>> 
>>  
>>  
>> Udo
>> 
>>  
>> 
>> _______________________________________________
>> stringtemplate-interest mailing list
>> stringtemplate-interest at antlr.org
>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>> 
>> 
> 
> 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20110221/9e867ee4/attachment-0001.html 

From parrt at cs.usfca.edu  Mon Feb 21 12:29:54 2011
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon, 21 Feb 2011 12:29:54 -0800
Subject: [stringtemplate-interest] I'll reawaken in ST mode probably later
	this week
Message-ID: <047694B5-B427-4366-9A3E-8C5D617B6095@cs.usfca.edu>

need to finish up the left recursion antlr thing to get it into a paper.  Then my primary goal is to get v4 ST fixed up and out the door with new documentation.

Ter

From webman at live.it  Tue Feb 22 00:35:36 2011
From: webman at live.it (Valerio Donnarumma)
Date: Tue, 22 Feb 2011 09:35:36 +0100
Subject: [stringtemplate-interest] stringtemplate problem
In-Reply-To: <BLU120-W21612A207C4A2C7FD10E5DCDD80@phx.gbl>
References: <BLU120-W21612A207C4A2C7FD10E5DCDD80@phx.gbl>
Message-ID: <BLU120-W19898F97C9F92255A51354CDD80@phx.gbl>


 



Hello,
i have a problem.
I use StringTemplate to build a template that contain some statements.
 
One of that statements is a loop (for i=1...to n); so i decide to create an ArrayList as parameter of the setAttribute method.
 
// In the .st file i have the following statement
$variableName$ <- $measures$
 
where measures is an ArrayList.

How can I cycle on the measures?
 
Thanks !!
Valerio 		 	   		  
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20110222/6c796722/attachment.html 

From sathish_gs at rediffmail.com  Wed Feb 23 09:23:34 2011
From: sathish_gs at rediffmail.com (gopal  sathish)
Date: 23 Feb 2011 17:23:34 -0000
Subject: [stringtemplate-interest] =?utf-8?q?=5BSPAM=5D_String_template_an?=
	=?utf-8?q?d_Expression?=
Message-ID: <20110223172334.27666.qmail@f5mail-224-112.rediffmail.com>

Hi all,

We are in the process of converting our view from jsp to templates.

Most of our view contains some HTML table to show some of list of data.&nbsp;
The issue we are facing currently is that one of the column in the table is an expression i.e the particular column is not represented by any property in the model.(The value is calculated by using Mathematical formula with using some property).

How do i render these kind of values in String template. Do i need to create any adapter? Kindly help me in this.

Regards
Sathish&nbsp; 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20110223/3a44d06c/attachment.html 

From xukaiv at gmail.com  Wed Feb 23 20:53:08 2011
From: xukaiv at gmail.com (Xu Kai)
Date: Thu, 24 Feb 2011 12:53:08 +0800
Subject: [stringtemplate-interest] string template dynamic scope example
Message-ID: <AANLkTikKYaS76RcqsLt4HvqRrY9iMM5CNWcKoUqx_HUq@mail.gmail.com>

Hi All,
    I am using ANTLR+ST to do some code generation. I am new to the
recognizer and generator.
    I have read the Definitive Guide to ANTLR and String Template 3
Document. But I havn't seen a example to show how to use dynamic scope in
String Template ?
    Is there any template file I may get to see some example which
illustrates how to use the dynamic feature of string template?
    Thanks a lot.

-- 
Xu Kai
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20110224/4167bcf5/attachment.html 

From parrt at cs.usfca.edu  Mon Feb 28 10:18:50 2011
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon, 28 Feb 2011 10:18:50 -0800
Subject: [stringtemplate-interest] string template dynamic scope example
In-Reply-To: <AANLkTikKYaS76RcqsLt4HvqRrY9iMM5CNWcKoUqx_HUq@mail.gmail.com>
References: <AANLkTikKYaS76RcqsLt4HvqRrY9iMM5CNWcKoUqx_HUq@mail.gmail.com>
Message-ID: <20FA0FA4-EA7B-4FCC-B6CA-40D891A8ADC6@cs.usfca.edu>

Dynamic scoping to sort of happens. for example, if you are generating a java class, you will create a template with an argument of className. any template that is included within that body can reference className as if it were passed as a parameter to that template.
Ter
On Feb 23, 2011, at 8:53 PM, Xu Kai wrote:

> Hi All,
>     I am using ANTLR+ST to do some code generation. I am new to the recognizer and generator. 
>     I have read the Definitive Guide to ANTLR and String Template 3 Document. But I havn't seen a example to show how to use dynamic scope in String Template ?
>     Is there any template file I may get to see some example which illustrates how to use the dynamic feature of string template?
>     Thanks a lot.
> 
> -- 
> Xu Kai
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest


