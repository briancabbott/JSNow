From mortenoh at gmail.com  Thu Dec  2 14:52:49 2010
From: mortenoh at gmail.com (Morten Olav Hansen)
Date: Thu, 2 Dec 2010 23:52:49 +0100
Subject: [stringtemplate-interest] Anonymous template inside another
	anonymous template
In-Reply-To: <AANLkTikkF0M9NV2q_aGF9ULQ2C03j_H1zeRR8amAQB96@mail.gmail.com>
References: <AANLkTikkF0M9NV2q_aGF9ULQ2C03j_H1zeRR8amAQB96@mail.gmail.com>
Message-ID: <AANLkTinoZdJPXEJznnOzR5-am8pWrWzxhc6G5shK75ct@mail.gmail.com>

After more digging around, it seems that the problem is that i have
recursive templates with the same arguments.

Something like this fails:
a(prefix) ::= <<
<b(prefix={added_<prefix>}>
>>

b(prefix) ::= <<
<prefix> ...
>>

but using b_prefix instead works fine.

The problem I'm facing is that I have recursion, and I can't create a
template for every possible level.

Any suggestions on how to fix this?

Regards,
Morten

On Thu, Nov 25, 2010 at 9:44 PM, Morten Olav Hansen <mortenoh at gmail.com> wrote:
> Hi
>
> Is it possible to have an anonymous template inside another template
> somehow? I'm trying to generate an argument to a template (which is
> called from an anonymous template).
>
> I have something like this:
>
> <r.states: {s|<state_builder(state=s, region_ns={r<region_n>})>}>
>
> But i get an exception:
> Exception in thread "main" java.lang.IllegalArgumentException: cannot
> embed template <anonymous template argument> in itself
>
> I'm just passing region_ns=region_n now and adding the r on the
> template side (and this works), but this argument will potentially
> have several arguments concatenated together.
>
> Regards,
> Morten
>

From parrt at cs.usfca.edu  Thu Dec  2 16:33:20 2010
From: parrt at cs.usfca.edu (Terence Parr)
Date: Thu, 2 Dec 2010 16:33:20 -0800
Subject: [stringtemplate-interest] Anonymous template inside another
	anonymous template
In-Reply-To: <AANLkTinoZdJPXEJznnOzR5-am8pWrWzxhc6G5shK75ct@mail.gmail.com>
References: <AANLkTikkF0M9NV2q_aGF9ULQ2C03j_H1zeRR8amAQB96@mail.gmail.com>
	<AANLkTinoZdJPXEJznnOzR5-am8pWrWzxhc6G5shK75ct@mail.gmail.com>
Message-ID: <7BD2AC61-CA0F-47AA-8A14-ABC138562F13@cs.usfca.edu>

Howdy.  Can you explain more at the high level of what you're trying to do?  are you passing down a recursion chain a bigger and bigger arg?

I'm finding now that when I want recursion, i'm walking the model with the template; less good.  I recurse or traverse my model and build a tree of embedded templates rather than having the template invoke itself.

Ter
On Dec 2, 2010, at 2:52 PM, Morten Olav Hansen wrote:

> After more digging around, it seems that the problem is that i have
> recursive templates with the same arguments.
> 
> Something like this fails:
> a(prefix) ::= <<
> <b(prefix={added_<prefix>}>
>>> 
> 
> b(prefix) ::= <<
> <prefix> ...
>>> 
> 
> but using b_prefix instead works fine.
> 
> The problem I'm facing is that I have recursion, and I can't create a
> template for every possible level.
> 
> Any suggestions on how to fix this?
> 
> Regards,
> Morten
> 
> On Thu, Nov 25, 2010 at 9:44 PM, Morten Olav Hansen <mortenoh at gmail.com> wrote:
>> Hi
>> 
>> Is it possible to have an anonymous template inside another template
>> somehow? I'm trying to generate an argument to a template (which is
>> called from an anonymous template).
>> 
>> I have something like this:
>> 
>> <r.states: {s|<state_builder(state=s, region_ns={r<region_n>})>}>
>> 
>> But i get an exception:
>> Exception in thread "main" java.lang.IllegalArgumentException: cannot
>> embed template <anonymous template argument> in itself
>> 
>> I'm just passing region_ns=region_n now and adding the r on the
>> template side (and this works), but this argument will potentially
>> have several arguments concatenated together.
>> 
>> Regards,
>> Morten
>> 
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest


From mortenoh at gmail.com  Thu Dec  2 17:06:10 2010
From: mortenoh at gmail.com (Morten Olav Hansen)
Date: Fri, 3 Dec 2010 02:06:10 +0100
Subject: [stringtemplate-interest] Anonymous template inside another
 anonymous template
In-Reply-To: <7BD2AC61-CA0F-47AA-8A14-ABC138562F13@cs.usfca.edu>
References: <AANLkTikkF0M9NV2q_aGF9ULQ2C03j_H1zeRR8amAQB96@mail.gmail.com>
	<AANLkTinoZdJPXEJznnOzR5-am8pWrWzxhc6G5shK75ct@mail.gmail.com>
	<7BD2AC61-CA0F-47AA-8A14-ABC138562F13@cs.usfca.edu>
Message-ID: <AANLkTim-F2XUtwaTvOOtc2vuZHFJOSXPEqZ8dqacA9Av@mail.gmail.com>

Hi! Yes, of course.

I'm extending Java 1.5 with UML State Machine support, and is using
the ANTLR3 TokenRewriteStream to rewrite the source from my extended
version, to a version of Java that is compilable. I'm doing this, so
that I can only rewrite the parts I need, and just grab the text of
the rest.

So my input is usually like this:


class ABC {
	region {
		state s {
			region {
				state s { regions, etc }
			}

			region {
				state s { regions, etc }
			}
	}

        /* normal javacode below here */
}

And I want it flattened to something like this (very simplified, the
names are the important part here)

class ABC {
	private _construct_sm() {
		region r0;
		state r0_s;
		region r0_s_r0;
		state r0_s_r0_s;
		region r0_s_r1;
		state r0_s_r1_s;
	}

        /* more javacode below */
}

I was using a prefix argument to create the names of the variables,
but I'm facing the problem outlined before.

The general setup of my templates are like this:
KEYWORD_builder(keyword, prefix) ::= <<
generate text for template here, and if calling another template, add
something to the prefix.
>>

I can solve this changing prefix to keyword_prefix, but this quickly
stops working because of recursion (when the same template is called
several times).

Regards,
Morten

On Fri, Dec 3, 2010 at 1:33 AM, Terence Parr <parrt at cs.usfca.edu> wrote:
> Howdy. ?Can you explain more at the high level of what you're trying to do? ?are you passing down a recursion chain a bigger and bigger arg?
>
> I'm finding now that when I want recursion, i'm walking the model with the template; less good. ?I recurse or traverse my model and build a tree of embedded templates rather than having the template invoke itself.
>
> Ter
> On Dec 2, 2010, at 2:52 PM, Morten Olav Hansen wrote:
>
>> After more digging around, it seems that the problem is that i have
>> recursive templates with the same arguments.
>>
>> Something like this fails:
>> a(prefix) ::= <<
>> <b(prefix={added_<prefix>}>
>>>>
>>
>> b(prefix) ::= <<
>> <prefix> ...
>>>>
>>
>> but using b_prefix instead works fine.
>>
>> The problem I'm facing is that I have recursion, and I can't create a
>> template for every possible level.
>>
>> Any suggestions on how to fix this?
>>
>> Regards,
>> Morten
>>
>> On Thu, Nov 25, 2010 at 9:44 PM, Morten Olav Hansen <mortenoh at gmail.com> wrote:
>>> Hi
>>>
>>> Is it possible to have an anonymous template inside another template
>>> somehow? I'm trying to generate an argument to a template (which is
>>> called from an anonymous template).
>>>
>>> I have something like this:
>>>
>>> <r.states: {s|<state_builder(state=s, region_ns={r<region_n>})>}>
>>>
>>> But i get an exception:
>>> Exception in thread "main" java.lang.IllegalArgumentException: cannot
>>> embed template <anonymous template argument> in itself
>>>
>>> I'm just passing region_ns=region_n now and adding the r on the
>>> template side (and this works), but this argument will potentially
>>> have several arguments concatenated together.
>>>
>>> Regards,
>>> Morten
>>>
>> _______________________________________________
>> stringtemplate-interest mailing list
>> stringtemplate-interest at antlr.org
>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>
>

From parrt at cs.usfca.edu  Thu Dec  2 17:50:25 2010
From: parrt at cs.usfca.edu (Terence Parr)
Date: Thu, 2 Dec 2010 17:50:25 -0800
Subject: [stringtemplate-interest] Anonymous template inside another
	anonymous template
In-Reply-To: <AANLkTim-F2XUtwaTvOOtc2vuZHFJOSXPEqZ8dqacA9Av@mail.gmail.com>
References: <AANLkTikkF0M9NV2q_aGF9ULQ2C03j_H1zeRR8amAQB96@mail.gmail.com>
	<AANLkTinoZdJPXEJznnOzR5-am8pWrWzxhc6G5shK75ct@mail.gmail.com>
	<7BD2AC61-CA0F-47AA-8A14-ABC138562F13@cs.usfca.edu>
	<AANLkTim-F2XUtwaTvOOtc2vuZHFJOSXPEqZ8dqacA9Av@mail.gmail.com>
Message-ID: <D1AF5581-646E-4F47-ADB0-0EC3EA1BD9A7@cs.usfca.edu>

ok, got it.  So, your model should walk the tree or whatever you get for the region input.  It creates a template which is a list of the flattened elements.  The trick is the model not the templates compute the path from root to element. I do this for tree of imported grammars in antlr. Then, the templates are braindead simple:

region(path, i) ::= << region <path; separator="_">_r<i> >>
state(path) ::= << region <path; separator="_">_s >>

I'm presuming that the model computes the path as a list of names. 

Ter

On Dec 2, 2010, at 5:06 PM, Morten Olav Hansen wrote:

> Hi! Yes, of course.
> 
> I'm extending Java 1.5 with UML State Machine support, and is using
> the ANTLR3 TokenRewriteStream to rewrite the source from my extended
> version, to a version of Java that is compilable. I'm doing this, so
> that I can only rewrite the parts I need, and just grab the text of
> the rest.
> 
> So my input is usually like this:
> 
> 
> class ABC {
> 	region {
> 		state s {
> 			region {
> 				state s { regions, etc }
> 			}
> 
> 			region {
> 				state s { regions, etc }
> 			}
> 	}
> 
>        /* normal javacode below here */
> }
> 
> And I want it flattened to something like this (very simplified, the
> names are the important part here)
> 
> class ABC {
> 	private _construct_sm() {
> 		region r0;
> 		state r0_s;
> 		region r0_s_r0;
> 		state r0_s_r0_s;
> 		region r0_s_r1;
> 		state r0_s_r1_s;
> 	}
> 
>        /* more javacode below */
> }
> 
> I was using a prefix argument to create the names of the variables,
> but I'm facing the problem outlined before.
> 
> The general setup of my templates are like this:
> KEYWORD_builder(keyword, prefix) ::= <<
> generate text for template here, and if calling another template, add
> something to the prefix.
>>> 
> 
> I can solve this changing prefix to keyword_prefix, but this quickly
> stops working because of recursion (when the same template is called
> several times).
> 
> Regards,
> Morten
> 
> On Fri, Dec 3, 2010 at 1:33 AM, Terence Parr <parrt at cs.usfca.edu> wrote:
>> Howdy.  Can you explain more at the high level of what you're trying to do?  are you passing down a recursion chain a bigger and bigger arg?
>> 
>> I'm finding now that when I want recursion, i'm walking the model with the template; less good.  I recurse or traverse my model and build a tree of embedded templates rather than having the template invoke itself.
>> 
>> Ter
>> On Dec 2, 2010, at 2:52 PM, Morten Olav Hansen wrote:
>> 
>>> After more digging around, it seems that the problem is that i have
>>> recursive templates with the same arguments.
>>> 
>>> Something like this fails:
>>> a(prefix) ::= <<
>>> <b(prefix={added_<prefix>}>
>>>>> 
>>> 
>>> b(prefix) ::= <<
>>> <prefix> ...
>>>>> 
>>> 
>>> but using b_prefix instead works fine.
>>> 
>>> The problem I'm facing is that I have recursion, and I can't create a
>>> template for every possible level.
>>> 
>>> Any suggestions on how to fix this?
>>> 
>>> Regards,
>>> Morten
>>> 
>>> On Thu, Nov 25, 2010 at 9:44 PM, Morten Olav Hansen <mortenoh at gmail.com> wrote:
>>>> Hi
>>>> 
>>>> Is it possible to have an anonymous template inside another template
>>>> somehow? I'm trying to generate an argument to a template (which is
>>>> called from an anonymous template).
>>>> 
>>>> I have something like this:
>>>> 
>>>> <r.states: {s|<state_builder(state=s, region_ns={r<region_n>})>}>
>>>> 
>>>> But i get an exception:
>>>> Exception in thread "main" java.lang.IllegalArgumentException: cannot
>>>> embed template <anonymous template argument> in itself
>>>> 
>>>> I'm just passing region_ns=region_n now and adding the r on the
>>>> template side (and this works), but this argument will potentially
>>>> have several arguments concatenated together.
>>>> 
>>>> Regards,
>>>> Morten
>>>> 
>>> _______________________________________________
>>> stringtemplate-interest mailing list
>>> stringtemplate-interest at antlr.org
>>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>> 
>> 


From mortenoh at gmail.com  Fri Dec  3 04:16:15 2010
From: mortenoh at gmail.com (Morten Olav Hansen)
Date: Fri, 3 Dec 2010 13:16:15 +0100
Subject: [stringtemplate-interest] Anonymous template inside another
 anonymous template
In-Reply-To: <D1AF5581-646E-4F47-ADB0-0EC3EA1BD9A7@cs.usfca.edu>
References: <AANLkTikkF0M9NV2q_aGF9ULQ2C03j_H1zeRR8amAQB96@mail.gmail.com>
	<AANLkTinoZdJPXEJznnOzR5-am8pWrWzxhc6G5shK75ct@mail.gmail.com>
	<7BD2AC61-CA0F-47AA-8A14-ABC138562F13@cs.usfca.edu>
	<AANLkTim-F2XUtwaTvOOtc2vuZHFJOSXPEqZ8dqacA9Av@mail.gmail.com>
	<D1AF5581-646E-4F47-ADB0-0EC3EA1BD9A7@cs.usfca.edu>
Message-ID: <AANLkTikJBviA9r=vdSyvuBvN0n3VMeLdU1cQ=L4rgbNn@mail.gmail.com>

Hi again. I'm sorry, but I'm not sorry if I fully understand.

So exactly how would I generate the path component from the model? Are
you talking about creating a list in the grammar, and then adding the
path-components to this list during parsing? (and then use this
component as a argument to the template...?)

Regards,
Morten

On Fri, Dec 3, 2010 at 2:50 AM, Terence Parr <parrt at cs.usfca.edu> wrote:
> ok, got it. ?So, your model should walk the tree or whatever you get for the region input. ?It creates a template which is a list of the flattened elements. ?The trick is the model not the templates compute the path from root to element. I do this for tree of imported grammars in antlr. Then, the templates are braindead simple:
>
> region(path, i) ::= << region <path; separator="_">_r<i> >>
> state(path) ::= << region <path; separator="_">_s >>
>
> I'm presuming that the model computes the path as a list of names.
>
> Ter
>
> On Dec 2, 2010, at 5:06 PM, Morten Olav Hansen wrote:
>
>> Hi! Yes, of course.
>>
>> I'm extending Java 1.5 with UML State Machine support, and is using
>> the ANTLR3 TokenRewriteStream to rewrite the source from my extended
>> version, to a version of Java that is compilable. I'm doing this, so
>> that I can only rewrite the parts I need, and just grab the text of
>> the rest.
>>
>> So my input is usually like this:
>>
>>
>> class ABC {
>> ? ? ? region {
>> ? ? ? ? ? ? ? state s {
>> ? ? ? ? ? ? ? ? ? ? ? region {
>> ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? state s { regions, etc }
>> ? ? ? ? ? ? ? ? ? ? ? }
>>
>> ? ? ? ? ? ? ? ? ? ? ? region {
>> ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? state s { regions, etc }
>> ? ? ? ? ? ? ? ? ? ? ? }
>> ? ? ? }
>>
>> ? ? ? ?/* normal javacode below here */
>> }
>>
>> And I want it flattened to something like this (very simplified, the
>> names are the important part here)
>>
>> class ABC {
>> ? ? ? private _construct_sm() {
>> ? ? ? ? ? ? ? region r0;
>> ? ? ? ? ? ? ? state r0_s;
>> ? ? ? ? ? ? ? region r0_s_r0;
>> ? ? ? ? ? ? ? state r0_s_r0_s;
>> ? ? ? ? ? ? ? region r0_s_r1;
>> ? ? ? ? ? ? ? state r0_s_r1_s;
>> ? ? ? }
>>
>> ? ? ? ?/* more javacode below */
>> }
>>
>> I was using a prefix argument to create the names of the variables,
>> but I'm facing the problem outlined before.
>>
>> The general setup of my templates are like this:
>> KEYWORD_builder(keyword, prefix) ::= <<
>> generate text for template here, and if calling another template, add
>> something to the prefix.
>>>>
>>
>> I can solve this changing prefix to keyword_prefix, but this quickly
>> stops working because of recursion (when the same template is called
>> several times).
>>
>> Regards,
>> Morten
>>
>> On Fri, Dec 3, 2010 at 1:33 AM, Terence Parr <parrt at cs.usfca.edu> wrote:
>>> Howdy. ?Can you explain more at the high level of what you're trying to do? ?are you passing down a recursion chain a bigger and bigger arg?
>>>
>>> I'm finding now that when I want recursion, i'm walking the model with the template; less good. ?I recurse or traverse my model and build a tree of embedded templates rather than having the template invoke itself.
>>>
>>> Ter
>>> On Dec 2, 2010, at 2:52 PM, Morten Olav Hansen wrote:
>>>
>>>> After more digging around, it seems that the problem is that i have
>>>> recursive templates with the same arguments.
>>>>
>>>> Something like this fails:
>>>> a(prefix) ::= <<
>>>> <b(prefix={added_<prefix>}>
>>>>>>
>>>>
>>>> b(prefix) ::= <<
>>>> <prefix> ...
>>>>>>
>>>>
>>>> but using b_prefix instead works fine.
>>>>
>>>> The problem I'm facing is that I have recursion, and I can't create a
>>>> template for every possible level.
>>>>
>>>> Any suggestions on how to fix this?
>>>>
>>>> Regards,
>>>> Morten
>>>>
>>>> On Thu, Nov 25, 2010 at 9:44 PM, Morten Olav Hansen <mortenoh at gmail.com> wrote:
>>>>> Hi
>>>>>
>>>>> Is it possible to have an anonymous template inside another template
>>>>> somehow? I'm trying to generate an argument to a template (which is
>>>>> called from an anonymous template).
>>>>>
>>>>> I have something like this:
>>>>>
>>>>> <r.states: {s|<state_builder(state=s, region_ns={r<region_n>})>}>
>>>>>
>>>>> But i get an exception:
>>>>> Exception in thread "main" java.lang.IllegalArgumentException: cannot
>>>>> embed template <anonymous template argument> in itself
>>>>>
>>>>> I'm just passing region_ns=region_n now and adding the r on the
>>>>> template side (and this works), but this argument will potentially
>>>>> have several arguments concatenated together.
>>>>>
>>>>> Regards,
>>>>> Morten
>>>>>
>>>> _______________________________________________
>>>> stringtemplate-interest mailing list
>>>> stringtemplate-interest at antlr.org
>>>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>>>
>>>
>
>

From mortenoh at gmail.com  Fri Dec  3 08:13:49 2010
From: mortenoh at gmail.com (Morten Olav Hansen)
Date: Fri, 3 Dec 2010 17:13:49 +0100
Subject: [stringtemplate-interest] Anonymous template inside another
 anonymous template
In-Reply-To: <AANLkTikJBviA9r=vdSyvuBvN0n3VMeLdU1cQ=L4rgbNn@mail.gmail.com>
References: <AANLkTikkF0M9NV2q_aGF9ULQ2C03j_H1zeRR8amAQB96@mail.gmail.com>
	<AANLkTinoZdJPXEJznnOzR5-am8pWrWzxhc6G5shK75ct@mail.gmail.com>
	<7BD2AC61-CA0F-47AA-8A14-ABC138562F13@cs.usfca.edu>
	<AANLkTim-F2XUtwaTvOOtc2vuZHFJOSXPEqZ8dqacA9Av@mail.gmail.com>
	<D1AF5581-646E-4F47-ADB0-0EC3EA1BD9A7@cs.usfca.edu>
	<AANLkTikJBviA9r=vdSyvuBvN0n3VMeLdU1cQ=L4rgbNn@mail.gmail.com>
Message-ID: <AANLkTinRELZoQSv0eWZLnbkeXxa51Fm=5_d4HBO5dBLR@mail.gmail.com>

Hi, no need to answer this. Solved the problem using the approach you outlined.

Thanks for you help!

Regards,
Morten

On Fri, Dec 3, 2010 at 1:16 PM, Morten Olav Hansen <mortenoh at gmail.com> wrote:
> Hi again. I'm sorry, but I'm not sorry if I fully understand.
>
> So exactly how would I generate the path component from the model? Are
> you talking about creating a list in the grammar, and then adding the
> path-components to this list during parsing? (and then use this
> component as a argument to the template...?)
>
> Regards,
> Morten
>
> On Fri, Dec 3, 2010 at 2:50 AM, Terence Parr <parrt at cs.usfca.edu> wrote:
>> ok, got it. ?So, your model should walk the tree or whatever you get for the region input. ?It creates a template which is a list of the flattened elements. ?The trick is the model not the templates compute the path from root to element. I do this for tree of imported grammars in antlr. Then, the templates are braindead simple:
>>
>> region(path, i) ::= << region <path; separator="_">_r<i> >>
>> state(path) ::= << region <path; separator="_">_s >>
>>
>> I'm presuming that the model computes the path as a list of names.
>>
>> Ter
>>
>> On Dec 2, 2010, at 5:06 PM, Morten Olav Hansen wrote:
>>
>>> Hi! Yes, of course.
>>>
>>> I'm extending Java 1.5 with UML State Machine support, and is using
>>> the ANTLR3 TokenRewriteStream to rewrite the source from my extended
>>> version, to a version of Java that is compilable. I'm doing this, so
>>> that I can only rewrite the parts I need, and just grab the text of
>>> the rest.
>>>
>>> So my input is usually like this:
>>>
>>>
>>> class ABC {
>>> ? ? ? region {
>>> ? ? ? ? ? ? ? state s {
>>> ? ? ? ? ? ? ? ? ? ? ? region {
>>> ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? state s { regions, etc }
>>> ? ? ? ? ? ? ? ? ? ? ? }
>>>
>>> ? ? ? ? ? ? ? ? ? ? ? region {
>>> ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? state s { regions, etc }
>>> ? ? ? ? ? ? ? ? ? ? ? }
>>> ? ? ? }
>>>
>>> ? ? ? ?/* normal javacode below here */
>>> }
>>>
>>> And I want it flattened to something like this (very simplified, the
>>> names are the important part here)
>>>
>>> class ABC {
>>> ? ? ? private _construct_sm() {
>>> ? ? ? ? ? ? ? region r0;
>>> ? ? ? ? ? ? ? state r0_s;
>>> ? ? ? ? ? ? ? region r0_s_r0;
>>> ? ? ? ? ? ? ? state r0_s_r0_s;
>>> ? ? ? ? ? ? ? region r0_s_r1;
>>> ? ? ? ? ? ? ? state r0_s_r1_s;
>>> ? ? ? }
>>>
>>> ? ? ? ?/* more javacode below */
>>> }
>>>
>>> I was using a prefix argument to create the names of the variables,
>>> but I'm facing the problem outlined before.
>>>
>>> The general setup of my templates are like this:
>>> KEYWORD_builder(keyword, prefix) ::= <<
>>> generate text for template here, and if calling another template, add
>>> something to the prefix.
>>>>>
>>>
>>> I can solve this changing prefix to keyword_prefix, but this quickly
>>> stops working because of recursion (when the same template is called
>>> several times).
>>>
>>> Regards,
>>> Morten
>>>
>>> On Fri, Dec 3, 2010 at 1:33 AM, Terence Parr <parrt at cs.usfca.edu> wrote:
>>>> Howdy. ?Can you explain more at the high level of what you're trying to do? ?are you passing down a recursion chain a bigger and bigger arg?
>>>>
>>>> I'm finding now that when I want recursion, i'm walking the model with the template; less good. ?I recurse or traverse my model and build a tree of embedded templates rather than having the template invoke itself.
>>>>
>>>> Ter
>>>> On Dec 2, 2010, at 2:52 PM, Morten Olav Hansen wrote:
>>>>
>>>>> After more digging around, it seems that the problem is that i have
>>>>> recursive templates with the same arguments.
>>>>>
>>>>> Something like this fails:
>>>>> a(prefix) ::= <<
>>>>> <b(prefix={added_<prefix>}>
>>>>>>>
>>>>>
>>>>> b(prefix) ::= <<
>>>>> <prefix> ...
>>>>>>>
>>>>>
>>>>> but using b_prefix instead works fine.
>>>>>
>>>>> The problem I'm facing is that I have recursion, and I can't create a
>>>>> template for every possible level.
>>>>>
>>>>> Any suggestions on how to fix this?
>>>>>
>>>>> Regards,
>>>>> Morten
>>>>>
>>>>> On Thu, Nov 25, 2010 at 9:44 PM, Morten Olav Hansen <mortenoh at gmail.com> wrote:
>>>>>> Hi
>>>>>>
>>>>>> Is it possible to have an anonymous template inside another template
>>>>>> somehow? I'm trying to generate an argument to a template (which is
>>>>>> called from an anonymous template).
>>>>>>
>>>>>> I have something like this:
>>>>>>
>>>>>> <r.states: {s|<state_builder(state=s, region_ns={r<region_n>})>}>
>>>>>>
>>>>>> But i get an exception:
>>>>>> Exception in thread "main" java.lang.IllegalArgumentException: cannot
>>>>>> embed template <anonymous template argument> in itself
>>>>>>
>>>>>> I'm just passing region_ns=region_n now and adding the r on the
>>>>>> template side (and this works), but this argument will potentially
>>>>>> have several arguments concatenated together.
>>>>>>
>>>>>> Regards,
>>>>>> Morten
>>>>>>
>>>>> _______________________________________________
>>>>> stringtemplate-interest mailing list
>>>>> stringtemplate-interest at antlr.org
>>>>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>>>>
>>>>
>>
>>
>

From parrt at cs.usfca.edu  Fri Dec  3 10:52:20 2010
From: parrt at cs.usfca.edu (Terence Parr)
Date: Fri, 3 Dec 2010 10:52:20 -0800
Subject: [stringtemplate-interest] Anonymous template inside another
	anonymous template
In-Reply-To: <AANLkTinRELZoQSv0eWZLnbkeXxa51Fm=5_d4HBO5dBLR@mail.gmail.com>
References: <AANLkTikkF0M9NV2q_aGF9ULQ2C03j_H1zeRR8amAQB96@mail.gmail.com>
	<AANLkTinoZdJPXEJznnOzR5-am8pWrWzxhc6G5shK75ct@mail.gmail.com>
	<7BD2AC61-CA0F-47AA-8A14-ABC138562F13@cs.usfca.edu>
	<AANLkTim-F2XUtwaTvOOtc2vuZHFJOSXPEqZ8dqacA9Av@mail.gmail.com>
	<D1AF5581-646E-4F47-ADB0-0EC3EA1BD9A7@cs.usfca.edu>
	<AANLkTikJBviA9r=vdSyvuBvN0n3VMeLdU1cQ=L4rgbNn@mail.gmail.com>
	<AANLkTinRELZoQSv0eWZLnbkeXxa51Fm=5_d4HBO5dBLR@mail.gmail.com>
Message-ID: <A00EE987-ECCD-447D-91D1-60D504E76B0A@cs.usfca.edu>


On Dec 3, 2010, at 8:13 AM, Morten Olav Hansen wrote:

> Hi, no need to answer this. Solved the problem using the approach you outlined.
> 
> Thanks for you help!

My pleasure!
Ter

From parrt at cs.usfca.edu  Tue Dec  7 13:55:59 2010
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue, 7 Dec 2010 13:55:59 -0800
Subject: [stringtemplate-interest] Problem with separator when using
	AttributeRenderer for Strings
In-Reply-To: <90E8EF57-E7D9-48C5-8AAD-81151051306B@gmail.com>
References: <90E8EF57-E7D9-48C5-8AAD-81151051306B@gmail.com>
Message-ID: <D5F24FD7-050C-4518-A7DF-15B256BC8566@cs.usfca.edu>


On Nov 25, 2010, at 4:59 AM, Felix Leipold wrote:

> Hello,
> 
> The context of the problem is a bit special. I started using AttributeRenderers for Strings to enforce escaping rules of the target language, e.g. ">" to "&gt;" for html or "%" to "\%" for LaTeX. 
> 
> Now there is one quirk. StringTemplate also applies the AttributeRenderer registered for Strings to the separator string. As there is no expansion of templates happening inside the separator string I find this quite strange.

you can have separator=templateRef() too I believe.  I think the separator is a template not string.
Ter

> To me the separator is just literal output. To illustrate my expectation I included a JUnit test, that depends only on StringTemplate and JUnit below.
> 
> Do you think my expectation is legitimate? 
> 
> Best regards,
> 
> Felix Leipold
> 
> ------------------------------------------------------------------------------------------------
> public class RendererTest {
> 
>   @Test
>   public void testMe(){
>       StringTemplate template = new StringTemplate("<h1>A list</h1>$items:{$it$};separator=\"<br/>\"$");
> 
>       List<String> items = asList("a + b > c", "c < a + b ");
>       template.setAttribute("items", items);
> 
>       template.registerRenderer(String.class, new MyAttributeRenderer());
> 
>       assertEquals("<h1>A list</h1>a + b &gt; c&<br/>c &lt; a + b", template.toString());
> 	//fails, actual:   <h1>A list</h1>a + b &gt; c&lt;br/&gt;c &lt; a + b
> 
>   }
> 
> 
>   private static class MyAttributeRenderer implements AttributeRenderer {
>       public String toString(Object o) {
>           return ((String)o).replaceAll("<", "&lt;").replaceAll(">", "&gt;");
>       }
> 
>       public String toString(Object o, String s) {
>           return toString(o);
>       }
>   }
> }
> 
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest


From parrt at cs.usfca.edu  Tue Dec  7 14:00:48 2010
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue, 7 Dec 2010 14:00:48 -0800
Subject: [stringtemplate-interest] Latest C# Binaries/Source
In-Reply-To: <026f01cb90a7$1a4eef70$4eecce50$@pixelminegames.com>
References: <AANLkTik34mvs6fER0q0uCHZxQIS7tMtB1o01RuukW8yF@mail.gmail.com>	<019401cafc21$0749d540$15dd7fc0$@pixelminegames.com>	<AANLkTindtFz2YQR1235NcsxJFjiPdgEU2NYzDdGq55uL@mail.gmail.com>	<00d601cb12df$4b1fbfd0$e15f3f70$@pixelminegames.com>
	<4C2EA592.3070903@gmail.com>
	<026f01cb90a7$1a4eef70$4eecce50$@pixelminegames.com>
Message-ID: <A67D6ED1-5828-492C-9A3F-E7FC499321E2@cs.usfca.edu>

Sam, i added to 

http://www.stringtemplate.org/download.html

Should I add link to antlr/download.html too?

Ter
On Nov 30, 2010, at 7:56 AM, Sam Harwell wrote:

> Hi Natan,
>  
> The latest copy of my StringTemplate port was posted yesterday as part of my port of the ANTLR tool. I expect to post these binaries to antlr.org in the near future.
>  
> This package includes the C# port of the ANTLR compiler (Antlr3.exe and its templates), StringTemplate 3.2 including a new dynamic template compiler, the CSharp3 runtime, and the MSBuild Targets file to incorporate ANTLR into C# builds:
> http://www.280z28.org/downloads/antlr/antlr-dotnet-binaries-3.3.0.7239.7z
>  
> Thank you,
> Sam Harwell
>  
> From: stringtemplate-interest-bounces at antlr.org [mailto:stringtemplate-interest-bounces at antlr.org] On Behalf Of Natan
> Sent: Friday, July 02, 2010 9:51 PM
> To: stringtemplate-interest at antlr.org
> Subject: Re: [stringtemplate-interest] Latest C# Binaries/Source
>  
> Sam,
> 
> Since you were talking about that, I was wondering, how is the development of the 3.2 C# port going? Is it still active?
> 
> I think that if you made the snapshots available in the main download page (like the C port has), probably more people would be testing.
> 
> I remember I tried to use it when you posted, but it was too unstable and wouldn't even create compilable code, and since I was working on something I had to put in production, I decided to just go back to the previous version and get the work done...
> 
> I plan to get back to develop some tools with antlr, and would be nice to try it again if a new version is available.
> 
> Thanks.
> 
> On 23/6/2010 11:20, Sam Harwell wrote:
> Hi Andy,
>  
> There have been few, if any, changes to the StringTemplate 3.2 C# port since I uploaded that build. It should be stable (that?s certainly the goal), but I haven?t had too many testers trying it in different scenarios. If you decide to use it, your feedback would be very valuable.
>  
> Thank you,
> Sam Harwell
>  
> From: stringtemplate-interest-bounces at antlr.org [mailto:stringtemplate-interest-bounces at antlr.org] On Behalf Of Andy Sipe
> Sent: Wednesday, May 26, 2010 8:14 AM
> To: stringtemplate-interest
> Subject: Re: [stringtemplate-interest] Latest C# Binaries/Source
>  
> 
> How stable is the source?  If I did a fresh pull and build would I be in a good place or .. ?
> 
> Thanks -andy
> 
> PS:  excuse the possible double post, my mail reader did some weird things for some reason.
> 
> 
> 
> On Tue, May 25, 2010 at 11:43 AM, Sam Harwell <sharwell at pixelminegames.com> wrote:
> Hi Andy,
>  
> I see I have an updated build at the following link, but I?m not 100% sure it?s the latest I?ve created. I?ll have to check that later. I do know this is a build I was actively using for some time.
>  
> http://www.280z28.org/downloads/antlr/antlr-dotnet-binaries-3.2.0.6805.7z
>  
> Sam
>  
> From: stringtemplate-interest-bounces at antlr.org [mailto:stringtemplate-interest-bounces at antlr.org] On Behalf Of Andy Sipe
> Sent: Tuesday, May 25, 2010 6:31 AM
> To: stringtemplate-interest
> Subject: [stringtemplate-interest] Latest C# Binaries/Source
>  
> I'm trying to locate the latest C# binaries but am unsure which ones to grab.   I believe what I'm looking for are the binaries/source referenced in these 2 forum messages:
> 
> http://www.mail-archive.com/antlr-dev at antlr.org/msg00663.html
> 
> http://www.mail-archive.com/antlr-dev at antlr.org/msg00666.html
> 
> In both cases the given links no longer exist.   
> 
> All the C# links given on the download page (http://www.stringtemplate.org/download.html) seem to point to older and/or orphaned versions.
> 
> Any info on where to get the current 'stable' downloads/source?
> 
> Thanks -andy
> 
>  
>  
>  
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>  
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest


From parrt at cs.usfca.edu  Sun Dec 12 09:16:07 2010
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sun, 12 Dec 2010 09:16:07 -0800
Subject: [stringtemplate-interest] [antlr-interest] Padding Fields in
	StringTemplate?
In-Reply-To: <000001cb99dd$950cb050$bf2610f0$@com>
References: <000001cb99dd$950cb050$bf2610f0$@com>
Message-ID: <9D3F0153-AC0A-4C77-9566-6E339DAD1E9D@cs.usfca.edu>

hi. check out the format option
Ter
On Dec 12, 2010, at 1:18 AM, Mike Allbright wrote:

> Is there a way to pad fields in StringTemplate?
> 
> 
> 
> In other words, I want to print a table with each element right or left
> justified within a field of a fixed width and pad the rest of the field with
> whitespace (or some other character).
> 
> 
> 
> Can this be done with StringTemplate, or do I need to precalculate/prefill
> field strings with padding?
> 
> 
> 
> Thanks & Regards,
> 
> --Mike
> 
> Mike Allbright
> 
> mike at metaorb.com
> 
> (972) 896-7070
> 
> 
> 
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From sharwell at pixelminegames.com  Sun Dec 12 19:40:58 2010
From: sharwell at pixelminegames.com (Sam Harwell)
Date: Sun, 12 Dec 2010 21:40:58 -0600
Subject: [stringtemplate-interest] StringTemplate type proxies
Message-ID: <0aad01cb9a77$8e8815e0$ab9841a0$@pixelminegames.com>

I recently started using StringTemplate for a significant code generation
project. I'm quite happy with the way things are progressing, but I'm
noticing there are several times where I have to add a new property to my
code objects just so StringTemplate can produce the desired output. In a
manner similar to attribute renderers, I believe the addition of type
proxies would be extremely beneficial. Suppose the user registers a type
proxy for type T. The type proxy exposes the following method:

 

object createProxy(object value);

 

Whenever an attribute resolves to a value of type T, the proxy's
createProxy() method is called. Attributes on the object are resolved
against the value returned by the proxy.

 

Any thoughts on this?

 

Thanks,

Sam

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20101212/d1142ab4/attachment.html 

From parrt at cs.usfca.edu  Sun Dec 12 21:18:21 2010
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sun, 12 Dec 2010 21:18:21 -0800
Subject: [stringtemplate-interest] StringTemplate type proxies
In-Reply-To: <0aad01cb9a77$8e8815e0$ab9841a0$@pixelminegames.com>
References: <0aad01cb9a77$8e8815e0$ab9841a0$@pixelminegames.com>
Message-ID: <C15C668C-CE19-4165-A46B-E166CFD2E135@cs.usfca.edu>

So this is to prevent code pollution with stuff needed just for code gen?  It makes some sense, though I'm wondering how I've handled this in the past.  Probably I modify the model object to have the property.

Would this registering type thing be confused with registering attribute renderers?

Ter

On Dec 12, 2010, at 7:40 PM, Sam Harwell wrote:

> I recently started using StringTemplate for a significant code generation project. I?m quite happy with the way things are progressing, but I?m noticing there are several times where I have to add a new property to my code objects just so StringTemplate can produce the desired output. In a manner similar to attribute renderers, I believe the addition of type proxies would be extremely beneficial. Suppose the user registers a type proxy for type T. The type proxy exposes the following method:
>  
> object createProxy(object value);
>  
> Whenever an attribute resolves to a value of type T, the proxy?s createProxy() method is called. Attributes on the object are resolved against the value returned by the proxy.
>  
> Any thoughts on this?
>  
> Thanks,
> Sam
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20101212/7214a97f/attachment.html 

From oaanson at gmail.com  Mon Dec 13 03:51:23 2010
From: oaanson at gmail.com (Omer Anson)
Date: Mon, 13 Dec 2010 13:51:23 +0200
Subject: [stringtemplate-interest] Finding Attribute Names
Message-ID: <AANLkTin1G-PzS6wy1uUmfiF5WWYv7ycmodonPEYd+=hE@mail.gmail.com>

Hello,

I am writing a tool in Java, in which the user submits a template to
be filled in later. Since I do not trust said user, I cannot trust him
to provide me with all the attributes that appear in the template.

My question is this:
Is it possible, using StringTemplate and Java, to retrieve all the
attribute names in the template?

For instance, if I have the template:
$if (greeting)$ $greeting$ $target$
$else$ No greeting :(
$endif$

Is there a method that will return {greeting, target}? Is there a
workaround to do this without reviewing the ASTExpr objects?

Thank you
Omer Anson.

From nik9000 at gmail.com  Mon Dec 13 04:09:51 2010
From: nik9000 at gmail.com (Nikolas Everett)
Date: Mon, 13 Dec 2010 07:09:51 -0500
Subject: [stringtemplate-interest] StringTemplate type proxies
In-Reply-To: <C15C668C-CE19-4165-A46B-E166CFD2E135@cs.usfca.edu>
References: <0aad01cb9a77$8e8815e0$ab9841a0$@pixelminegames.com>
	<C15C668C-CE19-4165-A46B-E166CFD2E135@cs.usfca.edu>
Message-ID: <AANLkTinZDAP5JnW=epF6kN72H1_ugNMFqZkiUB0Ne=iH@mail.gmail.com>

Displaytag uses a somewhat similar approach that is actually less powerful
then what you're suggesting.  May I suggest only dipping to the proxy object
if the normal object doesn't have the field you are looking for?  This would
cut down on the (generated) code inside the proxy objects at the cost of not
being able to use them for information hiding.  Again, displaytag uses a
similar technique and I find it to be quite useful.  Also, would it make
more sense to call these type decorators?

--Nik Everett

On Mon, Dec 13, 2010 at 12:18 AM, Terence Parr <parrt at cs.usfca.edu> wrote:

> So this is to prevent code pollution with stuff needed just for code gen?
>  It makes some sense, though I'm wondering how I've handled this in the
> past.  Probably I modify the model object to have the property.
>
> Would this registering type thing be confused with registering attribute
> renderers?
>
> Ter
>
> On Dec 12, 2010, at 7:40 PM, Sam Harwell wrote:
>
> I recently started using StringTemplate for a significant code generation
> project. I?m quite happy with the way things are progressing, but I?m
> noticing there are several times where I have to add a new property to my
> code objects just so StringTemplate can produce the desired output. In a
> manner similar to attribute renderers, I believe the addition of type
> proxies would be extremely beneficial. Suppose the user registers a type
> proxy for type T. The type proxy exposes the following method:
>
> object createProxy(object value);
>
> Whenever an attribute resolves to a value of type T, the proxy?s
> createProxy() method is called. Attributes on the object are resolved
> against the value returned by the proxy.
>
> Any thoughts on this?
>
> Thanks,
> Sam
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>
>
>
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20101213/6b6652dd/attachment.html 

From sharwell at pixelminegames.com  Mon Dec 13 05:46:48 2010
From: sharwell at pixelminegames.com (Sam Harwell)
Date: Mon, 13 Dec 2010 07:46:48 -0600
Subject: [stringtemplate-interest] StringTemplate type proxies
In-Reply-To: <AANLkTinZDAP5JnW=epF6kN72H1_ugNMFqZkiUB0Ne=iH@mail.gmail.com>
References: <0aad01cb9a77$8e8815e0$ab9841a0$@pixelminegames.com>
	<C15C668C-CE19-4165-A46B-E166CFD2E135@cs.usfca.edu>
	<AANLkTinZDAP5JnW=epF6kN72H1_ugNMFqZkiUB0Ne=iH@mail.gmail.com>
Message-ID: <0af501cb9acc$3135dad0$93a19070$@pixelminegames.com>

Hi Nik,

 

Like attribute renderers, these would certainly only need to be used for
objects not exposing a necessary view property. However, they can also be
useful because it gives the user a way to express exactly which attributes
are necessary for template output (a documented interface the template and
code writer can see). I chose the name type proxy because it performs
precisely the same function as debugger type proxies in .NET:
http://msdn.microsoft.com/en-us/library/ms228992.aspx. I believe "decorator"
is misleading because these objects do not change the appearance or behavior
of the original objects in any way.

 

Thanks,

Sam

 

From: Nikolas Everett [mailto:nik9000 at gmail.com] 
Sent: Monday, December 13, 2010 6:10 AM
To: Terence Parr
Cc: Sam Harwell; stringtemplate-interest
Subject: Re: [stringtemplate-interest] StringTemplate type proxies

 

Displaytag uses a somewhat similar approach that is actually less powerful
then what you're suggesting.  May I suggest only dipping to the proxy object
if the normal object doesn't have the field you are looking for?  This would
cut down on the (generated) code inside the proxy objects at the cost of not
being able to use them for information hiding.  Again, displaytag uses a
similar technique and I find it to be quite useful.  Also, would it make
more sense to call these type decorators?

 

--Nik Everett

 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20101213/03e2b157/attachment-0001.html 

From sharwell at pixelminegames.com  Mon Dec 13 05:49:45 2010
From: sharwell at pixelminegames.com (Sam Harwell)
Date: Mon, 13 Dec 2010 07:49:45 -0600
Subject: [stringtemplate-interest] StringTemplate type proxies
In-Reply-To: <C15C668C-CE19-4165-A46B-E166CFD2E135@cs.usfca.edu>
References: <0aad01cb9a77$8e8815e0$ab9841a0$@pixelminegames.com>
	<C15C668C-CE19-4165-A46B-E166CFD2E135@cs.usfca.edu>
Message-ID: <0afa01cb9acc$9a55a0e0$cf00e2a0$@pixelminegames.com>

I actually think "register" makes it less confusing, especially since the
parameter is an interface which clearly differs from the AttributeRenderer
interface.

 

Sam

 

From: Terence Parr [mailto:parrt at cs.usfca.edu] 
Sent: Sunday, December 12, 2010 11:18 PM
To: Sam Harwell
Cc: stringtemplate-interest
Subject: Re: [stringtemplate-interest] StringTemplate type proxies

 

So this is to prevent code pollution with stuff needed just for code gen?
It makes some sense, though I'm wondering how I've handled this in the past.
Probably I modify the model object to have the property.

 

Would this registering type thing be confused with registering attribute
renderers?

 

Ter

 

On Dec 12, 2010, at 7:40 PM, Sam Harwell wrote:





I recently started using StringTemplate for a significant code generation
project. I'm quite happy with the way things are progressing, but I'm
noticing there are several times where I have to add a new property to my
code objects just so StringTemplate can produce the desired output. In a
manner similar to attribute renderers, I believe the addition of type
proxies would be extremely beneficial. Suppose the user registers a type
proxy for type T. The type proxy exposes the following method:

 

object createProxy(object value);

 

Whenever an attribute resolves to a value of type T, the proxy's
createProxy() method is called. Attributes on the object are resolved
against the value returned by the proxy.

 

Any thoughts on this?

 

Thanks,

Sam

_______________________________________________
stringtemplate-interest mailing list
stringtemplate-interest at antlr.org
http://www.antlr.org/mailman/listinfo/stringtemplate-interest

 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20101213/69610aa3/attachment.html 

From mark.venbrux at gmail.com  Mon Dec 13 13:57:45 2010
From: mark.venbrux at gmail.com (Mark Venbrux)
Date: Mon, 13 Dec 2010 22:57:45 +0100
Subject: [stringtemplate-interest] StringTemplate type proxies
Message-ID: <AANLkTinhq1MxCZ_aP965fe-Z8E3GTv_+e+7s+hE8Du_m@mail.gmail.com>

So this is the "ViewModel" reinvented? I like the idea;)
Cheers,
Mark
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20101213/7100367f/attachment.html 

From sharwell at pixelminegames.com  Mon Dec 13 14:55:25 2010
From: sharwell at pixelminegames.com (Sam Harwell)
Date: Mon, 13 Dec 2010 16:55:25 -0600
Subject: [stringtemplate-interest] StringTemplate type proxies
In-Reply-To: <0aad01cb9a77$8e8815e0$ab9841a0$@pixelminegames.com>
References: <0aad01cb9a77$8e8815e0$ab9841a0$@pixelminegames.com>
Message-ID: <0b3b01cb9b18$d5653050$802f90f0$@pixelminegames.com>

I implemented this in the C# port of ST, and submitted it in changelist
7307. I also updated the way items are registered so registrations apply to
derived types and interface implementations. Here is the order in which the
search is performed (the * indicates "until null"):

 

1.       Search current template

2.       Search enclosing template*

3.       Search group

4.       Search super group*

 

Here is the order in which a match for type T is found. This check is
performed at each step of the above process until a match is found (with
some key optimizations in place to keep it from going slow).

 

1.       Check for a registration for T (exact match).

2.       Check each registration K at the current level - if T is derived
from class K or implements interface K, then it is a candidate. If this step
reveals candidates,

a.       If there is exactly one candidate, it is chosen as a weak match and
the process is complete.

b.      For each pair of candidates T1!=T2, if T2 is derived from class T1
or implements interface T1, then T2 is a strictly stronger match and T1 is
removed from the set of candidates.

c.       The filtering process always leaves 1 or more candidates. If only 1
candidate remains, it is chosen as the weak match and the process is
complete.

d.      If >1 candidates remain, an AmbiguousMatchException is thrown.

 

From: stringtemplate-interest-bounces at antlr.org
[mailto:stringtemplate-interest-bounces at antlr.org] On Behalf Of Sam Harwell
Sent: Sunday, December 12, 2010 9:41 PM
To: stringtemplate-interest
Subject: [stringtemplate-interest] StringTemplate type proxies

 

I recently started using StringTemplate for a significant code generation
project. I'm quite happy with the way things are progressing, but I'm
noticing there are several times where I have to add a new property to my
code objects just so StringTemplate can produce the desired output. In a
manner similar to attribute renderers, I believe the addition of type
proxies would be extremely beneficial. Suppose the user registers a type
proxy for type T. The type proxy exposes the following method:

 

object createProxy(object value);

 

Whenever an attribute resolves to a value of type T, the proxy's
createProxy() method is called. Attributes on the object are resolved
against the value returned by the proxy.

 

Any thoughts on this?

 

Thanks,

Sam

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20101213/c8efdf02/attachment.html 

From parrt at cs.usfca.edu  Mon Dec 13 19:06:14 2010
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon, 13 Dec 2010 19:06:14 -0800
Subject: [stringtemplate-interest] Finding Attribute Names
In-Reply-To: <AANLkTin1G-PzS6wy1uUmfiF5WWYv7ycmodonPEYd+=hE@mail.gmail.com>
References: <AANLkTin1G-PzS6wy1uUmfiF5WWYv7ycmodonPEYd+=hE@mail.gmail.com>
Message-ID: <28B1F821-E0E0-464B-A780-50BF568281D1@cs.usfca.edu>

well, I believe the grammar must pull out the names but they might get away with something sneaky with maps or toString or something.  I don't think i have anything available.  see the todebugstring stuff i think. it tries to walk to find them all.

Ter
On Dec 13, 2010, at 3:51 AM, Omer Anson wrote:

> Hello,
> 
> I am writing a tool in Java, in which the user submits a template to
> be filled in later. Since I do not trust said user, I cannot trust him
> to provide me with all the attributes that appear in the template.
> 
> My question is this:
> Is it possible, using StringTemplate and Java, to retrieve all the
> attribute names in the template?
> 
> For instance, if I have the template:
> $if (greeting)$ $greeting$ $target$
> $else$ No greeting :(
> $endif$
> 
> Is there a method that will return {greeting, target}? Is there a
> workaround to do this without reviewing the ASTExpr objects?
> 
> Thank you
> Omer Anson.
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest


From parrt at cs.usfca.edu  Mon Dec 13 19:07:57 2010
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon, 13 Dec 2010 19:07:57 -0800
Subject: [stringtemplate-interest] StringTemplate type proxies
In-Reply-To: <0b3b01cb9b18$d5653050$802f90f0$@pixelminegames.com>
References: <0aad01cb9a77$8e8815e0$ab9841a0$@pixelminegames.com>
	<0b3b01cb9b18$d5653050$802f90f0$@pixelminegames.com>
Message-ID: <297BA9B4-C709-417A-8AB8-9975956BECA0@cs.usfca.edu>

Hi Sam, I'm still trying to figure out how I get away without this.  I'm leary of adding features when I haven't ever needed them.

Ter
On Dec 13, 2010, at 2:55 PM, Sam Harwell wrote:

> I implemented this in the C# port of ST, and submitted it in changelist 7307. I also updated the way items are registered so registrations apply to derived types and interface implementations. Here is the order in which the search is performed (the * indicates ?until null?):
>  
> 1.       Search current template
> 2.       Search enclosing template*
> 3.       Search group
> 4.       Search super group*
>  
> Here is the order in which a match for type T is found. This check is performed at each step of the above process until a match is found (with some key optimizations in place to keep it from going slow).
>  
> 1.       Check for a registration for T (exact match).
> 2.       Check each registration K at the current level ? if T is derived from class K or implements interface K, then it is a candidate. If this step reveals candidates,
> a.       If there is exactly one candidate, it is chosen as a weak match and the process is complete.
> b.      For each pair of candidates T1!=T2, if T2 is derived from class T1 or implements interface T1, then T2 is a strictly stronger match and T1 is removed from the set of candidates.
> c.       The filtering process always leaves 1 or more candidates. If only 1 candidate remains, it is chosen as the weak match and the process is complete.
> d.      If >1 candidates remain, an AmbiguousMatchException is thrown.
>  
> From: stringtemplate-interest-bounces at antlr.org [mailto:stringtemplate-interest-bounces at antlr.org] On Behalf Of Sam Harwell
> Sent: Sunday, December 12, 2010 9:41 PM
> To: stringtemplate-interest
> Subject: [stringtemplate-interest] StringTemplate type proxies
>  
> I recently started using StringTemplate for a significant code generation project. I?m quite happy with the way things are progressing, but I?m noticing there are several times where I have to add a new property to my code objects just so StringTemplate can produce the desired output. In a manner similar to attribute renderers, I believe the addition of type proxies would be extremely beneficial. Suppose the user registers a type proxy for type T. The type proxy exposes the following method:
>  
> object createProxy(object value);
>  
> Whenever an attribute resolves to a value of type T, the proxy?s createProxy() method is called. Attributes on the object are resolved against the value returned by the proxy.
>  
> Any thoughts on this?
>  
> Thanks,
> Sam
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20101213/f8abc259/attachment-0001.html 

From sharwell at pixelminegames.com  Mon Dec 13 21:29:23 2010
From: sharwell at pixelminegames.com (Sam Harwell)
Date: Mon, 13 Dec 2010 23:29:23 -0600
Subject: [stringtemplate-interest] StringTemplate type proxies
In-Reply-To: <297BA9B4-C709-417A-8AB8-9975956BECA0@cs.usfca.edu>
References: <0aad01cb9a77$8e8815e0$ab9841a0$@pixelminegames.com>
	<0b3b01cb9b18$d5653050$802f90f0$@pixelminegames.com>
	<297BA9B4-C709-417A-8AB8-9975956BECA0@cs.usfca.edu>
Message-ID: <0b5801cb9b4f$de3b21d0$9ab16570$@pixelminegames.com>

My program is not strictly a code generation tool. I've added my code
generation abilities as a front-end to a set of data structures maintained
by another program component. Due to a requirement to match the output of
another code generation tool, I'm forced to sort items in specific ways that
aren't the same as the way the data structures are internally maintained. I
was left with two choices: duplicate and extend the original program logic
(and be forced to maintain two copies), or use proxies wrap the problematic
objects to make them usable.

 

This is a somewhat similar problem to generating code based on the
Reflection API while under restriction to use special sort orders, etc.

 

My templates also have a single "entry point" for a given task - I provide
the complete model (or the necessary subset) as input and let the template
produce whatever is needed from it. I find that this separation is much
easier to analyze and maintain.

 

Sam

 

From: Terence Parr [mailto:parrt at cs.usfca.edu] 
Sent: Monday, December 13, 2010 9:08 PM
To: Sam Harwell
Cc: 'stringtemplate-interest'
Subject: Re: [stringtemplate-interest] StringTemplate type proxies

 

Hi Sam, I'm still trying to figure out how I get away without this.  I'm
leary of adding features when I haven't ever needed them.

 

Ter

On Dec 13, 2010, at 2:55 PM, Sam Harwell wrote:





I implemented this in the C# port of ST, and submitted it in changelist
7307. I also updated the way items are registered so registrations apply to
derived types and interface implementations. Here is the order in which the
search is performed (the * indicates "until null"):

 

1.       Search current template

2.       Search enclosing template*

3.       Search group

4.       Search super group*

 

Here is the order in which a match for type T is found. This check is
performed at each step of the above process until a match is found (with
some key optimizations in place to keep it from going slow).

 

1.       Check for a registration for T (exact match).

2.       Check each registration K at the current level - if T is derived
from class K or implements interface K, then it is a candidate. If this step
reveals candidates,

a.       If there is exactly one candidate, it is chosen as a weak match and
the process is complete.

b.      For each pair of candidates T1!=T2, if T2 is derived from class T1
or implements interface T1, then T2 is a strictly stronger match and T1 is
removed from the set of candidates.

c.       The filtering process always leaves 1 or more candidates. If only 1
candidate remains, it is chosen as the weak match and the process is
complete.

d.      If >1 candidates remain, an AmbiguousMatchException is thrown.

 

From: stringtemplate-interest-bounces at antlr.org
[mailto:stringtemplate-interest-bounces at antlr.org] On Behalf Of Sam Harwell
Sent: Sunday, December 12, 2010 9:41 PM
To: stringtemplate-interest
Subject: [stringtemplate-interest] StringTemplate type proxies

 

I recently started using StringTemplate for a significant code generation
project. I'm quite happy with the way things are progressing, but I'm
noticing there are several times where I have to add a new property to my
code objects just so StringTemplate can produce the desired output. In a
manner similar to attribute renderers, I believe the addition of type
proxies would be extremely beneficial. Suppose the user registers a type
proxy for type T. The type proxy exposes the following method:

 

object createProxy(object value);

 

Whenever an attribute resolves to a value of type T, the proxy's
createProxy() method is called. Attributes on the object are resolved
against the value returned by the proxy.

 

Any thoughts on this?

 

Thanks,

Sam

_______________________________________________
stringtemplate-interest mailing list
stringtemplate-interest at antlr.org
http://www.antlr.org/mailman/listinfo/stringtemplate-interest

 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20101213/e48f82dd/attachment.html 

From rafael at alphasimple.com  Mon Dec 13 22:34:07 2010
From: rafael at alphasimple.com (Rafael Chaves)
Date: Mon, 13 Dec 2010 22:34:07 -0800
Subject: [stringtemplate-interest] StringTemplate vs.third-party models
In-Reply-To: <AANLkTiny+V3_ZPh8mU8OWna7k9P6im5GcN9DSKd-3yE8@mail.gmail.com>
References: <AANLkTiny+V3_ZPh8mU8OWna7k9P6im5GcN9DSKd-3yE8@mail.gmail.com>
Message-ID: <AANLkTimJfxNSH9OJp7m-oYS9sQc7iSMpz9LyTA1eoLOC@mail.gmail.com>

Hi,

First time user of StringTemplate here (used several other generators before).

I am very happy with the features of the template language. The
API/implementation could be more flexible though, to help those of us
working with 3rd-party models.

For instance, StringTemplate could allow clients to handle property
value resolution. That way, a client could provide additional
attribute handlers for attributes that are not directly exposed by the
model (but could be easily derived from the model properties). The
built-in reflection-based attribute handler could be just the default
attribute handling mechanism. So would the currently built-in
map-based resolution. But ideally one should be able to chain multiple
attribute handlers, including custom handlers, in a client specified
order. Requiring that we compute all attribute values up-front is far
from ideal for complex third-party models.

Example at hand: I am using ST for generating code from UML models. It
mostly works, except that I need to perform conditional generation
based on model properties that are not always boolean (for instance,
the visibility kind in a UML model can have one of 4 values). If I
could provide a handler for attributes based on name of the
property/type of the target aggregate, I could enhance the base model
with (dynamically computed) boolean attributes just like ST requires
for conditionals. For instance, I could handle implement a "public" or
"isPublic" attribute on UML Property objects that would return true if
the visibility kind is indeed public (and not private, protected or
package-private).

I ended up implementing a hacky mechanism that allows something like
that (see attachment). Basically, it allows you to wrap your root
model object in a read-only map implementation that is backed by the
model object properties, and allows custom property handlers to be
defined. But it only works based on knowledge of the current behavior
of ASTExpr, which is pretty bad. I am not promoting this approach,
just trying to show the extent one has to go to work around the lack
of flexibility in the API.

(BTW, if there is already a way of doing something like this, I will
be really glad to drop this hack!)

Cheers,

Rafael
http://abstratt.com
-------------- next part --------------
A non-text attachment was scrubbed...
Name: ModelWrapper.java
Type: application/octet-stream
Size: 5732 bytes
Desc: not available
Url : http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20101213/e4f556f6/attachment-0001.obj 

From rafael at alphasimple.com  Mon Dec 13 22:37:28 2010
From: rafael at alphasimple.com (Rafael Chaves)
Date: Mon, 13 Dec 2010 22:37:28 -0800
Subject: [stringtemplate-interest] StringTemplate type proxies
In-Reply-To: <0b5801cb9b4f$de3b21d0$9ab16570$@pixelminegames.com>
References: <0aad01cb9a77$8e8815e0$ab9841a0$@pixelminegames.com>
	<0b3b01cb9b18$d5653050$802f90f0$@pixelminegames.com>
	<297BA9B4-C709-417A-8AB8-9975956BECA0@cs.usfca.edu>
	<0b5801cb9b4f$de3b21d0$9ab16570$@pixelminegames.com>
Message-ID: <AANLkTim-+qPP6u5jMAYdM0Mibb_LAse-UoKDQBMoOYM6@mail.gmail.com>

Funny, just joined the list and posted on a new thread on a similar
need I had (and the hack I used to work around it), jsu to find you
guys have been discussing the exact same issue.

Terence, if you always own the models you generate from, you will
never have this need. This issue is a killer for those using complex
models implemented by others.

Cheers,

Rafael

> From: Terence Parr [mailto:parrt at cs.usfca.edu]
> Sent: Monday, December 13, 2010 9:08 PM
> To: Sam Harwell
> Cc: 'stringtemplate-interest'
> Subject: Re: [stringtemplate-interest] StringTemplate type proxies
>
>
>
> Hi Sam, I'm still trying to figure out how I get away without this. ?I'm
> leary of adding features when I haven't ever needed them.
>
>
>
> Ter
>
> On Dec 13, 2010, at 2:55 PM, Sam Harwell wrote:
>
> I implemented this in the C# port of ST, and submitted it in changelist
> 7307. I also updated the way items are registered so registrations apply to
> derived types and interface implementations. Here is the order in which the
> search is performed (the * indicates ?until null?):
>
>
>
> 1.???????Search current template
>
> 2.???????Search enclosing template*
>
> 3.???????Search group
>
> 4.???????Search super group*
>
>
>
> Here is the order in which a match for type T is found. This check is
> performed at each step of the above process until a match is found (with
> some key optimizations in place to keep it from going slow).
>
>
>
> 1.???????Check for a registration for T (exact match).
>
> 2.???????Check each registration K at the current level ? if T is derived
> from class K or implements interface K, then it is a?candidate. If this step
> reveals candidates,
>
> a.???????If there is exactly one candidate, it is chosen as a weak match and
> the process is complete.
>
> b.??????For each pair of candidates T1!=T2, if T2 is derived from class T1
> or implements interface T1, then T2 is a strictly stronger match and T1 is
> removed from the set of candidates.
>
> c.???????The filtering process always leaves 1 or more candidates. If only 1
> candidate remains, it is chosen as the weak match and the process is
> complete.
>
> d.??????If >1 candidates remain, an AmbiguousMatchException is thrown.
>
>
>
> From:?stringtemplate-interest-bounces at antlr.org?[mailto:stringtemplate-interest-bounces at antlr.org]?On
> Behalf Of?Sam Harwell
> Sent:?Sunday, December 12, 2010 9:41 PM
> To:?stringtemplate-interest
> Subject:?[stringtemplate-interest] StringTemplate type proxies
>
>
>
> I recently started using StringTemplate for a significant code generation
> project. I?m quite happy with the way things are progressing, but I?m
> noticing there are several times where I have to add a new property to my
> code objects just so StringTemplate can produce the desired output. In a
> manner similar to attribute renderers, I believe the addition of type
> proxies would be extremely beneficial. Suppose the user registers a type
> proxy for type T. The type proxy exposes the following method:
>
>
>
> object createProxy(object value);
>
>
>
> Whenever an attribute resolves to a value of type T, the proxy?s
> createProxy() method is called. Attributes on the object are resolved
> against the value returned by the proxy.
>
>
>
> Any thoughts on this?
>
>
>
> Thanks,
>
> Sam
>

From ub at abego-software.de  Tue Dec 14 01:34:22 2010
From: ub at abego-software.de (Udo Borkowski)
Date: Tue, 14 Dec 2010 10:34:22 +0100
Subject: [stringtemplate-interest] StringTemplate type proxies
In-Reply-To: <297BA9B4-C709-417A-8AB8-9975956BECA0@cs.usfca.edu>
References: <0aad01cb9a77$8e8815e0$ab9841a0$@pixelminegames.com>
	<0b3b01cb9b18$d5653050$802f90f0$@pixelminegames.com>
	<297BA9B4-C709-417A-8AB8-9975956BECA0@cs.usfca.edu>
Message-ID: <7D3F4319-F135-4C86-AD26-2E2DF4488498@abego-software.de>

When I ran into an issue like the one described I found it sufficient to use the AttributeRenderer approach. In this renderer I can also do type-specific stuff by checking the type of the attribute evaluated. Rather than extending the model I tend to extend the AttributeRenderer. 

Typically I create one special AttributeRenderer per project and use the format string to select the various "cases". To help me doing this I created a "general" StringRenderer that selects one specific renderer based on the given format string, making it easier to reuse renderers.

Udo

On 14.12.2010, at 04:07, Terence Parr wrote:

> Hi Sam, I'm still trying to figure out how I get away without this.  I'm leary of adding features when I haven't ever needed them.
> 
> Ter
> On Dec 13, 2010, at 2:55 PM, Sam Harwell wrote:
> 
>> I implemented this in the C# port of ST, and submitted it in changelist 7307. I also updated the way items are registered so registrations apply to derived types and interface implementations. Here is the order in which the search is performed (the * indicates ?until null?):
>>  
>> 1.       Search current template
>> 2.       Search enclosing template*
>> 3.       Search group
>> 4.       Search super group*
>>  
>> Here is the order in which a match for type T is found. This check is performed at each step of the above process until a match is found (with some key optimizations in place to keep it from going slow).
>>  
>> 1.       Check for a registration for T (exact match).
>> 2.       Check each registration K at the current level ? if T is derived from class K or implements interface K, then it is a candidate. If this step reveals candidates,
>> a.       If there is exactly one candidate, it is chosen as a weak match and the process is complete.
>> b.      For each pair of candidates T1!=T2, if T2 is derived from class T1 or implements interface T1, then T2 is a strictly stronger match and T1 is removed from the set of candidates.
>> c.       The filtering process always leaves 1 or more candidates. If only 1 candidate remains, it is chosen as the weak match and the process is complete.
>> d.      If >1 candidates remain, an AmbiguousMatchException is thrown.
>>  
>> From: stringtemplate-interest-bounces at antlr.org [mailto:stringtemplate-interest-bounces at antlr.org] On Behalf Of Sam Harwell
>> Sent: Sunday, December 12, 2010 9:41 PM
>> To: stringtemplate-interest
>> Subject: [stringtemplate-interest] StringTemplate type proxies
>>  
>> I recently started using StringTemplate for a significant code generation project. I?m quite happy with the way things are progressing, but I?m noticing there are several times where I have to add a new property to my code objects just so StringTemplate can produce the desired output. In a manner similar to attribute renderers, I believe the addition of type proxies would be extremely beneficial. Suppose the user registers a type proxy for type T. The type proxy exposes the following method:
>>  
>> object createProxy(object value);
>>  
>> Whenever an attribute resolves to a value of type T, the proxy?s createProxy() method is called. Attributes on the object are resolved against the value returned by the proxy.
>>  
>> Any thoughts on this?
>>  
>> Thanks,
>> Sam
>> _______________________________________________
>> stringtemplate-interest mailing list
>> stringtemplate-interest at antlr.org
>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
> 
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20101214/8d7f88d2/attachment.html 

From parrt at cs.usfca.edu  Tue Dec 14 11:16:34 2010
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue, 14 Dec 2010 11:16:34 -0800
Subject: [stringtemplate-interest] StringTemplate type proxies
In-Reply-To: <AANLkTim-+qPP6u5jMAYdM0Mibb_LAse-UoKDQBMoOYM6@mail.gmail.com>
References: <0aad01cb9a77$8e8815e0$ab9841a0$@pixelminegames.com>
	<0b3b01cb9b18$d5653050$802f90f0$@pixelminegames.com>
	<297BA9B4-C709-417A-8AB8-9975956BECA0@cs.usfca.edu>
	<0b5801cb9b4f$de3b21d0$9ab16570$@pixelminegames.com>
	<AANLkTim-+qPP6u5jMAYdM0Mibb_LAse-UoKDQBMoOYM6@mail.gmail.com>
Message-ID: <6745A8E3-0559-480F-A315-FCD853C28344@cs.usfca.edu>

Very convincing argument, folks. thank you. 3rd party models.

Ok, so how do they interact with renderers?  I guess the renderer is done *after* proxy stuff.

Proxy: RandomModelObject -> MyWrapperForRandomModelObject, adds getFoo() or whatever.

Then, if getFoo() returns type Date, renderer applies to that.  I like it.  

I remember mentioning how to do this manually. just override setAttribute() so that it traps RandomModelObject and wraps.  

Does this need to be formalized or can it simply be a FAQ entry?  it's a switch on type, look up in hashtable thing only right?

Ter

From rafael at alphasimple.com  Tue Dec 14 11:28:45 2010
From: rafael at alphasimple.com (Rafael Chaves)
Date: Tue, 14 Dec 2010 11:28:45 -0800
Subject: [stringtemplate-interest] StringTemplate type proxies
In-Reply-To: <6745A8E3-0559-480F-A315-FCD853C28344@cs.usfca.edu>
References: <0aad01cb9a77$8e8815e0$ab9841a0$@pixelminegames.com>
	<0b3b01cb9b18$d5653050$802f90f0$@pixelminegames.com>
	<297BA9B4-C709-417A-8AB8-9975956BECA0@cs.usfca.edu>
	<0b5801cb9b4f$de3b21d0$9ab16570$@pixelminegames.com>
	<AANLkTim-+qPP6u5jMAYdM0Mibb_LAse-UoKDQBMoOYM6@mail.gmail.com>
	<6745A8E3-0559-480F-A315-FCD853C28344@cs.usfca.edu>
Message-ID: <AANLkTimoOVLnY-NLnoV0Czbg-=YteorjNP_4UVAR1Y-v@mail.gmail.com>

Yup, renderers translate from whatever values to String. The decorator
(not a proxy, as it augments the shape of the target object) allows
obtaining the values.

This should apply at any level in the model graph, not only top level
attributes. Does setAttribute handle that?

For instance: Package has Classes with have Attributes. I set only one
attribute on the top-level template, to be the root package object,
and then navigate the graph with several templates (one for packages,
one for classes, and another for attributes).

Will overriding setAttribute allow me to intercept how any arbitrarily
deep object is handled?

Cheers,

Rafael

On Tue, Dec 14, 2010 at 11:16 AM, Terence Parr <parrt at cs.usfca.edu> wrote:
> Very convincing argument, folks. thank you. 3rd party models.
>
> Ok, so how do they interact with renderers? ?I guess the renderer is done *after* proxy stuff.
>
> Proxy: RandomModelObject -> MyWrapperForRandomModelObject, adds getFoo() or whatever.
>
> Then, if getFoo() returns type Date, renderer applies to that. ?I like it.
>
> I remember mentioning how to do this manually. just override setAttribute() so that it traps RandomModelObject and wraps.
>
> Does this need to be formalized or can it simply be a FAQ entry? ?it's a switch on type, look up in hashtable thing only right?
>
> Ter

From parrt at cs.usfca.edu  Tue Dec 14 12:06:05 2010
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue, 14 Dec 2010 12:06:05 -0800
Subject: [stringtemplate-interest] StringTemplate type proxies
In-Reply-To: <AANLkTimoOVLnY-NLnoV0Czbg-=YteorjNP_4UVAR1Y-v@mail.gmail.com>
References: <0aad01cb9a77$8e8815e0$ab9841a0$@pixelminegames.com>
	<0b3b01cb9b18$d5653050$802f90f0$@pixelminegames.com>
	<297BA9B4-C709-417A-8AB8-9975956BECA0@cs.usfca.edu>
	<0b5801cb9b4f$de3b21d0$9ab16570$@pixelminegames.com>
	<AANLkTim-+qPP6u5jMAYdM0Mibb_LAse-UoKDQBMoOYM6@mail.gmail.com>
	<6745A8E3-0559-480F-A315-FCD853C28344@cs.usfca.edu>
	<AANLkTimoOVLnY-NLnoV0Czbg-=YteorjNP_4UVAR1Y-v@mail.gmail.com>
Message-ID: <FB1FA612-5A06-49DA-BB44-F34D1E312AC6@cs.usfca.edu>

Ah! You are so correct! It only works on the values you pass through setAttribute. Ok, so the proposition is to simply add

registerProxy(ModelType, MyProxyType)

and have ST created new MyProxyType object with

new MyProxyType(aModelTypeObjectAttribute)

for each reference to a ModelType object? Won't that get inefficient? perhaps it should be like renderer and we  create a single object to wrap any object?

$a.foo$ would invoke method MyProxyType.getFoo(a), right?

Am  I going in the right direction?

Ter

On Dec 14, 2010, at 11:28 AM, Rafael Chaves wrote:

> Yup, renderers translate from whatever values to String. The decorator
> (not a proxy, as it augments the shape of the target object) allows
> obtaining the values.
> 
> This should apply at any level in the model graph, not only top level
> attributes. Does setAttribute handle that?
> 
> For instance: Package has Classes with have Attributes. I set only one
> attribute on the top-level template, to be the root package object,
> and then navigate the graph with several templates (one for packages,
> one for classes, and another for attributes).
> 
> Will overriding setAttribute allow me to intercept how any arbitrarily
> deep object is handled?
> 
> Cheers,
> 
> Rafael
> 
> On Tue, Dec 14, 2010 at 11:16 AM, Terence Parr <parrt at cs.usfca.edu> wrote:
>> Very convincing argument, folks. thank you. 3rd party models.
>> 
>> Ok, so how do they interact with renderers?  I guess the renderer is done *after* proxy stuff.
>> 
>> Proxy: RandomModelObject -> MyWrapperForRandomModelObject, adds getFoo() or whatever.
>> 
>> Then, if getFoo() returns type Date, renderer applies to that.  I like it.
>> 
>> I remember mentioning how to do this manually. just override setAttribute() so that it traps RandomModelObject and wraps.
>> 
>> Does this need to be formalized or can it simply be a FAQ entry?  it's a switch on type, look up in hashtable thing only right?
>> 
>> Ter
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest


From rafael at alphasimple.com  Tue Dec 14 12:22:34 2010
From: rafael at alphasimple.com (Rafael Chaves)
Date: Tue, 14 Dec 2010 12:22:34 -0800
Subject: [stringtemplate-interest] StringTemplate type proxies
In-Reply-To: <AANLkTimYOuuoqz8dzoOQAhUrDW5OkFE95Q+WDrA8q-Qw@mail.gmail.com>
References: <0aad01cb9a77$8e8815e0$ab9841a0$@pixelminegames.com>
	<0b3b01cb9b18$d5653050$802f90f0$@pixelminegames.com>
	<297BA9B4-C709-417A-8AB8-9975956BECA0@cs.usfca.edu>
	<0b5801cb9b4f$de3b21d0$9ab16570$@pixelminegames.com>
	<AANLkTim-+qPP6u5jMAYdM0Mibb_LAse-UoKDQBMoOYM6@mail.gmail.com>
	<6745A8E3-0559-480F-A315-FCD853C28344@cs.usfca.edu>
	<AANLkTimoOVLnY-NLnoV0Czbg-=YteorjNP_4UVAR1Y-v@mail.gmail.com>
	<FB1FA612-5A06-49DA-BB44-F34D1E312AC6@cs.usfca.edu>
	<AANLkTimYOuuoqz8dzoOQAhUrDW5OkFE95Q+WDrA8q-Qw@mail.gmail.com>
Message-ID: <AANLkTimz7VJXOOe0B_GtBoPratGpqfgyaAbQVdKxcxwT@mail.gmail.com>

Yeah, I'd rather register an instance instead of passing in a class
and let ST instantiate it. That would address your concern about
efficiency, but it is just better design IMO.

On how to determine whether the wrapper should be activated, I'd hope
it would be based on an "instanceOf" match instead of an exact class
match (which is a grip I have with AttributeRenderer). I don't
necessarily know the classes of the objects I am dealing with
(implementation classes are often not exposed to clients of an API,
but I will know some public class or interface), or may be interested
in a hierarchy of classes. True, that leaves some room for multiple
wrappers being interested in the same object, but you can decide based
on order of registration (first or last to match wins) - for a single
template, it is reasonable to assume there is only on party involved.

Cheers,

Rafael

On Tue, Dec 14, 2010 at 12:06 PM, Terence Parr <parrt at cs.usfca.edu> wrote:
> Ah! You are so correct! It only works on the values you pass through setAttribute. Ok, so the proposition is to simply add
>
> registerProxy(ModelType, MyProxyType)
>
> and have ST created new MyProxyType object with
>
> new MyProxyType(aModelTypeObjectAttribute)
>
> for each reference to a ModelType object? Won't that get inefficient? perhaps it should be like renderer and we ?create a single object to wrap any object?
>
> $a.foo$ would invoke method MyProxyType.getFoo(a), right?
>
> Am ?I going in the right direction?
>
> Ter
>
> On Dec 14, 2010, at 11:28 AM, Rafael Chaves wrote:
>
>> Yup, renderers translate from whatever values to String. The decorator
>> (not a proxy, as it augments the shape of the target object) allows
>> obtaining the values.
>>
>> This should apply at any level in the model graph, not only top level
>> attributes. Does setAttribute handle that?
>>
>> For instance: Package has Classes with have Attributes. I set only one
>> attribute on the top-level template, to be the root package object,
>> and then navigate the graph with several templates (one for packages,
>> one for classes, and another for attributes).
>>
>> Will overriding setAttribute allow me to intercept how any arbitrarily
>> deep object is handled?
>>
>> Cheers,
>>
>> Rafael
>>
>> On Tue, Dec 14, 2010 at 11:16 AM, Terence Parr <parrt at cs.usfca.edu> wrote:
>>> Very convincing argument, folks. thank you. 3rd party models.
>>>
>>> Ok, so how do they interact with renderers? ?I guess the renderer is done *after* proxy stuff.
>>>
>>> Proxy: RandomModelObject -> MyWrapperForRandomModelObject, adds getFoo() or whatever.
>>>
>>> Then, if getFoo() returns type Date, renderer applies to that. ?I like it.
>>>
>>> I remember mentioning how to do this manually. just override setAttribute() so that it traps RandomModelObject and wraps.
>>>
>>> Does this need to be formalized or can it simply be a FAQ entry? ?it's a switch on type, look up in hashtable thing only right?
>>>
>>> Ter
>> _______________________________________________
>> stringtemplate-interest mailing list
>> stringtemplate-interest at antlr.org
>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>
>

From sharwell at pixelminegames.com  Tue Dec 14 12:42:33 2010
From: sharwell at pixelminegames.com (Sam Harwell)
Date: Tue, 14 Dec 2010 14:42:33 -0600
Subject: [stringtemplate-interest] StringTemplate type proxies
In-Reply-To: <6745A8E3-0559-480F-A315-FCD853C28344@cs.usfca.edu>
References: <0aad01cb9a77$8e8815e0$ab9841a0$@pixelminegames.com>	<0b3b01cb9b18$d5653050$802f90f0$@pixelminegames.com>	<297BA9B4-C709-417A-8AB8-9975956BECA0@cs.usfca.edu>	<0b5801cb9b4f$de3b21d0$9ab16570$@pixelminegames.com>	<AANLkTim-+qPP6u5jMAYdM0Mibb_LAse-UoKDQBMoOYM6@mail.gmail.com>
	<6745A8E3-0559-480F-A315-FCD853C28344@cs.usfca.edu>
Message-ID: <0bcf01cb9bcf$6fae2390$4f0a6ab0$@pixelminegames.com>

I worked to keep CL 7307 simple so you could reference it for this. I could
also provide a Java implementation if you'd like. Here's an overview:

1. The proxy factory interface can be registered in the same two places as
attribute renderers (on the template and/or on the group).
2. The proxy is requested in two places. These two locations cause the proxy
to be used for property lookups and rendering, before the attribute renderer
is used.
2a. At the beginning of ASTExpr.GetObjectProperty (after the check for
null).
2b. At the beginning of ASTExpr.Write(StringTemplate, Object,
StringTemplateWriter) (after the check for null).
3. The types for both attribute renderers and proxies are looked up in my
TypeRegistry<T> class, which takes the place of the hash table lookups that
were done previously. That class includes boiler code for implementing some
standard .NET interfaces, but the meat of the implementation lies in the
following methods. (Again, I'd be happy to implement this in Java if you'd
like.)
3a. Two fields, _backingStore and _cache (line 50-51), which for Java would
have types Map<Class, T> and Map<Class, Class>.
3b. The property "public T this[Type key]" (line 141-157), which for Java
would (I believe) be "public T getItem(Class key)" and "public T
setItem(Class key, T value)".
3c. The methods Add, ContainsKey, Remove, TryGetValue, and Clear (grouped
together in that order on lines 180-277).
3d. The HandleAlteration method (lines 366-371).

The _backingStore is a hash table of the exact types used for registering
(renderers or proxies). The _cache field is a Type->Type map used for
efficient base- and interface-class lookups. As a quick example, if a user
registers an attribute renderer myTypeRendererInstance for
java.lang.reflect.Type, then _backingStore contains
Type->myTypeRendererInstance. If the user then supplies a java.lang.Class
object as an attribute, then whenever the registry is queried for type
Class, it finds that there is no exact match so it stores Class->Type in
_cache as the "best weak match". If there is no match, then it stores
Class->null in _cache so it knows to proceed up the template hierarchy
without wasting time doing object model checks. All of this logic is
contained in TryGetValue. The key item for the other methods is making sure
the _cache is properly invalidated when any change is made to the
_backingStore.

-----Original Message-----
From: stringtemplate-interest-bounces at antlr.org
[mailto:stringtemplate-interest-bounces at antlr.org] On Behalf Of Terence Parr
Sent: Tuesday, December 14, 2010 1:17 PM
To: Rafael Chaves
Cc: stringtemplate-interest at antlr.org
Subject: Re: [stringtemplate-interest] StringTemplate type proxies

Very convincing argument, folks. thank you. 3rd party models.

Ok, so how do they interact with renderers?  I guess the renderer is done
*after* proxy stuff.

Proxy: RandomModelObject -> MyWrapperForRandomModelObject, adds getFoo() or
whatever.

Then, if getFoo() returns type Date, renderer applies to that.  I like it.  

I remember mentioning how to do this manually. just override setAttribute()
so that it traps RandomModelObject and wraps.  

Does this need to be formalized or can it simply be a FAQ entry?  it's a
switch on type, look up in hashtable thing only right?

Ter
_______________________________________________
stringtemplate-interest mailing list
stringtemplate-interest at antlr.org
http://www.antlr.org/mailman/listinfo/stringtemplate-interest


From sharwell at pixelminegames.com  Tue Dec 14 13:18:45 2010
From: sharwell at pixelminegames.com (Sam Harwell)
Date: Tue, 14 Dec 2010 15:18:45 -0600
Subject: [stringtemplate-interest] StringTemplate type proxies
In-Reply-To: <FB1FA612-5A06-49DA-BB44-F34D1E312AC6@cs.usfca.edu>
References: <0aad01cb9a77$8e8815e0$ab9841a0$@pixelminegames.com>	<0b3b01cb9b18$d5653050$802f90f0$@pixelminegames.com>	<297BA9B4-C709-417A-8AB8-9975956BECA0@cs.usfca.edu>	<0b5801cb9b4f$de3b21d0$9ab16570$@pixelminegames.com>	<AANLkTim-+qPP6u5jMAYdM0Mibb_LAse-UoKDQBMoOYM6@mail.gmail.com>	<6745A8E3-0559-480F-A315-FCD853C28344@cs.usfca.edu>	<AANLkTimoOVLnY-NLnoV0Czbg-=YteorjNP_4UVAR1Y-v@mail.gmail.com>
	<FB1FA612-5A06-49DA-BB44-F34D1E312AC6@cs.usfca.edu>
Message-ID: <0bd001cb9bd4$7e9a8920$7bcf9b60$@pixelminegames.com>

Using a single instance doesn't make nearly as much sense for .NET as it
does for Java. Most attributes we use are properties, which don't take any
arguments, and the only way to preserve this is using a factory which wraps
instances. Also, wrapper creation overhead [should be] trivial compared to
the parsing and string manipulation functions in ST. I'll run the result
through a profiler soon to confirm this.

Sam

-----Original Message-----
From: stringtemplate-interest-bounces at antlr.org
[mailto:stringtemplate-interest-bounces at antlr.org] On Behalf Of Terence Parr
Sent: Tuesday, December 14, 2010 2:06 PM
To: Rafael Chaves
Cc: stringtemplate-interest at antlr.org
Subject: Re: [stringtemplate-interest] StringTemplate type proxies

Ah! You are so correct! It only works on the values you pass through
setAttribute. Ok, so the proposition is to simply add

registerProxy(ModelType, MyProxyType)

and have ST created new MyProxyType object with

new MyProxyType(aModelTypeObjectAttribute)

for each reference to a ModelType object? Won't that get inefficient?
perhaps it should be like renderer and we  create a single object to wrap
any object?

$a.foo$ would invoke method MyProxyType.getFoo(a), right?

Am  I going in the right direction?

Ter

On Dec 14, 2010, at 11:28 AM, Rafael Chaves wrote:

> Yup, renderers translate from whatever values to String. The decorator 
> (not a proxy, as it augments the shape of the target object) allows 
> obtaining the values.
> 
> This should apply at any level in the model graph, not only top level 
> attributes. Does setAttribute handle that?
> 
> For instance: Package has Classes with have Attributes. I set only one 
> attribute on the top-level template, to be the root package object, 
> and then navigate the graph with several templates (one for packages, 
> one for classes, and another for attributes).
> 
> Will overriding setAttribute allow me to intercept how any arbitrarily 
> deep object is handled?
> 
> Cheers,
> 
> Rafael
> 
> On Tue, Dec 14, 2010 at 11:16 AM, Terence Parr <parrt at cs.usfca.edu> wrote:
>> Very convincing argument, folks. thank you. 3rd party models.
>> 
>> Ok, so how do they interact with renderers?  I guess the renderer is done
*after* proxy stuff.
>> 
>> Proxy: RandomModelObject -> MyWrapperForRandomModelObject, adds getFoo()
or whatever.
>> 
>> Then, if getFoo() returns type Date, renderer applies to that.  I like
it.
>> 
>> I remember mentioning how to do this manually. just override
setAttribute() so that it traps RandomModelObject and wraps.
>> 
>> Does this need to be formalized or can it simply be a FAQ entry?  it's a
switch on type, look up in hashtable thing only right?
>> 
>> Ter
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest

_______________________________________________
stringtemplate-interest mailing list
stringtemplate-interest at antlr.org
http://www.antlr.org/mailman/listinfo/stringtemplate-interest


From rafael at alphasimple.com  Tue Dec 14 17:40:42 2010
From: rafael at alphasimple.com (Rafael Chaves)
Date: Tue, 14 Dec 2010 17:40:42 -0800
Subject: [stringtemplate-interest] StringTemplate type proxies
In-Reply-To: <AANLkTimz7VJXOOe0B_GtBoPratGpqfgyaAbQVdKxcxwT@mail.gmail.com>
References: <0aad01cb9a77$8e8815e0$ab9841a0$@pixelminegames.com>
	<0b3b01cb9b18$d5653050$802f90f0$@pixelminegames.com>
	<297BA9B4-C709-417A-8AB8-9975956BECA0@cs.usfca.edu>
	<0b5801cb9b4f$de3b21d0$9ab16570$@pixelminegames.com>
	<AANLkTim-+qPP6u5jMAYdM0Mibb_LAse-UoKDQBMoOYM6@mail.gmail.com>
	<6745A8E3-0559-480F-A315-FCD853C28344@cs.usfca.edu>
	<AANLkTimoOVLnY-NLnoV0Czbg-=YteorjNP_4UVAR1Y-v@mail.gmail.com>
	<FB1FA612-5A06-49DA-BB44-F34D1E312AC6@cs.usfca.edu>
	<AANLkTimYOuuoqz8dzoOQAhUrDW5OkFE95Q+WDrA8q-Qw@mail.gmail.com>
	<AANLkTimz7VJXOOe0B_GtBoPratGpqfgyaAbQVdKxcxwT@mail.gmail.com>
Message-ID: <AANLkTik47dPDk7pNTp1L1tVnpBLy_REOEsPEviC518hg@mail.gmail.com>

Just to be clear, I meant one would register the decorator factory,
not a single decorator.

In my implementation, it is up to the factory to decide whether to
wrap/decorate or not -  it may choose to return the object it got
"as-is" in some cases (i.e. not wrap it), for instance.

On Tue, Dec 14, 2010 at 12:22 PM, Rafael Chaves <rafael at alphasimple.com> wrote:
> Yeah, I'd rather register an instance instead of passing in a class
> and let ST instantiate it. That would address your concern about
> efficiency, but it is just better design IMO.
>
> On how to determine whether the wrapper should be activated, I'd hope
> it would be based on an "instanceOf" match instead of an exact class
> match (which is a grip I have with AttributeRenderer). I don't
> necessarily know the classes of the objects I am dealing with
> (implementation classes are often not exposed to clients of an API,
> but I will know some public class or interface), or may be interested
> in a hierarchy of classes. True, that leaves some room for multiple
> wrappers being interested in the same object, but you can decide based
> on order of registration (first or last to match wins) - for a single
> template, it is reasonable to assume there is only on party involved.
>
> Cheers,
>
> Rafael
>
> On Tue, Dec 14, 2010 at 12:06 PM, Terence Parr <parrt at cs.usfca.edu> wrote:
>> Ah! You are so correct! It only works on the values you pass through setAttribute. Ok, so the proposition is to simply add
>>
>> registerProxy(ModelType, MyProxyType)
>>
>> and have ST created new MyProxyType object with
>>
>> new MyProxyType(aModelTypeObjectAttribute)
>>
>> for each reference to a ModelType object? Won't that get inefficient? perhaps it should be like renderer and we ?create a single object to wrap any object?
>>
>> $a.foo$ would invoke method MyProxyType.getFoo(a), right?
>>
>> Am ?I going in the right direction?
>>
>> Ter
>>
>> On Dec 14, 2010, at 11:28 AM, Rafael Chaves wrote:
>>
>>> Yup, renderers translate from whatever values to String. The decorator
>>> (not a proxy, as it augments the shape of the target object) allows
>>> obtaining the values.
>>>
>>> This should apply at any level in the model graph, not only top level
>>> attributes. Does setAttribute handle that?
>>>
>>> For instance: Package has Classes with have Attributes. I set only one
>>> attribute on the top-level template, to be the root package object,
>>> and then navigate the graph with several templates (one for packages,
>>> one for classes, and another for attributes).
>>>
>>> Will overriding setAttribute allow me to intercept how any arbitrarily
>>> deep object is handled?
>>>
>>> Cheers,
>>>
>>> Rafael
>>>
>>> On Tue, Dec 14, 2010 at 11:16 AM, Terence Parr <parrt at cs.usfca.edu> wrote:
>>>> Very convincing argument, folks. thank you. 3rd party models.
>>>>
>>>> Ok, so how do they interact with renderers? ?I guess the renderer is done *after* proxy stuff.
>>>>
>>>> Proxy: RandomModelObject -> MyWrapperForRandomModelObject, adds getFoo() or whatever.
>>>>
>>>> Then, if getFoo() returns type Date, renderer applies to that. ?I like it.
>>>>
>>>> I remember mentioning how to do this manually. just override setAttribute() so that it traps RandomModelObject and wraps.
>>>>
>>>> Does this need to be formalized or can it simply be a FAQ entry? ?it's a switch on type, look up in hashtable thing only right?
>>>>
>>>> Ter
>>> _______________________________________________
>>> stringtemplate-interest mailing list
>>> stringtemplate-interest at antlr.org
>>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>>
>>
>

From parrt at cs.usfca.edu  Tue Dec 14 18:27:46 2010
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue, 14 Dec 2010 18:27:46 -0800
Subject: [stringtemplate-interest] StringTemplate type proxies
In-Reply-To: <AANLkTik47dPDk7pNTp1L1tVnpBLy_REOEsPEviC518hg@mail.gmail.com>
References: <0aad01cb9a77$8e8815e0$ab9841a0$@pixelminegames.com>
	<0b3b01cb9b18$d5653050$802f90f0$@pixelminegames.com>
	<297BA9B4-C709-417A-8AB8-9975956BECA0@cs.usfca.edu>
	<0b5801cb9b4f$de3b21d0$9ab16570$@pixelminegames.com>
	<AANLkTim-+qPP6u5jMAYdM0Mibb_LAse-UoKDQBMoOYM6@mail.gmail.com>
	<6745A8E3-0559-480F-A315-FCD853C28344@cs.usfca.edu>
	<AANLkTimoOVLnY-NLnoV0Czbg-=YteorjNP_4UVAR1Y-v@mail.gmail.com>
	<FB1FA612-5A06-49DA-BB44-F34D1E312AC6@cs.usfca.edu>
	<AANLkTimYOuuoqz8dzoOQAhUrDW5OkFE95Q+WDrA8q-Qw@mail.gmail.com>
	<AANLkTimz7VJXOOe0B_GtBoPratGpqfgyaAbQVdKxcxwT@mail.gmail.com>
	<AANLkTik47dPDk7pNTp1L1tVnpBLy_REOEsPEviC518hg@mail.gmail.com>
Message-ID: <B5A9E49A-8B9E-49E9-A9EE-526739349170@cs.usfca.edu>

BTW, i believe "adaptor" is the right pattern name here right?  It's a specialized proxy used to adapt one lib to another.
Ter
On Dec 14, 2010, at 5:40 PM, Rafael Chaves wrote:

> Just to be clear, I meant one would register the decorator factory,
> not a single decorator.
> 
> In my implementation, it is up to the factory to decide whether to
> wrap/decorate or not -  it may choose to return the object it got
> "as-is" in some cases (i.e. not wrap it), for instance.
> 
> On Tue, Dec 14, 2010 at 12:22 PM, Rafael Chaves <rafael at alphasimple.com> wrote:
>> Yeah, I'd rather register an instance instead of passing in a class
>> and let ST instantiate it. That would address your concern about
>> efficiency, but it is just better design IMO.
>> 
>> On how to determine whether the wrapper should be activated, I'd hope
>> it would be based on an "instanceOf" match instead of an exact class
>> match (which is a grip I have with AttributeRenderer). I don't
>> necessarily know the classes of the objects I am dealing with
>> (implementation classes are often not exposed to clients of an API,
>> but I will know some public class or interface), or may be interested
>> in a hierarchy of classes. True, that leaves some room for multiple
>> wrappers being interested in the same object, but you can decide based
>> on order of registration (first or last to match wins) - for a single
>> template, it is reasonable to assume there is only on party involved.
>> 
>> Cheers,
>> 
>> Rafael
>> 
>> On Tue, Dec 14, 2010 at 12:06 PM, Terence Parr <parrt at cs.usfca.edu> wrote:
>>> Ah! You are so correct! It only works on the values you pass through setAttribute. Ok, so the proposition is to simply add
>>> 
>>> registerProxy(ModelType, MyProxyType)
>>> 
>>> and have ST created new MyProxyType object with
>>> 
>>> new MyProxyType(aModelTypeObjectAttribute)
>>> 
>>> for each reference to a ModelType object? Won't that get inefficient? perhaps it should be like renderer and we  create a single object to wrap any object?
>>> 
>>> $a.foo$ would invoke method MyProxyType.getFoo(a), right?
>>> 
>>> Am  I going in the right direction?
>>> 
>>> Ter
>>> 
>>> On Dec 14, 2010, at 11:28 AM, Rafael Chaves wrote:
>>> 
>>>> Yup, renderers translate from whatever values to String. The decorator
>>>> (not a proxy, as it augments the shape of the target object) allows
>>>> obtaining the values.
>>>> 
>>>> This should apply at any level in the model graph, not only top level
>>>> attributes. Does setAttribute handle that?
>>>> 
>>>> For instance: Package has Classes with have Attributes. I set only one
>>>> attribute on the top-level template, to be the root package object,
>>>> and then navigate the graph with several templates (one for packages,
>>>> one for classes, and another for attributes).
>>>> 
>>>> Will overriding setAttribute allow me to intercept how any arbitrarily
>>>> deep object is handled?
>>>> 
>>>> Cheers,
>>>> 
>>>> Rafael
>>>> 
>>>> On Tue, Dec 14, 2010 at 11:16 AM, Terence Parr <parrt at cs.usfca.edu> wrote:
>>>>> Very convincing argument, folks. thank you. 3rd party models.
>>>>> 
>>>>> Ok, so how do they interact with renderers?  I guess the renderer is done *after* proxy stuff.
>>>>> 
>>>>> Proxy: RandomModelObject -> MyWrapperForRandomModelObject, adds getFoo() or whatever.
>>>>> 
>>>>> Then, if getFoo() returns type Date, renderer applies to that.  I like it.
>>>>> 
>>>>> I remember mentioning how to do this manually. just override setAttribute() so that it traps RandomModelObject and wraps.
>>>>> 
>>>>> Does this need to be formalized or can it simply be a FAQ entry?  it's a switch on type, look up in hashtable thing only right?
>>>>> 
>>>>> Ter
>>>> _______________________________________________
>>>> stringtemplate-interest mailing list
>>>> stringtemplate-interest at antlr.org
>>>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>>> 
>>> 
>> 
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest


From parrt at cs.usfca.edu  Wed Dec 15 13:34:26 2010
From: parrt at cs.usfca.edu (Terence Parr)
Date: Wed, 15 Dec 2010 13:34:26 -0800
Subject: [stringtemplate-interest] StringTemplate type proxies
In-Reply-To: <AANLkTimz7VJXOOe0B_GtBoPratGpqfgyaAbQVdKxcxwT@mail.gmail.com>
References: <0aad01cb9a77$8e8815e0$ab9841a0$@pixelminegames.com>
	<0b3b01cb9b18$d5653050$802f90f0$@pixelminegames.com>
	<297BA9B4-C709-417A-8AB8-9975956BECA0@cs.usfca.edu>
	<0b5801cb9b4f$de3b21d0$9ab16570$@pixelminegames.com>
	<AANLkTim-+qPP6u5jMAYdM0Mibb_LAse-UoKDQBMoOYM6@mail.gmail.com>
	<6745A8E3-0559-480F-A315-FCD853C28344@cs.usfca.edu>
	<AANLkTimoOVLnY-NLnoV0Czbg-=YteorjNP_4UVAR1Y-v@mail.gmail.com>
	<FB1FA612-5A06-49DA-BB44-F34D1E312AC6@cs.usfca.edu>
	<AANLkTimYOuuoqz8dzoOQAhUrDW5OkFE95Q+WDrA8q-Qw@mail.gmail.com>
	<AANLkTimz7VJXOOe0B_GtBoPratGpqfgyaAbQVdKxcxwT@mail.gmail.com>
Message-ID: <76255EBB-7AF7-437D-AC99-38E250F042A3@cs.usfca.edu>


On Dec 14, 2010, at 12:22 PM, Rafael Chaves wrote:

> Yeah, I'd rather register an instance instead of passing in a class
> and let ST instantiate it. That would address your concern about
> efficiency, but it is just better design IMO.
> 
> On how to determine whether the wrapper should be activated, I'd hope
> it would be based on an "instanceOf" match instead of an exact class
> match (which is a grip I have with AttributeRenderer).

interesting. seems render could be  instanceOf but an adaptor should be per type, shouldn't it?  Perhaps instanceof then prioritized by order you register, right? oh, that's what you say below. :)
T

> I don't
> necessarily know the classes of the objects I am dealing with
> (implementation classes are often not exposed to clients of an API,
> but I will know some public class or interface), or may be interested
> in a hierarchy of classes. True, that leaves some room for multiple
> wrappers being interested in the same object, but you can decide based
> on order of registration (first or last to match wins) - for a single
> template, it is reasonable to assume there is only on party involved.
> 
> Cheers,
> 
> Rafael
> 
> On Tue, Dec 14, 2010 at 12:06 PM, Terence Parr <parrt at cs.usfca.edu> wrote:
>> Ah! You are so correct! It only works on the values you pass through setAttribute. Ok, so the proposition is to simply add
>> 
>> registerProxy(ModelType, MyProxyType)
>> 
>> and have ST created new MyProxyType object with
>> 
>> new MyProxyType(aModelTypeObjectAttribute)
>> 
>> for each reference to a ModelType object? Won't that get inefficient? perhaps it should be like renderer and we  create a single object to wrap any object?
>> 
>> $a.foo$ would invoke method MyProxyType.getFoo(a), right?
>> 
>> Am  I going in the right direction?
>> 
>> Ter
>> 
>> On Dec 14, 2010, at 11:28 AM, Rafael Chaves wrote:
>> 
>>> Yup, renderers translate from whatever values to String. The decorator
>>> (not a proxy, as it augments the shape of the target object) allows
>>> obtaining the values.
>>> 
>>> This should apply at any level in the model graph, not only top level
>>> attributes. Does setAttribute handle that?
>>> 
>>> For instance: Package has Classes with have Attributes. I set only one
>>> attribute on the top-level template, to be the root package object,
>>> and then navigate the graph with several templates (one for packages,
>>> one for classes, and another for attributes).
>>> 
>>> Will overriding setAttribute allow me to intercept how any arbitrarily
>>> deep object is handled?
>>> 
>>> Cheers,
>>> 
>>> Rafael
>>> 
>>> On Tue, Dec 14, 2010 at 11:16 AM, Terence Parr <parrt at cs.usfca.edu> wrote:
>>>> Very convincing argument, folks. thank you. 3rd party models.
>>>> 
>>>> Ok, so how do they interact with renderers?  I guess the renderer is done *after* proxy stuff.
>>>> 
>>>> Proxy: RandomModelObject -> MyWrapperForRandomModelObject, adds getFoo() or whatever.
>>>> 
>>>> Then, if getFoo() returns type Date, renderer applies to that.  I like it.
>>>> 
>>>> I remember mentioning how to do this manually. just override setAttribute() so that it traps RandomModelObject and wraps.
>>>> 
>>>> Does this need to be formalized or can it simply be a FAQ entry?  it's a switch on type, look up in hashtable thing only right?
>>>> 
>>>> Ter
>>> _______________________________________________
>>> stringtemplate-interest mailing list
>>> stringtemplate-interest at antlr.org
>>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>> 
>> 
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest


From parrt at cs.usfca.edu  Wed Dec 15 13:45:54 2010
From: parrt at cs.usfca.edu (Terence Parr)
Date: Wed, 15 Dec 2010 13:45:54 -0800
Subject: [stringtemplate-interest] StringTemplate type proxies
In-Reply-To: <0bcf01cb9bcf$6fae2390$4f0a6ab0$@pixelminegames.com>
References: <0aad01cb9a77$8e8815e0$ab9841a0$@pixelminegames.com>	<0b3b01cb9b18$d5653050$802f90f0$@pixelminegames.com>	<297BA9B4-C709-417A-8AB8-9975956BECA0@cs.usfca.edu>	<0b5801cb9b4f$de3b21d0$9ab16570$@pixelminegames.com>	<AANLkTim-+qPP6u5jMAYdM0Mibb_LAse-UoKDQBMoOYM6@mail.gmail.com>
	<6745A8E3-0559-480F-A315-FCD853C28344@cs.usfca.edu>
	<0bcf01cb9bcf$6fae2390$4f0a6ab0$@pixelminegames.com>
Message-ID: <2A08422B-3085-4FB2-86F8-22DCD4049C79@cs.usfca.edu>


On Dec 14, 2010, at 12:42 PM, Sam Harwell wrote:
> 2. The proxy is requested in two places. These two locations cause the proxy
> to be used for property lookups and rendering, before the attribute renderer
> is used.
> 2a. At the beginning of ASTExpr.GetObjectProperty (after the check for
> null).
> 2b. At the beginning of ASTExpr.Write(StringTemplate, Object,
> StringTemplateWriter) (after the check for null).

Why do we need an adaptor there?  Should only happen on $a.foo$ or maybe even $aMap.key$, right?  render happens only for toString...we can use renderers not adaptors for that.

Ter

From collin.fagan at gmail.com  Mon Dec 20 13:55:45 2010
From: collin.fagan at gmail.com (Collin Fagan)
Date: Mon, 20 Dec 2010 15:55:45 -0600
Subject: [stringtemplate-interest] StringTemplate + Doclet
Message-ID: <AANLkTimSTL7bsXfUwDdA8N1TJVnbfDz8D-D7d4mUuF4g@mail.gmail.com>

Hi Everyone,

I'm a big fan of StringTemplate but I've finally run into something I can't
do. Basically I would very much like to bridge StringTemplate to java's
Doclet API (
http://download.oracle.com/javase/6/docs/technotes/guides/javadoc/doclet/overview.html)
but the classes in com.sun.javadoc.* do not follow the getter + setter rule.
They have method names like classes(), methods() and the like. Is there a
way to override how ST looks for properties? Am I missing something where I
can just call methods()? My only other options seem to involve lots of
wrapping (not fun) or pushing everythign into maps (also not fun).

Thanks,

Collin

P.S. I apologize in advance if this subject is well covered someplace else.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20101220/af9f07e0/attachment.html 

From parrt at cs.usfca.edu  Tue Dec 21 10:04:31 2010
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue, 21 Dec 2010 10:04:31 -0800
Subject: [stringtemplate-interest] StringTemplate + Doclet
In-Reply-To: <AANLkTimSTL7bsXfUwDdA8N1TJVnbfDz8D-D7d4mUuF4g@mail.gmail.com>
References: <AANLkTimSTL7bsXfUwDdA8N1TJVnbfDz8D-D7d4mUuF4g@mail.gmail.com>
Message-ID: <2026C4F6-97AF-433A-B057-07D9E00C95D4@cs.usfca.edu>

Hi Collin, we have *just* started talking about this :)  In fact previous messages are all about it.  We need an adaptor mechanism that overrides ASTExpr.GetObjectProperty to use adaptors to get classes and other fields/methods not following javabeans.

I haven't implemented but it's "easy" ;)

Ter

On Dec 20, 2010, at 1:55 PM, Collin Fagan wrote:

> Hi Everyone,
> 
> I'm a big fan of StringTemplate but I've finally run into something I can't do. Basically I would very much like to bridge StringTemplate to java's Doclet API (http://download.oracle.com/javase/6/docs/technotes/guides/javadoc/doclet/overview.html) but the classes in com.sun.javadoc.* do not follow the getter + setter rule. They have method names like classes(), methods() and the like. Is there a way to override how ST looks for properties? Am I missing something where I can just call methods()? My only other options seem to involve lots of wrapping (not fun) or pushing everythign into maps (also not fun). 
> 
> Thanks,
> 
> Collin
> 
> P.S. I apologize in advance if this subject is well covered someplace else. 
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20101221/609e962d/attachment.html 

From collin.fagan at gmail.com  Tue Dec 21 12:55:08 2010
From: collin.fagan at gmail.com (Collin Fagan)
Date: Tue, 21 Dec 2010 14:55:08 -0600
Subject: [stringtemplate-interest] StringTemplate + Doclet
In-Reply-To: <2026C4F6-97AF-433A-B057-07D9E00C95D4@cs.usfca.edu>
References: <AANLkTimSTL7bsXfUwDdA8N1TJVnbfDz8D-D7d4mUuF4g@mail.gmail.com>
	<2026C4F6-97AF-433A-B057-07D9E00C95D4@cs.usfca.edu>
Message-ID: <AANLkTinvb6GcJ1w7s0=jcgByXVdXfdZ3FmECbDc1SdTg@mail.gmail.com>

Thats good news, thanks. I am familiar with the Introspection/Reflection API
so let me know if there is anything I can do to help.

Collin

On Tue, Dec 21, 2010 at 12:04 PM, Terence Parr <parrt at cs.usfca.edu> wrote:

> Hi Collin, we have *just* started talking about this :)  In fact previous
> messages are all about it.  We need an adaptor mechanism that
> overrides ASTExpr.GetObjectProperty to use adaptors to get classes and other
> fields/methods not following javabeans.
>
> I haven't implemented but it's "easy" ;)
>
> Ter
>
> On Dec 20, 2010, at 1:55 PM, Collin Fagan wrote:
>
> Hi Everyone,
>
> I'm a big fan of StringTemplate but I've finally run into something I can't
> do. Basically I would very much like to bridge StringTemplate to java's
> Doclet API (
> http://download.oracle.com/javase/6/docs/technotes/guides/javadoc/doclet/overview.html)
> but the classes in com.sun.javadoc.* do not follow the getter + setter rule.
> They have method names like classes(), methods() and the like. Is there a
> way to override how ST looks for properties? Am I missing something where I
> can just call methods()? My only other options seem to involve lots of
> wrapping (not fun) or pushing everythign into maps (also not fun).
>
> Thanks,
>
> Collin
>
> P.S. I apologize in advance if this subject is well covered someplace else.
>
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20101221/39feefdf/attachment.html 

From parrt at cs.usfca.edu  Tue Dec 21 14:43:03 2010
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue, 21 Dec 2010 14:43:03 -0800
Subject: [stringtemplate-interest] StringTemplate + Doclet
In-Reply-To: <AANLkTinvb6GcJ1w7s0=jcgByXVdXfdZ3FmECbDc1SdTg@mail.gmail.com>
References: <AANLkTimSTL7bsXfUwDdA8N1TJVnbfDz8D-D7d4mUuF4g@mail.gmail.com>
	<2026C4F6-97AF-433A-B057-07D9E00C95D4@cs.usfca.edu>
	<AANLkTinvb6GcJ1w7s0=jcgByXVdXfdZ3FmECbDc1SdTg@mail.gmail.com>
Message-ID: <6131A116-CAD0-470B-BA52-80E74F4B8911@cs.usfca.edu>

we need to add registerModelAdaptor like reg renderer then just look up when we do properties.
T
On Dec 21, 2010, at 12:55 PM, Collin Fagan wrote:

> Thats good news, thanks. I am familiar with the Introspection/Reflection API so let me know if there is anything I can do to help. 
> 
> Collin
> 
> On Tue, Dec 21, 2010 at 12:04 PM, Terence Parr <parrt at cs.usfca.edu> wrote:
> Hi Collin, we have *just* started talking about this :)  In fact previous messages are all about it.  We need an adaptor mechanism that overrides ASTExpr.GetObjectProperty to use adaptors to get classes and other fields/methods not following javabeans.
> 
> I haven't implemented but it's "easy" ;)
> 
> Ter
> 
> On Dec 20, 2010, at 1:55 PM, Collin Fagan wrote:
> 
>> Hi Everyone,
>> 
>> I'm a big fan of StringTemplate but I've finally run into something I can't do. Basically I would very much like to bridge StringTemplate to java's Doclet API (http://download.oracle.com/javase/6/docs/technotes/guides/javadoc/doclet/overview.html) but the classes in com.sun.javadoc.* do not follow the getter + setter rule. They have method names like classes(), methods() and the like. Is there a way to override how ST looks for properties? Am I missing something where I can just call methods()? My only other options seem to involve lots of wrapping (not fun) or pushing everythign into maps (also not fun). 
>> 
>> Thanks,
>> 
>> Collin
>> 
>> P.S. I apologize in advance if this subject is well covered someplace else. 
>> _______________________________________________
>> stringtemplate-interest mailing list
>> stringtemplate-interest at antlr.org
>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
> 
> 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20101221/9118bee2/attachment.html 

From collin.fagan at gmail.com  Tue Dec 21 17:25:21 2010
From: collin.fagan at gmail.com (Collin Fagan)
Date: Tue, 21 Dec 2010 19:25:21 -0600
Subject: [stringtemplate-interest] Embedded error: Error attempting to
	access grammars within grammar file.
Message-ID: <AANLkTi=4kWk=fz9SOVBEnOD3O987jccVugthfZcqfOfo@mail.gmail.com>

I got the sources from github but get an "Embedded error: Error attempting
to access grammars within grammar file." when I try to build.

Is there a page to walk you through building ST? I hate to bother the list
if this is a known issue and documented somewhere.

Thanks

Collin

On Tue, Dec 21, 2010 at 4:43 PM, Terence Parr <parrt at cs.usfca.edu> wrote:

> we need to add registerModelAdaptor like reg renderer then just look up
> when we do properties.
> T
>
> On Dec 21, 2010, at 12:55 PM, Collin Fagan wrote:
>
> Thats good news, thanks. I am familiar with the Introspection/Reflection
> API so let me know if there is anything I can do to help.
>
> Collin
>
> On Tue, Dec 21, 2010 at 12:04 PM, Terence Parr <parrt at cs.usfca.edu> wrote:
>
>> Hi Collin, we have *just* started talking about this :)  In fact previous
>> messages are all about it.  We need an adaptor mechanism that
>> overrides ASTExpr.GetObjectProperty to use adaptors to get classes and other
>> fields/methods not following javabeans.
>>
>> I haven't implemented but it's "easy" ;)
>>
>> Ter
>>
>> On Dec 20, 2010, at 1:55 PM, Collin Fagan wrote:
>>
>> Hi Everyone,
>>
>> I'm a big fan of StringTemplate but I've finally run into something I
>> can't do. Basically I would very much like to bridge StringTemplate to
>> java's Doclet API (
>> http://download.oracle.com/javase/6/docs/technotes/guides/javadoc/doclet/overview.html)
>> but the classes in com.sun.javadoc.* do not follow the getter + setter rule.
>> They have method names like classes(), methods() and the like. Is there a
>> way to override how ST looks for properties? Am I missing something where I
>> can just call methods()? My only other options seem to involve lots of
>> wrapping (not fun) or pushing everythign into maps (also not fun).
>>
>> Thanks,
>>
>> Collin
>>
>> P.S. I apologize in advance if this subject is well covered someplace
>> else.
>> _______________________________________________
>> stringtemplate-interest mailing list
>> stringtemplate-interest at antlr.org
>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>>
>>
>>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20101221/d24dc6ce/attachment.html 
-------------- next part --------------
+ Error stacktraces are turned on.
[INFO] Scanning for projects...
[INFO] ------------------------------------------------------------------------
[INFO] Building ANTLR StringTemplate
[INFO]    task-segment: [clean, install]
[INFO] ------------------------------------------------------------------------
[INFO] [clean:clean {execution: default-clean}]
[INFO] [antlr:generate {execution: default}]
[INFO] ------------------------------------------------------------------------
[ERROR] BUILD ERROR
[INFO] ------------------------------------------------------------------------
[INFO] Unable to build grammar metadata

Embedded error: Error attempting to access grammars within grammar file
[INFO] ------------------------------------------------------------------------
[INFO] Trace
org.apache.maven.lifecycle.LifecycleExecutionException: Unable to build grammar metadata
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoals(DefaultLifecycleExecutor.java:719)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalWithLifecycle(DefaultLifecycleExecutor.java:556)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoal(DefaultLifecycleExecutor.java:535)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalAndHandleFailures(DefaultLifecycleExecutor.java:387)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeTaskSegments(DefaultLifecycleExecutor.java:348)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.execute(DefaultLifecycleExecutor.java:180)
	at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:328)
	at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:138)
	at org.apache.maven.cli.MavenCli.main(MavenCli.java:362)
	at org.apache.maven.cli.compat.CompatibleMain.main(CompatibleMain.java:60)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:315)
	at org.codehaus.classworlds.Launcher.launch(Launcher.java:255)
	at org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:430)
	at org.codehaus.classworlds.Launcher.main(Launcher.java:375)
Caused by: org.apache.maven.plugin.MojoExecutionException: Unable to build grammar metadata
	at org.codehaus.mojo.antlr.metadata.MetadataExtracter.processMetadata(MetadataExtracter.java:165)
	at org.codehaus.mojo.antlr.AbstractAntlrMojo.executeAntlr(AbstractAntlrMojo.java:205)
	at org.codehaus.mojo.antlr.AntlrPlugin.execute(AntlrPlugin.java:48)
	at org.apache.maven.plugin.DefaultPluginManager.executeMojo(DefaultPluginManager.java:490)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoals(DefaultLifecycleExecutor.java:694)
	... 17 more
Caused by: org.apache.maven.plugin.MojoExecutionException: Error attempting to access grammars within grammar file
	at org.codehaus.mojo.antlr.metadata.MetadataExtracter.intrepretMetadata(MetadataExtracter.java:211)
	at org.codehaus.mojo.antlr.metadata.MetadataExtracter.processMetadata(MetadataExtracter.java:160)
	... 21 more
Caused by: org.apache.maven.plugin.MojoExecutionException: Error accessing  Antlr grammar metadata
	at org.codehaus.mojo.antlr.metadata.MetadataExtracter.intrepret(MetadataExtracter.java:274)
	at org.codehaus.mojo.antlr.metadata.MetadataExtracter.intrepretMetadata(MetadataExtracter.java:206)
	... 22 more
Caused by: java.lang.NullPointerException
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.codehaus.mojo.antlr.metadata.MetadataExtracter.intrepret(MetadataExtracter.java:242)
	... 23 more
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 2 seconds
[INFO] Finished at: Tue Dec 21 19:15:41 CST 2010
[INFO] Final Memory: 9M/17M
[INFO] ------------------------------------------------------------------------

From parrt at cs.usfca.edu  Tue Dec 21 17:28:27 2010
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue, 21 Dec 2010 17:28:27 -0800
Subject: [stringtemplate-interest] Embedded error: Error attempting to
	access grammars within grammar file.
In-Reply-To: <AANLkTi=4kWk=fz9SOVBEnOD3O987jccVugthfZcqfOfo@mail.gmail.com>
References: <AANLkTi=4kWk=fz9SOVBEnOD3O987jccVugthfZcqfOfo@mail.gmail.com>
Message-ID: <98A1A787-CEB0-4E6C-BFAA-9372D652D45D@cs.usfca.edu>

Not sure how up github is. try here:

http://www.stringtemplate.org/depot/ST3/java/main/target

Ter
On Dec 21, 2010, at 5:25 PM, Collin Fagan wrote:

> I got the sources from github but get an "Embedded error: Error attempting to access grammars within grammar file." when I try to build.
> 
> Is there a page to walk you through building ST? I hate to bother the list if this is a known issue and documented somewhere. 
> 
> Thanks
> 
> Collin
> 
> On Tue, Dec 21, 2010 at 4:43 PM, Terence Parr <parrt at cs.usfca.edu> wrote:
> we need to add registerModelAdaptor like reg renderer then just look up when we do properties.
> T
> 
> On Dec 21, 2010, at 12:55 PM, Collin Fagan wrote:
> 
>> Thats good news, thanks. I am familiar with the Introspection/Reflection API so let me know if there is anything I can do to help. 
>> 
>> Collin
>> 
>> On Tue, Dec 21, 2010 at 12:04 PM, Terence Parr <parrt at cs.usfca.edu> wrote:
>> Hi Collin, we have *just* started talking about this :)  In fact previous messages are all about it.  We need an adaptor mechanism that overrides ASTExpr.GetObjectProperty to use adaptors to get classes and other fields/methods not following javabeans.
>> 
>> I haven't implemented but it's "easy" ;)
>> 
>> Ter
>> 
>> On Dec 20, 2010, at 1:55 PM, Collin Fagan wrote:
>> 
>>> Hi Everyone,
>>> 
>>> I'm a big fan of StringTemplate but I've finally run into something I can't do. Basically I would very much like to bridge StringTemplate to java's Doclet API (http://download.oracle.com/javase/6/docs/technotes/guides/javadoc/doclet/overview.html) but the classes in com.sun.javadoc.* do not follow the getter + setter rule. They have method names like classes(), methods() and the like. Is there a way to override how ST looks for properties? Am I missing something where I can just call methods()? My only other options seem to involve lots of wrapping (not fun) or pushing everythign into maps (also not fun). 
>>> 
>>> Thanks,
>>> 
>>> Collin
>>> 
>>> P.S. I apologize in advance if this subject is well covered someplace else. 
>>> _______________________________________________
>>> stringtemplate-interest mailing list
>>> stringtemplate-interest at antlr.org
>>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>> 
>> 
> 
> 
> <mvn-out.txt>_______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20101221/50f57518/attachment-0001.html 

From parrt at cs.usfca.edu  Tue Dec 21 17:50:34 2010
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue, 21 Dec 2010 17:50:34 -0800
Subject: [stringtemplate-interest] it, i, i0 for ST v4
Message-ID: <F26A0BAE-68CD-4AAC-B5FE-8AB28AEC272C@cs.usfca.edu>

hiya! So, v4 is going to require template argument defs like:

bold(x) ::= "<b>$b$</b>"

That means that "it" iteration value is not necessary; we'll define an arg:

<names:{ n | hi <n>}>

Dynamic scoping means we can see all the way up the enclosing template chain. That means we might see an "it" we don't expect.  A few recent posts about how to get at the correct version of "it" in nested templates.  problem solved.  you name the iteration value.

BUT, we still need i and i0 integer indexes.  Same issue. 

<names:{ n | <i>. <n>}>

gives

1. Ter
2. Tom
3. Sri
...

Perhaps they are only defined by those lambda-like anonymous templates?  It's weird/confusing if you can see i in another template:

<names:foo()>

then:

foo(n) ::= "<i>. <n>" // where does i come from!??!

What about NESTED templates though?  Here is how to dump out chapters and sections for a table of contents:

<chapters:{c | <i> Chapter <c.name> <c.sections:{s | <i><i>. <s.name>}>}>

But, what does "<i><i>" mean?  First i should be chapter.

Anybody have any ideas?  super.i is wrong. The only idea i had was to let people name the indexes, but how?

<chapters:{c,ci=i | <ci> Chapter <c.name> <c.sections:{s | <ci><i>. <s.name>}>}>

So, like a default argument value, we name our index so nested can see ci.

Hmm...that ain't bad I guess.  Any complaints?

Ter

From collin.fagan at gmail.com  Tue Dec 21 18:19:26 2010
From: collin.fagan at gmail.com (Collin Fagan)
Date: Tue, 21 Dec 2010 20:19:26 -0600
Subject: [stringtemplate-interest] it, i, i0 for ST v4
In-Reply-To: <F26A0BAE-68CD-4AAC-B5FE-8AB28AEC272C@cs.usfca.edu>
References: <F26A0BAE-68CD-4AAC-B5FE-8AB28AEC272C@cs.usfca.edu>
Message-ID: <AANLkTimmWiANtPLRkdFrz-vEc+cazh64wS9HndQighdr@mail.gmail.com>

How about an "indexOf" operator that you can apply to the named var to get
the index value?

Example 1: @i

<chapters:{c| <c at i> Chapter <c.name> <c.sections:{s | <c at i><s at i>. <s.name
>}>}>

Example 2: #i

<chapters:{c| <c#i> Chapter <c.name> <c.sections:{s | <c#i><s#i>. <s.name
>}>}>

I don't know what looks best, just an idea.

Collin

On Tue, Dec 21, 2010 at 7:50 PM, Terence Parr <parrt at cs.usfca.edu> wrote:

> hiya! So, v4 is going to require template argument defs like:
>
> bold(x) ::= "<b>$b$</b>"
>
> That means that "it" iteration value is not necessary; we'll define an arg:
>
> <names:{ n | hi <n>}>
>
> Dynamic scoping means we can see all the way up the enclosing template
> chain. That means we might see an "it" we don't expect.  A few recent posts
> about how to get at the correct version of "it" in nested templates.
>  problem solved.  you name the iteration value.
>
> BUT, we still need i and i0 integer indexes.  Same issue.
>
> <names:{ n | <i>. <n>}>
>
> gives
>
> 1. Ter
> 2. Tom
> 3. Sri
> ...
>
> Perhaps they are only defined by those lambda-like anonymous templates?
>  It's weird/confusing if you can see i in another template:
>
> <names:foo()>
>
> then:
>
> foo(n) ::= "<i>. <n>" // where does i come from!??!
>
> What about NESTED templates though?  Here is how to dump out chapters and
> sections for a table of contents:
>
> <chapters:{c | <i> Chapter <c.name> <c.sections:{s | <i><i>. <s.name>}>}>
>
> But, what does "<i><i>" mean?  First i should be chapter.
>
> Anybody have any ideas?  super.i is wrong. The only idea i had was to let
> people name the indexes, but how?
>
> <chapters:{c,ci=i | <ci> Chapter <c.name> <c.sections:{s | <ci><i>. <
> s.name>}>}>
>
> So, like a default argument value, we name our index so nested can see ci.
>
> Hmm...that ain't bad I guess.  Any complaints?
>
> Ter
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20101221/454eac49/attachment.html 

From parrt at cs.usfca.edu  Tue Dec 21 20:19:38 2010
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue, 21 Dec 2010 20:19:38 -0800
Subject: [stringtemplate-interest] it, i, i0 for ST v4
In-Reply-To: <AANLkTimmWiANtPLRkdFrz-vEc+cazh64wS9HndQighdr@mail.gmail.com>
References: <F26A0BAE-68CD-4AAC-B5FE-8AB28AEC272C@cs.usfca.edu>
	<AANLkTimmWiANtPLRkdFrz-vEc+cazh64wS9HndQighdr@mail.gmail.com>
Message-ID: <7416027E-D217-42DA-9741-59499F4174D6@cs.usfca.edu>

An interesting idea... but I'm starting to think that requiring another template def is ok:

<chapters:{c | <i> Chapter <c.name> <sec(c.sections, i)>}>

sec(sections, ci) ::= "<sections:{s | <ci><i>. <s.name>}>"

much simpler than allowing default args in "lambdas".  Not as pretty but it's not a super common thing I'd say to need multiple i's.

Ter
On Dec 21, 2010, at 6:19 PM, Collin Fagan wrote:

> How about an "indexOf" operator that you can apply to the named var to get the index value?
> 
> Example 1: @i
> 
> <chapters:{c| <c at i> Chapter <c.name> <c.sections:{s | <c at i><s at i>. <s.name>}>}>
> 
> Example 2: #i
> 
> <chapters:{c| <c#i> Chapter <c.name> <c.sections:{s | <c#i><s#i>. <s.name>}>}>
> 
> I don't know what looks best, just an idea.
> 
> Collin
> 
> On Tue, Dec 21, 2010 at 7:50 PM, Terence Parr <parrt at cs.usfca.edu> wrote:
> hiya! So, v4 is going to require template argument defs like:
> 
> bold(x) ::= "<b>$b$</b>"
> 
> That means that "it" iteration value is not necessary; we'll define an arg:
> 
> <names:{ n | hi <n>}>
> 
> Dynamic scoping means we can see all the way up the enclosing template chain. That means we might see an "it" we don't expect.  A few recent posts about how to get at the correct version of "it" in nested templates.  problem solved.  you name the iteration value.
> 
> BUT, we still need i and i0 integer indexes.  Same issue.
> 
> <names:{ n | <i>. <n>}>
> 
> gives
> 
> 1. Ter
> 2. Tom
> 3. Sri
> ...
> 
> Perhaps they are only defined by those lambda-like anonymous templates?  It's weird/confusing if you can see i in another template:
> 
> <names:foo()>
> 
> then:
> 
> foo(n) ::= "<i>. <n>" // where does i come from!??!
> 
> What about NESTED templates though?  Here is how to dump out chapters and sections for a table of contents:
> 
> <chapters:{c | <i> Chapter <c.name> <c.sections:{s | <i><i>. <s.name>}>}>
> 
> But, what does "<i><i>" mean?  First i should be chapter.
> 
> Anybody have any ideas?  super.i is wrong. The only idea i had was to let people name the indexes, but how?
> 
> <chapters:{c,ci=i | <ci> Chapter <c.name> <c.sections:{s | <ci><i>. <s.name>}>}>
> 
> So, like a default argument value, we name our index so nested can see ci.
> 
> Hmm...that ain't bad I guess.  Any complaints?
> 
> Ter
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
> 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20101221/4a7c7aa9/attachment.html 

From sharwell at pixelminegames.com  Tue Dec 21 20:22:48 2010
From: sharwell at pixelminegames.com (Sam Harwell)
Date: Tue, 21 Dec 2010 22:22:48 -0600
Subject: [stringtemplate-interest] it, i, i0 for ST v4
In-Reply-To: <F26A0BAE-68CD-4AAC-B5FE-8AB28AEC272C@cs.usfca.edu>
References: <F26A0BAE-68CD-4AAC-B5FE-8AB28AEC272C@cs.usfca.edu>
Message-ID: <011f01cba18f$e46af080$ad40d180$@pixelminegames.com>

For your chapters/sections example, I currently use an intermediate:

chapter(c,i) ::= "<i> Chapter <c.name> <sections(c,ci=i)>"
sections(c,ci) ::= "<c.sections:{s|<ci><i>.<s.name>}>"

This whole issue is an edge case of a larger "problem" I'm facing - I wish
that templates with one unassigned argument could be used any place a
template with a single arg can be used. From your bold(x) example, what I
mean is this:

format(tag,x) ::= "<$tag$>$x$</$tag$>"

<names:format(tag="b")>

The anonymous template version this is exactly what you suggested, with
exactly 1 named but unassigned parameter and 0 or more named assignments.

Sam

-----Original Message-----
From: stringtemplate-interest-bounces at antlr.org
[mailto:stringtemplate-interest-bounces at antlr.org] On Behalf Of Terence Parr
Sent: Tuesday, December 21, 2010 7:51 PM
To: stringtemplate-interest List
Subject: [stringtemplate-interest] it, i, i0 for ST v4

hiya! So, v4 is going to require template argument defs like:

bold(x) ::= "<b>$b$</b>"

That means that "it" iteration value is not necessary; we'll define an arg:

<names:{ n | hi <n>}>

Dynamic scoping means we can see all the way up the enclosing template
chain. That means we might see an "it" we don't expect.  A few recent posts
about how to get at the correct version of "it" in nested templates.
problem solved.  you name the iteration value.

BUT, we still need i and i0 integer indexes.  Same issue. 

<names:{ n | <i>. <n>}>

gives

1. Ter
2. Tom
3. Sri
...

Perhaps they are only defined by those lambda-like anonymous templates?
It's weird/confusing if you can see i in another template:

<names:foo()>

then:

foo(n) ::= "<i>. <n>" // where does i come from!??!

What about NESTED templates though?  Here is how to dump out chapters and
sections for a table of contents:

<chapters:{c | <i> Chapter <c.name> <c.sections:{s | <i><i>. <s.name>}>}>

But, what does "<i><i>" mean?  First i should be chapter.

Anybody have any ideas?  super.i is wrong. The only idea i had was to let
people name the indexes, but how?

<chapters:{c,ci=i | <ci> Chapter <c.name> <c.sections:{s | <ci><i>.
<s.name>}>}>

So, like a default argument value, we name our index so nested can see ci.

Hmm...that ain't bad I guess.  Any complaints?

Ter
_______________________________________________
stringtemplate-interest mailing list
stringtemplate-interest at antlr.org
http://www.antlr.org/mailman/listinfo/stringtemplate-interest


From parrt at cs.usfca.edu  Tue Dec 21 20:57:34 2010
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue, 21 Dec 2010 20:57:34 -0800
Subject: [stringtemplate-interest] it, i, i0 for ST v4
In-Reply-To: <011f01cba18f$e46af080$ad40d180$@pixelminegames.com>
References: <F26A0BAE-68CD-4AAC-B5FE-8AB28AEC272C@cs.usfca.edu>
	<011f01cba18f$e46af080$ad40d180$@pixelminegames.com>
Message-ID: <BA1A0126-935D-4C18-9BBA-1C9E2F8BDEE2@cs.usfca.edu>


On Dec 21, 2010, at 8:22 PM, Sam Harwell wrote:
> This whole issue is an edge case of a larger "problem" I'm facing - I wish
> that templates with one unassigned argument could be used any place a
> template with a single arg can be used. From your bold(x) example, what I
> mean is this:
> 
> format(tag,x) ::= "<$tag$>$x$</$tag$>"
> 
> <names:format(tag="b")>
> 
> The anonymous template version this is exactly what you suggested, with
> exactly 1 named but unassigned parameter and 0 or more named assignments.

That is exactly how v4 works :)  First arg(s) get values. 'cept no names:

<names:format("b")>

T

From parrt at cs.usfca.edu  Tue Dec 21 21:07:12 2010
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue, 21 Dec 2010 21:07:12 -0800
Subject: [stringtemplate-interest] it, i, i0 for ST v4
In-Reply-To: <BA1A0126-935D-4C18-9BBA-1C9E2F8BDEE2@cs.usfca.edu>
References: <F26A0BAE-68CD-4AAC-B5FE-8AB28AEC272C@cs.usfca.edu>
	<011f01cba18f$e46af080$ad40d180$@pixelminegames.com>
	<BA1A0126-935D-4C18-9BBA-1C9E2F8BDEE2@cs.usfca.edu>
Message-ID: <B85473EA-5460-455B-AE5F-173CFCE5804F@cs.usfca.edu>

oh, in your case you'd want:

format(x, tag) ::= "..."

Ter

On Dec 21, 2010, at 8:57 PM, Terence Parr wrote:

> 
> On Dec 21, 2010, at 8:22 PM, Sam Harwell wrote:
>> This whole issue is an edge case of a larger "problem" I'm facing - I wish
>> that templates with one unassigned argument could be used any place a
>> template with a single arg can be used. From your bold(x) example, what I
>> mean is this:
>> 
>> format(tag,x) ::= "<$tag$>$x$</$tag$>"
>> 
>> <names:format(tag="b")>
>> 
>> The anonymous template version this is exactly what you suggested, with
>> exactly 1 named but unassigned parameter and 0 or more named assignments.
> 
> That is exactly how v4 works :)  First arg(s) get values. 'cept no names:
> 
> <names:format("b")>
> 
> T
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest


From bmc at clapper.org  Wed Dec 22 09:38:49 2010
From: bmc at clapper.org (Brian Clapper)
Date: Wed, 22 Dec 2010 12:38:49 -0500
Subject: [stringtemplate-interest] StringTemplate + Doclet
In-Reply-To: <6131A116-CAD0-470B-BA52-80E74F4B8911@cs.usfca.edu>
References: <AANLkTimSTL7bsXfUwDdA8N1TJVnbfDz8D-D7d4mUuF4g@mail.gmail.com>	<2026C4F6-97AF-433A-B057-07D9E00C95D4@cs.usfca.edu>	<AANLkTinvb6GcJ1w7s0=jcgByXVdXfdZ3FmECbDc1SdTg@mail.gmail.com>
	<6131A116-CAD0-470B-BA52-80E74F4B8911@cs.usfca.edu>
Message-ID: <4D1237A9.4000203@clapper.org>

On 12/21/10 5:43 PM, Terence Parr wrote:
> we need to add registerModelAdaptor like reg renderer then just look up when we
> do properties.

I'm very interested in how this debate pans out. I wrote a Scala front-end to
StringTemplate, called Scalasti (http://software.clapper.org/scalasti/). To
support a more Scala-like interface (i.e., the ability to put Scala objects
into a template, without requiring that they adhere to a Java Bean accessor
contract), I ended up using ASM to generate interfaces on the fly, which I then
implement via java.lang.reflect.Proxy.

If there were a more official mechanism supported by the StringTemplate API, I
could dispense with that approach.
-- 
-Brian

Brian Clapper, http://www.clapper.org/bmc/

From parrt at cs.usfca.edu  Wed Dec 22 09:46:16 2010
From: parrt at cs.usfca.edu (Terence Parr)
Date: Wed, 22 Dec 2010 09:46:16 -0800
Subject: [stringtemplate-interest] StringTemplate + Doclet
In-Reply-To: <4D1237A9.4000203@clapper.org>
References: <AANLkTimSTL7bsXfUwDdA8N1TJVnbfDz8D-D7d4mUuF4g@mail.gmail.com>	<2026C4F6-97AF-433A-B057-07D9E00C95D4@cs.usfca.edu>	<AANLkTinvb6GcJ1w7s0=jcgByXVdXfdZ3FmECbDc1SdTg@mail.gmail.com>
	<6131A116-CAD0-470B-BA52-80E74F4B8911@cs.usfca.edu>
	<4D1237A9.4000203@clapper.org>
Message-ID: <651596B8-525B-490B-B0BE-3F31B949E82F@cs.usfca.edu>

I may try this out today (for v4 and backpatch to v3) :)
Ter
On Dec 22, 2010, at 9:38 AM, Brian Clapper wrote:

> On 12/21/10 5:43 PM, Terence Parr wrote:
>> we need to add registerModelAdaptor like reg renderer then just look up when we
>> do properties.
> 
> I'm very interested in how this debate pans out. I wrote a Scala front-end to
> StringTemplate, called Scalasti (http://software.clapper.org/scalasti/). To
> support a more Scala-like interface (i.e., the ability to put Scala objects
> into a template, without requiring that they adhere to a Java Bean accessor
> contract), I ended up using ASM to generate interfaces on the fly, which I then
> implement via java.lang.reflect.Proxy.
> 
> If there were a more official mechanism supported by the StringTemplate API, I
> could dispense with that approach.
> -- 
> -Brian
> 
> Brian Clapper, http://www.clapper.org/bmc/
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest


From parrt at cs.usfca.edu  Wed Dec 22 09:51:50 2010
From: parrt at cs.usfca.edu (Terence Parr)
Date: Wed, 22 Dec 2010 09:51:50 -0800
Subject: [stringtemplate-interest] StringTemplate + Doclet
In-Reply-To: <4D1237A9.4000203@clapper.org>
References: <AANLkTimSTL7bsXfUwDdA8N1TJVnbfDz8D-D7d4mUuF4g@mail.gmail.com>	<2026C4F6-97AF-433A-B057-07D9E00C95D4@cs.usfca.edu>	<AANLkTinvb6GcJ1w7s0=jcgByXVdXfdZ3FmECbDc1SdTg@mail.gmail.com>
	<6131A116-CAD0-470B-BA52-80E74F4B8911@cs.usfca.edu>
	<4D1237A9.4000203@clapper.org>
Message-ID: <9FF144A5-B1CF-45C7-9960-873AF7B4814C@cs.usfca.edu>


On Dec 22, 2010, at 9:38 AM, Brian Clapper wrote:
>> contract), I ended up using ASM to generate interfaces on the fly, which I then
> implement via java.lang.reflect.Proxy.

BTW, for renderers i did == on obj.getClass() not instanceof (which only works on class names not Class ptrs).  Is it a serious problem if i don't allow instanceof?  Maybe if the model object is hidden by interfaces like jdbc. hmm... i'd rather avoid the java.lang.reflect.Proxy stuff.

Ter
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20101222/080a73dd/attachment.html 

From bmc at clapper.org  Wed Dec 22 10:01:21 2010
From: bmc at clapper.org (Brian Clapper)
Date: Wed, 22 Dec 2010 13:01:21 -0500
Subject: [stringtemplate-interest] StringTemplate + Doclet
In-Reply-To: <9FF144A5-B1CF-45C7-9960-873AF7B4814C@cs.usfca.edu>
References: <AANLkTimSTL7bsXfUwDdA8N1TJVnbfDz8D-D7d4mUuF4g@mail.gmail.com>	<2026C4F6-97AF-433A-B057-07D9E00C95D4@cs.usfca.edu>	<AANLkTinvb6GcJ1w7s0=jcgByXVdXfdZ3FmECbDc1SdTg@mail.gmail.com>	<6131A116-CAD0-470B-BA52-80E74F4B8911@cs.usfca.edu>	<4D1237A9.4000203@clapper.org>
	<9FF144A5-B1CF-45C7-9960-873AF7B4814C@cs.usfca.edu>
Message-ID: <4D123CF1.9060009@clapper.org>

On 12/22/10 12:51 PM, Terence Parr wrote:
> 
> On Dec 22, 2010, at 9:38 AM, Brian Clapper wrote:
>>> contract), I ended up using ASM to generate interfaces on the fly, which I then
>> implement via java.lang.reflect.Proxy.
> 
> BTW, for renderers i did == on obj.getClass() not instanceof (which only works
> on class names not Class ptrs).  Is it a serious problem if i don't allow
> instanceof?  Maybe if the model object is hidden by interfaces like jdbc.
> hmm... i'd rather avoid the java.lang.reflect.Proxy stuff.

I don't use instanceof, so it won't affect me.

I deliberately chose java.lang.reflect.Proxy, for a couple reasons. First,
generating the byte code for an interface, via ASM, is straightforward and
simple. Generating a wrapper class, on the other hand, is more complicated and
annoying. Second, using Proxy to implement an interface on the fly is also
straightforward.

This technique allows for more maintainable code, in my opinion. If I'm going
to resort to generating byte code on the fly, I'd like that part of the
solution to be a dead-simple as possible. Use of Proxy made that possible. If I
weren't generating the byte code for the wrapper interface on the fly, I
wouldn't be using Proxy at all.

If I could get rid of byte code generation entirely, it'd be a real win.
-- 
-Brian

Brian Clapper, http://www.clapper.org/bmc/

From parrt at cs.usfca.edu  Wed Dec 22 10:06:25 2010
From: parrt at cs.usfca.edu (Terence Parr)
Date: Wed, 22 Dec 2010 10:06:25 -0800
Subject: [stringtemplate-interest] StringTemplate + Doclet
In-Reply-To: <4D123CF1.9060009@clapper.org>
References: <AANLkTimSTL7bsXfUwDdA8N1TJVnbfDz8D-D7d4mUuF4g@mail.gmail.com>	<2026C4F6-97AF-433A-B057-07D9E00C95D4@cs.usfca.edu>	<AANLkTinvb6GcJ1w7s0=jcgByXVdXfdZ3FmECbDc1SdTg@mail.gmail.com>	<6131A116-CAD0-470B-BA52-80E74F4B8911@cs.usfca.edu>	<4D1237A9.4000203@clapper.org>
	<9FF144A5-B1CF-45C7-9960-873AF7B4814C@cs.usfca.edu>
	<4D123CF1.9060009@clapper.org>
Message-ID: <52CFA26C-C5E7-41EB-A27E-62D1629E2E0E@cs.usfca.edu>

Seems like I could do instanceof by just walking the Class.superClass/implements chain, right?  I'm not considering generating code; makes it hard to port ;)
Ter
On Dec 22, 2010, at 10:01 AM, Brian Clapper wrote:

> On 12/22/10 12:51 PM, Terence Parr wrote:
>> 
>> On Dec 22, 2010, at 9:38 AM, Brian Clapper wrote:
>>>> contract), I ended up using ASM to generate interfaces on the fly, which I then
>>> implement via java.lang.reflect.Proxy.
>> 
>> BTW, for renderers i did == on obj.getClass() not instanceof (which only works
>> on class names not Class ptrs).  Is it a serious problem if i don't allow
>> instanceof?  Maybe if the model object is hidden by interfaces like jdbc.
>> hmm... i'd rather avoid the java.lang.reflect.Proxy stuff.
> 
> I don't use instanceof, so it won't affect me.
> 
> I deliberately chose java.lang.reflect.Proxy, for a couple reasons. First,
> generating the byte code for an interface, via ASM, is straightforward and
> simple. Generating a wrapper class, on the other hand, is more complicated and
> annoying. Second, using Proxy to implement an interface on the fly is also
> straightforward.
> 
> This technique allows for more maintainable code, in my opinion. If I'm going
> to resort to generating byte code on the fly, I'd like that part of the
> solution to be a dead-simple as possible. Use of Proxy made that possible. If I
> weren't generating the byte code for the wrapper interface on the fly, I
> wouldn't be using Proxy at all.
> 
> If I could get rid of byte code generation entirely, it'd be a real win.
> -- 
> -Brian
> 
> Brian Clapper, http://www.clapper.org/bmc/
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest


From rafael at alphasimple.com  Wed Dec 22 10:47:36 2010
From: rafael at alphasimple.com (Rafael Chaves)
Date: Wed, 22 Dec 2010 10:47:36 -0800
Subject: [stringtemplate-interest] StringTemplate + Doclet
In-Reply-To: <52CFA26C-C5E7-41EB-A27E-62D1629E2E0E@cs.usfca.edu>
References: <AANLkTimSTL7bsXfUwDdA8N1TJVnbfDz8D-D7d4mUuF4g@mail.gmail.com>
	<2026C4F6-97AF-433A-B057-07D9E00C95D4@cs.usfca.edu>
	<AANLkTinvb6GcJ1w7s0=jcgByXVdXfdZ3FmECbDc1SdTg@mail.gmail.com>
	<6131A116-CAD0-470B-BA52-80E74F4B8911@cs.usfca.edu>
	<4D1237A9.4000203@clapper.org>
	<9FF144A5-B1CF-45C7-9960-873AF7B4814C@cs.usfca.edu>
	<4D123CF1.9060009@clapper.org>
	<52CFA26C-C5E7-41EB-A27E-62D1629E2E0E@cs.usfca.edu>
Message-ID: <AANLkTikM5CNdgPH+UQJSmoCF-j7+52wN8LSSBFFw=c47@mail.gmail.com>

For any interface based API (which is a common practice), getClass()
is a show stopper. A client of the API does not know the actual
classes involved (they are not API).

I was not suggesting actually using the instanceof operator (I am not
sure you really meant that, as it is not really possible), but
Class.isInstanceOf(object). A similar thing would be
Class.isAssignableFrom(object.getClass()).

Cheers,

Rafael

On Wed, Dec 22, 2010 at 10:06 AM, Terence Parr <parrt at cs.usfca.edu> wrote:
> Seems like I could do instanceof by just walking the Class.superClass/implements chain, right? ?I'm not considering generating code; makes it hard to port ;)
> Ter
> On Dec 22, 2010, at 10:01 AM, Brian Clapper wrote:
>
>> On 12/22/10 12:51 PM, Terence Parr wrote:
>>>
>>> On Dec 22, 2010, at 9:38 AM, Brian Clapper wrote:
>>>>> contract), I ended up using ASM to generate interfaces on the fly, which I then
>>>> implement via java.lang.reflect.Proxy.
>>>
>>> BTW, for renderers i did == on obj.getClass() not instanceof (which only works
>>> on class names not Class ptrs). ?Is it a serious problem if i don't allow
>>> instanceof? ?Maybe if the model object is hidden by interfaces like jdbc.
>>> hmm... i'd rather avoid the java.lang.reflect.Proxy stuff.
>>
>> I don't use instanceof, so it won't affect me.
>>
>> I deliberately chose java.lang.reflect.Proxy, for a couple reasons. First,
>> generating the byte code for an interface, via ASM, is straightforward and
>> simple. Generating a wrapper class, on the other hand, is more complicated and
>> annoying. Second, using Proxy to implement an interface on the fly is also
>> straightforward.
>>
>> This technique allows for more maintainable code, in my opinion. If I'm going
>> to resort to generating byte code on the fly, I'd like that part of the
>> solution to be a dead-simple as possible. Use of Proxy made that possible. If I
>> weren't generating the byte code for the wrapper interface on the fly, I
>> wouldn't be using Proxy at all.
>>
>> If I could get rid of byte code generation entirely, it'd be a real win.
>> --
>> -Brian
>>
>> Brian Clapper, http://www.clapper.org/bmc/
>> _______________________________________________
>> stringtemplate-interest mailing list
>> stringtemplate-interest at antlr.org
>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>

From sharwell at pixelminegames.com  Wed Dec 22 11:39:04 2010
From: sharwell at pixelminegames.com (Sam Harwell)
Date: Wed, 22 Dec 2010 13:39:04 -0600
Subject: [stringtemplate-interest] StringTemplate + Doclet
In-Reply-To: <AANLkTikM5CNdgPH+UQJSmoCF-j7+52wN8LSSBFFw=c47@mail.gmail.com>
References: <AANLkTimSTL7bsXfUwDdA8N1TJVnbfDz8D-D7d4mUuF4g@mail.gmail.com>	<2026C4F6-97AF-433A-B057-07D9E00C95D4@cs.usfca.edu>	<AANLkTinvb6GcJ1w7s0=jcgByXVdXfdZ3FmECbDc1SdTg@mail.gmail.com>	<6131A116-CAD0-470B-BA52-80E74F4B8911@cs.usfca.edu>	<4D1237A9.4000203@clapper.org>	<9FF144A5-B1CF-45C7-9960-873AF7B4814C@cs.usfca.edu>	<4D123CF1.9060009@clapper.org>	<52CFA26C-C5E7-41EB-A27E-62D1629E2E0E@cs.usfca.edu>
	<AANLkTikM5CNdgPH+UQJSmoCF-j7+52wN8LSSBFFw=c47@mail.gmail.com>
Message-ID: <017101cba20f$e4a55240$adeff6c0$@pixelminegames.com>

My implementation of TypeRegistry<T> in the C# port of StringTemplate uses
IsAssignableFrom with caching that is nearly as fast as using
a.GetType()==b.GetType(). Per my email on 12/14, I was hoping this would get
ported to the Java version. I'm using this proxy implementation for a major
task in a project I'm working, and I'm quite happy with the way it turned
out. That said, using IsAssignableFrom was absolutely essential for it to
work properly.

Sam

-----Original Message-----
From: stringtemplate-interest-bounces at antlr.org
[mailto:stringtemplate-interest-bounces at antlr.org] On Behalf Of Rafael
Chaves
Sent: Wednesday, December 22, 2010 12:48 PM
To: stringtemplate-interest at antlr.org
Subject: Re: [stringtemplate-interest] StringTemplate + Doclet

For any interface based API (which is a common practice), getClass() is a
show stopper. A client of the API does not know the actual classes involved
(they are not API).

I was not suggesting actually using the instanceof operator (I am not sure
you really meant that, as it is not really possible), but
Class.isInstanceOf(object). A similar thing would be
Class.isAssignableFrom(object.getClass()).

Cheers,

Rafael



From parrt at cs.usfca.edu  Wed Dec 22 11:43:41 2010
From: parrt at cs.usfca.edu (Terence Parr)
Date: Wed, 22 Dec 2010 11:43:41 -0800
Subject: [stringtemplate-interest] StringTemplate + Doclet
In-Reply-To: <AANLkTikM5CNdgPH+UQJSmoCF-j7+52wN8LSSBFFw=c47@mail.gmail.com>
References: <AANLkTimSTL7bsXfUwDdA8N1TJVnbfDz8D-D7d4mUuF4g@mail.gmail.com>
	<2026C4F6-97AF-433A-B057-07D9E00C95D4@cs.usfca.edu>
	<AANLkTinvb6GcJ1w7s0=jcgByXVdXfdZ3FmECbDc1SdTg@mail.gmail.com>
	<6131A116-CAD0-470B-BA52-80E74F4B8911@cs.usfca.edu>
	<4D1237A9.4000203@clapper.org>
	<9FF144A5-B1CF-45C7-9960-873AF7B4814C@cs.usfca.edu>
	<4D123CF1.9060009@clapper.org>
	<52CFA26C-C5E7-41EB-A27E-62D1629E2E0E@cs.usfca.edu>
	<AANLkTikM5CNdgPH+UQJSmoCF-j7+52wN8LSSBFFw=c47@mail.gmail.com>
Message-ID: <7ADCC832-8BCC-4041-AFD0-25860C4671E4@cs.usfca.edu>

Ah. right! Class.isAssignableFrom is the ticket.

@Sam, caching. you mean recording each o.getClass() -> isAssignableFrom mapping?

Seems I should upgrade regiserRenderer too...grr...

Ter
On Dec 22, 2010, at 10:47 AM, Rafael Chaves wrote:

> For any interface based API (which is a common practice), getClass()
> is a show stopper. A client of the API does not know the actual
> classes involved (they are not API).
> 
> I was not suggesting actually using the instanceof operator (I am not
> sure you really meant that, as it is not really possible), but
> Class.isInstanceOf(object). A similar thing would be
> Class.isAssignableFrom(object.getClass()).
> 
> Cheers,
> 
> Rafael
> 
> On Wed, Dec 22, 2010 at 10:06 AM, Terence Parr <parrt at cs.usfca.edu> wrote:
>> Seems like I could do instanceof by just walking the Class.superClass/implements chain, right?  I'm not considering generating code; makes it hard to port ;)
>> Ter
>> On Dec 22, 2010, at 10:01 AM, Brian Clapper wrote:
>> 
>>> On 12/22/10 12:51 PM, Terence Parr wrote:
>>>> 
>>>> On Dec 22, 2010, at 9:38 AM, Brian Clapper wrote:
>>>>>> contract), I ended up using ASM to generate interfaces on the fly, which I then
>>>>> implement via java.lang.reflect.Proxy.
>>>> 
>>>> BTW, for renderers i did == on obj.getClass() not instanceof (which only works
>>>> on class names not Class ptrs).  Is it a serious problem if i don't allow
>>>> instanceof?  Maybe if the model object is hidden by interfaces like jdbc.
>>>> hmm... i'd rather avoid the java.lang.reflect.Proxy stuff.
>>> 
>>> I don't use instanceof, so it won't affect me.
>>> 
>>> I deliberately chose java.lang.reflect.Proxy, for a couple reasons. First,
>>> generating the byte code for an interface, via ASM, is straightforward and
>>> simple. Generating a wrapper class, on the other hand, is more complicated and
>>> annoying. Second, using Proxy to implement an interface on the fly is also
>>> straightforward.
>>> 
>>> This technique allows for more maintainable code, in my opinion. If I'm going
>>> to resort to generating byte code on the fly, I'd like that part of the
>>> solution to be a dead-simple as possible. Use of Proxy made that possible. If I
>>> weren't generating the byte code for the wrapper interface on the fly, I
>>> wouldn't be using Proxy at all.
>>> 
>>> If I could get rid of byte code generation entirely, it'd be a real win.
>>> --
>>> -Brian
>>> 
>>> Brian Clapper, http://www.clapper.org/bmc/
>>> _______________________________________________
>>> stringtemplate-interest mailing list
>>> stringtemplate-interest at antlr.org
>>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>> 
>> _______________________________________________
>> stringtemplate-interest mailing list
>> stringtemplate-interest at antlr.org
>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>> 
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest


From parrt at cs.usfca.edu  Wed Dec 22 12:06:08 2010
From: parrt at cs.usfca.edu (Terence Parr)
Date: Wed, 22 Dec 2010 12:06:08 -0800
Subject: [stringtemplate-interest] follow @the_antlr_guy for news
Message-ID: <7DA4B25F-8D8C-477F-9702-9D9DC858AE12@cs.usfca.edu>

Hi, finally set up a news feed at twitter: http://twitter.com/the_antlr_guy  all things antlr/ST/languages
Ter
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20101222/af3b22fe/attachment.html 

From ub at abego-software.de  Wed Dec 22 12:15:57 2010
From: ub at abego-software.de (Udo Borkowski)
Date: Wed, 22 Dec 2010 21:15:57 +0100
Subject: [stringtemplate-interest] StringTemplate + Doclet
In-Reply-To: <9FF144A5-B1CF-45C7-9960-873AF7B4814C@cs.usfca.edu>
References: <AANLkTimSTL7bsXfUwDdA8N1TJVnbfDz8D-D7d4mUuF4g@mail.gmail.com>	<2026C4F6-97AF-433A-B057-07D9E00C95D4@cs.usfca.edu>	<AANLkTinvb6GcJ1w7s0=jcgByXVdXfdZ3FmECbDc1SdTg@mail.gmail.com>
	<6131A116-CAD0-470B-BA52-80E74F4B8911@cs.usfca.edu>
	<4D1237A9.4000203@clapper.org>
	<9FF144A5-B1CF-45C7-9960-873AF7B4814C@cs.usfca.edu>
Message-ID: <172E0EC2-49F5-4AAB-9E23-51D4BC01C9BB@abego-software.de>

I used a different approach to make the "property access" more flexible: instead of defining/registering a class specific "adaptor" I defined an interface PropertyAccessor:

public interface PropertyAccessor {
	Object getProperty(Object o, Object property, ST template,
			Interpreter interpreter);
}

The Interpreter method getObjectProperty now looks like
    protected Object getObjectProperty(ST self, Object o, Object property) {
    	return group.getPropertyAccessor().getProperty(o, property, self, this);
    }
    
The STGroup got a new property propertyAccessor that by default references an implementation of the PropertyAccessor interface mimiking the old behaviour (i.e. getProperty(?) contains just the old code of Interpreter#getObjectProperty(?)).

Because the propertyAccessor of STGroup has also a setter I can redefine this "property access" behaviour on a per STGroup base. In this implementation I can decide if I want to use the "exact class" or "instanceOf" functionality etc.

BTW: My current implementation of the PropertyAccessor interface also contains a cache for fast access to a property. I.e. it is no longer necessary to check on every property access if the property is implemented by a "getFoo()" or "isFoo()" method or a field "foo" but I can directly use the Method or Field instance retrieved the first time. The cache maps a property name and a class to the code doing the actual property access. Subclasses/interfaces are also covered this way.

BTW2: The cache is also used to redefine property behaviour on a "per class, per propertyName" base.

Udo



On 22.12.2010, at 18:51, Terence Parr wrote:

> 
> On Dec 22, 2010, at 9:38 AM, Brian Clapper wrote:
>>> contract), I ended up using ASM to generate interfaces on the fly, which I then
>> implement via java.lang.reflect.Proxy.
> 
> BTW, for renderers i did == on obj.getClass() not instanceof (which only works on class names not Class ptrs).  Is it a serious problem if i don't allow instanceof?  Maybe if the model object is hidden by interfaces like jdbc. hmm... i'd rather avoid the java.lang.reflect.Proxy stuff.
> 
> Ter
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20101222/a59cf13e/attachment.html 

From parrt at cs.usfca.edu  Wed Dec 22 12:25:34 2010
From: parrt at cs.usfca.edu (Terence Parr)
Date: Wed, 22 Dec 2010 12:25:34 -0800
Subject: [stringtemplate-interest] no "..." pass through argument for v4?
Message-ID: <D2BB9F4E-9D2C-405E-8BB0-4CF075FE5A1A@cs.usfca.edu>

In v3 we have a ... arg that lets us see dynamically inherited values through arguments like this:

/** i+=INT in lexer */
lexerRuleRefAndListLabel(rule,label,args,elementIndex,scope) ::= <<
<lexerRuleRef(...)>
<listLabel(elem=label,...)>
>>

it's just bein lazy, not passing arguments along.  It has a big peformance hit so i think i'll drop for v4.  

Consider

f(a) ::= "<name>_<a>"

arg 'a' is clearly immediately available w/o looking up the chain of enclosing templates so it should be a fast array lookup.  name is clearly not defined as arg and so slower lookup is needed.  If we allow "<f(...)>" the assumption that 'a' is an arg is no longer true.

Ter

From parrt at cs.usfca.edu  Wed Dec 22 13:29:00 2010
From: parrt at cs.usfca.edu (Terence Parr)
Date: Wed, 22 Dec 2010 13:29:00 -0800
Subject: [stringtemplate-interest] v4 renderers
Message-ID: <033412AC-6E86-4BCF-A14E-59E2DF3975D6@cs.usfca.edu>

ok, v4 works for renderers now with instanceof functionality:

	@Test public void testInstanceofRenderer() throws Exception {
		String templates =
				"numberThing(x,y,z) ::= \"numbers: <x>, <y>; <z>\"\n";
		writeFile(tmpdir, "t.stg", templates);
		STGroup group = new STGroupFile(tmpdir+"/t.stg");
		group.registerRenderer(Number.class, new NumberRenderer());
		ST st = group.getInstanceOf("numberThing");
		st.add("x", -2100);
		st.add("y", 3.14159);
		st.add("z", "hi"); 
		String expecting = "numbers: -2100, 3.14159; hi";
		String result = st.render();
		assertEquals(expecting, result);
	}

Note that Integer and Double are subclasses of Number.

Look up for each attribute ref is hyperslow at the moment (checks attributeType against all renderers):

	public AttributeRenderer getAttributeRenderer(Class attributeType) {
		if ( renderers==null ) return null;
		// TODO: cache this lookup
		for (Class t : renderers.keySet()) {
			// t works for attributeType if attributeType subclasses t or implements
			if ( t.isAssignableFrom(attributeType) ) return renderers.get(t);
		}
		return null;
	}

Look ok?  Same would work for registerModelAdaptor(type, adap), right?  Upon <a.p> and a.getClass() is instanceof or implements type, then I'd ask adap how to get p from 'a', right?  Later I can cache a.getClass -> adap mapping.

Latest is here, updated hourly: (the ant build should work)

http://www.stringtemplate.org/depot/ST4/java/main

Ter
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20101222/9179b6da/attachment.html 

From collin.fagan at gmail.com  Wed Dec 22 13:47:53 2010
From: collin.fagan at gmail.com (Collin Fagan)
Date: Wed, 22 Dec 2010 15:47:53 -0600
Subject: [stringtemplate-interest] StringTemplate + Doclet
In-Reply-To: <7ADCC832-8BCC-4041-AFD0-25860C4671E4@cs.usfca.edu>
References: <AANLkTimSTL7bsXfUwDdA8N1TJVnbfDz8D-D7d4mUuF4g@mail.gmail.com>
	<2026C4F6-97AF-433A-B057-07D9E00C95D4@cs.usfca.edu>
	<AANLkTinvb6GcJ1w7s0=jcgByXVdXfdZ3FmECbDc1SdTg@mail.gmail.com>
	<6131A116-CAD0-470B-BA52-80E74F4B8911@cs.usfca.edu>
	<4D1237A9.4000203@clapper.org>
	<9FF144A5-B1CF-45C7-9960-873AF7B4814C@cs.usfca.edu>
	<4D123CF1.9060009@clapper.org>
	<52CFA26C-C5E7-41EB-A27E-62D1629E2E0E@cs.usfca.edu>
	<AANLkTikM5CNdgPH+UQJSmoCF-j7+52wN8LSSBFFw=c47@mail.gmail.com>
	<7ADCC832-8BCC-4041-AFD0-25860C4671E4@cs.usfca.edu>
Message-ID: <AANLkTimiE8_QfZG9j-b71d5wNncfcqvkrbcqPfbgJPa=@mail.gmail.com>

I ran into something like this when I was processing annotations. All
annotations are interfaces and implemented with Proxy objects at runtime,
hence you can't set a renderer for them. The only problem with
isAssignableFrom is that it is not a one-to-one mapping like comparing
classes is. How would one handel an object that isAssignableFrom multiple
registered interfaces or classes?

Collin

On Wed, Dec 22, 2010 at 1:43 PM, Terence Parr <parrt at cs.usfca.edu> wrote:

> Ah. right! Class.isAssignableFrom is the ticket.
>
> @Sam, caching. you mean recording each o.getClass() -> isAssignableFrom
> mapping?
>
> Seems I should upgrade regiserRenderer too...grr...
>
> Ter
> On Dec 22, 2010, at 10:47 AM, Rafael Chaves wrote:
>
> > For any interface based API (which is a common practice), getClass()
> > is a show stopper. A client of the API does not know the actual
> > classes involved (they are not API).
> >
> > I was not suggesting actually using the instanceof operator (I am not
> > sure you really meant that, as it is not really possible), but
> > Class.isInstanceOf(object). A similar thing would be
> > Class.isAssignableFrom(object.getClass()).
> >
> > Cheers,
> >
> > Rafael
> >
> > On Wed, Dec 22, 2010 at 10:06 AM, Terence Parr <parrt at cs.usfca.edu>
> wrote:
> >> Seems like I could do instanceof by just walking the
> Class.superClass/implements chain, right?  I'm not considering generating
> code; makes it hard to port ;)
> >> Ter
> >> On Dec 22, 2010, at 10:01 AM, Brian Clapper wrote:
> >>
> >>> On 12/22/10 12:51 PM, Terence Parr wrote:
> >>>>
> >>>> On Dec 22, 2010, at 9:38 AM, Brian Clapper wrote:
> >>>>>> contract), I ended up using ASM to generate interfaces on the fly,
> which I then
> >>>>> implement via java.lang.reflect.Proxy.
> >>>>
> >>>> BTW, for renderers i did == on obj.getClass() not instanceof (which
> only works
> >>>> on class names not Class ptrs).  Is it a serious problem if i don't
> allow
> >>>> instanceof?  Maybe if the model object is hidden by interfaces like
> jdbc.
> >>>> hmm... i'd rather avoid the java.lang.reflect.Proxy stuff.
> >>>
> >>> I don't use instanceof, so it won't affect me.
> >>>
> >>> I deliberately chose java.lang.reflect.Proxy, for a couple reasons.
> First,
> >>> generating the byte code for an interface, via ASM, is straightforward
> and
> >>> simple. Generating a wrapper class, on the other hand, is more
> complicated and
> >>> annoying. Second, using Proxy to implement an interface on the fly is
> also
> >>> straightforward.
> >>>
> >>> This technique allows for more maintainable code, in my opinion. If I'm
> going
> >>> to resort to generating byte code on the fly, I'd like that part of the
> >>> solution to be a dead-simple as possible. Use of Proxy made that
> possible. If I
> >>> weren't generating the byte code for the wrapper interface on the fly,
> I
> >>> wouldn't be using Proxy at all.
> >>>
> >>> If I could get rid of byte code generation entirely, it'd be a real
> win.
> >>> --
> >>> -Brian
> >>>
> >>> Brian Clapper, http://www.clapper.org/bmc/
> >>> _______________________________________________
> >>> stringtemplate-interest mailing list
> >>> stringtemplate-interest at antlr.org
> >>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
> >>
> >> _______________________________________________
> >> stringtemplate-interest mailing list
> >> stringtemplate-interest at antlr.org
> >> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
> >>
> > _______________________________________________
> > stringtemplate-interest mailing list
> > stringtemplate-interest at antlr.org
> > http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20101222/9e07d67a/attachment-0001.html 

From parrt at cs.usfca.edu  Wed Dec 22 13:49:39 2010
From: parrt at cs.usfca.edu (Terence Parr)
Date: Wed, 22 Dec 2010 13:49:39 -0800
Subject: [stringtemplate-interest] StringTemplate + Doclet
In-Reply-To: <AANLkTimiE8_QfZG9j-b71d5wNncfcqvkrbcqPfbgJPa=@mail.gmail.com>
References: <AANLkTimSTL7bsXfUwDdA8N1TJVnbfDz8D-D7d4mUuF4g@mail.gmail.com>
	<2026C4F6-97AF-433A-B057-07D9E00C95D4@cs.usfca.edu>
	<AANLkTinvb6GcJ1w7s0=jcgByXVdXfdZ3FmECbDc1SdTg@mail.gmail.com>
	<6131A116-CAD0-470B-BA52-80E74F4B8911@cs.usfca.edu>
	<4D1237A9.4000203@clapper.org>
	<9FF144A5-B1CF-45C7-9960-873AF7B4814C@cs.usfca.edu>
	<4D123CF1.9060009@clapper.org>
	<52CFA26C-C5E7-41EB-A27E-62D1629E2E0E@cs.usfca.edu>
	<AANLkTikM5CNdgPH+UQJSmoCF-j7+52wN8LSSBFFw=c47@mail.gmail.com>
	<7ADCC832-8BCC-4041-AFD0-25860C4671E4@cs.usfca.edu>
	<AANLkTimiE8_QfZG9j-b71d5wNncfcqvkrbcqPfbgJPa=@mail.gmail.com>
Message-ID: <54E0054F-8D8E-4156-9710-93D04067020B@cs.usfca.edu>


On Dec 22, 2010, at 1:47 PM, Collin Fagan wrote:

> I ran into something like this when I was processing annotations. All annotations are interfaces and implemented with Proxy objects at runtime, hence you can't set a renderer for them. The only problem with isAssignableFrom is that it is not a one-to-one mapping like comparing classes is. How would one handel an object that isAssignableFrom multiple registered interfaces or classes?

I'm tracking order of registration so that it works like try-catch: first that fits, wins. :)

Ter

From ub at abego-software.de  Wed Dec 22 14:10:21 2010
From: ub at abego-software.de (Udo Borkowski)
Date: Wed, 22 Dec 2010 23:10:21 +0100
Subject: [stringtemplate-interest] v4 renderers
In-Reply-To: <033412AC-6E86-4BCF-A14E-59E2DF3975D6@cs.usfca.edu>
References: <033412AC-6E86-4BCF-A14E-59E2DF3975D6@cs.usfca.edu>
Message-ID: <BDD7AE0B-8DD8-46ED-9193-EA47EAD51ABD@abego-software.de>

> Look ok?  Same would work for registerModelAdaptor(type, adap), right?  Upon <a.p> and a.getClass() is instanceof or implements type, then I'd ask adap how to get p from 'a', right?  Later I can cache a.getClass -> adap mapping.

Rather than caching a.getClass -> adap I would ask adap for an object I could use for caching (and accessing a property value). This is because it may still be expensive for the adapter to calculate the property value, but easier if some "calculation" is already done (and only done once).

E.g. imagine you want to implement the current property access behaviour (as defined by Interpreter#getObjectProperty(?)) by an adapter. This would require first checking for the "Map" case, then the "ST" case, then the "getFoo()" case, then the "isFoo()" case and finally the field "foo" case. Actually this only needs do be done once per class and property(name). 

Therefore I defined one "Access class" for each of these cases and store the proper one with each class and property (name) pair. (Undefined properties map to a unique "UNDEFINED" accessor).

E.g. for the "ST" case the code looks like this:

	private final static PropertyAccessor PROPERTY_ACCESSOR_FOR_ST = new PropertyAccessor() {

		@Override
		public Object getProperty(Object o, Object property, ST template,
				Interpreter interpreter) {
			if (o instanceof ST) {
				ST st = (ST) o;
				return st.getAttribute((String) property);
			} else {
				ErrorManager.runTimeError(
						template,
						interpreter.current_ip,
						ErrorType.INTERNAL_ERROR,
						null,
						String.format("Expected instance of ST, got %s",
								o.getClass()));
				return null;
			}
		}
	};


Udo


On 22.12.2010, at 22:29, Terence Parr wrote:

> ok, v4 works for renderers now with instanceof functionality:
> 
> 	@Test public void testInstanceofRenderer() throws Exception {
> 		String templates =
> 				"numberThing(x,y,z) ::= \"numbers: <x>, <y>; <z>\"\n";
> 		writeFile(tmpdir, "t.stg", templates);
> 		STGroup group = new STGroupFile(tmpdir+"/t.stg");
> 		group.registerRenderer(Number.class, new NumberRenderer());
> 		ST st = group.getInstanceOf("numberThing");
> 		st.add("x", -2100);
> 		st.add("y", 3.14159);
> 		st.add("z", "hi"); 
> 		String expecting = "numbers: -2100, 3.14159; hi";
> 		String result = st.render();
> 		assertEquals(expecting, result);
> 	}
> 
> Note that Integer and Double are subclasses of Number.
> 
> Look up for each attribute ref is hyperslow at the moment (checks attributeType against all renderers):
> 
> 	public AttributeRenderer getAttributeRenderer(Class attributeType) {
> 		if ( renderers==null ) return null;
> 		// TODO: cache this lookup
> 		for (Class t : renderers.keySet()) {
> 			// t works for attributeType if attributeType subclasses t or implements
> 			if ( t.isAssignableFrom(attributeType) ) return renderers.get(t);
> 		}
> 		return null;
> 	}
> 
> Look ok?  Same would work for registerModelAdaptor(type, adap), right?  Upon <a.p> and a.getClass() is instanceof or implements type, then I'd ask adap how to get p from 'a', right?  Later I can cache a.getClass -> adap mapping.
> 
> Latest is here, updated hourly: (the ant build should work)
> 
> http://www.stringtemplate.org/depot/ST4/java/main
> 
> Ter
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20101222/ef28bb79/attachment.html 

From bmc at clapper.org  Wed Dec 22 15:22:10 2010
From: bmc at clapper.org (Brian Clapper)
Date: Wed, 22 Dec 2010 18:22:10 -0500
Subject: [stringtemplate-interest] v4 renderers
In-Reply-To: <033412AC-6E86-4BCF-A14E-59E2DF3975D6@cs.usfca.edu>
References: <033412AC-6E86-4BCF-A14E-59E2DF3975D6@cs.usfca.edu>
Message-ID: <4D128822.2090007@clapper.org>

On 12/22/2010 04:29 PM, Terence Parr wrote:
> ok, v4 works for renderers now with instanceof functionality:

[snip]

> Look ok? Same would work for registerModelAdaptor(type, adap), right? Upon
> <a.p> and a.getClass() is instanceof or implements type, then I'd ask adap how
> to get p from 'a', right? Later I can cache a.getClass -> adap mapping.

Independent of the "what to cache" issue (Udo makes a good point), this looks 
right to me.
-- 
-Brian

Brian Clapper, http://www.clapper.org/bmc/

From baerrach at gmail.com  Wed Dec 22 16:44:11 2010
From: baerrach at gmail.com (Barrie Treloar)
Date: Thu, 23 Dec 2010 11:14:11 +1030
Subject: [stringtemplate-interest] it, i, i0 for ST v4
In-Reply-To: <BA1A0126-935D-4C18-9BBA-1C9E2F8BDEE2@cs.usfca.edu>
References: <F26A0BAE-68CD-4AAC-B5FE-8AB28AEC272C@cs.usfca.edu>
	<011f01cba18f$e46af080$ad40d180$@pixelminegames.com>
	<BA1A0126-935D-4C18-9BBA-1C9E2F8BDEE2@cs.usfca.edu>
Message-ID: <AANLkTikJvOgzARUk+HNA36uoar+12EakPouWoZJKLm3s@mail.gmail.com>

On Wed, Dec 22, 2010 at 3:27 PM, Terence Parr <parrt at cs.usfca.edu> wrote:
>
> On Dec 21, 2010, at 8:22 PM, Sam Harwell wrote:
>> This whole issue is an edge case of a larger "problem" I'm facing - I wish
>> that templates with one unassigned argument could be used any place a
>> template with a single arg can be used. From your bold(x) example, what I
>> mean is this:
>>
>> format(tag,x) ::= "<$tag$>$x$</$tag$>"
>>
>> <names:format(tag="b")>
>>
>> The anonymous template version this is exactly what you suggested, with
>> exactly 1 named but unassigned parameter and 0 or more named assignments.
>
> That is exactly how v4 works :) ?First arg(s) get values. 'cept no names:

Can you expand on that, or link to documentation, please?
>From the little lurker understanding I have this feels black magicish
and something I'm bound to forget and bump into.

Cheers

From parrt at cs.usfca.edu  Wed Dec 22 16:48:05 2010
From: parrt at cs.usfca.edu (Terence Parr)
Date: Wed, 22 Dec 2010 16:48:05 -0800
Subject: [stringtemplate-interest] it, i, i0 for ST v4
In-Reply-To: <AANLkTikJvOgzARUk+HNA36uoar+12EakPouWoZJKLm3s@mail.gmail.com>
References: <F26A0BAE-68CD-4AAC-B5FE-8AB28AEC272C@cs.usfca.edu>
	<011f01cba18f$e46af080$ad40d180$@pixelminegames.com>
	<BA1A0126-935D-4C18-9BBA-1C9E2F8BDEE2@cs.usfca.edu>
	<AANLkTikJvOgzARUk+HNA36uoar+12EakPouWoZJKLm3s@mail.gmail.com>
Message-ID: <1FF1535D-3758-4EC2-9607-C9745B55821C@cs.usfca.edu>

Surely.  The idea is that v4 always has a parameter list but can still inherit stuff that is not a parameter of that template.  When we apply a template, v3 let you avoid parameter like this:

$names:bold()$

where

bold(x) ::= "<b>$x$</b>"

Now, v4 will let you have more than one AND pass args in map operation:

$names:bold("hi")$

bold(x,y) ::= "<b>$y$: $x$</b>"

v4 sets first arg(s) to map iteration values.

$names,phones:bold()$

would work, setting x,y automatically

Ter

On Dec 22, 2010, at 4:44 PM, Barrie Treloar wrote:

> On Wed, Dec 22, 2010 at 3:27 PM, Terence Parr <parrt at cs.usfca.edu> wrote:
>> 
>> On Dec 21, 2010, at 8:22 PM, Sam Harwell wrote:
>>> This whole issue is an edge case of a larger "problem" I'm facing - I wish
>>> that templates with one unassigned argument could be used any place a
>>> template with a single arg can be used. From your bold(x) example, what I
>>> mean is this:
>>> 
>>> format(tag,x) ::= "<$tag$>$x$</$tag$>"
>>> 
>>> <names:format(tag="b")>
>>> 
>>> The anonymous template version this is exactly what you suggested, with
>>> exactly 1 named but unassigned parameter and 0 or more named assignments.
>> 
>> That is exactly how v4 works :)  First arg(s) get values. 'cept no names:
> 
> Can you expand on that, or link to documentation, please?
>> From the little lurker understanding I have this feels black magicish
> and something I'm bound to forget and bump into.
> 
> Cheers
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest


From baerrach at gmail.com  Wed Dec 22 18:26:38 2010
From: baerrach at gmail.com (Barrie Treloar)
Date: Thu, 23 Dec 2010 12:56:38 +1030
Subject: [stringtemplate-interest] it, i, i0 for ST v4
In-Reply-To: <1FF1535D-3758-4EC2-9607-C9745B55821C@cs.usfca.edu>
References: <F26A0BAE-68CD-4AAC-B5FE-8AB28AEC272C@cs.usfca.edu>
	<011f01cba18f$e46af080$ad40d180$@pixelminegames.com>
	<BA1A0126-935D-4C18-9BBA-1C9E2F8BDEE2@cs.usfca.edu>
	<AANLkTikJvOgzARUk+HNA36uoar+12EakPouWoZJKLm3s@mail.gmail.com>
	<1FF1535D-3758-4EC2-9607-C9745B55821C@cs.usfca.edu>
Message-ID: <AANLkTimSMkEDxPJTVZ833atq3AMg=PZHjMzaPyoeeGWn@mail.gmail.com>

On Thu, Dec 23, 2010 at 11:18 AM, Terence Parr <parrt at cs.usfca.edu> wrote:
> Surely. ?The idea is that v4 always has a parameter list but can still inherit stuff that is not a parameter of that template. ?When we apply a template, v3 let you avoid parameter like this:
>
> $names:bold()$

Ahh, I think the bit I was missing is that I forgot the above says
apply the template "bold" to every element in names.
Hence not understanding the first parameter bit as being all the
elements in names and the confusion around why Sam's template needed
the args switched.
It's obvious now.

Thanks.

From parrt at cs.usfca.edu  Thu Dec 23 09:58:49 2010
From: parrt at cs.usfca.edu (Terence Parr)
Date: Thu, 23 Dec 2010 09:58:49 -0800
Subject: [stringtemplate-interest] v4 renderers
In-Reply-To: <BDD7AE0B-8DD8-46ED-9193-EA47EAD51ABD@abego-software.de>
References: <033412AC-6E86-4BCF-A14E-59E2DF3975D6@cs.usfca.edu>
	<BDD7AE0B-8DD8-46ED-9193-EA47EAD51ABD@abego-software.de>
Message-ID: <44FC9DD8-75BE-418F-9898-CE8416063B29@cs.usfca.edu>


On Dec 22, 2010, at 2:10 PM, Udo Borkowski wrote:

>> Look ok?  Same would work for registerModelAdaptor(type, adap), right?  Upon <a.p> and a.getClass() is instanceof or implements type, then I'd ask adap how to get p from 'a', right?  Later I can cache a.getClass -> adap mapping.
> 
> Rather than caching a.getClass -> adap I would ask adap for an object I could use for caching (and accessing a property value). This is because it may still be expensive for the adapter to calculate the property value, but easier if some "calculation" is already done (and only done once).

but before i can ask an adaptor for it's object->Method cache, i have to find the adaptor, which is O(n); i should cache that right?

> E.g. imagine you want to implement the current property access behaviour (as defined by Interpreter#getObjectProperty(?)) by an adapter. This would require first checking for the "Map" case, then the "ST" case, then the "getFoo()" case, then the "isFoo()" case and finally the field "foo" case. Actually this only needs do be done once per class and property(name).

right. that's the 2nd level cache, if you will. first is finding the adap :)

> Therefore I defined one "Access class" for each of these cases and store the proper one with each class and property (name) pair. (Undefined properties map to a unique "UNDEFINED" accessor).

cool. i'm thinking same thing.  Define adap for Map, ST, and Object (default).

let me code something and see how it smells.

Ter


From ub at abego-software.de  Thu Dec 23 14:04:28 2010
From: ub at abego-software.de (Udo Borkowski)
Date: Thu, 23 Dec 2010 23:04:28 +0100
Subject: [stringtemplate-interest] v4 renderers
In-Reply-To: <44FC9DD8-75BE-418F-9898-CE8416063B29@cs.usfca.edu>
References: <033412AC-6E86-4BCF-A14E-59E2DF3975D6@cs.usfca.edu>
	<BDD7AE0B-8DD8-46ED-9193-EA47EAD51ABD@abego-software.de>
	<44FC9DD8-75BE-418F-9898-CE8416063B29@cs.usfca.edu>
Message-ID: <6F62D26E-AC05-4814-BA53-C03DF6E43DD7@abego-software.de>


On 23.12.2010, at 18:58, Terence Parr wrote:

> 
> On Dec 22, 2010, at 2:10 PM, Udo Borkowski wrote:
> 
>>> Look ok?  Same would work for registerModelAdaptor(type, adap), right?  Upon <a.p> and a.getClass() is instanceof or implements type, then I'd ask adap how to get p from 'a', right?  Later I can cache a.getClass -> adap mapping.
>> 
>> Rather than caching a.getClass -> adap I would ask adap for an object I could use for caching (and accessing a property value). This is because it may still be expensive for the adapter to calculate the property value, but easier if some "calculation" is already done (and only done once).
> 
> but before i can ask an adaptor for it's object->Method cache, i have to find the adaptor, which is O(n); i should cache that right?
Because the order of registration is important in you approach you need O(n) to find the adapter. Then you should definitely cache this.

In my implementation I just keep a map from Class to "my PropertyAccessor" (similar to your adapters). I still get something like the "instanceof" functionality using this approach: if I don't find a PropertyAccessor for class C in the map I explicitly check for the super classes and interfaces of C (recursively). If I find one this way I store the same PropertyAccessor also for C. If multiple "adapters" are installed  this approach is typically faster than checking every adapter against the class. E.g. for the "Double" class the "Number" adapter would be found in one step.

However with this approach I cannot guarantee anything if multiple adapters would fit for class C.

Udo



From parrt at cs.usfca.edu  Thu Dec 23 17:22:06 2010
From: parrt at cs.usfca.edu (Terence Parr)
Date: Thu, 23 Dec 2010 17:22:06 -0800
Subject: [stringtemplate-interest] added v4 model adaptor
Message-ID: <C32A4C51-0014-4522-A426-67C1888A4B49@cs.usfca.edu>

Implemented draft model adaptor mech. for v4.  You call group.registerModelAdaptor in least to most specific order. ST registers ObjectModelAdaptor first, for example, for Object.class.  Then you can add one for, say, Users:

		group.registerModelAdaptor(User.class, new UserAdaptor());
		ST st = group.getInstanceOf("foo");
		st.add("x", new User(100, "parrt"));

It does most-specific and last match so it uses UserAdaptor not ObjectModelAdaptor here.  If two adaptors fit User, it chooses that last one added.

I do *not* allow per ST model adaptors.  Can't really think of use case and don't want to pollute ST with a field.

I do *not* look to import groups for adaptors.  They aren't really supergroups anymore and it rquires that I do a best-fit which is not simple enough. I like the most-specific, ordered lookup.  I can't really see a use case for importing adaptors.  

I *do* see that renderers are different and we should be able to decorate different templates with different renderers.

As this is mutually-orthogonal, should be easy to backpatch into v3. should I?

Ter

From parrt at cs.usfca.edu  Thu Dec 23 17:24:45 2010
From: parrt at cs.usfca.edu (Terence Parr)
Date: Thu, 23 Dec 2010 17:24:45 -0800
Subject: [stringtemplate-interest] v4 model adaptor unit tests
In-Reply-To: <C32A4C51-0014-4522-A426-67C1888A4B49@cs.usfca.edu>
References: <C32A4C51-0014-4522-A426-67C1888A4B49@cs.usfca.edu>
Message-ID: <CB76CB60-7C1D-48AE-BDF8-4E331B9A3342@cs.usfca.edu>

http://www.stringtemplate.org/depot/ST4/java/main/test/org/stringtemplate/v4/test/TestModelAdaptors.java

in case you want to look.  (374 tests overall)

Ter
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20101223/f2f0c0a4/attachment.html 

From rafael at alphasimple.com  Thu Dec 23 17:45:41 2010
From: rafael at alphasimple.com (Rafael Chaves)
Date: Thu, 23 Dec 2010 17:45:41 -0800
Subject: [stringtemplate-interest] v4 model adaptor unit tests
In-Reply-To: <CB76CB60-7C1D-48AE-BDF8-4E331B9A3342@cs.usfca.edu>
References: <C32A4C51-0014-4522-A426-67C1888A4B49@cs.usfca.edu>
	<CB76CB60-7C1D-48AE-BDF8-4E331B9A3342@cs.usfca.edu>
Message-ID: <AANLkTinohOQSUsH+pnwxUg-RTcHNkxg0THry-zn+eHjG@mail.gmail.com>

It seems the way an adaptor passes up the opportunity to address a
property is by throwing an exception. Is that correct, or does the
exception signals a real error and aborts property resolution? It was
not clear from the test cases as both adaptors handle the exact same
properties.

If that is correct, doesn't throwing exceptions for the majority of
properties being resolved (which in the normal case would be handled
by the default ObjectModelAdaptor) create a lot of unnecessary
objects?

I handled the case of not understanding a property by returning null,
but that does not allow actually returning null as the intended value.
Could be returning some other object (a DOES_NOT_UNDERSTAND string
constant, for instance) instead.

Cheers,

Rafael

On Thu, Dec 23, 2010 at 5:24 PM, Terence Parr <parrt at cs.usfca.edu> wrote:
> http://www.stringtemplate.org/depot/ST4/java/main/test/org/stringtemplate/v4/test/TestModelAdaptors.java
> in case you want to look. ?(374 tests overall)
> Ter
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>
>

From parrt at cs.usfca.edu  Thu Dec 23 17:52:14 2010
From: parrt at cs.usfca.edu (Terence Parr)
Date: Thu, 23 Dec 2010 17:52:14 -0800
Subject: [stringtemplate-interest] v4 model adaptor unit tests
In-Reply-To: <AANLkTinohOQSUsH+pnwxUg-RTcHNkxg0THry-zn+eHjG@mail.gmail.com>
References: <C32A4C51-0014-4522-A426-67C1888A4B49@cs.usfca.edu>
	<CB76CB60-7C1D-48AE-BDF8-4E331B9A3342@cs.usfca.edu>
	<AANLkTinohOQSUsH+pnwxUg-RTcHNkxg0THry-zn+eHjG@mail.gmail.com>
Message-ID: <920A1FF9-9526-44F2-964B-8BF9BB6BD61E@cs.usfca.edu>

Well it's an error if a.prop doesn't exist I think.  being null is ok though so

<if(a.children)>...<endif>

works w/o throwing an exception. but if children is not a valid field or method addressed by a model, it's a programming error I think.  I'm a bit tired at moment though so I'm happy to consider some use cases if you can pass 'em along.

Ter

On Dec 23, 2010, at 5:45 PM, Rafael Chaves wrote:

> It seems the way an adaptor passes up the opportunity to address a
> property is by throwing an exception. Is that correct, or does the
> exception signals a real error and aborts property resolution? It was
> not clear from the test cases as both adaptors handle the exact same
> properties.
> 
> If that is correct, doesn't throwing exceptions for the majority of
> properties being resolved (which in the normal case would be handled
> by the default ObjectModelAdaptor) create a lot of unnecessary
> objects?
> 
> I handled the case of not understanding a property by returning null,
> but that does not allow actually returning null as the intended value.
> Could be returning some other object (a DOES_NOT_UNDERSTAND string
> constant, for instance) instead.
> 
> Cheers,
> 
> Rafael
> 
> On Thu, Dec 23, 2010 at 5:24 PM, Terence Parr <parrt at cs.usfca.edu> wrote:
>> http://www.stringtemplate.org/depot/ST4/java/main/test/org/stringtemplate/v4/test/TestModelAdaptors.java
>> in case you want to look.  (374 tests overall)
>> Ter
>> _______________________________________________
>> stringtemplate-interest mailing list
>> stringtemplate-interest at antlr.org
>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>> 
>> 
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest


From rafael at alphasimple.com  Thu Dec 23 18:18:50 2010
From: rafael at alphasimple.com (Rafael Chaves)
Date: Thu, 23 Dec 2010 18:18:50 -0800
Subject: [stringtemplate-interest] v4 model adaptor unit tests
In-Reply-To: <920A1FF9-9526-44F2-964B-8BF9BB6BD61E@cs.usfca.edu>
References: <C32A4C51-0014-4522-A426-67C1888A4B49@cs.usfca.edu>
	<CB76CB60-7C1D-48AE-BDF8-4E331B9A3342@cs.usfca.edu>
	<AANLkTinohOQSUsH+pnwxUg-RTcHNkxg0THry-zn+eHjG@mail.gmail.com>
	<920A1FF9-9526-44F2-964B-8BF9BB6BD61E@cs.usfca.edu>
Message-ID: <AANLkTi=dg9sC6hDtQfA5zTSCmMJFvsA_sbG7MX_smOyG@mail.gmail.com>

My concrete use case: adapting UML model elements. Consider the model
class hierarchy:

NamedElement
    Class
    Feature
        Property
        Operation

- NamedElementAdaptor handles a "isPublic" property.
- FeatureAdaptor handles a "isStatic" property.
- OperationAdaptor handles a "hasParameters" property.
- PropertyAdaptor handles an "initialValue" property.

I don't want my adaptors to have to handle the case a property is
natively supported by the object itself. And I would not want to have
to handle "isPublic" in PropertyAdaptor.

I guess I work around that on my side by making PropertyAdaptor extend
FeatureAdaptor, which would extend NamedElementAdaptor, and implement
the "passing up" that way (by calling super.getProperty() instead of
failing). NamedElementAdaptor would actually extend your
ObjectModelAdaptor (which would handle the reflection case and fail
hard).

Cheers,

Rafael

On Thu, Dec 23, 2010 at 5:52 PM, Terence Parr <parrt at cs.usfca.edu> wrote:
> Well it's an error if a.prop doesn't exist I think. ?being null is ok though so
>
> <if(a.children)>...<endif>
>
> works w/o throwing an exception. but if children is not a valid field or method addressed by a model, it's a programming error I think. ?I'm a bit tired at moment though so I'm happy to consider some use cases if you can pass 'em along.
>
> Ter
>
> On Dec 23, 2010, at 5:45 PM, Rafael Chaves wrote:
>
>> It seems the way an adaptor passes up the opportunity to address a
>> property is by throwing an exception. Is that correct, or does the
>> exception signals a real error and aborts property resolution? It was
>> not clear from the test cases as both adaptors handle the exact same
>> properties.
>>
>> If that is correct, doesn't throwing exceptions for the majority of
>> properties being resolved (which in the normal case would be handled
>> by the default ObjectModelAdaptor) create a lot of unnecessary
>> objects?
>>
>> I handled the case of not understanding a property by returning null,
>> but that does not allow actually returning null as the intended value.
>> Could be returning some other object (a DOES_NOT_UNDERSTAND string
>> constant, for instance) instead.
>>
>> Cheers,
>>
>> Rafael
>>
>> On Thu, Dec 23, 2010 at 5:24 PM, Terence Parr <parrt at cs.usfca.edu> wrote:
>>> http://www.stringtemplate.org/depot/ST4/java/main/test/org/stringtemplate/v4/test/TestModelAdaptors.java
>>> in case you want to look. ?(374 tests overall)
>>> Ter
>>> _______________________________________________
>>> stringtemplate-interest mailing list
>>> stringtemplate-interest at antlr.org
>>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>>>
>>>
>> _______________________________________________
>> stringtemplate-interest mailing list
>> stringtemplate-interest at antlr.org
>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>
>

From parrt at cs.usfca.edu  Fri Dec 24 12:23:40 2010
From: parrt at cs.usfca.edu (Terence Parr)
Date: Fri, 24 Dec 2010 12:23:40 -0800
Subject: [stringtemplate-interest] v4 model adaptor unit tests
In-Reply-To: <AANLkTi=dg9sC6hDtQfA5zTSCmMJFvsA_sbG7MX_smOyG@mail.gmail.com>
References: <C32A4C51-0014-4522-A426-67C1888A4B49@cs.usfca.edu>
	<CB76CB60-7C1D-48AE-BDF8-4E331B9A3342@cs.usfca.edu>
	<AANLkTinohOQSUsH+pnwxUg-RTcHNkxg0THry-zn+eHjG@mail.gmail.com>
	<920A1FF9-9526-44F2-964B-8BF9BB6BD61E@cs.usfca.edu>
	<AANLkTi=dg9sC6hDtQfA5zTSCmMJFvsA_sbG7MX_smOyG@mail.gmail.com>
Message-ID: <DD68839B-3186-4C80-9DBC-34026231CF3C@cs.usfca.edu>

Right so a Feature has both isPublic and isStatic so FeatureAdaptor should handle both, even if it delegates to another such as NamedElementAdaptor. :)

Ter
On Dec 23, 2010, at 6:18 PM, Rafael Chaves wrote:

> My concrete use case: adapting UML model elements. Consider the model
> class hierarchy:
> 
> NamedElement
>    Class
>    Feature
>        Property
>        Operation
> 
> - NamedElementAdaptor handles a "isPublic" property.
> - FeatureAdaptor handles a "isStatic" property.
> - OperationAdaptor handles a "hasParameters" property.
> - PropertyAdaptor handles an "initialValue" property.
> 
> I don't want my adaptors to have to handle the case a property is
> natively supported by the object itself. And I would not want to have
> to handle "isPublic" in PropertyAdaptor.
> 
> I guess I work around that on my side by making PropertyAdaptor extend
> FeatureAdaptor, which would extend NamedElementAdaptor, and implement
> the "passing up" that way (by calling super.getProperty() instead of
> failing). NamedElementAdaptor would actually extend your
> ObjectModelAdaptor (which would handle the reflection case and fail
> hard).
> 
> Cheers,
> 
> Rafael


From parrt at cs.usfca.edu  Sun Dec 26 11:59:24 2010
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sun, 26 Dec 2010 11:59:24 -0800
Subject: [stringtemplate-interest] caching getter lookup speedup
Message-ID: <33C96DE5-0B3A-40F0-850C-AF07A4ACB91D@cs.usfca.edu>

ok, added benchmarking code to v4.  Tested speed with and w/o Method/Field caching.  about 10x improvement.  Average units of work went from 32.77 to 395.22. This is a micro benchmark for property lookup.

timeSimplePropsOfArgs  :   395.24  402.13  399.98  369.82  408.94 =   395.22 units of work / ms

timeSimplePropsOfArgs  :    32.63   32.74   32.68   32.95   32.83 =    32.77 units of work / ms

Now I'm optimizing local attribute (arg) access.  Sam Harwell will be happy :)  I'll check those numbers after impl.

Ter

From ub at abego-software.de  Mon Dec 27 11:35:03 2010
From: ub at abego-software.de (Udo Borkowski)
Date: Mon, 27 Dec 2010 20:35:03 +0100
Subject: [stringtemplate-interest] caching getter lookup speedup
In-Reply-To: <33C96DE5-0B3A-40F0-850C-AF07A4ACB91D@cs.usfca.edu>
References: <33C96DE5-0B3A-40F0-850C-AF07A4ACB91D@cs.usfca.edu>
Message-ID: <FCDC95A8-6693-44B4-835C-8B65504AC3C4@abego-software.de>

Good work!

I guess I can now drop my PropertyAdapter stuff and switch to the new ModelAdaptor feature.


Just a minor thing: when looking for a "by method" implementation of a property you check for the methods "getXXX" and "isXXX". While this is exactly as defined for JavaBeans I found it useful also to check for a method named "XXX". This will also cover properties like "hasFocus", "hasParameters", or even "initialValue" implemented by methods "hasFocus()", "hasParameters()" or "initialValue()". 

With this extension to the semantic of the ObjectModelAdapter guys like Rafael would not need to write their own Adapter but could just refer to every parameterless method of the "bean" as a "property" in their template. 

Apropos "parameterless": After finding a method (in getProperty()) only parameterless object methods should be accepted.

Udo



On 26.12.2010, at 20:59, Terence Parr wrote:

> ok, added benchmarking code to v4.  Tested speed with and w/o Method/Field caching.  about 10x improvement.  Average units of work went from 32.77 to 395.22. This is a micro benchmark for property lookup.
> 
> timeSimplePropsOfArgs  :   395.24  402.13  399.98  369.82  408.94 =   395.22 units of work / ms
> 
> timeSimplePropsOfArgs  :    32.63   32.74   32.68   32.95   32.83 =    32.77 units of work / ms
> 
> Now I'm optimizing local attribute (arg) access.  Sam Harwell will be happy :)  I'll check those numbers after impl.
> 
> Ter
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest


From rafael at alphasimple.com  Mon Dec 27 12:01:37 2010
From: rafael at alphasimple.com (Rafael Chaves)
Date: Mon, 27 Dec 2010 12:01:37 -0800
Subject: [stringtemplate-interest] caching getter lookup speedup
In-Reply-To: <FCDC95A8-6693-44B4-835C-8B65504AC3C4@abego-software.de>
References: <33C96DE5-0B3A-40F0-850C-AF07A4ACB91D@cs.usfca.edu>
	<FCDC95A8-6693-44B4-835C-8B65504AC3C4@abego-software.de>
Message-ID: <AANLkTi=jsELqREAKC6XaWfC3FRW=vkaywjd7AOZv0if4@mail.gmail.com>

Hi Udo,

I think adding exact method name matching would be useful and safe, in
addition to the existing JavaBeans style conventions. The use of a
"hasXXX" convention, as you say, is non-standard, and seems
unnecessary IMO (if you already support exact method name match, it is
just a matter of using "hasXXX" as the property name in your
templates).

I agree that method matching name would free folks to adapt when all
they needed is to affect the mapping of property names to methods
names.

As an aside, I still need to implement adapters in my case as my needs
are not limited to mapping property names to methods, I do need to
provide additional properties not directly supported by the model and
that cannot be computed in the template either.

Cheers,

Rafael

On Mon, Dec 27, 2010 at 11:35 AM, Udo Borkowski <ub at abego-software.de> wrote:
> Good work!
>
> I guess I can now drop my PropertyAdapter stuff and switch to the new ModelAdaptor feature.
>
>
> Just a minor thing: when looking for a "by method" implementation of a property you check for the methods "getXXX" and "isXXX". While this is exactly as defined for JavaBeans I found it useful also to check for a method named "XXX". This will also cover properties like "hasFocus", "hasParameters", or even "initialValue" implemented by methods "hasFocus()", "hasParameters()" or "initialValue()".
>
> With this extension to the semantic of the ObjectModelAdapter guys like Rafael would not need to write their own Adapter but could just refer to every parameterless method of the "bean" as a "property" in their template.
>
> Apropos "parameterless": After finding a method (in getProperty()) only parameterless object methods should be accepted.
>
> Udo
>
>
>
> On 26.12.2010, at 20:59, Terence Parr wrote:
>
>> ok, added benchmarking code to v4. ?Tested speed with and w/o Method/Field caching. ?about 10x improvement. ?Average units of work went from 32.77 to 395.22. This is a micro benchmark for property lookup.
>>
>> timeSimplePropsOfArgs ?: ? 395.24 ?402.13 ?399.98 ?369.82 ?408.94 = ? 395.22 units of work / ms
>>
>> timeSimplePropsOfArgs ?: ? ?32.63 ? 32.74 ? 32.68 ? 32.95 ? 32.83 = ? ?32.77 units of work / ms
>>
>> Now I'm optimizing local attribute (arg) access. ?Sam Harwell will be happy :) ?I'll check those numbers after impl.
>>
>> Ter
>> _______________________________________________
>> stringtemplate-interest mailing list
>> stringtemplate-interest at antlr.org
>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>

From parrt at cs.usfca.edu  Mon Dec 27 12:09:57 2010
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon, 27 Dec 2010 12:09:57 -0800
Subject: [stringtemplate-interest] caching getter lookup speedup
In-Reply-To: <FCDC95A8-6693-44B4-835C-8B65504AC3C4@abego-software.de>
References: <33C96DE5-0B3A-40F0-850C-AF07A4ACB91D@cs.usfca.edu>
	<FCDC95A8-6693-44B4-835C-8B65504AC3C4@abego-software.de>
Message-ID: <0A9DA873-D44F-4FD0-9BEE-CCBD2E5151A9@cs.usfca.edu>

howdy.  I'm nervous about allowing random method names even w/o args.  I've resisted for 10 years; i should probably stick with it.  useful but too easily abused.
Ter

On Dec 27, 2010, at 11:35 AM, Udo Borkowski wrote:

> Good work!
> 
> I guess I can now drop my PropertyAdapter stuff and switch to the new ModelAdaptor feature.
> 
> 
> Just a minor thing: when looking for a "by method" implementation of a property you check for the methods "getXXX" and "isXXX". While this is exactly as defined for JavaBeans I found it useful also to check for a method named "XXX". This will also cover properties like "hasFocus", "hasParameters", or even "initialValue" implemented by methods "hasFocus()", "hasParameters()" or "initialValue()". 
> 
> With this extension to the semantic of the ObjectModelAdapter guys like Rafael would not need to write their own Adapter but could just refer to every parameterless method of the "bean" as a "property" in their template. 
> 
> Apropos "parameterless": After finding a method (in getProperty()) only parameterless object methods should be accepted.
> 
> Udo
> 
> 
> 
> On 26.12.2010, at 20:59, Terence Parr wrote:
> 
>> ok, added benchmarking code to v4.  Tested speed with and w/o Method/Field caching.  about 10x improvement.  Average units of work went from 32.77 to 395.22. This is a micro benchmark for property lookup.
>> 
>> timeSimplePropsOfArgs  :   395.24  402.13  399.98  369.82  408.94 =   395.22 units of work / ms
>> 
>> timeSimplePropsOfArgs  :    32.63   32.74   32.68   32.95   32.83 =    32.77 units of work / ms
>> 
>> Now I'm optimizing local attribute (arg) access.  Sam Harwell will be happy :)  I'll check those numbers after impl.
>> 
>> Ter
>> _______________________________________________
>> stringtemplate-interest mailing list
>> stringtemplate-interest at antlr.org
>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
> 
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest


From parrt at cs.usfca.edu  Mon Dec 27 12:54:28 2010
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon, 27 Dec 2010 12:54:28 -0800
Subject: [stringtemplate-interest] pushed another ST4 build
Message-ID: <E9443EAD-4AEB-4BF4-9D9D-D173A80C0407@cs.usfca.edu>

fast array not hashmap look up for attributes.

http://bit.ly/hVN7PG

Ter
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20101227/86791ba4/attachment.html 

From jonhansnilsson at hotmail.com  Mon Dec 27 19:36:05 2010
From: jonhansnilsson at hotmail.com (Jon Nilsson)
Date: Tue, 28 Dec 2010 04:36:05 +0100
Subject: [stringtemplate-interest] StringTemplate for PHP ?
Message-ID: <SNT139-w615AD6239AE79B8C965816DA010@phx.gbl>


Does StringTemplate for PHP exist?
Considering PHP's large user base (more than C# or Python), I'm surprised that I couldn't find it easily.
http://blog.springsource.com/2009/02/23/programming-language-popularity/
  		 	   		  
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20101228/2c4c30f6/attachment.html 

From jimi at temporal-wave.com  Mon Dec 27 22:13:14 2010
From: jimi at temporal-wave.com (Jim Idle)
Date: Mon, 27 Dec 2010 22:13:14 -0800
Subject: [stringtemplate-interest] StringTemplate for PHP ?
In-Reply-To: <SNT139-w615AD6239AE79B8C965816DA010@phx.gbl>
References: <SNT139-w615AD6239AE79B8C965816DA010@phx.gbl>
Message-ID: <88f9ca467bb61b88beb2d31948cc6f35@mail.gmail.com>

By your logic, we should concentrate on C, C++ and visual basic first J



Jim



*From:* stringtemplate-interest-bounces at antlr.org [mailto:
stringtemplate-interest-bounces at antlr.org] *On Behalf Of *Jon Nilsson
*Sent:* Monday, December 27, 2010 7:36 PM
*To:* stringtemplate-interest at antlr.org
*Subject:* [stringtemplate-interest] StringTemplate for PHP ?



Does StringTemplate for PHP exist?
Considering PHP's large user base (more than C# or Python), I'm surprised
that I couldn't find it easily.
http://blog.springsource.com/2009/02/23/programming-language-popularity/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20101227/86686c39/attachment.html 

From collin.fagan at gmail.com  Tue Dec 28 06:23:24 2010
From: collin.fagan at gmail.com (Collin Fagan)
Date: Tue, 28 Dec 2010 08:23:24 -0600
Subject: [stringtemplate-interest] StringTemplate for PHP ?
In-Reply-To: <88f9ca467bb61b88beb2d31948cc6f35@mail.gmail.com>
References: <SNT139-w615AD6239AE79B8C965816DA010@phx.gbl>
	<88f9ca467bb61b88beb2d31948cc6f35@mail.gmail.com>
Message-ID: <AANLkTinWMN9OXBnOdwM=m5yjfARdJTerjtWZ2naQDTmH@mail.gmail.com>

I think what Jim means to say is, no, currently there is no PHP port of
StringTemplate. I think the closet thing to what you are asking for would be
to use the Java JVM port of PHP:
http://www.caucho.com/resin-3.0/quercus/#PHP-Users. From what I've read you
can call java libraries from PHP code. Since StringTemplate is a java
library probably would be able to get it to work.

PHP is sort of a template engine of it's own right? How would you see it
being used?

Collin

On Tue, Dec 28, 2010 at 12:13 AM, Jim Idle <jimi at temporal-wave.com> wrote:

> By your logic, we should concentrate on C, C++ and visual basic first J
>
>
>
> Jim
>
>
>
> *From:* stringtemplate-interest-bounces at antlr.org [mailto:
> stringtemplate-interest-bounces at antlr.org] *On Behalf Of *Jon Nilsson
> *Sent:* Monday, December 27, 2010 7:36 PM
> *To:* stringtemplate-interest at antlr.org
> *Subject:* [stringtemplate-interest] StringTemplate for PHP ?
>
>
>
> Does StringTemplate for PHP exist?
> Considering PHP's large user base (more than C# or Python), I'm surprised
> that I couldn't find it easily.
> http://blog.springsource.com/2009/02/23/programming-language-popularity/
>
>
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20101228/8ccbf142/attachment.html 

From jdmitchell at gmail.com  Tue Dec 28 10:57:51 2010
From: jdmitchell at gmail.com (John D. Mitchell)
Date: Tue, 28 Dec 2010 10:57:51 -0800
Subject: [stringtemplate-interest] StringTemplate for PHP ?
In-Reply-To: <AANLkTinWMN9OXBnOdwM=m5yjfARdJTerjtWZ2naQDTmH@mail.gmail.com>
References: <SNT139-w615AD6239AE79B8C965816DA010@phx.gbl>
	<88f9ca467bb61b88beb2d31948cc6f35@mail.gmail.com>
	<AANLkTinWMN9OXBnOdwM=m5yjfARdJTerjtWZ2naQDTmH@mail.gmail.com>
Message-ID: <002F4BA3-187D-4ED8-A086-B34E1388DFA5@gmail.com>


On Dec 28, 2010, at 06:23 , Collin Fagan wrote:

> I think what Jim means to say is, no, currently there is no PHP port  
> of StringTemplate. I think the closet thing to what you are asking  
> for would be to use the Java JVM port of PHP:
> http://www.caucho.com/resin-3.0/quercus/#PHP-Users. From what I've  
> read you can call java libraries from PHP code. Since StringTemplate  
> is a java library probably would be able to get it to work.

There are a metric ton of "templating" libraries for PHP that span a  
huge range of capabilities.

> PHP is sort of a template engine of it's own right? How would you  
> see it being used?

Indeed, PHP and the general php dev mindset is pretty much the  
opposite of the principles of StringTemplate.  That is to say that the  
dominant style/bias/approach is to directly mix everything together  
instead of the clean separation that StringTemplate promotes.

Happy holidays,
John


From monty at codetransform.com  Tue Dec 28 14:32:59 2010
From: monty at codetransform.com (Monty Zukowski)
Date: Tue, 28 Dec 2010 14:32:59 -0800
Subject: [stringtemplate-interest] pushed another ST4 build
In-Reply-To: <E9443EAD-4AEB-4BF4-9D9D-D173A80C0407@cs.usfca.edu>
References: <E9443EAD-4AEB-4BF4-9D9D-D173A80C0407@cs.usfca.edu>
Message-ID: <AANLkTi=2tcDWNBc1coKuRX9Kfti5ynOQGunrwqAQQ_NW@mail.gmail.com>

What's the rationale there?  Is the array key,value,key,value?  Since
the number of items is usually short, a few equals() calls beats the
hash function?

Monty

On Mon, Dec 27, 2010 at 12:54 PM, Terence Parr <parrt at cs.usfca.edu> wrote:
> fast array not hashmap look up for attributes.
> http://bit.ly/hVN7PG
> Ter
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>
>

From parrt at cs.usfca.edu  Wed Dec 29 09:03:04 2010
From: parrt at cs.usfca.edu (Terence Parr)
Date: Wed, 29 Dec 2010 09:03:04 -0800
Subject: [stringtemplate-interest] pushed another ST4 build
In-Reply-To: <AANLkTi=2tcDWNBc1coKuRX9Kfti5ynOQGunrwqAQQ_NW@mail.gmail.com>
References: <E9443EAD-4AEB-4BF4-9D9D-D173A80C0407@cs.usfca.edu>
	<AANLkTi=2tcDWNBc1coKuRX9Kfti5ynOQGunrwqAQQ_NW@mail.gmail.com>
Message-ID: <650EF655-D860-47AB-9EBC-99EDDFEB634C@cs.usfca.edu>

Nope, just an array;

t(x,y) ::= "<x><y>"

generates

load_local 0
write
load_local 1
write

The compiler translates id to int.  For dynamic scoping look up, it  
keeps a hashtable but in the template def object not the ST itself.  
then you can do

locals[impl.formalArgs.get(id).index]

to get value if you only have a name.

This saves a hashtable per ST :)  memory and gc overhead savings

T
On Dec 28, 2010, at 2:32 PM, Monty Zukowski wrote:

> What's the rationale there?  Is the array key,value,key,value?  Since
> the number of items is usually short, a few equals() calls beats the
> hash function?
>
> Monty
>
> On Mon, Dec 27, 2010 at 12:54 PM, Terence Parr <parrt at cs.usfca.edu>  
> wrote:
>> fast array not hashmap look up for attributes.
>> http://bit.ly/hVN7PG
>> Ter
>> _______________________________________________
>> stringtemplate-interest mailing list
>> stringtemplate-interest at antlr.org
>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>>
>>
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest


From parrt at cs.usfca.edu  Wed Dec 29 09:35:35 2010
From: parrt at cs.usfca.edu (Terence Parr)
Date: Wed, 29 Dec 2010 09:35:35 -0800
Subject: [stringtemplate-interest] ST4 -> bytecode mapping
Message-ID: <9F549DBA-E13A-4449-B00C-E2F4DD13C088@cs.usfca.edu>

if you're interested:

http://www.antlr.org/wiki/display/ST/Template+to+Bytecode+mapping

Ter
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20101229/570515bc/attachment.html 

From monty at codetransform.com  Wed Dec 29 11:23:06 2010
From: monty at codetransform.com (Monty Zukowski)
Date: Wed, 29 Dec 2010 11:23:06 -0800
Subject: [stringtemplate-interest] pushed another ST4 build
In-Reply-To: <650EF655-D860-47AB-9EBC-99EDDFEB634C@cs.usfca.edu>
References: <E9443EAD-4AEB-4BF4-9D9D-D173A80C0407@cs.usfca.edu>
	<AANLkTi=2tcDWNBc1coKuRX9Kfti5ynOQGunrwqAQQ_NW@mail.gmail.com>
	<650EF655-D860-47AB-9EBC-99EDDFEB634C@cs.usfca.edu>
Message-ID: <AANLkTimMzM9f04Y_RZGqkx4hDbQuG4iJH=Z-2mGwpXr0@mail.gmail.com>

Just read your notes on the interpreter.  Looks very clean, should
make for great portability and speed.

Nice!

Monty

On Wed, Dec 29, 2010 at 9:03 AM, Terence Parr <parrt at cs.usfca.edu> wrote:
> Nope, just an array;
>
> t(x,y) ::= "<x><y>"
>
> generates
>
> load_local 0
> write
> load_local 1
> write
>
> The compiler translates id to int. ?For dynamic scoping look up, it keeps a
> hashtable but in the template def object not the ST itself. then you can do
>
> locals[impl.formalArgs.get(id).index]
>
> to get value if you only have a name.
>
> This saves a hashtable per ST :) ?memory and gc overhead savings
>
> T
> On Dec 28, 2010, at 2:32 PM, Monty Zukowski wrote:
>
>> What's the rationale there? ?Is the array key,value,key,value? ?Since
>> the number of items is usually short, a few equals() calls beats the
>> hash function?
>>
>> Monty
>>
>> On Mon, Dec 27, 2010 at 12:54 PM, Terence Parr <parrt at cs.usfca.edu> wrote:
>>>
>>> fast array not hashmap look up for attributes.
>>> http://bit.ly/hVN7PG
>>> Ter
>>> _______________________________________________
>>> stringtemplate-interest mailing list
>>> stringtemplate-interest at antlr.org
>>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>>>
>>>
>> _______________________________________________
>> stringtemplate-interest mailing list
>> stringtemplate-interest at antlr.org
>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>
>

From parrt at cs.usfca.edu  Wed Dec 29 11:44:38 2010
From: parrt at cs.usfca.edu (Terence Parr)
Date: Wed, 29 Dec 2010 11:44:38 -0800
Subject: [stringtemplate-interest] pushed another ST4 build
In-Reply-To: <AANLkTimMzM9f04Y_RZGqkx4hDbQuG4iJH=Z-2mGwpXr0@mail.gmail.com>
References: <E9443EAD-4AEB-4BF4-9D9D-D173A80C0407@cs.usfca.edu>
	<AANLkTi=2tcDWNBc1coKuRX9Kfti5ynOQGunrwqAQQ_NW@mail.gmail.com>
	<650EF655-D860-47AB-9EBC-99EDDFEB634C@cs.usfca.edu>
	<AANLkTimMzM9f04Y_RZGqkx4hDbQuG4iJH=Z-2mGwpXr0@mail.gmail.com>
Message-ID: <474E33B9-DCD5-4586-B92C-DC838BD1456A@cs.usfca.edu>

Cool :)  Yeah, the bytecode interp is WAY simpler and in principle  
much much faster than tree-based one for STv3.

The new GUI debug widget is totally great too.

Ter
On Dec 29, 2010, at 11:23 AM, Monty Zukowski wrote:

> Just read your notes on the interpreter.  Looks very clean, should
> make for great portability and speed.
>
> Nice!
>
> Monty
>
> On Wed, Dec 29, 2010 at 9:03 AM, Terence Parr <parrt at cs.usfca.edu>  
> wrote:
>> Nope, just an array;
>>
>> t(x,y) ::= "<x><y>"
>>
>> generates
>>
>> load_local 0
>> write
>> load_local 1
>> write
>>
>> The compiler translates id to int.  For dynamic scoping look up, it  
>> keeps a
>> hashtable but in the template def object not the ST itself. then  
>> you can do
>>
>> locals[impl.formalArgs.get(id).index]
>>
>> to get value if you only have a name.
>>
>> This saves a hashtable per ST :)  memory and gc overhead savings
>>
>> T
>> On Dec 28, 2010, at 2:32 PM, Monty Zukowski wrote:
>>
>>> What's the rationale there?  Is the array key,value,key,value?   
>>> Since
>>> the number of items is usually short, a few equals() calls beats the
>>> hash function?
>>>
>>> Monty
>>>
>>> On Mon, Dec 27, 2010 at 12:54 PM, Terence Parr  
>>> <parrt at cs.usfca.edu> wrote:
>>>>
>>>> fast array not hashmap look up for attributes.
>>>> http://bit.ly/hVN7PG
>>>> Ter
>>>> _______________________________________________
>>>> stringtemplate-interest mailing list
>>>> stringtemplate-interest at antlr.org
>>>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>>>>
>>>>
>>> _______________________________________________
>>> stringtemplate-interest mailing list
>>> stringtemplate-interest at antlr.org
>>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>>
>>


From o.flege at market-maker.de  Wed Dec 29 23:56:21 2010
From: o.flege at market-maker.de (Oliver Flege)
Date: Thu, 30 Dec 2010 08:56:21 +0100
Subject: [stringtemplate-interest] xml rendering problem
Message-ID: <4D1C3B25.5010407@market-maker.de>


Hi,

I use ST for xml rendering and run into the following problem:

ST st = ...
Boolean foo = getFoo(); // foo may be Boolean.TRUE, Boolean.FALSE, or null
st.add("foo", foo);

and the template needs to render

<foo>true</foo> or <foo>false</foo> if foo is defined, or

<foo xsi:nil="true"/> if foo is null

How can I express that in a template?

$if(foo)$
<foo>$foo$</foo>
$else$
<foo xsi:nil="true">
$endif$

does not work as false and null are both evaluated to false in the if statement.
Is there a specific test for null values?

Oliver

From jimi at temporal-wave.com  Thu Dec 30 11:05:12 2010
From: jimi at temporal-wave.com (Jim Idle)
Date: Thu, 30 Dec 2010 11:05:12 -0800
Subject: [stringtemplate-interest] caching getter lookup speedup
In-Reply-To: <0A9DA873-D44F-4FD0-9BEE-CCBD2E5151A9@cs.usfca.edu>
References: <33C96DE5-0B3A-40F0-850C-AF07A4ACB91D@cs.usfca.edu>
	<FCDC95A8-6693-44B4-835C-8B65504AC3C4@abego-software.de>
	<0A9DA873-D44F-4FD0-9BEE-CCBD2E5151A9@cs.usfca.edu>
Message-ID: <67fd3bbb5343a2112107c224f939dc9e@mail.gmail.com>

I think that looking for (bool)hasXXXX is useful though.

Jim

> -----Original Message-----
> From: stringtemplate-interest-bounces at antlr.org [mailto:stringtemplate-
> interest-bounces at antlr.org] On Behalf Of Terence Parr
> Sent: Monday, December 27, 2010 12:10 PM
> To: stringtemplate-interest at antlr.org List
> Subject: Re: [stringtemplate-interest] caching getter lookup speedup
>
> howdy.  I'm nervous about allowing random method names even w/o args.
> I've resisted for 10 years; i should probably stick with it.  useful
> but too easily abused.
> Ter
>
> On Dec 27, 2010, at 11:35 AM, Udo Borkowski wrote:
>
> > Good work!
> >
> > I guess I can now drop my PropertyAdapter stuff and switch to the new
> ModelAdaptor feature.
> >
> >
> > Just a minor thing: when looking for a "by method" implementation of
> a property you check for the methods "getXXX" and "isXXX". While this
> is exactly as defined for JavaBeans I found it useful also to check for
> a method named "XXX". This will also cover properties like "hasFocus",
> "hasParameters", or even "initialValue" implemented by methods
> "hasFocus()", "hasParameters()" or "initialValue()".
> >
> > With this extension to the semantic of the ObjectModelAdapter guys
> like Rafael would not need to write their own Adapter but could just
> refer to every parameterless method of the "bean" as a "property" in
> their template.
> >
> > Apropos "parameterless": After finding a method (in getProperty())
> only parameterless object methods should be accepted.
> >
> > Udo
> >
> >
> >
> > On 26.12.2010, at 20:59, Terence Parr wrote:
> >
> >> ok, added benchmarking code to v4.  Tested speed with and w/o
> Method/Field caching.  about 10x improvement.  Average units of work
> went from 32.77 to 395.22. This is a micro benchmark for property
> lookup.
> >>
> >> timeSimplePropsOfArgs  :   395.24  402.13  399.98  369.82  408.94 =
> 395.22 units of work / ms
> >>
> >> timeSimplePropsOfArgs  :    32.63   32.74   32.68   32.95   32.83 =
> 32.77 units of work / ms
> >>
> >> Now I'm optimizing local attribute (arg) access.  Sam Harwell will
> be happy :)  I'll check those numbers after impl.
> >>
> >> Ter
> >> _______________________________________________
> >> stringtemplate-interest mailing list
> >> stringtemplate-interest at antlr.org
> >> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
> >
> > _______________________________________________
> > stringtemplate-interest mailing list
> > stringtemplate-interest at antlr.org
> > http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest

From parrt at cs.usfca.edu  Fri Dec 31 09:39:42 2010
From: parrt at cs.usfca.edu (Terence Parr)
Date: Fri, 31 Dec 2010 09:39:42 -0800
Subject: [stringtemplate-interest] caching getter lookup speedup
In-Reply-To: <67fd3bbb5343a2112107c224f939dc9e@mail.gmail.com>
References: <33C96DE5-0B3A-40F0-850C-AF07A4ACB91D@cs.usfca.edu>
	<FCDC95A8-6693-44B4-835C-8B65504AC3C4@abego-software.de>
	<0A9DA873-D44F-4FD0-9BEE-CCBD2E5151A9@cs.usfca.edu>
	<67fd3bbb5343a2112107c224f939dc9e@mail.gmail.com>
Message-ID: <8C81DB6E-0F9A-40D8-8AFE-CD5013D3D842@cs.usfca.edu>

Yeah, looking for one more would be easy enough and since we cache now, no cost.  Ok, i'll add.  so a.xxx looks for hasXxx()?

Ter
On Dec 30, 2010, at 11:05 AM, Jim Idle wrote:

> I think that looking for (bool)hasXXXX is useful though.
> 
> Jim
> 
>> -----Original Message-----
>> From: stringtemplate-interest-bounces at antlr.org [mailto:stringtemplate-
>> interest-bounces at antlr.org] On Behalf Of Terence Parr
>> Sent: Monday, December 27, 2010 12:10 PM
>> To: stringtemplate-interest at antlr.org List
>> Subject: Re: [stringtemplate-interest] caching getter lookup speedup
>> 
>> howdy.  I'm nervous about allowing random method names even w/o args.
>> I've resisted for 10 years; i should probably stick with it.  useful
>> but too easily abused.
>> Ter
>> 
>> On Dec 27, 2010, at 11:35 AM, Udo Borkowski wrote:
>> 
>>> Good work!
>>> 
>>> I guess I can now drop my PropertyAdapter stuff and switch to the new
>> ModelAdaptor feature.
>>> 
>>> 
>>> Just a minor thing: when looking for a "by method" implementation of
>> a property you check for the methods "getXXX" and "isXXX". While this
>> is exactly as defined for JavaBeans I found it useful also to check for
>> a method named "XXX". This will also cover properties like "hasFocus",
>> "hasParameters", or even "initialValue" implemented by methods
>> "hasFocus()", "hasParameters()" or "initialValue()".
>>> 
>>> With this extension to the semantic of the ObjectModelAdapter guys
>> like Rafael would not need to write their own Adapter but could just
>> refer to every parameterless method of the "bean" as a "property" in
>> their template.
>>> 
>>> Apropos "parameterless": After finding a method (in getProperty())
>> only parameterless object methods should be accepted.
>>> 
>>> Udo
>>> 
>>> 
>>> 
>>> On 26.12.2010, at 20:59, Terence Parr wrote:
>>> 
>>>> ok, added benchmarking code to v4.  Tested speed with and w/o
>> Method/Field caching.  about 10x improvement.  Average units of work
>> went from 32.77 to 395.22. This is a micro benchmark for property
>> lookup.
>>>> 
>>>> timeSimplePropsOfArgs  :   395.24  402.13  399.98  369.82  408.94 =
>> 395.22 units of work / ms
>>>> 
>>>> timeSimplePropsOfArgs  :    32.63   32.74   32.68   32.95   32.83 =
>> 32.77 units of work / ms
>>>> 
>>>> Now I'm optimizing local attribute (arg) access.  Sam Harwell will
>> be happy :)  I'll check those numbers after impl.
>>>> 
>>>> Ter
>>>> _______________________________________________
>>>> stringtemplate-interest mailing list
>>>> stringtemplate-interest at antlr.org
>>>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>>> 
>>> _______________________________________________
>>> stringtemplate-interest mailing list
>>> stringtemplate-interest at antlr.org
>>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>> 
>> _______________________________________________
>> stringtemplate-interest mailing list
>> stringtemplate-interest at antlr.org
>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest


