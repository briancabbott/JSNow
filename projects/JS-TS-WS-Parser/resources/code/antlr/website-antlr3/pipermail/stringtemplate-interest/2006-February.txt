From Kunle_Odutola at hotmail.com  Sat Feb  4 23:24:32 2006
From: Kunle_Odutola at hotmail.com (Kunle Odutola)
Date: Sat Feb  4 23:08:18 2006
Subject: [stringtemplate-interest] ST# v2.3b5 (C# StringTemplate) now
	available from the website
Message-ID: <BAY101-DAV73A1368789F8B7A6295B5810F0@phx.gbl>

ST# is a new version of StringTemplate for the C#/CLI platform (i.e
Microsoft .NET, Novell Mono, and dotGNU). Although ST# has only been tested
on the Microsoft .NET platform, it should work with little or no change on
the others.

ST# is feature complete with respect to ST 2.3b5 (java) and includes an
*alpha* release of a StringTemplate visualizer. It has a C#-fied API and
features a unique and useful template loader abstraction.

ST# is available from this page on the website:
http://www.stringtemplate.org/share/list


Enjoy!

Kunle


---
Don't talk unless you can improve the silence.
-------------- next part --------------
C# StringTemplate v2.3b5 - a template library that enforces Model-View separation

5 February, 2006

Kunle Odutola		: kunle UNDERSCORE odutola AT hotmail DOT com
Micheal Jordan


1. INTRODUCTION 

A template engine is at it's most basic, a code generator that emits text 
using templates. These templates are really just "documents with holes".
The "holes" are markers for where you can stick values. 

"C# StringTemplate" (or ST#) is a template library that breaks up your 
templates into chunks of text and attribute expressions, which are by 
default enclosed in dollar signs (e.g. $attribute-expression$). It ignores 
everything except attribute expressions. Everthing else is treating it as 
just text to and is simply copied verbatim to the output when you call the 
method ToString() on a StringTemplate instance.

We hope you find ST# delightful and useful even but, as per the license 
under which you may use it, this software is not guaranteed to work. 
See LICENSE.TXT for the full text of the license.

----------------------------------------------------------------------
THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.
----------------------------------------------------------------------


2. WHAT'S IN THE PACK?

This distribution contains four projects and the project files needed to 
build them with Microsoft Visual Studio 2003. The projects are:

	1. StringTemplate			- the core ST# runtime library

	2. StringTemplateTests		- unit tests for the ST# library above

	3. StringTemplateTreeView	- a library for visualizing StringTemplates
								  [Alpha quality release - not reliable]

	4. StringTemplateViewer		- a StringTemplateTreeView demo app
	
In addition the Lib sub-directory contains copies of the ANTLR 2.7.6 runtime 
assemblies. ST# *needs* ANTLR version 2.7.6 or later but, you should probably 
use your own versions of these assemblies if you already have ANTLR 2.7.6.

2.1 Dependenicies

All projects have a dependence on ANTLR 2.7.6 as stated above. In addition, 
StringTemplateTests has a dependency on NUnit v2.2+.


3. BUILDING ST#

If you wish to re-build ST# for any reason, this is what you ned to know.

a) This release of ST# was built with ANTLR 2.7.6. If you change any of the 
ANTLR grammar files supplied with ST#, you will need to use the ANTLR tool to 
regenerate the corresponding C# source files for the Lexer/Parser/TreeParsers. 
The grammar files - all named <something>.g - are in:
	%ST_DIR%\StringTemplate\Antlr.StringTemplate.Language\

b) Then, just use the supplied VS.NET project files to build the projects. 

NOTE: Some of the ANTLR grammar files above trigger a curious bug in ANTLR 2.x 
that can only by fixed by hand. The errors are related to the redefinition of 
a variable. There are about 4-6 such manual fixes required although the number 
of error/warning messages you get may be more than that. Errors are:

	CS0128: A local variable named 'variable' is already defined in this scope
	CS0136: A local variable named 'var' cannot be declared in this scope because 
	        it would give a different meaning to 'var', which is already used in 
	        a 'parent or current' scope to denote something else


4. ST# STATUS

This release of ST# is a beta release (ST# TreeView visualizer is an Alpha release). 
ST# itself is mostly feature complete for the upcoming 2.3 release but expect a few 
rough edges. 

There are currently about 2-3 failures in the unit test suite out of about 190 cases.


Don't forget to visit the www.stringtemplate.org for further info. The mailing list is 
(currently) very low volume but has a very high Signal-to-Noise ratio. We'd like to 
hear about how you're using ST#.


Enjoy!

Kunle Odutola
From parrt at cs.usfca.edu  Mon Feb  6 10:31:12 2006
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon Feb  6 10:31:14 2006
Subject: [stringtemplate-interest] ST# v2.3b5 (C# StringTemplate) now
	available from the website
In-Reply-To: <BAY101-DAV73A1368789F8B7A6295B5810F0@phx.gbl>
References: <BAY101-DAV73A1368789F8B7A6295B5810F0@phx.gbl>
Message-ID: <2DA89470-4613-4CD0-812E-86300A20B381@cs.usfca.edu>

Hi Kunle, awesome!
Ter
On Feb 4, 2006, at 11:24 PM, Kunle Odutola wrote:

> ST# is a new version of StringTemplate for the C#/CLI platform (i.e
> Microsoft .NET, Novell Mono, and dotGNU). Although ST# has only  
> been tested
> on the Microsoft .NET platform, it should work with little or no  
> change on
> the others.
>
> ST# is feature complete with respect to ST 2.3b5 (java) and  
> includes an
> *alpha* release of a StringTemplate visualizer. It has a C#-fied  
> API and
> features a unique and useful template loader abstraction.
>
> ST# is available from this page on the website:
> http://www.stringtemplate.org/share/list
>
>
> Enjoy!
>
> Kunle
>
>
> ---
> Don't talk unless you can improve the silence.
> <README.TXT>
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest@antlr.org
> http://www.antlr.org:8080/mailman/listinfo/stringtemplate-interest

From parrt at cs.usfca.edu  Mon Feb  6 11:10:52 2006
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon Feb  6 11:13:19 2006
Subject: [stringtemplate-interest] ST# v2.3b5 (C# StringTemplate) now
	available from the website
In-Reply-To: <BAY101-DAV73A1368789F8B7A6295B5810F0@phx.gbl>
References: <BAY101-DAV73A1368789F8B7A6295B5810F0@phx.gbl>
Message-ID: <1E6FCD74-392A-420C-85BF-C02E78A50EA2@cs.usfca.edu>

Hi again Kunle, how does this relate to Luis Leal's work?  Same  
development branch?

Ter
From Kunle_Odutola at hotmail.com  Mon Feb  6 11:40:02 2006
From: Kunle_Odutola at hotmail.com (Kunle Odutola)
Date: Mon Feb  6 11:23:40 2006
Subject: [stringtemplate-interest] ST# v2.3b5 (C# StringTemplate)
	nowavailable from the website
References: <BAY101-DAV73A1368789F8B7A6295B5810F0@phx.gbl>
	<1E6FCD74-392A-420C-85BF-C02E78A50EA2@cs.usfca.edu>
Message-ID: <BAY101-DAV7CF2BE522A634BE4D7AB5810E0@phx.gbl>


> Hi again Kunle, how does this relate to Luis Leal's work?  Same
> development branch?

No. It is an independent port and, it's C#-fied API means it isn't a drop-in
replacement for the Steve Sarandos/Luis Leal port.

Micheal added both to depot (Luis's under release 2.2, ST# is main).

Cheers,

Kunle
From pw_lists at slinkp.com  Mon Feb  6 16:53:37 2006
From: pw_lists at slinkp.com (Paul Winkler)
Date: Mon Feb  6 16:53:51 2006
Subject: [stringtemplate-interest] Automatically extracting sub-templates?
	(LONG)
Message-ID: <20060207005337.GB16561@slinkp.com>

Hi,

I've just today discovered StringTemplate, and am doing preliminary
evaluations of it for company-wide templating. We are building
a large website based on a service-oriented architecture where
some services may be implemented in Java app servers, some may
be Python, etc.  Most of our output will initially be HTML,
but we may target unspecified formats in the future.
So a portable, flexible templating language that allows the
same templates to be used on different platforms / languages
is very desirable.  I like the "push" model too.

My question is this:
Can anyone think of an easy way to automatically extract
sub-templates, given a large template?

Use case:
Designer creates full-page HTML mockup.
Designer creates StringTemplate markup based on that HTML mockup.
Each app renders only small fragments of that page, which are 
assembled by a controller.  

(I'm sure somebody will jump in and say that each app should
only be returning XML or JSON or something, and only one central
view layer should have anything to do with HTML. Yes, well, we may yet
do that, and I'm not even on the architecture team; meanwhile this is
what I've been tasked with investigating.)

Now, I don't want the apps to have to know how to extract just the part
of the template they are interested in and throw away the rest. 
That seems like unnecessary responsibility for each app.
So it would be better to factor out the template into sub-templates
and each app will only use a small template tailor-made for its
fragment of the page.

But neither do I want us to have to manually rewrite some or all of
those subtemplates whenever the visual design changes.  
I've been down the road of
pages-assembled-from-lots-of-tiny-manually-maintained-fragments, and I
do not like it; too fragile, and a pain to figure out which bit of
markup came from which template.

So, I'd prefer to automatically extract the subtemplates whenever the
master template is changed.  There is a layout management application in
this architecture, and it knows which apps are responsible for which
"slots", so it could be given this responsibility.
  
What I'm trying to figure out is whether there is any feature of
StringTemplate itself that I could leverage for doing the extraction.
I haven't seen any yet, and from all the docs and examples I've seen so
far, it seems not part of the paradigm; "document with holes in
it" doesn't map well to "tree from which you can pick off
branches and treat them as new trees".

So I'm guessing I may need some other tool and/or mix in some other
markup to do this extraction.  Which shouldn't be hard, but:

Am I missing something? 

FWIW, the other approach we are considering is what we are calling
"element labeling" - a generic name we've given to the approaches taken
by XMLC, PyMeld, and Amrita (and maybe others?).  In that approach, the
nodes are identified by ID; no other special markup goes in the
templates at all; and some view class is responsible for loading the
template and doing something with those nodes.  Very clean separation,
and again it gives us cross-platform templates.  In that approach, it
would be trivial to extract nodes and spit them out as sub-templates.
The down side is that you end up with a fair amount of rather verbose
code in your view classes. (At the same time it reduces the workload for
the HTML designers, so the decision is partly one of human resource
management.)

Would also be interested in strategies others have discovered
in similar scenarios.

-- 

Paul Winkler
http://www.slinkp.com
From parrt at cs.usfca.edu  Wed Feb  8 14:25:35 2006
From: parrt at cs.usfca.edu (Terence Parr)
Date: Wed Feb  8 14:25:43 2006
Subject: [stringtemplate-interest] Re: [antlr-interest] Zero based $i$ index
	in StringTemplate 
In-Reply-To: <12561.195.169.118.236.1138806051.squirrel@webmail.xs4all.nl>
References: <12561.195.169.118.236.1138806051.squirrel@webmail.xs4all.nl>
Message-ID: <7C94B3F7-917E-477F-A64A-10F1B1EB6808@cs.usfca.edu>


On Feb 1, 2006, at 7:00 AM, Gevik Babakhani wrote:

> I was wondering why we are using 1 based index in
> ASTExpr.java, function applyListOfAlternatingTemplates at
> argumentContext.put(DEFAULT_INDEX_VARIABLE_NAME, new Integer(i+1));
>
> isn't 0 based index "new Integer(i)" better?

I was thinking of adding i0 as well as i.  1 is what humans expect.   
0 is what computers need but since you can't index in ST no need for  
0 based often. ;)

Ter

From florian.heidenreich at inf.tu-dresden.de  Thu Feb  9 06:02:01 2006
From: florian.heidenreich at inf.tu-dresden.de (Florian Heidenreich)
Date: Thu Feb  9 06:02:19 2006
Subject: [stringtemplate-interest] Template overloading
Message-ID: <43EB4B59.6040306@inf.tu-dresden.de>

Hello!

I'm currently writing a SQL code generator using StringTemplate.

One idea I had is to build a StringTemplateGroup for Standard SQL and 
overload dialect specific templates in a child group (e.g. for MySQL or 
Oracle). My goal is to replace/overload the specific templates from 
Standard SQL with the ones from the specific dialect while keeping the 
templates which are equal in both versions.

Is this possible with StringTemplate and if so, how can I achieve that?

Thank you!

Best regards,
~ Florian
From Andrew.Goodnough at wicourts.gov  Thu Feb  9 07:16:32 2006
From: Andrew.Goodnough at wicourts.gov (Andrew Goodnough)
Date: Thu Feb  9 07:16:48 2006
Subject: [stringtemplate-interest] Template overloading
In-Reply-To: <43EB4B59.6040306@inf.tu-dresden.de>
References: <43EB4B59.6040306@inf.tu-dresden.de>
Message-ID: <43EB0870.954F.0081.0@wicourts.gov>

I've done exactly this for generating database-specific SQL.  We are
switching from Sybase to Postgres so we have a need to create both.  I
created 3 templates:

sybase.stg    //Contains sybase-specific templates
postgres.stg //Contains postgres-specific templates
shared.stg    //Contains db agnostic templates

You will probably want to put most of the template code in the shared
template group file and only use the db specific template when you find
some syntax that is not general.  The shared.stg tends to contain the
outline of what needs to be done while the specific template does the
real work.  Like:

-shared.stg-
doStuff(userType) ::= <<
--START SCRIPT--
<userType:dropUserType()>
--END SCRIPT--
>>

-sybase.stg-
delim() ::= "<\n>GO"

dropUserType() ::= <<
EXEC sp_droptype '<it.name>'<delim()>
>>

-postgres.stg-
delim() ::= ";"

dropUserType() ::= <<
DROP DOMAIN '<it.name>'<delim()>
>>


The Java code uses the standard super group idea:
====
        InputStream sharedIs =
getClass().getResourceAsStream("shared.stg");
        sharedReader = new InputStreamReader(sharedIs);
        StringTemplateGroup sharedTemplates = new
StringTemplateGroup(sharedReader, AngleBracketTemplateLexer.class);
        
        InputStream specificIs = getClass().getResourceAsStream(dbms +
".stg");  // dbms can be 'sybase' or 'postgres'
        specificReader = new InputStreamReader(specificIs);
        StringTemplateGroup specificTemplates = new
StringTemplateGroup(specificReader, AngleBracketTemplateLexer.class);
        specificTemplates.setSuperGroup(sharedTemplates);
        
        StringTemplate fileTpl =
specificTemplates.getInstanceOf(templateName);
==== 

I've implemented a lot of logic in Java Beans that I pass to my
templates to render.  I've got quite a bit of DDL and DML working in
production so if you start going down this road in earnest, I can send
you my templates and code if you like.

Andy Goodnough
Wisconsin Courts
http://wicourts.gov/


>>> Florian Heidenreich <florian.heidenreich@inf.tu-dresden.de>
02/09/06 8:02 am >>> 
Hello!

I'm currently writing a SQL code generator using StringTemplate.

One idea I had is to build a StringTemplateGroup for Standard SQL and 
overload dialect specific templates in a child group (e.g. for MySQL or

Oracle). My goal is to replace/overload the specific templates from 
Standard SQL with the ones from the specific dialect while keeping the

templates which are equal in both versions.

Is this possible with StringTemplate and if so, how can I achieve
that?

Thank you!

Best regards,
~ Florian
_______________________________________________
stringtemplate- interest mailing list
stringtemplate- interest@antlr.org
http://www.antlr.org:8080/mailman/listinfo/stringtemplate- interest

From florian.heidenreich at inf.tu-dresden.de  Thu Feb  9 09:57:18 2006
From: florian.heidenreich at inf.tu-dresden.de (Florian Heidenreich)
Date: Thu Feb  9 09:57:41 2006
Subject: [stringtemplate-interest] Template overloading
In-Reply-To: <43EB0870.954F.0081.0@wicourts.gov>
References: <43EB4B59.6040306@inf.tu-dresden.de>
	<43EB0870.954F.0081.0@wicourts.gov>
Message-ID: <43EB827E.7030201@inf.tu-dresden.de>

Andrew,

thank you very much for your helpful feedback. I was looking for real 
template overloading and found a solution using the setSuperGroup method 
of the StringTemplateGroup.

This is what I'm doing:

// File 'testGeneral.stg'
group testGeneral;

general() ::= <<
generalTemplate
 >>

specific() ::= <<
generalTemplate
 >>


// File 'testSpecific.stg'
group testSpecific;

specific() ::= <<
specificTemplate
 >>


Testing template overloading:

Reader generalReader = new 
FileReader(ClassLoader.getSystemClassLoader().getResource("test/testGeneral.stg").getFile());
StringTemplateGroup general = new StringTemplateGroup(generalReader);
						
Reader specificReader = new 
FileReader(ClassLoader.getSystemClassLoader().getResource("test/testSpecific.stg").getFile());
StringTemplateGroup specific = new StringTemplateGroup(specificReader);
					
specific.setSuperGroup(general);
						
StringTemplate generalTemplate1 = specific.getInstanceOf("general");
assertEquals(generalTemplate1.toString(), "generalTemplate");
						
StringTemplate specificTemplate1 = specific.getInstanceOf("specific");
assertEquals(specificTemplate1.toString(), "specificTemplate");


Thank you!

Best regards,
~ Florian



Andrew Goodnough wrote:
> I've done exactly this for generating database-specific SQL.  We are
> switching from Sybase to Postgres so we have a need to create both.  I
> created 3 templates:
> 
> sybase.stg    //Contains sybase-specific templates
> postgres.stg //Contains postgres-specific templates
> shared.stg    //Contains db agnostic templates
> 
> You will probably want to put most of the template code in the shared
> template group file and only use the db specific template when you find
> some syntax that is not general.  The shared.stg tends to contain the
> outline of what needs to be done while the specific template does the
> real work.  Like:
> 
> -shared.stg-
> doStuff(userType) ::= <<
> --START SCRIPT--
> <userType:dropUserType()>
> --END SCRIPT--
> 
> -sybase.stg-
> delim() ::= "<\n>GO"
> 
> dropUserType() ::= <<
> EXEC sp_droptype '<it.name>'<delim()>
> 
> -postgres.stg-
> delim() ::= ";"
> 
> dropUserType() ::= <<
> DROP DOMAIN '<it.name>'<delim()>
> 
> 
> The Java code uses the standard super group idea:
> ====
>         InputStream sharedIs =
> getClass().getResourceAsStream("shared.stg");
>         sharedReader = new InputStreamReader(sharedIs);
>         StringTemplateGroup sharedTemplates = new
> StringTemplateGroup(sharedReader, AngleBracketTemplateLexer.class);
>         
>         InputStream specificIs = getClass().getResourceAsStream(dbms +
> ".stg");  // dbms can be 'sybase' or 'postgres'
>         specificReader = new InputStreamReader(specificIs);
>         StringTemplateGroup specificTemplates = new
> StringTemplateGroup(specificReader, AngleBracketTemplateLexer.class);
>         specificTemplates.setSuperGroup(sharedTemplates);
>         
>         StringTemplate fileTpl =
> specificTemplates.getInstanceOf(templateName);
> ==== 
> 
> I've implemented a lot of logic in Java Beans that I pass to my
> templates to render.  I've got quite a bit of DDL and DML working in
> production so if you start going down this road in earnest, I can send
> you my templates and code if you like.
> 
> Andy Goodnough
> Wisconsin Courts
> http://wicourts.gov/
> 
> 
>>>> Florian Heidenreich <florian.heidenreich@inf.tu-dresden.de>
> 02/09/06 8:02 am >>> 
> Hello!
> 
> I'm currently writing a SQL code generator using StringTemplate.
> 
> One idea I had is to build a StringTemplateGroup for Standard SQL and 
> overload dialect specific templates in a child group (e.g. for MySQL or
> 
> Oracle). My goal is to replace/overload the specific templates from 
> Standard SQL with the ones from the specific dialect while keeping the
> 
> templates which are equal in both versions.
> 
> Is this possible with StringTemplate and if so, how can I achieve
> that?
> 
> Thank you!
> 
> Best regards,
> ~ Florian
> _______________________________________________
> stringtemplate- interest mailing list
> stringtemplate- interest@antlr.org
> http://www.antlr.org:8080/mailman/listinfo/stringtemplate- interest
From parrt at cs.usfca.edu  Tue Feb 14 14:40:23 2006
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue Feb 14 14:40:28 2006
Subject: [stringtemplate-interest] who asked me to do setFileCharEncoding in
	ST?
Message-ID: <74159106-C6F1-43BA-A251-BB3128C1BC4E@cs.usfca.edu>

Hi, i am doing a paper on i18n for ST and i want to credit the man or  
woman that suggested I add setFileCharEncoding to ST groups...can  
anybody remind me who that was?  I was there at least in April 2004  
so probalby the Jan 2005 (2.1?) release.

I have it down as Anton Keks that gave me the idea of mapping type to  
renderer.  If somebody else helped, please let me konw.  Paper is due  
Fri.

Ter
From parrt at cs.usfca.edu  Wed Feb 15 12:07:42 2006
From: parrt at cs.usfca.edu (Terence Parr)
Date: Wed Feb 15 12:07:45 2006
Subject: [stringtemplate-interest] please review: internationalization and
	localization paper
Message-ID: <19798C73-DD2B-456C-A13F-5E704DF0E8E6@cs.usfca.edu>

Howdy,

I'm submitting a paper on StringTemplate for ICWE06 conference:

http://www.cs.usfca.edu/~parrt/papers/i18n.pdf

and I could use your feedback.  Goes in depth about how ST deals with  
nasty i18n problems.

Deadline for submission is Fri ;)

Ter
From brady at sun.ac.za  Thu Feb 16 09:36:02 2006
From: brady at sun.ac.za (Richard Brady)
Date: Thu Feb 16 09:34:36 2006
Subject: [stringtemplate-interest] Documentation with diagrams
Message-ID: <43F4B802.7060502@sun.ac.za>

Hi all

Just started out with ANTLR and StringTemplate and am impressed by both 
so far. Struggling a bit with the basics of StringTemplate. Are there 
any tutorials with diagrams?

Thanks,
Richard
From parrt at cs.usfca.edu  Thu Feb 16 12:22:30 2006
From: parrt at cs.usfca.edu (Terence Parr)
Date: Thu Feb 16 12:22:47 2006
Subject: [stringtemplate-interest] fingers need rest
Message-ID: <99622A73-0635-43CE-AB69-AAD68DAC3731@cs.usfca.edu>

hi. I'm learning dvorak and resting inflamed fingers...i may not be  
able to respond to emails for a bit :(

Ter
From parrt at cs.usfca.edu  Thu Feb 16 12:22:30 2006
From: parrt at cs.usfca.edu (Terence Parr)
Date: Thu Feb 16 14:09:48 2006
Subject: [stringtemplate-interest] [antlr-interest] fingers need rest
Message-ID: <99622A73-0635-43CE-AB69-AAD68DAC3731@cs.usfca.edu>

hi. I'm learning dvorak and resting inflamed fingers...i may not be  
able to respond to emails for a bit :(

Ter
From Kunle_Odutola at hotmail.com  Thu Feb 23 22:02:04 2006
From: Kunle_Odutola at hotmail.com (Kunle Odutola)
Date: Thu Feb 23 21:45:36 2006
Subject: [stringtemplate-interest] ANN: StringTemplate View and Transform
	Library for Maverick.NET now available
Message-ID: <BAY101-DAV13D8487EFE0A1D9CA1A18E81F30@phx.gbl>

Maverick.View.StringTemplate v0.1.0 has been released. This library adds a
StringTemplate.NET View and Transform to the Maverick.NET MVC framework. It
basically allows Maverick.NET views to be developed as StringTemplate.NET
template files. Maverick.View.StringTemplate is developed in C#, it can be
used with projects developed in other .NET languages such as VB.NET,
C++.NET, JScript.NET and J#.

Maverick.NET (or MavNet) is a lightweight, Model-View-Controller (MVC)
framework for web applications on the .NET and Mono platforms. It is a
minimalist MVC framework that concentrates on the management of MVC workflow
in web applications. It's basic usage can be learned
in only a few hours. Maverick.NET is highly configurable and is entirely
agnostic of view templating technologies.

StringTemplate.NET (or ST#) is an MVC templating library for structured text
output. It is designed help designers and development with the task of
creating dynamically-generated text output such as web pages. Use of ST# in
web applications ensures the application's business logic is separated from
it's presentation because ST# strictly enforces Model-View separation. This
helps to promote modularity, reuse of system components and results in
systems that are more flexible and easy to change.

Maverick.View.StringTemplate, Maverick.NET and StringTemplate.NET all run on
the C#/CLI platform (i.e Microsoft .NET, Novell Mono, and dotGNU). Although
Maverick.View.StringTemplate has only been tested on the Microsoft .NET
platform, it should work with little or no change on the others.
Maverick.View.StringTemplate is feature-complete.

Maverick.View.StringTemplate is available from this page on the
StringTemplate website:

 http://www.stringtemplate.org/share/list


Maverick.NET is at:   http://mavnet.sourceforge.net/
StringTemplate.NET is at:  http://www.stringtemplate.org/


Enjoy!

Kunle


-- 
"The world responds to action, and not much else."

    -Scott Adams
-------------- next part --------------
Maverick.View.StringTemplate - ST# View and Transform for Maverick.NET

20 February, 2006

Kunle Odutola		: kunle UNDERSCORE odutola AT hotmail DOT com
Anthony Oguntimehin


1. INTRODUCTION 

Maverick.NET (or MavNet) is a lightweight, Model-View-Controller (MVC)
framework for web applications on the .NET and Mono platforms. It is
a minimalist MVC framework because it concentrates on the management 
of MVC workflown in web applications. Consequently, it's basic usage 
can be learned in only a few hours. Paradoxically, Maverick.NET is 
highly configurable and - most relevant to us here - is entirely 
agnostic of view tmplating technologies.

StringTemplate.NET (or ST#) is an MVC templating library for structured 
text output. It is designed help designers and development with the task 
of creating dynamically-generated text output such as web pages. Use of 
ST# in web applications ensures the application's business logic is 
separated from it's presentation. Model-View separation as this is known 
promotes modularity and reuse of system components and, results in systems 
that are more flexible and easy to change.

We hope you find Maverick.Views.StringTemplate delightful and useful even 
but, as per the license under which you may use it, this software is not 
guaranteed to work. See LICENSE.TXT for the full text of the license.


2. WHAT'S IN THE PACK?

This distribution contains two projects and the project files needed to 
build them with Microsoft Visual Studio 2003. The projects are:

	1. Maverick.View.StringTemplate
	
	   This project adds one ST# view and one ST# transform to 
	   Maverick.NET. The transform allows one view to wrap another.

	2. FriendBook-ST
	
	   This project is a version of the FriendBook sample application 
	   included in Maverick.NET that uses the ST# view and transform 
	   from the above project.
	
In addition the Lib sub-directory contains copies of the assemblies that 
these projects depend on:
	- ANTLR v2.7.6 runtime 
	- StringTemplate v2.3b5
	- Maverick.NET v1.2.0.1
	- Log4net v1.2.9.0
If you already have the same (or later) versions of these assemblies, you 
should probably alter the project to use your version once you've verified 
that everything works fine in your environment.


3. RUNNING FriendBook-ST

The following instructions are only directly applicable if you plan to run 
under IIS on either Windows 2000, XP or 2003. Needless to say, you need to 
have the .NET framework installed on the computer too.

a.	EXTRACT FILES
	Since you are reading this, it is perhaps reasonable to assume you've 
	already extract that contents of the archive to a location on your 
	computer. If not, please do so now. We will refer to this location 
	(the root directory of the extracted files) later as "MAV_ST_HOME".
b.	CREATE VIRTUAL DIRECTORY
	Use the IIS Manager application to create a new virtual directory named
	"FriendBook-ST" that points to the "Maverick.Examples.FriendBook-ST" dir
	under MAV_ST_HOME (the directory in which you extracted the files).
	i.e.  "FriendBook-ST" -> "MAV_ST_HOME/Maverick.Examples.FriendBook-ST"
c.	CONFIGURE VIRTUAL DIRECTORY
	Right-click on the folder of your newly created virtual directory and
	open it's properties dialog. On the directories (or virtual directory) 
	tab, click the button marked "Create" to create the application if it 
	hasn't been created.
d.  REDIRECT *.m REQUESTS TO ASPNET_ISAPI.DLL
	Still on the properties dialog, click the "Configuration" button. 
	Click "Add" on the "Mappings" tab of the Configuration dialog. 
	Choose "aspnet_isapi.dll" as the executable to map to.
	Enter .m as the extension and make sure that the "Check file exists" 
	checkbox is unchecked.
	Click OK.

You should now be able to open the project files in MS Visual Studio 2003 
and build the projects. Once you've done that, you can run the FriendBook-ST 
application by pointing your web browser to:

	http://localhost/FriendBook-ST/


4. USING Maverick.View.StringTemplate

You can use Maverick.View.StringTemplate in your own projects, as both View 
and Transform if you so wish. You need to configure Maverick.NET to use them 
on a per-project basis. Add either or both of the following entries to the 
<modules> section of you Maverick.NET configuration file (usually named 
maverick.config):

	<view-factory 
		type="st" 
		provider="Maverick.Opt.View.StringTemplateViewFactory,Maverick.View.StringTemplate">
	</view-factory>
	
	<transform-factory 
		type="stwrap" 
		provider="Maverick.Opt.Transform.StringTemplateWrapTransformFactory,Maverick.View.StringTemplate">
	</transform-factory>

To make Maverick.View.StringTemplate the default type for views or transforms, 
modify the "default-view-type" and/or "default-transform-type" attributes in 
the top-level <maverick> element as shown below:
	
	<maverick version="2.0" default-view-type="st" default-transform-type="stwrap">
		......
	</maverick>


You can define a view and transform as follows (note that paths do NOT include 
the extension ".st"):

	<view path="Views/welcome" type="st">
		<transform path="Transforms/trimOutside" type="stwrap" />
	</view>


Don't forget to add the relevant references to your project. See FriendBook-ST 
for an example.


5. Maverick.View.StringTemplate STATUS

This release of Maverick.View.StringTemplate is a beta release albeit 
a robust and fairly well-tested beta release. Nevertheless, you should 
keep in mind that:
a) StringTemplate.NET is unforgiving of syntax errors and such-like.
b) StringTemplate.NET (and Maverick.View.StringTemplate by extension) 
   is **strict** in enforcing Model-View separation. Now, this is a 
   ReallyGoodThing(tm) in our opinion.
   As a matter of fact, all other versions of the FriendBook sample 
   application either do not properly enforce Model-View separation 
   (the ASP.NET WebForms and NVelocity vm & dvsl versions) or, do not 
   fully implement all the functionality in the original (xsl version).
   We suspect this was simply because the underlying view templating
   technology did not prevent attempts to breach that separation. 
   Comparing these other versions to FriendBook-ST might be an interesting 
   exercise.
c) Maverick.View.StringTemplate (and StringTemplate.NET) is in beta.

Don't forget to visit www.stringtemplate.org and mavnet.sourceforge.net
for further info. The mailing lists of both projects is (currently) low 
volume with a high Signal-to-Noise ratio. We'd like to hear about how 
you're using Maverick.NET with StringTemplate.NET.


6. CONTRIBUTORS

Kunle Odutola			-- developer/tester
Anthony Oguntimehin		-- developer/tester



Enjoy!

Kunle Odutola
Anthony Oguntimehin
From parrt at cs.usfca.edu  Fri Feb 24 12:51:11 2006
From: parrt at cs.usfca.edu (Terence Parr)
Date: Fri Feb 24 12:50:52 2006
Subject: [stringtemplate-interest] Documentation with diagrams
In-Reply-To: <43F4B802.7060502@sun.ac.za>
References: <43F4B802.7060502@sun.ac.za>
Message-ID: <F4D8F409-0AE6-4809-9EC5-1AC5B871CE54@cs.usfca.edu>


On Feb 16, 2006, at 9:36 AM, Richard Brady wrote:

> Hi all
>
> Just started out with ANTLR and StringTemplate and am impressed by  
> both so far. Struggling a bit with the basics of StringTemplate.  
> Are there any tutorials with diagrams?

unfortunately we do not have the diagrams on the other hand we do  
have a number of fairly decent articles if you look at the articles  
section.

Ter
