From parrt at cs.usfca.edu  Tue Apr  1 11:59:31 2008
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue, 1 Apr 2008 11:59:31 -0700
Subject: [stringtemplate-interest] template existence testing
In-Reply-To: <20080331224153.GA7226@freedbms.net>
References: <20080329124330.GN8764@freedbms.net>
	<4E37D0DE-60EB-48CA-BD56-5533CDB1602E@cs.usfca.edu>
	<20080330073308.GA25757@freedbms.net>
	<1A44D263-3AED-445D-91AB-AF27ADE706D0@cs.usfca.edu>
	<20080331224153.GA7226@freedbms.net>
Message-ID: <E428E492-A7FE-4765-8E7F-FB5879DD217F@cs.usfca.edu>


On Mar 31, 2008, at 3:41 PM, Zenaan Harkness wrote:
> As you correctly point out, overriding a template is exactly what I  
> want
> to do.
>
> BUT !!  I don't know the name of the template I want to override in
> advance

No problem. use template ref indirection.

<(name)()>	inserts instance of template "x" if "name"->"x" in the  
attribute table

vs

<name()>	inserts  Instance of template called "name"

> ((at least, the view does not know, and the view should not have
> any deep knowledge of the data Model, at least as much as possible,  
> and
> putting this in the view would cause an explosion of data model
> knowledge in the view, where there should be none)),

Yep, the model can push in the name of the template no problem.  I  
have another user that does this very thing to decide how to display  
something.

> As you can see, not only am I currently caused to put very
> model-specific knowledge in my [java|csharp|perl]-lib.stg template
> groups, but it would also obviously cause the unnecessary explosion in
> number of templates mentioned above.

See if the indirection thing helps you.  It gives you a great deal of  
flexibility: you get indirection as well as polymorphism combined :)

Ter

From zen at freedbms.net  Tue Apr  1 15:32:21 2008
From: zen at freedbms.net (Zenaan Harkness)
Date: Wed, 2 Apr 2008 09:32:21 +1100
Subject: [stringtemplate-interest] template existence testing
In-Reply-To: <E428E492-A7FE-4765-8E7F-FB5879DD217F@cs.usfca.edu>
References: <20080329124330.GN8764@freedbms.net>
	<4E37D0DE-60EB-48CA-BD56-5533CDB1602E@cs.usfca.edu>
	<20080330073308.GA25757@freedbms.net>
	<1A44D263-3AED-445D-91AB-AF27ADE706D0@cs.usfca.edu>
	<20080331224153.GA7226@freedbms.net>
	<E428E492-A7FE-4765-8E7F-FB5879DD217F@cs.usfca.edu>
Message-ID: <20080401223221.GA11556@freedbms.net>

On Tue, Apr 01, 2008 at 11:59:31AM -0700, Terence Parr wrote:
>
> On Mar 31, 2008, at 3:41 PM, Zenaan Harkness wrote:
>> As you correctly point out, overriding a template is exactly what I want
>> to do.
>>
>> BUT !!  I don't know the name of the template I want to override in
>> advance
>
> No problem. use template ref indirection.
>
> <(name)()>	inserts instance of template "x" if "name"->"x" in the attribute 
> table

Yes, here's the extract from my first email in this thread:

   > <if( st_exists("att_"+a.attributeName) )>
   >    // we have a specialization for this method, include
   >    // attribute-specific specialization code:
   >    <("att_"+a.attributeName)()>
   >    //alternatively:
   >    <({att_<a.attributeName>})()>
   > <else>
   >    return a.attributeName;
   > <endif>
   > 
   > Barring the if conditional of course -
   > st_exists("att_"+a.attributeName).

>> ((at least, the view does not know, and the view should not have
>> any deep knowledge of the data Model, at least as much as possible, and
>> putting this in the view would cause an explosion of data model
>> knowledge in the view, where there should be none)),
>
> Yep, the model can push in the name of the template no problem.  I have 
> another user that does this very thing to decide how to display something.

And in response to this (model pushing in template name as an
attribute), here's this from my first email too:

   > It is possible to put a boolean in the Model, but that would
   > violate my MVC: specializations depend purely on the specific
   > template being used.  The model simply should not know or care
   > whether there is an attribute method body specialization - it is a
   > view specific thing.

>> As you can see, not only am I currently caused to put very
>> model-specific knowledge in my [java|csharp|perl]-lib.stg template
>> groups, but it would also obviously cause the unnecessary explosion in
>> number of templates mentioned above.
>
> See if the indirection thing helps you.  It gives you a great deal of 
> flexibility: you get indirection as well as polymorphism combined :)

So, yes, template indirection is something I'm using, and gets me half
way there:

The problem is, as you correctly point out above, "the model can push in
the name of the template", so I could assume _every_ attribute of every
model possibly has a specialization, so that my model does not have to
have knowledge of which attributes' rendered outputs specifically require
specialization, and instead the Driver simply assumes they _all_ do,

but if the (specialization) template does not exist then there's an
attempt in ST to render a template which doesn't exist, and I get the
following error:

java.lang.IllegalArgumentException: Can't find template att_cowsOnFarm.st

So,
   it is the output-language template specialization view (template) and
   this view only, for a particular (model attribute, output language -
   Java, C$, perl) combination _only_ (not the model, and not the
   java-lib generic template group), which needs to know that there is a
   specialization of a particular model attribute's template
   (and the parent java-lib.stg template does not know the name of that
   "overidden" template in the template specialization view in advance -
   that would be unnecessary deep model knowledge embedded in the view
   and I don't know how to make it work without (and which you also
   suggested above) putting the specialization template name into the
   model, which would require the model to know _which_ views
   (templates) are implementing specializations for _which_ model
   attributes, which is an MVC separation violation in reverse)

There are three solutions:

Option 1)
Have an attribute-specific template for every attribute in the model, so
that the appropriate attribute's template can be overridden by a
particular view specialization template (Java, C#, perl) iff required.
   -  causes model-specific knowledge to be in the view, can be
      mitigated with an intermediate lib template group
   -  causes explosion in number of templates (at least in the
      intermediate (model-specific) lib template group, most of which
      are not used
   -  causes the driver (or the model) to have to insert the various
      attribute specialization template names (for each attribute of
      each model)), as attributes into the ST, most of which are never
      used
      -  if in the model, violates MVC separation

Option 2)
Have the specialization view (for a particular model) override the
generic attGetter(a) template:
   -  reduces (at least marginally) the number of unused attribute
      specialization templates (system-wide reduction, since some models
      won't have any specializations)
   -  still requires the model, or driver, to insert template-names (as
      attributes in ST view) for such models, which requires a flag in
      that model to say thisModelMightHaveSpecializations, which is
      getting model specific (minor MVC violation), and I imagine would
      ultimately degenerate into Option 1)  ("many models have at least
      one specialization in at least one of the output language views,
      so let's just assume they all do, as it simplifies the code")

Option 3)
Have a facility (in the driver, or directly in the template engine)
which can test for the existence of an arbitrary, name not known in
advance, template, and only _if_ it exists, execute this template, thus
avoiding the "template not found" ST error:
   -  requires implementation of template lookup table
      -  if in ST engine, requires no external support, can be used in
         simple cases where people might not be bothered normally to
         implement the functionality in the driver
      -  if in driver, can have system-wide, load-lookup-table-once
         efficiencies; this is merely a performance optimization if the
         facility otherwise exists in the ST engine

-- 
Homepage: www.SoulSound.net -- Free Australia: www.UPMART.org
Please respect the confidentiality of this email as sensibly warranted.

From zen at freedbms.net  Wed Apr  2 16:34:01 2008
From: zen at freedbms.net (Zenaan Harkness)
Date: Thu, 3 Apr 2008 10:34:01 +1100
Subject: [stringtemplate-interest] template existence testing
In-Reply-To: <20080401223221.GA11556@freedbms.net>
References: <20080329124330.GN8764@freedbms.net>
	<4E37D0DE-60EB-48CA-BD56-5533CDB1602E@cs.usfca.edu>
	<20080330073308.GA25757@freedbms.net>
	<1A44D263-3AED-445D-91AB-AF27ADE706D0@cs.usfca.edu>
	<20080331224153.GA7226@freedbms.net>
	<E428E492-A7FE-4765-8E7F-FB5879DD217F@cs.usfca.edu>
	<20080401223221.GA11556@freedbms.net>
Message-ID: <20080402233401.GA8972@freedbms.net>

> Option 3)
> Have a facility (in the driver, or directly in the template engine)
> which can test for the existence of an arbitrary, name not known in
> advance, template, and only _if_ it exists, execute this template, thus
> avoiding the "template not found" ST error:

I'm in the middle of hacking up a method in my driver, making use of the
existing ST facilities (getTemplateNames(), getSuperGroup()), to create
the functionality I am after.

If anyone needs such a beast, let me know and I'll see about tidying it
up.

Zen

-- 
Homepage: www.SoulSound.net -- Free Australia: www.UPMART.org
Please respect the confidentiality of this email as sensibly warranted.

From brianchina60221 at gmail.com  Tue Apr  8 02:58:07 2008
From: brianchina60221 at gmail.com (brian)
Date: Tue, 8 Apr 2008 17:58:07 +0800
Subject: [stringtemplate-interest] leading/trailing whitespace trimmed
Message-ID: <22f6a8f70804080258v17e8e922qe091e5f9fa8d55ff@mail.gmail.com>

I think org.antlr.stringtemplate.StringTemplate(java.lang.String
template) is trimming leading and trailing whitespace. Is it? Should
it? I see a note about ST doing that for file input, but why to
Strings?

From parrt at cs.usfca.edu  Tue Apr  8 11:01:21 2008
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue, 8 Apr 2008 11:01:21 -0700
Subject: [stringtemplate-interest] leading/trailing whitespace trimmed
In-Reply-To: <22f6a8f70804080258v17e8e922qe091e5f9fa8d55ff@mail.gmail.com>
References: <22f6a8f70804080258v17e8e922qe091e5f9fa8d55ff@mail.gmail.com>
Message-ID: <B0D2234A-3D73-48B3-A0A8-99D25EFE036B@cs.usfca.edu>


On Apr 8, 2008, at 2:58 AM, brian wrote:
> I think org.antlr.stringtemplate.StringTemplate(java.lang.String
> template) is trimming leading and trailing whitespace. Is it? Should
> it? I see a note about ST doing that for file input, but why to
> Strings?

Hi. It does it for all templates even those specified with "...".   
Easier to add whitespace later than to get rid of whitespace.
Ter


From zen at freedbms.net  Mon Apr 14 05:15:54 2008
From: zen at freedbms.net (Zenaan Harkness)
Date: Mon, 14 Apr 2008 22:15:54 +1000
Subject: [stringtemplate-interest] StringTemplate 3.1 distribution -
	documentation bug
Message-ID: <20080414121554.GA19364@freedbms.net>

Hi, the ST3.1 documentation is out of date. For example, it does not
include documentation on elseif.

The web documentation seems up to date, but I can't see any link to a
"one big page" version of the documentation (at least, not from the
wiki), and so, can anyone point me to a way to get a nice offline
version of the documentation, so that I can use, eg "StringTemplate
Cheat Sheet", whilst offline??

TIA
Zen

-- 
Homepage: www.SoulSound.net -- Free Australia: www.UPMART.org
Please respect the confidentiality of this email as sensibly warranted.

From zen at freedbms.net  Mon Apr 14 08:45:48 2008
From: zen at freedbms.net (Zenaan Harkness)
Date: Tue, 15 Apr 2008 01:45:48 +1000
Subject: [stringtemplate-interest] StringTemplate 3.1 - elseif expression
	evaluation bug
Message-ID: <20080414154548.GC21813@freedbms.net>

This bug also exists at least in 09 November 2007 ST Java release.

I have the following Java classes/ beans:

public class Description {
   private String brief;
   private String full;
   public Description(String b, String f) {brief = b; full = f;}
   public String getBrief () {return brief;}
   public String getFull () {return full;}
}

public class Entity {
   private Description description = new Description(null,"my full descr.");
   public Description getDescription () {return description;}
}


And I have a StringTemplateGroup, java.stg:

returnsJavadoc(entity) ::= <<
@return <if(entity.description.brief)><entity.description.brief>
<elseif(entity.description.full)><entity.description.full>
<else>No javadoc found.
<endif>
>


Connecting these, passing in an entity attribute to the returnsJavadoc
template, I am getting the following error:

java.lang.IllegalArgumentException: Can't find template elseif.st
        at
org.antlr.stringtemplate.StringTemplateGroup.lookupTemplate(StringTemplateGroup.java:485)
        at
org.antlr.stringtemplate.StringTemplateGroup.getInstanceOf(StringTemplateGroup.java:372)
        at
org.antlr.stringtemplate.StringTemplateGroup.getInstanceOf(StringTemplateGroup.java:384)
        at
org.antlr.stringtemplate.StringTemplateGroup.lookupTemplate(StringTemplateGroup.java:464)
        at
org.antlr.stringtemplate.StringTemplateGroup.getInstanceOf(StringTemplateGroup.java:372)
        at
org.antlr.stringtemplate.StringTemplateGroup.getEmbeddedInstanceOf(StringTemplateGroup.java:416)
        at
org.antlr.stringtemplate.language.ASTExpr.getTemplateInclude(ASTExpr.java:637)
        at
org.antlr.stringtemplate.language.ActionEvaluator.templateInclude(ActionEvaluator.java:470)
        at
org.antlr.stringtemplate.language.ActionEvaluator.expr(ActionEvaluator.java:142)
        at
org.antlr.stringtemplate.language.ActionEvaluator.action(ActionEvaluator.java:84)
        at
org.antlr.stringtemplate.language.ASTExpr.write(ASTExpr.java:152)
        at
org.antlr.stringtemplate.StringTemplate.write(StringTemplate.java:714)
        at
org.antlr.stringtemplate.language.ConditionalExpr.write(ConditionalExpr.java:93)
        at
org.antlr.stringtemplate.StringTemplate.write(StringTemplate.java:714)


Is there something simple I'm missing, or is this simply a bug ??

TIA
Zen


-- 
Homepage: www.SoulSound.net -- Free Australia: www.UPMART.org
Please respect the confidentiality of this email as sensibly warranted.

From zen at freedbms.net  Mon Apr 14 08:55:26 2008
From: zen at freedbms.net (Zenaan Harkness)
Date: Tue, 15 Apr 2008 01:55:26 +1000
Subject: [stringtemplate-interest] StringTemplate 3.1 - elseif
	expression evaluation bug
In-Reply-To: <20080414154548.GC21813@freedbms.net>
References: <20080414154548.GC21813@freedbms.net>
Message-ID: <20080414155526.GA12665@freedbms.net>

On Tue, Apr 15, 2008 at 01:45:48AM +1000, Zenaan Harkness wrote:
> And I have a StringTemplateGroup, java.stg:
> 
> returnsJavadoc(entity) ::= <<
> @return <if(entity.description.brief)><entity.description.brief>
> <elseif(entity.description.full)><entity.description.full>
> <else>No javadoc found.
> <endif>
> >

That should have ended >>, not >, of course.

If I dispense with using <elseif(..)>, and change them to
<else><if(..)>...<endif><endif> etc, then things work.

So it seems clear there is some bug in the recognition of elseif as an
inbuilt conditional/ ST language construct, and instead buggily thinking
elseif is a user template.

Zen

-- 
Homepage: www.SoulSound.net -- Free Australia: www.UPMART.org
Please respect the confidentiality of this email as sensibly warranted.

From zen at freedbms.net  Mon Apr 14 20:10:53 2008
From: zen at freedbms.net (Zenaan Harkness)
Date: Tue, 15 Apr 2008 13:10:53 +1000
Subject: [stringtemplate-interest] StringTemplateGroup.registerDefaultLexer
Message-ID: <20080415031053.GG21813@freedbms.net>

Is it meant to be, that for PathGroupLoader, we are still supposed to
call registerDefaultLexer?

I had thought that PathGroupLoader was going to be changed to default to
AngleBracketLexer, but without manually calling the class/ static method
in the subject, I find that the default still has the old problem (of
not defaulting, for parent groups, to angle lexer).

Possibly a (cosmetic) bug...

cheers

-- 
Homepage: www.SoulSound.net -- Free Australia: www.UPMART.org
Please respect the confidentiality of this email as sensibly warranted.

From brianchina60221 at gmail.com  Wed Apr 16 07:07:43 2008
From: brianchina60221 at gmail.com (brian)
Date: Wed, 16 Apr 2008 22:07:43 +0800
Subject: [stringtemplate-interest] leading/trailing whitespace trimmed
In-Reply-To: <B0D2234A-3D73-48B3-A0A8-99D25EFE036B@cs.usfca.edu>
References: <22f6a8f70804080258v17e8e922qe091e5f9fa8d55ff@mail.gmail.com>
	<B0D2234A-3D73-48B3-A0A8-99D25EFE036B@cs.usfca.edu>
Message-ID: <22f6a8f70804160707k1a122997k20629b57917a6233@mail.gmail.com>

On Wed, Apr 9, 2008 at 2:01 AM, Terence Parr <parrt at cs.usfca.edu> wrote:
>
>  On Apr 8, 2008, at 2:58 AM, brian wrote:
>
> > I think org.antlr.stringtemplate.StringTemplate(java.lang.String
> > template) is trimming leading and trailing whitespace. Is it? Should
> > it? I see a note about ST doing that for file input, but why to
> > Strings?
> >
>
>  Hi. It does it for all templates even those specified with "...".  Easier
> to add whitespace later than to get rid of whitespace.

OK. But it'd be nice if there were a "I really mean for you to use
this exact template, don't mess with it" flag. In fact, I really think
producing what I told it to produce should be the default, and
automatic whitespace removal should be an option. Thanks.

From zen at freedbms.net  Wed Apr 16 09:16:14 2008
From: zen at freedbms.net (Zenaan Harkness)
Date: Thu, 17 Apr 2008 02:16:14 +1000
Subject: [stringtemplate-interest] leading/trailing whitespace trimmed
In-Reply-To: <22f6a8f70804160707k1a122997k20629b57917a6233@mail.gmail.com>
References: <22f6a8f70804080258v17e8e922qe091e5f9fa8d55ff@mail.gmail.com>
	<B0D2234A-3D73-48B3-A0A8-99D25EFE036B@cs.usfca.edu>
	<22f6a8f70804160707k1a122997k20629b57917a6233@mail.gmail.com>
Message-ID: <20080416161614.GB7862@freedbms.net>

On Wed, Apr 16, 2008 at 10:07:43PM +0800, brian wrote:
> On Wed, Apr 9, 2008 at 2:01 AM, Terence Parr <parrt at cs.usfca.edu> wrote:
> >
> >  On Apr 8, 2008, at 2:58 AM, brian wrote:
> >
> > > I think org.antlr.stringtemplate.StringTemplate(java.lang.String
> > > template) is trimming leading and trailing whitespace. Is it? Should
> > > it? I see a note about ST doing that for file input, but why to
> > > Strings?
> > >
> >
> >  Hi. It does it for all templates even those specified with "...".  Easier
> > to add whitespace later than to get rid of whitespace.
> 
> OK. But it'd be nice if there were a "I really mean for you to use
> this exact template, don't mess with it" flag. In fact, I really think
> producing what I told it to produce should be the default, and
> automatic whitespace removal should be an option. Thanks.

I've been using StringTemplate weekly for the past 6 months, and just
yesterday I got bitten by this trimming issue once again.

What I find frustrating is that it seems as though it can trim one OR
two newlines.

The first newline eaten, at least for <<, >> style templates (in group
files I'm using here), is forgivable - so that the layout makes sense.
But to consume the second blank line is unforgiveable. The 'solution' is
to insert <\n>, but then the problem is that sometimes (may be every
time), when at the start (or may be end, or may be both) of a template,
I get TWO empty lines where I only want one!!

At the least, there should be a specification for how to get NO lines,
how to get ONE (blank) line, and how to get more than one, blank line.
It seems horribly loose at the moment.

I might just not be understanding it properly, but it has frustrated me
on a few occasions now.

So, here's my vote for clarification, and precision. With templates it
must be possible to get precise output, per specification.

Zen

-- 
Homepage: www.SoulSound.net -- Free Australia: www.UPMART.org
Please respect the confidentiality of this email as sensibly warranted.

From parrt at cs.usfca.edu  Wed Apr 16 10:23:40 2008
From: parrt at cs.usfca.edu (Terence Parr)
Date: Wed, 16 Apr 2008 10:23:40 -0700
Subject: [stringtemplate-interest] leading/trailing whitespace trimmed
In-Reply-To: <22f6a8f70804160707k1a122997k20629b57917a6233@mail.gmail.com>
References: <22f6a8f70804080258v17e8e922qe091e5f9fa8d55ff@mail.gmail.com>
	<B0D2234A-3D73-48B3-A0A8-99D25EFE036B@cs.usfca.edu>
	<22f6a8f70804160707k1a122997k20629b57917a6233@mail.gmail.com>
Message-ID: <F3C79E51-39C1-4347-A9C7-32C14B0DFF71@cs.usfca.edu>


On Apr 16, 2008, at 7:07 AM, brian wrote:

> On Wed, Apr 9, 2008 at 2:01 AM, Terence Parr <parrt at cs.usfca.edu>  
> wrote:
>>
>> On Apr 8, 2008, at 2:58 AM, brian wrote:
>>
>>> I think org.antlr.stringtemplate.StringTemplate(java.lang.String
>>> template) is trimming leading and trailing whitespace. Is it? Should
>>> it? I see a note about ST doing that for file input, but why to
>>> Strings?
>>>
>>
>> Hi. It does it for all templates even those specified with "...".   
>> Easier
>> to add whitespace later than to get rid of whitespace.
>
> OK. But it'd be nice if there were a "I really mean for you to use
> this exact template, don't mess with it" flag. In fact, I really think
> producing what I told it to produce should be the default, and
> automatic whitespace removal should be an option. Thanks.

unix tends to force text files to end in \n as far as I can  
remember...makes it hard to deal with it.  Lots of tools add  
whitespace you don't want.
Ter

From parrt at cs.usfca.edu  Wed Apr 16 10:24:59 2008
From: parrt at cs.usfca.edu (Terence Parr)
Date: Wed, 16 Apr 2008 10:24:59 -0700
Subject: [stringtemplate-interest] leading/trailing whitespace trimmed
In-Reply-To: <20080416161614.GB7862@freedbms.net>
References: <22f6a8f70804080258v17e8e922qe091e5f9fa8d55ff@mail.gmail.com>
	<B0D2234A-3D73-48B3-A0A8-99D25EFE036B@cs.usfca.edu>
	<22f6a8f70804160707k1a122997k20629b57917a6233@mail.gmail.com>
	<20080416161614.GB7862@freedbms.net>
Message-ID: <FC31825A-A165-4E44-B5EE-EC12ABE2F2E6@cs.usfca.edu>

My intention was that it consume all newlines before / after  
templates; anything else is a bug.  Might not be what you want, but  
that was my intention...i can entertain an optin for 3.2.
Ter
On Apr 16, 2008, at 9:16 AM, Zenaan Harkness wrote:

> On Wed, Apr 16, 2008 at 10:07:43PM +0800, brian wrote:
>> On Wed, Apr 9, 2008 at 2:01 AM, Terence Parr <parrt at cs.usfca.edu>  
>> wrote:
>>>
>>> On Apr 8, 2008, at 2:58 AM, brian wrote:
>>>
>>>> I think org.antlr.stringtemplate.StringTemplate(java.lang.String
>>>> template) is trimming leading and trailing whitespace. Is it?  
>>>> Should
>>>> it? I see a note about ST doing that for file input, but why to
>>>> Strings?
>>>>
>>>
>>> Hi. It does it for all templates even those specified with "...".   
>>> Easier
>>> to add whitespace later than to get rid of whitespace.
>>
>> OK. But it'd be nice if there were a "I really mean for you to use
>> this exact template, don't mess with it" flag. In fact, I really  
>> think
>> producing what I told it to produce should be the default, and
>> automatic whitespace removal should be an option. Thanks.
>
> I've been using StringTemplate weekly for the past 6 months, and just
> yesterday I got bitten by this trimming issue once again.
>
> What I find frustrating is that it seems as though it can trim one OR
> two newlines.
>
> The first newline eaten, at least for <<, >> style templates (in group
> files I'm using here), is forgivable - so that the layout makes sense.
> But to consume the second blank line is unforgiveable. The  
> 'solution' is
> to insert <\n>, but then the problem is that sometimes (may be every
> time), when at the start (or may be end, or may be both) of a  
> template,
> I get TWO empty lines where I only want one!!
>
> At the least, there should be a specification for how to get NO lines,
> how to get ONE (blank) line, and how to get more than one, blank line.
> It seems horribly loose at the moment.
>
> I might just not be understanding it properly, but it has frustrated  
> me
> on a few occasions now.
>
> So, here's my vote for clarification, and precision. With templates it
> must be possible to get precise output, per specification.
>
> Zen
>
> -- 
> Homepage: www.SoulSound.net -- Free Australia: www.UPMART.org
> Please respect the confidentiality of this email as sensibly  
> warranted.
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org:8080/mailman/listinfo/stringtemplate-interest


From zen at freedbms.net  Wed Apr 16 10:34:56 2008
From: zen at freedbms.net (Zenaan Harkness)
Date: Thu, 17 Apr 2008 03:34:56 +1000
Subject: [stringtemplate-interest] leading/trailing whitespace trimmed
In-Reply-To: <20080416161614.GB7862@freedbms.net>
References: <22f6a8f70804080258v17e8e922qe091e5f9fa8d55ff@mail.gmail.com>
	<B0D2234A-3D73-48B3-A0A8-99D25EFE036B@cs.usfca.edu>
	<22f6a8f70804160707k1a122997k20629b57917a6233@mail.gmail.com>
	<20080416161614.GB7862@freedbms.net>
Message-ID: <20080416173456.GA27065@freedbms.net>

> What I find frustrating is that it seems as though it can trim one OR
> two newlines.

I've just done some experimenting, and the problem is this. Here's my
test case, with three failed examples:

0) ----
# This is my getter template, the main parent template, which, when
# a.customGetter is true (as is in my case), then the subtemplate
# "getBody" is called.
# If the middle line wraps, pretend the following is three lines only:
attGet(a) ::= <<
public <a.type> get<a.name> () {<if(a.customGetter)><getBody(a)><else>return <a.name>;<endif>}
>>


1) ----
# Here's my first attempt to produce a nice (custom) getter method body.
# Clearly this example does not work, because there is no blank line
# at start or end of method:
getBody(a) ::= <<
   return _param != null ? _param
      :  _returns != null ? _returns
      :  null;
>>

# As expected, the consumed blank lines show (by their lack) in my
# generated output; a nice template layout (just above), but an ugly
# result:
public String getParam () {   return _param != null ? _param
      :  _returns != null ? _returns
      :  null;}


2) ----
# Take 2, my second attempt, following the ST docs, I insert a "<\n>":
getBody(a) ::= <<
<\n>
   return _param != null ? _param
      :  _returns != null ? _returns
      :  null;
<\n>
>>

# Here's what my 2nd generated output looks like, template a bit ugly,
# reasonable layout (above), but a silly result:
public String getParam () {

   return _param != null ? _param
      :  _returns != null ? _returns
      :  null;

}


3) ----
# So, I must have too many newlines. Easy! compress the <\n>s:
getBody(a) ::= << <\n>
   return _param != null ? _param
      :  _returns != null ? _returns
      :  null;
<\n> >>

# This produces almost the same result as 2) above, except there are
# extra space characters lurking around (just after the first open
# brace, and just before the last open brace):
public String getParam () { 

   return _param != null ? _param
      :  _returns != null ? _returns
      :  null;

 }


4) ----
# So, on to solution 4), where I take advantage of the first and
# last \n getting consumed, and have my template like so:
getBody(a) ::= <<
<\n>   return _param != null ? _param
      :  _returns != null ? _returns
      :  null;<\n>
>>

# Finally, I have produced the result, character for character,
# that I wanted, albeit with a template that's a bit ugly:
public String getParam () {
   return _param != null ? _param
      :  _returns != null ? _returns
      :  null;
}


5) ----
# Take 5 :), Ahah! I think I finally understand it, and I can try a
# slightly modified (and arguably prettier) template, to get the same
# result:
getBody(a) ::= <<

   return _param != null ? _param
      :  _returns != null ? _returns
      :  null;

>>

# Hmm, this produces the same (correct) result:
public String getParam () {
   return _param != null ? _param
      :  _returns != null ? _returns
      :  null;
}


So in conclusion, there are 5 ways to get the job done, 3 of which
simply don't work, and two of which work.

Given the goal of consuming leading and trailing template whitespace,
being to make the templates prettier (so they can be layed out nicely,
which is a goal I agree with by the way), neither of the two successful
templates are ideally layed out. One has ugly <\n>s squeezed into it,
the other has excess blank lines, which DON'T appear in the output.

I could modify my parent template like so:

attGet(a) ::= <<
public <a.type> get<a.name> () {<if(a.customGetter)>
   <getBody(a)>
}<else>return <a.name>;}<endif>
>>

And take out the leading space in my sub-template like so:

getBody(a) ::= <<
return _param != null ? _param
   :  _returns != null ? _returns
   :  null;
>>

But this produces the following undesirable output (which is correct
except for the first line (first two lines joined):

public String getParam () {return _param != null ? _param
      :  _returns != null ? _returns
      :  null;
}

We can go through the same variations as above with <\n>, and come to
the conclusion that the (arguably) prettiest solution is an extra single
blank line in the parent template, like so:

attGet(a) ::= <<
public <a.type> get<a.name> () {<if(a.customGetter)>

   <getBody(a)>
}<else>return <a.name>;}<endif>
>>

And again, this does the job.

So, where there's a will there's a way. Is there any such thing as
perfect, in the world of output grammar type template language? I don't
think so.

Would I change the current default choices of ST?

Perhaps quoted style templates should be absolutely literal (perhaps
they already are), and << >> bracketed templates stay as current.

Perhaps an option to turn off whitespace consumption. I know I would
continue to use the whitespace consumption as is.

Zen

-- 
Homepage: www.SoulSound.net -- Free Australia: www.UPMART.org
Please respect the confidentiality of this email as sensibly warranted.

From zen at freedbms.net  Thu Apr 17 00:47:58 2008
From: zen at freedbms.net (Zenaan Harkness)
Date: Thu, 17 Apr 2008 17:47:58 +1000
Subject: [stringtemplate-interest] elseif bug
Message-ID: <20080417074758.GB30456@freedbms.net>

Can someone confirm whether in fact elseif in the latest version of ST
is not being recognized, or am I doing something wrong?

java.lang.IllegalArgumentException: Can't find template elseif.st
at
org.antlr.stringtemplate.StringTemplateGroup.lookupTemplate(StringTemplateGroup.java:485)
...

TIA
Zen

-- 
Homepage: www.SoulSound.net -- Free Australia: www.UPMART.org
Please respect the confidentiality of this email as sensibly warranted.

From zen at freedbms.net  Thu Apr 17 01:00:28 2008
From: zen at freedbms.net (Zenaan Harkness)
Date: Thu, 17 Apr 2008 18:00:28 +1000
Subject: [stringtemplate-interest] elseif bug
In-Reply-To: <20080417074758.GB30456@freedbms.net>
References: <20080417074758.GB30456@freedbms.net>
Message-ID: <20080417080028.GA29689@freedbms.net>

On Thu, Apr 17, 2008 at 05:47:58PM +1000, Zenaan Harkness wrote:
> Can someone confirm whether in fact elseif in the latest version of ST
> is not being recognized, or am I doing something wrong?
> 
> java.lang.IllegalArgumentException: Can't find template elseif.st
> at
> org.antlr.stringtemplate.StringTemplateGroup.lookupTemplate(StringTemplateGroup.java:485)
> ...

Here's my ST code snippet:

<if(!isInterface)>
<if(!model.poly)> final
<elseif(model.isAbstract)> abstract
<endif>
<endif>

Is there something obviously wrong that I'm doing here?

Perhaps ST is mixing up the elseif and assuming that goes with the first
if, rather than the second? Ie, perhaps ST is not nesting properly here?

If I change the code to this:

<if(!isInterface)>
<if(!model.poly)> final
<if(model.isAbstract)> abstract
<endif>
<endif>

It works ... ?? (leaving aside the logic bug in my generated code logic :)

-- 
Homepage: www.SoulSound.net -- Free Australia: www.UPMART.org
Please respect the confidentiality of this email as sensibly warranted.

From Thomas.Aigner at lff.bayern.de  Thu Apr 17 01:44:56 2008
From: Thomas.Aigner at lff.bayern.de (Aigner, Thomas (LfF-R))
Date: Thu, 17 Apr 2008 10:44:56 +0200
Subject: [stringtemplate-interest] elseif bug
In-Reply-To: <20080417080028.GA29689@freedbms.net>
Message-ID: <68E01D7EA6B1AF4395B82A8B512107F203E0323E@LFF-L3ASRV02.bfd.bayern.de>

Hi, 
This is a known bug, see http://www.antlr.org:8888/browse/ST-36

Thomas

> -----Original Message-----
> From: stringtemplate-interest-bounces at antlr.org 
> [mailto:stringtemplate-interest-bounces at antlr.org] On Behalf 
> Of Zenaan Harkness
> Sent: Thursday, April 17, 2008 10:00 AM
> To: stringtemplate-interest
> Subject: Re: [stringtemplate-interest] elseif bug
> 
> 
> On Thu, Apr 17, 2008 at 05:47:58PM +1000, Zenaan Harkness wrote:
> > Can someone confirm whether in fact elseif in the latest 
> version of ST
> > is not being recognized, or am I doing something wrong?
> > 
> > java.lang.IllegalArgumentException: Can't find template elseif.st
> > at
> > 
> org.antlr.stringtemplate.StringTemplateGroup.lookupTemplate(St
> ringTemplateGroup.java:485)
> > ...
> 
> Here's my ST code snippet:
> 
> <if(!isInterface)>
> <if(!model.poly)> final
> <elseif(model.isAbstract)> abstract
> <endif>
> <endif>
> 
> Is there something obviously wrong that I'm doing here?
> 
> Perhaps ST is mixing up the elseif and assuming that goes 
> with the first
> if, rather than the second? Ie, perhaps ST is not nesting 
> properly here?
> 
> If I change the code to this:
> 
> <if(!isInterface)>
> <if(!model.poly)> final
> <if(model.isAbstract)> abstract
> <endif>
> <endif>
> 
> It works ... ?? (leaving aside the logic bug in my generated 
> code logic :)
> 
> -- 
> Homepage: www.SoulSound.net -- Free Australia: www.UPMART.org
> Please respect the confidentiality of this email as sensibly 
> warranted.
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org:8080/mailman/listinfo/stringtemplate-interest
> 

From zen at freedbms.net  Thu Apr 17 08:59:41 2008
From: zen at freedbms.net (Zenaan Harkness)
Date: Fri, 18 Apr 2008 01:59:41 +1000
Subject: [stringtemplate-interest] Javadoc generation using ST ?
Message-ID: <20080417155941.GC30456@freedbms.net>

I have some javadoc comments which span more than one line, in my model.
Is it possible to have the proper indentation (with asterisks) be
generated using st?


Eg, here is the javadoc:

javadoc="A brief intro to this class, followed by a blank line.

Then some more detailed info about this class, which also spans
more than one line; altogether, 4 lines of javadoc."


and eg is my template:

<javadoc(method)>
<method(method)>


which should produce this output:

/**
 * A brief intro to this class, followed by a blank line.
 *
 * Then some more detailed info about this class, which also spans
 * more than one line; altogether, 4 lines of javadoc.
 */
public void myMethod () {doSomething();}


but instead produces this output:

/**
 * A brief intro to this class, followed by a blank line.

Then some more detailed info about this class, which also spans
more than one line; altogether, 4 lines of javadoc.
 */
public void myMethod () {doSomething();}


As we can see, everything after the first line of text does not have the
proper javadoc indentation.

Is there a way to create proper javadoc output?

TIA
Zen

-- 
Homepage: www.SoulSound.net -- Free Australia: www.UPMART.org
Please respect the confidentiality of this email as sensibly warranted.

From parrt at cs.usfca.edu  Thu Apr 17 11:03:28 2008
From: parrt at cs.usfca.edu (Terence Parr)
Date: Thu, 17 Apr 2008 11:03:28 -0700
Subject: [stringtemplate-interest] Javadoc generation using ST ?
In-Reply-To: <20080417155941.GC30456@freedbms.net>
References: <20080417155941.GC30456@freedbms.net>
Message-ID: <E8304798-EFC9-4A82-B5DA-A56966C82074@cs.usfca.edu>


On Apr 17, 2008, at 8:59 AM, Zenaan Harkness wrote:

> I have some javadoc comments which span more than one line, in my  
> model.
> Is it possible to have the proper indentation (with asterisks) be
> generated using st?

Absolutely!  The wrap=" * " option will do this for you. You can even  
do Fortran style line continuations with.  Give it a shot. I think  
you'll enjoy.
Ter
>
>
>
> Eg, here is the javadoc:
>
> javadoc="A brief intro to this class, followed by a blank line.
>
> Then some more detailed info about this class, which also spans
> more than one line; altogether, 4 lines of javadoc."
>
>
> and eg is my template:
>
> <javadoc(method)>
> <method(method)>
>
>
> which should produce this output:
>
> /**
> * A brief intro to this class, followed by a blank line.
> *
> * Then some more detailed info about this class, which also spans
> * more than one line; altogether, 4 lines of javadoc.
> */
> public void myMethod () {doSomething();}
>
>
> but instead produces this output:
>
> /**
> * A brief intro to this class, followed by a blank line.
>
> Then some more detailed info about this class, which also spans
> more than one line; altogether, 4 lines of javadoc.
> */
> public void myMethod () {doSomething();}
>
>
> As we can see, everything after the first line of text does not have  
> the
> proper javadoc indentation.
>
> Is there a way to create proper javadoc output?
>
> TIA
> Zen
>
> -- 
> Homepage: www.SoulSound.net -- Free Australia: www.UPMART.org
> Please respect the confidentiality of this email as sensibly  
> warranted.
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org:8080/mailman/listinfo/stringtemplate-interest


From parrt at cs.usfca.edu  Thu Apr 17 11:04:58 2008
From: parrt at cs.usfca.edu (Terence Parr)
Date: Thu, 17 Apr 2008 11:04:58 -0700
Subject: [stringtemplate-interest] StringTemplate 3.1 distribution -
	documentation bug
In-Reply-To: <20080414121554.GA19364@freedbms.net>
References: <20080414121554.GA19364@freedbms.net>
Message-ID: <B7B28E3F-7B27-43F7-BE01-F14DA39E6C14@cs.usfca.edu>


On Apr 14, 2008, at 5:15 AM, Zenaan Harkness wrote:

> Hi, the ST3.1 documentation is out of date. For example, it does not
> include documentation on elseif.

Oh, crap...yeah, it's in the release. I will have to remove that.
Ter

From parrt at cs.usfca.edu  Thu Apr 17 11:06:45 2008
From: parrt at cs.usfca.edu (Terence Parr)
Date: Thu, 17 Apr 2008 11:06:45 -0700
Subject: [stringtemplate-interest]
	StringTemplateGroup.registerDefaultLexer
In-Reply-To: <20080415031053.GG21813@freedbms.net>
References: <20080415031053.GG21813@freedbms.net>
Message-ID: <55E1BBCD-5782-4DFA-AC34-D947EDBB26E4@cs.usfca.edu>

Hrm....thought we fixed this....
Ter
On Apr 14, 2008, at 8:10 PM, Zenaan Harkness wrote:

> Is it meant to be, that for PathGroupLoader, we are still supposed to
> call registerDefaultLexer?
>
> I had thought that PathGroupLoader was going to be changed to  
> default to
> AngleBracketLexer, but without manually calling the class/ static  
> method
> in the subject, I find that the default still has the old problem (of
> not defaulting, for parent groups, to angle lexer).
>
> Possibly a (cosmetic) bug...
>
> cheers
>
> -- 
> Homepage: www.SoulSound.net -- Free Australia: www.UPMART.org
> Please respect the confidentiality of this email as sensibly  
> warranted.
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org:8080/mailman/listinfo/stringtemplate-interest


From parrt at cs.usfca.edu  Thu Apr 17 11:12:34 2008
From: parrt at cs.usfca.edu (Terence Parr)
Date: Thu, 17 Apr 2008 11:12:34 -0700
Subject: [stringtemplate-interest] leading/trailing whitespace trimmed
In-Reply-To: <20080416173456.GA27065@freedbms.net>
References: <22f6a8f70804080258v17e8e922qe091e5f9fa8d55ff@mail.gmail.com>
	<B0D2234A-3D73-48B3-A0A8-99D25EFE036B@cs.usfca.edu>
	<22f6a8f70804160707k1a122997k20629b57917a6233@mail.gmail.com>
	<20080416161614.GB7862@freedbms.net>
	<20080416173456.GA27065@freedbms.net>
Message-ID: <C12082F9-AA41-4006-A5DE-4D9BA8651B22@cs.usfca.edu>


On Apr 16, 2008, at 10:34 AM, Zenaan Harkness wrote:

>> What I find frustrating is that it seems as though it can trim one OR
>> two newlines.
>
> I've just done some experimenting, and the problem is this. Here's my
> test case, with three failed examples:
>
> 0) ----
> # This is my getter template, the main parent template, which, when
> # a.customGetter is true (as is in my case), then the subtemplate
> # "getBody" is called.
> # If the middle line wraps, pretend the following is three lines only:
> attGet(a) ::= <<
> public <a.type> get<a.name> ()  
> {<if(a.customGetter)><getBody(a)><else>return <a.name>;<endif>}
>>>
>
>
> 1) ----
> # Here's my first attempt to produce a nice (custom) getter method  
> body.
> # Clearly this example does not work, because there is no blank line
> # at start or end of method:
> getBody(a) ::= <<
>   return _param != null ? _param
>      :  _returns != null ? _returns
>      :  null;
>>>
>
> # As expected, the consumed blank lines show (by their lack) in my
> # generated output; a nice template layout (just above), but an ugly
> # result:
> public String getParam () {   return _param != null ? _param
>      :  _returns != null ? _returns
>      :  null;}

Yes,Because you said no \n after the { in the enclosing template. that  
is as I intend.

> 2) ----
> # Take 2, my second attempt, following the ST docs, I insert a "<\n>":
> getBody(a) ::= <<
> <\n>
>   return _param != null ? _param
>      :  _returns != null ? _returns
>      :  null;
> <\n>
>>>
>
> # Here's what my 2nd generated output looks like, template a bit ugly,
> # reasonable layout (above), but a silly result:
> public String getParam () {
>
>   return _param != null ? _param
>      :  _returns != null ? _returns
>      :  null;
>
> }

Again, this is as I intend. <\n> Followed by \n use 2 newlines, not  
one.  Try

<< <\n>  return _param...

> 3) ----
> # So, I must have too many newlines. Easy! compress the <\n>s:
> getBody(a) ::= << <\n>
>   return _param != null ? _param
>      :  _returns != null ? _returns
>      :  null;
> <\n> >>

oh, right... you saw that.

> # This produces almost the same result as 2) above, except there are
> # extra space characters lurking around (just after the first open
> # brace, and just before the last open brace):
> public String getParam () {
>
>   return _param != null ? _param
>      :  _returns != null ? _returns
>      :  null;
>
> }

Yeah, that is ugly I guess... I think you need to think about this a  
different way. A template specifies content but the surrounding  
template specifies a whitespace around that template. Instead of your

public <a.type> get<a.name> () {<if(a.customGetter)>

do this

public <a.type> get<a.name> () {
<if(a.customGetter)>

and then all of a sudden you get exactly what you want and it looks  
great.


> 4) ----
> # So, on to solution 4), where I take advantage of the first and
> # last \n getting consumed, and have my template like so:
> getBody(a) ::= <<
> <\n>   return _param != null ? _param
>      :  _returns != null ? _returns
>      :  null;<\n>
>>>
>
> # Finally, I have produced the result, character for character,
> # that I wanted, albeit with a template that's a bit ugly:
> public String getParam () {
>   return _param != null ? _param
>      :  _returns != null ? _returns
>      :  null;
> }

That also works but is not as clean as what I just mentioned.

> So in conclusion, there are 5 ways to get the job done, 3 of which
> simply don't work, and two of which work.

I only use one way and it seems to work great ;)

:)

Ter

From zen at freedbms.net  Thu Apr 17 20:38:36 2008
From: zen at freedbms.net (Zenaan Harkness)
Date: Fri, 18 Apr 2008 13:38:36 +1000
Subject: [stringtemplate-interest] leading/trailing whitespace trimmed
In-Reply-To: <C12082F9-AA41-4006-A5DE-4D9BA8651B22@cs.usfca.edu>
References: <22f6a8f70804080258v17e8e922qe091e5f9fa8d55ff@mail.gmail.com>
	<B0D2234A-3D73-48B3-A0A8-99D25EFE036B@cs.usfca.edu>
	<22f6a8f70804160707k1a122997k20629b57917a6233@mail.gmail.com>
	<20080416161614.GB7862@freedbms.net>
	<20080416173456.GA27065@freedbms.net>
	<C12082F9-AA41-4006-A5DE-4D9BA8651B22@cs.usfca.edu>
Message-ID: <20080418033836.GD30456@freedbms.net>

>> # This produces almost the same result as 2) above, except there are
>> # extra space characters lurking around (just after the first open
>> # brace, and just before the last open brace):
>> public String getParam () {
>>
>>   return _param != null ? _param
>>      :  _returns != null ? _returns
>>      :  null;
>>
>> }
>
> Yeah, that is ugly I guess... I think you need to think about this a 
> different way. A template specifies content but the surrounding template 
> specifies a whitespace around that template. Instead of your
>
> public <a.type> get<a.name> () {<if(a.customGetter)>
>
> do this
>
> public <a.type> get<a.name> () {
> <if(a.customGetter)>
>
> and then all of a sudden you get exactly what you want and it looks great.

The reason I don't do it that way (yes it would work for multi-line
getter), is that I wanted to have the default be a single-line getter,
as in, the template producing something like:

   public String getInfo () {return _info;}

and only if there's a custom getter do I go to multi line, and then only
if the custom getter _needs_ to go multi line. This is why I went to
such lengths of experimentation :)

So, they way I have it, the default getter and custom getters are one
line, and multi-line custom getters are multi line.

Perhaps I'm being too demanding. But it does work, if a little less than
ideally pretty in the templates.


>> 4) ----
>> # So, on to solution 4), where I take advantage of the first and
>> # last \n getting consumed, and have my template like so:
>> getBody(a) ::= <<
>> <\n>   return _param != null ? _param
>>      :  _returns != null ? _returns
>>      :  null;<\n>
>>>>
>>
>> # Finally, I have produced the result, character for character,
>> # that I wanted, albeit with a template that's a bit ugly:
>> public String getParam () {
>>   return _param != null ? _param
>>      :  _returns != null ? _returns
>>      :  null;
>> }
>
> That also works but is not as clean as what I just mentioned.
>
>> So in conclusion, there are 5 ways to get the job done, 3 of which
>> simply don't work, and two of which work.
>
> I only use one way and it seems to work great ;)
>
> :)

Absolutely.

I am totally stoked with what I am achieving with ST. Not only is it
possible to do what I want, but I can jig the templates to produce
some flexibility in output too (single vs multi line getters for example
:)

Thank you ____________this_____________ much for ST.

As a coder, it's like I'm a kid in a lolly warehouse.

Now, if we can just get built in template existence checking ... :)
(see earlier email, ala:
<ifexists(TEMPLATE_NAME_TO_CHECK)><(TEMPLATE_NAME_WILL_RUN)()><endif>

Seems like a simple tamplate_name->template lookup table...

Much more efficient than the manual parsing I have to do in my code to
get _only a limited set of template names_ to be customizers...
)

Best regards
Zen

-- 
Homepage: www.SoulSound.net -- Free Australia: www.UPMART.org
Please respect the confidentiality of this email as sensibly warranted.

From zen at freedbms.net  Thu Apr 17 20:43:21 2008
From: zen at freedbms.net (Zenaan Harkness)
Date: Fri, 18 Apr 2008 13:43:21 +1000
Subject: [stringtemplate-interest]
	StringTemplateGroup.registerDefaultLexer
In-Reply-To: <55E1BBCD-5782-4DFA-AC34-D947EDBB26E4@cs.usfca.edu>
References: <20080415031053.GG21813@freedbms.net>
	<55E1BBCD-5782-4DFA-AC34-D947EDBB26E4@cs.usfca.edu>
Message-ID: <20080418034321.GE30456@freedbms.net>

The difficulty with adding a test case, is that it is to do with the
path group loader loading from file system. I guess we need a sub
directory of tests, which has test group files, eg:

sub_group.stg; super_group.stg

both requiring angle lexer, where sub_group.myTemplate calls a template
in super_group, then asert proper output.

On Thu, Apr 17, 2008 at 11:06:45AM -0700, Terence Parr wrote:
> Hrm....thought we fixed this....
> Ter
> On Apr 14, 2008, at 8:10 PM, Zenaan Harkness wrote:
>
>> Is it meant to be, that for PathGroupLoader, we are still supposed to
>> call registerDefaultLexer?
...


From zen at freedbms.net  Thu Apr 17 20:49:50 2008
From: zen at freedbms.net (Zenaan Harkness)
Date: Fri, 18 Apr 2008 13:49:50 +1000
Subject: [stringtemplate-interest] Javadoc generation using ST ?
In-Reply-To: <E8304798-EFC9-4A82-B5DA-A56966C82074@cs.usfca.edu>
References: <20080417155941.GC30456@freedbms.net>
	<E8304798-EFC9-4A82-B5DA-A56966C82074@cs.usfca.edu>
Message-ID: <20080418034950.GF30456@freedbms.net>

On Thu, Apr 17, 2008 at 11:03:28AM -0700, Terence Parr wrote:
>
> On Apr 17, 2008, at 8:59 AM, Zenaan Harkness wrote:
>
>> I have some javadoc comments which span more than one line, in my model.
>> Is it possible to have the proper indentation (with asterisks) be
>> generated using st?
>
> Absolutely!  The wrap=" * " option will do this for you. You can even do 
> Fortran style line continuations with.  Give it a shot. I think you'll 
> enjoy.

I will, when I can make it work.

My ST usage model is:
1) All my templates are in group files (none generated in code).
2) When I generate my output, I use a StringTemplateWriter, to write the
output into a file.

Despite setting stWriter.setLineWidth(16), _and_ adding wrap option to
my templates, I get no wrappin!

STWriter has a write(String str, String wrap) method, but StringTemplate
(which is my top level object for generating my output) only has a
write(StringTemplateWriter) method, with no wrapping/width option.

It's probably easy to add, and I'll look at it in time if no one beats
me to it. Just an overloaded method or two I hope...

Zen

-- 
Homepage: www.SoulSound.net -- Free Australia: www.UPMART.org
Please respect the confidentiality of this email as sensibly warranted.

From zen at freedbms.net  Thu Apr 17 23:19:07 2008
From: zen at freedbms.net (Zenaan Harkness)
Date: Fri, 18 Apr 2008 16:19:07 +1000
Subject: [stringtemplate-interest] Javadoc generation using ST ?
In-Reply-To: <20080418034950.GF30456@freedbms.net>
References: <20080417155941.GC30456@freedbms.net>
	<E8304798-EFC9-4A82-B5DA-A56966C82074@cs.usfca.edu>
	<20080418034950.GF30456@freedbms.net>
Message-ID: <20080418061907.GA625@freedbms.net>

On Fri, Apr 18, 2008 at 01:49:50PM +1000, Zenaan Harkness wrote:
> On Thu, Apr 17, 2008 at 11:03:28AM -0700, Terence Parr wrote:
> >
> > On Apr 17, 2008, at 8:59 AM, Zenaan Harkness wrote:
> >
> >> I have some javadoc comments which span more than one line, in my model.
> >> Is it possible to have the proper indentation (with asterisks) be
> >> generated using st?
> >
> > Absolutely!  The wrap=" * " option will do this for you. You can even do 
> > Fortran style line continuations with.  Give it a shot. I think you'll 
> > enjoy.
> 
> I will, when I can make it work.
> 
> My ST usage model is:
> 1) All my templates are in group files (none generated in code).
> 2) When I generate my output, I use a StringTemplateWriter, to write the
> output into a file.
> 
> Despite setting stWriter.setLineWidth(16), _and_ adding wrap option to
> my templates, I get no wrappin!

BTW, my text to be inserted/ wrapped does also contain newlines,
and the wrap option is not being applied (although this seems to
be an API issue, I haven't tested it otherwise).

Zen

-- 
Homepage: www.SoulSound.net -- Free Australia: www.UPMART.org
Please respect the confidentiality of this email as sensibly warranted.

From parrt at cs.usfca.edu  Fri Apr 18 08:51:37 2008
From: parrt at cs.usfca.edu (Terence Parr)
Date: Fri, 18 Apr 2008 08:51:37 -0700
Subject: [stringtemplate-interest] Javadoc generation using ST ?
In-Reply-To: <20080418061907.GA625@freedbms.net>
References: <20080417155941.GC30456@freedbms.net>
	<E8304798-EFC9-4A82-B5DA-A56966C82074@cs.usfca.edu>
	<20080418034950.GF30456@freedbms.net>
	<20080418061907.GA625@freedbms.net>
Message-ID: <B6D9D517-402E-4FEE-83B8-2ADB283F2806@cs.usfca.edu>

I always forget this too.  Try toString(width). toString() doesnt wrap.
Ter
On Apr 17, 2008, at 11:19 PM, Zenaan Harkness wrote:

> On Fri, Apr 18, 2008 at 01:49:50PM +1000, Zenaan Harkness wrote:
>> On Thu, Apr 17, 2008 at 11:03:28AM -0700, Terence Parr wrote:
>>>
>>> On Apr 17, 2008, at 8:59 AM, Zenaan Harkness wrote:
>>>
>>>> I have some javadoc comments which span more than one line, in  
>>>> my model.
>>>> Is it possible to have the proper indentation (with asterisks) be
>>>> generated using st?
>>>
>>> Absolutely!  The wrap=" * " option will do this for you. You can  
>>> even do
>>> Fortran style line continuations with.  Give it a shot. I think  
>>> you'll
>>> enjoy.
>>
>> I will, when I can make it work.
>>
>> My ST usage model is:
>> 1) All my templates are in group files (none generated in code).
>> 2) When I generate my output, I use a StringTemplateWriter, to  
>> write the
>> output into a file.
>>
>> Despite setting stWriter.setLineWidth(16), _and_ adding wrap  
>> option to
>> my templates, I get no wrappin!
>
> BTW, my text to be inserted/ wrapped does also contain newlines,
> and the wrap option is not being applied (although this seems to
> be an API issue, I haven't tested it otherwise).
>
> Zen
>
> -- 
> Homepage: www.SoulSound.net -- Free Australia: www.UPMART.org
> Please respect the confidentiality of this email as sensibly  
> warranted.
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org:8080/mailman/listinfo/stringtemplate-interest


From zen at freedbms.net  Fri Apr 18 10:06:37 2008
From: zen at freedbms.net (Zenaan Harkness)
Date: Sat, 19 Apr 2008 03:06:37 +1000
Subject: [stringtemplate-interest] Javadoc generation using ST ?
In-Reply-To: <B6D9D517-402E-4FEE-83B8-2ADB283F2806@cs.usfca.edu>
References: <20080417155941.GC30456@freedbms.net>
	<E8304798-EFC9-4A82-B5DA-A56966C82074@cs.usfca.edu>
	<20080418034950.GF30456@freedbms.net>
	<20080418061907.GA625@freedbms.net>
	<B6D9D517-402E-4FEE-83B8-2ADB283F2806@cs.usfca.edu>
Message-ID: <20080418170637.GM30456@freedbms.net>

>> On Fri, Apr 18, 2008 at 01:49:50PM +1000, Zenaan Harkness wrote:
>>> On Thu, Apr 17, 2008 at 11:03:28AM -0700, Terence Parr wrote:
>>>>
>>>> On Apr 17, 2008, at 8:59 AM, Zenaan Harkness wrote:
>>>>
>>>>> I have some javadoc comments which span more than one line, in my 
>>>>> model.
>>>>> Is it possible to have the proper indentation (with asterisks) be
>>>>> generated using st?
>>>>
>>>> Absolutely!  The wrap=" * " option will do this for you. You can even do
>>>> Fortran style line continuations with.  Give it a shot. I think you'll
>>>> enjoy.
>>>
>>> I will, when I can make it work.
>>>
>>> My ST usage model is:
>>> 1) All my templates are in group files (none generated in code).
>>> 2) When I generate my output, I use a StringTemplateWriter, to write the
>>> output into a file.
>>>
>>> Despite setting stWriter.setLineWidth(16), _and_ adding wrap option to
>>> my templates, I get no wrappin!

On Fri, Apr 18, 2008 at 08:51:37AM -0700, Terence Parr wrote:
> I always forget this too.  Try toString(width). toString() doesnt wrap.

Am I missing something here?

I can't call toString, since I'm doing the writer thing - writing
directly out to a file using StringTemplateWriter (as mentioned at point
2) above), so I'm limited to using st.write, no toString for me, unless
I'm missing something?


From parrt at cs.usfca.edu  Fri Apr 18 11:26:53 2008
From: parrt at cs.usfca.edu (Terence Parr)
Date: Fri, 18 Apr 2008 11:26:53 -0700
Subject: [stringtemplate-interest] Javadoc generation using ST ?
In-Reply-To: <20080418170637.GM30456@freedbms.net>
References: <20080417155941.GC30456@freedbms.net>
	<E8304798-EFC9-4A82-B5DA-A56966C82074@cs.usfca.edu>
	<20080418034950.GF30456@freedbms.net>
	<20080418061907.GA625@freedbms.net>
	<B6D9D517-402E-4FEE-83B8-2ADB283F2806@cs.usfca.edu>
	<20080418170637.GM30456@freedbms.net>
Message-ID: <779EA3A3-D811-4769-A950-29D15B9ECD80@cs.usfca.edu>


On Apr 18, 2008, at 10:06 AM, Zenaan Harkness wrote:

>>> On Fri, Apr 18, 2008 at 01:49:50PM +1000, Zenaan Harkness wrote:
>>>> On Thu, Apr 17, 2008 at 11:03:28AM -0700, Terence Parr wrote:
>>>>>
>>>>> On Apr 17, 2008, at 8:59 AM, Zenaan Harkness wrote:
>>>>>
>>>>>> I have some javadoc comments which span more than one line, in my
>>>>>> model.
>>>>>> Is it possible to have the proper indentation (with asterisks) be
>>>>>> generated using st?
>>>>>
>>>>> Absolutely!  The wrap=" * " option will do this for you. You  
>>>>> can even do
>>>>> Fortran style line continuations with.  Give it a shot. I think  
>>>>> you'll
>>>>> enjoy.
>>>>
>>>> I will, when I can make it work.
>>>>
>>>> My ST usage model is:
>>>> 1) All my templates are in group files (none generated in code).
>>>> 2) When I generate my output, I use a StringTemplateWriter, to  
>>>> write the
>>>> output into a file.
>>>>
>>>> Despite setting stWriter.setLineWidth(16), _and_ adding wrap  
>>>> option to
>>>> my templates, I get no wrappin!
>
> On Fri, Apr 18, 2008 at 08:51:37AM -0700, Terence Parr wrote:
>> I always forget this too.  Try toString(width). toString() doesnt  
>> wrap.
>
> Am I missing something here?
>
> I can't call toString, since I'm doing the writer thing - writing
> directly out to a file using StringTemplateWriter (as mentioned at  
> point
> 2) above), so I'm limited to using st.write, no toString for me,  
> unless
> I'm missing something?

ah. I'm not at office at moment.  can you look to see what tostring 
(int) invokes with write?  Perhaps I made a special writer that wraps.

Ter


From nvivo.misc at gmail.com  Fri Apr 18 14:30:20 2008
From: nvivo.misc at gmail.com (Natan Vivo)
Date: Fri, 18 Apr 2008 18:30:20 -0300
Subject: [stringtemplate-interest] Final version of C# ST 3.1?
Message-ID: <d78326310804181430i3be0c8e6ne54afa6ae3cdf256@mail.gmail.com>

Hi,

Just for curiosity, do any of you have any idea about when the final C#
version of ST 3.1 will be released?

Thanks.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org:8080/pipermail/stringtemplate-interest/attachments/20080418/dd9de678/attachment.html 

From parrt at cs.usfca.edu  Fri Apr 18 15:16:20 2008
From: parrt at cs.usfca.edu (Terence Parr)
Date: Fri, 18 Apr 2008 15:16:20 -0700
Subject: [stringtemplate-interest] leading/trailing whitespace trimmed
In-Reply-To: <20080418033836.GD30456@freedbms.net>
References: <22f6a8f70804080258v17e8e922qe091e5f9fa8d55ff@mail.gmail.com>
	<B0D2234A-3D73-48B3-A0A8-99D25EFE036B@cs.usfca.edu>
	<22f6a8f70804160707k1a122997k20629b57917a6233@mail.gmail.com>
	<20080416161614.GB7862@freedbms.net>
	<20080416173456.GA27065@freedbms.net>
	<C12082F9-AA41-4006-A5DE-4D9BA8651B22@cs.usfca.edu>
	<20080418033836.GD30456@freedbms.net>
Message-ID: <078D27D7-88BC-421B-8EFD-20D9ECE57B01@cs.usfca.edu>


On Apr 17, 2008, at 8:38 PM, Zenaan Harkness wrote:
> The reason I don't do it that way (yes it would work for multi-line
> getter), is that I wanted to have the default be a single-line getter,
> as in, the template producing something like:
>
>   public String getInfo () {return _info;}

ah. ok.

> and only if there's a custom getter do I go to multi line, and then  
> only
> if the custom getter _needs_ to go multi line. This is why I went to
> such lengths of experimentation :)

a custom output writer might be able to do this as well...

> So, they way I have it, the default getter and custom getters are one
> line, and multi-line custom getters are multi line.

I'll bet that if I had an array of statements, I could figure out a  
way to get ST to do this without worrying about all the whitespace.   
For example, <if(rest(statements))> probably says that there are more  
than one statement. You can switch on this then.

> I am totally stoked with what I am achieving with ST. Not only is it

great!

> possible to do what I want, but I can jig the templates to produce
> some flexibility in output too (single vs multi line getters for  
> example
> :)
>
> Thank you ____________this_____________ much for ST.

My pleasure...yeah, I really love this tool. :)

> Now, if we can just get built in template existence checking ... :)
> (see earlier email, ala:
> <ifexists(TEMPLATE_NAME_TO_CHECK)><(TEMPLATE_NAME_WILL_RUN)()><endif>
>
> Seems like a simple tamplate_name->template lookup table...

The methods exist of course, but you cannot pass a parameter to them  
from ST.  Hmm....

Ter

From zen at freedbms.net  Fri Apr 18 16:19:53 2008
From: zen at freedbms.net (Zenaan Harkness)
Date: Sat, 19 Apr 2008 09:19:53 +1000
Subject: [stringtemplate-interest] Javadoc generation using ST ?
In-Reply-To: <779EA3A3-D811-4769-A950-29D15B9ECD80@cs.usfca.edu>
References: <20080417155941.GC30456@freedbms.net>
	<E8304798-EFC9-4A82-B5DA-A56966C82074@cs.usfca.edu>
	<20080418034950.GF30456@freedbms.net>
	<20080418061907.GA625@freedbms.net>
	<B6D9D517-402E-4FEE-83B8-2ADB283F2806@cs.usfca.edu>
	<20080418170637.GM30456@freedbms.net>
	<779EA3A3-D811-4769-A950-29D15B9ECD80@cs.usfca.edu>
Message-ID: <20080418231953.GN30456@freedbms.net>

>>>>>>> Is it possible to have the proper indentation (with asterisks) be
>>>>>>> generated using st?

>>>>>> Absolutely!  The wrap=" * " option will do this for you. You can even 

>>>>> I will, when I can make it work.
>>>>>
>>>>> My ST usage model is:
>>>>> 1) All my templates are in group files (none generated in code).
>>>>> 2) When I generate my output, I use a StringTemplateWriter, to write 
>>>>> the output into a file.
>>>>>
>>>>> Despite setting stWriter.setLineWidth(16), _and_ adding wrap option to
>>>>> my templates, I get no wrappin!

>>> I always forget this too.  Try toString(width). toString() doesnt wrap.

>> I can't call toString, since I'm doing the writer thing - writing
>> directly out to a file using StringTemplateWriter (as mentioned at point
>> 2) above), so I'm limited to using st.write, no toString for me, unless
>> I'm missing something?

> ah. I'm not at office at moment.  can you look to see what tostring(int) 
> invokes with write?  Perhaps I made a special writer that wraps.

Everything seems as though it should work. Yes, I'm missing this:

My apologies. From the ST3.1 docs:

"... StringTemplate should wrap lines in between expression elements.
StringTemplate never breaks literals, but it can break in between a
literal and an expression."

I have been sending in single strings, for my javadoc section, thinking
the string (single element from the template's perspective) would get
broken up for wrapping purposes. Clearly I didn't read the docs
properly on first glance.

Now I just have to jig my model to do the required wrapping and bundling
into lists of Strings. Which should be relatively easy.

Now tested and proof of concepted ...

Thanks heaps
Zen

-- 
Homepage: www.SoulSound.net -- Free Australia: www.UPMART.org
Please respect the confidentiality of this email as sensibly warranted.

From zen at freedbms.net  Sat Apr 19 05:15:12 2008
From: zen at freedbms.net (Zenaan Harkness)
Date: Sat, 19 Apr 2008 22:15:12 +1000
Subject: [stringtemplate-interest] Javadoc generation using ST ?
In-Reply-To: <20080418231953.GN30456@freedbms.net>
References: <20080417155941.GC30456@freedbms.net>
	<E8304798-EFC9-4A82-B5DA-A56966C82074@cs.usfca.edu>
	<20080418034950.GF30456@freedbms.net>
	<20080418061907.GA625@freedbms.net>
	<B6D9D517-402E-4FEE-83B8-2ADB283F2806@cs.usfca.edu>
	<20080418170637.GM30456@freedbms.net>
	<779EA3A3-D811-4769-A950-29D15B9ECD80@cs.usfca.edu>
	<20080418231953.GN30456@freedbms.net>
Message-ID: <20080419121512.GA11232@freedbms.net>

On Sat, Apr 19, 2008 at 09:19:53AM +1000, Zenaan Harkness wrote:
> Everything seems as though it should work. Yes, I'm missing this:
> 
> My apologies. From the ST3.1 docs:
> 
> "... StringTemplate should wrap lines in between expression elements.
> StringTemplate never breaks literals, but it can break in between a
> literal and an expression."
> 
> I have been sending in single strings, for my javadoc section, thinking
> the string (single element from the template's perspective) would get
> broken up for wrapping purposes. Clearly I didn't read the docs
> properly on first glance.
> 
> Now I just have to jig my model to do the required wrapping and bundling
> into lists of Strings. Which should be relatively easy.

OK, my strings originally had \n embedded in them to separate lines
(created with vim in unix environment).

So I tried to split the string, ended up achieving this with
s.split("\n").

Now, some of my Javadocs, especially my class-level javadocs, are
multiple paragraphs.

As you can see even in this email, most paragraphs end with a line
shorter than the average line length of that paragraph. Which means,
from ST perspective, that the next line needs to be joined to that line
(and so on), until the right length of line is achieved (which is
longer than what I want). This also has the ugly habit of consuming
blank lines, which for those versed in javadoc, means no separate
paragraphs - all becomes one.

What to do again.

I realise I could break up the text into paras, and pass in a list of
paras to ST, and each para is a list of strings, for each line of the
paragraph. This is just more code in my model, new para-storing beans
etc, than I am prepared to fiddle with just for line formatting. This
would be imposing significantly on my model - my data representation,
simply to suit the template processing engine.

I contemplated hacking an AutoIndentWriter subclass, and passing that in
to the specific templates in my template groups (I have quite a
hierarchy of ST groups building up), but again it seems like just too
much work, having to locate specific templates by name, etc - the
model's controller (or the model itself) has to have some knowledge of
the specific template names, in order to apply the new writer at just
the right spot in the template hierarchy.

Which leads me to the thought of the ideal:

Ideally, I'd like ST to have a wrap_at_regex="\N" option to go with the
wrap=" * " option, where the \N means wrap at every newline in the
string.

You see, in my model data, it's simply layed out in plain text files,
loaded/ deserialized into my Java bean/model objects, and then passed
into the appropriate top level StringTemplate for view generation. A
template attribute or two would be the most pain free way to get what I
desire.

While we're at it, we might as well have a wrap_at_length=# option :)

What to do.

It dawned on me that the functionality of AutoIndentWriter is already
doing almost what we want - it's inserting the appropriate prefix for
each line - which is not just spaces, but a combination of spaces and/
or tabs, as per the input at each higher-level template, AND, this even
works when newlines are embedded in a string to be spat out (eg. a
javadoc comment) - ie the spaces and/or tabs prefixing the line at that
point are output at the beginning of each line _of the string so spat_.

So it's probably an easy jig to build this functionality into
AutoIndentWriter.

For me, I have hacked my model, to split all my javadoc strings at \n,
then to join them again with the exact string " * " prefixing each line
but the first.

VOILA! Javadoc output is being produced with precision, with only simple
newlines embedded into the source data text files as required/ desired.

Well, it's been a marathon of recursive frustration today, but I
achieved the result I need.

Hope the info's useful for someone,
Zen

-- 
Homepage: www.SoulSound.net -- Free Australia: www.UPMART.org
Please respect the confidentiality of this email as sensibly warranted.

From 0x6e6562 at gmail.com  Sat Apr 19 08:49:22 2008
From: 0x6e6562 at gmail.com (Ben Hood)
Date: Sat, 19 Apr 2008 16:49:22 +0100
Subject: [stringtemplate-interest] Passing values into templates
Message-ID: <F530514D-A9E6-4790-972E-C4B6C51206A7@gmail.com>

Hi,

Although my current work is the 2nd project I've used ST to do  
multiple language code generation, I'm still fairly new to it and  
haven't understood all of the facets of the library yet.

I'm trying to generate a generic processing template that can be  
subclassed for different target languages

At the moment I'm trying to pass in the result of a computation from  
within a super template:

temp() ::= <<
int next = .....
if (next <ge()> 0x20 && next <le()> 0x2f) {
         return <readBytes(length={ next - 0x20 })>;
}
 >>

with

ge() ::= ">="
le() ::= "\<="

and

readBytes(length) ::= "<! This should be overriden by a subclass  
template !>"

I'd like to be able to implement the readBytes(length) template in a  
subtemplate that is specific to the target language.

Am I approaching this wrongly?

Do I need to approach the template definition for a language specific  
function invocation in a more generic fashion than I'm doing here?

If so, how?

Thanks in advance,

Ben



  

From zen at freedbms.net  Sat Apr 19 15:18:44 2008
From: zen at freedbms.net (Zenaan Harkness)
Date: Sun, 20 Apr 2008 08:18:44 +1000
Subject: [stringtemplate-interest] Passing values into templates
In-Reply-To: <F530514D-A9E6-4790-972E-C4B6C51206A7@gmail.com>
References: <F530514D-A9E6-4790-972E-C4B6C51206A7@gmail.com>
Message-ID: <20080419221844.GQ30456@freedbms.net>

On Sat, Apr 19, 2008 at 04:49:22PM +0100, Ben Hood wrote:
> At the moment I'm trying to pass in the result of a computation from  
> within a super template:
> 
> temp() ::= <<
> int next = .....
> if (next <ge()> 0x20 && next <le()> 0x2f) {
>          return <readBytes(length={ next - 0x20 })>;
> }
>  >>
> 
> with
> 
> ge() ::= ">="
> le() ::= "\<="
> 
> and
> 
> readBytes(length) ::= "<! This should be overriden by a subclass  
> template !>"
> 
> I'd like to be able to implement the readBytes(length) template in a  
> subtemplate that is specific to the target language.

So your sub-group has a line near the top that says something like:

group my-language-or-subgroup-name : super-group-name;

??

And then your sub-groups (one for each language), implement
readBytes(length)?

Then it should work.

I haven't used STGroup interfaces yet, so someone else would have to
comment on that.

If it's not running, perhaps your value being passed to readbytes is all
that needs to change (you do know you can't do any maths calculations in
ST yes (except for if/endif)?).

Eg:
   return <readBytes("length= next - 0x20")>;

Good luck
Zen

-- 
Homepage: www.SoulSound.net -- Free Australia: www.UPMART.org
Please respect the confidentiality of this email as sensibly warranted.

From 0x6e6562 at gmail.com  Sat Apr 19 16:32:44 2008
From: 0x6e6562 at gmail.com (Ben Hood)
Date: Sun, 20 Apr 2008 00:32:44 +0100
Subject: [stringtemplate-interest] Passing values into templates
In-Reply-To: <20080419221844.GQ30456@freedbms.net>
References: <F530514D-A9E6-4790-972E-C4B6C51206A7@gmail.com>
	<20080419221844.GQ30456@freedbms.net>
Message-ID: <167C5C54-2388-40BF-B518-B8EA5420B028@gmail.com>


On 19 Apr 2008, at 23:18, Zenaan Harkness wrote:

>> I'd like to be able to implement the readBytes(length) template in a
>> subtemplate that is specific to the target language.
>
> So your sub-group has a line near the top that says something like:
>
> group my-language-or-subgroup-name : super-group-name;

No, I was doing that programmatically rather than using any syntax  
available in the template definition. I didn't even know you could do  
something like

group sub : super;

because it doesn't seem to appear in the documentation.

> And then your sub-groups (one for each language), implement
> readBytes(length)?
>
> Then it should work.
>
> I haven't used STGroup interfaces yet, so someone else would have to
> comment on that.
>
> If it's not running, perhaps your value being passed to readbytes is  
> all
> that needs to change (you do know you can't do any maths  
> calculations in
> ST yes (except for if/endif)?).
>
> Eg:
>   return <readBytes("length= next - 0x20")>;

If I do this, i.e. return <readBytes(length="next - 0x20")>; then I  
run into this error:

action parse error in group GenricReader line 7; template context is  
[decode]
line 1:1: unexpected token: readBytes

when the readBytes template is defined as

readBytes(length) ::= "foo"

Ben

From parrt at cs.usfca.edu  Sat Apr 19 22:26:57 2008
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sat, 19 Apr 2008 22:26:57 -0700
Subject: [stringtemplate-interest] Passing values into templates
In-Reply-To: <167C5C54-2388-40BF-B518-B8EA5420B028@gmail.com>
References: <F530514D-A9E6-4790-972E-C4B6C51206A7@gmail.com>
	<20080419221844.GQ30456@freedbms.net>
	<167C5C54-2388-40BF-B518-B8EA5420B028@gmail.com>
Message-ID: <E4928454-6D8B-43AD-9971-39D175EDEAB1@cs.usfca.edu>


On Apr 19, 2008, at 4:32 PM, Ben Hood wrote:
>> Eg:
>>   return <readBytes("length= next - 0x20")>;
>
> If I do this, i.e. return <readBytes(length="next - 0x20")>; then I
> run into this error:
>
> action parse error in group GenricReader line 7; template context is
> [decode]
> line 1:1: unexpected token: readBytes


problem is in template decode it appears.  did you terminate it?
Ter

From 0x6e6562 at gmail.com  Sun Apr 20 01:28:41 2008
From: 0x6e6562 at gmail.com (Ben Hood)
Date: Sun, 20 Apr 2008 09:28:41 +0100
Subject: [stringtemplate-interest] Passing values into templates
In-Reply-To: <E4928454-6D8B-43AD-9971-39D175EDEAB1@cs.usfca.edu>
References: <F530514D-A9E6-4790-972E-C4B6C51206A7@gmail.com>
	<20080419221844.GQ30456@freedbms.net>
	<167C5C54-2388-40BF-B518-B8EA5420B028@gmail.com>
	<E4928454-6D8B-43AD-9971-39D175EDEAB1@cs.usfca.edu>
Message-ID: <C0E1FFFB-8888-419B-AF92-30644C2EEBA7@gmail.com>


On 20 Apr 2008, at 06:26, Terence Parr wrote:

>
> On Apr 19, 2008, at 4:32 PM, Ben Hood wrote:
>>> Eg:
>>>  return <readBytes("length= next - 0x20")>;
>>
>> If I do this, i.e. return <readBytes(length="next - 0x20")>; then I
>> run into this error:
>>
>> action parse error in group GenricReader line 7; template context is
>> [decode]
>> line 1:1: unexpected token: readBytes
>
>
> problem is in template decode it appears.  did you terminate it?
> Ter

I've tried to break the problem down into it's simplest form.

If I do this:

decode() ::= <<
     int next = <readByte()>;
     if (next <ge()> 0x20 && next <le()> 0x2f) {
         return <readBytes(length="next - 0x20")>;
     }
 >>

readBytes(length) ::= "inputStream.readBytes(<length>)"

I get this error:

action parse error in group GenricReader line 8; template context is  
[decode]
line 1:1: unexpected token: readBytes

If I change it to this

decode() ::= <<
     int next = <readByte()>;
     if (next <ge()> 0x20 && next <le()> 0x2f) {
         return <readBytes("next - 0x20")>;
     }
 >>

readBytes(length) ::= "inputStream.readBytes(<length>)"

I get this error:

action parse error in group GenricReader line 15; template context is  
[readBytes]
line 1:7: expecting LPAREN, found 'null'

Maybe I'm doing something fundamentally wrong.

Ben

From zen at freedbms.net  Sun Apr 20 03:24:38 2008
From: zen at freedbms.net (Zenaan Harkness)
Date: Sun, 20 Apr 2008 20:24:38 +1000
Subject: [stringtemplate-interest] Passing values into templates
In-Reply-To: <C0E1FFFB-8888-419B-AF92-30644C2EEBA7@gmail.com>
References: <F530514D-A9E6-4790-972E-C4B6C51206A7@gmail.com>
	<20080419221844.GQ30456@freedbms.net>
	<167C5C54-2388-40BF-B518-B8EA5420B028@gmail.com>
	<E4928454-6D8B-43AD-9971-39D175EDEAB1@cs.usfca.edu>
	<C0E1FFFB-8888-419B-AF92-30644C2EEBA7@gmail.com>
Message-ID: <20080420102438.GA7671@freedbms.net>

On Sun, Apr 20, 2008 at 09:28:41AM +0100, Ben Hood wrote:
> 
> On 20 Apr 2008, at 06:26, Terence Parr wrote:
> 
> >
> > On Apr 19, 2008, at 4:32 PM, Ben Hood wrote:
> >>> Eg:
> >>>  return <readBytes("length= next - 0x20")>;
> >>
> >> If I do this, i.e. return <readBytes(length="next - 0x20")>; then I
> >> run into this error:
> >>
> >> action parse error in group GenricReader line 7; template context is
> >> [decode]
> >> line 1:1: unexpected token: readBytes
> >
> >
> > problem is in template decode it appears.  did you terminate it?
> > Ter
> 
> I've tried to break the problem down into it's simplest form.
> 
> If I do this:
> 
> decode() ::= <<
>      int next = <readByte()>;
>      if (next <ge()> 0x20 && next <le()> 0x2f) {
>          return <readBytes(length="next - 0x20")>;
>      }
>  >>
> 
> readBytes(length) ::= "inputStream.readBytes(<length>)"

"length" is a reserved word. You have to change that.

On the wiki for StringTemplate 3.0 documentation, see the bottom of the
"StringTemplate cheat sheet" section, which lists all the ST reserved
words.

TODO: Put "Reserved Words" in its own section. This is really important,
and bit me the other day too. I know its really short, but it's really
important, so there's no reason to not give it its own section with a
top-level heading, so people can easily click on it. Perhaps with a link
inside the "cheat sheet" page.

Zen

-- 
Homepage: www.SoulSound.net -- Free Australia: www.UPMART.org
Please respect the confidentiality of this email as sensibly warranted.

From zen at freedbms.net  Sun Apr 20 04:28:41 2008
From: zen at freedbms.net (Zenaan Harkness)
Date: Sun, 20 Apr 2008 21:28:41 +1000
Subject: [stringtemplate-interest] ST new feature request: new expression
	option: test="..."
Message-ID: <20080420112841.GC7671@freedbms.net>

Problem:
--------
I insert into my constructor template, a list of attributes.

Most attributes have a getter and a setter.

Some attributes are 'special', they only have getters;
in this case, the ctorFull must not include the atts with only getters,
since there is no local property for that attribute, only a getter
method (for example, a getter which is an alias for another getter, or a
getter which is a derived getter having custom code to derive its value
from other bean properties, or ... etc).

My ctorFull parameter list generator template currently looks like this:

   params(atts) ::= "(<atts:prop(); separator=\",\n\">)"

and where template "prop" sucks out the name of the property.

In this new variation, one of the properties has a derived getter, and
therefore an attribute of the property, hasSetter, returns false.

How do I exclude the property from the ctor?

Attempts:
---------

1) Anonymous subtemplate excludes property:
params(atts) ::= <<
(<atts:{<if(att.hasSetter)><prop()><endif>}; separator=",\n">)
>>

Problem: since we have ",\n" separator, the separator gets included even
for the excluded property, which clearly produces a syntax error in the
resultant code.

So, we cannot use 'separator' expression option.


2) As above, but without using builtin separator:
params(atts) ::= <<
(<first(atts):{<if(att.hasSetter)><prop()><endif>}>
<rest(atts):{<if(att.hasSetter)><\n><\t>,<prop()><endif>}>)
>>

Problem, since we're not using built-in separator, list processing must
be split into first and rest, and separator build into template. This
has the obvious problem of interaction with AutoIndentWriter, since the
separator is now at the start of every line.

Obvious solution, instead of first and rest, use front and last. Except,
as per emails from 25th Feb 2008 "Functional List Formatting", there is
no front (yet), so we must use more trickery in the form of a custom ST
subclass to provide for reversing lists (or build something into my
model, or ..??). Anyway, either way, this is seeming a bit inelegant,
and quite a bit of effort all up (fe, for those who follow in our
footsteps.


So,
3) With the proposed "test" expression option:

params(atts) ::= "(<atts:prop(); separator=\",\n\", test=\"it.hasSetter\">)"

Yes, now that's clean and elegant, intuitive and Just Works (TM)  :)

What do others think about such an expression option?

TIA
Zen

-- 
Homepage: www.SoulSound.net -- Free Australia: www.UPMART.org
Please respect the confidentiality of this email as sensibly warranted.

From zen at freedbms.net  Sun Apr 20 04:30:22 2008
From: zen at freedbms.net (Zenaan Harkness)
Date: Sun, 20 Apr 2008 21:30:22 +1000
Subject: [stringtemplate-interest] Passing values into templates
In-Reply-To: <20080420102438.GA7671@freedbms.net>
References: <F530514D-A9E6-4790-972E-C4B6C51206A7@gmail.com>
	<20080419221844.GQ30456@freedbms.net>
	<167C5C54-2388-40BF-B518-B8EA5420B028@gmail.com>
	<E4928454-6D8B-43AD-9971-39D175EDEAB1@cs.usfca.edu>
	<C0E1FFFB-8888-419B-AF92-30644C2EEBA7@gmail.com>
	<20080420102438.GA7671@freedbms.net>
Message-ID: <20080420113022.GA31458@freedbms.net>

On Sun, Apr 20, 2008 at 08:24:38PM +1000, Zenaan Harkness wrote:
...
> On the wiki for StringTemplate 3.0 documentation, see the bottom of the
s/3.0/3.1/

Apologies...

-- 
Homepage: www.SoulSound.net -- Free Australia: www.UPMART.org
Please respect the confidentiality of this email as sensibly warranted.

From zen at freedbms.net  Sun Apr 20 07:00:18 2008
From: zen at freedbms.net (Zenaan Harkness)
Date: Mon, 21 Apr 2008 00:00:18 +1000
Subject: [stringtemplate-interest] ST new feature request:
	new	expression option: test="..."
In-Reply-To: <20080420112841.GC7671@freedbms.net>
References: <20080420112841.GC7671@freedbms.net>
Message-ID: <20080420140018.GA16028@freedbms.net>

> params(atts) ::= "(<atts:prop(); separator=\",\n\", test=\"it.hasSetter\">)"

Forgot to mention, this could also be the place for null-testing, eg
test="isnull", test="!isnull" etc.

Zen

From 0x6e6562 at gmail.com  Sun Apr 20 10:26:51 2008
From: 0x6e6562 at gmail.com (Ben Hood)
Date: Sun, 20 Apr 2008 18:26:51 +0100
Subject: [stringtemplate-interest] Passing values into templates
In-Reply-To: <20080420102438.GA7671@freedbms.net>
References: <F530514D-A9E6-4790-972E-C4B6C51206A7@gmail.com>
	<20080419221844.GQ30456@freedbms.net>
	<167C5C54-2388-40BF-B518-B8EA5420B028@gmail.com>
	<E4928454-6D8B-43AD-9971-39D175EDEAB1@cs.usfca.edu>
	<C0E1FFFB-8888-419B-AF92-30644C2EEBA7@gmail.com>
	<20080420102438.GA7671@freedbms.net>
Message-ID: <22B184F0-AF1A-4EA9-B20C-AB2584668987@gmail.com>

>>
> "length" is a reserved word. You have to change that.
>
> On the wiki for StringTemplate 3.0 documentation, see the bottom of  
> the
> "StringTemplate cheat sheet" section, which lists all the ST reserved
> words.

Excellent. That solved the problem. Thanks for your help.

Ben

From parrt at cs.usfca.edu  Sun Apr 20 13:01:55 2008
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sun, 20 Apr 2008 13:01:55 -0700
Subject: [stringtemplate-interest] ST new feature request: new
	expression option: test="..."
In-Reply-To: <20080420112841.GC7671@freedbms.net>
References: <20080420112841.GC7671@freedbms.net>
Message-ID: <C1C0E5B3-4AC7-421D-B41D-F858795F3B1B@cs.usfca.edu>


On Apr 20, 2008, at 4:28 AM, Zenaan Harkness wrote:
> 3) With the proposed "test" expression option:
>
> params(atts) ::= "(<atts:prop(); separator=\",\n\", test= 
> \"it.hasSetter\">)"
>
> Yes, now that's clean and elegant, intuitive and Just Works (TM)  :)
>
> What do others think about such an expression option?

how about

> params(atts) ::= "(<atts:{a | <if(a.hasSetter)><prop(it=a)><endif>;  
> separator=\",\n\")"

Ter

From zen at freedbms.net  Sun Apr 20 17:20:21 2008
From: zen at freedbms.net (Zenaan Harkness)
Date: Mon, 21 Apr 2008 10:20:21 +1000
Subject: [stringtemplate-interest] ST new feature request:
	new	expression option: test="..."
In-Reply-To: <C1C0E5B3-4AC7-421D-B41D-F858795F3B1B@cs.usfca.edu>
References: <20080420112841.GC7671@freedbms.net>
	<C1C0E5B3-4AC7-421D-B41D-F858795F3B1B@cs.usfca.edu>
Message-ID: <20080421002021.GH7671@freedbms.net>

>> 3) With the proposed "test" expression option:
>>
>> params(atts) ::= "(<atts:prop(); separator=\",\n\", 
>> test=\"it.hasSetter\">)"
>>
>> Yes, now that's clean and elegant, intuitive and Just Works (TM)  :)
>>
>> What do others think about such an expression option?
>
> how about
>
>> params(atts) ::= "(<atts:{a | <if(a.hasSetter)><prop(it=a)><endif>; 
>> separator=\",\n\")"

I assume that you mean for a closing brace before the semi-colon.

The output this produces is:
   (Type1 propertyName1,
   type2 propertyName2,
   Type3 propertyName3,

   )

Note the extra comma, and blank line, at the end of the output.

This is because this particular bean has four properties, and the last
one in the sequence is the one with no setter.

If I also test, by making property2 a getter-only as well, we get:

   (Type1 propertyName1,
   ,
   Type3 propertyName3,

   )

As you can see, the "separator" gets included for each iteration of the
list, whether or not the inner (anonymous or otherwise) template
produces any output...

This is different to a null element in the list, it is instad a list of
elements, only some of which are to be rendered, based on simple boolean
properties of those elements.

Zen

From zen at freedbms.net  Mon Apr 21 00:01:59 2008
From: zen at freedbms.net (Zenaan Harkness)
Date: Mon, 21 Apr 2008 17:01:59 +1000
Subject: [stringtemplate-interest] isName/ getIsName property lookup ?
Message-ID: <20080421070159.GI7671@freedbms.net>

On the ST3.1 Expressions doco, it says, regarding attribute lookup, for
Java:

A method named isName() - StringTemplate accepts isName() if it returns
a Boolean If found, a return value is obtained via reflection.


This does not seem to work. Only getIsName works, AFAICT.

Can anyone point me to an example of how this works in Java ST?
Or is there a bug for this?

tia
zen

-- 
Homepage: www.SoulSound.net -- Free Australia: www.UPMART.org
Please respect the confidentiality of this email as sensibly warranted.

From brianchina60221 at gmail.com  Tue Apr 22 07:45:20 2008
From: brianchina60221 at gmail.com (brian)
Date: Tue, 22 Apr 2008 22:45:20 +0800
Subject: [stringtemplate-interest] messed up ST 3.1 Maven POM
Message-ID: <22f6a8f70804220745v39f2407aj73819198c27223e@mail.gmail.com>

The Maven POM for ST 3.1 at
http://mirrors.ibiblio.org/pub/mirrors/maven2/org/antlr/stringtemplate/3.1-b1/stringtemplate-3.1-b1.pom
seems messed up because it lacks a dependency on ANTLR.

Who did that? Could you please upload a fixed one? Thanks.

