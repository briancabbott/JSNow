From contact at moonbase.com.au  Sun Nov  4 02:00:30 2007
From: contact at moonbase.com.au (Mark Wharton)
Date: Sun, 04 Nov 2007 19:00:30 +0900
Subject: [stringtemplate-interest] Additional attributes in template
	application?
Message-ID: <1194170430.8089.1219433835@webmail.messagingengine.com>

Hello Hello,

A question about $first$ and $last$ attributes in template application.

I've implemented a subset of string template for one of my projects. 
Template application is working (but not attribute operators). I added
$first$, $last$, and $more$ attributes in template application for
templates to properly handle end of list in code generation...

For example my template (source.st) includes the following:

GetElementFieldArray()
  do
    result := [ $Elements;separator=", "$ ]; -- seed array complement
  end;

GetElementSeedArray()
  do
    result := [ $Elements:{o$it$ElementSeed$if(!last)$, $endif$}$ ];
  end;

Elements is a multi-valued attribute with "EditBuffer" & "UndoBuffer".

ToString produces:

GetElementFieldArray()
  do
    result := [ EditBuffer, UndoBuffer ]; -- seed array complement
  end;

GetElementSeedArray()
  do
    result := [ oEditBufferElementSeed, oUndoBufferElementSeed ];
  end;

Is this really a good idea? Even though I'm using my own implementation,
I don't want non standard elements if it can be helped. String template
defines $it$, $i$ and $i0$. I believe $first$, $last$, $more$ are
logical additions, however, I don't deny the thought that went
into adding $it$, $i$ and $i0$ in the first place.

I've looked at the documentation for attribute operators but it was not
obvious how to treat cases like the one I've described above.

Any help would be wonderful, thanks.

Cheers,

Mark

Mark Wharton
+ 8190 9834 2559
contact at moonbase.com.au


From contact at moonbase.com.au  Sun Nov  4 02:59:49 2007
From: contact at moonbase.com.au (Mark Wharton)
Date: Sun, 04 Nov 2007 19:59:49 +0900
Subject: [stringtemplate-interest] Additional attributes in template
 application?
In-Reply-To: <1194170430.8089.1219433835@webmail.messagingengine.com>
References: <1194170430.8089.1219433835@webmail.messagingengine.com>
Message-ID: <1194173989.16016.1219440245@webmail.messagingengine.com>

Hello,

Amazing how writing an email about a problems helps you solve it!

  result := [ $Elements:{o$it$ElementSeed};separator=", "$ ];

Does the trick! $first$ and $last$ etc are probably not necessary.

Feeling a little silly for my first post...

Cheers,

Mark

On Sun, 04 Nov 2007 19:00:30 +0900, "Mark Wharton"
<contact at moonbase.com.au> said:
> Hello Hello,
> 
> A question about $first$ and $last$ attributes in template application.
> 
> I've implemented a subset of string template for one of my projects. 
> Template application is working (but not attribute operators). I added
> $first$, $last$, and $more$ attributes in template application for
> templates to properly handle end of list in code generation...
> 
> For example my template (source.st) includes the following:
> 
> GetElementFieldArray()
>   do
>     result := [ $Elements;separator=", "$ ]; -- seed array complement
>   end;
> 
> GetElementSeedArray()
>   do
>     result := [ $Elements:{o$it$ElementSeed$if(!last)$, $endif$}$ ];
>   end;
> 
> Elements is a multi-valued attribute with "EditBuffer" & "UndoBuffer".
> 
> ToString produces:
> 
> GetElementFieldArray()
>   do
>     result := [ EditBuffer, UndoBuffer ]; -- seed array complement
>   end;
> 
> GetElementSeedArray()
>   do
>     result := [ oEditBufferElementSeed, oUndoBufferElementSeed ];
>   end;
> 
> Is this really a good idea? Even though I'm using my own implementation,
> I don't want non standard elements if it can be helped. String template
> defines $it$, $i$ and $i0$. I believe $first$, $last$, $more$ are
> logical additions, however, I don't deny the thought that went
> into adding $it$, $i$ and $i0$ in the first place.
> 
> I've looked at the documentation for attribute operators but it was not
> obvious how to treat cases like the one I've described above.
> 
> Any help would be wonderful, thanks.
> 
> Cheers,
> 
> Mark
> 
> Mark Wharton
> + 8190 9834 2559
> contact at moonbase.com.au
> 
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org:8080/mailman/listinfo/stringtemplate-interest
Mark Wharton
+ 8190 9834 2559
contact at moonbase.com.au


From parrt at cs.usfca.edu  Mon Nov  5 11:17:55 2007
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon, 5 Nov 2007 11:17:55 -0800
Subject: [stringtemplate-interest] Additional attributes in template
	application?
In-Reply-To: <1194173989.16016.1219440245@webmail.messagingengine.com>
References: <1194170430.8089.1219433835@webmail.messagingengine.com>
	<1194173989.16016.1219440245@webmail.messagingengine.com>
Message-ID: <89F24C0D-60C6-42A5-B367-17295CC7BAFF@cs.usfca.edu>


On Nov 4, 2007, at 2:59 AM, Mark Wharton wrote:

> Hello,
>
> Amazing how writing an email about a problems helps you solve it!
>
>   result := [ $Elements:{o$it$ElementSeed};separator=", "$ ];
>
> Does the trick! $first$ and $last$ etc are probably not necessary.
>
> Feeling a little silly for my first post...

No worries. the thought process can be helpful. :)

Ter

From parrt at cs.usfca.edu  Thu Nov  8 18:06:03 2007
From: parrt at cs.usfca.edu (Terence Parr)
Date: Thu, 8 Nov 2007 18:06:03 -0800
Subject: [stringtemplate-interest] auto-flattening lists
Message-ID: <D92FD3B6-5274-4053-ACDC-8C545AF8D143@cs.usfca.edu>

Hi, added a bug

http://www.antlr.org:8888/browse/ST-29

mentioned by John Synders at

http://hardlikesoftware.com/weblog/2007/06/01/thoughts-on- 
stringtemplate-part-1/

I note in my code this for setAttribute:

	 *  If you send in a List plus other values to the same
	 *  attribute, they all get flattened into one List of values.
	 *  This will be a new list object so that incoming objects are
	 *  not altered.

What is correct functionality?  If you send in a list of names and  
then "Ter", should it add "Ter" to the list or should the attribute  
be a 2-element list with a list as first element and string as 2nd?

Ter


From jaluber at gmx.de  Fri Nov  9 04:04:03 2007
From: jaluber at gmx.de (Johannes Luber)
Date: Fri, 09 Nov 2007 13:04:03 +0100
Subject: [stringtemplate-interest] auto-flattening lists
In-Reply-To: <D92FD3B6-5274-4053-ACDC-8C545AF8D143@cs.usfca.edu>
References: <D92FD3B6-5274-4053-ACDC-8C545AF8D143@cs.usfca.edu>
Message-ID: <47344CB3.9040305@gmx.de>

Terence Parr wrote:
> What is correct functionality?  If you send in a list of names and  
> then "Ter", should it add "Ter" to the list or should the attribute  
> be a 2-element list with a list as first element and string as 2nd?

I'd expect the same behaviour as from collections, which are initialized
with another collection first. Adding extra elements means appending to
the internal list, resulting in a flat n+1 list.

Johannes

From jjsnyders at rcn.com  Fri Nov  9 08:34:38 2007
From: jjsnyders at rcn.com (John Snyders)
Date: Fri, 09 Nov 2007 11:34:38 -0500
Subject: [stringtemplate-interest] auto-flattening lists
In-Reply-To: <D92FD3B6-5274-4053-ACDC-8C545AF8D143@cs.usfca.edu>
References: <D92FD3B6-5274-4053-ACDC-8C545AF8D143@cs.usfca.edu>
Message-ID: <47348C1E.1020602@rcn.com>

Thanks for entering a bug for this.
     Even though |$table(t=[ [ "a", "b" ], [ "c", "d" ] ])$| is allowed 
it gets flattened.

The bug isn't explicit about what the expected fix is. Perhaps it is 
obvious but I'll say it anyway.
My expectation is that the t argument to the table template be set to a 
list which contains two elements
the first being a list of elements "a" and "b" and the second being a 
list of elements "c" and "d".

The blog post is all about the data model of ST and has nothing to say 
about Java API calls
such as setAttribute. Am I correct that the use you are asking about is 
where setAttribute is
used to build up a list item by item? I don't think I used that pattern 
much. I tend to have a
fully formed data structure already and then just do one setAttribute 
for it.

I think that the setAttribute behavior is correct
// myList is "a","b"
// myOther list is "c", "d"
setAttribute(foo, myList)
setAttribute(foo, myOtherList)
setAttribute(foo, "e")
// should result in foo being the list "a", "b", "c", "d", "e"
If you want deep structure to your attributes just build it first then 
call setAttribute once.

-John

Terence Parr wrote:
> Hi, added a bug
>
> http://www.antlr.org:8888/browse/ST-29
>
> mentioned by John Synders at
>
> http://hardlikesoftware.com/weblog/2007/06/01/thoughts-on- 
> stringtemplate-part-1/
>
> I note in my code this for setAttribute:
>
> 	 *  If you send in a List plus other values to the same
> 	 *  attribute, they all get flattened into one List of values.
> 	 *  This will be a new list object so that incoming objects are
> 	 *  not altered.
>
> What is correct functionality?  If you send in a list of names and  
> then "Ter", should it add "Ter" to the list or should the attribute  
> be a 2-element list with a list as first element and string as 2nd?
>
> Ter
>
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org:8080/mailman/listinfo/stringtemplate-interest
>
>   

From parrt at cs.usfca.edu  Fri Nov  9 13:54:50 2007
From: parrt at cs.usfca.edu (Terence Parr)
Date: Fri, 9 Nov 2007 13:54:50 -0800
Subject: [stringtemplate-interest] problem with null handling in
	parallel iteration
In-Reply-To: <20070404035830.723326f0@doses.lan>
References: <20070404035830.723326f0@doses.lan>
Message-ID: <14A1CB4F-9E56-4947-B36A-59E737A1CB98@cs.usfca.edu>

Brian,

This test works great for me:

	public void testParallelAttributeIterationWithNullValue() throws  
Exception {
		StringTemplate e = new StringTemplate(
				"$names,phones,salaries:{n,p,s | $n$@$p$: $s$\n}$"
			);
		e = e.getInstanceOf();
		e.setAttribute("names", "Ter");
		e.setAttribute("names", "Tom");
		e.setAttribute("names", "Sriram");
		e.setAttribute("phones", new ArrayList() {{add("1"); add(null); add 
("3");}});
		e.setAttribute("salaries", "big");
		e.setAttribute("salaries", "huge");
		e.setAttribute("salaries", "enormous");
		String expecting = "Ter at 1: big"+newline+
						   "Tom@: huge"+newline+
						   "Sriram at 3: enormous"+newline;
		assertEquals(expecting, e.toString());
	}

note the null list element.

Perhaps you're referring to just a list literal inside ST? like  
["xxxxx1", hack.x , hack.x , "xxxxx4" ]

I guess we need a null literal, eh??

Ter

From parrt at cs.usfca.edu  Fri Nov  9 15:22:51 2007
From: parrt at cs.usfca.edu (Terence Parr)
Date: Fri, 9 Nov 2007 15:22:51 -0800
Subject: [stringtemplate-interest] problem with null handling in
	parallel iteration
In-Reply-To: <14A1CB4F-9E56-4947-B36A-59E737A1CB98@cs.usfca.edu>
References: <20070404035830.723326f0@doses.lan>
	<14A1CB4F-9E56-4947-B36A-59E737A1CB98@cs.usfca.edu>
Message-ID: <DF7C0D44-D97C-4CD2-8DED-D294592B0DC2@cs.usfca.edu>

Also see

http://www.antlr.org:8888/browse/ST-21

i allow empty list atoms now:

o updated group.g and eval.g so that list literals can have empty
   atoms like $["a",,"b"]:{n | ...}; null="nullstring"$.

Ter


From parrt at cs.usfca.edu  Fri Nov  9 15:27:00 2007
From: parrt at cs.usfca.edu (Terence Parr)
Date: Fri, 9 Nov 2007 15:27:00 -0800
Subject: [stringtemplate-interest] auto-flattening lists
In-Reply-To: <47348C1E.1020602@rcn.com>
References: <D92FD3B6-5274-4053-ACDC-8C545AF8D143@cs.usfca.edu>
	<47348C1E.1020602@rcn.com>
Message-ID: <BBF904AF-EED8-4087-A07E-B341D826416E@cs.usfca.edu>


On Nov 9, 2007, at 8:34 AM, John Snyders wrote:

> Thanks for entering a bug for this.
>     Even though |$table(t=[ [ "a", "b" ], [ "c", "d" ] ])$| is  
> allowed it gets flattened.
>
> The bug isn't explicit about what the expected fix is. Perhaps it  
> is obvious but I'll say it anyway.
> My expectation is that the t argument to the table template be set  
> to a list which contains two elements
> the first being a list of elements "a" and "b" and the second being  
> a list of elements "c" and "d".

Yes, makes sense when you use a list literal inside the template...i  
never do that.  is that common?

> The blog post is all about the data model of ST and has nothing to  
> say about Java API calls
> such as setAttribute. Am I correct that the use you are asking  
> about is where setAttribute is
> used to build up a list item by item? I don't think I used that  
> pattern much. I tend to have a
> fully formed data structure already and then just do one  
> setAttribute for it.

Me too.  It should not flatten in that case.  I don't believe the  
software flattens it now.  Only repeated setAttributes do that.

>
> I think that the setAttribute behavior is correct

ok, cool.

> // myList is "a","b"
> // myOther list is "c", "d"
> setAttribute(foo, myList)
> setAttribute(foo, myOtherList)
> setAttribute(foo, "e")
> // should result in foo being the list "a", "b", "c", "d", "e"
> If you want deep structure to your attributes just build it first  
> then call setAttribute once.

Great. Ok, i'll just leave everything as is for now.  That bug for  
list literals can be left for a while.

Ter


From nvivo.misc at gmail.com  Fri Nov  9 15:39:10 2007
From: nvivo.misc at gmail.com (Natan Vivo)
Date: Fri, 9 Nov 2007 21:39:10 -0200
Subject: [stringtemplate-interest] Using ST maps on C#
Message-ID: <d78326310711091539q206eb5bj99259b4a850b43af@mail.gmail.com>

Hi!

I'm developing an application with StringTemplate using the C# version.

I was loading a map from a group file and I saw that the map doesn't handle
the "default" value the same way as in the template. When I get a map using
GetMap(name), it seems to return a simple hashtable, and if I set the
default value in the map, it adds a "_default_" key with the value. If the
value is "key", the value is an empty string.

So, my question is: is the official way of detecting if the value is the key
to check if _default_ == String.Empty?


Now, if I can suggest something, it would be nice if GetMap returned a
custom implementation of Hashtable that mimics the behavior of the map on
ST. We can extend the hashtable and override the current indexer, so that if
the value is not found, it returns the default value, and if that is the
key, it returns it exactly like the map.

Thanks for this great library!
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org:8080/pipermail/stringtemplate-interest/attachments/20071109/176d0083/attachment.html 

From parrt at cs.usfca.edu  Fri Nov  9 17:27:26 2007
From: parrt at cs.usfca.edu (Terence Parr)
Date: Fri, 9 Nov 2007 17:27:26 -0800
Subject: [stringtemplate-interest] ST 3.1 release imminent
Message-ID: <D9B2DB24-5DFC-41B4-A29D-74DEBBF86790@cs.usfca.edu>

hi Kunle (C#) and I (Java) have been working hard to get ST ready for  
3.1 release.

I just added a few things (bug fixes and small new features) and so  
Kunle will need to catch up and then I need to update the doc.  I  
believe these are the last changes:

11-09-2007

o added elseif. $if(x)$...$elseif(y)$...$else$...$endif$

o updated some unit tests (names, guts) to make more sense.

o updated group.g and eval.g so that list literals can have empty
   atoms like $["a",,"b"]:{n | ...}; null="nullstring"$.

11-08-2007

o "default" was not a valid value in map.  had testLiterals looking  
even at strings in lexer for
   group.g. ST-15

o ST-18 fixed.  put close in a finally block.

Submitted to depot (only a few small changes to code thankfully)

Ter

From parrt at cs.usfca.edu  Fri Nov  9 17:31:17 2007
From: parrt at cs.usfca.edu (Terence Parr)
Date: Fri, 9 Nov 2007 17:31:17 -0800
Subject: [stringtemplate-interest] ST 3.1 release imminent
In-Reply-To: <D9B2DB24-5DFC-41B4-A29D-74DEBBF86790@cs.usfca.edu>
References: <D9B2DB24-5DFC-41B4-A29D-74DEBBF86790@cs.usfca.edu>
Message-ID: <AC8F1DC2-2259-43DA-92DC-5F4E45D804E3@cs.usfca.edu>

oh. Here is the java daily build:

http://www.stringtemplate.org/download/build/ 
stringtemplate-11-09-2007.17.tar.gz

Ter
On Nov 9, 2007, at 5:27 PM, Terence Parr wrote:

> hi Kunle (C#) and I (Java) have been working hard to get ST ready for
> 3.1 release.
>
> I just added a few things (bug fixes and small new features) and so
> Kunle will need to catch up and then I need to update the doc.  I
> believe these are the last changes:
>
> 11-09-2007
>
> o added elseif. $if(x)$...$elseif(y)$...$else$...$endif$
>
> o updated some unit tests (names, guts) to make more sense.
>
> o updated group.g and eval.g so that list literals can have empty
>    atoms like $["a",,"b"]:{n | ...}; null="nullstring"$.
>
> 11-08-2007
>
> o "default" was not a valid value in map.  had testLiterals looking
> even at strings in lexer for
>    group.g. ST-15
>
> o ST-18 fixed.  put close in a finally block.
>
> Submitted to depot (only a few small changes to code thankfully)
>
> Ter
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org:8080/mailman/listinfo/stringtemplate-interest


From jjsnyders at rcn.com  Fri Nov  9 19:31:37 2007
From: jjsnyders at rcn.com (John Snyders)
Date: Fri, 09 Nov 2007 22:31:37 -0500
Subject: [stringtemplate-interest] auto-flattening lists
In-Reply-To: <BBF904AF-EED8-4087-A07E-B341D826416E@cs.usfca.edu>
References: <D92FD3B6-5274-4053-ACDC-8C545AF8D143@cs.usfca.edu>
	<47348C1E.1020602@rcn.com>
	<BBF904AF-EED8-4087-A07E-B341D826416E@cs.usfca.edu>
Message-ID: <47352619.5040607@rcn.com>


>> Thanks for entering a bug for this.
>>     Even though |$table(t=[ [ "a", "b" ], [ "c", "d" ] ])$| is 
>> allowed it gets flattened.
>>
>> The bug isn't explicit about what the expected fix is. Perhaps it is 
>> obvious but I'll say it anyway.
>> My expectation is that the t argument to the table template be set to 
>> a list which contains two elements
>> the first being a list of elements "a" and "b" and the second being a 
>> list of elements "c" and "d".
>
> Yes, makes sense when you use a list literal inside the template...i 
> never do that.  is that common?
We won't know until it works as expected ;-)
It was a long time ago but I think I did try to do something like that once.

>> The blog post is all about the data model of ST and has nothing to 
>> say about Java API calls
>> such as setAttribute. Am I correct that the use you are asking about 
>> is where setAttribute is
>> used to build up a list item by item? I don't think I used that 
>> pattern much. I tend to have a
>> fully formed data structure already and then just do one setAttribute 
>> for it.
>
> Me too.  It should not flatten in that case.  I don't believe the 
> software flattens it now.  Only repeated setAttributes do that.
>
>>
>> I think that the setAttribute behavior is correct
>
> ok, cool.
>
>> // myList is "a","b"
>> // myOther list is "c", "d"
>> setAttribute(foo, myList)
>> setAttribute(foo, myOtherList)
>> setAttribute(foo, "e")
>> // should result in foo being the list "a", "b", "c", "d", "e"
>> If you want deep structure to your attributes just build it first 
>> then call setAttribute once.
>
> Great. Ok, i'll just leave everything as is for now.  That bug for 
> list literals can be left for a while.
>
> Ter
>

From parrt at cs.usfca.edu  Sat Nov 10 18:35:29 2007
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sat, 10 Nov 2007 18:35:29 -0800
Subject: [stringtemplate-interest] added ST cheat sheet
Message-ID: <9C08DF69-871B-4BA4-8CB4-BF42FF615CA4@cs.usfca.edu>

http://www.antlr.org/wiki/display/ST/StringTemplate+cheat+sheet

working on doc in prep for 3.1.

Ter

From parrt at cs.usfca.edu  Mon Nov 12 14:05:22 2007
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon, 12 Nov 2007 14:05:22 -0800
Subject: [stringtemplate-interest] auto-flattening lists
In-Reply-To: <47352619.5040607@rcn.com>
References: <D92FD3B6-5274-4053-ACDC-8C545AF8D143@cs.usfca.edu>
	<47348C1E.1020602@rcn.com>
	<BBF904AF-EED8-4087-A07E-B341D826416E@cs.usfca.edu>
	<47352619.5040607@rcn.com>
Message-ID: <943A6E9E-EF74-4CBD-9C08-DE6F95868F99@cs.usfca.edu>


On Nov 9, 2007, at 7:31 PM, John Snyders wrote:

>
>>> Thanks for entering a bug for this.
>>>     Even though |$table(t=[ [ "a", "b" ], [ "c", "d" ] ])$| is  
>>> allowed it gets flattened.
>>>
>>> The bug isn't explicit about what the expected fix is. Perhaps it  
>>> is obvious but I'll say it anyway.
>>> My expectation is that the t argument to the table template be  
>>> set to a list which contains two elements
>>> the first being a list of elements "a" and "b" and the second  
>>> being a list of elements "c" and "d".
>>
>> Yes, makes sense when you use a list literal inside the  
>> template...i never do that.  is that common?
> We won't know until it works as expected ;-)

hhah hahah!

> It was a long time ago but I think I did try to do something like  
> that once.

Hmm...ok, we can add to future list.

I think I'm ready with 3.1 :)

Ter

From jjsnyders at rcn.com  Wed Nov 14 21:12:58 2007
From: jjsnyders at rcn.com (John Snyders)
Date: Thu, 15 Nov 2007 00:12:58 -0500
Subject: [stringtemplate-interest] ST 3.1 release imminent
In-Reply-To: <D9B2DB24-5DFC-41B4-A29D-74DEBBF86790@cs.usfca.edu>
References: <D9B2DB24-5DFC-41B4-A29D-74DEBBF86790@cs.usfca.edu>
Message-ID: <473BD55A.3030506@rcn.com>

I'm glad to hear that 3.1 is nearly ready. I hope it is not too late to 
bring up these issues. Sorry I have been busy with other things and have 
not been following the ST list.

The most important bug that needs to be fixed in my opinion is passing 
iterators to templates. I did a quick scan of the bug list both open and 
recently resolved and didn't find a mention of this. Passing an iterator 
to a template just won't work. Something like Java 5 Iterable must be 
passed instead. I wrote about this here:
http://www.antlr.org:8080/pipermail/stringtemplate-interest/2007-May/001073.html
http://www.antlr.org:8080/pipermail/stringtemplate-interest/2007-May/001074.html
The problem of "using a list up" is also mentioned here
http://www.antlr.org:8080/pipermail/stringtemplate-interest/2007-January/000915.html

It is a coincident that just this weekend  I was trying to use ST on a 
quick  project to create some address labels from a CSV file. I was 
going to turn the CSV file into JSON  (using python) and use STST from 
the command line. The trouble is that the address label document (OOo 
XML) was a table and the first column needed to be different than the 
first. This meant using the first and rest functions on a list that was 
passed as a parameter to a template. The above bug made it impossible to 
do what I wanted. Sadly I had to fall back on XML and XSLT.

Even if this can't be fixed now I think it should go in the bug 
database. Not sure if I have access to enter bugs or not.

I also think that there should be a bug report to Remove definition of 
INT from the grammar.

Any interest in including STST in the distribution?

I'll mention some other feature requests just in case they were 
forgotten. I know that 3.1 is just a point release.

Support programming in the large by allowing .stg and .st files to refer 
to other .stg and .st files.

List comprehensions?
http://www.antlr.org:8080/pipermail/stringtemplate-interest/2007-June/001116.html

List slice?
http://www.antlr.org:8080/pipermail/stringtemplate-interest/2007-June/001090.html

Support for really large input data?
http://www.antlr.org:8080/pipermail/stringtemplate-interest/2006-December/000891.html

Just two comments inline below.
Thanks,
-John

Terence Parr wrote:
> hi Kunle (C#) and I (Java) have been working hard to get ST ready for  
> 3.1 release.
>
> I just added a few things (bug fixes and small new features) and so  
> Kunle will need to catch up and then I need to update the doc.  I  
> believe these are the last changes:
>
> 11-09-2007
>
> o added elseif. $if(x)$...$elseif(y)$...$else$...$endif$
>   
I really like this
> o updated some unit tests (names, guts) to make more sense.
>
> o updated group.g and eval.g so that list literals can have empty
>    atoms like $["a",,"b"]:{n | ...}; null="nullstring"$.
>   
Why this syntax rather than having a literal representation for null. Like

$["a",null,"b"]:{n | ...}; null="nullstring"$

A literal null may find other uses since it can be passed as the 
argument to a template.


> 11-08-2007
>
> o "default" was not a valid value in map.  had testLiterals looking  
> even at strings in lexer for
>    group.g. ST-15
>
> o ST-18 fixed.  put close in a finally block.
>
> Submitted to depot (only a few small changes to code thankfully)
>
> Ter
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org:8080/mailman/listinfo/stringtemplate-interest
>
>   

From parrt at cs.usfca.edu  Thu Nov 15 11:08:11 2007
From: parrt at cs.usfca.edu (Terence Parr)
Date: Thu, 15 Nov 2007 11:08:11 -0800
Subject: [stringtemplate-interest] ST 3.1 release imminent
In-Reply-To: <473BD55A.3030506@rcn.com>
References: <D9B2DB24-5DFC-41B4-A29D-74DEBBF86790@cs.usfca.edu>
	<473BD55A.3030506@rcn.com>
Message-ID: <1D795589-B8A4-4B4B-9337-B6A2F1ED48E8@cs.usfca.edu>


On Nov 14, 2007, at 9:12 PM, John Snyders wrote:

> I'm glad to hear that 3.1 is nearly ready. I hope it is not too  
> late to bring up these issues. Sorry I have been busy with other  
> things and have not been following the ST list.
>
> The most important bug that needs to be fixed in my opinion is  
> passing iterators to templates. I did a quick scan of the bug list  
> both open and recently resolved and didn't find a mention of this.  
> Passing an iterator to a template just won't work.

Correct.  I see no way around this as they violate ST's requirement  
of no side effects.

> Something like Java 5 Iterable must be passed instead. I wrote  
> about this here:
> http://www.antlr.org:8080/pipermail/stringtemplate-interest/2007- 
> May/001073.html
> http://www.antlr.org:8080/pipermail/stringtemplate-interest/2007- 
> May/001074.html
> The problem of "using a list up" is also mentioned here
> http://www.antlr.org:8080/pipermail/stringtemplate-interest/2007- 
> January/000915.html

Do you have a solution?  I'm all ears :)

> It is a coincident that just this weekend  I was trying to use ST  
> on a quick  project to create some address labels from a CSV file.  
> I was going to turn the CSV file into JSON  (using python) and use  
> STST from the command line. The trouble is that the address label  
> document (OOo XML) was a table and the first column needed to be  
> different than the first. This meant using the first and rest  
> functions on a list that was passed as a parameter to a template.  
> The above bug made it impossible to do what I wanted. Sadly I had  
> to fall back on XML and XSLT.

I'm eager to fix this.  Perhaps we simply copy the data?  Expensive.

> Even if this can't be fixed now I think it should go in the bug  
> database. Not sure if I have access to enter bugs or not.

I have a unit test that fails...i'll add

http://www.antlr.org:8888/browse/ST-30

> I also think that there should be a bug report to Remove definition  
> of INT from the grammar.

http://www.antlr.org:8888/browse/ST-31

which grammar is it?

> Any interest in including STST in the distribution?

sure.

> I'll mention some other feature requests just in case they were  
> forgotten. I know that 3.1 is just a point release.
>
> Support programming in the large by allowing .stg and .st files to  
> refer to other .stg and .st files.
>
> List comprehensions?
> http://www.antlr.org:8080/pipermail/stringtemplate-interest/2007- 
> June/001116.html
>
> List slice?
> http://www.antlr.org:8080/pipermail/stringtemplate-interest/2007- 
> June/001090.html

I'd rather not add this w/o more thought.

> Support for really large input data?
> http://www.antlr.org:8080/pipermail/stringtemplate-interest/2006- 
> December/000891.html

existing bug report about this...

>> o added elseif. $if(x)$...$elseif(y)$...$else$...$endif$
>>
> I really like this

hooray!

>> o updated some unit tests (names, guts) to make more sense.
>>
>> o updated group.g and eval.g so that list literals can have empty
>>    atoms like $["a",,"b"]:{n | ...}; null="nullstring"$.
>>
> Why this syntax rather than having a literal representation for  
> null. Like
>
> $["a",null,"b"]:{n | ...}; null="nullstring"$
>
> A literal null may find other uses since it can be passed as the  
> argument to a template.

Yeah, I thought about that...wasn't sure that adding a keyword was  
worth it.  Passing null to template for attribute x is achieved by  
not setting a value for x at the moment. ;)  Hmm...another case?

THanks for your excellent analysis and time invested in ST, John!

Ter

From parrt at cs.usfca.edu  Thu Nov 15 11:23:25 2007
From: parrt at cs.usfca.edu (Terence Parr)
Date: Thu, 15 Nov 2007 11:23:25 -0800
Subject: [stringtemplate-interest] ST 3.1 release imminent
In-Reply-To: <473BD55A.3030506@rcn.com>
References: <D9B2DB24-5DFC-41B4-A29D-74DEBBF86790@cs.usfca.edu>
	<473BD55A.3030506@rcn.com>
Message-ID: <888ECD79-8A01-47CA-A301-D6E129AA62E4@cs.usfca.edu>


On Nov 14, 2007, at 9:12 PM, John Snyders wrote:
> Support programming in the large by allowing .stg and .st files to  
> refer to other .stg and .st files.

I need to redesign how this works. 4.0?

> List comprehensions?
> http://www.antlr.org:8080/pipermail/stringtemplate-interest/2007- 
> June/001116.html

added

http://www.antlr.org:8888/browse/ST-32

Ter

From jjsnyders at rcn.com  Thu Nov 15 15:34:55 2007
From: jjsnyders at rcn.com (John Snyders)
Date: Thu, 15 Nov 2007 18:34:55 -0500
Subject: [stringtemplate-interest] ST 3.1 release imminent
In-Reply-To: <1D795589-B8A4-4B4B-9337-B6A2F1ED48E8@cs.usfca.edu>
References: <D9B2DB24-5DFC-41B4-A29D-74DEBBF86790@cs.usfca.edu>	<473BD55A.3030506@rcn.com>
	<1D795589-B8A4-4B4B-9337-B6A2F1ED48E8@cs.usfca.edu>
Message-ID: <473CD79F.50500@rcn.com>

Thanks for adding things to the bug tracker
Comments inline
-John

Terence Parr wrote:
> On Nov 14, 2007, at 9:12 PM, John Snyders wrote:
>
>   
>> Something like Java 5 Iterable must be passed instead. I wrote  
>> about this here:
>> http://www.antlr.org:8080/pipermail/stringtemplate-interest/2007- 
>> May/001073.html
>> http://www.antlr.org:8080/pipermail/stringtemplate-interest/2007- 
>> May/001074.html
>> The problem of "using a list up" is also mentioned here
>> http://www.antlr.org:8080/pipermail/stringtemplate-interest/2007- 
>> January/000915.html
>>     
>
> Do you have a solution?  I'm all ears :)
>   
Yes I think the solution is similar to what Java did with Iterable in 
order to support for each loops. Iterable is
an interface implemented by all reasonable collections so that you can 
repeatedly ask it for an iterator.

If ST didn't need to support 1.4 then I would say just pass the Iterable 
interface around.
What we can do is create a wrapper object that holds a reference to the 
collection and has a method
called (for example) getIterator that will get the iterator from the 
underlying collection.

This is from memory but somewhere there is a method or two that turns 
arrays, collections etc. into iterators. This code needs to change to 
return this STIterable (or what ever you want to call it) wrapper. All 
the code that uses an iterator needs to use this to get the iterator. It 
may be worth considering not allowing iterator to be passed in to ST at 
all. Or at least a warning in the documentation.


>> It is a coincident that just this weekend  I was trying to use ST  
>> on a quick  project to create some address labels from a CSV file.  
>> I was going to turn the CSV file into JSON  (using python) and use  
>> STST from the command line. The trouble is that the address label  
>> document (OOo XML) was a table and the first column needed to be  
>> different than the first. This meant using the first and rest  
>> functions on a list that was passed as a parameter to a template.  
>> The above bug made it impossible to do what I wanted. Sadly I had  
>> to fall back on XML and XSLT.
>>     
>
> I'm eager to fix this.  Perhaps we simply copy the data?  Expensive.
>   
Yes too expensive. Wrap it as described above.
>> I also think that there should be a bug report to Remove definition  
>> of INT from the grammar.
>>     
>
> http://www.antlr.org:8888/browse/ST-31
>
> which grammar is it?
>
>   
action.g
INT :   ('0'..'9')+ ;

>> Any interest in including STST in the distribution?
>>     
>
> sure.
>   
Cool. You can grab it from here
http://hardlikesoftware.com/weblog/stst/
Let me know if you need me to do anything to get it ready.
>   
>> I'll mention some other feature requests just in case they were  
>> forgotten. I know that 3.1 is just a point release.
>>
>> Support programming in the large by allowing .stg and .st files to  
>> refer to other .stg and .st files.
>>
>> List comprehensions?
>> http://www.antlr.org:8080/pipermail/stringtemplate-interest/2007- 
>> June/001116.html
>>
>> List slice?
>> http://www.antlr.org:8080/pipermail/stringtemplate-interest/2007- 
>> June/001090.html
>>     
>
> I'd rather not add this w/o more thought.
>   
I agree that all the rest of this stuff is for future consideration. 
Just wanted it recorded.

From robertstackhouse at gmail.com  Sun Nov 18 10:10:55 2007
From: robertstackhouse at gmail.com (Robert Stackhouse)
Date: Sun, 18 Nov 2007 12:10:55 -0600
Subject: [stringtemplate-interest] Problem building with NAnt
Message-ID: <1103d20b0711181010i78ff0dd6p233959ef413e4bcb@mail.gmail.com>

When trying to build a debug release of the C# StringTemplate 3.0.1, I got
the following message:

[csc] error CS1548: Cryptographic failure while signing assembly
'c:\StringTemplate\bin\StringTemplate.dll' -- 'Error reading key file
'../StringTemplate_KeyPair.snk' -- The system cannot find the file
specified.

I tried searching the directory for the .snk file, but I couldn't find it.

Any help on this would be appreciated.

Robert
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org:8080/pipermail/stringtemplate-interest/attachments/20071118/3753decb/attachment.html 

From pink at odahoda.de  Sun Nov 18 18:16:39 2007
From: pink at odahoda.de (Benjamin Niemann)
Date: Sun, 18 Nov 2007 18:16:39 -0800
Subject: [stringtemplate-interest] Any Python ST users out there?
Message-ID: <4740F207.3000705@odahoda.de>

Hi,

I'm currently working on the upgrade of the Python port of ST.
So if you are using ST with Python and you are interested in the new 
features of ST3.1, watch out for the upcoming beta release! (I have to 
dig my way through another ~30 changelists to catch up with Terence.)
I also indent to clean up the code and get rid of some java-ish stuff 
that makes the code pretty ugly. As this involves API changes, I will 
rename the package to stringtemplate3 to avoid collisions.
Feedback and comments are welcome!
And of course beta testing, once the beta is there ;)


Cheers,
   Ben

From caleb.lyness at ezswitch.net  Fri Nov 23 03:34:25 2007
From: caleb.lyness at ezswitch.net (Caleb Lyness)
Date: Fri, 23 Nov 2007 13:34:25 +0200
Subject: [stringtemplate-interest] Maps with object keys
Message-ID: <4746BAC1.6010902@ezswitch.net>

Hi all,

I have not been keeping up to date with my string template mails... 
perhaps this has been covered before, just point me at the thread if 
already covered...
This is also being tested against ST-3.0.

Here is a segment of a test template:

  $products: {product |
  <tr>
     <td>$product$</td>    
     <td>$report.productReadStats.(product);null="0"$</td>
     <td>$report.productActivationsStats.(product);null="0"$</td>
     <td>$report.productIssuedStats.(product);null="0"$</td>
  </tr>}$

On the model side I had:

public HashMap<*Product*, Integer> productReadStats = new 
HashMap<*Product*, Integer>();
public HashMap<*Product*, Integer> productIssuedStats = new 
HashMap<*Product*, Integer>();
public HashMap<*Product*, Integer> productActivationsStats = new 
HashMap<*Product*, Integer>();

String template would always report the stats as 0 (via the null 
setting). My guess from what I am seeing
is that ST-3.0 is dereferencing *(product)* to a string and not an 
object. When looking up the value in the
map the string does not result in the correct map reference.

Changing my map to a string based key:

public HashMap<*String*, Integer> productReadStats = new 
HashMap<*String*, Integer>();
... etc ...

resulted in the correct values.

Is this a known problem/limitation? Or is this considered the correct 
behaviour. Surely an attempt should be
made to lookup the object directly and then use the object.toString() as 
the key as a 2nd attempt?

Cheers
      Caleb.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org:8080/pipermail/stringtemplate-interest/attachments/20071123/b872752f/attachment.html 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/x-pkcs7-signature
Size: 3269 bytes
Desc: S/MIME Cryptographic Signature
Url : http://www.antlr.org:8080/pipermail/stringtemplate-interest/attachments/20071123/b872752f/attachment.bin 

From parrt at cs.usfca.edu  Mon Nov 26 11:06:03 2007
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon, 26 Nov 2007 11:06:03 -0800
Subject: [stringtemplate-interest] Maps with object keys
In-Reply-To: <4746BAC1.6010902@ezswitch.net>
References: <4746BAC1.6010902@ezswitch.net>
Message-ID: <A9E529E6-07CC-4F5D-B046-51A710D9B820@cs.usfca.edu>

Hi Caleb! :)

Heh, yeah, you're right...this is weird, though consistent with what  
(x) means..(x) means "take the value of" or "immediately eval" rather  
than lazy eval.  Sometimes you need to render an expression such as  
for keys with maps.  It's an indirection and immediate eval.

m.x gives m.get("x")
m.(x) gives m.get(x.toString())
m.(x+"foo") gives m.get(x + "foo")

hmm...we do need a map look up with an object...i wonder what to do...

Ter

On Nov 23, 2007, at 3:34 AM, Caleb Lyness wrote:

> Hi all,
>
> I have not been keeping up to date with my string template mails...  
> perhaps this has been covered before, just point me at the thread  
> if already covered...
> This is also being tested against ST-3.0.
>
> Here is a segment of a test template:
>
>   $products: {product |
>   <tr>
>      <td>$product$</td>
>      <td>$report.productReadStats.(product);null="0"$</td>
>      <td>$report.productActivationsStats.(product);null="0"$</td>
>      <td>$report.productIssuedStats.(product);null="0"$</td>
>   </tr>}$
>
> On the model side I had:
>
> public HashMap<Product, Integer> productReadStats = new  
> HashMap<Product, Integer>();
> public HashMap<Product, Integer> productIssuedStats = new  
> HashMap<Product, Integer>();
> public HashMap<Product, Integer> productActivationsStats = new  
> HashMap<Product, Integer>();
>
> String template would always report the stats as 0 (via the null  
> setting). My guess from what I am seeing
> is that ST-3.0 is dereferencing (product) to a string and not an  
> object. When looking up the value in the
> map the string does not result in the correct map reference.
>
> Changing my map to a string based key:
>
> public HashMap<String, Integer> productReadStats = new  
> HashMap<String, Integer>();
> ... etc ...
>
> resulted in the correct values.
>
> Is this a known problem/limitation? Or is this considered the  
> correct behaviour. Surely an attempt should be
> made to lookup the object directly and then use the object.toString 
> () as the key as a 2nd attempt?
>
> Cheers
>       Caleb.
>
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org:8080/mailman/listinfo/stringtemplate-interest


From caleb.lyness at ezswitch.net  Wed Nov 28 02:12:50 2007
From: caleb.lyness at ezswitch.net (Caleb Lyness)
Date: Wed, 28 Nov 2007 12:12:50 +0200
Subject: [stringtemplate-interest] Maps with object keys
In-Reply-To: <A9E529E6-07CC-4F5D-B046-51A710D9B820@cs.usfca.edu>
References: <4746BAC1.6010902@ezswitch.net>
	<A9E529E6-07CC-4F5D-B046-51A710D9B820@cs.usfca.edu>
Message-ID: <474D3F22.9030607@ezswitch.net>

Terence Parr wrote:
> Hi Caleb! :)
>
> Heh, yeah, you're right...this is weird, though consistent with what  
> (x) means..(x) means "take the value of" or "immediately eval" rather  
> than lazy eval.  Sometimes you need to render an expression such as  
> for keys with maps.  It's an indirection and immediate eval.
>
> m.x gives m.get("x")
> m.(x) gives m.get(x.toString())
> m.(x+"foo") gives m.get(x + "foo")
>
> hmm...we do need a map look up with an object...i wonder what to do...
>   
Well as a step toward resolving the problem have a look at the attached 
test case.
Perhaps you would like to add it to TestStringTemplate and create an 
issue report
for the problem?

Cheers
     Caleb
> Ter
>
> On Nov 23, 2007, at 3:34 AM, Caleb Lyness wrote:
>
>   
>> Hi all,
>>
>> I have not been keeping up to date with my string template mails...  
>> perhaps this has been covered before, just point me at the thread  
>> if already covered...
>> This is also being tested against ST-3.0.
>>
>> Here is a segment of a test template:
>>
>>   $products: {product |
>>   <tr>
>>      <td>$product$</td>
>>      <td>$report.productReadStats.(product);null="0"$</td>
>>      <td>$report.productActivationsStats.(product);null="0"$</td>
>>      <td>$report.productIssuedStats.(product);null="0"$</td>
>>   </tr>}$
>>
>> On the model side I had:
>>
>> public HashMap<Product, Integer> productReadStats = new  
>> HashMap<Product, Integer>();
>> public HashMap<Product, Integer> productIssuedStats = new  
>> HashMap<Product, Integer>();
>> public HashMap<Product, Integer> productActivationsStats = new  
>> HashMap<Product, Integer>();
>>
>> String template would always report the stats as 0 (via the null  
>> setting). My guess from what I am seeing
>> is that ST-3.0 is dereferencing (product) to a string and not an  
>> object. When looking up the value in the
>> map the string does not result in the correct map reference.
>>
>> Changing my map to a string based key:
>>
>> public HashMap<String, Integer> productReadStats = new  
>> HashMap<String, Integer>();
>> ... etc ...
>>
>> resulted in the correct values.
>>
>> Is this a known problem/limitation? Or is this considered the  
>> correct behaviour. Surely an attempt should be
>> made to lookup the object directly and then use the object.toString 
>> () as the key as a 2nd attempt?
>>
>> Cheers
>>       Caleb.
>>
>> _______________________________________________
>> stringtemplate-interest mailing list
>> stringtemplate-interest at antlr.org
>> http://www.antlr.org:8080/mailman/listinfo/stringtemplate-interest
>>     
>
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org:8080/mailman/listinfo/stringtemplate-interest
>
>   

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org:8080/pipermail/stringtemplate-interest/attachments/20071128/4f851ab6/attachment.html 
-------------- next part --------------
An embedded and charset-unspecified text was scrubbed...
Name: test.java
Url: http://www.antlr.org:8080/pipermail/stringtemplate-interest/attachments/20071128/4f851ab6/attachment.pl 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/x-pkcs7-signature
Size: 3269 bytes
Desc: S/MIME Cryptographic Signature
Url : http://www.antlr.org:8080/pipermail/stringtemplate-interest/attachments/20071128/4f851ab6/attachment.bin 

From parrt at cs.usfca.edu  Wed Nov 28 11:09:57 2007
From: parrt at cs.usfca.edu (Terence Parr)
Date: Wed, 28 Nov 2007 11:09:57 -0800
Subject: [stringtemplate-interest] Maps with object keys
In-Reply-To: <474D3F22.9030607@ezswitch.net>
References: <4746BAC1.6010902@ezswitch.net>
	<A9E529E6-07CC-4F5D-B046-51A710D9B820@cs.usfca.edu>
	<474D3F22.9030607@ezswitch.net>
Message-ID: <71E5FADC-CF3A-4C41-A2ED-1A8219C77F10@cs.usfca.edu>


On Nov 28, 2007, at 2:12 AM, Caleb Lyness wrote:

> Terence Parr wrote:
>>
>> Hi Caleb! :) Heh, yeah, you're right...this is weird, though  
>> consistent with what (x) means..(x) means "take the value of" or  
>> "immediately eval" rather than lazy eval. Sometimes you need to  
>> render an expression such as for keys with maps. It's an  
>> indirection and immediate eval. m.x gives m.get("x") m.(x) gives  
>> m.get(x.toString()) m.(x+"foo") gives m.get(x + "foo") hmm...we do  
>> need a map look up with an object...i wonder what to do...
> Well as a step toward resolving the problem have a look at the  
> attached test case.
> Perhaps you would like to add it to TestStringTemplate and create  
> an issue report
> for the problem?

Well, i should probably figure out what the "right" answer is before  
adding an issue report...hmm...i don't see how to maintain (...)  
functionality and backward compat and add obj-based key lookup.

Ter

From caleb.lyness at ezswitch.net  Thu Nov 29 01:47:01 2007
From: caleb.lyness at ezswitch.net (Caleb Lyness)
Date: Thu, 29 Nov 2007 11:47:01 +0200
Subject: [stringtemplate-interest] Maps with object keys
In-Reply-To: <71E5FADC-CF3A-4C41-A2ED-1A8219C77F10@cs.usfca.edu>
References: <4746BAC1.6010902@ezswitch.net>	<A9E529E6-07CC-4F5D-B046-51A710D9B820@cs.usfca.edu>	<474D3F22.9030607@ezswitch.net>
	<71E5FADC-CF3A-4C41-A2ED-1A8219C77F10@cs.usfca.edu>
Message-ID: <474E8A95.1050606@ezswitch.net>

Hi Terence :-)

Terence Parr wrote:
>>> Hi Caleb! :) Heh, yeah, you're right...this is weird, though  
>>> consistent with what (x) means..(x) means "take the value of" or  
>>> "immediately eval" rather than lazy eval. Sometimes you need to  
>>> render an expression such as for keys with maps. It's an  
>>> indirection and immediate eval. m.x gives m.get("x") m.(x) gives  
>>> m.get(x.toString()) m.(x+"foo") gives m.get(x + "foo") hmm...we do  
>>> need a map look up with an object...i wonder what to do...
>>>       
>> Well as a step toward resolving the problem have a look at the  
>> attached test case.
>> Perhaps you would like to add it to TestStringTemplate and create  
>> an issue report
>> for the problem?
>>     
>
> Well, i should probably figure out what the "right" answer is before  
> adding an issue report...hmm...i don't see how to maintain (...)  
> functionality and backward compat and add obj-based key lookup.
Hmmm, right you are. So I guess a lazy evaluation would break the 
backward compatibility?
But how lazzy are we being...? I was thinking of something like:

> m.x gives m.get("x")
> m.(x) gives m.get(x.toString())
m.(x) gives

value = m.get(x)
if (value == null) value = m.get(x.toString())

or does this not make sense? It could also be done the other way round and look
for a string before the actual object. How far would this break backward 
compatibility? I don't have a full view of the bigger picture, so I will leave
that thought up to you.
> m.(x+"foo") gives m.get(x + "foo")

Alternatively how about a unary object reference operator... eg.
m.(&x) gives m.get(x)

Cheers
    Caleb.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org:8080/pipermail/stringtemplate-interest/attachments/20071129/dd628bd2/attachment.html 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/x-pkcs7-signature
Size: 3269 bytes
Desc: S/MIME Cryptographic Signature
Url : http://www.antlr.org:8080/pipermail/stringtemplate-interest/attachments/20071129/dd628bd2/attachment.bin 

From jjsnyders at rcn.com  Thu Nov 29 22:28:23 2007
From: jjsnyders at rcn.com (John Snyders)
Date: Fri, 30 Nov 2007 01:28:23 -0500
Subject: [stringtemplate-interest] Maps with object keys
In-Reply-To: <474D3F22.9030607@ezswitch.net>
References: <4746BAC1.6010902@ezswitch.net>	<A9E529E6-07CC-4F5D-B046-51A710D9B820@cs.usfca.edu>
	<474D3F22.9030607@ezswitch.net>
Message-ID: <474FAD87.90707@rcn.com>

An HTML attachment was scrubbed...
URL: http://www.antlr.org:8080/pipermail/stringtemplate-interest/attachments/20071130/9814301c/attachment.html 

From caleb.lyness at ezswitch.net  Fri Nov 30 05:06:33 2007
From: caleb.lyness at ezswitch.net (Caleb Lyness)
Date: Fri, 30 Nov 2007 15:06:33 +0200
Subject: [stringtemplate-interest] Maps with object keys
In-Reply-To: <474FAD87.90707@rcn.com>
References: <4746BAC1.6010902@ezswitch.net>	<A9E529E6-07CC-4F5D-B046-51A710D9B820@cs.usfca.edu>
	<474D3F22.9030607@ezswitch.net> <474FAD87.90707@rcn.com>
Message-ID: <47500AD9.4050207@ezswitch.net>

John Snyders wrote:
> I wrote down my thoughts on what the data model for string template 
> should be here:
>
> http://hardlikesoftware.com/weblog/2007/06/01/thoughts-on-stringtemplate-part-1/
>
> I wrote "The keys of a map must be scalar strings.".  I was not 
> writing about the current implementation
> but about some idealized StringTemplate language. So why did I write 
> this? I'm sure I'm giving it more
> thought now than when I originally wrote it.
>
> The StringTemplate data model consists of scalars, lists and maps (yes 
> it also has objects but I think these
> should be treated like maps from the template point of view). The only 
> scalar type it has a literal syntax for
> is a string. The only other scalar type it knows anything about is 
> boolean which it only uses in if expressions.
> Basically StringTemplate has a very limited set of data types that it 
> knows about. I think this is a good thing.
>
> StringTemplate's job is to turn what you give it into strings - 
> nothing more. 
Hmmm, I fell into the trap of working with objects because it seemed a 
natural key, given that I was iterating
over a list of objects as compared to a list of strings.

"$hammers:{hammer|$stock.(hammer);null=\"0\"$}$"

I can see your point, but you must admit that it does not make it a particularly natural 
way to work:


            Map<String,Integer> hammersInStock = new HashMap<String,Integer>();
            hammersInStock.put(Hammer.MALLET.toString(), 5);
            hammersInStock.put(Hammer.CLUB.toString(), 2);
            st.setAttribute("stock", hammersInStock);		// map with key as object.toString
            st.setAttribute("hammers", hammers);		// list of objects
            String result = st.toString(); 

One has to know in detail what string template will do with the object to know if one must
insert a string or an object. If maps are only allowed to be indexed on a string then
a specialised map should be used and not a generic one accepting objects as the key. Restrictions
should be reflected clearly by the interface (usability-101). But I am getting side tracked.

>
> However it does have an important characteristic. It  lets scalars 
> pass through without type conversion
> from the program that created them to the renderer. This allows the 
> renderer to do type specific formatting.
> The default is a call to toString on the object. The renderer may know 
> about the objects type but the template
> should not know or care what type an attribute is other than is it a 
> scalar, list or map.
One does not add any additional type information here:

m.(x) gives

value = m.get(x)
if (value == null) value = m.get(x.toString())

x is still a "scalar" we know that m is a map. For maps we check for the 
scalar x before stringifying it and checking again.
>
> So although the scalar arguments that StringTemplate processes are 
> arbitrary types the only thing that
> it knows to do with them is turn them into strings. 
It knows how iterate over a collection of objects. That's a bit more 
than turning objects directly to strings. It also know about
null objects.
> Giving StringTemplate the ability to do any more than
> this (even in limited contexts) moves it closer to a general data 
> processing engine.
>
> We all know about how maps can be used to get around the view 
> separation (at the programmers
> discretion not the template writers). Allowing arbitrary types to be 
> passed to the "map" would make
> this easier to abuse. Currently if you wanted to pass complex data to 
> the map you need to serialize it as a string.
Can you explain more or give an example of how using an object as a map 
key would make it easier to abuse than it currently is?
>
> It makes sense to me that enums (hammer in the example) would be 
> converted to strings when used
> like this $stock.(hammer);null="0"$
Yes, it makes sense. But "stock" should only be allowed to be string 
based map... their would be no chance for confusion.
>
> The underlying question that this issue brings up is: should 
> StringTemplate be able to deal with any and all
> data structures the host language (e.g. Java) can implement or should 
> the program and it's data meet
> StringTemplate half way?
No. No additional type support required.
>
> StringTemplate does a lot already to make existing data structures 
> consumable to templates. But I don't think
> it should be expected to handle everything. Maps with non String keys 
> are an example.
>
> There are already any cases where ST requires the data model to 
> change. For example if you had a
> property for accountBalance you may need to add a property called 
> overdrawn because StringTemplate
> doesn't do math or comparisons.
>
> All this being said I wonder if an exception should be made for enums.
>
> Caleb, in your original example was Product an enum or are you looking 
> for maps with other key types?
It is an enum in the non java 5.0 sense

public class Product {

     public static X = Product("PX",10);
     public static Y = Product("PY",20);

     private Product(String name, long code) {
       ....
     }
    ....
}
>
> One problem I can see with a special case for enums is that ST doesn't 
> require Java 5.
Java 5 just adds a nice syntax for the enum concept. Still a very real 
pattern pre Java 5.
>
> -John
>
> Caleb Lyness wrote:
>> Terence Parr wrote:
>>> Hi Caleb! :)
>>>
>>> Heh, yeah, you're right...this is weird, though consistent with what  
>>> (x) means..(x) means "take the value of" or "immediately eval" rather  
>>> than lazy eval.  Sometimes you need to render an expression such as  
>>> for keys with maps.  It's an indirection and immediate eval.
>>>
>>> m.x gives m.get("x")
>>> m.(x) gives m.get(x.toString())
>>> m.(x+"foo") gives m.get(x + "foo")
>>>
>>> hmm...we do need a map look up with an object...i wonder what to do...
>>>   
>> Well as a step toward resolving the problem have a look at the 
>> attached test case.
>> Perhaps you would like to add it to TestStringTemplate and create an 
>> issue report
>> for the problem?
>>
>> Cheers
>>      Caleb
>>> Ter
>>>
>>> On Nov 23, 2007, at 3:34 AM, Caleb Lyness wrote:
>>>
>>>   
>>>> Hi all,
>>>>
>>>> I have not been keeping up to date with my string template mails...  
>>>> perhaps this has been covered before, just point me at the thread  
>>>> if already covered...
>>>> This is also being tested against ST-3.0.
>>>>
>>>> Here is a segment of a test template:
>>>>
>>>>   $products: {product |
>>>>   <tr>
>>>>      <td>$product$</td>
>>>>      <td>$report.productReadStats.(product);null="0"$</td>
>>>>      <td>$report.productActivationsStats.(product);null="0"$</td>
>>>>      <td>$report.productIssuedStats.(product);null="0"$</td>
>>>>   </tr>}$
>>>>
>>>> On the model side I had:
>>>>
>>>> public HashMap<Product, Integer> productReadStats = new  
>>>> HashMap<Product, Integer>();
>>>> public HashMap<Product, Integer> productIssuedStats = new  
>>>> HashMap<Product, Integer>();
>>>> public HashMap<Product, Integer> productActivationsStats = new  
>>>> HashMap<Product, Integer>();
>>>>
>>>> String template would always report the stats as 0 (via the null  
>>>> setting). My guess from what I am seeing
>>>> is that ST-3.0 is dereferencing (product) to a string and not an  
>>>> object. When looking up the value in the
>>>> map the string does not result in the correct map reference.
>>>>
>>>> Changing my map to a string based key:
>>>>
>>>> public HashMap<String, Integer> productReadStats = new  
>>>> HashMap<String, Integer>();
>>>> ... etc ...
>>>>
>>>> resulted in the correct values.
>>>>
>>>> Is this a known problem/limitation? Or is this considered the  
>>>> correct behaviour. Surely an attempt should be
>>>> made to lookup the object directly and then use the object.toString 
>>>> () as the key as a 2nd attempt?
>>>>
>>>> Cheers
>>>>       Caleb.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org:8080/pipermail/stringtemplate-interest/attachments/20071130/d69d11fb/attachment-0001.html 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/x-pkcs7-signature
Size: 3269 bytes
Desc: S/MIME Cryptographic Signature
Url : http://www.antlr.org:8080/pipermail/stringtemplate-interest/attachments/20071130/d69d11fb/attachment-0001.bin 

