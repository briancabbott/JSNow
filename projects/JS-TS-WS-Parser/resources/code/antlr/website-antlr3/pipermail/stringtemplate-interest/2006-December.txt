From misc at n4te.com  Tue Dec  5 17:24:16 2006
From: misc at n4te.com (Nate)
Date: Tue, 05 Dec 2006 17:24:16 -0800
Subject: [stringtemplate-interest] best way to expose xml in template
In-Reply-To: <5532E9E7-D27B-42A9-8491-9F0124C57624@cs.usfca.edu>
References: <455A4CAE.5030606@n4te.com>
	<5532E9E7-D27B-42A9-8491-9F0124C57624@cs.usfca.edu>
Message-ID: <45761BC0.3080501@n4te.com>

Thanks for the reply.

It would be great if there were an interface that could be implemented 
that had simply #get(String). Implementing Map or extending AbstractMap 
for this is brutal. It would also be nice to see support for HashTable. 
Also Collection could be supported... $if (someSet.moo)$ would be 
equivalent to the Java: if (someSet.contains("moo"))

-Nate


Terence Parr wrote:
> On Nov 14, 2006, at 3:09 PM, Nate wrote:
>
>   
>> My application gets all of its data from a server as XML. What is a  
>> good
>> way to expose this data to my StringTemplate templates? I could use a
>> parser such as XOM, stuff the data into Lists or Maps and then push
>> those into the templates as attributes. Are there other solutions?
>>     
>
> Send in an object that implements the Map interface. In this way you  
> can ask for some named data. Would be very very sure that you have no  
> side effects in the map implementation of get().
> Ter
>
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org:8080/mailman/listinfo/stringtemplate-interest
>   


From parrt at cs.usfca.edu  Wed Dec  6 10:17:15 2006
From: parrt at cs.usfca.edu (Terence Parr)
Date: Wed, 6 Dec 2006 10:17:15 -0800
Subject: [stringtemplate-interest] best way to expose xml in template
In-Reply-To: <45761BC0.3080501@n4te.com>
References: <455A4CAE.5030606@n4te.com>
	<5532E9E7-D27B-42A9-8491-9F0124C57624@cs.usfca.edu>
	<45761BC0.3080501@n4te.com>
Message-ID: <162ACC19-2A6F-4152-AA2E-1FDA39F2FAAB@cs.usfca.edu>


On Dec 5, 2006, at 5:24 PM, Nate wrote:

> Thanks for the reply.
>
> It would be great if there were an interface that could be implemented
> that had simply #get(String).

  That is probably too flexible, leading a bigger hole I want.   
Allowing the map interface took a lot of convincing from other people  
before I did it. ;)

> Implementing Map or extending AbstractMap
> for this is brutal. It would also be nice to see support for  
> HashTable.

That is a Map and so that should work now.

> Also Collection could be supported... $if (someSet.moo)$ would be
> equivalent to the Java: if (someSet.contains("moo"))

That is too much like logic I think.

Ter


From misc at n4te.com  Wed Dec  6 13:09:03 2006
From: misc at n4te.com (Nate)
Date: Wed, 06 Dec 2006 13:09:03 -0800
Subject: [stringtemplate-interest] best way to expose xml in template
In-Reply-To: <162ACC19-2A6F-4152-AA2E-1FDA39F2FAAB@cs.usfca.edu>
References: <455A4CAE.5030606@n4te.com>	<5532E9E7-D27B-42A9-8491-9F0124C57624@cs.usfca.edu>	<45761BC0.3080501@n4te.com>
	<162ACC19-2A6F-4152-AA2E-1FDA39F2FAAB@cs.usfca.edu>
Message-ID: <4577316F.10401@n4te.com>

Terence Parr wrote:
> On Dec 5, 2006, at 5:24 PM, Nate wrote:
>> Thanks for the reply.
>>
>> It would be great if there were an interface that could be implemented
>> that had simply #get(String).
>>     
>
>   That is probably too flexible, leading a bigger hole I want.   
> Allowing the map interface took a lot of convincing from other people  
> before I did it. ;)
>   
Maybe true, but the hole is there either way.

>> Also Collection could be supported... $if (someSet.moo)$ would be
>> equivalent to the Java: if (someSet.contains("moo"))
>>     
>
> That is too much like logic I think.
>   
While this message has the subject "best way to expose xml in a 
template", the actual problem I encountered that prompted support for 
Collection#contains is this... I have a user object with a Set<String> 
of "capabilities". I would like to check in my templates if the user has 
a given capability. Eg, the template should show an "admin tools" link 
if the user has the capability "can view admin tools". I could manually 
add the capabilities that the template needs to know about as 
attributes, but if a different set of templates is used to display the 
page then they may require knowledge of different capabilities. Eg, the 
"admin tools" link may be in a different template. The easiest solution 
I think is to add an attribute for every template called "capabilities" 
that contains the Set, then use...
$if(capabilities.("can view admin tools"))$<a href=...>admin 
tools</a>$endif$

-Nate


From misc at n4te.com  Wed Dec  6 17:12:24 2006
From: misc at n4te.com (Nate)
Date: Wed, 06 Dec 2006 17:12:24 -0800
Subject: [stringtemplate-interest] best way to expose xml in template
In-Reply-To: <4577316F.10401@n4te.com>
References: <455A4CAE.5030606@n4te.com>	<5532E9E7-D27B-42A9-8491-9F0124C57624@cs.usfca.edu>	<45761BC0.3080501@n4te.com>	<162ACC19-2A6F-4152-AA2E-1FDA39F2FAAB@cs.usfca.edu>
	<4577316F.10401@n4te.com>
Message-ID: <45776A78.9090406@n4te.com>

Below is my workaround to be able to use a Set as StringTemplate 
attribute and use an expression like "$if(set.key)$". It was either this 
or maintain my own ST distro.

-Nate


/**
* A Map that wraps a Set where the values come from the Set and the keys 
are the result of Object#toString() on the values.
*/
public abstract class SetMap implements Map {
private final Set set;

public SetMap (Set set) {
this.set = set;
}

abstract protected Object keyToValue (Object key);

/**
* Default implementation returns the String representation of the value.
*/
protected Object valueToKey (Object value) {
return value.toString();
}

public void clear () {
set.clear();
}

public boolean containsKey (Object key) {
return containsValue(keyToValue(key));
}

public boolean containsValue (Object value) {
return set.contains(value);
}

/**
* The Map.Entry objects in the returned Set do not support the {@link 
Map.Entry#setValue(Object)} method.
*/
public Set entrySet () {
return new AbstractSet() {
public int size () {
return set.size();
}

public Iterator iterator () {
return new SetMapEntryIterator(set);
}
};
}

public Object get (Object key) {
return keyToValue(key);
}

public boolean isEmpty () {
return set.isEmpty();
}

public Set keySet () {
return new AbstractSet() {
public int size () {
return set.size();
}

public Iterator iterator () {
return new SetMapKeyIterator(set);
}
};
}

public Object put (Object key, Object value) {
return set.add(value) ? null : value;
}

public void putAll (Map map) {
for (Iterator iter = map.values().iterator(); iter.hasNext();)
set.add(iter.next());
}

public Object remove (Object key) {
Object value = keyToValue(key);
if (value != null) set.remove(value);
return value;
}

public int size () {
return set.size();
}

public Collection values () {
return set;
}

private class SetMapEntryIterator implements Iterator {
private final Iterator iter;

public SetMapEntryIterator (Set set) {
this.iter = set.iterator();
}

public boolean hasNext () {
return iter.hasNext();
}

public Object next () {
return new Map.Entry() {
private Object value = iter.next();

public Object setValue (Object value) {
throw new UnsupportedOperationException();
}

public Object getValue () {
return value;
}

public Object getKey () {
return valueToKey(value);
}
};
}

public void remove () {
iter.remove();
}
}

private class SetMapKeyIterator implements Iterator {
private final Iterator iter;

public SetMapKeyIterator (Set set) {
this.iter = set.iterator();
}

public boolean hasNext () {
return iter.hasNext();
}

public Object next () {
return valueToKey(iter.next());
}

public void remove () {
iter.remove();
}
}
}



Nate wrote:
> Terence Parr wrote:
>   
>> On Dec 5, 2006, at 5:24 PM, Nate wrote:
>>     
>>> Thanks for the reply.
>>>
>>> It would be great if there were an interface that could be implemented
>>> that had simply #get(String).
>>>     
>>>       
>>   That is probably too flexible, leading a bigger hole I want.   
>> Allowing the map interface took a lot of convincing from other people  
>> before I did it. ;)
>>   
>>     
> Maybe true, but the hole is there either way.
>
>   
>>> Also Collection could be supported... $if (someSet.moo)$ would be
>>> equivalent to the Java: if (someSet.contains("moo"))
>>>     
>>>       
>> That is too much like logic I think.
>>   
>>     
> While this message has the subject "best way to expose xml in a 
> template", the actual problem I encountered that prompted support for 
> Collection#contains is this... I have a user object with a Set<String> 
> of "capabilities". I would like to check in my templates if the user has 
> a given capability. Eg, the template should show an "admin tools" link 
> if the user has the capability "can view admin tools". I could manually 
> add the capabilities that the template needs to know about as 
> attributes, but if a different set of templates is used to display the 
> page then they may require knowledge of different capabilities. Eg, the 
> "admin tools" link may be in a different template. The easiest solution 
> I think is to add an attribute for every template called "capabilities" 
> that contains the Set, then use...
> $if(capabilities.("can view admin tools"))$<a href=...>admin 
> tools</a>$endif$
>
> -Nate
>   

From jjsnyders at rcn.com  Thu Dec  7 07:27:23 2006
From: jjsnyders at rcn.com (John Snyders)
Date: Thu, 7 Dec 2006 10:27:23 -0500
Subject: [stringtemplate-interest] support for set
Message-ID: <PMEOJKDLMMHOHNEAMPBGIEENCAAA.jjsnyders@rcn.com>

In a previous thread
(http://www.antlr.org:8080/pipermail/stringtemplate-interest/2006-December/0
00836.html) Nate
had asked for support for the Java Set
"$if (someSet.moo)$ would be >> equivalent to the Java: if
(someSet.contains("moo"))"

I see no reason why Set should not be more fully supported. I agree that the
syntax get(string) should not be supported because it acts as a method call.

Because set is a collection it is already supported in that you can do this
$myset$ and it will enumerate all the keys.

$myset.key1$ should be replaced with "key1" if key1 is in the set and ""
otherwise.
Or should $myset.key1$ be replaced with "true" if it is present?

The change is very localized. Add this code to ASTExpr.java
rawGetObjectProperty just before the  // try getXXX and isXXX properties
comment.

  // Special case: if it's a Set then use the set value
  // not the property method.
  if ( o instanceof Set ) {
      Set set = (Set)o;
      if ( set.contains(propertyName) ) {
          value = propertyName;
      }
      return value;
  }

I tested the above with
        StringTemplate test = new StringTemplate("$set : { [$it$] }$,
$set$\n"
                + "access: $set.key1$\n"
                + "$if(set.key2)$found key2$endif$\n"
                + "$if(set.key3)$found key3$else$no key 3$endif$");
        HashSet s = new HashSet();
        s.add("key1");
        s.add("key2");
        test.setAttribute("set", s);
        System.out.println(test.toString());
Which produced:
 [key1]  [key2] , key1key2
access: key1
found key2
no key 3

Nate, As for maintaining your own ST source, that is a matter of choice. For
me, I soon found that there were bugs I needed to fix so I checked in the ST
source to my own repository and started making changes.(I think most of my
changes I posted back to this list) Also it looks like you may be using Java
1.5 and there are some things you can do to better support Iterable objects.

-John
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org:8080/pipermail/stringtemplate-interest/attachments/20061207/9a57c501/attachment.html 

From jjsnyders at rcn.com  Fri Dec  8 11:39:37 2006
From: jjsnyders at rcn.com (John Snyders)
Date: Fri, 8 Dec 2006 14:39:37 -0500
Subject: [stringtemplate-interest] format option implemented?
Message-ID: <PMEOJKDLMMHOHNEAMPBGIEFCCAAA.jjsnyders@rcn.com>

Has anyone implemented the format option yet?
I noticed that the bug database includes "singleton renderers"
(http://www.antlr.org:8888/browse/ST-5)
Doesn't this need to be updated to include the format option syntax?

I need this now so I'm going to start on it if no one has done it.
Thanks,
-John
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org:8080/pipermail/stringtemplate-interest/attachments/20061208/e0dcb5f0/attachment.html 

From parrt at cs.usfca.edu  Sat Dec  9 12:14:43 2006
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sat, 9 Dec 2006 12:14:43 -0800
Subject: [stringtemplate-interest] removed bug list from wiki, added to jira
Message-ID: <9D1CBCC7-3EF1-4BDF-BF28-D99D03D008AF@cs.usfca.edu>

Hi,

Moved bug list to

http://www.antlr.org:8888/browse/ST

Ter

From parrt at cs.usfca.edu  Sat Dec  9 12:50:01 2006
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sat, 9 Dec 2006 12:50:01 -0800
Subject: [stringtemplate-interest] PyST Zero-valued attributes patch
	(was Problem in multivalued attribute handling?)
In-Reply-To: <29a6ca010607171440n2a84aac9q4acf81cc4c9b318e@mail.gmail.com>
References: <29a6ca010607171440n2a84aac9q4acf81cc4c9b318e@mail.gmail.com>
Message-ID: <73A63955-AB40-4ED2-89F5-8EE3563B2EA8@cs.usfca.edu>

Hi all, not sure this was fixed, adding to bug list.
Ter
On Jul 17, 2006, at 2:40 PM, Colin Bean wrote:

> Hi all,
>
> I've finally got a more complete patch to make PyST correctly handle
> an attribute with a numeric value of zero.
> In my previous post I mentioned that in my patched version, setting an
> attribute property to zero causes an error.  Upon further inspection,
> it seems like this also causes an error in the standard 2.2 release (I
> tested this on a clean build).  In order to duplicate it, do something
> like:
>
> import stringtemplate
> test = stringtemplate.StringTemplate('$foo.a$')
> test['foo'] = {'a':0}
> print test
>
> PyST should fail on the print statement.  This is not a problem in
> 2.1, it seems newly introduced in 2.2.
>
> The patch below fixes this bug, and causes zero values to render
> correctly in single value attributes, multivalued attributes, lists,
> and as object properties.  I still haven't tested zero values
> inherited in nested templates, so ymmv.  I'll post if I make a more
> complete patch, but this should fix basic zero attribute problems;
> code changes are below.
>
> Regards,
> -Colin
>
> --- StringTemplateOrig.py       2006-07-10 15:53:44.000000000 -0700
> +++ StringTemplate.py   2006-07-10 23:14:10.000000000 -0700
> @@ -677,7 +677,7 @@
>             # a normal call to setAttribute with unknown attribute
>             raise KeyError("no such attribute: " + name +
>                " in template context " +
> self.getEnclosingInstanceStackString())
> -        if value:
> +        if value is not None:
>             attributes[name] = value
>         elif isinstance(value, list) or \
>              isinstance(value, dict) or \
> --- language/ASTExprOrig.py     2006-07-10 15:57:35.000000000 -0700
> +++ language/ASTExpr.py 2006-07-11 07:13:38.000000000 -0700
> @@ -177,7 +177,7 @@
>                     i += 1
>             else:
>                 for ithValue in attributeValue:
> -                    if not ithValue:
> +                    if ithValue is None:
>                         # weird...a None value in the list; ignore
>                         continue
>
> @@ -270,7 +270,7 @@
>                 value = o[propertyName]
>             except:
>                 value = None
> -            if not value:
> +            if value is None:
>                 # no property defined; if a map in this group
>                 # then there may be a default value
>                 value = o[ASTExpr.DEFAULT_MAP_VALUE_NAME]
> @@ -390,7 +390,7 @@
>         return self._write(this, o, out, separator)
>
>     def _write(self, this, o, out, separator):
> -        if not o:
> +        if o is None:
>             return 0
>         n = 0
>         try:


From parrt at cs.usfca.edu  Sat Dec  9 13:13:55 2006
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sat, 9 Dec 2006 13:13:55 -0800
Subject: [stringtemplate-interest] format option implemented?
In-Reply-To: <PMEOJKDLMMHOHNEAMPBGIEFCCAAA.jjsnyders@rcn.com>
References: <PMEOJKDLMMHOHNEAMPBGIEFCCAAA.jjsnyders@rcn.com>
Message-ID: <D4D91214-D249-48DD-AC8C-61439C5504FC@cs.usfca.edu>


On Dec 8, 2006, at 11:39 AM, John Snyders wrote:

> Has anyone implemented the format option yet?

Nope.

> I noticed that the bug database includes "singleton  
> renderers" (http://www.antlr.org:8888/browse/ST-5)
> Doesn't this need to be updated to include the format option syntax?

Yup...I just spent 30 minutes looking for and reading list entries  
related to this.

> I need this now so I'm going to start on it if no one has done it.

I can implement is very quickly, if we can finalize what really  
should happen.  Let me try to summarize what everyone was talking  
about because I'm pretty confused about what we agreed to do.  My  
brain is apparently shot. ;)

I think Oliver suggested that what we need now is already possible  
using template instance-specific renderers:

> 1. define a group with required templates
>   group foo;
>   shortDate() ::= "<it>"
>   longDate() ::= "<it>"
>
> 2. register custom attribute renderers for the _templates_:
>   group.lookupTemplate("shortDate").registerRenderer(Date.class,  
> new DateRenderer("MMM yy"));
>   group.lookupTemplate("longDate").registerRenderer(Date.class, new  
> DateRenderer("yyyy-MM-dd HH:mm:ss"));
>
> 3. apply templates:
>     $d:shortDate()$          to format an attribute d using short  
> format
>     $bar.date:longDate()$    to format bar's date property using  
> long format

Then we all thought that perhaps we should have $o; format="f"$  
invoke method f() on o's registered renderer.  But then in

http://www.antlr.org:8080/pipermail/stringtemplate-interest/2006- 
October/000691.html

I suggested that the following is too big of a hole:

$"select * from Users"; format="query"$

because it would call myStringRenderer.query("select * from Users")

Then I think we thought to extend the interface to include a format  
string:

public interface AttributeRenderer {
     public String toString(Object o);
     public String toString(Object o, String format);
}

$o.f$ would call oRenderer.toString(o, "f"), which still could be  
abused.  This is worse than calling oRenderer.toString(o) because you  
cannot pass information from the template to the renderer whereas you  
can with the format version.

So then we thought we should restrict formatters to a predefined set,  
with someone suggesting making predefined singleton formatters like  
js, html, url, etc... with things like

http://java.sun.com/j2se/1.4.2/docs/api/javax/swing/text/ 
MaskFormatter.html

we could get pretty far doing basic text formatting.

So, should we go towards some predefined formatters for various web  
related stuff such as js and html or should we go towards the  
existing strategy suggested by Oliver:

http://www.antlr.org:8080/pipermail/stringtemplate-interest/2006-July/ 
000512.html

That suggestion does not help us with some formatting needs though  
like specifying how much to pad an expression with whitespace or  
cropping etc.

In my bug report:

http://www.antlr.org:8888/browse/ST-5

I suggest:

> $name.toUpper$ would be converted to
>
> r = renderer.get("String");
> r.toUpper(name);

but that conflicts with the argument I started above that you could call

$"select * from Users"; format="query"$

and get to the arbitrary query method of the string renderer.  The  
more I think about it though I am not sure that this is a serious  
problem.  People would have to deliberately make the string renderer  
into a database object--a hole that already exists because you can  
register a string renderer that looked for strings that started with  
select and simply call the database:

$"select * from Users"$

So, shall I implement what I have in the bug list:

http://www.antlr.org:8888/browse/ST-5

The syntax as shown is $o.f$, but I think we'd decided later that it  
should be $o; format="f"$, right?

I think I have also decided that the format option would apply to the  
object value, not the entire expression, thus, avoiding issues with  
the separator.  It would apply to the null option, however, because  
that replaces an expression value.

   Sorry to rehash this, but for the life of me, I cannot remember  
what we decided.

Ter

From parrt at cs.usfca.edu  Sat Dec  9 13:18:56 2006
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sat, 9 Dec 2006 13:18:56 -0800
Subject: [stringtemplate-interest] support for set
In-Reply-To: <PMEOJKDLMMHOHNEAMPBGIEENCAAA.jjsnyders@rcn.com>
References: <PMEOJKDLMMHOHNEAMPBGIEENCAAA.jjsnyders@rcn.com>
Message-ID: <8CEEC0FB-8F63-46AA-9B33-26A4B93F1AAA@cs.usfca.edu>

On Dec 7, 2006, at 7:27 AM, John Snyders wrote:
> In a previous thread (http://www.antlr.org:8080/pipermail/ 
> stringtemplate-interest/2006-December/000836.html) Nate
> had asked for support for the Java Set
> "$if (someSet.moo)$ would be >> equivalent to the Java: if  
> (someSet.contains("moo"))"
>
> I see no reason why Set should not be more fully supported. I agree  
> that the syntax get(string) should not be supported because it acts  
> as a method call.

Nate suggested, though, following:

> I would like to check in my templates if the user has
> a given capability. Eg, the template should show an "admin tools" link
> if the user has the capability "can view admin tools".

This is a serious model-view separation violations.  I am  
specifically trying to prevent people from doing logic in the  
template.  This example provides a prime case of we should not do,  
therefore, I don't think allowing set testing is reasonable.  This is  
the same logic I used to avoid the equivalent for single element sets  
(i.e., single values): the == operator.

>  Because set is a collection it is already supported in that you  
> can do this $myset$ and it will enumerate all the keys.

  yes, but you cannot have logic, which is the key separation principle.

> $myset.key1$ should be replaced with "key1" if key1 is in the set  
> and "" otherwise.
> Or should $myset.key1$ be replaced with "true" if it is present?

I think you get an empty string for $mymap.key$; I don't think I want  
to open this whole a bigger, because I think you can test $if 
(mymap.key)$ I just realized.  Perhaps we should not advertise these  
edge cases ;) Certainly I don't think we should create more of them ;)

Ter

From parrt at cs.usfca.edu  Sat Dec  9 13:22:41 2006
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sat, 9 Dec 2006 13:22:41 -0800
Subject: [stringtemplate-interest] Output string lengths..
In-Reply-To: <001b01c71402$a7019f60$f504de20$@hill@blueyonder.co.uk>
References: <2E909902FD3A03419E3A905908AE3DD402A06D64@UKNSM201.emea.corp.eds.com>
	<PMEOJKDLMMHOHNEAMPBGMEEECAAA.jjsnyders@rcn.com>
	<001b01c71402$a7019f60$f504de20$@hill@blueyonder.co.uk>
Message-ID: <3E1CC929-4522-4F6F-BBA5-46B98E71B522@cs.usfca.edu>


On Nov 29, 2006, at 2:06 PM, Rob Hill wrote:
> In fact after re-visiting my padded string requirement, it?s far  
> simpler to pad the string before I stuff it in the template.

Hi Rob.  That could possibly be considered a violation of putting  
view-oriented characters in the model and pushing it into the view.
>  After writing a custom renderer, i couldn?t see the point in  
> actually adding all the code to put the padding in a class, and  
> then set the renderer, when i could just pad the string using the  
> same function before i insert it into the template.

  You have to be careful that you do not go too far and start putting  
HTML and strings, which you send to the view.
> Infact, im not sure i see the point in custom renderers at all now  
> i think about it.?

To avoid having view stuff in the model in general.

Ter

From parrt at cs.usfca.edu  Sat Dec  9 13:24:22 2006
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sat, 9 Dec 2006 13:24:22 -0800
Subject: [stringtemplate-interest] Output string lengths..
In-Reply-To: <PMEOJKDLMMHOHNEAMPBGOEEDCAAA.jjsnyders@rcn.com>
References: <PMEOJKDLMMHOHNEAMPBGOEEDCAAA.jjsnyders@rcn.com>
Message-ID: <0812654E-1470-49B0-8852-F8E29EB717D2@cs.usfca.edu>

Without making pad an actual predefined option, it is hard to pass  
the 20 value to the renderer.

Like wrap etc., is this something worth adding to ST?

Ter

From jjsnyders at rcn.com  Sat Dec  9 22:10:52 2006
From: jjsnyders at rcn.com (John Snyders)
Date: Sun, 10 Dec 2006 01:10:52 -0500
Subject: [stringtemplate-interest] format option implemented?
In-Reply-To: <D4D91214-D249-48DD-AC8C-61439C5504FC@cs.usfca.edu>
Message-ID: <PMEOJKDLMMHOHNEAMPBGEEFECAAA.jjsnyders@rcn.com>

Well I implemented ;format yesterday. I'll reply to specifics below.
I'll send details of the implementation in the next email.


> -----Original Message-----
> From: stringtemplate-interest-bounces at antlr.org
> [mailto:stringtemplate-interest-bounces at antlr.org]On Behalf Of Terence
> Parr
> Sent: Saturday, December 09, 2006 4:14 PM
> To: stringtemplate-interest
> Subject: Re: [stringtemplate-interest] format option implemented?
>
>
>
> On Dec 8, 2006, at 11:39 AM, John Snyders wrote:
>
> > Has anyone implemented the format option yet?
>
> Nope.
>
> > I noticed that the bug database includes "singleton
> > renderers" (http://www.antlr.org:8888/browse/ST-5)
> > Doesn't this need to be updated to include the format option syntax?
>
> Yup...I just spent 30 minutes looking for and reading list entries
> related to this.
>
> > I need this now so I'm going to start on it if no one has done it.
>
> I can implement is very quickly, if we can finalize what really
> should happen.  Let me try to summarize what everyone was talking
> about because I'm pretty confused about what we agreed to do.  My
> brain is apparently shot. ;)

I'm not sure there was a clear agreement on the mailing list. Perhaps there
was before I joined.

> I think Oliver suggested that what we need now is already possible
> using template instance-specific renderers:
>
> > 1. define a group with required templates
> >   group foo;
> >   shortDate() ::= "<it>"
> >   longDate() ::= "<it>"
> >
> > 2. register custom attribute renderers for the _templates_:
> >   group.lookupTemplate("shortDate").registerRenderer(Date.class,
> > new DateRenderer("MMM yy"));
> >   group.lookupTemplate("longDate").registerRenderer(Date.class, new
> > DateRenderer("yyyy-MM-dd HH:mm:ss"));
> >
> > 3. apply templates:
> >     $d:shortDate()$          to format an attribute d using short
> > format
> >     $bar.date:longDate()$    to format bar's date property using
> > long format

Yes I did much the same thing at one point.
You said this approach would have a problem with the renderers getting
lost after the template was reloaded in the cache. This seems to be a
problem in itself.

> Then we all thought that perhaps we should have $o; format="f"$
> invoke method f() on o's registered renderer.  But then in

In
http://www.antlr.org:8080/pipermail/stringtemplate-interest/2006-September/0
00681.html
I argued that ;format="f" was the most clear about the intent.

> http://www.antlr.org:8080/pipermail/stringtemplate-interest/2006-
> October/000691.html
>
> I suggested that the following is too big of a hole:
>
> $"select * from Users"; format="query"$
>
> because it would call myStringRenderer.query("select * from Users")
>
> Then I think we thought to extend the interface to include a format
> string:
>
> public interface AttributeRenderer {
>      public String toString(Object o);
>      public String toString(Object o, String format);
> }

This is exactly what I did.

> $o.f$ would call oRenderer.toString(o, "f"), which still could be
> abused.  This is worse than calling oRenderer.toString(o) because you
> cannot pass information from the template to the renderer whereas you
> can with the format version.
>
> So then we thought we should restrict formatters to a predefined set,
> with someone suggesting making predefined singleton formatters like
> js, html, url, etc... with things like
>
> http://java.sun.com/j2se/1.4.2/docs/api/javax/swing/text/
> MaskFormatter.html
>
> we could get pretty far doing basic text formatting.

I find the predefine set of formatters too limiting.

> So, should we go towards some predefined formatters for various web
> related stuff such as js and html or should we go towards the
> existing strategy suggested by Oliver:
>
> http://www.antlr.org:8080/pipermail/stringtemplate-interest/2006-July/
> 000512.html
>
> That suggestion does not help us with some formatting needs though
> like specifying how much to pad an expression with whitespace or
> cropping etc.
>
> In my bug report:
>
> http://www.antlr.org:8888/browse/ST-5
>
> I suggest:
>
> > $name.toUpper$ would be converted to
> >
> > r = renderer.get("String");
> > r.toUpper(name);
>
> but that conflicts with the argument I started above that you could call
>
> $"select * from Users"; format="query"$
>
> and get to the arbitrary query method of the string renderer.  The
> more I think about it though I am not sure that this is a serious
> problem.  People would have to deliberately make the string renderer
> into a database object--a hole that already exists because you can
> register a string renderer that looked for strings that started with
> select and simply call the database:
>
> $"select * from Users"$

I agree that it is not that big a deal for the reasons I gave here
http://www.antlr.org:8080/pipermail/stringtemplate-interest/2006-October/000
696.html

It is the person writing the model/controller that would have to open things
up for abuse and they have many ways to choose from: map, template specific
renderer, and now format. No big deal as long as the template writer can't
add a JAR and get around the rules.

My current thinking is that the reflection needed to call a method "f" is
not worth it and that toString(o, "f") is just as safe.

> So, shall I implement what I have in the bug list:
>
> http://www.antlr.org:8888/browse/ST-5
>
> The syntax as shown is $o.f$, but I think we'd decided later that it
> should be $o; format="f"$, right?

Again I like the format option and that is what I implemented.

> I think I have also decided that the format option would apply to the
> object value, not the entire expression, thus, avoiding issues with
> the separator.  It would apply to the null option, however, because
> that replaces an expression value.

This gets a little tricky. Options are allowed on and apply to
templatesExpr.
Most of the time you will do $attribute;format="fancy"$ but it seems
incorrect
to me that $list : {a $it$ b};format={toUpper}$ would only apply to $it$ and
not
the whole annon template.
While perhaps not useful $\"literal\";format={toUpper}$ should also work (it
would result in "LITERAL")

The discussion on this list went on about the order but that turns out to be
a non issue since all options apply to the template. They are stored in a
hash map and hence have no order.

What naturally seemed to happen as I implemented this is that format applied
to the whole template and the null option value if used but not to the
separator.

I'll go into more details in the next email.

>    Sorry to rehash this, but for the life of me, I cannot remember
> what we decided.
>
> Ter
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org:8080/mailman/listinfo/stringtemplate-interest

From jjsnyders at rcn.com  Sat Dec  9 23:12:23 2006
From: jjsnyders at rcn.com (John Snyders)
Date: Sun, 10 Dec 2006 02:12:23 -0500
Subject: [stringtemplate-interest] format option implementation details
Message-ID: <PMEOJKDLMMHOHNEAMPBGOEFECAAA.jjsnyders@rcn.com>

Here are the details of what I have implemented for the format option.

format is treated syntactically like any other option and can be combined
with any of the other options. The syntax is
$template;format=expr$. Where expr is an expression resulting in a string
value that names the format to be applied to the template by the renderer
available to the template if available.  There is no default for the format
expression so it must be given. For example $myDate;format="longDate"$

Format applies to either the attribute type or the result of the template,
which is a string. Format will apply to the value of the null option but not
to the separator.

For example
  $list : {a $it$ b};format="toUpper",separator=" and ",null="woops"$
results in
  A X B and A Y B and A WOOPS B and A Z B
when list contains x, y, <null>, y and toUpper is a supported format option
of the available renderer for type String that returns the upper case input
string.

Note that the value of null was upper cased but the separator " and " was
not.
If you really want the separator to be formatted then you must do this

  ${$list : {a $it$ b};separator={ and },null={null}$};format={toUpper}$
which results in
  A X B AND A Y B AND A NULL B AND A Z B

To make use of format you must create a renderer that implements
AttributeRenderer. AttributeRenderer is enhanced to add the toString method
that takes a formatName. (Now that I think of it, for backwards
compatibility perhaps we should create a new interface such as
AttributeRendererEx? so that existing renderers don't break)

public interface AttributeRenderer {
    public String toString(Object o);
    public String toString(Object o, String formatName);
}

Implement the second toString method to check the formatName and apply the
appropriate formatting.
Register the renderer with a template group or template as you normally
would.
If the format string passed to the renderer is not recognized then simply
call toString on the object or throw an exception. If the format option is
used but there is no renderer for the type then format is ignored and the
value is rendered as if format was not specified.

Here is an example renderer toString method:
    public String toString(Object o, String formatName)
    {
        String s = (String)o;
        if (formatName.equals("toUpper"))
        {
            s = s.toUpperCase();
        }
        else {
            throw new IllegalArgumentException();
        }
        return s;
    }

The details of the renderer could easily change without affecting the
behavior of the format option.

There are two interesting things to be aware of with the format option
1) If format is applied to a template rather than an attribute an
intermediate string must be created so that the format can be applied to the
result of the template. This is not unlike when a template is used in an
indirect property (i.e. $attribute.({<some template})$

2) if the renderer is associated with type String then it is possible for
the value of an attribute to be rendered twice. This will only happen if the
format is applied to a template rather than an attribute.It happens because
the String attribute is rendered and written as part of the value of the
template expansion then the format is applied to the String value of the
template. Now that I think of this more it may be a bug. I'll look into it.

I need to do more testing but here is what I have done so far. If someone
wants the whole file let me know and I can send it but it has other changes
as well.

The changes were in ASTExpr.java and AttributeRenderer.java (which is shown
above). While working on ASTExpr I also implemented checking of the option
to make sure it is one of the supported options. I saw this issue come up on
the list and it was also bothering me because I can't spell seperator right.
Now if you use an unsupported option you get a warning.

Add near the top of the class:
    public static final Set supportedOptions = new HashSet() {
        {
            add("anchor");
            add("format");
            add("null");
            add("separator");
            add("wrap");
        }
    };

    /** A cached value of option format=expr
     */
 String formatString = null;

Change handleExprOptions to (I need to clean up my formatting wrt { and
whitespace):

 private void handleExprOptions(StringTemplate self) {
        int matchCount = 0;
  StringTemplateAST wrapAST = (StringTemplateAST)getOption("wrap");
  if ( wrapAST!=null ) {
   wrapString = evaluateExpression(self,wrapAST);
            matchCount++;
  }
  StringTemplateAST nullValueAST = (StringTemplateAST)getOption("null");
  if ( nullValueAST!=null ) {
   nullValue = evaluateExpression(self,nullValueAST);
            matchCount++;
  }
  StringTemplateAST separatorAST =
(StringTemplateAST)getOption("separator");
  if ( separatorAST!=null ) {
   separatorString = evaluateExpression(self, separatorAST);
            matchCount++;
  }
        StringTemplateAST formatAST =
(StringTemplateAST)getOption("format");
        if ( formatAST!=null ) {
            formatString = evaluateExpression(self, formatAST);
            matchCount++;
        }
        StringTemplateAST anchorAST =
(StringTemplateAST)getOption("anchor");
        if ( anchorAST!=null ) {
            matchCount++;
        }

        if (options != null && matchCount != options.size())
        {
            // report the ones that are not supported
            StringBuffer badOptions = new StringBuffer();
            Iterator it = options.keySet().iterator();
            int i = 0;
            while (it.hasNext())
            {
                String option = (String)it.next();
                if (!supportedOptions.contains(option))
                {
                    if (i > 0)
                    {
                        badOptions.append(", ");
                    }
                    i++;
                    badOptions.append(option);
                }
            }
            self.warning("ignoring unsupported option(s): "+
badOptions.toString());
        }
 }

Change write to

 protected int write(StringTemplate self,
      Object o,
      StringTemplateWriter out)
    {
        if ( o==null ) {
   if ( nullValue==null ) {
    return 0;
   }
   o = nullValue; // continue with null option if specified
  }
  int n = 0;
        try {
            if ( o instanceof StringTemplate ) {
                StringTemplate stToWrite = (StringTemplate)o;
    // failsafe: perhaps enclosing instance not set
    // Or, it could be set to another context!  This occurs
    // when you store a template instance as an attribute of more
    // than one template (like both a header file and C file when
    // generating C code).  It must execute within the context of
    // the enclosing template.
    stToWrite.setEnclosingInstance(self);
                // if self is found up the enclosing instance chain, then
                // infinite recursion
                if ( StringTemplate.inLintMode() &&

                    StringTemplate.isRecursiveEnclosingInstance(stToWrite) )
                {
                    // throw exception since sometimes eval keeps going
                    // even after I ignore this write of o.
                    throw new IllegalStateException("infinite recursion to
"+
                            stToWrite.getTemplateDeclaratorString()+"
referenced in "+

stToWrite.getEnclosingInstance().getTemplateDeclaratorString()+
                            "; stack
trace:\n"+stToWrite.getEnclosingInstanceStackTrace());
                }
                else {
     // if we have a wrap string, then inform writer it
     // might need to wrap
     if ( wrapString!=null ) {
      n = out.writeWrapSeparator(wrapString);
     }

                    // check if formating needs to be applied to the whole
template
                    if (formatString != null) {
                        AttributeRenderer renderer =
                            self.getAttributeRenderer(String.class);
                        if (renderer != null) {
                            // you pay a penalty for applying format option
to a template
                            // because the template must be writen to a temp
StringWriter so it can
                            // be formated before being writen to the real
output.
                            StringWriter buf = new StringWriter();
                            StringTemplateWriter sw =

self.getGroup().getStringTemplateWriter(buf);
                            stToWrite.write(sw);
                            n = out.write( renderer.toString(buf.toString(),
formatString) );
                            return n;
                        }
                    }

                    n = stToWrite.write(out);
                }
                return n;
            }
            // normalize anything iteratable to iterator
   o = convertAnythingIteratableToIterator(o);
   if ( o instanceof Iterator ) {
    Iterator iter = (Iterator)o;
    Object prevIterValue = null;
    boolean seenPrevValue = false;
    while ( iter.hasNext() ) {
                    Object iterValue = iter.next();
     if ( iterValue==null ) {
      iterValue = nullValue;
     }
     if ( iterValue!=null ) {
      if ( seenPrevValue /*prevIterValue!=null*/
       && separatorString!=null ) {
       n += out.writeSeparator(separatorString);
      }
      seenPrevValue = true;
      int nw = write(self, iterValue, out);
      n += nw;
     }
     prevIterValue = iterValue;
    }
   }
   else {
    AttributeRenderer renderer =
     self.getAttributeRenderer(o.getClass());
    String v = null;
    if ( renderer!=null ) {
                    if (formatString != null) {
                        v = renderer.toString(o, formatString);
                    }
                    else {
                        v = renderer.toString(o);
                    }
    }
    else {
     v = o.toString();
    }
    if ( wrapString!=null ) {
     n = out.write(v, wrapString);
    }
    else {
     n = out.write( v );
    }
    return n;
            }
        }
        catch (IOException io) {
            self.error("problem writing object: "+o, io);
        }
  return n;
    }






-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org:8080/pipermail/stringtemplate-interest/attachments/20061210/1bd6803f/attachment-0001.html 

From jjsnyders at rcn.com  Sat Dec  9 23:42:44 2006
From: jjsnyders at rcn.com (John Snyders)
Date: Sun, 10 Dec 2006 02:42:44 -0500
Subject: [stringtemplate-interest] support for set
In-Reply-To: <8CEEC0FB-8F63-46AA-9B33-26A4B93F1AAA@cs.usfca.edu>
Message-ID: <PMEOJKDLMMHOHNEAMPBGIEFFCAAA.jjsnyders@rcn.com>

> -----Original Message-----
> From: stringtemplate-interest-bounces at antlr.org
> [mailto:stringtemplate-interest-bounces at antlr.org]On Behalf Of Terence
> Parr
> Sent: Saturday, December 09, 2006 4:19 PM
> To: stringtemplate-interest
> Subject: Re: [stringtemplate-interest] support for set
>
>
> On Dec 7, 2006, at 7:27 AM, John Snyders wrote:
> > In a previous thread (http://www.antlr.org:8080/pipermail/
> > stringtemplate-interest/2006-December/000836.html) Nate
> > had asked for support for the Java Set
> > "$if (someSet.moo)$ would be >> equivalent to the Java: if
> > (someSet.contains("moo"))"
> >
> > I see no reason why Set should not be more fully supported. I agree
> > that the syntax get(string) should not be supported because it acts
> > as a method call.
>
> Nate suggested, though, following:
>
> > I would like to check in my templates if the user has
> > a given capability. Eg, the template should show an "admin tools" link
> > if the user has the capability "can view admin tools".

This seems like a legitimate use to me. The model/controller decides what
the available application capabilities are and the view figures out how to
show them.

> This is a serious model-view separation violations.  I am
> specifically trying to prevent people from doing logic in the
> template.

But templates support $if()$ logic already. Supporting set doesn't change
that.
I can create scalar attributes (either boolean true/false or String null/non
null) to represent capabilities. It is just easier if you have a bunch of
scalars to collect them together as a set.

> This example provides a prime case of we should not do,
> therefore, I don't think allowing set testing is reasonable.  This is
> the same logic I used to avoid the equivalent for single element sets
> (i.e., single values): the == operator.

This I don't understand how does a set with one element in it relate to the
== operator. I agree that $if expressions should now allow any comparison
operators.

> >  Because set is a collection it is already supported in that you
> > can do this $myset$ and it will enumerate all the keys.
>
>   yes, but you cannot have logic, which is the key separation principle.
>
> > $myset.key1$ should be replaced with "key1" if key1 is in the set
> > and "" otherwise.
> > Or should $myset.key1$ be replaced with "true" if it is present?
>
> I think you get an empty string for $mymap.key$; I don't think I want
> to open this whole a bigger, because I think you can test $if
> (mymap.key)$ I just realized.  Perhaps we should not advertise these
> edge cases ;) Certainly I don't think we should create more of them ;)
>

Yes $if(mymap.key)$ works as you would expect.

... I think I get it now...
Is the issue you are concerned about?

$if($myset.("state=='MA'")$

The potential for abuse, as you say, already exists with Map. I don't see
this as a problem because the power is in the hands of the model/controller
author not the template author.

If Set is more convenient for the model I see no reason to bar it from the
template.

These cases should not be advertised but they should be held up as examples
to educate people on the proper use of ST. Your properties must not have
side effects. Your maps should work like maps. Your sets should work like
sets. Your renderers should just do rendering. Otherwise go back to JSP or
Velocity :)

Thanks,
-John

> Ter
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org:8080/mailman/listinfo/stringtemplate-interest

From parrt at cs.usfca.edu  Sun Dec 10 11:57:16 2006
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sun, 10 Dec 2006 11:57:16 -0800
Subject: [stringtemplate-interest] format option implemented?
In-Reply-To: <PMEOJKDLMMHOHNEAMPBGEEFECAAA.jjsnyders@rcn.com>
References: <PMEOJKDLMMHOHNEAMPBGEEFECAAA.jjsnyders@rcn.com>
Message-ID: <8135B86A-FEFD-4FB7-B7A2-76140EA3C533@cs.usfca.edu>


On Dec 9, 2006, at 10:10 PM, John Snyders wrote:
>> I think I have also decided that the format option would apply to the
>> object value, not the entire expression, thus, avoiding issues with
>> the separator.  It would apply to the null option, however, because
>> that replaces an expression value.
>
> This gets a little tricky. Options are allowed on and apply to
> templatesExpr.
> Most of the time you will do $attribute;format="fancy"$ but it seems
> incorrect
> to me that $list : {a $it$ b};format={toUpper}$ would only apply to  
> $it$ and
> not
> the whole annon template.

It would apply to entire {a $it$ b}, but not a separator.

> While perhaps not useful $\"literal\";format={toUpper}$ should also  
> work (it
> would result in "LITERAL")

yep.

> The discussion on this list went on about the order but that turns  
> out to be
> a non issue since all options apply to the template. They are  
> stored in a
> hash map and hence have no order.
>
> What naturally seemed to happen as I implemented this is that  
> format applied
> to the whole template and the null option value if used but not to the
> separator.


yep.

Ter

From parrt at cs.usfca.edu  Sun Dec 10 12:02:36 2006
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sun, 10 Dec 2006 12:02:36 -0800
Subject: [stringtemplate-interest] support for set
In-Reply-To: <PMEOJKDLMMHOHNEAMPBGIEFFCAAA.jjsnyders@rcn.com>
References: <PMEOJKDLMMHOHNEAMPBGIEFFCAAA.jjsnyders@rcn.com>
Message-ID: <441E03A8-4397-4F51-8818-2988077C02ED@cs.usfca.edu>


On Dec 9, 2006, at 11:42 PM, John Snyders wrote:
>>> I would like to check in my templates if the user has
>>> a given capability. Eg, the template should show an "admin tools"  
>>> link
>>> if the user has the capability "can view admin tools".
>
> This seems like a legitimate use to me. The model/controller  
> decides what
> the available application capabilities are and the view figures out  
> how to
> show them.

John,

I cannot agree that allowing expressions in IF statements is  
allowed.  No logic in the templates, right?  Allowing IF-conditionals  
does not follow from this statement you just made.  Display has  
nothing to do with conditionals.

>> This is a serious model-view separation violations.  I am
>> specifically trying to prevent people from doing logic in the
>> template.
>
> But templates support $if()$ logic already.

But the crucial difference is that they can only test the RESULT of  
the model's computation.  They cannot do computation.  That is the  
difference, right?

> Supporting set doesn't change
> that.

It adds another hole.

> I can create scalar attributes (either boolean true/false or String  
> null/non
> null) to represent capabilities.
> It is just easier if you have a bunch of
> scalars to collect them together as a set.

I'm trying to make logic hard ;)

>> This example provides a prime case of we should not do,
>> therefore, I don't think allowing set testing is reasonable.  This is
>> the same logic I used to avoid the equivalent for single element sets
>> (i.e., single values): the == operator.
>
> This I don't understand how does a set with one element in it  
> relate to the
> == operator. I agree that $if expressions should now allow any  
> comparison
> operators.

No diff between "a==b" and "a in b" if b has |b|<=1 and b is a set.

>> I think you get an empty string for $mymap.key$; I don't think I want
>> to open this whole a bigger, because I think you can test $if
>> (mymap.key)$ I just realized.  Perhaps we should not advertise these
>> edge cases ;) Certainly I don't think we should create more of  
>> them ;)
>>
>
> Yes $if(mymap.key)$ works as you would expect.

Crap.  Oh well, i'm consistent, but it opens a hole.

> ... I think I get it now...
> Is the issue you are concerned about?
>
> $if($myset.("state=='MA'")$

I'm concerned with $if(foo==bar)$ and $if(user in superUser)$.  I  
mean that is the example i use in my model-view separation  
paper...straight from it (no testing if I'm super user in the  
template or you must have that in every template).  bad!

> The potential for abuse, as you say, already exists with Map. I  
> don't see
> this as a problem because the power is in the hands of the model/ 
> controller
> author not the template author.

Often they are the same person ;)

> If Set is more convenient for the model I see no reason to bar it  
> from the
> template.

I'm contemplating taking out the map check in IF. ;)

> These cases should not be advertised but they should be held up as  
> examples
> to educate people on the proper use of ST. Your properties must not  
> have
> side effects. Your maps should work like maps. Your sets should  
> work like
> sets. Your renderers should just do rendering. Otherwise go back to  
> JSP or
> Velocity :)

Yup.  Just don't test set or map containment in IF ;)

Ter


From parrt at cs.usfca.edu  Sun Dec 10 12:07:45 2006
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sun, 10 Dec 2006 12:07:45 -0800
Subject: [stringtemplate-interest] format option implementation details
In-Reply-To: <PMEOJKDLMMHOHNEAMPBGOEFECAAA.jjsnyders@rcn.com>
References: <PMEOJKDLMMHOHNEAMPBGOEFECAAA.jjsnyders@rcn.com>
Message-ID: <46652E4D-43B1-409C-818A-F66E5B0EBC1B@cs.usfca.edu>


On Dec 9, 2006, at 11:12 PM, John Snyders wrote:

> Here are the details of what I have implemented for the format option.
>
> format is treated syntactically like any other option and can be  
> combined with any of the other options. The syntax is
> $template;format=expr$. Where expr is an expression resulting in a  
> string value that names the format to be applied to the template by  
> the renderer available to the template if available.  There is no  
> default for the format expression so it must be given. For example  
> $myDate;format="longDate"$
>
> Format applies to either the attribute type or the result of the  
> template, which is a string. Format will apply to the value of the  
> null option but not to the separator.
>
> For example
>   $list : {a $it$ b};format="toUpper",separator=" and ",null="woops"$
> results in
>   A X B and A Y B and A WOOPS B and A Z B
> when list contains x, y, <null>, y and toUpper is a supported  
> format option of the available renderer for type String that  
> returns the upper case input string.

Sounds great!

> Note that the value of null was upper cased but the separator " and  
> " was not.
> If you really want the separator to be formatted then you must do this
>
>   ${$list : {a $it$ b};separator={ and },null={null}$};format= 
> {toUpper}$
> which results in
>   A X B AND A Y B AND A NULL B AND A Z B
> To make use of format you must create a renderer that implements  
> AttributeRenderer. AttributeRenderer is enhanced to add the  
> toString method that takes a formatName. (Now that I think of it,  
> for backwards compatibility perhaps we should create a new  
> interface such as AttributeRendererEx? so that existing renderers  
> don't break)

Well, at least the compiler will tell them and it's a quick  
change...I'd prefer to force this "upgrade" probably.

> public interface AttributeRenderer {
>     public String toString(Object o);
>     public String toString(Object o, String formatName);
> }
> Implement the second toString method to check the formatName and  
> apply the appropriate formatting.
> Register the renderer with a template group or template as you  
> normally would.
> If the format string passed to the renderer is not recognized then  
> simply call toString on the object or throw an exception.

Yup.

> If the format option is used but there is no renderer for the type  
> then format is ignored and the value is rendered as if format was  
> not specified.

Yup.  Good.

> Here is an example renderer toString method:
>     public String toString(Object o, String formatName)
>     {
>         String s = (String)o;
>         if (formatName.equals("toUpper"))
>         {
>             s = s.toUpperCase();
>         }
>         else {
>             throw new IllegalArgumentException();
>         }
>         return s;
>     }
> The details of the renderer could easily change without affecting  
> the behavior of the format option.
>
> There are two interesting things to be aware of with the format option
> 1) If format is applied to a template rather than an attribute an  
> intermediate string must be created so that the format can be  
> applied to the result of the template. This is not unlike when a  
> template is used in an indirect property (i.e. $attribute.({<some  
> template})$

Good point.  format forces early evaluation. :)

> 2) if the renderer is associated with type String then it is  
> possible for the value of an attribute to be rendered twice. This  
> will only happen if the format is applied to a template rather than  
> an attribute.It happens because the String attribute is rendered  
> and written as part of the value of the template expansion then the  
> format is applied to the String value of the template. Now that I  
> think of this more it may be a bug. I'll look into it.

Just an efficiency thing.

> I need to do more testing but here is what I have done so far. If  
> someone wants the whole file let me know and I can send it but it  
> has other changes as well.

I'll do my own implementation, using your excellent work as a guide!   
May I paraphrase your text here for the manual?

>  The changes were in ASTExpr.java and AttributeRenderer.java (which  
> is shown above). While working on ASTExpr I also implemented  
> checking of the option to make sure it is one of the supported  
> options. I saw this issue come up on the list and it was also  
> bothering me because I can't spell seperator right. Now if you use  
> an unsupported option you get a warning.

Good on you!

Thanks,
Ter


From jjsnyders at rcn.com  Sun Dec 10 12:34:21 2006
From: jjsnyders at rcn.com (John Snyders)
Date: Sun, 10 Dec 2006 15:34:21 -0500
Subject: [stringtemplate-interest] format option implementation details
In-Reply-To: <46652E4D-43B1-409C-818A-F66E5B0EBC1B@cs.usfca.edu>
Message-ID: <PMEOJKDLMMHOHNEAMPBGKEFGCAAA.jjsnyders@rcn.com>

> > To make use of format you must create a renderer that implements  
> > AttributeRenderer. AttributeRenderer is enhanced to add the  
> > toString method that takes a formatName. (Now that I think of it,  
> > for backwards compatibility perhaps we should create a new  
> > interface such as AttributeRendererEx? so that existing renderers  
> > don't break)
> 
> Well, at least the compiler will tell them and it's a quick  
> change...I'd prefer to force this "upgrade" probably.

OK

> > There are two interesting things to be aware of with the format option
> > 1) If format is applied to a template rather than an attribute an  
> > intermediate string must be created so that the format can be  
> > applied to the result of the template. This is not unlike when a  
> > template is used in an indirect property (i.e. $attribute.({<some  
> > template})$
> 
> Good point.  format forces early evaluation. :)
> 
> > 2) if the renderer is associated with type String then it is  
> > possible for the value of an attribute to be rendered twice. This  
> > will only happen if the format is applied to a template rather than  
> > an attribute.It happens because the String attribute is rendered  
> > and written as part of the value of the template expansion then the  
> > format is applied to the String value of the template. Now that I  
> > think of this more it may be a bug. I'll look into it.
> 
> Just an efficiency thing.

Not just efficiency. I depends on if your rendering is idempotent.
I had a renderer that escaped quotes " --> \". Now I end up with \\"


> > I need to do more testing but here is what I have done so far. If  
> > someone wants the whole file let me know and I can send it but it  
> > has other changes as well.
> 
> I'll do my own implementation, using your excellent work as a guide!   
> May I paraphrase your text here for the manual?

no problem

From parrt at cs.usfca.edu  Sun Dec 10 12:50:43 2006
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sun, 10 Dec 2006 12:50:43 -0800
Subject: [stringtemplate-interest] String template 3.0 bug.
In-Reply-To: <000a01c71be7$de6b2e70$9b418b50$@hill@blueyonder.co.uk>
References: <20061118194452.89863190505@www.antlr.org>
	<EEE231A7-FD78-4987-B6BE-90E9EB269302@cs.usfca.edu>
	<009701c713dc$18c8e3a0$4a5aaae0$@hill@blueyonder.co.uk>
	<72520225-84A2-419E-B720-6FA1D19DF242@cs.usfca.edu>
	<000a01c71be7$de6b2e70$9b418b50$@hill@blueyonder.co.uk>
Message-ID: <44BA0B55-162C-4FF1-82ED-FBDE391F10A5@cs.usfca.edu>


On Dec 9, 2006, at 3:15 PM, Rob Hill wrote:

>
>>> Any idea when you'll get chance for another round of bug-fixing
>>> stuff on
>>> ST3?
>>> The list in list bug is a real pain for me :(
>>
>> Is this officially listed in the bug report that? if not, I can add
>> it and take a look at its fix.
>
> Yes, it is listed , I remember Kay adding a test case for it,
> I think its this one.
>
> http://www.antlr.org:8888/browse/ST-1

Just fixed it. :)

http://www.antlr.org:8888/browse/ST-1

Grab at:

http://fisheye2.cenqua.com/browse/stringtemplate

I'll be making a faster zip download soon.

Ter


From parrt at cs.usfca.edu  Sun Dec 10 13:43:02 2006
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sun, 10 Dec 2006 13:43:02 -0800
Subject: [stringtemplate-interest] format option implementation details
In-Reply-To: <PMEOJKDLMMHOHNEAMPBGKEFGCAAA.jjsnyders@rcn.com>
References: <PMEOJKDLMMHOHNEAMPBGKEFGCAAA.jjsnyders@rcn.com>
Message-ID: <B3BC160E-D600-4B06-B13D-3D7768BD61D6@cs.usfca.edu>


On Dec 10, 2006, at 12:34 PM, John Snyders wrote:
>>> 2) if the renderer is associated with type String then it is
>>> possible for the value of an attribute to be rendered twice. This
>>> will only happen if the format is applied to a template rather than
>>> an attribute.It happens because the String attribute is rendered
>>> and written as part of the value of the template expansion then the
>>> format is applied to the String value of the template. Now that I
>>> think of this more it may be a bug. I'll look into it.
>>
>> Just an efficiency thing.
>
> Not just efficiency. I depends on if your rendering is idempotent.
> I had a renderer that escaped quotes " --> \". Now I end up with \\"

So if you have "a $it$ b"; format="f" and $it$ is a String object  
with its own renderer you get renderer applied to $it$ object and  
then you apply format to the toString() version of the entire  
template?  Seems ok unless, as you say, you are escaping things.   
But, that is operator error as you don't want to escape templates  
only attributes I'd say.

Ter




From parrt at cs.usfca.edu  Sun Dec 10 13:44:17 2006
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sun, 10 Dec 2006 13:44:17 -0800
Subject: [stringtemplate-interest] format option done (courtesy of John
	Snyders)
Message-ID: <A82100F7-F67F-4122-923F-BB341CF4791E@cs.usfca.edu>

Hi,

http://www.antlr.org:8888/browse/ST-5

resolved.  Added format option per John.

Ter

From kroepke at classdump.org  Mon Dec 11 01:01:05 2006
From: kroepke at classdump.org (Kay Roepke)
Date: Mon, 11 Dec 2006 10:01:05 +0100
Subject: [stringtemplate-interest] format option implementation details
In-Reply-To: <PMEOJKDLMMHOHNEAMPBGKEFGCAAA.jjsnyders@rcn.com>
References: <PMEOJKDLMMHOHNEAMPBGKEFGCAAA.jjsnyders@rcn.com>
Message-ID: <F7AD48A7-5839-49C1-AB8D-FB1BCAACE953@classdump.org>


On 10. Dec 2006, at 21:34 , John Snyders wrote:

>>> (Now that I think of it,
>>> for backwards compatibility perhaps we should create a new
>>> interface such as AttributeRendererEx? so that existing renderers
>>> don't break)
>>
>> Well, at least the compiler will tell them and it's a quick
>> change...I'd prefer to force this "upgrade" probably.
>
> OK

Yep, this ain't Windows ;)

Cool, one bug less assigned to me :)

cheers,
-k
-- 
Kay R?pke
http://classdump.org/





From jjsnyders at rcn.com  Mon Dec 11 08:47:28 2006
From: jjsnyders at rcn.com (John Snyders)
Date: Mon, 11 Dec 2006 11:47:28 -0500
Subject: [stringtemplate-interest] Output string lengths..
In-Reply-To: <0812654E-1470-49B0-8852-F8E29EB717D2@cs.usfca.edu>
Message-ID: <PMEOJKDLMMHOHNEAMPBGOEFLCAAA.jjsnyders@rcn.com>

Now that we have the format option you could do

$d1;format("pad,20")$, $d2;format("pad,30")$

and let the render grab the width from the format name but this is ugly.

The need for pad is legitimate. The proposed solutions so far:

1) do it in the model by pre pading:
This pushes presentation into the model and is undesireable for that reason

2) do it in the model by other means such as pseudo properties (Ex:
$d1.pad20$):
Has all the disadvantages that ;format was intended to solve.

3) use format as is and encode the width into the format string:
It will work but as I said it is ugly

4) use chars function as I discribed in a previous message:
It works. Chars function could have other uses independent of this one. But
using
chars for padding is likely inefficent and the intent is not clear.
$chars(s1),chars(space40): { ch, sp | $ch;null={$sp$}$}$ is hard to
understand!

5) add pad option (Ex $d1;pad(20)$):
First a question. Option seems the right thing to me but is there some
wisdom about when to use the option mechanism and when to use the function
mechanism?

Pad option does no harm as far as I can see. It is also very clear about
what the intent is.

I wonder if it is just a special case of format and instead indicates that
options should be able to take additional parameters. I would expect pad to
behave in all respects like format in terms of how it applies to the
template. It should apply to attributes and the result of templates and the
null value but not separator. Wait this last part is not right. Pad is not
idempotent and format currently can call the renderer twice for the same
string. I said that this might be a bug and I still need to look into it. I
think pad would want to pad the whole result of a template expansion (even
after list iteration). Perhaps the format implementation is wrong here.

If format is changed so it is only called once per template, applies to the
whole template and options could have multiple arguments it might look like
this

$d1;format("pad",20)$

I started out agreeing with pad option but now I'm not sure.

-John

> -----Original Message-----
> From: stringtemplate-interest-bounces at antlr.org
> [mailto:stringtemplate-interest-bounces at antlr.org]On Behalf Of Terence
> Parr
> Sent: Saturday, December 09, 2006 4:24 PM
> To: StringTemplate
> Subject: Re: [stringtemplate-interest] Output string lengths..
>
>
> Without making pad an actual predefined option, it is hard to pass
> the 20 value to the renderer.
>
> Like wrap etc., is this something worth adding to ST?
>
> Ter
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org:8080/mailman/listinfo/stringtemplate-interest

From parrt at cs.usfca.edu  Mon Dec 11 10:18:34 2006
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon, 11 Dec 2006 10:18:34 -0800
Subject: [stringtemplate-interest] more unit tests for format
Message-ID: <5A7F25C5-DA3C-4362-B894-CC6EEEBC0A35@cs.usfca.edu>

	public void testRendererWithFormatAndSeparator() throws Exception {
		StringTemplate st =new StringTemplate(
				"The names: <names; separator=\" and \", format=\"upper\">",
				AngleBracketTemplateLexer.class);
		st.setAttribute("names", "ter");
		st.setAttribute("names", "tom");
		st.setAttribute("names", "sriram");
		st.registerRenderer(String.class, new StringRenderer());
		String expecting = "The names: TER and TOM and SRIRAM";
		String result = st.toString();
		assertEqual(result, expecting);
	}

	public void testRendererWithFormatAndSeparatorAndNull() throws  
Exception {
		StringTemplate st =new StringTemplate(
				"The names: <names; separator=\" and \", null=\"n/a\", format= 
\"upper\">",
				AngleBracketTemplateLexer.class);
		List names = new ArrayList();
		names.add("ter");
		names.add(null);
		names.add("sriram");
		st.setAttribute("names", names);
		st.registerRenderer(String.class, new StringRenderer());
		String expecting = "The names: TER and N/A and SRIRAM";
		String result = st.toString();
		assertEqual(result, expecting);
	}



From caleb.lyness at ezswitch.net  Mon Dec 11 10:14:51 2006
From: caleb.lyness at ezswitch.net (Caleb Lyness)
Date: Mon, 11 Dec 2006 19:14:51 +0100
Subject: [stringtemplate-interest] Output string lengths..
In-Reply-To: <PMEOJKDLMMHOHNEAMPBGOEFLCAAA.jjsnyders@rcn.com>
References: <PMEOJKDLMMHOHNEAMPBGOEFLCAAA.jjsnyders@rcn.com>
Message-ID: <457DA01B.6060400@ezswitch.net>

John Snyders wrote:
> Now that we have the format option you could do
>
> $d1;format("pad,20")$, $d2;format("pad,30")$
>
> and let the render grab the width from the format name but this is ugly.
>   
The format specifier is sufficient for doing padding:

c.f: java.util.Formatter

Here is an example:

        System.out.println("result="+String.format("|%-50s|", "hello"));
        System.out.println("result="+String.format("|%50s|", "hello"));

Output
result=|hello                                             |
result=|                                             hello|

Cheers
     Caleb



-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org:8080/pipermail/stringtemplate-interest/attachments/20061211/26707e15/attachment-0001.html 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/x-pkcs7-signature
Size: 3269 bytes
Desc: S/MIME Cryptographic Signature
Url : http://www.antlr.org:8080/pipermail/stringtemplate-interest/attachments/20061211/26707e15/attachment-0001.bin 

From parrt at cs.usfca.edu  Mon Dec 11 10:28:43 2006
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon, 11 Dec 2006 10:28:43 -0800
Subject: [stringtemplate-interest] moved unit tests to junit
Message-ID: <F906FB3B-1AF8-4C79-9478-75E8CCAB573F@cs.usfca.edu>

Hi,

http://www.antlr.org:8888/browse/ST-14

resolved.

Ter

From parrt at cs.usfca.edu  Mon Dec 11 10:29:52 2006
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon, 11 Dec 2006 10:29:52 -0800
Subject: [stringtemplate-interest] Output string lengths..
In-Reply-To: <457DA01B.6060400@ezswitch.net>
References: <PMEOJKDLMMHOHNEAMPBGOEFLCAAA.jjsnyders@rcn.com>
	<457DA01B.6060400@ezswitch.net>
Message-ID: <97FAD537-5E28-4FFB-9EDE-3B57ED9DB950@cs.usfca.edu>


On Dec 11, 2006, at 10:14 AM, Caleb Lyness wrote:

> John Snyders wrote:
>> Now that we have the format option you could do $d1;format("pad, 
>> 20")$, $d2;format("pad,30")$ and let the render grab the width  
>> from the format name but this is ugly.
> The format specifier is sufficient for doing padding:
>
> c.f: java.util.Formatter
>
> Here is an example:
>
>         System.out.println("result="+String.format("|%-50s|",  
> "hello"));
>         System.out.println("result="+String.format("|%50s|",  
> "hello"));
>
> Output
> result=|hello                                             |
> result=|                                             hello|
>

So,  We could do the following $name; format="%50s"$, right? then  
someone would have to make a string renderer, but that is easy.

Ter


From caleb.lyness at ezswitch.net  Mon Dec 11 11:11:20 2006
From: caleb.lyness at ezswitch.net (Caleb Lyness)
Date: Mon, 11 Dec 2006 20:11:20 +0100
Subject: [stringtemplate-interest] Output string lengths..
In-Reply-To: <97FAD537-5E28-4FFB-9EDE-3B57ED9DB950@cs.usfca.edu>
References: <PMEOJKDLMMHOHNEAMPBGOEFLCAAA.jjsnyders@rcn.com>	<457DA01B.6060400@ezswitch.net>
	<97FAD537-5E28-4FFB-9EDE-3B57ED9DB950@cs.usfca.edu>
Message-ID: <457DAD58.7050603@ezswitch.net>

Terence Parr wrote:
> On Dec 11, 2006, at 10:14 AM, Caleb Lyness wrote:
>
>   
>> John Snyders wrote:
>>     
>>> Now that we have the format option you could do $d1;format("pad, 
>>> 20")$, $d2;format("pad,30")$ and let the render grab the width  
>>> from the format name but this is ugly.
>>>       
>> The format specifier is sufficient for doing padding:
>>
>> c.f: java.util.Formatter
>>
>> Here is an example:
>>
>>         System.out.println("result="+String.format("|%-50s|",  
>> "hello"));
>>         System.out.println("result="+String.format("|%50s|",  
>> "hello"));
>>
>> Output
>> result=|hello                                             |
>> result=|                                             hello|
>>
>>     
>
> So,  We could do the following $name; format="%50s"$, right? then  
> someone would have to make a string renderer, but that is easy.
>   
You can format a lot of things, including dates, so it makes the old
date renderer obsolete.
I find it rather smart because it a simple solution with lots of power:

class StringTemplate.FormatRenderer
  implements ...
...
    private Locale locale;

    // If locale is null - no localization is applied (preserving
original props for String.format)
    public FormatRenderer(Locale locale)
    {  
        this.locale = locale;
    }

    public FormatRenderer()
    {  
        this(Locale.getDefault());
    }

    public String toString(Object o, String formatStr) throws ...
     {
         return String.format(locale,formatStr,o)
     }

...

st.registerRenderer(String.class, new FormatRenderer(mylocale));
st.registerRenderer(Date.class, new FormatRenderer(mylocale)); 

So, yes easy :-D. For the docs just point the reader at the Java docs.
But only available for Java 1.5+ :-/

Perhaps the default format renderer? when format is specified but
no renderer has been defined...

I am sure you can fill in the missing bits above....

Cheers
     Caleb
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org:8080/pipermail/stringtemplate-interest/attachments/20061211/0e7b2c80/attachment.html 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/x-pkcs7-signature
Size: 3269 bytes
Desc: S/MIME Cryptographic Signature
Url : http://www.antlr.org:8080/pipermail/stringtemplate-interest/attachments/20061211/0e7b2c80/attachment.bin 

From jjsnyders at rcn.com  Mon Dec 11 11:44:34 2006
From: jjsnyders at rcn.com (John Snyders)
Date: Mon, 11 Dec 2006 14:44:34 -0500
Subject: [stringtemplate-interest] Output string lengths..
In-Reply-To: <97FAD537-5E28-4FFB-9EDE-3B57ED9DB950@cs.usfca.edu>
Message-ID: <PMEOJKDLMMHOHNEAMPBGGEFNCAAA.jjsnyders@rcn.com>

> -----Original Message-----
> From: stringtemplate-interest-bounces at antlr.org
> [mailto:stringtemplate-interest-bounces at antlr.org]On Behalf Of Terence
> Parr
> Sent: Monday, December 11, 2006 1:30 PM
> To: StringTemplate
> Subject: Re: [stringtemplate-interest] Output string lengths..
>
> On Dec 11, 2006, at 10:14 AM, Caleb Lyness wrote:
>
> > John Snyders wrote:
> >> Now that we have the format option you could do $d1;format("pad,
> >> 20")$, $d2;format("pad,30")$ and let the render grab the width
> >> from the format name but this is ugly.
> > The format specifier is sufficient for doing padding:
> >
> > c.f: java.util.Formatter
> >
> > Here is an example:
> >
> >         System.out.println("result="+String.format("|%-50s|",
> > "hello"));
> >         System.out.println("result="+String.format("|%50s|",
> > "hello"));
> >
> > Output
> > result=|hello                                             |
> > result=|                                             hello|
> >
>
> So,  We could do the following $name; format="%50s"$, right? then
> someone would have to make a string renderer, but that is easy.
>
> Ter

The trouble is that for a single type there is one renderer so it must
handle all needed formats.
$name;format="pad,20"$ then later $name;format="upperCase"$ A renderer for
the format option can do whatever it wants with the argument but in some
cases it would pass it to String.format and other times it will do something
else. BTW String.format/Formater is new in Java 1.5. The renderer must be
able to distinguish one argument value from another. If you wanted to use
the format argument as the argument to String.format I guess you could check
to see that it contains a '%'.

The other issues I raised about where format applies and why can't options
take multiple parameters are still unanswered.

-John


From misc at n4te.com  Mon Dec 11 13:06:57 2006
From: misc at n4te.com (Nate)
Date: Mon, 11 Dec 2006 13:06:57 -0800
Subject: [stringtemplate-interest] support for set
In-Reply-To: <441E03A8-4397-4F51-8818-2988077C02ED@cs.usfca.edu>
References: <PMEOJKDLMMHOHNEAMPBGIEFFCAAA.jjsnyders@rcn.com>
	<441E03A8-4397-4F51-8818-2988077C02ED@cs.usfca.edu>
Message-ID: <457DC871.9010503@n4te.com>

Let me step back and explain my situation and maybe you can help to find 
the correct solution.

I am building a web application. Users have a list of "capabilities", 
each of which is just a String. URIs can be tagged with a "capability". 
When a user tries to view a URI that is tagged, they are asked to login. 
If they are logged in and don't have the capability, they are shown an 
error page.

Besides what parts of the site users can access, capabilities are also 
used to fine tune what actions users can take. Eg, a user must have the 
capability "users.edit" to edit users and "users.delete" to delete 
users. If a user has "users.edit" and does not have "users.delete" then 
the delete button should not appear on the edit user page.

The reason we use capabilities in this way is because our customers want 
to customize the user roles. So the customer creates a number of user 
roles which are each a list of capabilities, then users get assigned 
user roles. When a user logs in they get assigned all the capabilities 
for all the roles they belong to. All the code cares about is if you 
have specific capabilities, not what role you are.

There are many capabilities and the control is so fine that I imagine 
the templates are going to have to check if they should show a link to 
this part of the site or not. If this violates seperation, how can I get 
around that? Assuming I will have to do these checks in the templates, I 
could stuff each capability into the template so I could check for it. 
If ST supported sets I could stuff the set into the template and check 
that way.

-Nate


Terence Parr wrote:
> On Dec 9, 2006, at 11:42 PM, John Snyders wrote:
>   
>>>> I would like to check in my templates if the user has
>>>> a given capability. Eg, the template should show an "admin tools"  
>>>> link
>>>> if the user has the capability "can view admin tools".
>>>>         
>> This seems like a legitimate use to me. The model/controller  
>> decides what
>> the available application capabilities are and the view figures out  
>> how to
>> show them.
>>     
>
> John,
>
> I cannot agree that allowing expressions in IF statements is  
> allowed.  No logic in the templates, right?  Allowing IF-conditionals  
> does not follow from this statement you just made.  Display has  
> nothing to do with conditionals.
>
>   
>>> This is a serious model-view separation violations.  I am
>>> specifically trying to prevent people from doing logic in the
>>> template.
>>>       
>> But templates support $if()$ logic already.
>>     
>
> But the crucial difference is that they can only test the RESULT of  
> the model's computation.  They cannot do computation.  That is the  
> difference, right?
>
>   
>> Supporting set doesn't change
>> that.
>>     
>
> It adds another hole.
>
>   
>> I can create scalar attributes (either boolean true/false or String  
>> null/non
>> null) to represent capabilities.
>> It is just easier if you have a bunch of
>> scalars to collect them together as a set.
>>     
>
> I'm trying to make logic hard ;)
>
>   
>>> This example provides a prime case of we should not do,
>>> therefore, I don't think allowing set testing is reasonable.  This is
>>> the same logic I used to avoid the equivalent for single element sets
>>> (i.e., single values): the == operator.
>>>       
>> This I don't understand how does a set with one element in it  
>> relate to the
>> == operator. I agree that $if expressions should now allow any  
>> comparison
>> operators.
>>     
>
> No diff between "a==b" and "a in b" if b has |b|<=1 and b is a set.
>
>   
>>> I think you get an empty string for $mymap.key$; I don't think I want
>>> to open this whole a bigger, because I think you can test $if
>>> (mymap.key)$ I just realized.  Perhaps we should not advertise these
>>> edge cases ;) Certainly I don't think we should create more of  
>>> them ;)
>>>
>>>       
>> Yes $if(mymap.key)$ works as you would expect.
>>     
>
> Crap.  Oh well, i'm consistent, but it opens a hole.
>
>   
>> ... I think I get it now...
>> Is the issue you are concerned about?
>>
>> $if($myset.("state=='MA'")$
>>     
>
> I'm concerned with $if(foo==bar)$ and $if(user in superUser)$.  I  
> mean that is the example i use in my model-view separation  
> paper...straight from it (no testing if I'm super user in the  
> template or you must have that in every template).  bad!
>
>   
>> The potential for abuse, as you say, already exists with Map. I  
>> don't see
>> this as a problem because the power is in the hands of the model/ 
>> controller
>> author not the template author.
>>     
>
> Often they are the same person ;)
>
>   
>> If Set is more convenient for the model I see no reason to bar it  
>> from the
>> template.
>>     
>
> I'm contemplating taking out the map check in IF. ;)
>
>   
>> These cases should not be advertised but they should be held up as  
>> examples
>> to educate people on the proper use of ST. Your properties must not  
>> have
>> side effects. Your maps should work like maps. Your sets should  
>> work like
>> sets. Your renderers should just do rendering. Otherwise go back to  
>> JSP or
>> Velocity :)
>>     
>
> Yup.  Just don't test set or map containment in IF ;)
>
> Ter
>
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org:8080/mailman/listinfo/stringtemplate-interest
>   


From caleb.lyness at ezswitch.net  Mon Dec 11 14:26:38 2006
From: caleb.lyness at ezswitch.net (Caleb Lyness)
Date: Mon, 11 Dec 2006 23:26:38 +0100
Subject: [stringtemplate-interest] Output string lengths..
In-Reply-To: <PMEOJKDLMMHOHNEAMPBGGEFNCAAA.jjsnyders@rcn.com>
References: <PMEOJKDLMMHOHNEAMPBGGEFNCAAA.jjsnyders@rcn.com>
Message-ID: <457DDB1E.8010608@ezswitch.net>

John Snyders wrote:
>>> John Snyders wrote:
>>>       
>>>> Now that we have the format option you could do $d1;format("pad,
>>>> 20")$, $d2;format("pad,30")$ and let the render grab the width
>>>> from the format name but this is ugly.
>>>>         
>>> The format specifier is sufficient for doing padding:
>>>
>>> c.f: java.util.Formatter
>>>
>>> Here is an example:
>>>
>>>         System.out.println("result="+String.format("|%-50s|",
>>> "hello"));
>>>         System.out.println("result="+String.format("|%50s|",
>>> "hello"));
>>>
>>> Output
>>> result=|hello                                             |
>>> result=|                                             hello|
>>>
>>>       
>> So,  We could do the following $name; format="%50s"$, right? then
>> someone would have to make a string renderer, but that is easy.
>>
>> Ter
>>     
>
> The trouble is that for a single type there is one renderer so it must
> handle all needed formats.
> $name;format="pad,20"$ then later $name;format="upperCase"$ A renderer for
> the format option can do whatever it wants with the argument but in some
> cases it would pass it to String.format and other times it will do something
> else. 
Trouble? Is this not a user/ system implementers problem?
One could use a hash table to look up the operator names
and default to String.format. Perhaps the implementor wants to support the
following: pad(20,'x') or remove('abc')... or whatever...  they will do
that if
the want to.

> BTW String.format/Formater is new in Java 1.5. 
Yes I noted that. There are other open source libraries available for
doing something similar
for earlier versions.... again that is a system implementers problem is
it not?
> The renderer must be
> able to distinguish one argument value from another. If you wanted to use
> the format argument as the argument to String.format I guess you could check
> to see that it contains a '%'.
>
> The other issues I raised about where format applies 
Surely to the attributes and the result of templates expansion?
I may have missed the point.

> and why can't options
> take multiple parameters are still unanswered.
>   
I think I missed that... Can you point it out again.

Cheers
    Caleb
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org:8080/pipermail/stringtemplate-interest/attachments/20061211/91e432d6/attachment.html 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/x-pkcs7-signature
Size: 3269 bytes
Desc: S/MIME Cryptographic Signature
Url : http://www.antlr.org:8080/pipermail/stringtemplate-interest/attachments/20061211/91e432d6/attachment.bin 

From jjsnyders at rcn.com  Mon Dec 11 14:39:54 2006
From: jjsnyders at rcn.com (John Snyders)
Date: Mon, 11 Dec 2006 17:39:54 -0500
Subject: [stringtemplate-interest] Output string lengths..
In-Reply-To: <457DDB1E.8010608@ezswitch.net>
Message-ID: <PMEOJKDLMMHOHNEAMPBGAEFPCAAA.jjsnyders@rcn.com>


So,  We could do the following $name; format="%50s"$, right? then
someone would have to make a string renderer, but that is easy.

Ter

The trouble is that for a single type there is one renderer so it must
handle all needed formats.
$name;format="pad,20"$ then later $name;format="upperCase"$ A renderer for
the format option can do whatever it wants with the argument but in some
cases it would pass it to String.format and other times it will do something
else. Trouble? Is this not a user/ system implementers problem?
  [John Snyders] Yes user implementation issue. Not a problem from the
desing of format option point of view.
  One could use a hash table to look up the operator names
  and default to String.format. Perhaps the implementor wants to support the
  following: pad(20,'x') or remove('abc')... or whatever...  they will do
that if
  the want to.


BTW String.format/Formater is new in Java 1.5. Yes I noted that. There are
other open source libraries available for doing something similar
  for earlier versions.... again that is a system implementers problem is it
not?
  [John Snyders] Yes

The renderer must be
able to distinguish one argument value from another. If you wanted to use
the format argument as the argument to String.format I guess you could check
to see that it contains a '%'.

The other issues I raised about where format applies Surely to the
attributes and the result of templates expansion?
  I may have missed the point.


and why can't options
take multiple parameters are still unanswered.
  I think I missed that... Can you point it out again.
  [John Snyders] Under #5 here
http://www.antlr.org:8080/pipermail/stringtemplate-interest/2006-December/00
0857.html
  also
http://www.antlr.org:8080/pipermail/stringtemplate-interest/2006-December/00
0847.html under interesting thing #2

  Cheers
      Caleb
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org:8080/pipermail/stringtemplate-interest/attachments/20061211/bd829f38/attachment.html 

From kroepke at classdump.org  Mon Dec 11 15:35:20 2006
From: kroepke at classdump.org (Kay Roepke)
Date: Tue, 12 Dec 2006 00:35:20 +0100
Subject: [stringtemplate-interest] support for set
In-Reply-To: <457DC871.9010503@n4te.com>
References: <PMEOJKDLMMHOHNEAMPBGIEFFCAAA.jjsnyders@rcn.com>
	<441E03A8-4397-4F51-8818-2988077C02ED@cs.usfca.edu>
	<457DC871.9010503@n4te.com>
Message-ID: <CCFEF82B-8471-4811-B1FA-EDD12382C5AF@classdump.org>


On 11. Dec 2006, at 22:06 , Nate wrote:

> I am building a web application. Users have a list of "capabilities",
> each of which is just a String. URIs can be tagged with a  
> "capability".
> When a user tries to view a URI that is tagged, they are asked to  
> login.
> If they are logged in and don't have the capability, they are shown an
> error page.

Having done (and doing) my fair share of big webapps, I thought I  
chime in
late :)
At my current work, we have pretty much the system you describe. Our  
template
solution is much like ST, but has tuned for our specific needs, e.g.  
we have
notation for URL, JavaScript, HTML escaping etc. We do not allow  
method/function
calls in templates, although sometimes I feel limited by that. There  
you have it,
I said it. ;)

> [...]
>
> There are many capabilities and the control is so fine that I imagine
> the templates are going to have to check if they should show a link to
> this part of the site or not. If this violates seperation, how can  
> I get
> around that? Assuming I will have to do these checks in the  
> templates, I
> could stuff each capability into the template so I could check for it.
> If ST supported sets I could stuff the set into the template and check
> that way.

What we do is to pass in the values for each capability. This  
sometimes gets
ugly when you are reorganizing capabilites, say because the  
requirements change,
but all told the capabilities system is a pretty stable, I'd say.
For mutual permissions (think of privacy control, who gets to see  
what info), we
have programmatically defined groups (like private data, business data,
message permissions, etc.) which allow much easier handling in the  
templates.
If you structure your templates well enough, you can hide those  
checks for "user.delete"
in subtemplates (or templates included or applied or whatever the  
parlance is).
Instead of doing the check for "user.delete" where the button appears  
just do the check in
the deleteButton() template.
This of course leads to bigger controllers in the MVC pattern and  
that can make for
immensely annoying coding, but is very clean and obvious.
I've once gone the other route, too, where you can call back from the  
templates into
controller code (or effectively even into model code, if the  
formatter didn't mask those
methods - shudder). While you can write immensely powerful  
applications in a very small
amount of code and time, it's hard to maintain. It also places a  
considerable burden of
responsibility on the programmers not introduce side-effects (on  
purpose, or inadvertently).

I'm still torn between both approaches, both have their pros and  
cons. For the current
system we had to write some tools that check for "orphaned" template  
attributes after
a phase of heavy refactoring, which wasn't fun to debug.
If you pass in the attributes manually, that sometimes leads to  
entangled code, especially
if you collect the attributes in one place, as we do right now. I'd  
much rather pass around
the template, but unfortunately this isn't Java and ST, but rather  
Perl and something homegrown...
The other approach, call it the E.T. approach (homephoning  
templates), can get really nasty
if there are side-effects. In most template systems the order of  
evaluation isn't defined, so
side-effects can do their nasty thing to you.

My advice: Think hard about you organize your templates and also try  
to group capabilities in
sensible "functional" groups. You can get very far that way.

cheers,

-k
-- 
Kay R?pke
http://classdump.org/





From dongdong.xu at wuerth-phoenix.com  Tue Dec 19 22:10:47 2006
From: dongdong.xu at wuerth-phoenix.com (Dongdong Xu)
Date: Wed, 20 Dec 2006 14:10:47 +0800
Subject: [stringtemplate-interest] setRefreshInterval() in C# stringtemplate
	3.0.1
Message-ID: <4588D3E7.9070500@wuerth-phoenix.com>

Hi, dear all

In the document I found we can use setRefreshInterval(0) in developing.
But I can't find this method in C# stringtemplate 3.0.1.

Is there any other solutions ?

thanks,
dongdong


From adamb at videx.com  Thu Dec 21 13:54:42 2006
From: adamb at videx.com (Adam Bennett)
Date: Thu, 21 Dec 2006 13:54:42 -0800
Subject: [stringtemplate-interest] =?iso-8859-1?q?Does_StringTemplate_supp?=
	=?iso-8859-1?q?ort_components=3F?=
Message-ID: <20061221215442.bd202878@mail3.videx.com>

Can I use StringTemplate to create reusable components as can be done with JSP tags?  
   
For example, let's say I want a component that shows a user summary box like you would see beside each users post on an online forum.  The component would use a StringTemplate to generate markup to show the users alias, image, and number of posts.  This formUserBox template would take these values as parameters but first I need some Java code to look at the session and pull the correct values out of the database.  
   
So here I have a parent template that invokes the forumUserBox template:  
   
<html>  
<body>
...
$forumUserBox()$
...
</body>
</html>  
   
But forumUserBox needs attributes that have not been set.  The code that invokes the parent template should not have to worry about providing all the necessary parameters - (separation of concerns).
   
Custom JSP tags allow me to do this but they are inside out.  Is my desire "unclean"?  It does not seem so to me because the view and model are still clearly separated by using a parameterized StringTemplate to generate the actual markup.  What I need is some sort of processing hook.  Before the parent template invokes the forumUserBox template I need it to call some java code so I can provide the necessary attributes.  
   
Thanks much.  
- Adam B

From misc at n4te.com  Thu Dec 21 14:12:38 2006
From: misc at n4te.com (Nate)
Date: Thu, 21 Dec 2006 14:12:38 -0800
Subject: [stringtemplate-interest] Does StringTemplate support
	components?
In-Reply-To: <20061221215442.bd202878@mail3.videx.com>
References: <20061221215442.bd202878@mail3.videx.com>
Message-ID: <458B06D6.9070508@n4te.com>

Why not give the parent template an attribute "forumUserBox" that is the 
configured StringTemplate it needs to use. Then I believe 
$forumUserBox()$ executes the configured template. If not you could do a 
toString on the template and set "forumUserBox" to that. Then use 
$forumUserBox$ in your parent template.

-Nate


Adam Bennett wrote:
> Can I use StringTemplate to create reusable components as can be done with JSP tags?  
>    
> For example, let's say I want a component that shows a user summary box like you would see beside each users post on an online forum.  The component would use a StringTemplate to generate markup to show the users alias, image, and number of posts.  This formUserBox template would take these values as parameters but first I need some Java code to look at the session and pull the correct values out of the database.  
>    
> So here I have a parent template that invokes the forumUserBox template:  
>    
> <html>  
> <body>
> ...
> $forumUserBox()$
> ...
> </body>
> </html>  
>    
> But forumUserBox needs attributes that have not been set.  The code that invokes the parent template should not have to worry about providing all the necessary parameters - (separation of concerns).
>    
> Custom JSP tags allow me to do this but they are inside out.  Is my desire "unclean"?  It does not seem so to me because the view and model are still clearly separated by using a parameterized StringTemplate to generate the actual markup.  What I need is some sort of processing hook.  Before the parent template invokes the forumUserBox template I need it to call some java code so I can provide the necessary attributes.  
>    
> Thanks much.  
> - Adam B
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org:8080/mailman/listinfo/stringtemplate-interest
>   


From parrt at cs.usfca.edu  Thu Dec 21 14:44:28 2006
From: parrt at cs.usfca.edu (Terence Parr)
Date: Thu, 21 Dec 2006 14:44:28 -0800
Subject: [stringtemplate-interest] Does StringTemplate support
	components?
In-Reply-To: <458B06D6.9070508@n4te.com>
References: <20061221215442.bd202878@mail3.videx.com>
	<458B06D6.9070508@n4te.com>
Message-ID: <496EF660-D81F-4331-854A-160FCE4A3F71@cs.usfca.edu>


On Dec 21, 2006, at 2:12 PM, Nate wrote:

> Why not give the parent template an attribute "forumUserBox" that  
> is the
> configured StringTemplate it needs to use. Then I believe
> $forumUserBox()$ executes the configured template.

just $forumUserBox$ actually.

The best way is to create the structured tree of nested STs with the  
controller, pulling from the model.  That is how I build ST for  
generating complicated source files.  With web pages, same thing  
applies.  For example, page.st refers to $body$ which is created in a  
body() method or something that also sets parameters.  If body needs  
a value like title then it can just refer to it if it is in an  
enclosing template.

Ter


From adamb at videx.com  Thu Dec 21 15:55:19 2006
From: adamb at videx.com (Adam Bennett)
Date: Thu, 21 Dec 2006 15:55:19 -0800
Subject: [stringtemplate-interest]
	=?iso-8859-1?q?Does_StringTemplate_supp?=
	=?iso-8859-1?q?ort_components=3F?=
In-Reply-To: 458B06D6.9070508@n4te.com
Message-ID: <20061221235519.03864141@mail3.videx.com>

Please be aware that I have zero practical experience with StringTemplate.  I am just researching its viability for our web application refactoring project.  From the documentation I gather that StringTemplate readily supports templates including other templates ("Template references" is the term used).  That is not the problem.  The problem is that I want the referenced template to be completely independent.  This means that I need a hook to supply the referenced template with the parameters it needs to render.      _____  

  From: Nate [mailto:misc at n4te.com]
To: Adam Bennett [mailto:adamb at videx.com]
Cc: stringtemplate-interest at antlr.org
Sent: Thu, 21 Dec 2006 14:12:38 -0800
Subject: Re: [stringtemplate-interest] Does StringTemplate support components?

Why not give the parent template an attribute "forumUserBox" that is the 
configured StringTemplate it needs to use. Then I believe 
$forumUserBox()$ executes the configured template. If not you could do a 
toString on the template and set "forumUserBox" to that. Then use 
$forumUserBox$ in your parent template.

-Nate


Adam Bennett wrote:
> Can I use StringTemplate to create reusable components as can be done with JSP tags? 
> 
> For example, let's say I want a component that shows a user summary box like you would see beside each users post on an online forum. The component would use a StringTemplate to generate markup to show the users alias, image, and number of posts. This formUserBox template would take these values as parameters but first I need some Java code to look at the session and pull the correct values out of the database. 
> 
> So here I have a parent template that invokes the forumUserBox template: 
> 
> <html> 
> <body>
> ...
> $forumUserBox()$
> ...
> </body>
> </html> 
> 
> But forumUserBox needs attributes that have not been set. The code that invokes the parent template should not have to worry about providing all the necessary parameters - (separation of concerns).
> 
> Custom JSP tags allow me to do this but they are inside out. Is my desire "unclean"? It does not seem so to me because the view and model are still clearly separated by using a parameterized StringTemplate to generate the actual markup. What I need is some sort of processing hook. Before the parent template invokes the forumUserBox template I need it to call some java code so I can provide the necessary attributes. 
> 
> Thanks much. 
> - Adam B
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org:8080/mailman/listinfo/stringtemplate-interest
> 

      
   
 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org:8080/pipermail/stringtemplate-interest/attachments/20061221/e53300af/attachment.html 

From caleb.lyness at ezswitch.net  Fri Dec 22 04:25:26 2006
From: caleb.lyness at ezswitch.net (Caleb Lyness)
Date: Fri, 22 Dec 2006 13:25:26 +0100
Subject: [stringtemplate-interest] Bug in group map parsing??
Message-ID: <458BCEB6.8040208@ezswitch.net>

Hello all,

Can I use my wiki login to login on Jira and reports bugs?
And here are the bugs I have come across:

1) The string "default" cannot be used as the string in the map
2) If default is the only element in the map, parsing fails:
*
Group definition:*

group testGroup;
map ::= [
     default: "default"
]

t1() ::= "$map.(1)$"

fails as follows:

template group parse error
line 3:6: expecting STRING, found 'default'
    at antlr.Parser.match(Parser.java:211)
    at
org.antlr.stringtemplate.language.GroupParser.keyValuePair(GroupParser.java:529)
    at
org.antlr.stringtemplate.language.GroupParser.map(GroupParser.java:474)
    at
org.antlr.stringtemplate.language.GroupParser.mapdef(GroupParser.java:369)
    at
org.antlr.stringtemplate.language.GroupParser.group(GroupParser.java:189)
    at
org.antlr.stringtemplate.StringTemplateGroup.parseGroup(StringTemplateGroup.java:769)
    at
org.antlr.stringtemplate.StringTemplateGroup.<init>(StringTemplateGroup.java:271)
    at
org.antlr.stringtemplate.StringTemplateGroup.<init>(StringTemplateGroup.java:249)
    at t.main(t.java:22)

*Group definition:*

group testGroup;
map ::= [
     "str": "value",
     default: "default"
]

t1() ::= "$map.(1)$"

fails as follows:

template group parse error
line 4:15: unexpected token: default
    at
org.antlr.stringtemplate.language.GroupParser.keyValue(GroupParser.java:580)
    at
org.antlr.stringtemplate.language.GroupParser.map(GroupParser.java:495)
    at
org.antlr.stringtemplate.language.GroupParser.mapdef(GroupParser.java:369)
    at
org.antlr.stringtemplate.language.GroupParser.group(GroupParser.java:189)
    at
org.antlr.stringtemplate.StringTemplateGroup.parseGroup(StringTemplateGroup.java:769)
    at
org.antlr.stringtemplate.StringTemplateGroup.<init>(StringTemplateGroup.java:271)
    at
org.antlr.stringtemplate.StringTemplateGroup.<init>(StringTemplateGroup.java:249)
    at t.main(t.java:22)

*This group definition works:*

group testGroup;
map ::= [
     "str": "value",
     default: "defaul"
]

t1() ::= "$map.(1)$"

*Code to reproduce results:*

        String templateGroupDef = "group testGroup; \n"
           + "map ::= [\n"
           + "     \"str\": \"value\",\n"
           + "     default: \"defaul\"\n"           
           + "]\n\n"
          
           + "t1() ::= \"$map.(1)$\"\n";       
   
        StringTemplateGroup group = new StringTemplateGroup(
                new StringReader(templateGroupDef),
                DefaultTemplateLexer.class);
       
        System.out.println(templateGroupDef);
       
        StringTemplate tmpl = group.getInstanceOf("t1");
        System.out.println(tmpl.toString());

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org:8080/pipermail/stringtemplate-interest/attachments/20061222/5cb813ab/attachment-0001.html 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/x-pkcs7-signature
Size: 3269 bytes
Desc: S/MIME Cryptographic Signature
Url : http://www.antlr.org:8080/pipermail/stringtemplate-interest/attachments/20061222/5cb813ab/attachment-0001.bin 

From misc at n4te.com  Fri Dec 22 15:18:05 2006
From: misc at n4te.com (Nate)
Date: Fri, 22 Dec 2006 15:18:05 -0800
Subject: [stringtemplate-interest] Bug in group map parsing??
In-Reply-To: <458BCEB6.8040208@ezswitch.net>
References: <458BCEB6.8040208@ezswitch.net>
Message-ID: <458C67AD.3050002@n4te.com>

"default" is a reserved words for maps I believe. I ran into this 
problem a couple weeks ago. IMO, the parser should know what context 
"default" is being used in and allow it if not in a map.

-Nate


Caleb Lyness wrote:
> Hello all,
>
> Can I use my wiki login to login on Jira and reports bugs?
> And here are the bugs I have come across:
>
> 1) The string "default" cannot be used as the string in the map
> 2) If default is the only element in the map, parsing fails:
> *
> Group definition:*
>
> group testGroup;
> map ::= [
>      default: "default"
> ]
>
> t1() ::= "$map.(1)$"
>
> fails as follows:
>
> template group parse error
> line 3:6: expecting STRING, found 'default'
>     at antlr.Parser.match(Parser.java:211)
>     at 
> org.antlr.stringtemplate.language.GroupParser.keyValuePair(GroupParser.java:529)
>     at 
> org.antlr.stringtemplate.language.GroupParser.map(GroupParser.java:474)
>     at 
> org.antlr.stringtemplate.language.GroupParser.mapdef(GroupParser.java:369)
>     at 
> org.antlr.stringtemplate.language.GroupParser.group(GroupParser.java:189)
>     at 
> org.antlr.stringtemplate.StringTemplateGroup.parseGroup(StringTemplateGroup.java:769)
>     at 
> org.antlr.stringtemplate.StringTemplateGroup.<init>(StringTemplateGroup.java:271)
>     at 
> org.antlr.stringtemplate.StringTemplateGroup.<init>(StringTemplateGroup.java:249)
>     at t.main(t.java:22)
>
> *Group definition:*
>
> group testGroup;
> map ::= [
>      "str": "value",
>      default: "default"
> ]
>
> t1() ::= "$map.(1)$"
>
> fails as follows:
>
> template group parse error
> line 4:15: unexpected token: default
>     at 
> org.antlr.stringtemplate.language.GroupParser.keyValue(GroupParser.java:580)
>     at 
> org.antlr.stringtemplate.language.GroupParser.map(GroupParser.java:495)
>     at 
> org.antlr.stringtemplate.language.GroupParser.mapdef(GroupParser.java:369)
>     at 
> org.antlr.stringtemplate.language.GroupParser.group(GroupParser.java:189)
>     at 
> org.antlr.stringtemplate.StringTemplateGroup.parseGroup(StringTemplateGroup.java:769)
>     at 
> org.antlr.stringtemplate.StringTemplateGroup.<init>(StringTemplateGroup.java:271)
>     at 
> org.antlr.stringtemplate.StringTemplateGroup.<init>(StringTemplateGroup.java:249)
>     at t.main(t.java:22)
>
> *This group definition works:*
>
> group testGroup;
> map ::= [
>      "str": "value",
>      default: "defaul"
> ]
>
> t1() ::= "$map.(1)$"
>
> *Code to reproduce results:*
>
>         String templateGroupDef = "group testGroup; \n"
>            + "map ::= [\n"
>            + "     \"str\": \"value\",\n"
>            + "     default: \"defaul\"\n"           
>            + "]\n\n"
>           
>            + "t1() ::= \"$map.(1)$\"\n";       
>    
>         StringTemplateGroup group = new StringTemplateGroup(
>                 new StringReader(templateGroupDef),
>                 DefaultTemplateLexer.class);
>        
>         System.out.println(templateGroupDef);
>        
>         StringTemplate tmpl = group.getInstanceOf("t1");
>         System.out.println(tmpl.toString());
>
> ------------------------------------------------------------------------
>
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org:8080/mailman/listinfo/stringtemplate-interest
>   


From parrt at cs.usfca.edu  Fri Dec 22 16:34:15 2006
From: parrt at cs.usfca.edu (Terence Parr)
Date: Fri, 22 Dec 2006 16:34:15 -0800
Subject: [stringtemplate-interest] Bug in group map parsing??
In-Reply-To: <458C67AD.3050002@n4te.com>
References: <458BCEB6.8040208@ezswitch.net> <458C67AD.3050002@n4te.com>
Message-ID: <DBA39AD0-714A-4D1A-836C-C7C0B8C9B03C@cs.usfca.edu>


On Dec 22, 2006, at 3:18 PM, Nate wrote:

> "default" is a reserved words for maps I believe. I ran into this
> problem a couple weeks ago. IMO, the parser should know what context
> "default" is being used in and allow it if not in a map.

Hi Guys. :) So we should allow keywords as variables? ;)

I agree though that in this case it would be very clear.

Ter


From parrt at cs.usfca.edu  Fri Dec 22 16:35:10 2006
From: parrt at cs.usfca.edu (Terence Parr)
Date: Fri, 22 Dec 2006 16:35:10 -0800
Subject: [stringtemplate-interest] Bug in group map parsing??
In-Reply-To: <458BCEB6.8040208@ezswitch.net>
References: <458BCEB6.8040208@ezswitch.net>
Message-ID: <8D3A7649-28F6-4757-A3BC-26C7C44B9C94@cs.usfca.edu>


On Dec 22, 2006, at 4:25 AM, Caleb Lyness wrote:

> Hello all,
>
> Can I use my wiki login to login on Jira and reports bugs?
> And here are the bugs I have come across:
>
> 1) The string "default" cannot be used as the string in the map
> 2) If default is the only element in the map, parsing fails:
>
> Group definition:
>
> group testGroup;
> map ::= [
>      default: "default"
> ]
>

Oh, slightly different.  This is same as saying default=default.   
Hmm...yeah, I should make context aware.

Ter


From adamb at videx.com  Fri Dec 22 23:49:06 2006
From: adamb at videx.com (Adam Bennett)
Date: Fri, 22 Dec 2006 23:49:06 -0800
Subject: [stringtemplate-interest]
	=?iso-8859-1?q?Does_StringTemplate_supp?=
	=?iso-8859-1?q?ort_components=3F?=
Message-ID: <20061223074906.118f79a4@mail3.videx.com>

 
I really appreciate all the suggestions but I haven't heard the answer yet.  I'll try to reformulate my the question:  
   
Question 1) From my reading, it appears that StringTempate supports calling other templates as if it were a subroutine, right?  I infer this from the "Expressions" document where it is talking about "Template References":  
   
"the enclosing page template would automatically create an instance of the referenced template and insert it"  
   
What I am focusing on here is "automatically create an instance".  Beautiful.  Less coding.  
   
Question 2) The documentation goes on to describe 2 ways of getting the necessary attributes to the subroutine template.  
1) "Accessing Attributes Of Enclosing Template"  
2) "Passing Parameters To Another Template"  
   
Are there any other ways?  You see, what I am looking for is a way to help the web designers work independently of the programmers.  Here's a scenario to describe what I mean.  Let's say that our web application handles the URL "/OurWebApp/account/summary.page" with Java code like this:  
   
StringTemplate st = group.GetInstanceOf("account/summary.st");  
... do some database queries  
st.setAttribute("foo", queryResult1);  
  
st.setAttribute("bar", queryResult2);  
... render the template and send it to the client browser  
   
The above code is maintained by the programmers.  The web designers can tweak the template text to their hearts content.  Initially it looks like:  
<html>  
<body>
...  
$foo$  
$bar$  
...
</body>
</html>    
   
But wait!  The web designer is changes her [artistic] mind and decides to take the summary page the next level.  She wants to show the users account balance so she makes a call to the accountBalanceBox template.
  
  
<html>  
<body>
...  
$foo$  
$bar$  
$accountBalanceBox()$  
...
</body>
</html>   
   
But accountBalanceBox needs a $dollars$ attribute.  This can only be determined by getting the user ID from the HttpSession and then querying the database for it.  But that's the job of the programmer.  If we have support for true componentization then the Java code that handles summary.page should NOT need to set the $dollars$ attribute.  The general principle here is separation of concerns (http://en.wikipedia.org/wiki/Separation_of_concerns).  If accountBalanceBox is made to be a logical component, which includes both a template as well as some Java code, it gives web designers full freedom to mix and match the components that have been provided by the programmers.  
   
So I think the mechanism I am after is some sort of hook.  As StringTemplate encounters accountBalanceBox it calls my Java function which gives me a chance to provide the necessary attributes.  Such a hook might look like this:  
   
void templatePreprocess(StringTemplate st, StringTemplateContext context)  
{  
  if (st.getName().equals("accountBalanceBox"))  
  {  
    HttpSession session = context.getAttribute("session");  
    int userID = session.getAttirbute("userID");  
    st.setAttribute("dollars", database.getBalance(userID));  
    return;  
  }  
  ...  
}  
   
Does such a mechanism exist?
  
   
Thanks much.  
- Adam  
   
       
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org:8080/pipermail/stringtemplate-interest/attachments/20061222/cf166620/attachment.html 

From caleb.lyness at ezswitch.net  Sat Dec 23 07:32:18 2006
From: caleb.lyness at ezswitch.net (Caleb Lyness)
Date: Sat, 23 Dec 2006 16:32:18 +0100
Subject: [stringtemplate-interest] Bug in group map parsing??
In-Reply-To: <DBA39AD0-714A-4D1A-836C-C7C0B8C9B03C@cs.usfca.edu>
References: <458BCEB6.8040208@ezswitch.net> <458C67AD.3050002@n4te.com>
	<DBA39AD0-714A-4D1A-836C-C7C0B8C9B03C@cs.usfca.edu>
Message-ID: <458D4C02.6060901@ezswitch.net>


>   
>> "default" is a reserved words for maps I believe. I ran into this
>> problem a couple weeks ago. IMO, the parser should know what context
>> "default" is being used in and allow it if not in a map.
>>     
>
> Hi Guys. :) So we should allow keywords as variables? ;)
>   
No not at all.

Look at the map definition as given on the wiki:

map :   '['
            keyValuePair (',' keyValuePair)*
            ( ',' "default" ':' keyValue )?
        ']'
    ;

keyValuePair
    :   STRING ':' keyValue 
    ;

*keyValue
    :   BIGSTRING
    |   STRING
    |   "key"
    |       
    ;*

>From this is quite clear that a key value can be either a string, a big
string or the built in
id of key or nothing at all (empty string). If I put something in quotes
I expect it to be a
string, if I put it in double angle brackets I expect it to be a
bigstring. If my string contains
the word default it is definitely not a keyword - its a string. default
is not an uncommon
word to use as a string literal.


back onto the other problem of the default alone:
The above definition does not allow it. Perhaps a modification as follows:

map :   '[' mapPairs ']'
    ;

mapPairs 
    : keyValuePair (',' keyValuePair)* ( ',' defaultValuePair )?
    | defaultValuePair 


defaultValuePair
    : "default" ':' keyValue
    ;
 
keyValuePair
    :   STRING ':' keyValue 
    ;



-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org:8080/pipermail/stringtemplate-interest/attachments/20061223/68aa113e/attachment-0001.html 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/x-pkcs7-signature
Size: 3269 bytes
Desc: S/MIME Cryptographic Signature
Url : http://www.antlr.org:8080/pipermail/stringtemplate-interest/attachments/20061223/68aa113e/attachment-0001.bin 

From jjsnyders at rcn.com  Sat Dec 23 20:54:42 2006
From: jjsnyders at rcn.com (John Snyders)
Date: Sat, 23 Dec 2006 23:54:42 -0500
Subject: [stringtemplate-interest] Does StringTemplate support
	components?
In-Reply-To: <20061223074906.118f79a4@mail3.videx.com>
Message-ID: <PMEOJKDLMMHOHNEAMPBGAEGOCAAA.jjsnyders@rcn.com>

I'll try to answer.
  -----Original Message-----
  From: stringtemplate-interest-bounces at antlr.org
[mailto:stringtemplate-interest-bounces at antlr.org]On Behalf Of Adam Bennett
  Sent: Saturday, December 23, 2006 2:49 AM
  To: stringtemplate-interest at antlr.org
  Subject: Re: [stringtemplate-interest]Does StringTemplate support
components?


  I really appreciate all the suggestions but I haven't heard the answer
yet.  I'll try to reformulate my the question:

  Question 1) From my reading, it appears that StringTempate supports
calling other templates as if it were a subroutine, right?
  [John Snyders] Correct
    I infer this from the "Expressions" document where it is talking about
"Template References":

  "the enclosing page template would automatically create an instance of the
referenced template and insert it"

  What I am focusing on here is "automatically create an instance".
Beautiful.  Less coding.

  Question 2) The documentation goes on to describe 2 ways of getting the
necessary attributes to the subroutine template.
  1) "Accessing Attributes Of Enclosing Template"
  [John Snyders] In a group file the templates must declare all the
attributes they use so this really applies to the non-group (do these have a
name?) .st templates. Essentially the attributes defined by the controller
are globally available to all templates (unless hidden by an argument
explicitly passed to the template in the call).
  2) "Passing Parameters To Another Template"
  [John Snyders] This can be done with templates in .st or .stg files

  Are there any other ways?
  [John Snyders] Not really
   You see, what I am looking for is a way to help the web designers work
independently of the programmers.  Here's a scenario to describe what I
mean.  Let's say that our web application handles the URL
"/OurWebApp/account/summary.page" with Java code like this:

  StringTemplate st = group.GetInstanceOf("account/summary.st");
  ... do some database queries
  st.setAttribute("foo", queryResult1);
  st.setAttribute("bar", queryResult2);
  ... render the template and send it to the client browser

  The above code is maintained by the programmers.  The web designers can
tweak the template text to their hearts content.  Initially it looks like:
  <html>
  <body>
  ...
  $foo$
  $bar$
  ...
  </body>
  </html>

  But wait!  The web designer is changes her [artistic] mind and decides to
take the summary page the next level.  She wants to show the users account
balance so she makes a call to the accountBalanceBox template.

  <html>
  <body>
  ...
  $foo$
  $bar$
  $accountBalanceBox()$
  ...
  </body>
  </html>
  [John Snyders]  But this is not a presentation change! The web designer is
responsible for presentation. The content of the page (the foo and bar and
account balance) are the responsibility of the product owner which may be
the customer and it is up to the web designer and programmer together to
implement. In other words this is a change to the data model available to
the page(s).


  But accountBalanceBox needs a $dollars$ attribute.  This can only be
determined by getting the user ID from the HttpSession and then querying the
database for it.  But that's the job of the programmer.  If we have support
for true componentization then the Java code that handles summary.page
should NOT need to set the $dollars$ attribute.  The general principle here
is separation of concerns
(http://en.wikipedia.org/wiki/Separation_of_concerns).  If accountBalanceBox
is made to be a logical component, which includes both a template as well as
some Java code, it gives web designers full freedom to mix and match the
components that have been provided by the programmers.
  [John Snyders] but from the HTML/HTTP point of view summary.page is
monolithic and this is what ST must generate. You can have one template for
the overall page and another seperate template for the accountBalanceBox.
You can have component code for getting foo and bar and a seperate component
for getting the account balance but there is just one HTTP request for the
summary page and one HTML reply that includes both information.

  I think one of the suggestions was to have the controller call the account
balance component which would invoke its own ST template with its own model
and return a string. That string would then be passed as an attribute to the
overall page template. I don't like doing it this way because I think that
the page should be generated with one call to string template.

  My feeling is that the controller needs to know about all the model data
that a given page needs. It may not know the details of what is in the model
but it knows which components to call to get it. So it calls one component
to get the foo and bar then calls another to get the account balance. These
components contribute to the model in the form of attributes. I have been
using ST for generating the presentation of a web app and this is more or
less how I do it. I started with the non-group templates but quickly moved
to the group format.

  A concern may be a large number of arguments to pass around. There are 2
things that can help here. One is that when calling a template you can use
... to have attributes pass through to called templates. The other is that
attributes can reference arbitrarily deeply nested object structure. So you
could have your top level template with a single argument called model and
have that object (or Map) contain all the different parts of the model as
children
  Ex:
  $model.foo$
  $model.bar$
  $accountBalanceBox(balance=model.balance,...)$

  Some other options (I have not tried these yet) to reduce interaction
between components:

  If using AJAX the request for the foo and bar data may be totally
different from the accountBalanceBox. With AJAX much of the controller moves
to the client. In the extreme the dynamic part of the web app is just
serving data and there is no need for ST or any template engine.

  If you don't like the controler knowing what parts of the model is needed
for a given page that information could be configured in an external data
file (like a struts tiles def) which the controler reads. Then if the
controler knows what to call to get model parts a, b, and c the page
designer can decide that the account summary page needs a and b and the
orders page needs b and c.

  So I think the mechanism I am after is some sort of hook.  As
StringTemplate encounters accountBalanceBox it calls my Java function which
gives me a chance to provide the necessary attributes.  Such a hook might
look like this:

  void templatePreprocess(StringTemplate st, StringTemplateContext context)
  {
    if (st.getName().equals("accountBalanceBox"))
    {
      HttpSession session = context.getAttribute("session");
      int userID = session.getAttirbute("userID");
      st.setAttribute("dollars", database.getBalance(userID));
      return;
    }
    ...
  }

  Does such a mechanism exist?
  [John Snyders] No,  All model data must be given to the template before it
is invoked with toString (or write)

  Section 7.1 of Enforcing Strict ModelView Separation in Template Engines
describes why pulling data from the template breaks separation.

  Once you have more than one hook being called there can be order dependent
interactions that can cause problems. For ages hook1 is called before hook2
and all is well. Then one day the page designer moves things around and now
hook2 is called before hook1 and the code breaks. Perhaps you are now trying
to get something out of the session before it is there. In many case there
are no order dependencies but in general it is not possible for the
developer to defensively code so that the code can be called in any order.


  Thanks much.
  - Adam

  I have been using ST for a few months now for generating HTML. It takes
some getting used to but I like it better than what I had done in the past
which includes JSP and JSP/Struts.

  -John
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org:8080/pipermail/stringtemplate-interest/attachments/20061223/709157c8/attachment.html 

From rob.hill at blueyonder.co.uk  Sun Dec 24 04:38:57 2006
From: rob.hill at blueyonder.co.uk (Rob Hill)
Date: Sun, 24 Dec 2006 12:38:57 -0000
Subject: [stringtemplate-interest] Pagan Festivals n stuff.
Message-ID: <000001c72758$7b1d94d0$7158be70$@hill@blueyonder.co.uk>

M-E-R-R-Y  C-H-R-I-S-T-M-A-S!

--------------------------------------

 

Thanks for all your help over the past year!

 

See y'all in the new year.

 

/2ob

 

 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org:8080/pipermail/stringtemplate-interest/attachments/20061224/dfa0dd6b/attachment.html 

From airdrummer at wheel.org  Mon Dec 25 05:11:08 2006
From: airdrummer at wheel.org (tom wible)
Date: Mon, 25 Dec 2006 08:11:08 -0500
Subject: [stringtemplate-interest] stringtemplate-interest Digest, Vol 21,
	Issue 8
In-Reply-To: <mailman.4.1165867202.25394.stringtemplate-interest@antlr.org>
References: <mailman.4.1165867202.25394.stringtemplate-interest@antlr.org>
Message-ID: <458FCDEC.5030509@wheel.org>

 > So,  We could do the following $name; format="%50s"$, right? then

isn't that what i suggested some time ago?-)

From misc at n4te.com  Wed Dec 27 08:23:17 2006
From: misc at n4te.com (Nate)
Date: Wed, 27 Dec 2006 08:23:17 -0800
Subject: [stringtemplate-interest] Does StringTemplate support
	components?
In-Reply-To: <20061223074906.118f79a4@mail3.videx.com>
References: <20061223074906.118f79a4@mail3.videx.com>
Message-ID: <45929DF5.8000306@n4te.com>

You can subclass StringTemplateGroup and override 
loadTemplateFromBeneathRootDirOrCLASSPATH to intercept template lookups. 
You could switch on the name and configure different templates a certain 
way. This way the templates are configured by Java code even if included 
through other templates. I think this is what you were getting at. I'm 
not sure this is better than the monolithic approach, but it is possible.

-Nate


Adam Bennett wrote:
> I really appreciate all the suggestions but I haven't heard the answer 
> yet.  I'll try to reformulate my the question:
>  
> Question 1) From my reading, it appears that StringTempate supports 
> calling other templates as if it were a subroutine, right?  I infer 
> this from the "Expressions" document where it is talking about 
> "Template References":
>  
> "the enclosing page template would automatically create an instance of 
> the referenced template and insert it"
>  
> What I am focusing on here is "automatically create an instance".  
> Beautiful.  Less coding.
>  
> Question 2) The documentation goes on to describe 2 ways of getting 
> the necessary attributes to the subroutine template.
> 1) "Accessing Attributes Of Enclosing Template"
> 2) "Passing Parameters To Another Template"
>  
> Are there any other ways?  You see, what I am looking for is a way to 
> help the web designers work independently of the programmers.  Here's 
> a scenario to describe what I mean.  Let's say that our web 
> application handles the URL "/OurWebApp/account/summary.page" with 
> Java code like this:
>  
> StringTemplate st = group.GetInstanceOf("account/summary.st");
> ... do some database queries
> st.setAttribute("foo", queryResult1);
> st.setAttribute("bar", queryResult2);
> ... render the template and send it to the client browser
>  
> The above code is maintained by the programmers.  The web designers 
> can tweak the template text to their hearts content.  Initially it 
> looks like:
> <html> 
> <body>
> ...
> $foo$
> $bar$
> ...
> </body>
> </html> 
>  
> But wait!  The web designer is changes her [artistic] mind and decides 
> to take the summary page the next level.  She wants to show the users 
> account balance so she makes a call to the accountBalanceBox template.
> <html> 
> <body>
> ...
> $foo$
> $bar$
> $accountBalanceBox()$
> ...
> </body>
> </html> 
>  
> But accountBalanceBox needs a $dollars$ attribute.  This can only be 
> determined by getting the user ID from the HttpSession and then 
> querying the database for it.  But that's the job of the programmer.  
> If we have support for true componentization then the Java code that 
> handles summary.page should NOT need to set the $dollars$ attribute.  
> The general principle here is separation of concerns 
> (http://en.wikipedia.org/wiki/Separation_of_concerns).  If 
> accountBalanceBox is made to be a logical component, which includes 
> both a template as well as some Java code, it gives web designers full 
> freedom to mix and match the components that have been provided by the 
> programmers.
>  
> So I think the mechanism I am after is some sort of hook.  As 
> StringTemplate encounters accountBalanceBox it calls my Java function 
> which gives me a chance to provide the necessary attributes.  Such a 
> hook might look like this:
>  
> void templatePreprocess(StringTemplate st, StringTemplateContext context)
> {
>   if (st.getName().equals("accountBalanceBox"))
>   {
>     HttpSession session = context.getAttribute("session");
>     int userID = session.getAttirbute("userID");
>     st.setAttribute("dollars", database.getBalance(userID));
>     return;
>   }
>   ...
> }
>  
> Does such a mechanism exist?
>  
> Thanks much.
> - Adam
>  
>  
> ------------------------------------------------------------------------
>
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org:8080/mailman/listinfo/stringtemplate-interest
>   


From adamb at videx.com  Wed Dec 27 10:09:41 2006
From: adamb at videx.com (Adam Bennett)
Date: Wed, 27 Dec 2006 10:09:41 -0800
Subject: [stringtemplate-interest]
	=?iso-8859-1?q?Does_StringTemplate_supp?=
	=?iso-8859-1?q?ort_components=3F?=
In-Reply-To: 45929DF5.8000306@n4te.com
Message-ID: <20061227180941.3fdf7b7d@mail3.videx.com>

Interesting.  Although I am beginning to doubt my componentization approach I'll file this one away for when I finally make up my mind.  Thanks, Nate.
      _____  

  From: Nate [mailto:misc at n4te.com]
To: Adam Bennett [mailto:adamb at videx.com]
Cc: stringtemplate-interest at antlr.org
Sent: Wed, 27 Dec 2006 08:23:17 -0800
Subject: Re: [stringtemplate-interest] Does StringTemplate support components?

You can subclass StringTemplateGroup and override 
loadTemplateFromBeneathRootDirOrCLASSPATH to intercept template lookups. 
You could switch on the name and configure different templates a certain 
way. This way the templates are configured by Java code even if included 
through other templates. I think this is what you were getting at. I'm 
not sure this is better than the monolithic approach, but it is possible.

-Nate


Adam Bennett wrote:
> I really appreciate all the suggestions but I haven't heard the answer 
> yet. I'll try to reformulate my the question:
> 
> Question 1) From my reading, it appears that StringTempate supports 
> calling other templates as if it were a subroutine, right? I infer 
> this from the "Expressions" document where it is talking about 
> "Template References":
> 
> "the enclosing page template would automatically create an instance of 
> the referenced template and insert it"
> 
> What I am focusing on here is "automatically create an instance". 
> Beautiful. Less coding.
> 
> Question 2) The documentation goes on to describe 2 ways of getting 
> the necessary attributes to the subroutine template.
> 1) "Accessing Attributes Of Enclosing Template"
> 2) "Passing Parameters To Another Template"
> 
> Are there any other ways? You see, what I am looking for is a way to 
> help the web designers work independently of the programmers. Here's 
> a scenario to describe what I mean. Let's say that our web 
> application handles the URL "/OurWebApp/account/summary.page" with 
> Java code like this:
> 
> StringTemplate st = group.GetInstanceOf("account/summary.st");
> ... do some database queries
> st.setAttribute("foo", queryResult1);
> st.setAttribute("bar", queryResult2);
> ... render the template and send it to the client browser
> 
> The above code is maintained by the programmers. The web designers 
> can tweak the template text to their hearts content. Initially it 
> looks like:
> <html> 
> <body>
> ...
> $foo$
> $bar$
> ...
> </body>
> </html> 
> 
> But wait! The web designer is changes her [artistic] mind and decides 
> to take the summary page the next level. She wants to show the users 
> account balance so she makes a call to the accountBalanceBox template.
> <html> 
> <body>
> ...
> $foo$
> $bar$
> $accountBalanceBox()$
> ...
> </body>
> </html> 
> 
> But accountBalanceBox needs a $dollars$ attribute. This can only be 
> determined by getting the user ID from the HttpSession and then 
> querying the database for it. But that's the job of the programmer. 
> If we have support for true componentization then the Java code that 
> handles summary.page should NOT need to set the $dollars$ attribute. 
> The general principle here is separation of concerns 
> (http://en.wikipedia.org/wiki/Separation_of_concerns). If 
> accountBalanceBox is made to be a logical component, which includes 
> both a template as well as some Java code, it gives web designers full 
> freedom to mix and match the components that have been provided by the 
> programmers.
> 
> So I think the mechanism I am after is some sort of hook. As 
> StringTemplate encounters accountBalanceBox it calls my Java function 
> which gives me a chance to provide the necessary attributes. Such a 
> hook might look like this:
> 
> void templatePreprocess(StringTemplate st, StringTemplateContext context)
> {
> if (st.getName().equals("accountBalanceBox"))
> {
> HttpSession session = context.getAttribute("session");
> int userID = session.getAttirbute("userID");
> st.setAttribute("dollars", database.getBalance(userID));
> return;
> }
> ...
> }
> 
> Does such a mechanism exist?
> 
> Thanks much.
> - Adam
> 
> 
> ------------------------------------------------------------------------
>
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org:8080/mailman/listinfo/stringtemplate-interest
> 

      
   
 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org:8080/pipermail/stringtemplate-interest/attachments/20061227/dde76c44/attachment.html 

From adamb at videx.com  Wed Dec 27 10:28:00 2006
From: adamb at videx.com (Adam Bennett)
Date: Wed, 27 Dec 2006 10:28:00 -0800
Subject: [stringtemplate-interest]
	=?iso-8859-1?q?Does_StringTemplate_supp?=
	=?iso-8859-1?q?ort_components=3F?=
In-Reply-To: PMEOJKDLMMHOHNEAMPBGAEGOCAAA.jjsnyders@rcn.com
Message-ID: <20061227182800.645f01c3@mail3.videx.com>

 
Thanks for answering my question, John.  Let me summarize what I heard:  
---  
StringTemplate does not support "componentization" if we define a single component as a combination of .java code and a .st template that is independent of the enclosing template that invoked it.  This lack of support is intentional because it creates a situation where the view is pulling data from the model which is an anti-pattern that StringTemplate wishes to prevent.  
---  
   
Fair enough.  Even so I still find the idea of componentization attractive.  I have this dreamy vision of programmers cranking out reusable components and web designers mixing and matching them.  But perhaps it is not a worthwhile goal.  Although I am not too complelled by the order of invocation argument, I can now see at least one short coming of this sort of componentization: exceptions.  If the web server begins to evaluate a template and stream it to the client what happens if there is an exception while evaluating a sub component?  At this point the response is committed so we can't redirect them to an error page.  If we had gotten all the data up front as StringTemplate requires this would not be a problem.  
   
Thanks enlightening me.  
- Adam Bennett  
 
      _____  

  From: John Snyders [mailto:jjsnyders at rcn.com]
To: Adam Bennett [mailto:adamb at videx.com], stringtemplate-interest at antlr.org
Sent: Sat, 23 Dec 2006 20:54:42 -0800
Subject: RE: [stringtemplate-interest]Does StringTemplate support components?

  
I'll try to answer.    
-----Original Message-----
From: stringtemplate-interest-bounces at antlr.org [mailto:stringtemplate-interest-bounces at antlr.org]On Behalf Of Adam Bennett
Sent: Saturday, December 23, 2006 2:49 AM
To: stringtemplate-interest at antlr.org
Subject: Re: [stringtemplate-interest]Does StringTemplate support components?

  
I really appreciate all the suggestions but I haven't heard the answer yet.  I'll try to reformulate my the question:  
   
Question 1) From my reading, it appears that StringTempate supports calling other templates as if it were a subroutine, right? 
[John Snyders] Correct  
  I infer this from the "Expressions" document where it is talking about "Template References":  
   
"the enclosing page template would automatically create an instance of the referenced template and insert it"  
   
What I am focusing on here is "automatically create an instance".  Beautiful.  Less coding.  
   
Question 2) The documentation goes on to describe 2 ways of getting the necessary attributes to the subroutine template.  
1) "Accessing Attributes Of Enclosing Template"
[John Snyders] In a group file the templates must declare all the attributes they use so this really applies to the non-group (do these have a name?) .st templates. Essentially the attributes defined by the controller are globally available to all templates (unless hidden by an argument explicitly passed to the template in the call).  
2) "Passing Parameters To Another Template"
[John Snyders] This can be done with templates in .st or .stg files  
   
Are there any other ways?  
[John Snyders] Not really  
 You see, what I am looking for is a way to help the web designers work independently of the programmers.  Here's a scenario to describe what I mean.  Let's say that our web application handles the URL "/OurWebApp/account/summary.page" with Java code like this:  
   
StringTemplate st = group.GetInstanceOf("account/summary.st");  
... do some database queries  
st.setAttribute("foo", queryResult1);  
  
st.setAttribute("bar", queryResult2);  
... render the template and send it to the client browser  
   
The above code is maintained by the programmers.  The web designers can tweak the template text to their hearts content.  Initially it looks like:  
<html>  
<body>
...  
$foo$  
$bar$  
...
</body>
</html>    
   
But wait!  The web designer is changes her [artistic] mind and decides to take the summary page the next level.  She wants to show the users account balance so she makes a call to the accountBalanceBox template.
  
  
<html>  
<body>
...  
$foo$  
$bar$  
$accountBalanceBox()$  
...
</body>
</html> 
[John Snyders]  But this is not a presentation change! The web designer is responsible for presentation. The content of the page (the foo and bar and account balance) are the responsibility of the product owner which may be the customer and it is up to the web designer and programmer together to implement. In other words this is a change to the data model available to the page(s).  
   
   
But accountBalanceBox needs a $dollars$ attribute.  This can only be determined by getting the user ID from the HttpSession and then querying the database for it.  But that's the job of the programmer.  If we have support for true componentization then the Java code that handles summary.page should NOT need to set the $dollars$ attribute.  The general principle here is separation of concerns (http://en.wikipedia.org/wiki/Separation_of_concerns).  If accountBalanceBox is made to be a logical component, which includes both a template as well as some Java code, it gives web designers full freedom to mix and match the components that have been provided by the programmers.
[John Snyders] but from the HTML/HTTP point of view summary.page is monolithic and this is what ST must generate. You can have one template for the overall page and another seperate template for the accountBalanceBox. You can have component code for getting foo and bar and a seperate component for getting the account balance but there is just one HTTP request for the summary page and one HTML reply that includes both information.   
   
I think one of the suggestions was to have the controller call the account balance component which would invoke its own ST template with its own model and return a string. That string would then be passed as an attribute to the overall page template. I don't like doing it this way because I think that the page should be generated with one call to string template.   
   
My feeling is that the controller needs to know about all the model data that a given page needs. It may not know the details of what is in the model but it knows which components to call to get it. So it calls one component to get the foo and bar then calls another to get the account balance. These components contribute to the model in the form of attributes. I have been using ST for generating the presentation of a web app and this is more or less how I do it. I started with the non-group templates but quickly moved to the group format.   

A concern may be a large number of arguments to pass around. There are 2 things that can help here. One is that when calling a template you can use ... to have attributes pass through to called templates. The other is that attributes can reference arbitrarily deeply nested object structure. So you could have your top level template with a single argument called model and have that object (or Map) contain all the different parts of the model as children   
Ex:  
$model.foo$  
$model.bar$  
$accountBalanceBox(balance=model.balance,...)$  
   
Some other options (I have not tried these yet) to reduce interaction between components:  
   
If using AJAX the request for the foo and bar data may be totally different from the accountBalanceBox. With AJAX much of the controller moves to the client. In the extreme the dynamic part of the web app is just serving data and there is no need for ST or any template engine.  
   
If you don't like the controler knowing what parts of the model is needed for a given page that information could be configured in an external data file (like a struts tiles def) which the controler reads. Then if the controler knows what to call to get model parts a, b, and c the page designer can decide that the account summary page needs a and b and the orders page needs b and c.  
   
So I think the mechanism I am after is some sort of hook.  As StringTemplate encounters accountBalanceBox it calls my Java function which gives me a chance to provide the necessary attributes.  Such a hook might look like this:  
   
void templatePreprocess(StringTemplate st, StringTemplateContext context)  
{  
  if (st.getName().equals("accountBalanceBox"))  
  {  
    HttpSession session = context.getAttribute("session");  
    int userID = session.getAttirbute("userID");  
    st.setAttribute("dollars", database.getBalance(userID));  
    return;  
  }  
  ...  
}  
   
Does such a mechanism exist?
[John Snyders] No,  All model data must be given to the template before it is invoked with toString (or write)   

Section 7.1 of Enforcing Strict ModelView Separation in Template Engines describes why pulling data from the template breaks separation.  
   
Once you have more than one hook being called there can be order dependent interactions that can cause problems. For ages hook1 is called before hook2 and all is well. Then one day the page designer moves things around and now hook2 is called before hook1 and the code breaks. Perhaps you are now trying to get something out of the session before it is there. In many case there are no order dependencies but in general it is not possible for the developer to defensively code so that the code can be called in any order.  
   
   
Thanks much.  
- Adam  
   
I have been using ST for a few months now for generating HTML. It takes some getting used to but I like it better than what I had done in the past which includes JSP and JSP/Struts.  
   
-John  
       
   
 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org:8080/pipermail/stringtemplate-interest/attachments/20061227/dc8c5ca0/attachment-0001.html 

From adamb at videx.com  Wed Dec 27 10:51:18 2006
From: adamb at videx.com (Adam Bennett)
Date: Wed, 27 Dec 2006 10:51:18 -0800
Subject: [stringtemplate-interest] Generating big documents
Message-ID: <20061227185118.acb40056@mail3.videx.com>

Our web application has the ability to generate reports as HTML or XML documents.  These documents are potentially very large (20MB with some of our test data).  Early on we had problems with the server running out of memory while generating these because all the data was brought into memory from the database.  Our solution was to stream the results from the database while generating the document.  
   
Can StringTemplate be used to generate such documents?  I cannot see how to avoid bringing all the data into memory because StringTemplate requires all data to be passed as an attribute.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org:8080/pipermail/stringtemplate-interest/attachments/20061227/8fab413b/attachment.html 

From misc at n4te.com  Wed Dec 27 11:04:39 2006
From: misc at n4te.com (Nate)
Date: Wed, 27 Dec 2006 11:04:39 -0800
Subject: [stringtemplate-interest] Generating big documents
In-Reply-To: <20061227185118.acb40056@mail3.videx.com>
References: <20061227185118.acb40056@mail3.videx.com>
Message-ID: <4592C3C7.2000705@n4te.com>

You could try something like this...

ArrayList list = new ArrayList();
list.add("10");
list.add("20");
list.add("30");
StringTemplate template = new StringTemplate("$data:{$i$ == $it$\n}$");
template.setAttribute("data", list.iterator());
System.out.println(template.toString());

Outputs...

1 == 10
2 == 20
3 == 30

-Nate


Adam Bennett wrote:
> Our web application has the ability to generate reports as HTML or XML 
> documents.  These documents are potentially very large (20MB with some 
> of our test data).  Early on we had problems with the server running 
> out of memory while generating these because all the data was brought 
> into memory from the database.  Our solution was to stream the results 
> from the database while generating the document.
>  
> Can StringTemplate be used to generate such documents?  I cannot see 
> how to avoid bringing all the data into memory because StringTemplate 
> requires all data to be passed as an attribute.
> ------------------------------------------------------------------------
>
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org:8080/mailman/listinfo/stringtemplate-interest
>   


From jjsnyders at rcn.com  Wed Dec 27 13:43:31 2006
From: jjsnyders at rcn.com (John Snyders)
Date: Wed, 27 Dec 2006 16:43:31 -0500
Subject: [stringtemplate-interest] Generating big documents
In-Reply-To: <20061227185118.acb40056@mail3.videx.com>
Message-ID: <PMEOJKDLMMHOHNEAMPBGOEHACAAA.jjsnyders@rcn.com>

Just because the attributes are given to ST just before the template is
invoked doesn't mean that all the data the attributes represent must be in
memory. The data can be fetched as it is read by template attribute
references. I don't see this as violating the push pattern as long as the
data was generated before the template is invoked and there are no order
dependencies of the attribute properties.

To keep things simple imagine a web request that kicks off a process that
generates a large data file. You can create an object (call it ResultData)
that represents this file and give it to ST as an attribute (called data).
The object has a member (called lines) that implements collection and has an
iterator over the lines of the file. Each time the iterator is used it reads
and returns the next line of the file. The template may look like this

Report foo generated on $data.reportDate$
$data.lines : doLine() }
$footer()$

Disclaimer: I have not done this but see no reason why it won't work.

-John

  -----Original Message-----
  From: stringtemplate-interest-bounces at antlr.org
[mailto:stringtemplate-interest-bounces at antlr.org]On Behalf Of Adam Bennett
  Sent: Wednesday, December 27, 2006 1:51 PM
  To: stringtemplate-interest at antlr.org
  Subject: [stringtemplate-interest] Generating big documents


  Our web application has the ability to generate reports as HTML or XML
documents.  These documents are potentially very large (20MB with some of
our test data).  Early on we had problems with the server running out of
memory while generating these because all the data was brought into memory
from the database.  Our solution was to stream the results from the database
while generating the document.

  Can StringTemplate be used to generate such documents?  I cannot see how
to avoid bringing all the data into memory because StringTemplate requires
all data to be passed as an attribute.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org:8080/pipermail/stringtemplate-interest/attachments/20061227/81fb989e/attachment.html 

From misc at n4te.com  Wed Dec 27 14:36:39 2006
From: misc at n4te.com (Nate)
Date: Wed, 27 Dec 2006 14:36:39 -0800
Subject: [stringtemplate-interest] Generating big documents
In-Reply-To: <PMEOJKDLMMHOHNEAMPBGOEHACAAA.jjsnyders@rcn.com>
References: <PMEOJKDLMMHOHNEAMPBGOEHACAAA.jjsnyders@rcn.com>
Message-ID: <4592F577.1070908@n4te.com>

One part we haven't discussed is the output. I haven't tried it, but I 
think it works something like this...

StringTemplate template = ...
template.write(template.getGroup().getStringTemplateWriter(new 
FileWriter("out.txt")));

-Nate


John Snyders wrote:
> Just because the attributes are given to ST just before the template 
> is invoked doesn't mean that all the data the attributes represent 
> must be in memory. The data can be fetched as it is read by template 
> attribute references. I don't see this as violating the push pattern 
> as long as the data was generated before the template is invoked and 
> there are no order dependencies of the attribute properties.
>  
> To keep things simple imagine a web request that kicks off a process 
> that generates a large data file. You can create an object (call it 
> ResultData) that represents this file and give it to ST as an 
> attribute (called data). The object has a member (called lines) that 
> implements collection and has an iterator over the lines of the file. 
> Each time the iterator is used it reads and returns the next line of 
> the file. The template may look like this
>  
> Report foo generated on $data.reportDate$
> $data.lines : doLine() }
> $footer()$
>  
> Disclaimer: I have not done this but see no reason why it won't work.
>  
> -John
>  
>
>     -----Original Message-----
>     *From:* stringtemplate-interest-bounces at antlr.org
>     [mailto:stringtemplate-interest-bounces at antlr.org]*On Behalf Of
>     *Adam Bennett
>     *Sent:* Wednesday, December 27, 2006 1:51 PM
>     *To:* stringtemplate-interest at antlr.org
>     *Subject:* [stringtemplate-interest] Generating big documents
>
>     Our web application has the ability to generate reports as HTML or
>     XML documents.  These documents are potentially very large
>     (20MB with some of our test data).  Early on we had problems with
>     the server running out of memory while generating these because
>     all the data was brought into memory from the database.  Our
>     solution was to stream the results from the database while
>     generating the document.
>      
>     Can StringTemplate be used to generate such documents?  I cannot
>     see how to avoid bringing all the data into memory because
>     StringTemplate requires all data to be passed as an attribute.
>
> ------------------------------------------------------------------------
>
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org:8080/mailman/listinfo/stringtemplate-interest
>   


From adamb at videx.com  Wed Dec 27 15:03:08 2006
From: adamb at videx.com (Adam Bennett)
Date: Wed, 27 Dec 2006 15:03:08 -0800
Subject: [stringtemplate-interest] Generating big documents
Message-ID: <4592FBAC.3060802@videx.com>

I think this gets me close, Nate.  I did not realize 
that StringTemplate treats iterators as multi-valued attributes.  Nice.  
I could create an Iterator to wrap a JDBC ResultSet.  One problem 
however: I think StringTemplate is evaluating the iterator all at once 
(as opposed to iteratively).  For instance, this code causes an 
OutOfMemoryError:

public class Play
{
  public static void main(String[] args)
  {
    StringTemplate template = new StringTemplate("$data:{$i$ == $it$\n}$");
    template.setAttribute("data", new InfiniteItr());
   
    try
    {
      template.write(new DummyWriter());
    }
    catch (java.io.IOException ex)
    {
      ex.printStackTrace();
    }
   }
 
  /**an infinite sequence of integers*/
  static class InfiniteItr implements Iterator<Integer>
  {
    private int i = 0;
    public boolean hasNext() {return true;}
    public Integer next(){return new Integer(i++); }
    public void remove(){}
  }
 
  /**a StringTemplateWriter that discards all output*/
  static public class DummyWriter
    implements StringTemplateWriter
  {
    public void popAnchorPoint() {}
    public String popIndentation() {return "";}
    public void pushAnchorPoint(){}
    public void pushIndentation(String string){}
    public void setLineWidth(int _int){}
    public int write(String string)
      throws IOException
    {
      return string.length();
    }
    public int write(String string, String string1)
      throws IOException
    {
      return string.length();
    }
    public int writeSeparator(String string)
      throws IOException
    {
      return string.length();
    }
    public int writeWrapSeparator(String string)
      throws IOException
    {
      return string.length();
    }
  } 
}

    ------------------------------------------------------------------------
    *From:* Nate [mailto:misc at n4te.com <mailto:misc at n4te.com>]
    *To:* Adam Bennett [mailto:adamb at videx.com <mailto:adamb at videx.com>]
    *Cc:* stringtemplate-interest at antlr.org
    <mailto:stringtemplate-interest at antlr.org>
    *Sent:* Wed, 27 Dec 2006 11:04:39 -0800
    *Subject:* Re: [stringtemplate-interest] Generating big documents

    You could try something like this...

    ArrayList list = new ArrayList();
    list.add("10");
    list.add("20");
    list.add("30");
    StringTemplate template = new StringTemplate("$data:{$i$ == $it$\n}$");
    template.setAttribute("data", list.iterator());
    System.out.println(template.toString());

    Outputs...

    1 == 10
    2 == 20
    3 == 30

    -Nate


    Adam Bennett wrote:
     > Our web application has the ability to generate reports as HTML
    or XML
     > documents. These documents are potentially very large (20MB with
    some
     > of our test data). Early on we had problems with the server running
     > out of memory while generating these because all the data was
    brought
     > into memory from the database. Our solution was to stream the
    results
     > from the database while generating the document.
     >
     > Can StringTemplate be used to generate such documents? I cannot see
     > how to avoid bringing all the data into memory because
    StringTemplate
     > requires all data to be passed as an attribute.
     >
    ------------------------------------------------------------------------
     >
     > _______________________________________________
     > stringtemplate-interest mailing list
     > stringtemplate-interest at antlr.org
    <mailto:stringtemplate-interest at antlr.org>
     > http://www.antlr.org:8080/mailman/listinfo/stringtemplate-interest
     >

 
 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org:8080/pipermail/stringtemplate-interest/attachments/20061227/41d38822/attachment.html 

From bv-svp at artima.com  Wed Dec 27 16:45:38 2006
From: bv-svp at artima.com (Bill Venners)
Date: Wed, 27 Dec 2006 16:45:38 -0800
Subject: [stringtemplate-interest] Does StringTemplate support
	components?
In-Reply-To: <20061227182800.645f01c3@mail3.videx.com>
References: <20061227182800.645f01c3@mail3.videx.com>
Message-ID: <CD86CFB2-4C4C-46DC-9CF5-F90BB02F811D@artima.com>

Hello,

I like the idea of components as well, but not the kind you described  
originally whereby you call Java code to get attributes. I have a  
notion of a view is that it is a tree of component objects, each of  
which encapsulates data and the ability to render that data in  
various themes and locales. So a component would be a Java class that  
requires all data needed by its template(s) to be passed to its  
constructor up front, and it would store that data in instance  
variables. When someone calls its render(Writer out) method, it would  
render the appropriate template with that instance data. Each  
component would do the enforcement of the separation of model and  
view that I really like about ST.

What ST pushed me towards is having those components just be holders  
of data. So the Java programmer would build up a tree of these data- 
holding components. The template designers would create a conceptual  
tree of templates in a way, by having templates refer to templates.  
Often the template tree will have the same structure as the data- 
holder objects tree.

So why not let each component keep track of its own data and  
templates, and do the rendering of itself. What I'd need in ST is a  
way to call render() on components I suppose, and I don't believe I  
have a way to do that in ST, because it would open up the possibility  
of calling any arbitrary Java code.

The other thing that bugs me a bit is that I can't know at compile  
time if I'm using a parameter in a template that doesn't exist in the  
data. I'm tempted towards the JSP approach of taking some template  
and translating it into print statements that could be called by the  
render method of component objects. These would not compile if there  
were naming problems.

I know that Terrence came to the design of ST while solving real  
problems of web pages and code generation. Is there any reason why  
doing such a component approach might be less useful in practice than  
the ST approach?

Thanks.

Bill
----
Bill Venners
President
Artima, Inc.
http://www.artima.com


On Dec 27, 2006, at 10:28 AM, Adam Bennett wrote:

> Thanks for answering my question, John.  Let me summarize what I  
> heard:
> ---
> StringTemplate does not support "componentization" if we define a  
> single component as a combination of .java code and a .st template  
> that is independent of the enclosing template that invoked it.   
> This lack of support is intentional because it creates a situation  
> where the view is pulling data from the model which is an anti- 
> pattern that StringTemplate wishes to prevent.
> ---
>
> Fair enough.  Even so I still find the idea of componentization  
> attractive.  I have this dreamy vision of programmers cranking out  
> reusable components and web designers mixing and matching them.   
> But perhaps it is not a worthwhile goal.  Although I am not too  
> complelled by the order of invocation argument, I can now see at  
> least one short coming of this sort of componentization:  
> exceptions.  If the web server begins to evaluate a template and  
> stream it to the client what happens if there is an exception while  
> evaluating a sub component?  At this point the response is  
> committed so we can't redirect them to an error page.  If we had  
> gotten all the data up front as StringTemplate requires this would  
> not be a problem.
>
> Thanks enlightening me.
> - Adam Bennett
>
>
> From: John Snyders [mailto:jjsnyders at rcn.com]
> To: Adam Bennett [mailto:adamb at videx.com], stringtemplate- 
> interest at antlr.org
> Sent: Sat, 23 Dec 2006 20:54:42 -0800
> Subject: RE: [stringtemplate-interest]Does StringTemplate support  
> components?
>
> I'll try to answer.
> -----Original Message-----
> From: stringtemplate-interest-bounces at antlr.org  
> [mailto:stringtemplate-interest-bounces at antlr.org]On Behalf Of Adam  
> Bennett
> Sent: Saturday, December 23, 2006 2:49 AM
> To: stringtemplate-interest at antlr.org
> Subject: Re: [stringtemplate-interest]Does StringTemplate support  
> components?
>
> I really appreciate all the suggestions but I haven't heard the  
> answer yet.  I'll try to reformulate my the question:
>
> Question 1) From my reading, it appears that StringTempate supports  
> calling other templates as if it were a subroutine, right?
> [John Snyders] Correct
>   I infer this from the "Expressions" document where it is talking  
> about "Template References":
>
> "the enclosing page template would automatically create an instance  
> of the referenced template and insert it"
>
> What I am focusing on here is "automatically create an instance".   
> Beautiful.  Less coding.
>
> Question 2) The documentation goes on to describe 2 ways of getting  
> the necessary attributes to the subroutine template.
> 1) "Accessing Attributes Of Enclosing Template"
> [John Snyders] In a group file the templates must declare all the  
> attributes they use so this really applies to the non-group (do  
> these have a name?) .st templates. Essentially the attributes  
> defined by the controller are globally available to all templates  
> (unless hidden by an argument explicitly passed to the template in  
> the call).
> 2) "Passing Parameters To Another Template"
> [John Snyders] This can be done with templates in .st or .stg files
>
> Are there any other ways?
> [John Snyders] Not really
>  You see, what I am looking for is a way to help the web designers  
> work independently of the programmers.  Here's a scenario to  
> describe what I mean.  Let's say that our web application handles  
> the URL "/OurWebApp/account/summary.page" with Java code like this:
>
> StringTemplate st = group.GetInstanceOf("account/summary.st");
> ... do some database queries
> st.setAttribute("foo", queryResult1);
> st.setAttribute("bar", queryResult2);
> ... render the template and send it to the client browser
>
> The above code is maintained by the programmers.  The web designers  
> can tweak the template text to their hearts content.  Initially it  
> looks like:
> <html>
> <body>
> ...
> $foo$
> $bar$
> ...
> </body>
> </html>
>
> But wait!  The web designer is changes her [artistic] mind and  
> decides to take the summary page the next level.  She wants to show  
> the users account balance so she makes a call to the  
> accountBalanceBox template.
> <html>
> <body>
> ...
> $foo$
> $bar$
> $accountBalanceBox()$
> ...
> </body>
> </html>
> [John Snyders]  But this is not a presentation change! The web  
> designer is responsible for presentation. The content of the page  
> (the foo and bar and account balance) are the responsibility of the  
> product owner which may be the customer and it is up to the web  
> designer and programmer together to implement. In other words this  
> is a change to the data model available to the page(s).
>
>
> But accountBalanceBox needs a $dollars$ attribute.  This can only  
> be determined by getting the user ID from the HttpSession and then  
> querying the database for it.  But that's the job of the  
> programmer.  If we have support for true componentization then the  
> Java code that handles summary.page should NOT need to set the  
> $dollars$ attribute.  The general principle here is separation of  
> concerns (http://en.wikipedia.org/wiki/Separation_of_concerns).  If  
> accountBalanceBox is made to be a logical component, which includes  
> both a template as well as some Java code, it gives web designers  
> full freedom to mix and match the components that have been  
> provided by the programmers.
> [John Snyders] but from the HTML/HTTP point of view summary.page is  
> monolithic and this is what ST must generate. You can have one  
> template for the overall page and another seperate template for the  
> accountBalanceBox. You can have component code for getting foo and  
> bar and a seperate component for getting the account balance but  
> there is just one HTTP request for the summary page and one HTML  
> reply that includes both information.
>
> I think one of the suggestions was to have the controller call the  
> account balance component which would invoke its own ST template  
> with its own model and return a string. That string would then be  
> passed as an attribute to the overall page template. I don't like  
> doing it this way because I think that the page should be generated  
> with one call to string template.
>
> My feeling is that the controller needs to know about all the model  
> data that a given page needs. It may not know the details of what  
> is in the model but it knows which components to call to get it. So  
> it calls one component to get the foo and bar then calls another to  
> get the account balance. These components contribute to the model  
> in the form of attributes. I have been using ST for generating the  
> presentation of a web app and this is more or less how I do it. I  
> started with the non-group templates but quickly moved to the group  
> format.
>
> A concern may be a large number of arguments to pass around. There  
> are 2 things that can help here. One is that when calling a  
> template you can use ... to have attributes pass through to called  
> templates. The other is that attributes can reference arbitrarily  
> deeply nested object structure. So you could have your top level  
> template with a single argument called model and have that object  
> (or Map) contain all the different parts of the model as children
> Ex:
> $model.foo$
> $model.bar$
> $accountBalanceBox(balance=model.balance,...)$
>
> Some other options (I have not tried these yet) to reduce  
> interaction between components:
>
> If using AJAX the request for the foo and bar data may be totally  
> different from the accountBalanceBox. With AJAX much of the  
> controller moves to the client. In the extreme the dynamic part of  
> the web app is just serving data and there is no need for ST or any  
> template engine.
>
> If you don't like the controler knowing what parts of the model is  
> needed for a given page that information could be configured in an  
> external data file (like a struts tiles def) which the controler  
> reads. Then if the controler knows what to call to get model parts  
> a, b, and c the page designer can decide that the account summary  
> page needs a and b and the orders page needs b and c.
>
> So I think the mechanism I am after is some sort of hook.  As  
> StringTemplate encounters accountBalanceBox it calls my Java  
> function which gives me a chance to provide the necessary  
> attributes.  Such a hook might look like this:
>
> void templatePreprocess(StringTemplate st, StringTemplateContext  
> context)
> {
>   if (st.getName().equals("accountBalanceBox"))
>   {
>     HttpSession session = context.getAttribute("session");
>     int userID = session.getAttirbute("userID");
>     st.setAttribute("dollars", database.getBalance(userID));
>     return;
>   }
>   ...
> }
>
> Does such a mechanism exist?
> [John Snyders] No,  All model data must be given to the template  
> before it is invoked with toString (or write)
>
> Section 7.1 of Enforcing Strict ModelView Separation in Template  
> Engines describes why pulling data from the template breaks  
> separation.
>
> Once you have more than one hook being called there can be order  
> dependent interactions that can cause problems. For ages hook1 is  
> called before hook2 and all is well. Then one day the page designer  
> moves things around and now hook2 is called before hook1 and the  
> code breaks. Perhaps you are now trying to get something out of the  
> session before it is there. In many case there are no order  
> dependencies but in general it is not possible for the developer to  
> defensively code so that the code can be called in any order.
>
>
> Thanks much.
> - Adam
>
> I have been using ST for a few months now for generating HTML. It  
> takes some getting used to but I like it better than what I had  
> done in the past which includes JSP and JSP/Struts.
>
> -John
>
>
>
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org:8080/mailman/listinfo/stringtemplate-interest





From jjsnyders at rcn.com  Wed Dec 27 16:45:47 2006
From: jjsnyders at rcn.com (John Snyders)
Date: Wed, 27 Dec 2006 19:45:47 -0500
Subject: [stringtemplate-interest] Generating big documents
In-Reply-To: <4592FBAC.3060802@videx.com>
Message-ID: <PMEOJKDLMMHOHNEAMPBGMEHBCAAA.jjsnyders@rcn.com>

I would have thought this would work but now I can see it doesn't.

The problem is in ASTExpr.applyListOfAlternatingTemplates. It is trying to
gather up the results of the first template. I think the reason it is doing
this is because it is possible to nest the templates. The example from the
documentation is
<ul>
$names:{<b>$it$</b>}:{<li>$it$</li>}$
</ul>First all the names are iterated over and a result list of string
templates with arguments initialized is returned. Then the list of string
templates is evaluated. In the first loop the values are it=0, it=1, it=2...
in the second loop the values are it=<b>0</b>, it=<b>1</b>, ...
I was surprised to see it done this way. I think it is very inefficient and
clearly will not work for what you are trying to do. It would be nice if it
could go depth first rather than breadth first. If not at least notice that
there is no nested template to iterate in your case.

Can someone comment on why nested iterations are handled this way?

Note that $data$ does not have the same problem. The values are continually
written to the DummyWriter. But this is not very helpful. A named template
will also not work ex: $data:line()$

I think your use case is an interesting and important one. Not sure if this
issue can be resolved and there may be more issues beyond that.

There are problems with using iterators directly. There are times when they
need to be (even if ST isn't currently doing it) turned into a collection
(or iterable). The reason is that iterators can't be used more than once.
This is why Java 5 added the itertor interface to support the foreach
construct. It needed a way to get an iterator multiple times when a foreach
loop was nested. But this is not the key issue in what you are doing. You
could change your example to be an infinite collection and run into the same
problem.


-John

  -----Original Message-----
  From: stringtemplate-interest-bounces at antlr.org
[mailto:stringtemplate-interest-bounces at antlr.org]On Behalf Of Adam Bennett
  Sent: Wednesday, December 27, 2006 6:03 PM
  To: stringtemplate-interest at antlr.org
  Subject: Re: [stringtemplate-interest] Generating big documents


  I think this gets me close, Nate.  I did not realize that StringTemplate
treats iterators as multi-valued attributes.  Nice.  I could create an
Iterator to wrap a JDBC ResultSet.  One problem however: I think
StringTemplate is evaluating the iterator all at once (as opposed to
iteratively).  For instance, this code causes an OutOfMemoryError:

  public class Play
  {
    public static void main(String[] args)
    {
      StringTemplate template = new StringTemplate("$data:{$i$ ==
$it$\n}$");
      template.setAttribute("data", new InfiniteItr());

      try
      {
        template.write(new DummyWriter());
      }
      catch (java.io.IOException ex)
      {
        ex.printStackTrace();
      }
     }

    /**an infinite sequence of integers*/
    static class InfiniteItr implements Iterator<Integer>
    {
      private int i = 0;
      public boolean hasNext() {return true;}
      public Integer next(){return new Integer(i++); }
      public void remove(){}
    }

    /**a StringTemplateWriter that discards all output*/
    static public class DummyWriter
      implements StringTemplateWriter
    {
      public void popAnchorPoint() {}
      public String popIndentation() {return "";}
      public void pushAnchorPoint(){}
      public void pushIndentation(String string){}
      public void setLineWidth(int _int){}
      public int write(String string)
        throws IOException
      {
        return string.length();
      }
      public int write(String string, String string1)
        throws IOException
      {
        return string.length();
      }
      public int writeSeparator(String string)
        throws IOException
      {
        return string.length();
      }
      public int writeWrapSeparator(String string)
        throws IOException
      {
        return string.length();
      }
    }
  }




----------------------------------------------------------------------------
    From: Nate [mailto:misc at n4te.com]
    To: Adam Bennett [mailto:adamb at videx.com]
    Cc: stringtemplate-interest at antlr.org
    Sent: Wed, 27 Dec 2006 11:04:39 -0800
    Subject: Re: [stringtemplate-interest] Generating big documents

    You could try something like this...

    ArrayList list = new ArrayList();
    list.add("10");
    list.add("20");
    list.add("30");
    StringTemplate template = new StringTemplate("$data:{$i$ == $it$\n}$");
    template.setAttribute("data", list.iterator());
    System.out.println(template.toString());

    Outputs...

    1 == 10
    2 == 20
    3 == 30

    -Nate


    Adam Bennett wrote:
    > Our web application has the ability to generate reports as HTML or XML
    > documents. These documents are potentially very large (20MB with some
    > of our test data). Early on we had problems with the server running
    > out of memory while generating these because all the data was brought
    > into memory from the database. Our solution was to stream the results
    > from the database while generating the document.
    >
    > Can StringTemplate be used to generate such documents? I cannot see
    > how to avoid bringing all the data into memory because StringTemplate
    > requires all data to be passed as an attribute.


  > ------------------------------------------------------------------------
    >
    > _______________________________________________
    > stringtemplate-interest mailing list
    > stringtemplate-interest at antlr.org
    > http://www.antlr.org:8080/mailman/listinfo/stringtemplate-interest
    >



-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org:8080/pipermail/stringtemplate-interest/attachments/20061227/a5f8a77c/attachment.html 

From parrt at cs.usfca.edu  Wed Dec 27 17:01:07 2006
From: parrt at cs.usfca.edu (Terence Parr)
Date: Wed, 27 Dec 2006 17:01:07 -0800
Subject: [stringtemplate-interest] Generating big documents
In-Reply-To: <PMEOJKDLMMHOHNEAMPBGMEHBCAAA.jjsnyders@rcn.com>
References: <PMEOJKDLMMHOHNEAMPBGMEHBCAAA.jjsnyders@rcn.com>
Message-ID: <113A51D4-79DF-4794-8E4D-EEC85575DCE7@cs.usfca.edu>

On Dec 27, 2006, at 4:45 PM, John Snyders wrote:

> I would have thought this would work but now I can see it doesn't.
>
> The problem is in ASTExpr.applyListOfAlternatingTemplates. It is  
> trying to gather up the results of the first template. I think the  
> reason it is doing this is because it is possible to nest the  
> templates. The example from the documentation is
> $names:{$it$}:{
> $it$
> }$
> First all the names are iterated over and a result list of string  
> templates with arguments initialized is returned. Then the list of  
> string templates is evaluated. In the first loop the values are  
> it=0, it=1, it=2... in the second loop the values are it=<b>0</b>,  
> it=<b>1</b>, ...
> I was surprised to see it done this way. I think it is very  
> inefficient and clearly will not work for what you are trying to  
> do. It would be nice if it could go depth first rather than breadth  
> first. If not at least notice that there is no nested template to  
> iterate in your case.
>
> Can someone comment on why nested iterations are handled this way?

Yep, it's not super common and the implementation is easier to handle  
one "map" (colon operator) at a time.  Stuff is more uniform.

$data:{$i$ == $it$\n}$ should work...if you do toString on that, it  
should write as it evaluates.  I'd be surprised if I created a list  
first and then printed the list.

> Note that $data$ does not have the same problem. The values are  
> continually written to the DummyWriter. But this is not very  
> helpful. A named template will also not work ex: $data:line()$

Wow...i'm a dummy I guess.  crap.

>  I think your use case is an interesting and important one. Not  
> sure if this issue can be resolved and there may be more issues  
> beyond that.
>

Ter


From bv-svp at artima.com  Wed Dec 27 17:32:51 2006
From: bv-svp at artima.com (Bill Venners)
Date: Wed, 27 Dec 2006 17:32:51 -0800
Subject: [stringtemplate-interest] Does StringTemplate support
	components?
In-Reply-To: <CD86CFB2-4C4C-46DC-9CF5-F90BB02F811D@artima.com>
References: <20061227182800.645f01c3@mail3.videx.com>
	<CD86CFB2-4C4C-46DC-9CF5-F90BB02F811D@artima.com>
Message-ID: <F3C00830-AA33-460F-B0D4-DC67214FC766@artima.com>

Hello,

One more note on components. I'm aware I can call toString() on a  
component object, and get the behavior I described. But that of  
course means you build Strings in memory first and then write them to  
the output stream. It would be nice if I could write it to the output  
stream to begin with, which is why I want to be able to call render 
(Writer out). (I believe this still holds to ST's philosophy of  
separation of model and view, so long as <component>.render(Writer  
out) only renders another template with data already assembled by  
that component.) I did notice somewhere in the ST documentation that  
this is possible with ST itself, but as far as I know, only if you  
pass a tree of data-holders to an outermost ST template that then  
runs the show, likely by invoking templates in a structure similar to  
the data-holder tree's structure.

And I meant Terence, not Terrence. Sorry.

Bill

On Dec 27, 2006, at 4:45 PM, Bill Venners wrote:

> Hello,
>
> I like the idea of components as well, but not the kind you described
> originally whereby you call Java code to get attributes. I have a
> notion of a view is that it is a tree of component objects, each of
> which encapsulates data and the ability to render that data in
> various themes and locales. So a component would be a Java class that
> requires all data needed by its template(s) to be passed to its
> constructor up front, and it would store that data in instance
> variables. When someone calls its render(Writer out) method, it would
> render the appropriate template with that instance data. Each
> component would do the enforcement of the separation of model and
> view that I really like about ST.
>
> What ST pushed me towards is having those components just be holders
> of data. So the Java programmer would build up a tree of these data-
> holding components. The template designers would create a conceptual
> tree of templates in a way, by having templates refer to templates.
> Often the template tree will have the same structure as the data-
> holder objects tree.
>
> So why not let each component keep track of its own data and
> templates, and do the rendering of itself. What I'd need in ST is a
> way to call render() on components I suppose, and I don't believe I
> have a way to do that in ST, because it would open up the possibility
> of calling any arbitrary Java code.
>
> The other thing that bugs me a bit is that I can't know at compile
> time if I'm using a parameter in a template that doesn't exist in the
> data. I'm tempted towards the JSP approach of taking some template
> and translating it into print statements that could be called by the
> render method of component objects. These would not compile if there
> were naming problems.
>
> I know that Terrence came to the design of ST while solving real
> problems of web pages and code generation. Is there any reason why
> doing such a component approach might be less useful in practice than
> the ST approach?
>
> Thanks.
>
> Bill
> ----
> Bill Venners
> President
> Artima, Inc.
> http://www.artima.com
>
>
> On Dec 27, 2006, at 10:28 AM, Adam Bennett wrote:
>
>> Thanks for answering my question, John.  Let me summarize what I
>> heard:
>> ---
>> StringTemplate does not support "componentization" if we define a
>> single component as a combination of .java code and a .st template
>> that is independent of the enclosing template that invoked it.
>> This lack of support is intentional because it creates a situation
>> where the view is pulling data from the model which is an anti-
>> pattern that StringTemplate wishes to prevent.
>> ---
>>
>> Fair enough.  Even so I still find the idea of componentization
>> attractive.  I have this dreamy vision of programmers cranking out
>> reusable components and web designers mixing and matching them.
>> But perhaps it is not a worthwhile goal.  Although I am not too
>> complelled by the order of invocation argument, I can now see at
>> least one short coming of this sort of componentization:
>> exceptions.  If the web server begins to evaluate a template and
>> stream it to the client what happens if there is an exception while
>> evaluating a sub component?  At this point the response is
>> committed so we can't redirect them to an error page.  If we had
>> gotten all the data up front as StringTemplate requires this would
>> not be a problem.
>>
>> Thanks enlightening me.
>> - Adam Bennett
>>
>>
>> From: John Snyders [mailto:jjsnyders at rcn.com]
>> To: Adam Bennett [mailto:adamb at videx.com], stringtemplate-
>> interest at antlr.org
>> Sent: Sat, 23 Dec 2006 20:54:42 -0800
>> Subject: RE: [stringtemplate-interest]Does StringTemplate support
>> components?
>>
>> I'll try to answer.
>> -----Original Message-----
>> From: stringtemplate-interest-bounces at antlr.org
>> [mailto:stringtemplate-interest-bounces at antlr.org]On Behalf Of Adam
>> Bennett
>> Sent: Saturday, December 23, 2006 2:49 AM
>> To: stringtemplate-interest at antlr.org
>> Subject: Re: [stringtemplate-interest]Does StringTemplate support
>> components?
>>
>> I really appreciate all the suggestions but I haven't heard the
>> answer yet.  I'll try to reformulate my the question:
>>
>> Question 1) From my reading, it appears that StringTempate supports
>> calling other templates as if it were a subroutine, right?
>> [John Snyders] Correct
>>   I infer this from the "Expressions" document where it is talking
>> about "Template References":
>>
>> "the enclosing page template would automatically create an instance
>> of the referenced template and insert it"
>>
>> What I am focusing on here is "automatically create an instance".
>> Beautiful.  Less coding.
>>
>> Question 2) The documentation goes on to describe 2 ways of getting
>> the necessary attributes to the subroutine template.
>> 1) "Accessing Attributes Of Enclosing Template"
>> [John Snyders] In a group file the templates must declare all the
>> attributes they use so this really applies to the non-group (do
>> these have a name?) .st templates. Essentially the attributes
>> defined by the controller are globally available to all templates
>> (unless hidden by an argument explicitly passed to the template in
>> the call).
>> 2) "Passing Parameters To Another Template"
>> [John Snyders] This can be done with templates in .st or .stg files
>>
>> Are there any other ways?
>> [John Snyders] Not really
>>  You see, what I am looking for is a way to help the web designers
>> work independently of the programmers.  Here's a scenario to
>> describe what I mean.  Let's say that our web application handles
>> the URL "/OurWebApp/account/summary.page" with Java code like this:
>>
>> StringTemplate st = group.GetInstanceOf("account/summary.st");
>> ... do some database queries
>> st.setAttribute("foo", queryResult1);
>> st.setAttribute("bar", queryResult2);
>> ... render the template and send it to the client browser
>>
>> The above code is maintained by the programmers.  The web designers
>> can tweak the template text to their hearts content.  Initially it
>> looks like:
>> <html>
>> <body>
>> ...
>> $foo$
>> $bar$
>> ...
>> </body>
>> </html>
>>
>> But wait!  The web designer is changes her [artistic] mind and
>> decides to take the summary page the next level.  She wants to show
>> the users account balance so she makes a call to the
>> accountBalanceBox template.
>> <html>
>> <body>
>> ...
>> $foo$
>> $bar$
>> $accountBalanceBox()$
>> ...
>> </body>
>> </html>
>> [John Snyders]  But this is not a presentation change! The web
>> designer is responsible for presentation. The content of the page
>> (the foo and bar and account balance) are the responsibility of the
>> product owner which may be the customer and it is up to the web
>> designer and programmer together to implement. In other words this
>> is a change to the data model available to the page(s).
>>
>>
>> But accountBalanceBox needs a $dollars$ attribute.  This can only
>> be determined by getting the user ID from the HttpSession and then
>> querying the database for it.  But that's the job of the
>> programmer.  If we have support for true componentization then the
>> Java code that handles summary.page should NOT need to set the
>> $dollars$ attribute.  The general principle here is separation of
>> concerns (http://en.wikipedia.org/wiki/Separation_of_concerns).  If
>> accountBalanceBox is made to be a logical component, which includes
>> both a template as well as some Java code, it gives web designers
>> full freedom to mix and match the components that have been
>> provided by the programmers.
>> [John Snyders] but from the HTML/HTTP point of view summary.page is
>> monolithic and this is what ST must generate. You can have one
>> template for the overall page and another seperate template for the
>> accountBalanceBox. You can have component code for getting foo and
>> bar and a seperate component for getting the account balance but
>> there is just one HTTP request for the summary page and one HTML
>> reply that includes both information.
>>
>> I think one of the suggestions was to have the controller call the
>> account balance component which would invoke its own ST template
>> with its own model and return a string. That string would then be
>> passed as an attribute to the overall page template. I don't like
>> doing it this way because I think that the page should be generated
>> with one call to string template.
>>
>> My feeling is that the controller needs to know about all the model
>> data that a given page needs. It may not know the details of what
>> is in the model but it knows which components to call to get it. So
>> it calls one component to get the foo and bar then calls another to
>> get the account balance. These components contribute to the model
>> in the form of attributes. I have been using ST for generating the
>> presentation of a web app and this is more or less how I do it. I
>> started with the non-group templates but quickly moved to the group
>> format.
>>
>> A concern may be a large number of arguments to pass around. There
>> are 2 things that can help here. One is that when calling a
>> template you can use ... to have attributes pass through to called
>> templates. The other is that attributes can reference arbitrarily
>> deeply nested object structure. So you could have your top level
>> template with a single argument called model and have that object
>> (or Map) contain all the different parts of the model as children
>> Ex:
>> $model.foo$
>> $model.bar$
>> $accountBalanceBox(balance=model.balance,...)$
>>
>> Some other options (I have not tried these yet) to reduce
>> interaction between components:
>>
>> If using AJAX the request for the foo and bar data may be totally
>> different from the accountBalanceBox. With AJAX much of the
>> controller moves to the client. In the extreme the dynamic part of
>> the web app is just serving data and there is no need for ST or any
>> template engine.
>>
>> If you don't like the controler knowing what parts of the model is
>> needed for a given page that information could be configured in an
>> external data file (like a struts tiles def) which the controler
>> reads. Then if the controler knows what to call to get model parts
>> a, b, and c the page designer can decide that the account summary
>> page needs a and b and the orders page needs b and c.
>>
>> So I think the mechanism I am after is some sort of hook.  As
>> StringTemplate encounters accountBalanceBox it calls my Java
>> function which gives me a chance to provide the necessary
>> attributes.  Such a hook might look like this:
>>
>> void templatePreprocess(StringTemplate st, StringTemplateContext
>> context)
>> {
>>   if (st.getName().equals("accountBalanceBox"))
>>   {
>>     HttpSession session = context.getAttribute("session");
>>     int userID = session.getAttirbute("userID");
>>     st.setAttribute("dollars", database.getBalance(userID));
>>     return;
>>   }
>>   ...
>> }
>>
>> Does such a mechanism exist?
>> [John Snyders] No,  All model data must be given to the template
>> before it is invoked with toString (or write)
>>
>> Section 7.1 of Enforcing Strict ModelView Separation in Template
>> Engines describes why pulling data from the template breaks
>> separation.
>>
>> Once you have more than one hook being called there can be order
>> dependent interactions that can cause problems. For ages hook1 is
>> called before hook2 and all is well. Then one day the page designer
>> moves things around and now hook2 is called before hook1 and the
>> code breaks. Perhaps you are now trying to get something out of the
>> session before it is there. In many case there are no order
>> dependencies but in general it is not possible for the developer to
>> defensively code so that the code can be called in any order.
>>
>>
>> Thanks much.
>> - Adam
>>
>> I have been using ST for a few months now for generating HTML. It
>> takes some getting used to but I like it better than what I had
>> done in the past which includes JSP and JSP/Struts.
>>
>> -John
>>
>>
>>
>> _______________________________________________
>> stringtemplate-interest mailing list
>> stringtemplate-interest at antlr.org
>> http://www.antlr.org:8080/mailman/listinfo/stringtemplate-interest
>
>
>
>
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org:8080/mailman/listinfo/stringtemplate-interest
>


From adamb at videx.com  Thu Dec 28 08:39:48 2006
From: adamb at videx.com (Adam Bennett)
Date: Thu, 28 Dec 2006 08:39:48 -0800
Subject: [stringtemplate-interest] Does StringTemplate
	support	components?
In-Reply-To: <F3C00830-AA33-460F-B0D4-DC67214FC766@artima.com>
References: <20061227182800.645f01c3@mail3.videx.com>	<CD86CFB2-4C4C-46DC-9CF5-F90BB02F811D@artima.com>
	<F3C00830-AA33-460F-B0D4-DC67214FC766@artima.com>
Message-ID: <4593F354.6060806@videx.com>

So let me see if I understand you.  You would instantiate the root 
component object and call render like so:

new AccountsPage(...parameters..).render(outputstream);

And the render would look something like:
class AccountsPage implements STRenderable
{
    private AccountBalanceBox acb = new AccountBalanceBox(... 
parameters...);
...
public void render(Writer out)
{
    StringTemplate st = ... acounts template file
    st.setAttribute("balanceBox", acb);
    st.write(out);
}
...
}

Where AccountBalanceBox is a child component that has a similar 
render(Writer) method.  And you purpose that ST knows how to render such 
"STRenderable" objects using the output stream rather than toString().  
Is that it, Bill?  Sounds like a great efficiency over toString().


Bill Venners wrote:
> Hello,
>
> One more note on components. I'm aware I can call toString() on a  
> component object, and get the behavior I described. But that of  
> course means you build Strings in memory first and then write them to  
> the output stream. It would be nice if I could write it to the output  
> stream to begin with, which is why I want to be able to call render 
> (Writer out). (I believe this still holds to ST's philosophy of  
> separation of model and view, so long as <component>.render(Writer  
> out) only renders another template with data already assembled by  
> that component.) I did notice somewhere in the ST documentation that  
> this is possible with ST itself, but as far as I know, only if you  
> pass a tree of data-holders to an outermost ST template that then  
> runs the show, likely by invoking templates in a structure similar to  
> the data-holder tree's structure.
>
> And I meant Terence, not Terrence. Sorry.
>
> Bill
>
> On Dec 27, 2006, at 4:45 PM, Bill Venners wrote:
>
>   
>> Hello,
>>
>> I like the idea of components as well, but not the kind you described
>> originally whereby you call Java code to get attributes. I have a
>> notion of a view is that it is a tree of component objects, each of
>> which encapsulates data and the ability to render that data in
>> various themes and locales. So a component would be a Java class that
>> requires all data needed by its template(s) to be passed to its
>> constructor up front, and it would store that data in instance
>> variables. When someone calls its render(Writer out) method, it would
>> render the appropriate template with that instance data. Each
>> component would do the enforcement of the separation of model and
>> view that I really like about ST.
>>
>> What ST pushed me towards is having those components just be holders
>> of data. So the Java programmer would build up a tree of these data-
>> holding components. The template designers would create a conceptual
>> tree of templates in a way, by having templates refer to templates.
>> Often the template tree will have the same structure as the data-
>> holder objects tree.
>>
>> So why not let each component keep track of its own data and
>> templates, and do the rendering of itself. What I'd need in ST is a
>> way to call render() on components I suppose, and I don't believe I
>> have a way to do that in ST, because it would open up the possibility
>> of calling any arbitrary Java code.
>>
>> The other thing that bugs me a bit is that I can't know at compile
>> time if I'm using a parameter in a template that doesn't exist in the
>> data. I'm tempted towards the JSP approach of taking some template
>> and translating it into print statements that could be called by the
>> render method of component objects. These would not compile if there
>> were naming problems.
>>
>> I know that Terrence came to the design of ST while solving real
>> problems of web pages and code generation. Is there any reason why
>> doing such a component approach might be less useful in practice than
>> the ST approach?
>>
>> Thanks.
>>
>> Bill
>> ----
>> Bill Venners
>> President
>> Artima, Inc.
>> http://www.artima.com
>>
>>
>> On Dec 27, 2006, at 10:28 AM, Adam Bennett wrote:
>>
>>     
>>> Thanks for answering my question, John.  Let me summarize what I
>>> heard:
>>> ---
>>> StringTemplate does not support "componentization" if we define a
>>> single component as a combination of .java code and a .st template
>>> that is independent of the enclosing template that invoked it.
>>> This lack of support is intentional because it creates a situation
>>> where the view is pulling data from the model which is an anti-
>>> pattern that StringTemplate wishes to prevent.
>>> ---
>>>
>>> Fair enough.  Even so I still find the idea of componentization
>>> attractive.  I have this dreamy vision of programmers cranking out
>>> reusable components and web designers mixing and matching them.
>>> But perhaps it is not a worthwhile goal.  Although I am not too
>>> complelled by the order of invocation argument, I can now see at
>>> least one short coming of this sort of componentization:
>>> exceptions.  If the web server begins to evaluate a template and
>>> stream it to the client what happens if there is an exception while
>>> evaluating a sub component?  At this point the response is
>>> committed so we can't redirect them to an error page.  If we had
>>> gotten all the data up front as StringTemplate requires this would
>>> not be a problem.
>>>
>>> Thanks enlightening me.
>>> - Adam Bennett
>>>
>>>
>>> From: John Snyders [mailto:jjsnyders at rcn.com]
>>> To: Adam Bennett [mailto:adamb at videx.com], stringtemplate-
>>> interest at antlr.org
>>> Sent: Sat, 23 Dec 2006 20:54:42 -0800
>>> Subject: RE: [stringtemplate-interest]Does StringTemplate support
>>> components?
>>>
>>> I'll try to answer.
>>> -----Original Message-----
>>> From: stringtemplate-interest-bounces at antlr.org
>>> [mailto:stringtemplate-interest-bounces at antlr.org]On Behalf Of Adam
>>> Bennett
>>> Sent: Saturday, December 23, 2006 2:49 AM
>>> To: stringtemplate-interest at antlr.org
>>> Subject: Re: [stringtemplate-interest]Does StringTemplate support
>>> components?
>>>
>>> I really appreciate all the suggestions but I haven't heard the
>>> answer yet.  I'll try to reformulate my the question:
>>>
>>> Question 1) From my reading, it appears that StringTempate supports
>>> calling other templates as if it were a subroutine, right?
>>> [John Snyders] Correct
>>>   I infer this from the "Expressions" document where it is talking
>>> about "Template References":
>>>
>>> "the enclosing page template would automatically create an instance
>>> of the referenced template and insert it"
>>>
>>> What I am focusing on here is "automatically create an instance".
>>> Beautiful.  Less coding.
>>>
>>> Question 2) The documentation goes on to describe 2 ways of getting
>>> the necessary attributes to the subroutine template.
>>> 1) "Accessing Attributes Of Enclosing Template"
>>> [John Snyders] In a group file the templates must declare all the
>>> attributes they use so this really applies to the non-group (do
>>> these have a name?) .st templates. Essentially the attributes
>>> defined by the controller are globally available to all templates
>>> (unless hidden by an argument explicitly passed to the template in
>>> the call).
>>> 2) "Passing Parameters To Another Template"
>>> [John Snyders] This can be done with templates in .st or .stg files
>>>
>>> Are there any other ways?
>>> [John Snyders] Not really
>>>  You see, what I am looking for is a way to help the web designers
>>> work independently of the programmers.  Here's a scenario to
>>> describe what I mean.  Let's say that our web application handles
>>> the URL "/OurWebApp/account/summary.page" with Java code like this:
>>>
>>> StringTemplate st = group.GetInstanceOf("account/summary.st");
>>> ... do some database queries
>>> st.setAttribute("foo", queryResult1);
>>> st.setAttribute("bar", queryResult2);
>>> ... render the template and send it to the client browser
>>>
>>> The above code is maintained by the programmers.  The web designers
>>> can tweak the template text to their hearts content.  Initially it
>>> looks like:
>>> <html>
>>> <body>
>>> ...
>>> $foo$
>>> $bar$
>>> ...
>>> </body>
>>> </html>
>>>
>>> But wait!  The web designer is changes her [artistic] mind and
>>> decides to take the summary page the next level.  She wants to show
>>> the users account balance so she makes a call to the
>>> accountBalanceBox template.
>>> <html>
>>> <body>
>>> ...
>>> $foo$
>>> $bar$
>>> $accountBalanceBox()$
>>> ...
>>> </body>
>>> </html>
>>> [John Snyders]  But this is not a presentation change! The web
>>> designer is responsible for presentation. The content of the page
>>> (the foo and bar and account balance) are the responsibility of the
>>> product owner which may be the customer and it is up to the web
>>> designer and programmer together to implement. In other words this
>>> is a change to the data model available to the page(s).
>>>
>>>
>>> But accountBalanceBox needs a $dollars$ attribute.  This can only
>>> be determined by getting the user ID from the HttpSession and then
>>> querying the database for it.  But that's the job of the
>>> programmer.  If we have support for true componentization then the
>>> Java code that handles summary.page should NOT need to set the
>>> $dollars$ attribute.  The general principle here is separation of
>>> concerns (http://en.wikipedia.org/wiki/Separation_of_concerns).  If
>>> accountBalanceBox is made to be a logical component, which includes
>>> both a template as well as some Java code, it gives web designers
>>> full freedom to mix and match the components that have been
>>> provided by the programmers.
>>> [John Snyders] but from the HTML/HTTP point of view summary.page is
>>> monolithic and this is what ST must generate. You can have one
>>> template for the overall page and another seperate template for the
>>> accountBalanceBox. You can have component code for getting foo and
>>> bar and a seperate component for getting the account balance but
>>> there is just one HTTP request for the summary page and one HTML
>>> reply that includes both information.
>>>
>>> I think one of the suggestions was to have the controller call the
>>> account balance component which would invoke its own ST template
>>> with its own model and return a string. That string would then be
>>> passed as an attribute to the overall page template. I don't like
>>> doing it this way because I think that the page should be generated
>>> with one call to string template.
>>>
>>> My feeling is that the controller needs to know about all the model
>>> data that a given page needs. It may not know the details of what
>>> is in the model but it knows which components to call to get it. So
>>> it calls one component to get the foo and bar then calls another to
>>> get the account balance. These components contribute to the model
>>> in the form of attributes. I have been using ST for generating the
>>> presentation of a web app and this is more or less how I do it. I
>>> started with the non-group templates but quickly moved to the group
>>> format.
>>>
>>> A concern may be a large number of arguments to pass around. There
>>> are 2 things that can help here. One is that when calling a
>>> template you can use ... to have attributes pass through to called
>>> templates. The other is that attributes can reference arbitrarily
>>> deeply nested object structure. So you could have your top level
>>> template with a single argument called model and have that object
>>> (or Map) contain all the different parts of the model as children
>>> Ex:
>>> $model.foo$
>>> $model.bar$
>>> $accountBalanceBox(balance=model.balance,...)$
>>>
>>> Some other options (I have not tried these yet) to reduce
>>> interaction between components:
>>>
>>> If using AJAX the request for the foo and bar data may be totally
>>> different from the accountBalanceBox. With AJAX much of the
>>> controller moves to the client. In the extreme the dynamic part of
>>> the web app is just serving data and there is no need for ST or any
>>> template engine.
>>>
>>> If you don't like the controler knowing what parts of the model is
>>> needed for a given page that information could be configured in an
>>> external data file (like a struts tiles def) which the controler
>>> reads. Then if the controler knows what to call to get model parts
>>> a, b, and c the page designer can decide that the account summary
>>> page needs a and b and the orders page needs b and c.
>>>
>>> So I think the mechanism I am after is some sort of hook.  As
>>> StringTemplate encounters accountBalanceBox it calls my Java
>>> function which gives me a chance to provide the necessary
>>> attributes.  Such a hook might look like this:
>>>
>>> void templatePreprocess(StringTemplate st, StringTemplateContext
>>> context)
>>> {
>>>   if (st.getName().equals("accountBalanceBox"))
>>>   {
>>>     HttpSession session = context.getAttribute("session");
>>>     int userID = session.getAttirbute("userID");
>>>     st.setAttribute("dollars", database.getBalance(userID));
>>>     return;
>>>   }
>>>   ...
>>> }
>>>
>>> Does such a mechanism exist?
>>> [John Snyders] No,  All model data must be given to the template
>>> before it is invoked with toString (or write)
>>>
>>> Section 7.1 of Enforcing Strict ModelView Separation in Template
>>> Engines describes why pulling data from the template breaks
>>> separation.
>>>
>>> Once you have more than one hook being called there can be order
>>> dependent interactions that can cause problems. For ages hook1 is
>>> called before hook2 and all is well. Then one day the page designer
>>> moves things around and now hook2 is called before hook1 and the
>>> code breaks. Perhaps you are now trying to get something out of the
>>> session before it is there. In many case there are no order
>>> dependencies but in general it is not possible for the developer to
>>> defensively code so that the code can be called in any order.
>>>
>>>
>>> Thanks much.
>>> - Adam
>>>
>>> I have been using ST for a few months now for generating HTML. It
>>> takes some getting used to but I like it better than what I had
>>> done in the past which includes JSP and JSP/Struts.
>>>
>>> -John
>>>
>>>
>>>
>>> _______________________________________________
>>> stringtemplate-interest mailing list
>>> stringtemplate-interest at antlr.org
>>> http://www.antlr.org:8080/mailman/listinfo/stringtemplate-interest
>>>       
>>
>>
>> _______________________________________________
>> stringtemplate-interest mailing list
>> stringtemplate-interest at antlr.org
>> http://www.antlr.org:8080/mailman/listinfo/stringtemplate-interest
>>
>>     
>
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org:8080/mailman/listinfo/stringtemplate-interest
>   

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org:8080/pipermail/stringtemplate-interest/attachments/20061228/6dc5df81/attachment-0001.html 

From adamb at videx.com  Thu Dec 28 08:47:45 2006
From: adamb at videx.com (Adam Bennett)
Date: Thu, 28 Dec 2006 08:47:45 -0800
Subject: [stringtemplate-interest] Generating big documents
In-Reply-To: <113A51D4-79DF-4794-8E4D-EEC85575DCE7@cs.usfca.edu>
References: <PMEOJKDLMMHOHNEAMPBGMEHBCAAA.jjsnyders@rcn.com>
	<113A51D4-79DF-4794-8E4D-EEC85575DCE7@cs.usfca.edu>
Message-ID: <4593F531.5090409@videx.com>

So is the said piece of code the only problem or are there other issues 
with using Iterators more lazily.  For instance the Iterator can only be 
evaluated once in the case of a ResultSet being streamed from the 
database (because you must re-execute the query if you want to iterate 
over the results again).  This makes it a stateful attribute and so only 
one template could reference it and even then it could only be 
referenced once.

Terence Parr wrote:
> On Dec 27, 2006, at 4:45 PM, John Snyders wrote:
>
>   
>> I would have thought this would work but now I can see it doesn't.
>>
>> The problem is in ASTExpr.applyListOfAlternatingTemplates. It is  
>> trying to gather up the results of the first template. I think the  
>> reason it is doing this is because it is possible to nest the  
>> templates. The example from the documentation is
>> $names:{$it$}:{
>> $it$
>> }$
>> First all the names are iterated over and a result list of string  
>> templates with arguments initialized is returned. Then the list of  
>> string templates is evaluated. In the first loop the values are  
>> it=0, it=1, it=2... in the second loop the values are it=<b>0</b>,  
>> it=<b>1</b>, ...
>> I was surprised to see it done this way. I think it is very  
>> inefficient and clearly will not work for what you are trying to  
>> do. It would be nice if it could go depth first rather than breadth  
>> first. If not at least notice that there is no nested template to  
>> iterate in your case.
>>
>> Can someone comment on why nested iterations are handled this way?
>>     
>
> Yep, it's not super common and the implementation is easier to handle  
> one "map" (colon operator) at a time.  Stuff is more uniform.
>
> $data:{$i$ == $it$\n}$ should work...if you do toString on that, it  
> should write as it evaluates.  I'd be surprised if I created a list  
> first and then printed the list.
>
>   
>> Note that $data$ does not have the same problem. The values are  
>> continually written to the DummyWriter. But this is not very  
>> helpful. A named template will also not work ex: $data:line()$
>>     
>
> Wow...i'm a dummy I guess.  crap.
>
>   
>>  I think your use case is an interesting and important one. Not  
>> sure if this issue can be resolved and there may be more issues  
>> beyond that.
>>
>>     
>
> Ter
>
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org:8080/mailman/listinfo/stringtemplate-interest
>   

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org:8080/pipermail/stringtemplate-interest/attachments/20061228/18965a5d/attachment.html 

From bv-svp at artima.com  Thu Dec 28 09:10:44 2006
From: bv-svp at artima.com (Bill Venners)
Date: Thu, 28 Dec 2006 09:10:44 -0800
Subject: [stringtemplate-interest] Does StringTemplate
	support	components?
In-Reply-To: <4593F354.6060806@videx.com>
References: <20061227182800.645f01c3@mail3.videx.com>	<CD86CFB2-4C4C-46DC-9CF5-F90BB02F811D@artima.com>
	<F3C00830-AA33-460F-B0D4-DC67214FC766@artima.com>
	<4593F354.6060806@videx.com>
Message-ID: <B6395AC1-81AA-4ACB-8729-A99D5CF1012B@artima.com>

Hi Adam,

I think we're on the same wavelength, but let me clarify just to be  
sure.

On Dec 28, 2006, at 8:39 AM, Adam Bennett wrote:

> So let me see if I understand you.  You would instantiate the root  
> component object and call render like so:
>
> new AccountsPage(...parameters..).render(outputstream);
>
The Java programmers would never call render in their code, but I'm  
not sure if that's what you meant here. The template designers would  
never call it either, just mention the attribute name of the object  
that has the render method in their template. The template engine  
would call render if it discovers the object implements the  
appropriate interface, else it would call toString.

> And the render would look something like:
> class AccountsPage implements STRenderable
> {
>     private AccountBalanceBox acb = new AccountBalanceBox(...  
> parameters...);
> ...
> public void render(Writer out)
> {
>     StringTemplate st = ... acounts template file
>     st.setAttribute("balanceBox", acb);
>     st.write(out);
> }
> ...
> }
>
> Where AccountBalanceBox is a child component that has a similar  
> render(Writer) method.  And you purpose that ST knows how to render  
> such "STRenderable" objects using the output stream rather than  
> toString().  Is that it, Bill?  Sounds like a great efficiency over  
> toString().
>
That's pretty close. What I have is more like this:

public interface View {
     void render(Writer out);
}

public class AccountsPage implements View {

      private AccountBalanceBox accountBalanceBox;
      private Locale locale;
      ....

     public AccountsPage(Locale locale, ..., AccountBalanceBox  
accountBalanceBox, ...) {

         ....
         if (accountBalanceBox == null) {
             throw new NullPointerException("accountBalanceBox was  
null");
         }
         ....
         this.locale = locale;
         this.accountBalanceBox = accountBalanceBox;
         ....
     }

     public void render(Writer out) {

         StringTemplateGroup group = new StringTemplateGroup("st",  
ST_FILES_ROOT);
         StringTemplate dialog = group.getInstanceOf("dialog");
         dialog.setAttribute("headline", headline);
         dialog.setAttribute("logofilename", logofilename);
         ...
         dialog.setAttribute("accountBalanceBox", accountBalanceBox);
         ...

         try {

             dialog.write(new NoIndentWriter(out));
         }
         catch (IOException e) {
             throw new RuntimeException(e);
         }
     }
}

So people have to create an AccountBalanceBox to pass to the  
constructor of AccountPage. Can't create an AccountPage without one,  
and that AccountBalanceBox also implements View with a render method  
that does StringTemplate stuff. I would like to generate these View  
classes from a more concise DSL, so that render method would always  
do ST stuff. In practice it seems that it is just as safe to define a  
View or Renderable interface or something, and if an object passed to  
setAttribute implements that interface, call its render method rather  
than toString. Because as Terence points out in some of his papers,  
you could put anything into toString too, not just String generation.

Anyway, I can see there is some flexibility lost to template  
designers by pushing them towards a component approach like this, and  
I'm wondering if in practice that is a bad thing? Terence designed ST  
from real world experience, so if I went down this path I might just  
discover the same problems he already discovered.

The other thing I'm wondering, though, is why wouldn't I also want to  
have the option to suck in the relevant templates at build time and  
generate print statements in the render method instead of calling ST  
to do it dynamically (like how JSPs are compiled, but without all of  
the ST-like restrictions on what the template can do)?  I figured I  
could take each localized and themed version and make a separate  
private helper method in the class, and then have render call the  
appropriate one. Or have both options. If I do that, then I really  
reduce the flexibility. The template DSL becomes a static language  
not a dynamic one. But again I'm not sure if in practice that may not  
be better. I could still interpret it during development, or even  
during deployment if I want by checking every so often for updated  
template files. But I would be able to know at build time that every  
name used in the template is indeed a variable declared in the  
corresponding View class.

Bill

>
> Bill Venners wrote:
>> Hello, One more note on components. I'm aware I can call toString 
>> () on a component object, and get the behavior I described. But  
>> that of course means you build Strings in memory first and then  
>> write them to the output stream. It would be nice if I could write  
>> it to the output stream to begin with, which is why I want to be  
>> able to call render (Writer out). (I believe this still holds to  
>> ST's philosophy of separation of model and view, so long as  
>> <component>.render(Writer out) only renders another template with  
>> data already assembled by that component.) I did notice somewhere  
>> in the ST documentation that this is possible with ST itself, but  
>> as far as I know, only if you pass a tree of data-holders to an  
>> outermost ST template that then runs the show, likely by invoking  
>> templates in a structure similar to the data-holder tree's  
>> structure. And I meant Terence, not Terrence. Sorry. Bill On Dec  
>> 27, 2006, at 4:45 PM, Bill Venners wrote:
>>> Hello, I like the idea of components as well, but not the kind  
>>> you described originally whereby you call Java code to get  
>>> attributes. I have a notion of a view is that it is a tree of  
>>> component objects, each of which encapsulates data and the  
>>> ability to render that data in various themes and locales. So a  
>>> component would be a Java class that requires all data needed by  
>>> its template(s) to be passed to its constructor up front, and it  
>>> would store that data in instance variables. When someone calls  
>>> its render(Writer out) method, it would render the appropriate  
>>> template with that instance data. Each component would do the  
>>> enforcement of the separation of model and view that I really  
>>> like about ST. What ST pushed me towards is having those  
>>> components just be holders of data. So the Java programmer would  
>>> build up a tree of these data- holding components. The template  
>>> designers would create a conceptual tree of templates in a way,  
>>> by having templates refer to templates. Often the template tree  
>>> will have the same structure as the data- holder objects tree. So  
>>> why not let each component keep track of its own data and  
>>> templates, and do the rendering of itself. What I'd need in ST is  
>>> a way to call render() on components I suppose, and I don't  
>>> believe I have a way to do that in ST, because it would open up  
>>> the possibility of calling any arbitrary Java code. The other  
>>> thing that bugs me a bit is that I can't know at compile time if  
>>> I'm using a parameter in a template that doesn't exist in the  
>>> data. I'm tempted towards the JSP approach of taking some  
>>> template and translating it into print statements that could be  
>>> called by the render method of component objects. These would not  
>>> compile if there were naming problems. I know that Terrence came  
>>> to the design of ST while solving real problems of web pages and  
>>> code generation. Is there any reason why doing such a component  
>>> approach might be less useful in practice than the ST approach?  
>>> Thanks. Bill ---- Bill Venners President Artima, Inc. http:// 
>>> www.artima.com On Dec 27, 2006, at 10:28 AM, Adam Bennett wrote:
>>>> Thanks for answering my question, John. Let me summarize what I  
>>>> heard: --- StringTemplate does not support "componentization" if  
>>>> we define a single component as a combination of .java code and  
>>>> a .st template that is independent of the enclosing template  
>>>> that invoked it. This lack of support is intentional because it  
>>>> creates a situation where the view is pulling data from the  
>>>> model which is an anti- pattern that StringTemplate wishes to  
>>>> prevent. --- Fair enough. Even so I still find the idea of  
>>>> componentization attractive. I have this dreamy vision of  
>>>> programmers cranking out reusable components and web designers  
>>>> mixing and matching them. But perhaps it is not a worthwhile  
>>>> goal. Although I am not too complelled by the order of  
>>>> invocation argument, I can now see at least one short coming of  
>>>> this sort of componentization: exceptions. If the web server  
>>>> begins to evaluate a template and stream it to the client what  
>>>> happens if there is an exception while evaluating a sub  
>>>> component? At this point the response is committed so we can't  
>>>> redirect them to an error page. If we had gotten all the data up  
>>>> front as StringTemplate requires this would not be a problem.  
>>>> Thanks enlightening me. - Adam Bennett From: John Snyders  
>>>> [mailto:jjsnyders at rcn.com] To: Adam Bennett  
>>>> [mailto:adamb at videx.com], stringtemplate- interest at antlr.org  
>>>> Sent: Sat, 23 Dec 2006 20:54:42 -0800 Subject: RE:  
>>>> [stringtemplate-interest]Does StringTemplate support components?  
>>>> I'll try to answer. -----Original Message----- From:  
>>>> stringtemplate-interest-bounces at antlr.org [mailto:stringtemplate- 
>>>> interest-bounces at antlr.org]On Behalf Of Adam Bennett Sent:  
>>>> Saturday, December 23, 2006 2:49 AM To: stringtemplate- 
>>>> interest at antlr.org Subject: Re: [stringtemplate-interest]Does  
>>>> StringTemplate support components? I really appreciate all the  
>>>> suggestions but I haven't heard the answer yet. I'll try to  
>>>> reformulate my the question: Question 1) From my reading, it  
>>>> appears that StringTempate supports calling other templates as  
>>>> if it were a subroutine, right? [John Snyders] Correct I infer  
>>>> this from the "Expressions" document where it is talking about  
>>>> "Template References": "the enclosing page template would  
>>>> automatically create an instance of the referenced template and  
>>>> insert it" What I am focusing on here is "automatically create  
>>>> an instance". Beautiful. Less coding. Question 2) The  
>>>> documentation goes on to describe 2 ways of getting the  
>>>> necessary attributes to the subroutine template. 1) "Accessing  
>>>> Attributes Of Enclosing Template" [John Snyders] In a group file  
>>>> the templates must declare all the attributes they use so this  
>>>> really applies to the non-group (do these have a name?) .st  
>>>> templates. Essentially the attributes defined by the controller  
>>>> are globally available to all templates (unless hidden by an  
>>>> argument explicitly passed to the template in the call). 2)  
>>>> "Passing Parameters To Another Template" [John Snyders] This can  
>>>> be done with templates in .st or .stg files Are there any other  
>>>> ways? [John Snyders] Not really You see, what I am looking for  
>>>> is a way to help the web designers work independently of the  
>>>> programmers. Here's a scenario to describe what I mean. Let's  
>>>> say that our web application handles the URL "/OurWebApp/account/ 
>>>> summary.page" with Java code like this: StringTemplate st =  
>>>> group.GetInstanceOf("account/summary.st"); ... do some database  
>>>> queries st.setAttribute("foo", queryResult1); st.setAttribute 
>>>> ("bar", queryResult2); ... render the template and send it to  
>>>> the client browser The above code is maintained by the  
>>>> programmers. The web designers can tweak the template text to  
>>>> their hearts content. Initially it looks like: <html> <body> ...  
>>>> $foo$ $bar$ ... </body> </html>  But wait! The web designer is  
>>>> changes her [artistic] mind and decides to take the summary page  
>>>> the next level. She wants to show the users account balance so  
>>>> she makes a call to the accountBalanceBox template. <html>  
>>>> <body> ... $foo$ $bar$ $accountBalanceBox()$ ... </body> </html>  
>>>> [John Snyders] But this is not a presentation change! The web  
>>>> designer is responsible for presentation. The content of the  
>>>> page (the foo and bar and account balance) are the  
>>>> responsibility of the product owner which may be the customer  
>>>> and it is up to the web designer and programmer together to  
>>>> implement. In other words this is a change to the data model  
>>>> available to the page(s). But accountBalanceBox needs a $dollars 
>>>> $ attribute. This can only be determined by getting the user ID  
>>>> from the HttpSession and then querying the database for it. But  
>>>> that's the job of the programmer. If we have support for true  
>>>> componentization then the Java code that handles summary.page  
>>>> should NOT need to set the $dollars$ attribute. The general  
>>>> principle here is separation of concerns (http:// 
>>>> en.wikipedia.org/wiki/Separation_of_concerns). If  
>>>> accountBalanceBox is made to be a logical component, which  
>>>> includes both a template as well as some Java code, it gives web  
>>>> designers full freedom to mix and match the components that have  
>>>> been provided by the programmers. [John Snyders] but from the  
>>>> HTML/HTTP point of view summary.page is monolithic and this is  
>>>> what ST must generate. You can have one template for the overall  
>>>> page and another seperate template for the accountBalanceBox.  
>>>> You can have component code for getting foo and bar and a  
>>>> seperate component for getting the account balance but there is  
>>>> just one HTTP request for the summary page and one HTML reply  
>>>> that includes both information. I think one of the suggestions  
>>>> was to have the controller call the account balance component  
>>>> which would invoke its own ST template with its own model and  
>>>> return a string. That string would then be passed as an  
>>>> attribute to the overall page template. I don't like doing it  
>>>> this way because I think that the page should be generated with  
>>>> one call to string template. My feeling is that the controller  
>>>> needs to know about all the model data that a given page needs.  
>>>> It may not know the details of what is in the model but it knows  
>>>> which components to call to get it. So it calls one component to  
>>>> get the foo and bar then calls another to get the account  
>>>> balance. These components contribute to the model in the form of  
>>>> attributes. I have been using ST for generating the presentation  
>>>> of a web app and this is more or less how I do it. I started  
>>>> with the non-group templates but quickly moved to the group  
>>>> format. A concern may be a large number of arguments to pass  
>>>> around. There are 2 things that can help here. One is that when  
>>>> calling a template you can use ... to have attributes pass  
>>>> through to called templates. The other is that attributes can  
>>>> reference arbitrarily deeply nested object structure. So you  
>>>> could have your top level template with a single argument called  
>>>> model and have that object (or Map) contain all the different  
>>>> parts of the model as children Ex: $model.foo$ $model.bar$  
>>>> $accountBalanceBox(balance=model.balance,...)$ Some other  
>>>> options (I have not tried these yet) to reduce interaction  
>>>> between components: If using AJAX the request for the foo and  
>>>> bar data may be totally different from the accountBalanceBox.  
>>>> With AJAX much of the controller moves to the client. In the  
>>>> extreme the dynamic part of the web app is just serving data and  
>>>> there is no need for ST or any template engine. If you don't  
>>>> like the controler knowing what parts of the model is needed for  
>>>> a given page that information could be configured in an external  
>>>> data file (like a struts tiles def) which the controler reads.  
>>>> Then if the controler knows what to call to get model parts a,  
>>>> b, and c the page designer can decide that the account summary  
>>>> page needs a and b and the orders page needs b and c. So I think  
>>>> the mechanism I am after is some sort of hook. As StringTemplate  
>>>> encounters accountBalanceBox it calls my Java function which  
>>>> gives me a chance to provide the necessary attributes. Such a  
>>>> hook might look like this: void templatePreprocess 
>>>> (StringTemplate st, StringTemplateContext context) { if  
>>>> (st.getName().equals("accountBalanceBox")) { HttpSession session  
>>>> = context.getAttribute("session"); int userID =  
>>>> session.getAttirbute("userID"); st.setAttribute("dollars",  
>>>> database.getBalance(userID)); return; } ... } Does such a  
>>>> mechanism exist? [John Snyders] No, All model data must be given  
>>>> to the template before it is invoked with toString (or write)  
>>>> Section 7.1 of Enforcing Strict ModelView Separation in Template  
>>>> Engines describes why pulling data from the template breaks  
>>>> separation. Once you have more than one hook being called there  
>>>> can be order dependent interactions that can cause problems. For  
>>>> ages hook1 is called before hook2 and all is well. Then one day  
>>>> the page designer moves things around and now hook2 is called  
>>>> before hook1 and the code breaks. Perhaps you are now trying to  
>>>> get something out of the session before it is there. In many  
>>>> case there are no order dependencies but in general it is not  
>>>> possible for the developer to defensively code so that the code  
>>>> can be called in any order. Thanks much. - Adam I have been  
>>>> using ST for a few months now for generating HTML. It takes some  
>>>> getting used to but I like it better than what I had done in the  
>>>> past which includes JSP and JSP/Struts.  -John  
>>>> _______________________________________________ stringtemplate- 
>>>> interest mailing list stringtemplate-interest at antlr.org http:// 
>>>> www.antlr.org:8080/mailman/listinfo/stringtemplate-interest
>>> _______________________________________________ stringtemplate- 
>>> interest mailing list stringtemplate-interest at antlr.org http:// 
>>> www.antlr.org:8080/mailman/listinfo/stringtemplate-interest
>> _______________________________________________ stringtemplate- 
>> interest mailing list stringtemplate-interest at antlr.org http:// 
>> www.antlr.org:8080/mailman/listinfo/stringtemplate-interest
>


