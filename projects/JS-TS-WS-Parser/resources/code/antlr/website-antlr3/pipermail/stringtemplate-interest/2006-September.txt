From open.zone at virgin.net  Fri Sep  1 07:32:50 2006
From: open.zone at virgin.net (Micheal J)
Date: Fri Sep  1 07:35:36 2006
Subject: [stringtemplate-interest] Using StringTemplate and ASTFrame
	inANTLR in C#
In-Reply-To: <9604cc9f0608261444y1ecca10du76a757028e613007@mail.gmail.com>
Message-ID: <032a01c6cdd3$8516df20$c704a8c0@hercules>

What version of StringTemplate are you using (you mention trying to build
2.2 in your post)?. If possible, use the latest version - 2.3b7 (or is it
2.3b9?)...they are stable despite eing labelled as betas.
 
Only issue I can remember is that 2.3b7+ are strong named assemblies.
 
Micheal

-----------------------
The best way to contact me is via the list/forum. My time is very limited. 

-----Original Message-----
From: stringtemplate-interest-bounces@antlr.org
[mailto:stringtemplate-interest-bounces@antlr.org] On Behalf Of kototama
kototama
Sent: 26 August 2006 22:45
To: stringtemplate-interest@antlr.org
Subject: [stringtemplate-interest] Using StringTemplate and ASTFrame inANTLR
in C#


Hello,

I am using ANTLR 2.7.6  in C# for a compiler and StringTemplate.
I used the antlr.runtime.dll delivered with StringTemplate I've got the
following error :

" 'antlr.collections.AST' is defined in an unreferenced assembly. You should
reference the assembly ' antlr.runtime, Version=2.7.6.2, Culture=neutral,
PublicKeyToken=null'.  
"

When I use my own version of antlr.runtime.dll I have this error a
TypeInitializationException here :

StreamReader rd = new StreamReader(templatePath_ + "/CCode.st");
            template_ = new StringTemplateGroup(rd); // <--- here

since StringTemplate expects this dll 'antlr.runtime, Version= 2.7.6.2
<http://2.7.6.2> , Culture=neutral, PublicKeyToken=d7701e059243744f'

I tried to build my own version of StringTemplate 2.2 by referencing my own
antlr.runtime.dll but then I've got this error :

'antlr.ASTPair' does not contains a definition for 'GetInstance'  (like if
stringtemplate was built for ANTLR 2.7.5 ?!)

I really need your help! Thanks in advance :)





-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org:8080/pipermail/stringtemplate-interest/attachments/20060901/98fec160/attachment.html
From open.zone at virgin.net  Fri Sep  1 09:32:16 2006
From: open.zone at virgin.net (Micheal J)
Date: Fri Sep  1 09:34:55 2006
Subject: [stringtemplate-interest] Embedded loader problems
In-Reply-To: <51631.10.238.10.70.1156804935.webmail@10.238.10.70>
Message-ID: <033f01c6cde4$3141a0e0$c704a8c0@hercules>

Hi,

[...]
> // before the string template group can be used, the static 
> instance // needs to know which loader to use 
> StringTemplateGroup.RegisterGroupLoader(embeddedResourceGroupLoader);
> 
> StringTemplateGroup stringTemplateGroup = new StringTemplateGroup(
>     WebPageConstant.GROUP_TYPE_NAME,
>     embeddedResourceTemplateLoader);
> 
> StringTemplate stringTemplate =
>     stringTemplateGroup.LookupTemplate(templateTypeName);

I find the static members such as StringTemplateGroup.RegisterGroupLoader()
in the ST[#] library to be quite "ugly" actually. And they have implications
for use in a _truly_ multi-threaded environment (a real concern now that
dual-core and dual-cpu desktops are commonplace).

StringTemplateGroup should really be a self-contained manager for a
collection of StringTemplate instances. With support extending the managed
domain to include the ST notion of a tree of related StringTemplateGroups.

In this scheme, RegisterGroupLoader() et al would be an instance member on
StringTemplateGroup and it's effect would be limited to the particular
instance.

Micheal

From open.zone at virgin.net  Fri Sep  1 09:32:16 2006
From: open.zone at virgin.net (Micheal J)
Date: Fri Sep  1 09:34:56 2006
Subject: [stringtemplate-interest] added new doc sections
In-Reply-To: <1059BB8C-FDE0-497C-A84F-C26BF1B57475@cs.usfca.edu>
Message-ID: <033e01c6cde4$30907950$c704a8c0@hercules>

Hi,

>   I have reorganized the StringTemplate manual so that it is broken
> up into sections.  As you may have seen Kunle went to the hard work  
> to merge examples for all of the different languages Java, Python, C#.

Before the re-org, it was possible to print the whole manual as a PDF
document from the page itself. That was a *very* useful feature. Can I still
do that with the re-org'ed version (I've tried but, I can't get the whole ST
manual to print)?

The wiki is overdue a structural re-org to better support multiple versions
of ST simultaneously. Once 2.3 goes out, it would be nice to have the
version-specific documentation for 2.2 still available along with the new
2.3 documentation. Same for release notes, changelists etc.

Micheal

-----------------------
The best way to contact me is via the list/forum. My time is very limited.

From parrt at cs.usfca.edu  Fri Sep  1 10:53:33 2006
From: parrt at cs.usfca.edu (Terence Parr)
Date: Fri Sep  1 10:53:41 2006
Subject: [stringtemplate-interest] antlr project web site will be flaky
Message-ID: <6ADC0F59-52C4-47B4-B733-56454B4F1489@cs.usfca.edu>

Hi, moving antlr.org etc... to much faster box hopefully in the next  
few hours...expect issues over the weekend.
Ter
From parrt at cs.usfca.edu  Fri Sep  1 11:01:02 2006
From: parrt at cs.usfca.edu (Terence Parr)
Date: Fri Sep  1 11:01:04 2006
Subject: [stringtemplate-interest] added new doc sections
In-Reply-To: <033e01c6cde4$30907950$c704a8c0@hercules>
References: <033e01c6cde4$30907950$c704a8c0@hercules>
Message-ID: <0A023153-4E23-4D01-AE9B-C1E99C6D7030@cs.usfca.edu>


On Sep 1, 2006, at 9:32 AM, Micheal J wrote:
> Before the re-org, it was possible to print the whole manual as a PDF
> document from the page itself. That was a *very* useful feature.  
> Can I still
> do that with the re-org'ed version (I've tried but, I can't get the  
> whole ST
> manual to print)?

hi Michael,
yes I thought carefully about this before I reorganized because you  
cannot seem to print the whole thing at once.  I decided that  
hierarchal  chapter list was better.  I couldn't find anything in the  
manual ;)

> The wiki is overdue a structural re-org to better support multiple  
> versions
> of ST simultaneously. Once 2.3 goes out, it would be nice to have the
> version-specific documentation for 2.2 still available along with  
> the new
> 2.3 documentation. Same for release notes, changelists etc.

  agreed.  That is why I started a new copy of the documentation  
rather than modifying the old.  I will rename that as 2.2 documentation

Ter
From parrt at cs.usfca.edu  Fri Sep  1 11:04:29 2006
From: parrt at cs.usfca.edu (Terence Parr)
Date: Fri Sep  1 11:04:33 2006
Subject: [stringtemplate-interest] Embedded loader problems
In-Reply-To: <033f01c6cde4$3141a0e0$c704a8c0@hercules>
References: <033f01c6cde4$3141a0e0$c704a8c0@hercules>
Message-ID: <AF2CBCE2-91B0-40F5-9F86-00871050F986@cs.usfca.edu>


On Sep 1, 2006, at 9:32 AM, Micheal J wrote:

> Hi,
>
> [...]
>> // before the string template group can be used, the static
>> instance // needs to know which loader to use
>> StringTemplateGroup.RegisterGroupLoader(embeddedResourceGroupLoader);
>>
>> StringTemplateGroup stringTemplateGroup = new StringTemplateGroup(
>>     WebPageConstant.GROUP_TYPE_NAME,
>>     embeddedResourceTemplateLoader);
>>
>> StringTemplate stringTemplate =
>>     stringTemplateGroup.LookupTemplate(templateTypeName);
>
> I find the static members such as  
> StringTemplateGroup.RegisterGroupLoader()
> in the ST[#] library to be quite "ugly" actually. And they have  
> implications
> for use in a _truly_ multi-threaded environment (a real concern now  
> that
> dual-core and dual-cpu desktops are commonplace).

correct.  I really hated to do that but I had no other object that  
was managing things.  Your suggestion of a new StringTemplateManager  
class is probably a good idea.  After discussion, I'm happy to make  
this change for version 2.3.  Better to do it now than later breaking  
backward compatibility.

   The problem here is that we would then need to tell each group who  
manages it, which can cause some of the similar problems  That caused  
me to make a static member.   well, I think anyway.

> StringTemplateGroup should really be a self-contained manager for a
> collection of StringTemplate instances. With support extending the  
> managed
> domain to include the ST notion of a tree of related  
> StringTemplateGroups.

yep.

> In this scheme, RegisterGroupLoader() et al would be an instance  
> member on
> StringTemplateGroup and it's effect would be limited to the particular
> instance.

  so would we have to use this new StringTemplateManager thing to  
create new instances of groups?  It could be a very serious change to  
the functionality.

Ter

From open.zone at virgin.net  Fri Sep  1 13:20:51 2006
From: open.zone at virgin.net (Micheal J)
Date: Fri, 1 Sep 2006 21:20:51 +0100
Subject: [stringtemplate-interest] added new doc sections
In-Reply-To: <0A023153-4E23-4D01-AE9B-C1E99C6D7030@cs.usfca.edu>
Message-ID: <034b01c6ce04$1f8552a0$c704a8c0@hercules>

Hi,

> hi Michael,
> yes I thought carefully about this before I reorganized because you  
> cannot seem to print the whole thing at once.  I decided that  
> hierarchal  chapter list was better.  I couldn't find 
> anything in the  
> manual ;)

Ok, are you saying that I can still print the whole manual as a PDF doc for
offline use?

What did you feel was wrong with the old whole-manual-on-a-page format?

> > The wiki is overdue a structural re-org to better support multiple
> > versions
> > of ST simultaneously. Once 2.3 goes out, it would be nice 
> to have the
> > version-specific documentation for 2.2 still available along with  
> > the new
> > 2.3 documentation. Same for release notes, changelists etc.
> 
>   agreed.  That is why I started a new copy of the documentation  
> rather than modifying the old.  I will rename that as 2.2 
> documentation

Cool.

Micheal

-----------------------
The best way to contact me is via the list/forum. My time is very limited.


From parrt at cs.usfca.edu  Fri Sep  1 13:43:00 2006
From: parrt at cs.usfca.edu (Terence Parr)
Date: Fri, 1 Sep 2006 13:43:00 -0700
Subject: [stringtemplate-interest] all clear signal!
Message-ID: <7F32A6B2-E1A3-422E-926F-88427BB000F7@cs.usfca.edu>

Ok, looks like new antlr.org box is up, running, and DNS is  
propagating.  If your DNS cache pays attention to TTL then you should  
have the new values.

perforce server has been upgraded to latest version and is up at  
antlr.org:666.  visual clients should all work with it now.  use  
antlr2.cs.usfca.edu as IP if antlr.org has not propagated.

Ter

From open.zone at virgin.net  Fri Sep  1 13:41:06 2006
From: open.zone at virgin.net (Micheal J)
Date: Fri, 1 Sep 2006 21:41:06 +0100
Subject: [stringtemplate-interest] Embedded loader problems
In-Reply-To: <AF2CBCE2-91B0-40F5-9F86-00871050F986@cs.usfca.edu>
Message-ID: <034e01c6ce06$f3940e90$c704a8c0@hercules>

> > Hi,
> >
> > [...]
> >> // before the string template group can be used, the
> static instance
> >> // needs to know which loader to use
> >> 
> StringTemplateGroup.RegisterGroupLoader(embeddedResourceGroupLoader);
> >>
> >> StringTemplateGroup stringTemplateGroup = new StringTemplateGroup(
> >>     WebPageConstant.GROUP_TYPE_NAME,
> >>     embeddedResourceTemplateLoader);
> >>
> >> StringTemplate stringTemplate =
> >>     stringTemplateGroup.LookupTemplate(templateTypeName);
> >
> > I find the static members such as
> > StringTemplateGroup.RegisterGroupLoader()
> > in the ST[#] library to be quite "ugly" actually. And they have
> > implications
> > for use in a _truly_ multi-threaded environment (a real 
> concern now
> > that
> > dual-core and dual-cpu desktops are commonplace).
> 
> correct.  I really hated to do that but I had no other object that
> was managing things.  Your suggestion of a new StringTemplateManager  
> class is probably a good idea.  After discussion, I'm happy to make  
> this change for version 2.3.  Better to do it now than later 
> breaking  
> backward compatibility.
> 
>    The problem here is that we would then need to tell each
> group who  
> manages it, which can cause some of the similar problems  
> That caused  
> me to make a static member.   well, I think anyway.

My original motivation for suggesting the StringTemplateManager was to
minimize the effects of the breaking changes to StringTemplateGroup. That is
to say StringTemplateManager was to be a refactoring/update of
StringTemplateGroup - without static API members - that will eventually
_replace_ StringTemplateGroup. It was to be functionally equivalent to the
current StringTemplateGroup class.

You seem to be suggesting a StringTemplateManager class that manages
StringTemplateGroup instances. I'm not sure that is needed. The current
scheme with two types representing templates (StringTemplate) and template
collection (StringTemplateGroup or perhaps StringTemplateManager in future)
would seem to be sufficient.

One question - that you alluded to - is "what Group/Manager should directly
created StringTemplate instances belong to?". I suggest what we have now - a
"default" Group/Manager exposed as a [private?] static member of
StringTemplateGroup/StringTemplateManager.

> > StringTemplateGroup should really be a self-contained manager for a
> > collection of StringTemplate instances. With support extending the
> > managed
> > domain to include the ST notion of a tree of related  
> > StringTemplateGroups.
> 
> yep.
> 
> > In this scheme, RegisterGroupLoader() et al would be an instance 
> > member on StringTemplateGroup and it's effect would be limited to 
> > the
> particular
> > instance.
> 
>   so would we have to use this new StringTemplateManager thing to
> create new instances of groups?  It could be a very serious 
> change to  
> the functionality.

Well, my proposed StringTemplateManager is functionally equivalent to a
StringTemplateGroup. If we can live with breaking changes to
StringTemplateGroup, we don't need to create StringTemplateManager.

If not, we create StringTemplateManager as a clone of StringTemplateGroup,
make the non-static API changes there and mark StringTemplateGroup as
deprecated. This allows existing apps to run unchanged whilst still allowing
ST to add [more] efficient support for multi-threaded use cases.


Micheal


From Kunle_Odutola at hotmail.com  Fri Sep  1 17:45:49 2006
From: Kunle_Odutola at hotmail.com (Kunle Odutola)
Date: Sat, 2 Sep 2006 01:45:49 +0100
Subject: [stringtemplate-interest] [antlr-dev] should I finally release
	ST 2.3?
References: <034401c6cde5$85f52c00$c704a8c0@hercules>
Message-ID: <BAY120-DAV7055EA34148B2344AB87F813D0@phx.gbl>

Hi,

> > Ok, september 6th, I'm releasing 2.3 ST.  I'm calling a code freeze
> > right now unless somehow has a serious bug for me to fix. :)
> >
>
> Perhaps this is a litle late but, getting rid of the static members that
> form part of the API (particularly on the StringTemplateGroup class) would
> be very nice indeed.
>
> I am aware that some locking code has been added to 2.3 to mitigate
> multi-threading issues. I am also aware that this would be a breaking
change
> (to ease the transition we could for instance add a new
> StringTemplateManager class and deprecate StringTemplateGroup - i.e.
> StringTemplateManager will eventually _replace_ StringTemplateGroup).
>
> If it is indeed too late, this should be a feature for ST 3.0....

Deferring this to the next version works better for me. I'd rather not (and
won't have the time anyways) do anything drastic with ST# in the short term.
I'll have a look at the locking code again just to make sure I haven't done
anything obviously stupid.

As for release dates, shouldn't ST released be delayed for the ANTLR 2.7.7
release?. Would be sad if the antlr binaries bundled with ST were out of
date (with respect to latest ANTLR) only a couple weeks after ST was
released...

Kunle


From kototamo at gmail.com  Sat Sep  2 11:37:09 2006
From: kototamo at gmail.com (kototama kototama)
Date: Sat, 2 Sep 2006 20:37:09 +0200
Subject: [stringtemplate-interest] Using StringTemplate and ASTFrame
	inANTLR in C#
In-Reply-To: <032a01c6cdd3$8516df20$c704a8c0@hercules>
References: <9604cc9f0608261444y1ecca10du76a757028e613007@mail.gmail.com>
	<032a01c6cdd3$8516df20$c704a8c0@hercules>
Message-ID: <9604cc9f0609021137v3e1e16e7m6c93de2930215b2a@mail.gmail.com>

On 9/1/06, Micheal J <open.zone at virgin.net> wrote:
>
>  What version of StringTemplate are you using (you mention trying to build
> 2.2 in your post)?. If possible, use the latest version - 2.3b7 (or is it
> 2.3b9?)...they are stable despite eing labelled as betas.
>
> Only issue I can remember is that 2.3b7+ are strong named assemblies.
>
>
I'm using StringTemplate 2.3b10 !
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org:8080:8080/pipermail/stringtemplate-interest/attachments/20060902/3712eee8/attachment.html 

From parrt at cs.usfca.edu  Sat Sep  2 14:04:19 2006
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sat, 2 Sep 2006 14:04:19 -0700
Subject: [stringtemplate-interest] added new doc sections
In-Reply-To: <034b01c6ce04$1f8552a0$c704a8c0@hercules>
References: <034b01c6ce04$1f8552a0$c704a8c0@hercules>
Message-ID: <FEA568BE-1FA3-4845-AD60-4DFF0ED48EDD@cs.usfca.edu>


On Sep 1, 2006, at 1:20 PM, Micheal J wrote:
> Ok, are you saying that I can still print the whole manual as a PDF  
> doc for
> offline use?

Actually I can't see a way to do that.  It's pretty easy to build one  
though I would imagine from multiple PDF files... the doc does not  
change that often.

> What did you feel was wrong with the old whole-manual-on-a-page  
> format?

I don't like working with very large files. I do like organizing  
things, but I guess we could use anchors/labels within a single  
page.  I just like multiple files because there's less chance that by  
messing up one file I mess up the entire page.  Further, it's easier  
for multiple people to work on the documentation and add comments if  
there are multiple files.  Also the comments are easier to do when  
they are for a specific page, subsection of the documentation.

Ok, this documentation is a lot of work.  There have been many  
enhancements!

  I am now thinking 3.0 makes more sense because it is a much bigger  
change from 2.2 to 2.3 than from 1.x to 2.0. ;)   anybody have an  
objection?

Ter

From parrt at cs.usfca.edu  Sat Sep  2 14:06:18 2006
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sat, 2 Sep 2006 14:06:18 -0700
Subject: [stringtemplate-interest] String manipulations
In-Reply-To: <200608310842.53043.e.papegaaij@student.utwente.nl>
References: <200608281807.16257.e.papegaaij@student.utwente.nl>
	<200608290832.13803.e.papegaaij@student.utwente.nl>
	<C7FD9215-BB6B-46D3-B827-1BA9BC5950BF@cs.usfca.edu>
	<200608310842.53043.e.papegaaij@student.utwente.nl>
Message-ID: <D85199CF-9C30-4F6B-A8AC-338AB0D83C0C@cs.usfca.edu>


On Aug 30, 2006, at 11:42 PM, Emond Papegaaij wrote:
> Maybe it is an idea to look at the functions that are available in  
> XSLT and
> add similar functionality to StringTemplate? You could see them as
> predefined templates, and perhaps even allow a developer to add his  
> own
> functions (such as Xalan Java extensions). I think functions like  
> these
> will allow a more clean separation between model and view, because the
> model no longer needs to perform transformations that are actually  
> part of
> the view. There is however a risk of introducing too much power, which
> allows a developer to put logic in the view. However I do think  
> that if
> the functions remain fairly simple (and don't have side-effects)  
> this risk
> is fairly small.

I agree.  There should be a standard library of common web related  
transformations that come with StringTemplate so that there is no  
danger of a programmer opening up a huge hole to his model just to  
get these things. if they come with the application there is no way  
that they could be considered part of the developer's model even if  
they are computations.

Ter



From o.flege at market-maker.de  Sun Sep  3 23:54:45 2006
From: o.flege at market-maker.de (Oliver Flege)
Date: Mon, 04 Sep 2006 08:54:45 +0200
Subject: [stringtemplate-interest] Embedded loader problems
In-Reply-To: <034e01c6ce06$f3940e90$c704a8c0@hercules>
References: <034e01c6ce06$f3940e90$c704a8c0@hercules>
Message-ID: <44FBCDB5.3060004@market-maker.de>

Hi,

> My original motivation for suggesting the StringTemplateManager was to
> minimize the effects of the breaking changes to StringTemplateGroup. That is
> to say StringTemplateManager was to be a refactoring/update of
> StringTemplateGroup - without static API members - that will eventually
> _replace_ StringTemplateGroup. It was to be functionally equivalent to the
> current StringTemplateGroup class.
> 
> You seem to be suggesting a StringTemplateManager class that manages
> StringTemplateGroup instances. I'm not sure that is needed. The current
> scheme with two types representing templates (StringTemplate) and template
> collection (StringTemplateGroup or perhaps StringTemplateManager in future)
> would seem to be sufficient.

First, I'd very much appreciate to get rid of the static members in ST as the
current implementation complicates setting up different group hierarchies
(unless you use different classloaders, which brings about problems of its own).

But then I do not think that it'd be sufficient to transform static API members
into non-static ones, as that would ignore the static fields "nameToGroupMap" and
"nameToInterfaceMap" in STG. The most appropriate solution I can think of right
now is the following:

# StringTemplateRealm
- collection of groups
- completely independent of other realms (i.e., no static members)
- maintains nameToGroupMap and nameToInterfaceMap
- may have group loader assigned
# StringTemplateGroup
- belongs to exactly one realm
- collection of templates,
- may refer to a super group
- may implement interfaces
- may have group loader assigned
# StringTemplate
- just as before

As removing the static members would bring about an API change, I would prefer to
see that in ST 3.0 and to release the changes that have been made so far as 2.3



Oliver


From jgray at siberra.com  Tue Sep  5 11:41:46 2006
From: jgray at siberra.com (Jeremy Gray)
Date: Tue, 5 Sep 2006 11:41:46 -0700
Subject: [stringtemplate-interest] String manipulations
Message-ID: <9E60A7FA5322F841856BE6E670F3E7B6182C0C30@CPREXN020-EVS.itdmis02.futureshop.com>

Terence, if such functions were to be provided in a standard library of
StringTemplate, wouldn't they essentially become considered part of the
language and start ST down the slippery slope that you've mentioned so
many times in your whitepapers and presentation materials?

Jeremy

-----Original Message-----
From: stringtemplate-interest-bounces at antlr.org
[mailto:stringtemplate-interest-bounces at antlr.org] On Behalf Of Terence
Parr
Sent: Saturday, September 02, 2006 2:06 PM
To: stringtemplate-interest
Subject: Re: [stringtemplate-interest] String manipulations


On Aug 30, 2006, at 11:42 PM, Emond Papegaaij wrote:
> Maybe it is an idea to look at the functions that are available in  
> XSLT and
> add similar functionality to StringTemplate? You could see them as
> predefined templates, and perhaps even allow a developer to add his  
> own
> functions (such as Xalan Java extensions). I think functions like  
> these
> will allow a more clean separation between model and view, because the
> model no longer needs to perform transformations that are actually  
> part of
> the view. There is however a risk of introducing too much power, which
> allows a developer to put logic in the view. However I do think  
> that if
> the functions remain fairly simple (and don't have side-effects)  
> this risk
> is fairly small.

I agree.  There should be a standard library of common web related  
transformations that come with StringTemplate so that there is no  
danger of a programmer opening up a huge hole to his model just to  
get these things. if they come with the application there is no way  
that they could be considered part of the developer's model even if  
they are computations.

Ter


_______________________________________________
stringtemplate-interest mailing list
stringtemplate-interest at antlr.org
http://www.antlr.org:8080/mailman/listinfo/stringtemplate-interest



From parrt at cs.usfca.edu  Tue Sep  5 16:12:27 2006
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue, 5 Sep 2006 16:12:27 -0700
Subject: [stringtemplate-interest] Embedded loader problems
In-Reply-To: <44FBCDB5.3060004@market-maker.de>
References: <034e01c6ce06$f3940e90$c704a8c0@hercules>
	<44FBCDB5.3060004@market-maker.de>
Message-ID: <7BD238A8-06ED-4B4E-9C88-129A7FF898B8@cs.usfca.edu>


On Sep 3, 2006, at 11:54 PM, Oliver Flege wrote:
> First, I'd very much appreciate to get rid of the static members in  
> ST as the
> current implementation complicates setting up different group  
> hierarchies
> (unless you use different classloaders, which brings about problems  
> of its own).

Hi :)

In general, I thought that a single group loader would be okay  
because usually the directory structure indicates where load stuff so  
multiple loaders would not be necessary.  That said, I am  
uncomfortable with static methods and members.

> But then I do not think that it'd be sufficient to transform static  
> API members
> into non-static ones, as that would ignore the static fields  
> "nameToGroupMap" and
> "nameToInterfaceMap" in STG. The most appropriate solution I can  
> think of right
> now is the following:
>
> # StringTemplateRealm
> - collection of groups
> - completely independent of other realms (i.e., no static members)
> - maintains nameToGroupMap and nameToInterfaceMap
> - may have group loader assigned

   An interesting idea, but we would need to identify how often you  
need multiple loaders.

> # StringTemplateGroup
> - belongs to exactly one realm
> - collection of templates,
> - may refer to a super group
> - may implement interfaces
> - may have group loader assigned
> # StringTemplate
> - just as before
>
> As removing the static members would bring about an API change, I  
> would prefer to
> see that in ST 3.0 and to release the changes that have been made  
> so far as 2.3

Yes that makes sense as I am about ready to push this out.

Ter


From parrt at cs.usfca.edu  Tue Sep  5 16:14:02 2006
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue, 5 Sep 2006 16:14:02 -0700
Subject: [stringtemplate-interest] 3.0 vs 2.3
Message-ID: <1756482F-1EA0-4A8F-AD8E-1676F494E14C@cs.usfca.edu>

Hi,

Given the massive change from 2.2 to 2.3 I think it's ridiculous to  
keep it at minor numbers. I think 3.0 is a more reasonable change.     
Any strong objections? I doubt I can get the documentation done, but  
I'm hoping to go out tomorrow still.  I need to get antler 2.7.7 out  
before.

Terence

From parrt at cs.usfca.edu  Tue Sep  5 16:20:09 2006
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue, 5 Sep 2006 16:20:09 -0700
Subject: [stringtemplate-interest] String manipulations
In-Reply-To: <9E60A7FA5322F841856BE6E670F3E7B6182C0C30@CPREXN020-EVS.itdmis02.futureshop.com>
References: <9E60A7FA5322F841856BE6E670F3E7B6182C0C30@CPREXN020-EVS.itdmis02.futureshop.com>
Message-ID: <491863D0-FEDB-4C84-B0A3-5122A93AB773@cs.usfca.edu>


On Sep 5, 2006, at 11:41 AM, Jeremy Gray wrote:

> Terence, if such functions were to be provided in a standard  
> library of
> StringTemplate, wouldn't they essentially become considered part of  
> the
> language and start ST down the slippery slope that you've mentioned so
> many times in your whitepapers and presentation materials?

hi Jeremy, an excellent question and I am glad that people are  
defending this principle! I think I said it best in the enforcing  
separation paper (section "8.1 ttribute rendering"):

"...formalizing the renderer and encapsulating rendering operations  
into an application independent service allows the renderer for a  
given target language such as HTML to be supplied with an engine.  
Because the renderer will not be part of a specific application, it  
cannot constitute an entanglement of an application?s model and view.  
Technically a programmer could alter the HTML renderer or attach a  
?malicious? renderer that altered a specific model?s data, but that  
risk already exists: someone could easily alter the source for a  
strict engine to allow violations."

That said, one should be careful because you are starting down a  
slippery slope.  You could for example pass data to a function that  
was really a Python interpreter that understood the parameter to be a  
string containing a Python program.  That would be bad.  I think if  
we stick to escaping text for HTML and two or three other functions  
we will be okay.  In a sense converting a 32-bit binary integer to a  
string of ASCII characters via toString() is already one of these  
kinds of computations.  As long as they are built-in, I don't have a  
big problem with it.  I start to really object when people want to  
call their own code because then we have totally destroyed for  
separation.  If you cannot call your own model, I think we are still  
okay.  Agree?  Disagree?

Ter


From jgray at siberra.com  Tue Sep  5 17:03:19 2006
From: jgray at siberra.com (Jeremy Gray)
Date: Tue, 5 Sep 2006 17:03:19 -0700
Subject: [stringtemplate-interest] String manipulations
Message-ID: <9E60A7FA5322F841856BE6E670F3E7B6182C1218@CPREXN020-EVS.itdmis02.futureshop.com>

Agreed. I just had to play the role of Terence for a moment. ;)

Jeremy

-----Original Message-----
From: stringtemplate-interest-bounces at antlr.org
[mailto:stringtemplate-interest-bounces at antlr.org] On Behalf Of Terence
Parr
Sent: Tuesday, September 05, 2006 4:20 PM
To: stringtemplate-interest
Subject: Re: [stringtemplate-interest] String manipulations


On Sep 5, 2006, at 11:41 AM, Jeremy Gray wrote:

> Terence, if such functions were to be provided in a standard  
> library of
> StringTemplate, wouldn't they essentially become considered part of  
> the
> language and start ST down the slippery slope that you've mentioned so
> many times in your whitepapers and presentation materials?

hi Jeremy, an excellent question and I am glad that people are  
defending this principle! I think I said it best in the enforcing  
separation paper (section "8.1 ttribute rendering"):

"...formalizing the renderer and encapsulating rendering operations  
into an application independent service allows the renderer for a  
given target language such as HTML to be supplied with an engine.  
Because the renderer will not be part of a specific application, it  
cannot constitute an entanglement of an application's model and view.  
Technically a programmer could alter the HTML renderer or attach a  
"malicious" renderer that altered a specific model's data, but that  
risk already exists: someone could easily alter the source for a  
strict engine to allow violations."

That said, one should be careful because you are starting down a  
slippery slope.  You could for example pass data to a function that  
was really a Python interpreter that understood the parameter to be a  
string containing a Python program.  That would be bad.  I think if  
we stick to escaping text for HTML and two or three other functions  
we will be okay.  In a sense converting a 32-bit binary integer to a  
string of ASCII characters via toString() is already one of these  
kinds of computations.  As long as they are built-in, I don't have a  
big problem with it.  I start to really object when people want to  
call their own code because then we have totally destroyed for  
separation.  If you cannot call your own model, I think we are still  
okay.  Agree?  Disagree?

Ter

_______________________________________________
stringtemplate-interest mailing list
stringtemplate-interest at antlr.org
http://www.antlr.org:8080/mailman/listinfo/stringtemplate-interest



From parrt at cs.usfca.edu  Tue Sep  5 18:11:40 2006
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue, 5 Sep 2006 18:11:40 -0700
Subject: [stringtemplate-interest] added debugging page
Message-ID: <145D0C6C-928D-470D-87EE-9531B73AACFC@cs.usfca.edu>

Hi, I added a page on debugging in the new manual:

http://www.antlr.org/wiki/display/ST/Debugging

  perhaps somebody with some experience debugging difficult template  
structures can add some notes or update the doc.

Ter

From parrt at cs.usfca.edu  Wed Sep  6 13:36:58 2006
From: parrt at cs.usfca.edu (Terence Parr)
Date: Wed, 6 Sep 2006 13:36:58 -0700
Subject: [stringtemplate-interest] StringTemplate 3.0 released!
Message-ID: <BEB34413-2B3C-4C46-95CC-9577D4A64FDC@cs.usfca.edu>

Hi!   After more than a year of development, a major improvement to  
StringTemplate is available. Version 3.0 (was previously 2.3)  
includes many important new features such as group interfaces,  
template regions, and automatic line wrapping. There are numerous bug  
fixes as well. See the complete release notes here:

http://www.antlr.org/wiki/display/ST/StringTemplate+3.0+Release+Notes

I have moved the documentation entirely to the wiki and it is not  
included in the distribution a more:

http://www.antlr.org/wiki/display/ST/StringTemplate+3.0+Documentation

Download:

http://www.stringtemplate.org/download.html

Terence

From Tuan.Le2 at AlconLabs.com  Tue Sep 12 13:48:53 2006
From: Tuan.Le2 at AlconLabs.com (Tuan.Le2 at AlconLabs.com)
Date: Tue, 12 Sep 2006 13:48:53 -0700
Subject: [stringtemplate-interest] can't load template relative to class path
Message-ID: <5927D4B031C3B64D9D7BAD8194D25FF00D741484@usirv105.alconnet.com>

Hi,
 
My Java web application is StringTemplate to load .st file relative to a
class path. The manualEmail.st filie is located in
/WEB-INF/classes/com/alcon/ezra/template/manualEmail.
 
I used StringTemplate API to load the manualEmail.st template but it
threw an exception. It seems that I couldn't find the template file. I
referenced the ST document at
http://www.antlr.org/wiki/display/ST/Defining+Templates, but that didn't
help.
 
How do I load a ST template relative to a class path?
 
Thanks
Tuan
 
 
Code:
 
  StringTemplateGroup group = new StringTemplateGroup("mygroup");
  StringTemplate template =
group.getInstanceOf("com/alcon/ezra/template/manualEmail");

 
Error stack trace:
 
06/09/12 13:39:02 problem parsing template
'com/alcon/ezra/template/manualEmail'
06/09/12 13:39:02 java.lang.NullPointerException
06/09/12 13:39:02  at java.lang.Class.forName0(Native Method)
06/09/12 13:39:02  at java.lang.Class.forName(Class.java:164)
06/09/12 13:39:02  at
antlr.CharScanner.setTokenObjectClass(CharScanner.java:337)
06/09/12 13:39:02  at
org.antlr.stringtemplate.StringTemplate.breakTemplateIntoChunks(StringTe
mplate.java:929)
06/09/12 13:39:02  at
org.antlr.stringtemplate.StringTemplate.setTemplate(StringTemplate.java:
532)
06/09/12 13:39:02  at
org.antlr.stringtemplate.StringTemplateGroup.defineTemplate(StringTempla
teGroup.java:656)
06/09/12 13:39:02  at
org.antlr.stringtemplate.StringTemplateGroup.loadTemplate(StringTemplate
Group.java:531)
06/09/12 13:39:02  at
org.antlr.stringtemplate.StringTemplateGroup.loadTemplateFromBeneathRoot
DirOrCLASSPATH(StringTemplateGroup.java:557)
06/09/12 13:39:02  at
org.antlr.stringtemplate.StringTemplateGroup.lookupTemplate(StringTempla
teGroup.java:460)
06/09/12 13:39:02  at
org.antlr.stringtemplate.StringTemplateGroup.getInstanceOf(StringTemplat
eGroup.java:372)
06/09/12 13:39:02  at
org.antlr.stringtemplate.StringTemplateGroup.getInstanceOf(StringTemplat
eGroup.java:384)
06/09/12 13:39:02  at
com.alcon.ezra.action.ManualEmailAction.constructMessage(ManualEmailActi
on.java:53)
06/09/12 13:39:02  at
com.alcon.ezra.action.ManualEmailAction.doExecute(ManualEmailAction.java
:41)



This e-mail (including any attachments) is confidential and may be legally privileged. If you are not an intended recipient or an authorized representative of an intended recipient, you are prohibited from using, copying or distributing the information in this e-mail or its attachments. If you have received this e-mail in error, please notify the sender immediately by return e-mail and delete all copies of this message and any attachments.
Thank you.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org:8080/pipermail/stringtemplate-interest/attachments/20060912/a8ef88d5/attachment.html 

From Tuan.Le2 at AlconLabs.com  Tue Sep 12 16:40:52 2006
From: Tuan.Le2 at AlconLabs.com (Tuan.Le2 at AlconLabs.com)
Date: Tue, 12 Sep 2006 16:40:52 -0700
Subject: [stringtemplate-interest] problem parsing template 'anonymous'
Message-ID: <5927D4B031C3B64D9D7BAD8194D25FF00D74194C@usirv105.alconnet.com>

Hi,
 
I'm using StringTemplate 3.0b4. It threw a parsing exception when
intializing the StringTemplate. Do you know what I'm missing?
 
   StringTemplate t = new StringTemplate("$fromAddress$",
DefaultTemplateLexer.class);
   t.setAttribute("fromAddress", myname at xyz.com);
   
 
Source breakpoint occurred at line 62 of ManualEmailAction.java.
06/09/12 16:34:16 problem parsing template 'anonymous'
06/09/12 16:34:16 java.lang.NullPointerException
06/09/12 16:34:16  at java.lang.Class.forName0(Native Method)
06/09/12 16:34:16  at java.lang.Class.forName(Class.java:164)
06/09/12 16:34:16  at
antlr.CharScanner.setTokenObjectClass(CharScanner.java:337)
06/09/12 16:34:16  at
org.antlr.stringtemplate.StringTemplate.breakTemplateIntoChunks(StringTe
mplate.java:929)
06/09/12 16:34:16  at
org.antlr.stringtemplate.StringTemplate.setTemplate(StringTemplate.java:
532)
06/09/12 16:34:16  at
org.antlr.stringtemplate.StringTemplate.<init>(StringTemplate.java:380)
06/09/12 16:34:16  at
com.alcon.ezra.action.ManualEmailAction.initFormBean(ManualEmailAction.j
ava:68)
06/09/12 16:34:16  at
com.alcon.ezra.action.ManualEmailAction.doExecute(ManualEmailAction.java
:51)

Thanks,
Tuan


This e-mail (including any attachments) is confidential and may be legally privileged. If you are not an intended recipient or an authorized representative of an intended recipient, you are prohibited from using, copying or distributing the information in this e-mail or its attachments. If you have received this e-mail in error, please notify the sender immediately by return e-mail and delete all copies of this message and any attachments.
Thank you.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org:8080/pipermail/stringtemplate-interest/attachments/20060912/4b11b178/attachment.html 

From Tuan.Le2 at AlconLabs.com  Wed Sep 13 07:48:55 2006
From: Tuan.Le2 at AlconLabs.com (Tuan.Le2 at AlconLabs.com)
Date: Wed, 13 Sep 2006 07:48:55 -0700
Subject: [stringtemplate-interest] problem parsing template 'anonymous'
Message-ID: <5927D4B031C3B64D9D7BAD8194D25FF00D741C22@usirv105.alconnet.com>

Hi,
 
Obviously, I'm missing or not using StringTemplate API correctly. I
followed the exact code in the StringTemplate example code, but I
couldn't get it to work because of the parsing problem. 
 
Could you please give me a hint?
 
Thanks,
Tuan

________________________________

From: Le,Tuan,IRVINE,IT 
Sent: Tuesday, September 12, 2006 4:41 PM
To: 'stringtemplate-interest at antlr.org'
Subject: problem parsing template 'anonymous'


Hi,
 
I'm using StringTemplate 3.0b4. It threw a parsing exception when
intializing the StringTemplate. Do you know what I'm missing?
 
   StringTemplate t = new StringTemplate("$fromAddress$",
DefaultTemplateLexer.class);
   t.setAttribute("fromAddress",  "myname at xyz.com
<mailto:myname at xyz.com> " );
   
 
Source breakpoint occurred at line 62 of ManualEmailAction.java.
06/09/12 16:34:16 problem parsing template 'anonymous'
06/09/12 16:34:16 java.lang.NullPointerException
06/09/12 16:34:16  at java.lang.Class.forName0(Native Method)
06/09/12 16:34:16  at java.lang.Class.forName(Class.java:164)
06/09/12 16:34:16  at
antlr.CharScanner.setTokenObjectClass(CharScanner.java:337)
06/09/12 16:34:16  at
org.antlr.stringtemplate.StringTemplate.breakTemplateIntoChunks(StringTe
mplate.java:929)
06/09/12 16:34:16  at
org.antlr.stringtemplate.StringTemplate.setTemplate(StringTemplate.java:
532)
06/09/12 16:34:16  at
org.antlr.stringtemplate.StringTemplate.<init>(StringTemplate.java:380)
06/09/12 16:34:16  at
com.alcon.ezra.action.ManualEmailAction.initFormBean(ManualEmailAction.j
ava:68)
06/09/12 16:34:16  at
com.alcon.ezra.action.ManualEmailAction.doExecute(ManualEmailAction.java
:51)

Thanks,
Tuan


This e-mail (including any attachments) is confidential and may be legally privileged. If you are not an intended recipient or an authorized representative of an intended recipient, you are prohibited from using, copying or distributing the information in this e-mail or its attachments. If you have received this e-mail in error, please notify the sender immediately by return e-mail and delete all copies of this message and any attachments.
Thank you.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org:8080/pipermail/stringtemplate-interest/attachments/20060913/6fe8112a/attachment.html 

From parrt at cs.usfca.edu  Wed Sep 13 08:22:31 2006
From: parrt at cs.usfca.edu (Terence Parr)
Date: Wed, 13 Sep 2006 08:22:31 -0700
Subject: [stringtemplate-interest] problem parsing template 'anonymous'
In-Reply-To: <5927D4B031C3B64D9D7BAD8194D25FF00D741C22@usirv105.alconnet.com>
References: <5927D4B031C3B64D9D7BAD8194D25FF00D741C22@usirv105.alconnet.com>
Message-ID: <0F7C4926-E32F-4455-94D8-E0A4C52E89E8@cs.usfca.edu>

seems a classpath issue...old version of ANTLR in your path?
Ter
On Sep 13, 2006, at 7:48 AM, <Tuan.Le2 at AlconLabs.com> wrote:

> Hi,
>
> Obviously, I'm missing or not using StringTemplate API correctly. I  
> followed the exact code in the StringTemplate example code, but I  
> couldn't get it to work because of the parsing problem.
>
> Could you please give me a hint?
>
> Thanks,
> Tuan
>
> From: Le,Tuan,IRVINE,IT
> Sent: Tuesday, September 12, 2006 4:41 PM
> To: 'stringtemplate-interest at antlr.org'
> Subject: problem parsing template 'anonymous'
>
> Hi,
>
> I'm using StringTemplate 3.0b4. It threw a parsing exception when  
> intializing the StringTemplate. Do you know what I'm missing?
>
>    StringTemplate t = new StringTemplate("$fromAddress$",  
> DefaultTemplateLexer.class);
>    t.setAttribute("fromAddress",  "myname at xyz.com" );
>
>
> Source breakpoint occurred at line 62 of ManualEmailAction.java.
> 06/09/12 16:34:16 problem parsing template 'anonymous'
> 06/09/12 16:34:16 java.lang.NullPointerException
> 06/09/12 16:34:16  at java.lang.Class.forName0(Native Method)
> 06/09/12 16:34:16  at java.lang.Class.forName(Class.java:164)
> 06/09/12 16:34:16  at antlr.CharScanner.setTokenObjectClass 
> (CharScanner.java:337)
> 06/09/12 16:34:16  at  
> org.antlr.stringtemplate.StringTemplate.breakTemplateIntoChunks 
> (StringTemplate.java:929)
> 06/09/12 16:34:16  at  
> org.antlr.stringtemplate.StringTemplate.setTemplate 
> (StringTemplate.java:532)
> 06/09/12 16:34:16  at org.antlr.stringtemplate.StringTemplate.<init> 
> (StringTemplate.java:380)
> 06/09/12 16:34:16  at  
> com.alcon.ezra.action.ManualEmailAction.initFormBean 
> (ManualEmailAction.java:68)
> 06/09/12 16:34:16  at  
> com.alcon.ezra.action.ManualEmailAction.doExecute 
> (ManualEmailAction.java:51)
> Thanks,
> Tuan
>
> This e-mail (including any attachments) is confidential and may be  
> legally privileged. If you are not an intended recipient or an  
> authorized representative of an intended recipient, you are  
> prohibited from using, copying or distributing the information in  
> this e-mail or its attachments. If you have received this e-mail in  
> error, please notify the sender immediately by return e-mail and  
> delete all copies of this message and any attachments.
>
> Thank you.
>
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org:8080/mailman/listinfo/stringtemplate-interest


From Tuan.Le2 at AlconLabs.com  Wed Sep 13 09:02:11 2006
From: Tuan.Le2 at AlconLabs.com (Tuan.Le2 at AlconLabs.com)
Date: Wed, 13 Sep 2006 09:02:11 -0700
Subject: [stringtemplate-interest] problem parsing template 'anonymous'
Message-ID: <5927D4B031C3B64D9D7BAD8194D25FF00D741E7A@usirv105.alconnet.com>

Hi Terence -

Thanks for your response. I'm using Oracle Jdeveloper 10g. I searched
against antlr*.jar and I found that there were two older ANTLR jar files
in Jdeveloper directories 

C:\jdeveloper\jakarta-struts\lib
C:\jdeveloper\toplink\jlib

In my Web application lib directory (WEB-INF\lib) I have a new ANTLR jar
file which is antlr-2.7.7.jar. What is the best option to get this
working without interfering with the old antlr.jar that could be used by
other applications?

BTW, I'm using StringTemplate 3.0b4. Does that work with the older
verion of ANTLR or they are independent jar files?

Thanks,
Tuan



-----Original Message-----
From: stringtemplate-interest-bounces at antlr.org
[mailto:stringtemplate-interest-bounces at antlr.org] On Behalf Of Terence
Parr
Sent: Wednesday, September 13, 2006 8:23 AM
To: stringtemplate-interest
Subject: Re: [stringtemplate-interest] problem parsing template
'anonymous'

seems a classpath issue...old version of ANTLR in your path?
Ter
On Sep 13, 2006, at 7:48 AM, <Tuan.Le2 at AlconLabs.com> wrote:

> Hi,
>
> Obviously, I'm missing or not using StringTemplate API correctly. I  
> followed the exact code in the StringTemplate example code, but I  
> couldn't get it to work because of the parsing problem.
>
> Could you please give me a hint?
>
> Thanks,
> Tuan
>
> From: Le,Tuan,IRVINE,IT
> Sent: Tuesday, September 12, 2006 4:41 PM
> To: 'stringtemplate-interest at antlr.org'
> Subject: problem parsing template 'anonymous'
>
> Hi,
>
> I'm using StringTemplate 3.0b4. It threw a parsing exception when  
> intializing the StringTemplate. Do you know what I'm missing?
>
>    StringTemplate t = new StringTemplate("$fromAddress$",  
> DefaultTemplateLexer.class);
>    t.setAttribute("fromAddress",  "myname at xyz.com" );
>
>
> Source breakpoint occurred at line 62 of ManualEmailAction.java.
> 06/09/12 16:34:16 problem parsing template 'anonymous'
> 06/09/12 16:34:16 java.lang.NullPointerException
> 06/09/12 16:34:16  at java.lang.Class.forName0(Native Method)
> 06/09/12 16:34:16  at java.lang.Class.forName(Class.java:164)
> 06/09/12 16:34:16  at antlr.CharScanner.setTokenObjectClass 
> (CharScanner.java:337)
> 06/09/12 16:34:16  at  
> org.antlr.stringtemplate.StringTemplate.breakTemplateIntoChunks 
> (StringTemplate.java:929)
> 06/09/12 16:34:16  at  
> org.antlr.stringtemplate.StringTemplate.setTemplate 
> (StringTemplate.java:532)
> 06/09/12 16:34:16  at org.antlr.stringtemplate.StringTemplate.<init> 
> (StringTemplate.java:380)
> 06/09/12 16:34:16  at  
> com.alcon.ezra.action.ManualEmailAction.initFormBean 
> (ManualEmailAction.java:68)
> 06/09/12 16:34:16  at  
> com.alcon.ezra.action.ManualEmailAction.doExecute 
> (ManualEmailAction.java:51)
> Thanks,
> Tuan
>
> This e-mail (including any attachments) is confidential and may be  
> legally privileged. If you are not an intended recipient or an  
> authorized representative of an intended recipient, you are  
> prohibited from using, copying or distributing the information in  
> this e-mail or its attachments. If you have received this e-mail in  
> error, please notify the sender immediately by return e-mail and  
> delete all copies of this message and any attachments.
>
> Thank you.
>
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org:8080/mailman/listinfo/stringtemplate-interest

_______________________________________________
stringtemplate-interest mailing list
stringtemplate-interest at antlr.org
http://www.antlr.org:8080/mailman/listinfo/stringtemplate-interest


This e-mail (including any attachments) is confidential and may be legally privileged. If you are not an intended recipient or an authorized representative of an intended recipient, you are prohibited from using, copying or distributing the information in this e-mail or its attachments. If you have received this e-mail in error, please notify the sender immediately by return e-mail and delete all copies of this message and any attachments.
Thank you.

From Tuan.Le2 at AlconLabs.com  Wed Sep 13 09:14:02 2006
From: Tuan.Le2 at AlconLabs.com (Tuan.Le2 at AlconLabs.com)
Date: Wed, 13 Sep 2006 09:14:02 -0700
Subject: [stringtemplate-interest] problem parsing template 'anonymous'
Message-ID: <5927D4B031C3B64D9D7BAD8194D25FF00D741ECC@usirv105.alconnet.com>

Hi Terence -

The old antlr jar file was the issue. After updating the older version
of ANTLR antlr.jar with a new one in jdeveloper directories, it didn't
throw exception when intializing the StringTemplate. 

Thanks again for your help.

Tuan

-----Original Message-----
From: stringtemplate-interest-bounces at antlr.org
[mailto:stringtemplate-interest-bounces at antlr.org] On Behalf Of
Tuan.Le2 at AlconLabs.com
Sent: Wednesday, September 13, 2006 9:02 AM
To: parrt at cs.usfca.edu; stringtemplate-interest at antlr.org
Subject: Re: [stringtemplate-interest] problem parsing template
'anonymous'

Hi Terence -

Thanks for your response. I'm using Oracle Jdeveloper 10g. I searched
against antlr*.jar and I found that there were two older ANTLR jar files
in Jdeveloper directories 

C:\jdeveloper\jakarta-struts\lib
C:\jdeveloper\toplink\jlib

In my Web application lib directory (WEB-INF\lib) I have a new ANTLR jar
file which is antlr-2.7.7.jar. What is the best option to get this
working without interfering with the old antlr.jar that could be used by
other applications?

BTW, I'm using StringTemplate 3.0b4. Does that work with the older
verion of ANTLR or they are independent jar files?

Thanks,
Tuan



-----Original Message-----
From: stringtemplate-interest-bounces at antlr.org
[mailto:stringtemplate-interest-bounces at antlr.org] On Behalf Of Terence
Parr
Sent: Wednesday, September 13, 2006 8:23 AM
To: stringtemplate-interest
Subject: Re: [stringtemplate-interest] problem parsing template
'anonymous'

seems a classpath issue...old version of ANTLR in your path?
Ter
On Sep 13, 2006, at 7:48 AM, <Tuan.Le2 at AlconLabs.com> wrote:

> Hi,
>
> Obviously, I'm missing or not using StringTemplate API correctly. I  
> followed the exact code in the StringTemplate example code, but I  
> couldn't get it to work because of the parsing problem.
>
> Could you please give me a hint?
>
> Thanks,
> Tuan
>
> From: Le,Tuan,IRVINE,IT
> Sent: Tuesday, September 12, 2006 4:41 PM
> To: 'stringtemplate-interest at antlr.org'
> Subject: problem parsing template 'anonymous'
>
> Hi,
>
> I'm using StringTemplate 3.0b4. It threw a parsing exception when  
> intializing the StringTemplate. Do you know what I'm missing?
>
>    StringTemplate t = new StringTemplate("$fromAddress$",  
> DefaultTemplateLexer.class);
>    t.setAttribute("fromAddress",  "myname at xyz.com" );
>
>
> Source breakpoint occurred at line 62 of ManualEmailAction.java.
> 06/09/12 16:34:16 problem parsing template 'anonymous'
> 06/09/12 16:34:16 java.lang.NullPointerException
> 06/09/12 16:34:16  at java.lang.Class.forName0(Native Method)
> 06/09/12 16:34:16  at java.lang.Class.forName(Class.java:164)
> 06/09/12 16:34:16  at antlr.CharScanner.setTokenObjectClass 
> (CharScanner.java:337)
> 06/09/12 16:34:16  at  
> org.antlr.stringtemplate.StringTemplate.breakTemplateIntoChunks 
> (StringTemplate.java:929)
> 06/09/12 16:34:16  at  
> org.antlr.stringtemplate.StringTemplate.setTemplate 
> (StringTemplate.java:532)
> 06/09/12 16:34:16  at org.antlr.stringtemplate.StringTemplate.<init> 
> (StringTemplate.java:380)
> 06/09/12 16:34:16  at  
> com.alcon.ezra.action.ManualEmailAction.initFormBean 
> (ManualEmailAction.java:68)
> 06/09/12 16:34:16  at  
> com.alcon.ezra.action.ManualEmailAction.doExecute 
> (ManualEmailAction.java:51)
> Thanks,
> Tuan
>
> This e-mail (including any attachments) is confidential and may be  
> legally privileged. If you are not an intended recipient or an  
> authorized representative of an intended recipient, you are  
> prohibited from using, copying or distributing the information in  
> this e-mail or its attachments. If you have received this e-mail in  
> error, please notify the sender immediately by return e-mail and  
> delete all copies of this message and any attachments.
>
> Thank you.
>
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org:8080/mailman/listinfo/stringtemplate-interest

_______________________________________________
stringtemplate-interest mailing list
stringtemplate-interest at antlr.org
http://www.antlr.org:8080/mailman/listinfo/stringtemplate-interest


This e-mail (including any attachments) is confidential and may be
legally privileged. If you are not an intended recipient or an
authorized representative of an intended recipient, you are prohibited
from using, copying or distributing the information in this e-mail or
its attachments. If you have received this e-mail in error, please
notify the sender immediately by return e-mail and delete all copies of
this message and any attachments.
Thank you.
_______________________________________________
stringtemplate-interest mailing list
stringtemplate-interest at antlr.org
http://www.antlr.org:8080/mailman/listinfo/stringtemplate-interest


This e-mail (including any attachments) is confidential and may be legally privileged. If you are not an intended recipient or an authorized representative of an intended recipient, you are prohibited from using, copying or distributing the information in this e-mail or its attachments. If you have received this e-mail in error, please notify the sender immediately by return e-mail and delete all copies of this message and any attachments.
Thank you.

From brian.kejser at protexis.com  Sat Sep 16 17:38:16 2006
From: brian.kejser at protexis.com (brian.kejser at protexis.com)
Date: Sat, 16 Sep 2006 17:38:16 -0700 (PDT)
Subject: [stringtemplate-interest] C# static methods
Message-ID: <36637.10.238.10.71.1158453496.webmail@10.238.10.71>

Hi

Is there another way of using embedded string templates in VS 2005 that
does not involve using the static method RegisterGroupLoader on the
StringTemplateGroup class?

If not, is there any reason why this method (and the corresponding static
member variable) can't be made non-static?

Thanks




From zen at freedbms.net  Mon Sep 18 19:53:36 2006
From: zen at freedbms.net (Zenaan Harkness)
Date: Tue, 19 Sep 2006 12:53:36 +1000
Subject: [stringtemplate-interest] ST Group File comments
Message-ID: <20060919025336.GO3524@zen700m>

I would like to be able to add comments to my group files, just
above each template in the group, somewhat akin to Java's
class-level comments.

Would this be easy to add?

If so, can someone point me in the general direction of where to
experiment within the source?

Thanks
Zenaan

-- 
Free Australia - www.UPMART.org
Please respect the confidentiality of this email as sensibly warranted.

From zen at freedbms.net  Mon Sep 18 19:56:48 2006
From: zen at freedbms.net (Zenaan Harkness)
Date: Tue, 19 Sep 2006 12:56:48 +1000
Subject: [stringtemplate-interest] Synchronization error in ST
	implementation.
Message-ID: <20060919025648.GP3524@zen700m>

Here's a thought I have. From the doco for ST:

"made static maps in STG synchronized, also synchronized the look up/def methods for templates in STG"

Well, this is not technically an error, but why does ST synchronize?

Surely the user should synchronize, if needed, so that everyone
else does not pay the price of locking.

Alternatively, you could provide a synchronized wrapper, like java.util
Containers now do. Doesn't that make more sense?

Thanks
Zenaan


-- 
Free Australia - www.UPMART.org
Please respect the confidentiality of this email as sensibly warranted.

From zen at freedbms.net  Mon Sep 18 20:11:11 2006
From: zen at freedbms.net (Zenaan Harkness)
Date: Tue, 19 Sep 2006 13:11:11 +1000
Subject: [stringtemplate-interest] re String manipulations
Message-ID: <20060919031111.GQ3524@zen700m>

Can anyone provide a brief set of steps required to be taken, in
order to add a caps|allCaps|initialCaps function to ST, in order
to capitalize strings suitable for Java getter and setter method
names?

I don't want to go into my model and produce wrappers, because it
is simply a jyaml (http://jyaml.sourceforge.net/index.html) file
(or set of files) which I load and very simply plug into my ST
template.

This current setup results in an extremely simple and robust
controller, very simple model, and very clean separation of
concerns. I really don't want to have to have custom model logic
in my controller peeking inside a particular model instance
(a loaded yaml file), sucking out attributes, wrapping them, and
plugging them back in to the "model" (simply a set of Maps and
Lists). This is clearly an entanglement of the model and the
controller.

And of course, to have to put multiple instances of the same data
fields in the model, breaks the Duplication principle in the model
and looks bad to boot - redundancy is an even worse solution!

Because my model is encapsulated as pure data in a yaml file, I
really don't want to have to unnecessarily break this separation
of concerns inside the controller. It's really clean at the moment.

Any help appreciated.

Thanks in advance
Zen

-- 
Free Australia - www.UPMART.org
Please respect the confidentiality of this email as sensibly warranted.

From zen at freedbms.net  Tue Sep 19 01:07:12 2006
From: zen at freedbms.net (Zenaan Harkness)
Date: Tue, 19 Sep 2006 18:07:12 +1000
Subject: [stringtemplate-interest] Data model vs View model
Message-ID: <20060919080712.GR3524@zen700m>

Here are the concepts we work with:

M = data/inputs model
V = view
C = controller

The view, of necessity, must access some data and output its output.

The view in most cases will require more than a single long list of
strings (even though that's what it ultimately evaluates to).

So, the View, to a greater or lesser degree, has a dependence on the
"View Model".

We can then see that the Controller is essentially a transform operator
which transforms a given Data Model into a required View Model.

Next, the question of separation of concerns becomes one of where to
place complexity.

Eg. we consider that views are more likely to change over time
(dang marketing department), and so we use a view generation system
(ST) which enforces a minimal complexity level on the View Model,
thereby limiting the ability for the Controller to intertwine the
Data Model with the View Model.

We can say that it is really only in simpler cases, where the view
closely maps to the Data Model, that the Data Model can be used by
the view as its View Model.

So what are we trying to discourage?

We want to discourage changes to the Data Model which are made simply
to facilitate a specific view requirement.

We want the various Models to be focussed on their domain.

But we also want to reuse that which we can. If the beans in a data
model can (as they can with ST) be used almost directly by the view,
this saves an unnecessary transformation to some 'arbitrarily new'
view model.

Things that are the same should stay the same.

We now return to the pieces of our puzzle:

* Application Data:
  Types, simple or aggregate.
  Is transformed by data loading functionality (eg. read data from yaml
  file, SQL statements sucking data from RDBMS) which transforms the
  Application Data from its source (eg file or RDBMS) into an Application
  Data Model (eg. Collections, Java beans etc).

* Application Data Model:
  Traditionally the "M" in MVC.
  The chosen storage form of the Application Data, for use by the
  Application.  Eg jyaml's resultant java.util.Collections, java beans
  sucked from sql db, etc.


* View Output Data:
  Resultant output of View Templates applied to View Input Data.

* View Data Model:
  Dependency of View Templates; created/ tweaked by controller.
  May or may not be the same as the Application Data Model.
  May have components of the Application Data Model wrapped in wrappers,
  for the convenience or necessity of the View Templates (depending on
  the limitations/ restrictions imposed by the Template transformation/
  View Output Data generation software (ST)).
  May of course be a complete transformation of the Application Data
  Model, which transformation is produced by the controller.

* View Input Data:
  Data stored in View Data Model, and fed to View Templates to produce
  View Output Data.
  Presumably a transformation of the Application Data [Model].

* View Templates:
  What we generally think of nowadays as the "V" in MVC.
  ST templates/ groups; .


* Template Engine:
  StringTemplate; used by Controller to transform View Input Data and
  View Templates into View Output Data; applies View Templates to View
  Input Data to generate View Output Data.


* Controller:
  The "C" in MVC.
  Transforms the Application Data Model into the View Data Model, then
  feeds the View Data Model created, along with the View Templates, into
  the Template Engine (ST) and finally triggers generation of the View
  Output Data.


So, to spell out a hopefully useful point, there are three 'primary'
transformations:
1) Application Data -> Application Data Model
   This is loading data into memory.

2) Application Data Model -> View Data Model

3) {View Data Model, View Templates} -> View Output Data


We could also say that we have Application Data External (on disk, in SQL
DB), and Application Data Internal (that data inside an instance of the
Application Data Model). The question is which distinctions are useful
for dealing with our problem domain(s)...

I guess really at each storage point, data exists, and has a model.
Eg:

* Data chain:
  on disk -> in memory (application) -> in memory (view) -> view output

* Model chain:
  disk model -> application model -> view model -> output model

* Data Transformation Chain:
  load data -> application model to view model -> view model to output

(Is it useful to also speak of a Model Transformation Chain?)


It seems we actually have quite complex systems here...


Principles (please add to list of course):

* Model Stability
  We want to minimize changes to each model, over the long term.
  This minimizes system maintenance cost.
  Keeping view-specific model concepts in the View Data Model, minimizes
  changes to the Application Data Model.

* Model Reuse
  Where it makes sense, we should be able to reuse classes/ beans in the
  Application Data Model as well as in the View Data Model, where it
  makes sense.

* Separation of Concerns
  Ideally, we don't go adding special cases to one model's
  implementation, just to compensate for limitations in another part of
  the system.
  Eg. adding getRandom-attributeTitlecaps methods to the Application
  Model, in order to compensate for limitations of the view transform
  system/ View Data Model.
  We want our Application Data Model, ideally, to stay focussed on being
  just an Application Data Model, and not also being a View Data Model.
  This suggests (liberal?) addition of formatting functions to the view
  system, in order to keep a clean Application Data Model.
  We want the View Model to be separate from View Templates as well;
  this allows multiple output transformations of the same view model;
  eg. from input data to SQL Table Construction statements, and
  from input data to JavaBean classes (for each table).

* Division of Complexity
  There are certain things that need to be done in a system, eg.
  capitalization of strings, conditional view generation.
  The question is one of a tradeoff of complexity in one location for
  complexity in another. Keep the Template Engine simpler, and you push
  some complexity either into the View Data Model or even (for the lazy
  programmer) into the Application Data Model.
  The flip side of the tradeoff is the lazy programmer, given too much
  power in the view to access the model(s), either placing view
  generation logic into the view (which should possibly remain in the
  View Data Model/ Controller, in order to be view/ output agnostic) or,
  even worse, accessing the Application Data Model and possibly even
  producing side effects in the application as a result.
  

One conclusion it seems reasonable to me to make is that limitations in
the Template Engine may encourage the programmer to violate separation of
concerns by embedding custom view logic into the Application Data Model.
The maintenance savvy programmer will go the extra mile to avoid such
incestuousness, but the deadline pressed programmer may not :)


Hope this is useful
Zen

-- 
Free Australia - www.UPMART.org
Please respect the confidentiality of this email as sensibly warranted.

From zen at freedbms.net  Tue Sep 19 05:47:46 2006
From: zen at freedbms.net (Zenaan Harkness)
Date: Tue, 19 Sep 2006 22:47:46 +1000
Subject: [stringtemplate-interest] Copyright template - was Re: ST Group
	File comments
In-Reply-To: <20060919025336.GO3524@zen700m>
References: <20060919025336.GO3524@zen700m>
Message-ID: <20060919124746.GA1452@zen700m>

On Tue, Sep 19, 2006 at 12:53:36PM +1000, Zenaan Harkness wrote:
> I would like to be able to add comments to my group files, just
> above each template in the group, somewhat akin to Java's
> class-level comments.
> 
> Would this be easy to add?
> 
> If so, can someone point me in the general direction of where to
> experiment within the source?

How does this look for copyright template in a group file:

copyright(prefix) ::= <<
<prefix><[
  "Copyright (C) 2006 NonProfit Organisation Name.",
  "Contact: zen at freedbms.net"
]; separator="\n"+(prefix)>
>>


And then later, its use somewhere in another template, with a
Java class comment style prefix:
<copyright(prefix="// ")>

This serves the purpose of having a copyright template, and
documents this particular group file by virtue of having the
copyright template at the top of the group file, but other sub-
group files which reference the copyright template won't have that
luxury, and I would like to include a copyright at the top of each
file. Thus my original post.

Thoughts?
Zen

-- 
Free Australia - www.UPMART.org
Please respect the confidentiality of this email as sensibly warranted.

From zen at freedbms.net  Tue Sep 19 08:09:38 2006
From: zen at freedbms.net (Zenaan Harkness)
Date: Wed, 20 Sep 2006 01:09:38 +1000
Subject: [stringtemplate-interest] Generic Java Entity/Bean/Class class
Message-ID: <20060919150938.GA3524@zen700m>

Does someone have a generic Java "View Model" class that they are
prepared to contribute, or that they can point me at?

Eg:
I've typed up a sample Table and Column class, eg:

public final class Column {
   private String name = "";
   public String getName() {return name;}
   public void setName(String name) {this.name = name;}
   public Column() {}
   public Column(String name) {setName(name);}
   public String toString() {return "C(" + name + ')';}
}

And similar for Table:
public final class Table {
   private String database = "";
   private String name = "";
   private String owner = "";
   private String schema = "";
   private String tablespace = "";
   private boolean withoids = false;
   private Column[] columns = null;
   ctors...
   getters and setters...
...
}

And I realise that even these classes want to be generated.
So much repetition you see - fields, getters, setters, ctor,
all utilize the same data to generate the class.

So I realize I need something more generic.

Assistance with entity-model class and Java-output ST template,
if they already exist, will be greatly appreciated.

TIA
Zen

-- 
Free Australia - www.UPMART.org
Please respect the confidentiality of this email as sensibly warranted.

From parrt at cs.usfca.edu  Tue Sep 19 17:13:40 2006
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue, 19 Sep 2006 17:13:40 -0700
Subject: [stringtemplate-interest] ST Group File comments
In-Reply-To: <20060919025336.GO3524@zen700m>
References: <20060919025336.GO3524@zen700m>
Message-ID: <DBCF331D-7EC6-4206-8572-6E59C6D761F9@cs.usfca.edu>


On Sep 18, 2006, at 7:53 PM, Zenaan Harkness wrote:

> I would like to be able to add comments to my group files, just
> above each template in the group, somewhat akin to Java's
> class-level comments.
>
> Would this be easy to add?

have you tried

/** javadoc comment */
template() ::= "..."

?

Ter

From parrt at cs.usfca.edu  Tue Sep 19 17:16:39 2006
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue, 19 Sep 2006 17:16:39 -0700
Subject: [stringtemplate-interest] Synchronization error in ST
	implementation.
In-Reply-To: <20060919025648.GP3524@zen700m>
References: <20060919025648.GP3524@zen700m>
Message-ID: <180D3255-4C74-411D-99FD-C387893364A6@cs.usfca.edu>

On Sep 18, 2006, at 7:56 PM, Zenaan Harkness wrote:

> Here's a thought I have. From the doco for ST:
>
> "made static maps in STG synchronized, also synchronized the look  
> up/def methods for templates in STG"
>
> Well, this is not technically an error, but why does ST synchronize?

   Because multiple threads can be adding looking up and adding  
things at the same time.

> Surely the user should synchronize, if needed, so that everyone
> else does not pay the price of locking.

   It's not easy to wrap everything in ST in something that will  
synchronize it from outside; well I haven't looked into that, but  
speed is not seem to be a problem for me.  Anybody noticed a problem  
so far?

Ter



From zen at freedbms.net  Tue Sep 19 19:04:00 2006
From: zen at freedbms.net (Zenaan Harkness)
Date: Wed, 20 Sep 2006 12:04:00 +1000
Subject: [stringtemplate-interest] ST Group File comments
In-Reply-To: <DBCF331D-7EC6-4206-8572-6E59C6D761F9@cs.usfca.edu>
References: <20060919025336.GO3524@zen700m>
	<DBCF331D-7EC6-4206-8572-6E59C6D761F9@cs.usfca.edu>
Message-ID: <20060920020359.GA5552@zen700m>

On Tue, Sep 19, 2006 at 05:13:40PM -0700, Terence Parr wrote:
> 
> On Sep 18, 2006, at 7:53 PM, Zenaan Harkness wrote:
> 
> > I would like to be able to add comments to my group files, just
> > above each template in the group, somewhat akin to Java's
> > class-level comments.
> >
> > Would this be easy to add?
> 
> have you tried
> 
> /** javadoc comment */
> template() ::= "..."

Works beautifully! :) Thanks.

I had been trying sindle line comment style ("// ...") and assumed
that multi-line also didn't work.

cheers

-- 
Free Australia - www.UPMART.org
Please respect the confidentiality of this email as sensibly warranted.

From zen at freedbms.net  Tue Sep 19 19:35:46 2006
From: zen at freedbms.net (Zenaan Harkness)
Date: Wed, 20 Sep 2006 12:35:46 +1000
Subject: [stringtemplate-interest] Synchronization error in ST
	implementation.
In-Reply-To: <180D3255-4C74-411D-99FD-C387893364A6@cs.usfca.edu>
References: <20060919025648.GP3524@zen700m>
	<180D3255-4C74-411D-99FD-C387893364A6@cs.usfca.edu>
Message-ID: <20060920023546.GB5552@zen700m>

On Tue, Sep 19, 2006 at 05:16:39PM -0700, Terence Parr wrote:
> On Sep 18, 2006, at 7:56 PM, Zenaan Harkness wrote:
> 
> > Here's a thought I have. From the doco for ST:
> >
> > "made static maps in STG synchronized, also synchronized the look  
> > up/def methods for templates in STG"
> >
> > Well, this is not technically an error, but why does ST synchronize?
> 
>    Because multiple threads can be adding looking up and adding  
> things at the same time.
> 
> > Surely the user should synchronize, if needed, so that everyone
> > else does not pay the price of locking.
> 
>    It's not easy to wrap everything in ST in something that will  
> synchronize it from outside; well I haven't looked into that, but  
> speed is not seem to be a problem for me.  Anybody noticed a problem  
> so far?

It's not so much about speed, it's that a couple of synchronized
statements may well not be what's needed.

To require the user to arbitrate access from multiple threads is
one simple solution, and offers best performance for those who
don't need the locking.

To provide alternate implementations requires more work of course.

For someone wanting a slashdot-sized site to use Stringtemplate,
the user of ST (the developer) is going to want fine grained
control of locking to maximize performance, and in many cases
might simply do away with locking altogether, and simply have a
pool of ST resources (STGroups, whatever). For this to work, all
statics must be removed, in general, and clearly specified
dependencies are required, in order to know what the  underlying
object graph is that you are working with.

In any case, a clear spec/ understanding of the related pieces is
very useful when implementing some or another locking solution.

A simple and failsafe starting point is:
- no locking by ST itself
- no statics inside ST - everything dynamic, although of course
  use Singleton pattern everywhere that makes sense

This will mean that ST clients can simply duplicate a hierarchy
and no that there are NO dependencies between the two copies,
and simply have a separate hierarchy for each thread/servlet/
whatever.

* Certainty is essential.

* Simplification is desirable.

* Locking is best avoided where at all possible, and more
  importantly than for performance, in order to minimize deadlocks.

* A simple global ST-access lock is easy for clients to implement.

* Remove all statics (in general) and provide a deep-copy to allow
  clients to readily create thread-independant instances, and
  therefore scalability (of the view generation code) to your
  hearts content.

Anyone writing a multi-threaded server will presumably have a
grasp of threading issues to start with, and will be in the best
position to know which strategy is best for their system anyway
(eg. separate "deep copy" ST instances with no interdependencies,
vs finer-grained locking and shared ST instances).

(I have spent a few years, on two separate projects, developing
multi-threaded server software.)

Regards
Zen

-- 
Free Australia - www.UPMART.org
Please respect the confidentiality of this email as sensibly warranted.

From zen at freedbms.net  Tue Sep 19 23:17:18 2006
From: zen at freedbms.net (Zenaan Harkness)
Date: Wed, 20 Sep 2006 16:17:18 +1000
Subject: [stringtemplate-interest] Synchronization error in ST
	implementation.
In-Reply-To: <20060920023546.GB5552@zen700m>
References: <20060919025648.GP3524@zen700m>
	<180D3255-4C74-411D-99FD-C387893364A6@cs.usfca.edu>
	<20060920023546.GB5552@zen700m>
Message-ID: <20060920061718.GA6028@zen700m>

On Wed, Sep 20, 2006 at 12:35:46PM +1000, Zenaan Harkness wrote:
> * Certainty is essential.
> 
> * Simplification is desirable.
> 
> * Locking is best avoided where at all possible, and more
>   importantly than for performance, in order to minimize deadlocks.
> 
> * A simple global ST-access lock is easy for clients to implement.
> 
> * Remove all statics (in general) and provide a deep-copy to allow
>   clients to readily create thread-independant instances, and
>   therefore scalability (of the view generation code) to your
>   hearts content.

Another point:

* Performing some synchronization within ST, is no guarantee that
  clients will not have to synchronize anyway, thus incurring
  unnecessary additional synchronization overhead. See issues of
  "conditional thread-safety" and having to 'externally' synchronize
  on "sequences of operations". See article 2 below.

Potentially useful URLS:

1) "Check out three collections libraries" talks a little on synchronization.
http://www.javaworld.com/javaworld/jw-11-2002/jw-1101-collections-p2.html

2) Classic article here, conditional thread safety of supposedly
   synchronized containers, collection-wide lock requirements during
   iteration, etc, and alternatives available:
http://www-128.ibm.com/developerworks/java/library/j-jtp07233.html

3) Tutorial on reducing contention:
http://www-128.ibm.com/developerworks/java/library/j-threads2.html
(This has some good links at the end for further info too.)

4) ConcurrentHashMap from java.util.concurrent:
http://www-128.ibm.com/developerworks/java/library/j-jtp08223/index.html


Witness the contradictory strategies (article 3), depending on the actions
needing to be performed, and that the 'library' (eg ST) cannot predict, in
general, the required strategy of the consumer of the library.


HTH
Zen

-- 
Free Australia - www.UPMART.org
Please respect the confidentiality of this email as sensibly warranted.

From o.flege at market-maker.de  Thu Sep 21 01:47:36 2006
From: o.flege at market-maker.de (Oliver Flege)
Date: Thu, 21 Sep 2006 10:47:36 +0200
Subject: [stringtemplate-interest] Distinguish null and false in condition
Message-ID: <451251A8.2000901@market-maker.de>

Hi,

recently, I used ST to render xml tags; for tags that contained a Boolean
value, I had to distinguish between a null value (output <tag xsi:nil="true"/>)
and either true or false (output <tag>true</tag> / <tag>false</tag>)

Since ST's if condition evaluates to false for both null and Boolean.FALSE,
I modified ST to support $if(?attr)$, which evaluates to true iff
attr is not null.

The changes necessary to support this are rather trivial (treat ? similar to
the ! operator and call chunk.testAttributeDefined(a) if ? is used,
that funtion returns true iff a is not null).

How about including this change in ST?


 Oliver



From jjsnyders at rcn.com  Thu Sep 21 22:32:14 2006
From: jjsnyders at rcn.com (John Snyders)
Date: Fri, 22 Sep 2006 01:32:14 -0400
Subject: [stringtemplate-interest] re String manipulations
Message-ID: <BDEBKCCLDDBHIMBFPIEICEEMCEAA.jjsnyders@rcn.com>

I had the idea that I could use a template to format strings rather than
create a wrapper around Strings.
I would create a template and add it to a group the template would simply
expand its argument.
Registering a renderer with just this template should cause strings to be
uppercased.

...
StringTemplate uc = s_builtinTemplates.defineTemplate("upperCase", "$it$");
uc.registerRenderer(String.class, new UpperCaseRenderer());
...
    public static class UpperCaseRenderer implements AttributeRenderer
    {

        public String toString(Object o)
        {
            if (o instanceof String)
            {
                String s = (String)o;
                return s.toUpperCase();
            }
            return o.toString();
        }
    }

Then I thought I could use it in a template like so
$upperCase(it=name)$

or

$name:upperCase()$

The trouble is that for some reason by the time the expression is getting
evaluated the renderer is missing from the template.
Before calling toString I can look in the template and see the renderer map
has my class in it. When I set a breakpoint in ASTExpr just where it checks
for the renderer it is no longer in the template.

What I get is $name$ expanded but in its original case.

I think this may solve the problem Zen describes below.

Does anyone know why what I am doning isn't working? I'm using version 3.0.

Thanks
-John

Zen wrote:

Can anyone provide a brief set of steps required to be taken, in
order to add a caps|allCaps|initialCaps function to ST, in order
to capitalize strings suitable for Java getter and setter method
names?

I don't want to go into my model and produce wrappers, because it
is simply a jyaml (http://jyaml.sourceforge.net/index.html) file
(or set of files) which I load and very simply plug into my ST
template.

This current setup results in an extremely simple and robust
controller, very simple model, and very clean separation of
concerns. I really don't want to have to have custom model logic
in my controller peeking inside a particular model instance
(a loaded yaml file), sucking out attributes, wrapping them, and
plugging them back in to the "model" (simply a set of Maps and
Lists). This is clearly an entanglement of the model and the
controller.

And of course, to have to put multiple instances of the same data
fields in the model, breaks the Duplication principle in the model
and looks bad to boot - redundancy is an even worse solution!

Because my model is encapsulated as pure data in a yaml file, I
really don't want to have to unnecessarily break this separation
of concerns inside the controller. It's really clean at the moment.

Any help appreciated.

Thanks in advance
Zen
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org:8080/pipermail/stringtemplate-interest/attachments/20060922/c789c2eb/attachment.html 

From zen at freedbms.net  Thu Sep 21 23:19:32 2006
From: zen at freedbms.net (Zenaan Harkness)
Date: Fri, 22 Sep 2006 16:19:32 +1000
Subject: [stringtemplate-interest] re String manipulations
In-Reply-To: <BDEBKCCLDDBHIMBFPIEICEEMCEAA.jjsnyders@rcn.com>
References: <BDEBKCCLDDBHIMBFPIEICEEMCEAA.jjsnyders@rcn.com>
Message-ID: <20060922061932.GA3064@zen700m>

On Fri, Sep 22, 2006 at 01:32:14AM -0400, John Snyders wrote:
> I had the idea that I could use a template to format strings rather than
> create a wrapper around Strings.
> I would create a template and add it to a group the template would simply
> expand its argument.
> Registering a renderer with just this template should cause strings to be
> uppercased.
> 
> ...
> StringTemplate uc = s_builtinTemplates.defineTemplate("upperCase", "$it$");
> uc.registerRenderer(String.class, new UpperCaseRenderer());
> ...
>     public static class UpperCaseRenderer implements AttributeRenderer
>     {
> 
>         public String toString(Object o)
>         {
>             if (o instanceof String)
>             {
>                 String s = (String)o;
>                 return s.toUpperCase();
>             }
>             return o.toString();
>         }
>     }
> 
> Then I thought I could use it in a template like so
> $upperCase(it=name)$
> 
> or
> 
> $name:upperCase()$
> 
> The trouble is that for some reason by the time the expression is getting
> evaluated the renderer is missing from the template.
> Before calling toString I can look in the template and see the renderer map
> has my class in it. When I set a breakpoint in ASTExpr just where it checks
> for the renderer it is no longer in the template.

Does indeed sound like it would do the job. Great thinking.

Are you sure that the same object (ST) is in both places?

To be entirely sure, you can use st.hashCode() to make sure you have
the same object references (or use System.identityHashCode()).

It would be awefully strange to have the renderer go missing, so my
first assumption is just an oversight bug in your code.

Hope you crack it...
Zen


-- 
Free Australia - www.UPMART.org
Please respect the confidentiality of this email as sensibly warranted.

From o.flege at market-maker.de  Fri Sep 22 01:39:50 2006
From: o.flege at market-maker.de (Oliver Flege)
Date: Fri, 22 Sep 2006 10:39:50 +0200
Subject: [stringtemplate-interest] String manipulations
In-Reply-To: <BDEBKCCLDDBHIMBFPIEICEEMCEAA.jjsnyders@rcn.com>
References: <BDEBKCCLDDBHIMBFPIEICEEMCEAA.jjsnyders@rcn.com>
Message-ID: <4513A156.8000803@market-maker.de>

Hi,

John Snyders wrote:
> 
> I had the idea that I could use a template to format strings rather than
> create a wrapper around Strings.
> I would create a template and add it to a group the template would
> simply expand its argument.
> Registering a renderer with just this template should cause strings to
> be uppercased.
...
> Does anyone know why what I am doning isn't working? I'm using version 3.0.

I had the same idea some time ago:
http://www.antlr.org:8080/pipermail/stringtemplate-interest/2006-July/000512.html

In ST 3.0, your example is not working due to the same reason I mentioned in my posting:
The attribute renderers are not copied when a template is duplicated to be used in an evaluation
-- and no, I don't have any idea why this is not done as I never got any response.

Although ST is a great templating language/engine, imho it also suffers from the
lack of a real open source infrastructure: having just one developer for each language variant
(at least it seems to be that way), no online source code repository with version control,
no issue tracking system, etc.

The only way I found to deal with ST's deficiencies was to grab the source code,
put it into our company's code repository, and modify it according to our needs.

BTW: The source code is really easy to understand, so there is no reason not to modify it :)

 Oliver








From zen at freedbms.net  Fri Sep 22 02:51:08 2006
From: zen at freedbms.net (Zenaan Harkness)
Date: Fri, 22 Sep 2006 19:51:08 +1000
Subject: [stringtemplate-interest] String manipulations
In-Reply-To: <4513A156.8000803@market-maker.de>
References: <BDEBKCCLDDBHIMBFPIEICEEMCEAA.jjsnyders@rcn.com>
	<4513A156.8000803@market-maker.de>
Message-ID: <20060922095108.GA864@zen700m>

On Fri, Sep 22, 2006 at 10:39:50AM +0200, Oliver Flege wrote:
> Although ST is a great templating language/engine, imho it also suffers from the
> lack of a real open source infrastructure: having just one developer for each language variant
> (at least it seems to be that way), no online source code repository with version control,
> no issue tracking system, etc.
> 
> The only way I found to deal with ST's deficiencies was to grab the source code,
> put it into our company's code repository, and modify it according to our needs.
> 
> BTW: The source code is really easy to understand, so there is no reason not to modify it :)

Any chance you could put up an FTP, and a brief README of the differences?

Also, having a "feature enhanced" version over the base, would make
it easy for those not versed in parsers (such as myself) to have a nice
diff-ready tree, to learn from :)

Is your tree 3.0-based?

Either way, contributions will be greatly appreciated I'm sure.

Regards
Zen

-- 
Free Australia - www.UPMART.org
Please respect the confidentiality of this email as sensibly warranted.

From zen at freedbms.net  Fri Sep 22 06:54:42 2006
From: zen at freedbms.net (Zenaan Harkness)
Date: Fri, 22 Sep 2006 23:54:42 +1000
Subject: [stringtemplate-interest] String manipulations
In-Reply-To: <4513A156.8000803@market-maker.de>
References: <BDEBKCCLDDBHIMBFPIEICEEMCEAA.jjsnyders@rcn.com>
	<4513A156.8000803@market-maker.de>
Message-ID: <20060922135442.GA1644@zen700m>

On Fri, Sep 22, 2006 at 10:39:50AM +0200, Oliver Flege wrote:
> I had the same idea some time ago:
> http://www.antlr.org:8080/pipermail/stringtemplate-interest/2006-July/000512.html

Does anyone know how I can convert (or download) the "Downloadable"
version(s) of the mailing list archives for st-interest, in order to
read it in mutt, on my local hdd?

The text files open in vi, but in mutt it seems to see no messages.

If someone has the last year or so of st-interest, in a mutt compatible
file, I would also appreciate an offer/ zip file of it.

TIA
Zen

-- 
Free Australia - www.UPMART.org
Please respect the confidentiality of this email as sensibly warranted.

From jjsnyders at rcn.com  Fri Sep 22 07:12:51 2006
From: jjsnyders at rcn.com (John Snyders)
Date: Fri, 22 Sep 2006 10:12:51 -0400
Subject: [stringtemplate-interest] String manipulations
In-Reply-To: <4513A156.8000803@market-maker.de>
Message-ID: <BDEBKCCLDDBHIMBFPIEIEEENCEAA.jjsnyders@rcn.com>

Hi Oliver,

I'm new to this list and I didn't see your post.
I was beginning to suspect that dup was the problem.

I can't think of any reason why dup wouldn't copy the renderers. As it is
now it means that the only  time assigning a specific renderer to a
StringTemplate would work is if it is the top level template (from your
code's perspective the one you are calling toString on).

I assume you made the change to dup. How do we go about giving this code
back so that it can be included as a bug fix?

Or can someone explain why dup should not copy the renderers?

>From Oliver's original post: "For me, that's just not practical as it does
not work for
attribute properties and it would be just too awkward to add each
property as a first-class attribute."

I did not think there was anything special about properties in terms of how
they are processed by templates so a wrapper class would work just as well
for a property. You just have to make sure that the value of your property
contains the wrapped class {setDate(new WrappedDate(somedate)); } It doesn't
happen automatically as in the example where a derived StringTemplate is
used. Perhaps this is what you ment that it is not automatic and you can't
change all your model objects.

Looking at dup makes me wonder about the performance of StringTemplate it
seems that templates will be copied many times. But this is a different
subject and I will check the archives first.

Thanks,
-John

-----Original Message-----
From: stringtemplate-interest-bounces at antlr.org
[mailto:stringtemplate-interest-bounces at antlr.org]On Behalf Of Oliver
Flege
Sent: Friday, September 22, 2006 4:40 AM
To: stringtemplate-interest at antlr.org
Subject: Re: [stringtemplate-interest] String manipulations


Hi,

John Snyders wrote:
>
> I had the idea that I could use a template to format strings rather than
> create a wrapper around Strings.
> I would create a template and add it to a group the template would
> simply expand its argument.
> Registering a renderer with just this template should cause strings to
> be uppercased.
...
> Does anyone know why what I am doning isn't working? I'm using version
3.0.

I had the same idea some time ago:
http://www.antlr.org:8080/pipermail/stringtemplate-interest/2006-July/000512
.html

In ST 3.0, your example is not working due to the same reason I mentioned in
my posting:
The attribute renderers are not copied when a template is duplicated to be
used in an evaluation
-- and no, I don't have any idea why this is not done as I never got any
response.

Although ST is a great templating language/engine, imho it also suffers from
the
lack of a real open source infrastructure: having just one developer for
each language variant
(at least it seems to be that way), no online source code repository with
version control,
no issue tracking system, etc.

The only way I found to deal with ST's deficiencies was to grab the source
code,
put it into our company's code repository, and modify it according to our
needs.

BTW: The source code is really easy to understand, so there is no reason not
to modify it :)

 Oliver







_______________________________________________
stringtemplate-interest mailing list
stringtemplate-interest at antlr.org
http://www.antlr.org:8080/mailman/listinfo/stringtemplate-interest

From brian.kejser at protexis.com  Fri Sep 22 08:29:16 2006
From: brian.kejser at protexis.com (brian.kejser at protexis.com)
Date: Fri, 22 Sep 2006 08:29:16 -0700 (PDT)
Subject: [stringtemplate-interest] C# static methods
In-Reply-To: <36637.10.238.10.71.1158453496.webmail@10.238.10.71>
References: <36637.10.238.10.71.1158453496.webmail@10.238.10.71>
Message-ID: <60628.10.238.10.71.1158938956.webmail@10.238.10.71>

Hi

Is there another way of using embedded string templates in VS 2005 that
does not involve using the static method RegisterGroupLoader on the
StringTemplateGroup class?

If not, is there any reason why this method (and the corresponding static
member variable) can't be made non-static?

If I make some quick changes to temporarily implement this functionality
before a better solution can be found, can the changes be merged into the
source tree?

Thanks




From jjsnyders at rcn.com  Fri Sep 22 08:37:48 2006
From: jjsnyders at rcn.com (John Snyders)
Date: Fri, 22 Sep 2006 11:37:48 -0400
Subject: [stringtemplate-interest] Comments and questions from i18n document
Message-ID: <BDEBKCCLDDBHIMBFPIEICEEOCEAA.jjsnyders@rcn.com>

I have some comments and questions on the ?Web Application
Internationalization and Localization in Action? document.



First let me say I?m a big fan of StringTemplate. My first experience with
it was to generate configuration files for VoIP devices (someone else did
the implementation I was not hands on). One thing that needs to be
configured for VoIP devices is the MAC address but different devices require
different formats for it. We used the technique described in this i18n
document of using a wrapper class with pseudo properties for formatting. For
example $MAC.dashes$ would display ?00-04-5a-0a-17-59? and $MAC$ would
display ?00045a0a1759?. At the time we had not seen this document so were
unsure if this was the right thing to do. I like this solution for when the
designer needs control over how the value must be formatted and the
developer has the freedom to create his or her own type or wrapper type. In
the case where it is difficult for a developer to add a wrapper class to all
the value objects it would be nice to use $MAC:dashes()$ as described in
http://www.antlr.org:8080/pipermail/stringtemplate-interest/2006-September/0
00661.html.



Now I am trying to use StringTemplate for web applications.



I have a question on the following example from Section 3.



Locale locale = Locale.getDefault();

String language = locale.getLanguage();

String root = "/var/data/templates/";

StringTemplateGroup templates =

new StringTemplateGroup(language, root+language);?



Can this be done when the templates come from the class path? If so how?



A comment:

Section 3 (Site design per locale) does not seem well motivated to me. The
example given is text direction left-to-right vs. right-to-left. I have done
i18n desktop and web apps before but I have not yet had to deal with text
direction yet. Perhaps there are some issues with text direction that I am
not aware of. I wish this section were expanded to give a more concrete
example including text direction. What issues are there that group
inheritance solves that can?t be solved with parameterized setting of the
HTML dir attribute or css direction property.



It seems to me that group inheritance is more about skinning and less
important for localization. Even for skinning I think that methods involving
only css should be used first because (I think) designers will have an
easier time working with css.



Still, I like the group inheritance language feature.



A minor comment on section 2. From the document: ?The page name can be
encoded in the property name or a new property file can be used for each
page in order to handle strings for multiple pages.?



I generally would have one property file (perhaps a few but not one per
page). The reason is that often the same text is used on multiple pages for
consistency. For example, on the add and edit pages you will likely want to
refer to a field with the same label. No need to translate it twice or worse
have it translated different ways.



Thanks,

-John


-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org:8080/pipermail/stringtemplate-interest/attachments/20060922/5e4794e9/attachment.html 

From kroepke at classdump.org  Fri Sep 22 12:47:04 2006
From: kroepke at classdump.org (Kay Roepke)
Date: Fri, 22 Sep 2006 21:47:04 +0200
Subject: [stringtemplate-interest] String manipulations
In-Reply-To: <BDEBKCCLDDBHIMBFPIEIEEENCEAA.jjsnyders@rcn.com>
References: <BDEBKCCLDDBHIMBFPIEIEEENCEAA.jjsnyders@rcn.com>
Message-ID: <7E6CC783-936E-4FF1-9C96-81FCA65F0C2D@classdump.org>

Hi *,

On 22. Sep 2006, at 16:12 Uhr, John Snyders wrote:

> I can't think of any reason why dup wouldn't copy the renderers. As  
> it is
> now it means that the only  time assigning a specific renderer to a
> StringTemplate would work is if it is the top level template (from  
> your
> code's perspective the one you are calling toString on).

Correct.

> I assume you made the change to dup. How do we go about giving this  
> code
> back so that it can be included as a bug fix?

Simply post it to the list, possibly CC'ing Terence to get his  
attention ;)

> Or can someone explain why dup should not copy the renderers?

I think it should and consider that a bug. Normally individual  
templates don't have their own renderers and instead rely on the  
group's renderers to do the work. Still, when dup'ing them they  
should retain everything except the enclosing instance.

Ter is away until Sunday, so we'd have to talk it through with him  
again then.

>> From Oliver's original post: "For me, that's just not practical as  
>> it does not work for attribute properties and it would be just too  
>> awkward to add eachproperty as a first-class attribute."
>
> I did not think there was anything special about properties in  
> terms of how
> they are processed by templates so a wrapper class would work just  
> as well
> for a property. You just have to make sure that the value of your  
> property
> contains the wrapped class {setDate(new WrappedDate(somedate)); }  
> It doesn't
> happen automatically as in the example where a derived  
> StringTemplate is
> used. Perhaps this is what you ment that it is not automatic and  
> you can't
> change all your model objects.

You can subclass ST's setAttribute method and perform the wrapping in  
there. I believe this is mentioned in Ter's ST paper somewhere.
Works great, and requires no changes to your model classes whatsoever.

> Looking at dup makes me wonder about the performance of  
> StringTemplate it
> seems that templates will be copied many times. But this is a  
> different
> subject and I will check the archives first.

For an earlier discussion of this see: <http://www.antlr.org:8080/ 
pipermail/stringtemplate-interest/2006-June/000501.html>
I just looked in the depot and it seems the proposed changes have  
never been implemented. For now, if you want to go with renderers,  
add the
corresponding line to dup() or override setAttribute() and do the  
wrapping there, based on the object's class.


cheers,
-k
-- 
Kay R?pke <kroepke at classdump.org>
classdump Software
Key fingerprint = A849 0F2C C322 4022 379E  8661 7E1B FE0D 4CD2 A6D0




From kroepke at classdump.org  Fri Sep 22 13:11:29 2006
From: kroepke at classdump.org (Kay Roepke)
Date: Fri, 22 Sep 2006 22:11:29 +0200
Subject: [stringtemplate-interest] Comments and questions from i18n
	document
In-Reply-To: <BDEBKCCLDDBHIMBFPIEICEEOCEAA.jjsnyders@rcn.com>
References: <BDEBKCCLDDBHIMBFPIEICEEOCEAA.jjsnyders@rcn.com>
Message-ID: <A8D2868E-B260-44DE-9572-144AC8BDC1CD@classdump.org>

Hi John!
On 22. Sep 2006, at 17:37 Uhr, John Snyders wrote:

> I have a question on the following example from Section 3.
>
> Locale locale = Locale.getDefault();
> String language = locale.getLanguage();
> String root = "/var/data/templates/";
> StringTemplateGroup templates =
> new StringTemplateGroup(language, root+language);?
>
> Can this be done when the templates come from the class path? If so  
> how?

Yes, it can. ANTLRv3 does something like this for l10n of its  
diagnostic messages. Below is the code responsible for finding  
the .stg file:

	public static void setLocale(Locale locale) {
		ErrorManager.locale = locale;
		String language = locale.getLanguage();
		String fileName = "org/antlr/tool/templates/messages/"+language 
+".stg";
		ClassLoader cl = Thread.currentThread().getContextClassLoader();
		InputStream is = cl.getResourceAsStream(fileName);
		if ( is==null ) {
			cl = ErrorManager.class.getClassLoader();
			is = cl.getResourceAsStream(fileName);
		}
		if ( is==null && language.equals(Locale.US.getLanguage()) ) {
			rawError("ANTLR installation corrupted; cannot find English  
messages file "+fileName);
			panic();
		}
		else if ( is==null ) {
			rawError("no such locale file "+fileName+" retrying with English  
locale");
			setLocale(Locale.US); // recurse on this rule, trying the US locale
			return;
		}
		BufferedReader br = null;
		try {
			br = new BufferedReader(new InputStreamReader(is));
			messages = new StringTemplateGroup(br,
											   AngleBracketTemplateLexer.class,
											   initSTListener);
			br.close();
		}
		catch (IOException ioe) {
			rawError("cannot close message file "+fileName, ioe);
		}

		messages.setErrorListener(blankSTListener);
		boolean messagesOK = verifyMessages();
		if ( !messagesOK && language.equals(Locale.US.getLanguage()) ) {
			rawError("ANTLR installation corrupted; English messages file  
"+language+".stg incomplete");
			panic();
		}
		else if ( !messagesOK ) {
			setLocale(Locale.US); // try US to see if that will work
		}
	}

> A comment:
> Section 3 (Site design per locale) does not seem well motivated to  
> me. The example given is text direction left-to-right vs. right-to- 
> left. I have done i18n desktop and web apps before but I have not  
> yet had to deal with text direction yet. Perhaps there are some  
> issues with text direction that I am not aware of. I wish this  
> section were expanded to give a more concrete example including  
> text direction. What issues are there that group inheritance solves  
> that can?t be solved with parameterized setting of the HTML dir  
> attribute or css direction property.
>
> It seems to me that group inheritance is more about skinning and  
> less important for localization. Even for skinning I think that  
> methods involving only css should be used first because (I think)  
> designers will have an easier time working with css.
>
> Still, I like the group inheritance language feature.

I think this an issue of code hygiene ;) I an ideal world all you'd  
have to do is to supply the proper CSS attributes for text direction.  
Most probably, though, you'd have to tweak some other layout bits to  
accomodate for different lengths of strings, maybe you'd even like to  
do some heavier layout changes for right-to-left locales. This would  
lead to heavy usage of <if()> constructs in your templates. By using  
group inheritance you can override certain templates completely to  
specify radical different layouts without having to change any of the  
common layout, thus increasing template sharing and maintability.  
Using regions in addition to that can make for immensely powerful  
adaptibility. Again, ANTLR v3 uses this approach to incorporate tree  
building and debugging code into the generated parsers.
What you gain is not having to respecify any common template content  
and not littering your templates with unnecessary 'if's.
Text direction support can get *really* messy if you want to present  
high-quality pages that feel good for both directions. It's more  
often than not not a simple matter if the direction. Sadly ;)


HTH,

-k
-- 
Kay R?pke <kroepke at classdump.org>
classdump Software
Key fingerprint = A849 0F2C C322 4022 379E  8661 7E1B FE0D 4CD2 A6D0




From zen at freedbms.net  Fri Sep 22 16:35:13 2006
From: zen at freedbms.net (Zenaan Harkness)
Date: Sat, 23 Sep 2006 09:35:13 +1000
Subject: [stringtemplate-interest] ST multi-valued attributes modification
	inconsistency
Message-ID: <20060922233513.GA3920@zen700m>

By my reading of StringTemplate.java, setAttribute has two ways
that multi-valued attributes can be stored:

1) Within the Collection as passed in by a user.

2) Within a Collection instantiated by ST itself.

This seems conceptually inconsistent.

I could pass in some collection, eg.
myst.setAttribute("importantStuff",myUpdatingList)

and then later on during my ST building phase, I'm adding to
myUpdatingList.

Of course, then I forget and go and add an extra item or list etc
to my ST instance, and now the value stored by ST is no longer my
myUpdatingList but is an STAttributeList (ST managed list).

I then add another value(s) to myUdatingList, which value(s) are
not output by myst.toString() because myUpdatingList is no longer
stored by ST!

I think this is conceptually horrible, and in all cases, ST should
create its own "lightweight as possible" containers to store
stuff (at least, when there's more than one value - the
implementation can of course be performant, it's the consistency
of the conceptual model I'm talking about). That should probably
be the default.

Alternatively, to maximise performance, there could be a "use my
container only" version of setAttribute, which could perhaps be
done by way of subclassing StringTemplate.java.

Yes, the example above can be considered a bug in my code, but why
have the potential landmine when it's unnecessary.

If there's an explicit
myst.setAttributeStorageMode([STManaged,UserManaged]) method, then
it is up to the user to decide how to behave. As it is, the
current behaviour is documented somewhat, but in actual behaviour
is implicit. The ST constructor is another place where this mode
of operation could be set.

Thoughts?
Zen

-- 
Free Australia - www.UPMART.org
Please respect the confidentiality of this email as sensibly warranted.

From zen at freedbms.net  Fri Sep 22 16:46:55 2006
From: zen at freedbms.net (Zenaan Harkness)
Date: Sat, 23 Sep 2006 09:46:55 +1000
Subject: [stringtemplate-interest] C# static methods
In-Reply-To: <60628.10.238.10.71.1158938956.webmail@10.238.10.71>
References: <36637.10.238.10.71.1158453496.webmail@10.238.10.71>
	<60628.10.238.10.71.1158938956.webmail@10.238.10.71>
Message-ID: <20060922234655.GB3920@zen700m>

On Fri, Sep 22, 2006 at 08:29:16AM -0700, brian.kejser at protexis.com wrote:
> Hi
> 
> Is there another way of using embedded string templates in VS 2005 that
> does not involve using the static method RegisterGroupLoader on the
> StringTemplateGroup class?
> 
> If not, is there any reason why this method (and the corresponding static
> member variable) can't be made non-static?

Not that I know of. This is currently on-topic, for threading
issues as well.

> If I make some quick changes to temporarily implement this functionality
> before a better solution can be found, can the changes be merged into the
> source tree?

It's up to Ter what he puts in his tree of course.

+1 from me for un-staticizing ST! Make it setGroupLoader, etc.

+1 from me for un-synchronizing ST at the same time as
un-staticizing ST, until and unless a clear synchronization model
for ST is documented. The old JGL/Generic Collection Library for
Java, had nice algorithmic performance documentation, and I think
also synchronization documentation, which was very well done from
my memory.

Already, the synchronization that may be in ST cannot be relied
upon if you have multiple threads accessing the same
StringTemplate instance! There a races galore!

But that's not a bad thing in my book, just that you need to (and
should) have the simplest possible access model your app can
accomodate anyway. Demonstrate that you need to have multiple
threads accessing the same ST, and only then, based on access
patterns, can you consider what the best-performing combinations
of synchronizing and internal containers and ST-user level
synchronization, etc, are going to satisfy your web-server's
performance needs.

Cheers
Zen

-- 
Free Australia - www.UPMART.org
Please respect the confidentiality of this email as sensibly warranted.

From zen at freedbms.net  Fri Sep 22 19:27:24 2006
From: zen at freedbms.net (Zenaan Harkness)
Date: Sat, 23 Sep 2006 12:27:24 +1000
Subject: [stringtemplate-interest] ST multi-valued attributes
	modification inconsistency
In-Reply-To: <20060922233513.GA3920@zen700m>
References: <20060922233513.GA3920@zen700m>
Message-ID: <20060923022724.GC3920@zen700m>

On Sat, Sep 23, 2006 at 09:35:13AM +1000, Zenaan Harkness wrote:
> If there's an explicit
> myst.setAttributeStorageMode([STManaged,UserManaged]) method, then
> it is up to the user to decide how to behave. As it is, the
> current behaviour is documented somewhat, but in actual behaviour
> is implicit. The ST constructor is another place where this mode
> of operation could be set.

Thinking about it more: you would probably want choice of mode as
per-attribute specification.

Main point: to have the mode change mid-flight is not nice design.

-- 
Free Australia - www.UPMART.org
Please respect the confidentiality of this email as sensibly warranted.

From jjsnyders at rcn.com  Sat Sep 23 07:11:27 2006
From: jjsnyders at rcn.com (John Snyders)
Date: Sat, 23 Sep 2006 10:11:27 -0400
Subject: [stringtemplate-interest] String manipulations
In-Reply-To: <7E6CC783-936E-4FF1-9C96-81FCA65F0C2D@classdump.org>
Message-ID: <BDEBKCCLDDBHIMBFPIEICEFACEAA.jjsnyders@rcn.com>

Here is the change I made to StringTemplate.java

Before:
	protected void dup(StringTemplate from, StringTemplate to) {
		to.pattern = from.pattern;
		to.chunks = from.chunks;
		to.formalArguments = from.formalArguments;
		to.numberOfDefaultArgumentValues = from.numberOfDefaultArgumentValues;
		to.name = from.name;
		to.group = from.group;
		to.nativeGroup = from.nativeGroup;
		to.listener = from.listener;
		to.regions = from.regions;
		to.isRegion = from.isRegion;
		to.regionDefType = from.regionDefType;
	}

After:
	protected void dup(StringTemplate from, StringTemplate to) {
		to.pattern = from.pattern;
		to.chunks = from.chunks;
		to.formalArguments = from.formalArguments;
		to.numberOfDefaultArgumentValues = from.numberOfDefaultArgumentValues;
		to.name = from.name;
		to.group = from.group;
		to.nativeGroup = from.nativeGroup;
		to.listener = from.listener;
		to.regions = from.regions;
		to.isRegion = from.isRegion;
		to.regionDefType = from.regionDefType;
		to.attributeRenderers = from.attributeRenderers;
	}

It is just the one line added to the end:
		to.attributeRenderers = from.attributeRenderers;

This will allow using templates to do specific rendering such as Uppercase:
    StringTemplateGroup templates = new StringTemplateGroup("html");
    StringTemplateGroup builtinTemplates = new
StringTemplateGroup("builtins");
    StringTemplate uc = builtinTemplates.defineTemplate("upperCase",
"x$it$x");
    uc.registerRenderer(String.class, new UpperCaseRenderer());
    templates.setSuperGroup(builtinTemplates);

Where UpperCaseRenderer is:
    public class UpperCaseRenderer implements AttributeRenderer
    {

        public String toString(Object o)
        {
            if (o instanceof String)
            {
                String s = (String)o;
                return s.toUpperCase();
            }
            return o.toString();
        }
    }

Then in your templates you can use
$upperCase(it=name)$
or
$name:upperCase()$

John

-----Original Message-----
From: Kay Roepke [mailto:kroepke at classdump.org]
Sent: Friday, September 22, 2006 3:47 PM
To: John Snyders
Cc: Oliver Flege; stringtemplate-interest at antlr.org
Subject: Re: [stringtemplate-interest] String manipulations


Hi *,

On 22. Sep 2006, at 16:12 Uhr, John Snyders wrote:

> I can't think of any reason why dup wouldn't copy the renderers. As
> it is
> now it means that the only  time assigning a specific renderer to a
> StringTemplate would work is if it is the top level template (from
> your
> code's perspective the one you are calling toString on).

Correct.

> I assume you made the change to dup. How do we go about giving this
> code
> back so that it can be included as a bug fix?

Simply post it to the list, possibly CC'ing Terence to get his
attention ;)

> Or can someone explain why dup should not copy the renderers?

I think it should and consider that a bug. Normally individual
templates don't have their own renderers and instead rely on the
group's renderers to do the work. Still, when dup'ing them they
should retain everything except the enclosing instance.

Ter is away until Sunday, so we'd have to talk it through with him
again then.

From parrt at cs.usfca.edu  Mon Sep 25 10:47:01 2006
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon, 25 Sep 2006 10:47:01 -0700
Subject: [stringtemplate-interest] String manipulations
In-Reply-To: <7E6CC783-936E-4FF1-9C96-81FCA65F0C2D@classdump.org>
References: <BDEBKCCLDDBHIMBFPIEIEEENCEAA.jjsnyders@rcn.com>
	<7E6CC783-936E-4FF1-9C96-81FCA65F0C2D@classdump.org>
Message-ID: <198F2C40-FA4C-4E2A-B334-74C9EF65D986@cs.usfca.edu>


On Sep 22, 2006, at 12:47 PM, Kay Roepke wrote:
>> I can't think of any reason why dup wouldn't copy the renderers. As

A bug.  :)

> For an earlier discussion of this see: <http://www.antlr.org:8080/
> pipermail/stringtemplate-interest/2006-June/000501.html>
> I just looked in the depot and it seems the proposed changes have
> never been implemented. For now, if you want to go with renderers,
> add the
> corresponding line to dup() or override setAttribute() and do the
> wrapping there, based on the object's class.

Added to todo list.

Ter

From parrt at cs.usfca.edu  Mon Sep 25 10:53:02 2006
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon, 25 Sep 2006 10:53:02 -0700
Subject: [stringtemplate-interest] String manipulations
In-Reply-To: <BDEBKCCLDDBHIMBFPIEICEFACEAA.jjsnyders@rcn.com>
References: <BDEBKCCLDDBHIMBFPIEICEFACEAA.jjsnyders@rcn.com>
Message-ID: <1F475221-3E0D-4840-BEBE-6E865B474442@cs.usfca.edu>


On Sep 23, 2006, at 7:11 AM, John Snyders wrote:

> Here is the change I made to StringTemplate.java
>
> It is just the one line added to the end:
> 		to.attributeRenderers = from.attributeRenderers;

Fixed.  Thanks.

> Then in your templates you can use
> $upperCase(it=name)$
> or
> $name:upperCase()$

Yes, but doesn't that uppercase all strings?  Calling that upperCase  
template makes no sense to me...sorry.  Can you explain how that  
gives you control?  You could do $name:upperCase()$ and then have a  
renderer that sense what template it's in:

     public class UpperCaseRenderer implements AttributeRenderer
     {

         public String toString(Object o)
         {
             if (o instanceof String && template is "upperCase")
             {
                 String s = (String)o;
                 return s.toUpperCase();
             }
             return o.toString();
         }
     }

But you don't know what the surrounding template is :(

Ter


From parrt at cs.usfca.edu  Mon Sep 25 11:01:24 2006
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon, 25 Sep 2006 11:01:24 -0700
Subject: [stringtemplate-interest] Distinguish null and false in
	condition
In-Reply-To: <451251A8.2000901@market-maker.de>
References: <451251A8.2000901@market-maker.de>
Message-ID: <BF9DD1D8-E115-436E-8AAD-D32EA749C5F6@cs.usfca.edu>


On Sep 21, 2006, at 1:47 AM, Oliver Flege wrote:

> Hi,
>
> recently, I used ST to render xml tags; for tags that contained a  
> Boolean
> value, I had to distinguish between a null value (output <tag  
> xsi:nil="true"/>)
> and either true or false (output <tag>true</tag> / <tag>false</tag>)
>
> Since ST's if condition evaluates to false for both null and  
> Boolean.FALSE,
> I modified ST to support $if(?attr)$, which evaluates to true iff
> attr is not null.
>
> The changes necessary to support this are rather trivial (treat ?  
> similar to
> the ! operator and call chunk.testAttributeDefined(a) if ? is used,
> that funtion returns true iff a is not null).
>
> How about including this change in ST?

Hi!  An uncommon need I'd say...probably doens't warrant new syntax.   
Can you send in wrapped/tweaked booleans?  Easy with a subclass,  
override setAttribute.

Ter


From parrt at cs.usfca.edu  Mon Sep 25 11:02:42 2006
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon, 25 Sep 2006 11:02:42 -0700
Subject: [stringtemplate-interest] String manipulations
In-Reply-To: <1F475221-3E0D-4840-BEBE-6E865B474442@cs.usfca.edu>
References: <BDEBKCCLDDBHIMBFPIEICEFACEAA.jjsnyders@rcn.com>
	<1F475221-3E0D-4840-BEBE-6E865B474442@cs.usfca.edu>
Message-ID: <3DDD7F60-725F-4F5F-B294-1E23624DF77B@cs.usfca.edu>


On Sep 25, 2006, at 10:53 AM, Terence Parr wrote:

>
> On Sep 23, 2006, at 7:11 AM, John Snyders wrote:
>
>> Here is the change I made to StringTemplate.java
>>
>> It is just the one line added to the end:
>> 		to.attributeRenderers = from.attributeRenderers;
>
> Fixed.  Thanks.
>
>> Then in your templates you can use
>> $upperCase(it=name)$
>> or
>> $name:upperCase()$
>
> Yes, but doesn't that uppercase all strings?  Calling that upperCase

Ok, I think i get it, but don't you have to register a render with  
your subgroup to prevent it inheriting the renderer?

Ter



From parrt at cs.usfca.edu  Mon Sep 25 11:04:11 2006
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon, 25 Sep 2006 11:04:11 -0700
Subject: [stringtemplate-interest] String manipulations
In-Reply-To: <4513A156.8000803@market-maker.de>
References: <BDEBKCCLDDBHIMBFPIEICEEMCEAA.jjsnyders@rcn.com>
	<4513A156.8000803@market-maker.de>
Message-ID: <90CDE22E-634B-4CA7-A402-4135519125E2@cs.usfca.edu>


On Sep 22, 2006, at 1:39 AM, Oliver Flege wrote:
> Although ST is a great templating language/engine, imho it also  
> suffers from the
> lack of a real open source infrastructure: having just one  
> developer for each language variant
> (at least it seems to be that way), no online source code  
> repository with version control,
> no issue tracking system, etc.

Want access to the depot?  Just lemme know :)  Readonly at first ;)

Ter

From parrt at cs.usfca.edu  Mon Sep 25 11:05:46 2006
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon, 25 Sep 2006 11:05:46 -0700
Subject: [stringtemplate-interest] String manipulations
In-Reply-To: <BDEBKCCLDDBHIMBFPIEIEEENCEAA.jjsnyders@rcn.com>
References: <BDEBKCCLDDBHIMBFPIEIEEENCEAA.jjsnyders@rcn.com>
Message-ID: <9091E6EE-E9F7-4E82-9B6B-5916E8DD6BE6@cs.usfca.edu>


On Sep 22, 2006, at 7:12 AM, John Snyders wrote:
> Looking at dup makes me wonder about the performance of  
> StringTemplate it
> seems that templates will be copied many times. But this is a  
> different
> subject and I will check the archives first.

It shares the "compiled" expression trees, only those fields are  
copied to instance a new template.  Seems ok....

Ter

From jjsnyders at rcn.com  Mon Sep 25 12:30:55 2006
From: jjsnyders at rcn.com (John Snyders)
Date: Mon, 25 Sep 2006 15:30:55 -0400
Subject: [stringtemplate-interest] String manipulations
In-Reply-To: <3DDD7F60-725F-4F5F-B294-1E23624DF77B@cs.usfca.edu>
Message-ID: <BDEBKCCLDDBHIMBFPIEIEEFDCEAA.jjsnyders@rcn.com>

The UpperCase renderer is very specific and should only be registered with
the template called upperCase. It is not registered with a template group so
it won't be inherited. When looking for a renderer first the template is
checked then any enclosing templates and finally the group is checked which
will also look in super groups.

The need came from Zenaan Harkness
(http://www.antlr.org:8080/pipermail/stringtemplate-interest/2006-September/
000646.html) who wanted the template writer to have control over when to
uppercase model data without having to change the model to add wrappers.

I agree that it is better to create wrapper classes or sub classes with
pseudo properties. For example creating a String wrapper class WrapperString
with property method getUpperCase.

With template "upperCase" defined as "$it$"
and template "message" defined as "Hello $p0$!"
and data value "name"="John"
and the UpperCase renderer (described in previous message) registered with
upperCase template only
Here are some test cases
1) $message(p0=name)$                   produces: Hello John!
2) $message(p0={$upperCase(it=name)$})$ produces: Hello JOHN!
3) $upperCase(it={$fmt2(p0=name)$})$    produces: Hello JOHN!
4) $upperCase(it="some text")$          produces: SOME TEXT

Note that test 3 does not produce the expected "HELLO JOHN!" I think that
this is expected because renderers are only called on attributes. In case 3
all strings expanded within the anon. template will get upperCased. Test 4
shows that literal strings passed as parameters to templates act as strings.

To compare with the method of using a wrapper class for strings and assuming
all strings are wrapped when added to templates as attributes.
$upperCase(it=name)$ would become $name.upperCase$
I don't see a way for the upperCase property to do with was done in test
case 4 above unless "some text" was moved into the data model.

The upperCase property is simpler to type. I'm not sure either syntax is
clear in expressing what it does - affect rendering.

-John

-----Original Message-----
From: stringtemplate-interest-bounces at antlr.org
[mailto:stringtemplate-interest-bounces at antlr.org]On Behalf Of Terence
Parr
Sent: Monday, September 25, 2006 2:03 PM
To: stringtemplate-interest
Subject: Re: [stringtemplate-interest] String manipulations



On Sep 25, 2006, at 10:53 AM, Terence Parr wrote:

>
> On Sep 23, 2006, at 7:11 AM, John Snyders wrote:
>
>> Here is the change I made to StringTemplate.java
>>
>> It is just the one line added to the end:
>> 		to.attributeRenderers = from.attributeRenderers;
>
> Fixed.  Thanks.
>
>> Then in your templates you can use
>> $upperCase(it=name)$
>> or
>> $name:upperCase()$
>
> Yes, but doesn't that uppercase all strings?  Calling that upperCase

Ok, I think i get it, but don't you have to register a render with
your subgroup to prevent it inheriting the renderer?

Ter


_______________________________________________
stringtemplate-interest mailing list
stringtemplate-interest at antlr.org
http://www.antlr.org:8080/mailman/listinfo/stringtemplate-interest

From simon_may at bridleway.freeserve.co.uk  Thu Sep 28 10:19:01 2006
From: simon_may at bridleway.freeserve.co.uk (Simon May)
Date: Thu, 28 Sep 2006 18:19:01 +0100
Subject: [stringtemplate-interest] Issues using first and rest
Message-ID: <IMEDLNKGPOOBGPHHMCKKMEKMCFAA.simon_may@bridleway.freeserve.co.uk>

Hi I am currently using ST.net v2.3b5. A great piece of software by the way.

I have run into an issue with the following (extracts only shown). I am not
sure if this is a bug or I have not constructed the template correctly. I
have tried a number of variants. The attribute view.ColumnNames returns an
array of strings (names).

createview(view) ::= <<


AS
<view:selectlist();seperator=",\r\n">


>>

selectlist() ::= <<
<first(it.ColumnNames):{p | SELECT  <p>}>
<rest(it.ColumnNames):{p |         <p>}>
>>

Generates:
CREATE VIEW [dbo].[AccountEntryView](
AS
SELECT  JournalType
        CreditAmountDebitAmountReferenceClientKeyAccountNameCodeId



However

createview(view) ::= <<


AS
<first(view.ColumnNames):{p | SELECT  <p>,}>
<rest(view.ColumnNames):{p |         <p>};separator=",\r\n">


>>

Generates:

CREATE VIEW [dbo].[AccountEntryView](
AS
SELECT  JournalType,
        CreditAmount,
        DebitAmount,
        Reference,
        ClientKey,
        AccountName,
        Code,

Which is the desired result. However would generate incorrect code if there
were only one column name. I would like to do similar things as the
generator developed but it seems to me that the first and rest operators are
not working as intended. Perhaps someone can help me get this right.

Simon
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org:8080/pipermail/stringtemplate-interest/attachments/20060928/80be2ec3/attachment.html 

From parrt at cs.usfca.edu  Thu Sep 28 11:22:23 2006
From: parrt at cs.usfca.edu (Terence Parr)
Date: Thu, 28 Sep 2006 11:22:23 -0700
Subject: [stringtemplate-interest] String manipulations
In-Reply-To: <BDEBKCCLDDBHIMBFPIEIEEFJCEAA.jjsnyders@rcn.com>
References: <BDEBKCCLDDBHIMBFPIEIEEFJCEAA.jjsnyders@rcn.com>
Message-ID: <CE3D808F-5097-4C37-8C67-FF6DFD6C81F2@cs.usfca.edu>


On Sep 27, 2006, at 9:39 PM, John Snyders wrote:

> Sorry the response is so long. I am new to ST and also need to  
> think things
> through in writing.

Hi John, this is an awesome summary of the situation...hope you don't  
mind if I CC the list.

> First lets see if I understand the situation. The general problem  
> is how
> does a template author control the formatting of an attribute in a
> constrained way. There are reasonable motivations for the template  
> author to
> do this. My example was formatting a MAC address with dash or colon
> separators depending on the needs of a VoIP device config file  
> template.
> Another example is when dates need to be formatted in either full  
> or short
> form in the same template. Control over case is another example.  
> Another is
> JavaScript escaping.

That is precisely the need and issue...flexibility w/o opening it all  
up.

> The things to consider are the syntax used to invoke the specific
> formatting, the implementation and impact on the controller/model  
> and how it
> affects the model view separation.

Yup!

> I'll start by looking at the different syntax used in the  
> template.  In the
> following I'll use the attribute "name" and the special formatting  
> operation
> upperCase but it could be any attribute/property/map and any  
> formatting.
> $name$ - this is the no special format case. The following are  
> different
> ways to get an uppercase version of name.
>
> 1)	$upperCaseName$ - this is where the controller adds a specific  
> attribute
> with a specific name that indicates the format. The disadvantage of  
> this is
> the need to add extra attributes. It just doesn't scale well (n  
> attributes
> times m formats).

correct.  ugly, but works in some cases.

> 2)	$name.upperCase$ - this is where a pseudo property is used to  
> affect the
> format of an attribute. It could be implemented a number of ways. A  
> wrapper
> class around name could add a getUpperCase property method. This  
> wrapper
> could be used directly by the model (in which case it may not be  
> thought of
> as a wrapper) or just added manually or automatically when the  
> attribute is
> added to the ST. Having to override StringTempalate to get the  
> automatic
> wrapping along with the overhead of an extra wrapper class is the  
> motivation
> for your singleton renderer.

Correct.

> 3)	$name:upperCase()$ uses a template (upperCase) with a custom  
> renderer
> assigned to it to uppercase its "it" argument. An alternative form is
> $upperCase(it=name)$.

or

$upperCase(name)$ when formal args are defined for upperCase().

> 4)	$name; format="uppercase"$ is a proposed syntax similar  
> to ;seperator.
>
> Option 4 most clearly represents the underlying intention. Both 2  
> and 3
> would be a surprise to anyone who knows the basics of ST.

Correct, though name:upperCase() does seem to follow the functional  
style of "apply template".

> Option 2 looks like a property reference or map lookup. One would  
> not expect
> it to have any impact on rendering.

Perhaps, but stuff like $birthday.longFormat$ is not too far of a  
stretch I'd say.

> The only thing that gives any hint is
> that the property reads as a verb.

toUpperCase might be better I guess for the verb.

> Most properties tend to be nouns. Of less
> concern is that these pseudo properties pollute the namespace. You  
> couldn't
> have a real property and a formatting property with the same name.

True.

> Option 3 looks like any normal template invocation over a  
> collection. Again
> one would not expect a template to have an effect on rendering.

Well, I'd say you're right, but rendering and apply-template are very  
similar in concept, just not implementation.

Option 3 has the problem of "caching/reloading from disk"; the  
renderers are not set automatically for upperCase template.  If the  
template is thrown out and reloaded by ST group then the renderer is  
lost.

> I haven't
> used ST enough but I think template names would tend to be nouns so  
> again
> the fact that the template name reads as a verb could indicate that it
> affects rendering but this is very weak argument for this syntax being
> understandable.

Well, you can say that the $x:y()$ means format x as a y like  
$m:method()$.  It's not a huge stretch in my view.  Better than $x.y$  
as you point out about the properties.  The "()" denotes an action  
sort of.

> Option 1 isn't too bad. It uses upperCase as an adjective to modify  
> the noun
> "name" and it is part of the specification of the set of attributes  
> so its
> meaning can be understood. Although it has the same effect (an  
> uppercase
> version of name being output) it is not a renderer.
>
> So from a syntax perspective I like option 4 the best. The concern  
> with
> option 4 is that it could be used to call a model method with a string
> argument. This is the slippery slope argument. At first I agreed  
> with this
> argument against option 4 but now I'm not sure. I am compelled by the
> expressiveness of it.

Yes, but I cannot open that hole I don't think.  Allowing you to call  
a random method seems way too open.

> It is probably not a good argument (we already slipped so why not  
> slip some
> more) but I noticed that I can already call a method with a string.

Correct, but it has to be only toString() not a random method.  Abuse  
is clear when you see it.  If you alter toString() to wipe the hard  
drive, I cannot prevent this hole.  At some level 32 bits of binary  
data have to be toString() to a string in 0..9 for integers, for  
example.

> With this renderer I can do some simple math in the template
>     public static class BadRenderer implements AttributeRenderer
>     {
>         public String toString(Object o)
>         {
>             if (o instanceof String)
>             {
>                 String s = (String)o;
>                 String args[] = s.split(",");
>                 if (args.length >= 3)
>                 {
>                     int a = Integer.parseInt(args[1]);
>                     int b = Integer.parseInt(args[2]);
>                     int c = 0;
>                     if (args[0].equals("+"))
>                     {
>                         c = a + b;
>                     }
>                     else if (args[0].equals("-"))
>                     {
>                         c = a - b;
>                     }
>                     return new Integer(c).toString();
>                 }
>                 return "bad input";
>             }
>             return o.toString();
>         }
>     }
>     .
>     StringTemplate bad = builtinTemplates.defineTemplate("bad", "$it 
> $");
>     bad.registerRenderer(String.class, new BadRenderer());
>
> Now in my template I have
>     3+5 is $bad(it="+,3,5")$
> and it prints out
>     3+5 is 8
>
> I don't know if this indicates that option 4 isn't that bad or if per
> StringTemplate renderers should not be allowed. One could argue that
> property references should not be allowed because they can have side
> effects.

They must not have side-effects.  If you alter a property like  
$user.name$ to update the database, that is something i cannot  
prevent.  Again, abuse is clear when getName() wipes the harddrive.

> That would just leave scalar attributes and maps, and public object
> fields. But wait I can implement the same functionality as above  
> with a map.
> Just create a class that implements Map and the get method can do  
> anything
> with the key string. Example of use: $badmap.({+,3,5})$. You were  
> probably
> aware of this. The old documentation says: "You may pass in  
> instances of
> type HashMap and Hashtable but cannot pass in objects implementing  
> the Map
> because that would allow all sorts of wacky stuff like database  
> access." But
> now you can pass in Map. What changed your mind?

There is a case where you want to have Map access strings for i18n in  
a database.  The potential for abuse is there as you've shown with  
badmap above.  My philosophy is to make bad behavior as inconvenient  
as possible and to clearly highlight it (getName() wiping drive)  
while still allowing flexibility and being a practical system.

> Here is another distinction between options 2, 3, and 4. With  
> option 2 there
> is no way that the rendering can be applied to anything but the  
> value of the
> attribute. With 3 the rendering done by the template upperCase can  
> apply to
> attributes, string literals, and templates.

Very true.  Hadn't thought of that.

> When applied to templates only
> attributes referenced within that template get uppercased. Example  
> from my
> previous email (correcting the typo):
> $upperCase(it={$message(p0=name)$})$    produces: "Hello JOHN!"  
> "Not HELLO
> JOHN"

If args are defined you can say:

$upperCase({$message(name)$})$

Hmm...sees that the whole message should be uppercased, but youre  
right...it only does on the renderering of attributes not string  
literals.  So option 3 seems not so good.

> With option 4 I think the expected behavior is that the formatting  
> would
> apply to the whole template. The reason is that the ;separator syntax
> applies to templates as in:
> $requestParameters.(k) : {[$it$]}; separator=", "$ which produces a  
> comma
> separated list of values enclosed in square brackets (ex: [a], [b],  
> [c]).
> So I would expect ${ hello $name$!};format="upperCase"$ to produce  
> "HELLO
> JOHN!"

Correct.

> Another problem with option 4 is that the template makes  
> assumptions about
> the types of attributes. For example if format short applies to  
> dates then
> $name;format="short"$ makes no sense. This breaks your rule 4.

What if format="foo" didn't call foo() on the object?  What if it  
called format(object,"foo") with "foo" as the format string?  If  
format is defined, cool else it's ignored.

Actually doesn't this present the renderer problem again?  String  
would have to have a renderer defined...oh, but you could do that  
globally with a singleton renderer registered for String.  If you  
ever anywhere said $somestring; format="abbrev"$, the  
stringRenderer.format(somestring, "abbrev") would be called.   
Hmm...opens things up a bit, but I guess if format wipes the drive  
it's clear you're abusing the format method.

> Finally back to the original question. I'm not sure I fully  
> understand your
> example:
> "$name.toUpper$ would be converted to
> r = renderer.get("String");
> r.toUpper(name);
> So, in the controller you register String->SeansHTMLRendererThingie
> and then call $name.seansMethodForManipulatingStringsInACoolWay$."
>
> It seems to me that the main difference is that this way uses the  
> data type
> "String" to lookup a renderer and then reflection is used to find a  
> format
> method such as "toUpper" on that renderer and calls it. Where  
> presumably
> option 4 would be implemented by passing the object to render and  
> the format
> string to a renderer.

Yes.

> If this is the difference then YES I think it is the right solution  
> for the
> implementation.

Meaning the name.toUpper or name; format="toUpper"?

> It constrains the possible set of renderers to just what the
> renderer class provides and makes it very clear what should happen  
> when
> there is a type mismatch. (renderer.get("String") should return  
> null if it
> doesn't know what to do with strings and then the next step would be
> skipped.)
>
> However I think the implementation is independent of the syntax  
> used. Why
> couldn't option 4 ($name;format="upperCase"$) be translated to
> r = renderer.get("String");
> r.upperCase(name);

Interesting...ok, we don't want $x; format="y'$ to call x.y(), but we  
can allow it to call $xClassRenderer.y(x)$.  That is better...

> The same amount of information is available to the implementation  
> in both
> syntaxes.

I have also just increased use of options such as wrap so this is not  
a new "concept".

> To sum up I would like to see option 4 supported and implemented as  
> you
> described. The formatting would apply to (the result of) templates  
> to be
> consistent with the ;separator.

Yes, so I'd evaluate the entire expressions even if

$names:{$i$. <b>$it$</b>}$; format="upperCase"$

Here, the entire list of crap would be uppercased including the $i$  
numbers.  Right?

> If there is a type mismatch (such as
> $today;format="upperCase"$ where upperCase works on Strings and  
> today is a
> Date) then the empty string is returned (or perhaps an exception  
> would be
> better). Using a format string that doesn't exist as a method could  
> also be
> defined to return an empty string or throw an exception (not sure  
> which is
> best).

Hmm...I think perhaps that should reduce to simply $today$ if there  
is no formatter...perhaps that allows you to remove a renderer w/o  
breaking stuff?

> This handling of type mismatches and unsupported formats with option 4
> syntax is preferred over the option 2 syntax. Option 2 would end up
> potentially hiding properties. The person creating properties and  
> the person
> defining renderers would have to coordinate because they are  
> sharing the
> same namespace. Option 4 is a little more efficient since you know  
> you are
> done if you don't find a format method you don't have to go looking  
> for a
> property.

I think we'll need a severity/pendantic option for ST soon so you can  
say what becomes an exception and what is ignored.

>
> Thanks for asking,

Thanks for your excellent analysis and suggestions!

Terence


From parrt at cs.usfca.edu  Thu Sep 28 11:44:15 2006
From: parrt at cs.usfca.edu (Terence Parr)
Date: Thu, 28 Sep 2006 11:44:15 -0700
Subject: [stringtemplate-interest] Issues using first and rest
In-Reply-To: <IMEDLNKGPOOBGPHHMCKKMEKMCFAA.simon_may@bridleway.freeserve.co.uk>
References: <IMEDLNKGPOOBGPHHMCKKMEKMCFAA.simon_may@bridleway.freeserve.co.uk>
Message-ID: <9973E4A9-2886-4BCC-9940-AB767B7EC0A6@cs.usfca.edu>


On Sep 28, 2006, at 10:19 AM, Simon May wrote:

> Hi I am currently using ST.net v2.3b5. A great piece of software by  
> the way.
Hi Simon, Glad you like it!
>  I have run into an issue with the following (extracts only shown).  
> I am not sure if this is a bug or I have not constructed the  
> template correctly. I have tried a number of variants. The  
> attribute view.ColumnNames returns an array of strings (names).
>
>
>
> createview(view) ::= <<
>
> ?
>
> AS
>
> <view:selectlist();seperator=",\r\n">

I think seperator->separator is your problem. :)

Ter

From jjsnyders at rcn.com  Thu Sep 28 12:02:50 2006
From: jjsnyders at rcn.com (John Snyders)
Date: Thu, 28 Sep 2006 15:02:50 -0400
Subject: [stringtemplate-interest] Bug in rest function when applied
	recursively
Message-ID: <BDEBKCCLDDBHIMBFPIEIGEFKCEAA.jjsnyders@rcn.com>

I was thinking about how templates can be called recursively. Just for fun I
decided to try the classic recursive definition of reverse.
    group Reverse;
    reverse(L) ::= <<
    $if(L)$
    $reverse(rest(L))$$first(L)$
    $endif$
    >>

>From another template I called $reverse(list)$ where list is an attribute
created as:
    String myList[] = { "a", "b", "c", "d", "e" };
    st.setAttribute("list", myList);

The expected result is ?edcba?. It is probably not a good idea for a
template to have this kind of logic in it but I wanted to play with
recursion.

This didn?t work. All it printed was ?a?. I tried adding ?test $L$,
$first(L)$, $rest(L)$? as the first line of reverse to try to debug. I found
that after the first call first and rest were not working ? they returned
nothing. I set a breakpoint in ASTExpr.rest. The rest method will return an
iterator over the collection (I?m using the term collection generally here)
positioned at the second element. It is this iterator and not a collection
that is passed to the template. Now rest is called with the input L being an
iterator. The trouble is that this iterator is already at the end by the
time rest is called again. I?m not exactly sure why that happened but it may
be that the $if(L)$ must evaluate L by iterating. When I added the debugging
that would definitely cause the iterator to stick at the end. The trouble
with an iterator being passed to a template rather than a collection is that
once it is used it can?t be used again! Even $first(L)$ when L is an
iterator will cause problems because it leaves the iterator one position
farther along.

I changed rest to return a new collection (ArrayList) that contains the rest
of the original collection. After making this change the reverse template
worked perfectly.

The trouble is that creating a new collection is wasteful. Perhaps there is
a way to determine if a copy of rest is needed rather than just an iterator.
For example just at the point where the iterator is going to be passed to a
template it is copied to a new collection. Are there any other cases where
an iterator should be turned to a collection?

If Java iterators supported cloning (clone would create a new iterator over
the same colection positioned at the point where the original iterator was
cloned) it may be enough to always return a cloned iterator from rest. But
Java iterators don?t allow cloning.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org:8080/pipermail/stringtemplate-interest/attachments/20060928/ecf765e2/attachment.html 

From jjsnyders at rcn.com  Thu Sep 28 12:29:00 2006
From: jjsnyders at rcn.com (John Snyders)
Date: Thu, 28 Sep 2006 15:29:00 -0400
Subject: [stringtemplate-interest] String manipulations
In-Reply-To: <CE3D808F-5097-4C37-8C67-FF6DFD6C81F2@cs.usfca.edu>
Message-ID: <BDEBKCCLDDBHIMBFPIEICEFLCEAA.jjsnyders@rcn.com>


> -----Original Message-----
> From: Terence Parr
> Subject: Re: [stringtemplate-interest] String manipulations
>
> On Sep 27, 2006, at 9:39 PM, John Snyders wrote:
>
> > Sorry the response is so long. I am new to ST and also need to
> > think things
> > through in writing.
>
> Hi John, this is an awesome summary of the situation...hope you don't
> mind if I CC the list.

Thanks, not at all.

> > Option 3 looks like any normal template invocation over a
> > collection. Again
> > one would not expect a template to have an effect on rendering.
>
> Well, I'd say you're right, but rendering and apply-template are very
> similar in concept, just not implementation.
>
> Option 3 has the problem of "caching/reloading from disk"; the
> renderers are not set automatically for upperCase template.  If the
> template is thrown out and reloaded by ST group then the renderer is
> lost.

Now I finaly understand what you talkig about. This seems to be a general
problem. If it makes sense to have per StringTemplate renderers then they
shouldn't be lost just because the cache is flushed. Or perhaps the rule is
that templates from disk can't have renderers.
I guess I didn't have that problem because the upperCase template was
created from code.

>
> > That would just leave scalar attributes and maps, and public object
> > fields. But wait I can implement the same functionality as above
> > with a map.
> > Just create a class that implements Map and the get method can do
> > anything
> > with the key string. Example of use: $badmap.({+,3,5})$. You were
> > probably
> > aware of this. The old documentation says: "You may pass in
> > instances of
> > type HashMap and Hashtable but cannot pass in objects implementing
> > the Map
> > because that would allow all sorts of wacky stuff like database
> > access." But
> > now you can pass in Map. What changed your mind?
>
> There is a case where you want to have Map access strings for i18n in
> a database.  The potential for abuse is there as you've shown with
> badmap above.  My philosophy is to make bad behavior as inconvenient
> as possible and to clearly highlight it (getName() wiping drive)
> while still allowing flexibility and being a practical system.

Yes I also have a use for my own Map. I'll write about it later.

> > Here is another distinction between options 2, 3, and 4. With
> > option 2 there
> > is no way that the rendering can be applied to anything but the
> > value of the
> > attribute. With 3 the rendering done by the template upperCase can
> > apply to
> > attributes, string literals, and templates.
>
> Very true.  Hadn't thought of that.
>
> > When applied to templates only
> > attributes referenced within that template get uppercased. Example
> > from my
> > previous email (correcting the typo):
> > $upperCase(it={$message(p0=name)$})$    produces: "Hello JOHN!"
> > "Not HELLO
> > JOHN"
>
> If args are defined you can say:
>
> $upperCase({$message(name)$})$
>
> Hmm...sees that the whole message should be uppercased, but youre
> right...it only does on the renderering of attributes not string
> literals.  So option 3 seems not so good.

Yes, I think option 3 should be dismissed.

> > With option 4 I think the expected behavior is that the formatting
> > would
> > apply to the whole template. The reason is that the ;separator syntax
> > applies to templates as in:
> > $requestParameters.(k) : {[$it$]}; separator=", "$ which produces a
> > comma
> > separated list of values enclosed in square brackets (ex: [a], [b],
> > [c]).
> > So I would expect ${ hello $name$!};format="upperCase"$ to produce
> > "HELLO
> > JOHN!"
>
> Correct.
>
> > Another problem with option 4 is that the template makes
> > assumptions about
> > the types of attributes. For example if format short applies to
> > dates then
> > $name;format="short"$ makes no sense. This breaks your rule 4.
>
> What if format="foo" didn't call foo() on the object?  What if it
> called format(object,"foo") with "foo" as the format string?  If
> format is defined, cool else it's ignored.
>
> Actually doesn't this present the renderer problem again?  String
> would have to have a renderer defined...oh, but you could do that
> globally with a singleton renderer registered for String.  If you
> ever anywhere said $somestring; format="abbrev"$, the
> stringRenderer.format(somestring, "abbrev") would be called.
> Hmm...opens things up a bit, but I guess if format wipes the drive
> it's clear you're abusing the format method.

I think all these questions are moot given that the singleton render can be
applied to the syntax of option 4 as described below.

>
> > If this is the difference then YES I think it is the right solution
> > for the
> > implementation.
>
> Meaning the name.toUpper or name; format="toUpper"?

I like $name; format="toUpper"$ because it s clear what the intention is. No
question about if .toUpper is a property or formatter.

> > It constrains the possible set of renderers to just what the
> > renderer class provides and makes it very clear what should happen
> > when
> > there is a type mismatch. (renderer.get("String") should return
> > null if it
> > doesn't know what to do with strings and then the next step would be
> > skipped.)
> >
> > However I think the implementation is independent of the syntax
> > used. Why
> > couldn't option 4 ($name;format="upperCase"$) be translated to
> > r = renderer.get("String");
> > r.upperCase(name);
>
> Interesting...ok, we don't want $x; format="y'$ to call x.y(), but we
> can allow it to call $xClassRenderer.y(x)$.  That is better...

You had already proposed the solution. I just noticed that it can apply to
the ;format= syntax.

>
> I have also just increased use of options such as wrap so this is not
> a new "concept".

I still need to learn about wrap

> > To sum up I would like to see option 4 supported and implemented as
> > you
> > described. The formatting would apply to (the result of) templates
> > to be
> > consistent with the ;separator.
>
> Yes, so I'd evaluate the entire expressions even if
>
> $names:{$i$. <b>$it$</b>}$; format="upperCase"$
>
> Here, the entire list of crap would be uppercased including the $i$
> numbers.  Right?

Yes I think that makes sense.

> > If there is a type mismatch (such as
> > $today;format="upperCase"$ where upperCase works on Strings and
> > today is a
> > Date) then the empty string is returned (or perhaps an exception
> > would be
> > better). Using a format string that doesn't exist as a method could
> > also be
> > defined to return an empty string or throw an exception (not sure
> > which is
> > best).
>
> Hmm...I think perhaps that should reduce to simply $today$ if there
> is no formatter...perhaps that allows you to remove a renderer w/o
> breaking stuff?

I would be fine with this. Perhaps a warning could be given.

> > This handling of type mismatches and unsupported formats with option 4
> > syntax is preferred over the option 2 syntax. Option 2 would end up
> > potentially hiding properties. The person creating properties and
> > the person
> > defining renderers would have to coordinate because they are
> > sharing the
> > same namespace. Option 4 is a little more efficient since you know
> > you are
> > done if you don't find a format method you don't have to go looking
> > for a
> > property.
>
> I think we'll need a severity/pendantic option for ST soon so you can
> say what becomes an exception and what is ignored.

If each distinct error case had an identifier then the
StringTemplateErrorListener implementation could decide what to ignore, what
to log and what to throw.

-John

From zen at freedbms.net  Thu Sep 28 18:47:25 2006
From: zen at freedbms.net (Zenaan Harkness)
Date: Fri, 29 Sep 2006 11:47:25 +1000
Subject: [stringtemplate-interest] String manipulations
In-Reply-To: <CE3D808F-5097-4C37-8C67-FF6DFD6C81F2@cs.usfca.edu>
References: <BDEBKCCLDDBHIMBFPIEIEEFJCEAA.jjsnyders@rcn.com>
	<CE3D808F-5097-4C37-8C67-FF6DFD6C81F2@cs.usfca.edu>
Message-ID: <20060929014725.GA972@zen700m>

On Thu, Sep 28, 2006 at 11:22:23AM -0700, Terence Parr wrote:
> On Sep 27, 2006, at 9:39 PM, John Snyders wrote:
> > However I think the implementation is independent of the syntax  
> > used. Why
> > couldn't option 4 ($name;format="upperCase"$) be translated to
> > r = renderer.get("String");
> > r.upperCase(name);
> 
> Interesting...ok, we don't want $x; format="y'$ to call x.y(), but we  
> can allow it to call $xClassRenderer.y(x)$.  That is better...
> 
> > The same amount of information is available to the implementation  
> > in both
> > syntaxes.
> 
> I have also just increased use of options such as wrap so this is not  
> a new "concept".
> 
> > To sum up I would like to see option 4 supported and implemented as  
> > you
> > described. The formatting would apply to (the result of) templates  
> > to be
> > consistent with the ;separator.
> 
> Yes, so I'd evaluate the entire expressions even if
> 
> $names:{$i$. <b>$it$</b>}$; format="upperCase"$
> 
> Here, the entire list of crap would be uppercased including the $i$  
> numbers.  Right?

Almost. Consider:

$names:{$i$. <b>$it$</b>}$; separator="v"; format="upperCase"$

Now I don't know why you'd want to have a letter as your separator,
but if you did, you would presumably want to distinguish that from:

$names:{$i$. <b>$it$</b>}$; separator="V"; format="upperCase"$

And so, format="upperCase" would need to apply to each $i$
separately. Although, could there be a difference with these:

$names:{$i$. <b>$it$</b>}$; separator="v"; format="upperCase"$
$names:{$i$. <b>$it$</b>}$; format="upperCase"; separator="v"$

Perhaps too surprising to have different behaviours; I think
the normal expectation is that such operations are commutative
in their sequence (reversible).

> > If there is a type mismatch (such as
> > $today;format="upperCase"$ where upperCase works on Strings and  
> > today is a
> > Date) then the empty string is returned (or perhaps an exception  
> > would be
> > better). Using a format string that doesn't exist as a method could  
> > also be
> > defined to return an empty string or throw an exception (not sure  
> > which is
> > best).
> 
> Hmm...I think perhaps that should reduce to simply $today$ if there  
> is no formatter...perhaps that allows you to remove a renderer w/o  
> breaking stuff?

Of course if 'today' is a long format date, format="upperCase"
does make sense.

If my templates are assuming a formatter/renderer, it may be
immensely useful to know that the renderer is missing for some
reason (for debugging purposes), so there should at least be
an option (I suggest the default case) to display an exception
string in the output, if a requested render format is not
available...

> > This handling of type mismatches and unsupported formats with option 4
> > syntax is preferred over the option 2 syntax. Option 2 would end up
> > potentially hiding properties. The person creating properties and  
> > the person
> > defining renderers would have to coordinate because they are  
> > sharing the
> > same namespace. Option 4 is a little more efficient since you know  
> > you are
> > done if you don't find a format method you don't have to go looking  
> > for a
> > property.
> 
> I think we'll need a severity/pendantic option for ST soon so you can  
> say what becomes an exception and what is ignored.

:)

One step ahead...

Thanks
Zen

-- 
Free Australia - www.UPMART.org
Please respect the confidentiality of this email as sensibly warranted.

From zen at freedbms.net  Thu Sep 28 18:57:22 2006
From: zen at freedbms.net (Zenaan Harkness)
Date: Fri, 29 Sep 2006 11:57:22 +1000
Subject: [stringtemplate-interest] Bug in rest function when applied
	recursively
In-Reply-To: <BDEBKCCLDDBHIMBFPIEIGEFKCEAA.jjsnyders@rcn.com>
References: <BDEBKCCLDDBHIMBFPIEIGEFKCEAA.jjsnyders@rcn.com>
Message-ID: <20060929015722.GB972@zen700m>

On Thu, Sep 28, 2006 at 03:02:50PM -0400, John Snyders wrote:
> I was thinking about how templates can be called recursively. Just for fun I
> decided to try the classic recursive definition of reverse.
>     group Reverse;
>     reverse(L) ::= <<
>     $if(L)$
>     $reverse(rest(L))$$first(L)$
>     $endif$
>     >>
...
> I changed rest to return a new collection (ArrayList) that contains the rest
> of the original collection. After making this change the reverse template
> worked perfectly.
> 
> The trouble is that creating a new collection is wasteful. Perhaps there is
> a way to determine if a copy of rest is needed rather than just an iterator.
> For example just at the point where the iterator is going to be passed to a
> template it is copied to a new collection. Are there any other cases where
> an iterator should be turned to a collection?
> 
> If Java iterators supported cloning (clone would create a new iterator over
> the same colection positioned at the point where the original iterator was
> cloned) it may be enough to always return a cloned iterator from rest. But
> Java iterators don?t allow cloning.

Create a CloneableArrayListIterator, etc (or whatever iterators
are needed).

It's only the built-in iterators which don't support cloning, of
course :)

Cloning the iterator sounds like it might not introduce too much
of a performance hit.

Creating a new collection does sound awefully heavy...

cheers
zen

-- 
Free Australia - www.UPMART.org
Please respect the confidentiality of this email as sensibly warranted.

From zen at freedbms.net  Thu Sep 28 19:24:37 2006
From: zen at freedbms.net (Zenaan Harkness)
Date: Fri, 29 Sep 2006 12:24:37 +1000
Subject: [stringtemplate-interest] String manipulations
In-Reply-To: <BDEBKCCLDDBHIMBFPIEICEFLCEAA.jjsnyders@rcn.com>
References: <CE3D808F-5097-4C37-8C67-FF6DFD6C81F2@cs.usfca.edu>
	<BDEBKCCLDDBHIMBFPIEICEFLCEAA.jjsnyders@rcn.com>
Message-ID: <20060929022437.GC972@zen700m>

On Thu, Sep 28, 2006 at 03:29:00PM -0400, John Snyders wrote:
> > From: Terence Parr
> > On Sep 27, 2006, at 9:39 PM, John Snyders wrote:

> > > Option 3 looks like any normal template invocation over a
> > > collection. Again
> > > one would not expect a template to have an effect on rendering.
> >
> > Well, I'd say you're right, but rendering and apply-template are very
> > similar in concept, just not implementation.
> >
> > Option 3 has the problem of "caching/reloading from disk"; the
> > renderers are not set automatically for upperCase template.  If the
> > template is thrown out and reloaded by ST group then the renderer is
> > lost.
> 
> Now I finaly understand what you talkig about. This seems to be a general
> problem. If it makes sense to have per StringTemplate renderers then they
> shouldn't be lost just because the cache is flushed. Or perhaps the rule is
> that templates from disk can't have renderers.
> I guess I didn't have that problem because the upperCase template was
> created from code.

Would it make sense to have a syntax for templates where the
template (/group /global specification), specifies which renderer
Classes should be attached to this template (/group /global
default) ??

> > > Here is another distinction between options 2, 3, and 4. With
> > > option 2 there
> > > is no way that the rendering can be applied to anything but the
> > > value of the
> > > attribute. With 3 the rendering done by the template upperCase can
> > > apply to
> > > attributes, string literals, and templates.
> >
> > Very true.  Hadn't thought of that.
> >
> > > When applied to templates only
> > > attributes referenced within that template get uppercased. Example
> > > from my
> > > previous email (correcting the typo):
> > > $upperCase(it={$message(p0=name)$})$    produces: "Hello JOHN!"
> > > "Not HELLO
> > > JOHN"
> >
> > If args are defined you can say:
> >
> > $upperCase({$message(name)$})$
> >
> > Hmm...sees that the whole message should be uppercased, but youre
> > right...it only does on the renderering of attributes not string
> > literals.  So option 3 seems not so good.
> 
> Yes, I think option 3 should be dismissed.

I was taking quite a liking to the option 3 syntax. However on the
upside it feels like option 4 is simpler to implement, and higher
performance (you're not applying a whole template, just looking up
a renderer) ... any ideas if this is correct thinking?

> > > If this is the difference then YES I think it is the right solution
> > > for the
> > > implementation.
> >
> > Meaning the name.toUpper or name; format="toUpper"?
> 
> I like $name; format="toUpper"$ because it s clear what the intention is. No
> question about if .toUpper is a property or formatter.

I concur.

> > > To sum up I would like to see option 4 supported and implemented as
> > > you
> > > described. The formatting would apply to (the result of) templates
> > > to be
> > > consistent with the ;separator.
> >
> > Yes, so I'd evaluate the entire expressions even if
> >
> > $names:{$i$. <b>$it$</b>}$; format="upperCase"$
> >
> > Here, the entire list of crap would be uppercased including the $i$
> > numbers.  Right?
> 
> Yes I think that makes sense.

'separator' applies "between item pairs". Intuitively I would
expect 'format' to apply "to each item".

What if format="initialCaps"? In this case I would expect format
to be passed each item one by one.

How about these:

/* add separator after each name: */
$names:separator=","$

/* add separator after all but last name: */
$names;separator=","$


$names:{$i$. <b>$it$</b>}:format="upperCase"$
$names:{$i$. <b>$it$</b>};format="upperCase"$

$names:{$i$. <b>$it:format="upperCase"$</b>}$
$names:{$i$. <b>$it;format="upperCase"$</b>}$

$(names:{$i$. <b>$it$</b>}):format="upperCase"$
$(names:{$i$. <b>$it$</b>});format="upperCase"$


$names:{$i$. <b>$it$</b>}:format="initialCaps"$
$names:{$i$. <b>$it$</b>};format="initialCaps"$

$names:{$i$. <b>$it:format="initialCaps"$</b>}$
$names:{$i$. <b>$it;format="initialCaps"$</b>}$

$(names:{$i$. <b>$it$</b>}):format="initialCaps"$
$(names:{$i$. <b>$it$</b>});format="initialCaps"$

??

Just throwing out options ... only just learning ST.

cheers
zen

-- 
Free Australia - www.UPMART.org
Please respect the confidentiality of this email as sensibly warranted.

From kroepke at classdump.org  Thu Sep 28 19:52:04 2006
From: kroepke at classdump.org (Kay Roepke)
Date: Fri, 29 Sep 2006 04:52:04 +0200
Subject: [stringtemplate-interest] String manipulations
In-Reply-To: <20060929022437.GC972@zen700m>
References: <CE3D808F-5097-4C37-8C67-FF6DFD6C81F2@cs.usfca.edu>
	<BDEBKCCLDDBHIMBFPIEICEFLCEAA.jjsnyders@rcn.com>
	<20060929022437.GC972@zen700m>
Message-ID: <13C868BF-E25F-4F09-8C32-373E73E78CAF@classdump.org>


On 29. Sep 2006, at 4:24 Uhr, Zenaan Harkness wrote:

> How about these:
>
> /* add separator after each name: */
> $names:separator=","$
>
> /* add separator after all but last name: */
> $names;separator=","$

No, please not. It actually took me way too long to see the  
difference...besides, I think it's not nice from a language
points of view. It gives ':' different meanings. Currently it means  
'apply template' while ';' is for separation of options
for template rendering. We should keep that simple, IMHO.
I like the format="" syntax, but not the : vs ; thingy.

I'd expect a formatter to be called with each item in turn, rather  
than to be applied once for the entire string.
This would imply doing formatting first and then inserting the  
separator, I think.

cheers,
-k




From e.papegaaij at student.utwente.nl  Fri Sep 29 00:45:37 2006
From: e.papegaaij at student.utwente.nl (Emond Papegaaij)
Date: Fri, 29 Sep 2006 09:45:37 +0200
Subject: [stringtemplate-interest] String manipulations
In-Reply-To: <20060929014725.GA972@zen700m>
References: <BDEBKCCLDDBHIMBFPIEIEEFJCEAA.jjsnyders@rcn.com>
	<CE3D808F-5097-4C37-8C67-FF6DFD6C81F2@cs.usfca.edu>
	<20060929014725.GA972@zen700m>
Message-ID: <200609290945.37270.e.papegaaij@student.utwente.nl>

On Friday 29 September 2006 03:47, Zenaan Harkness wrote:
> On Thu, Sep 28, 2006 at 11:22:23AM -0700, Terence Parr wrote:
> > On Sep 27, 2006, at 9:39 PM, John Snyders wrote:
> > > To sum up I would like to see option 4 supported and implemented as
> > > you described. The formatting would apply to (the result of)
> > > templates to be consistent with the ;separator.
> >
> > Yes, so I'd evaluate the entire expressions even if
> >
> > $names:{$i$. <b>$it$</b>}$; format="upperCase"$
> >
> > Here, the entire list of crap would be uppercased including the $i$
> > numbers.  Right?
>
> Almost. Consider:
>
> $names:{$i$. <b>$it$</b>}$; separator="v"; format="upperCase"$
>
> Now I don't know why you'd want to have a letter as your separator,
> but if you did, you would presumably want to distinguish that from:
>
> $names:{$i$. <b>$it$</b>}$; separator="V"; format="upperCase"$
>
> And so, format="upperCase" would need to apply to each $i$
> separately. Although, could there be a difference with these:
>
> $names:{$i$. <b>$it$</b>}$; separator="v"; format="upperCase"$
> $names:{$i$. <b>$it$</b>}$; format="upperCase"; separator="v"$
>
> Perhaps too surprising to have different behaviours; I think
> the normal expectation is that such operations are commutative
> in their sequence (reversible).

I think you are right here. Different options should not affect eachother. 
Your example should upperCase all items, but not the separator. After all 
you could always write:

${names:{$i$. <b>$it$</b>}$; separator="v"}; format="upperCase"$

There is however a limitation to option 4: the formatter cannot take 
arguments. Therefore it cannot be used for things such as 'substring' 
and 'indexof'.

Best regards,
Emond

From open.zone at virgin.net  Fri Sep 29 04:47:30 2006
From: open.zone at virgin.net (Micheal J)
Date: Fri, 29 Sep 2006 12:47:30 +0100
Subject: [stringtemplate-interest] Still AWOL...
Message-ID: <03bd01c6e3bd$0cc41920$c704a8c0@hercules>

Hoping to catch a break in a week or so...

Cheers,

Micheal

-----------------------
The best way to contact me is via the list/forum. My time is very limited.


From jjsnyders at rcn.com  Fri Sep 29 15:16:21 2006
From: jjsnyders at rcn.com (John Snyders)
Date: Fri, 29 Sep 2006 18:16:21 -0400
Subject: [stringtemplate-interest] Bug in rest function when applied
	recursively
In-Reply-To: <BDEBKCCLDDBHIMBFPIEIGEFKCEAA.jjsnyders@rcn.com>
Message-ID: <BDEBKCCLDDBHIMBFPIEIEEFOCEAA.jjsnyders@rcn.com>

I found a similar problem in passing lists to templates.
Currently anytime the argument passed in to a template is an iterator I can
only use it once. I can see why the iterators are used they work well for
template application.

The bottom line is that I should be able to use an attribute passed to a
template as many times as I want.

Example that shows the bug

listTest(list) ::= <<
   {$list$}
   [$list$]
>>

Here I am trying to use the list argument two times.

Calling listTest as $listTest(list=["a", "b", "c"])$

The output is {abc} []
The expected output is {abc} [abc]

Before I tried to fix the bug with rest by returning a new list rather than
an iterator. This had the disadvantage of making a copy even when in the
context of a template application it wouldn't be needed.

Now I changed ActionEvaluator.argumentAssignment so that it coverts any
iterators to an ArrayList. I put the rest function back the way it was. This
new change works for both rest and lists. I'm still not sure if this is the
best solution but it seems to work. I need to make a similar change to the
case where a single argument is passed to a template without arg=.

Can anyone confirm that this is a bug and if a different solution is needed.

I can make my code change available if anyone is interested.

-John

  -----Original Message-----
  From: John Snyders [mailto:jjsnyders at rcn.com]
  Sent: Thursday, September 28, 2006 3:03 PM
  To: stringtemplate-interest
  Subject: Bug in rest function when applied recursively


  I was thinking about how templates can be called recursively. Just for fun
I decided to try the classic recursive definition of reverse.
      group Reverse;
      reverse(L) ::= <<
      $if(L)$
      $reverse(rest(L))$$first(L)$
      $endif$
      >>

  From another template I called $reverse(list)$ where list is an attribute
created as:
      String myList[] = { "a", "b", "c", "d", "e" };
      st.setAttribute("list", myList);

  The expected result is ?edcba?. It is probably not a good idea for a
template to have this kind of logic in it but I wanted to play with
recursion.

  This didn?t work. All it printed was ?a?. I tried adding ?test $L$,
$first(L)$, $rest(L)$? as the first line of reverse to try to debug. I found
that after the first call first and rest were not working ? they returned
nothing. I set a breakpoint in ASTExpr.rest. The rest method will return an
iterator over the collection (I?m using the term collection generally here)
positioned at the second element. It is this iterator and not a collection
that is passed to the template. Now rest is called with the input L being an
iterator. The trouble is that this iterator is already at the end by the
time rest is called again. I?m not exactly sure why that happened but it may
be that the $if(L)$ must evaluate L by iterating. When I added the debugging
that would definitely cause the iterator to stick at the end. The trouble
with an iterator being passed to a template rather than a collection is that
once it is used it can?t be used again! Even $first(L)$ when L is an
iterator will cause problems because it leaves the iterator one position
farther along.

  I changed rest to return a new collection (ArrayList) that contains the
rest of the original collection. After making this change the reverse
template worked perfectly.

  The trouble is that creating a new collection is wasteful. Perhaps there
is a way to determine if a copy of rest is needed rather than just an
iterator. For example just at the point where the iterator is going to be
passed to a template it is copied to a new collection. Are there any other
cases where an iterator should be turned to a collection?

  If Java iterators supported cloning (clone would create a new iterator
over the same colection positioned at the point where the original iterator
was cloned) it may be enough to always return a cloned iterator from rest.
But Java iterators don?t allow cloning.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org:8080/pipermail/stringtemplate-interest/attachments/20060929/5455f646/attachment.html 

From jjsnyders at rcn.com  Fri Sep 29 20:17:51 2006
From: jjsnyders at rcn.com (John Snyders)
Date: Fri, 29 Sep 2006 23:17:51 -0400
Subject: [stringtemplate-interest] String manipulations
In-Reply-To: <20060929022437.GC972@zen700m>
Message-ID: <BDEBKCCLDDBHIMBFPIEIAEFPCEAA.jjsnyders@rcn.com>

>
> Would it make sense to have a syntax for templates where the
> template (/group /global specification), specifies which renderer
> Classes should be attached to this template (/group /global
> default) ??

No, As the ST documentation says "You will notice that there is no way for
the template to say which renderer to use. Allowing such a mechanism would
effectively imply an ability to call random code from the template. In
StringTemplate's scheme, only the model or controller can set the renderer."

> > > > To sum up I would like to see option 4 supported and implemented as
> > > > you
> > > > described. The formatting would apply to (the result of) templates
> > > > to be
> > > > consistent with the ;separator.
> > >
> > > Yes, so I'd evaluate the entire expressions even if
> > >
> > > $names:{$i$. <b>$it$</b>}$; format="upperCase"$
> > >
> > > Here, the entire list of crap would be uppercased including the $i$
> > > numbers.  Right?
> >
> > Yes I think that makes sense.
>
> 'separator' applies "between item pairs". Intuitively I would
> expect 'format' to apply "to each item".
>
> What if format="initialCaps"? In this case I would expect format
> to be passed each item one by one.

There seems to be a question about if format applies to each item
individually or to the whole template result.

In general options (that is what ;format is) apply to the template they
follow
The syntax is template-expression;options-list

What an option does with the expression is up to the option. Most of the
examples show ;separator applied to either attributes or template
applications that are multi valued. The same is true of ;null. ;separator
can be applied to a single value attribute or expression it just doesn't
have any effect in that case (because there is no in between). ;null can
also be applied to a scalar attribute:
   $attr;null="unknown"$
is shorthand for
   $if(attr)$$attr$$else$unknown$endif$

BTW: this does not work as I expected $[x, y, z];null="null"$ where some of
x, y, z are null.

I haven't played with wrap and anchor yet.

I think that format should apply to the whole template expression result. It
is consistent with the intent of format which is to control rendering. There
is no loss of control since you can do
  $names:{Hello $it$;format="toUpper"}$
or
  $names:{Hello $it$};format="toUpper"$

with names having Bob, Sue the first will output
  Hello BOB Hello SUE
The second will output
  HELLO BOB HELLO SUE

The other question was how does ;format interact with ;separator. Or more
general how do all the options interact. I'm not sure but I think the order
should be ;null, ;separator, ;format. I don't know where wrap and anchor fit
in.


> How about these:
>
> /* add separator after each name: */
> $names:separator=","$

No the : operator is used to apply templates so this would be confusing.
Also it is not needed because one can always add the extra , at the end
$names;separator=","$,
If there is a chance names could be empty then use
$names;separator=","$$if(names)$,$endif$

> /* add separator after all but last name: */
> $names;separator=","$

This is what we already have. It puts the separator between the elements.

>
> $names:{$i$. <b>$it$</b>}:format="upperCase"$
> $names:{$i$. <b>$it$</b>};format="upperCase"$
>
> $names:{$i$. <b>$it:format="upperCase"$</b>}$
> $names:{$i$. <b>$it;format="upperCase"$</b>}$
>
> $(names:{$i$. <b>$it$</b>}):format="upperCase"$
> $(names:{$i$. <b>$it$</b>});format="upperCase"$
>
>
> $names:{$i$. <b>$it$</b>}:format="initialCaps"$
> $names:{$i$. <b>$it$</b>};format="initialCaps"$
>
> $names:{$i$. <b>$it:format="initialCaps"$</b>}$
> $names:{$i$. <b>$it;format="initialCaps"$</b>}$
>
> $(names:{$i$. <b>$it$</b>}):format="initialCaps"$
> $(names:{$i$. <b>$it$</b>});format="initialCaps"$
>
> ??

Again the :format syntax is confusing.
The ;format syntax is something I am in favor of as long as the format
string (upperCase) for example specifies a method to call and not a string
to pass to a method.

The value of the format options "initialCaps", "upperCase" etc. should have
no effect on how format behaves.

-John

