From parrt at cs.usfca.edu  Fri Apr  1 17:48:55 2011
From: parrt at cs.usfca.edu (Terence Parr)
Date: Fri, 1 Apr 2011 17:48:55 -0700
Subject: [stringtemplate-interest] wow. STViz in ANTLR usage
Message-ID: <0A406C70-C783-455F-8E1D-B2991747E620@cs.usfca.edu>

this REALLY helps track down bugs.  here i click on error and it shows me why <elements:element()> didn't generate code. awesome.
Ter

-------------- next part --------------
A non-text attachment was scrubbed...
Name: PastedGraphic-8.tiff
Type: image/tiff
Size: 265322 bytes
Desc: not available
Url : http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20110401/d2d5f9ce/attachment-0001.tiff 

From parrt at cs.usfca.edu  Sat Apr  2 11:09:53 2011
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sat, 2 Apr 2011 11:09:53 -0700
Subject: [stringtemplate-interest] [antlr-interest] Release of
	StringTemplate 4.0
In-Reply-To: <13b9ca48afdb09b47ff372a5b85dd621@mail.gmail.com>
References: <7BEF6A0B-3D23-4D68-89B2-2C586E13A114@cs.usfca.edu>
	<13b9ca48afdb09b47ff372a5b85dd621@mail.gmail.com>
Message-ID: <3C4F59E8-519A-4BEE-A732-A271737AF073@cs.usfca.edu>

We can keep maven support for the tools, but that doesn't mean we have to use maven ourselves for building right? In other words we need to support plug-ins at the very least.

Ter
On Mar 31, 2011, at 6:49 AM, Jim Idle wrote:

> Shall I create the Maven build or are you throwing Maven out? ;-)
> 
> Jim
> 
>> -----Original Message-----
>> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
>> bounces at antlr.org] On Behalf Of Terence Parr
>> Sent: Sunday, March 27, 2011 12:55 PM
>> To: stringtemplate-interest List
>> Cc: antlr-interest Interest
>> Subject: [antlr-interest] Release of StringTemplate 4.0
>> 
>> Get it while it's hot. 4.0 is a complete rewrite as a bytecode
>> interpreter. Is much cleaner and faster than 3.0. enjoy.
>> 
>> http://www.stringtemplate.org/download.html
>> 
>> http://www.antlr.org/wiki/display/ST4/StringTemplate+4+Documentation
>> 
>> http://www.antlr.org/wiki/display/ST4/Differences+between+v3+and+v4
>> 
>> The GUI Visualizer / inspector is very useful; check it out:
>> 
>> http://www.antlr.org/wiki/display/ST4/StringTemplate+Inspector+GUI
>> 
>> Ports to C#, Python, Objective-C on the way thanks to Sam Harwell,
>> Benjamin Niemann, and Alan Condit.
>> 
>> A big thanks to Udo Borkowski for his incredible bug catching abilities
>> and his suggestions!
>> 
>> Terence
>> ANTLR project supreme dictator for life
>> 
>> 
>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
>> email-address
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From parrt at cs.usfca.edu  Sat Apr  2 11:13:00 2011
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sat, 2 Apr 2011 11:13:00 -0700
Subject: [stringtemplate-interest] ST4: Bug: Selecting the root template
	in STVis will not select the complete output
In-Reply-To: <71CE8C87-5AAA-4768-B978-78237AA737AF@abego-software.de>
References: <8CD7A282-A26C-41BE-88E8-DAFE5ED90954@abego-software.de>
	<71CE8C87-5AAA-4768-B978-78237AA737AF@abego-software.de>
Message-ID: <45411FC6-3135-4866-9B21-3E8DC2DCAA95@cs.usfca.edu>

I'm in the process of doing a lot of fixes in STViz at the moment; I think that was how I fixed it :)
Ter
On Mar 31, 2011, at 11:39 PM, Udo Borkowski wrote:

> Here a much simpler fix for the issue:
> 
> Replace the last "else" clause in STVis.updateCurrentST by
> 
> 		else {
> 			// The root ST is selected. As this ST generates the complete output
> 			// select the complete output
> 			highlight(m.output, 0, m.output.getText().length());
> 		}
> 
> Udo
> 
> On 31.03.2011, at 12:27, Udo Borkowski wrote:
> 
>> Selecting the root template in STVis  (i.e. the first one in the left tree) will not select the complete output but just as many characters as the root template text is long:
>> 
>> <PastedGraphic-1.pdf>
>> 
>> This can be fixed by changing the last else int STVis.updateCurrentST:
>> 
>> 
>> 	private void updateCurrentST(STViewFrame m) {
>> 		updateStack(currentST, m);
>> 		updateAttributes(currentST, m);
>>         m.bytecode.setText(currentST.impl.disasm());
>> 		JTreeASTModel astModel = new JTreeASTModel(new CommonTreeAdaptor(), currentST.impl.ast);
>> 		m.ast.setModel(astModel);
>> 
>> 		List<ST> pathST = currentST.getEnclosingInstanceStack(true);
>> 		Object[] path = new Object[pathST.size()];
>> 		int j = 0;
>> 		for (ST s : pathST) path[j++] = new JTreeSTModel.Wrapper((DebugST)s);
>> 
>> 		m.tree.setSelectionPath(new TreePath(path));
>> 
>> 		m.template.setText(currentST.impl.template);
>> 		Interval r = currentST.impl.getTemplateRange();
>> 		if ( currentST.enclosingInstance!=null ) {
>> 			int i = tmodel.getIndexOfChild((DebugST)currentST.enclosingInstance, currentST);
>> 			InterpEvent e = interp.getEvents(currentST.enclosingInstance).get(i);
>> 			if ( e instanceof EvalTemplateEvent) {
>> 				if ( currentST.isAnonSubtemplate() ) {
>> 					highlight(m.template, r.a, r.b);
>> 				}
>> 				highlight(m.output, e.outputStartChar, e.outputStopChar);
>> 			}
>> 		}
>> 		else {
>> 			// The last event is the EvalTemplateEvent for the root ST
>> 			int nEvents = allEvents.size();
>> 			if (nEvents > 0 && allEvents.get(nEvents-1) instanceof EvalTemplateEvent) {
>> 				EvalTemplateEvent e = (EvalTemplateEvent)allEvents.get(nEvents-1);
>> 				highlight(m.output, e.outputStartChar, e.outputStopChar);
>> 			}
>> 		}
>> 	}
>> 
>> 
>> <PastedGraphic-2.pdf>
>> 
>> Udo
>> 
>> P.S.: here some test code:
>> 
>>> package org.stringtemplate.v4.debug;
>>> 
>>> import java.awt.Window;
>>> 
>>> import org.junit.Test;
>>> import org.stringtemplate.v4.ST;
>>> import org.stringtemplate.v4.STGroup;
>>> import org.stringtemplate.v4.STGroupFile;
>>> 
>>> public class InspectTest extends BaseTest {
>>> 
>>> 	/**
>>> 	 * @return true if at least one Window is visible
>>> 	 */
>>> 	public static boolean isAnyWindowVisible() {
>>> 		for (Window w : Window.getWindows()) {
>>> 			if (w.isVisible())
>>> 				return true;
>>> 		}
>>> 		return false;
>>> 	}
>>> 
>>> 	public static void waitUntilAnyWindowIsVisible() {
>>> 		while (!isAnyWindowVisible()) {
>>> 			try {
>>> 				Thread.sleep(100);
>>> 			} catch (InterruptedException e) {
>>> 				// Ignore
>>> 			}
>>> 		}
>>> 	}
>>> 
>>> 	/**
>>> 	 * 
>>> 	 * @param someWindowMustBeVisible
>>> 	 *            [default: true] when true wait for at least one visible window
>>> 	 *            before waiting for all to close
>>> 	 */
>>> 	public static void waitUntilAllWindowsAreClosed(
>>> 			boolean someWindowMustBeVisible) {
>>> 		if (someWindowMustBeVisible) {
>>> 			waitUntilAnyWindowIsVisible();
>>> 		}
>>> 		while (isAnyWindowVisible()) {
>>> 			try {
>>> 				Thread.sleep(100);
>>> 			} catch (InterruptedException e) {
>>> 				// ignore
>>> 			}
>>> 		}
>>> 	}
>>> 
>>> 	public static void waitUntilAllWindowsAreClosed() {
>>> 		waitUntilAllWindowsAreClosed(true);
>>> 	}
>>> 
>>> 	@Test
>>> 	public void testOutputSelectionWhenSelectingRootTemplate() throws Exception {
>>> 		STGroup.debug = true;
>>> 
>>> 		String templates = "t(q) ::= <<\n-<q>-\n>>\n\nmain(p) ::= <<\n<p><t(p)><p>\n>>";
>>> 		writeFile(tmpdir, "t.stg", templates);
>>> 
>>> 		STGroup group = new STGroupFile(tmpdir + "/t.stg");
>>> 
>>> 		ST st = group.getInstanceOf("main");
>>> 		st.add("p", "LongText");
>>> 		((DebugST) st).inspect();
>>> 
>>> 		waitUntilAllWindowsAreClosed();
>>> 	}
>>> }
>> 
>> _______________________________________________
>> stringtemplate-interest mailing list
>> stringtemplate-interest at antlr.org
>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
> 
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest


From parrt at cs.usfca.edu  Sat Apr  2 11:13:59 2011
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sat, 2 Apr 2011 11:13:59 -0700
Subject: [stringtemplate-interest] [antlr-interest] Release of
	StringTemplate 4.0
In-Reply-To: <AANLkTi=b6-yOzqrysNON93EajW_HWrgH_r1VYUC55NL7@mail.gmail.com>
References: <011601cbefb7$4c601510$e5203f30$@pixelminegames.com>
	<8a78c052cb47c0dead2630d968163578@mail.gmail.com>
	<AANLkTi=b6-yOzqrysNON93EajW_HWrgH_r1VYUC55NL7@mail.gmail.com>
Message-ID: <7428D380-5C70-4A71-9273-C56DBD10EFCB@cs.usfca.edu>

Yep, weShould definitely keep a plug-in together. There's no need for mvn with STv4 since its library not a tool like ANTLR.

On Mar 31, 2011, at 4:13 PM, Michael Bedward wrote:

> Hello all,
> 
> I'm following this thread with interest and keeping my fingers crossed
> that this isn't the start of the end for Maven support.


From jimi at temporal-wave.com  Sat Apr  2 12:01:10 2011
From: jimi at temporal-wave.com (Jim Idle)
Date: Sat, 2 Apr 2011 12:01:10 -0700
Subject: [stringtemplate-interest] [antlr-interest] Release of
	StringTemplate 4.0
In-Reply-To: <3C4F59E8-519A-4BEE-A732-A271737AF073@cs.usfca.edu>
References: <7BEF6A0B-3D23-4D68-89B2-2C586E13A114@cs.usfca.edu>
	<13b9ca48afdb09b47ff372a5b85dd621@mail.gmail.com>
	<3C4F59E8-519A-4BEE-A732-A271737AF073@cs.usfca.edu>
Message-ID: <93b6d7bca90fd895d04c4ea947853ab8@mail.gmail.com>

Yeah but the problem is that you will add some option or other and not
realize you broke the Maven stuff, and then I will play catch up. I guess
that we can make it work though - I don't want to lose the Maven stuff.

Jim

> -----Original Message-----
> From: Terence Parr [mailto:parrt at cs.usfca.edu]
> Sent: Saturday, April 02, 2011 11:10 AM
> To: Jim Idle
> Cc: stringtemplate-interest List; antlr-interest Interest
> Subject: Re: [antlr-interest] Release of StringTemplate 4.0
>
> We can keep maven support for the tools, but that doesn't mean we have
> to use maven ourselves for building right? In other words we need to
> support plug-ins at the very least.
>
> Ter
> On Mar 31, 2011, at 6:49 AM, Jim Idle wrote:
>
> > Shall I create the Maven build or are you throwing Maven out? ;-)
> >
> > Jim
> >
> >> -----Original Message-----
> >> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> >> bounces at antlr.org] On Behalf Of Terence Parr
> >> Sent: Sunday, March 27, 2011 12:55 PM
> >> To: stringtemplate-interest List
> >> Cc: antlr-interest Interest
> >> Subject: [antlr-interest] Release of StringTemplate 4.0
> >>
> >> Get it while it's hot. 4.0 is a complete rewrite as a bytecode
> >> interpreter. Is much cleaner and faster than 3.0. enjoy.
> >>
> >> http://www.stringtemplate.org/download.html
> >>
> >> http://www.antlr.org/wiki/display/ST4/StringTemplate+4+Documentation
> >>
> >> http://www.antlr.org/wiki/display/ST4/Differences+between+v3+and+v4
> >>
> >> The GUI Visualizer / inspector is very useful; check it out:
> >>
> >> http://www.antlr.org/wiki/display/ST4/StringTemplate+Inspector+GUI
> >>
> >> Ports to C#, Python, Objective-C on the way thanks to Sam Harwell,
> >> Benjamin Niemann, and Alan Condit.
> >>
> >> A big thanks to Udo Borkowski for his incredible bug catching
> >> abilities and his suggestions!
> >>
> >> Terence
> >> ANTLR project supreme dictator for life
> >>
> >>
> >> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> >> Unsubscribe:
> >> http://www.antlr.org/mailman/options/antlr-interest/your-
> >> email-address
> >
> > List: http://www.antlr.org/mailman/listinfo/antlr-interest
> > Unsubscribe:
> > http://www.antlr.org/mailman/options/antlr-interest/your-email-
> address

From parrt at cs.usfca.edu  Sat Apr  2 17:18:10 2011
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sat, 2 Apr 2011 17:18:10 -0700
Subject: [stringtemplate-interest] ugh. STViz updated
Message-ID: <053D231D-9A40-4672-A3EB-C103C194C2FF@cs.usfca.edu>

took me forever but I've gutted how i tracked debugging events and hacked on STViz forever. swing is weird.  Not much forward progress but...

* refactored to fold DebugST into ST; adds one object ptr to every ST
  instance but worth reduction in complexity. "new ST(...)" calls didn't
  work (not DebugST objects) in inspector.  ST.inspect() for any ST now.
* Fixed bug in STViz. Didn't highlight entire output when you click
  topmost template.
* STGroup.debug no longer there nor static.  It's an instance var of
  Interpreter.  ST.inspect() tells interp to debug. STGroup.trackCreationEvents
  says to record where in code an ST was created and where code added attributes.
* Gutted tree model for STViz, refactored debugging/event tracking code.
* creation events had wrong location (launch of interp location); only tracks
  now for externally/injected created templates.

Ter

From michael.bedward at gmail.com  Sat Apr  2 18:14:21 2011
From: michael.bedward at gmail.com (Michael Bedward)
Date: Sun, 3 Apr 2011 11:14:21 +1000
Subject: [stringtemplate-interest] [antlr-interest] Release of
 StringTemplate 4.0
In-Reply-To: <7428D380-5C70-4A71-9273-C56DBD10EFCB@cs.usfca.edu>
References: <011601cbefb7$4c601510$e5203f30$@pixelminegames.com>
	<8a78c052cb47c0dead2630d968163578@mail.gmail.com>
	<AANLkTi=b6-yOzqrysNON93EajW_HWrgH_r1VYUC55NL7@mail.gmail.com>
	<7428D380-5C70-4A71-9273-C56DBD10EFCB@cs.usfca.edu>
Message-ID: <BANLkTi=5SCB3A6vjDjat9r8vixQ2CFV5Vw@mail.gmail.com>

On 3 April 2011 04:13, Terence Parr <parrt at cs.usfca.edu> wrote:
> There's no need for mvn with STv4 since its library not a tool like ANTLR.

It has to be deployed to Maven Central though

Michael

From parrt at cs.usfca.edu  Sun Apr  3 16:09:00 2011
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sun, 3 Apr 2011 16:09:00 -0700
Subject: [stringtemplate-interest] proposed "ignore newlines" template syntax
Message-ID: <E7535CD8-EC92-4D6C-A15C-CA951BAFA5F1@cs.usfca.edu>

Hi. There is a proposal to create special syntax that allows arbitrary formatting within a template that does not result in new lines in the output. This is useful when you have a really complicated template with IFs and such that needs to generate output all on the same line. Currently, this can be quite challenging. There's no way to read a huge template on one line. Sam Harwell and I came up with a potential solution: a new <<<...>>> triple angle bracket template that ignores newlines unless you use <\n> inside.

Here's a simple example:

ruleRef(rule,label,elementIndex,args,scope) ::= <<
<if(label)><label>=<endif><if(scope)><scope:delegateName()>.<endif><rule.name>(<args; separator=", ">);
>>

it would probably be easier to read like this:

ruleRef(rule,label,elementIndex,args,scope) ::= <<<
<if(label)>
<label>=
<endif>
<if(scope)>
<scope:delegateName()>.
<endif>
<rule.name>(<args; separator=", ">);
>>>

come to think of it, perhaps it should also ignore whitespace so that I could indent the conditionals:

ruleRef(rule,label,elementIndex,args,scope) ::= <<<
<if(label)>
	<label>=
<endif>
<if(scope)>
	<scope:delegateName()>.
<endif>
<rule.name>(<args; separator=", ">);
>>>

We while the syntax to be close, but still recognizable as different than the usual <<...>>. I believe that there has been a proposal for special characters at the start of the template and the addition of keyword but I think a new template and closure syntax is better.

thoughts?

Thanks,
Ter



From collin.fagan at gmail.com  Sun Apr  3 19:52:32 2011
From: collin.fagan at gmail.com (Collin Fagan)
Date: Sun, 3 Apr 2011 21:52:32 -0500
Subject: [stringtemplate-interest] proposed "ignore newlines" template
	syntax
In-Reply-To: <E7535CD8-EC92-4D6C-A15C-CA951BAFA5F1@cs.usfca.edu>
References: <E7535CD8-EC92-4D6C-A15C-CA951BAFA5F1@cs.usfca.edu>
Message-ID: <BANLkTinWkQ4nZX6j49ZaNamr7H8dX42fXw@mail.gmail.com>

I think it's a great idea :) Here are some alternatives for the syntax. I'm
not quite sure that at a glance I'd notice the difference between << and
<<<.

Double 'double quotes'
""...""
ruleRef(rule,label,elementIndex,args,scope) ::= ""
<if(label)>
       <label>=
<endif>
<if(scope)>
       <scope:delegateName()>.
<endif>
<rule.name>(<args; separator=", ">);
""
Triple 'single quotes'
ruleRef(rule,label,elementIndex,args,scope) ::=
<if(label)>
       <label>=
<endif>
<if(scope)>
       <scope:delegateName()>.
<endif>
<rule.name>(<args; separator=", ">);
"""

The < and > with some other symbols.
<# .. #>
ruleRef(rule,label,elementIndex,args,scope) ::= <#
<if(label)>
       <label>=
<endif>
<if(scope)>
       <scope:delegateName()>.
<endif>
<rule.name>(<args; separator=", ">);
#>

<| ... |>
ruleRef(rule,label,elementIndex,args,scope) ::= <|
<if(label)>
       <label>=
<endif>
<if(scope)>
       <scope:delegateName()>.
<endif>
<rule.name>(<args; separator=", ">);
|>

<@ ... @>
ruleRef(rule,label,elementIndex,args,scope) ::= <@
<if(label)>
       <label>=
<endif>
<if(scope)>
       <scope:delegateName()>.
<endif>
<rule.name>(<args; separator=", ">);
@>

PHP style
<?...?>
ruleRef(rule,label,elementIndex,args,scope) ::= <?
<if(label)>
       <label>=
<endif>
<if(scope)>
       <scope:delegateName()>.
<endif>
<rule.name>(<args; separator=", ">);
?>

ASP style
<%...%>
ruleRef(rule,label,elementIndex,args,scope) ::= <%
<if(label)>
       <label>=
<endif>
<if(scope)>
       <scope:delegateName()>.
<endif>
<rule.name>(<args; separator=", ">);
%>

Collin


On Sun, Apr 3, 2011 at 6:09 PM, Terence Parr <parrt at cs.usfca.edu> wrote:

> Hi. There is a proposal to create special syntax that allows arbitrary
> formatting within a template that does not result in new lines in the
> output. This is useful when you have a really complicated template with IFs
> and such that needs to generate output all on the same line. Currently, this
> can be quite challenging. There's no way to read a huge template on one
> line. Sam Harwell and I came up with a potential solution: a new <<<...>>>
> triple angle bracket template that ignores newlines unless you use <\n>
> inside.
>
> Here's a simple example:
>
> ruleRef(rule,label,elementIndex,args,scope) ::= <<
> <if(label)><label>=<endif><if(scope)><scope:delegateName()>.<endif><
> rule.name>(<args; separator=", ">);
> >>
>
> it would probably be easier to read like this:
>
> ruleRef(rule,label,elementIndex,args,scope) ::= <<<
> <if(label)>
> <label>=
> <endif>
> <if(scope)>
> <scope:delegateName()>.
> <endif>
> <rule.name>(<args; separator=", ">);
> >>>
>
> come to think of it, perhaps it should also ignore whitespace so that I
> could indent the conditionals:
>
> ruleRef(rule,label,elementIndex,args,scope) ::= <<<
> <if(label)>
>        <label>=
> <endif>
> <if(scope)>
>        <scope:delegateName()>.
> <endif>
> <rule.name>(<args; separator=", ">);
> >>>
>
> We while the syntax to be close, but still recognizable as different than
> the usual <<...>>. I believe that there has been a proposal for special
> characters at the start of the template and the addition of keyword but I
> think a new template and closure syntax is better.
>
> thoughts?
>
> Thanks,
> Ter
>
>
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20110403/1fc584ba/attachment.html 

From jonathan at buhacoff.net  Sun Apr  3 21:38:51 2011
From: jonathan at buhacoff.net (Jonathan Buhacoff)
Date: Mon, 4 Apr 2011 07:38:51 +0300
Subject: [stringtemplate-interest] proposed "ignore newlines" template
	syntax
In-Reply-To: <E7535CD8-EC92-4D6C-A15C-CA951BAFA5F1@cs.usfca.edu>
References: <E7535CD8-EC92-4D6C-A15C-CA951BAFA5F1@cs.usfca.edu>
Message-ID: <4173636A-BDF7-4B05-BE55-8096FC930622@buhacoff.net>

I think ... ::= <<< ... >>>  is ok.  But I'll throw a couple of other ideas out there:

Characters at the beginning will be easy to extend later with other options.

For example, ... ::= w<<...>>   might mean ignore whitespace.  Later you might want ... ::= wgx<<...>>  to turn on ignore whitespace and two other hypothetical options named "g" and "x". 

Or allow full option names enclosed by some other symbol:   ... ::= [whitespace g xtra]<<. ... >>

Jonathan


On Apr 4, 2011, at 2:09 AM, Terence Parr wrote:

> Hi. There is a proposal to create special syntax that allows arbitrary formatting within a template that does not result in new lines in the output. This is useful when you have a really complicated template with IFs and such that needs to generate output all on the same line. Currently, this can be quite challenging. There's no way to read a huge template on one line. Sam Harwell and I came up with a potential solution: a new <<<...>>> triple angle bracket template that ignores newlines unless you use <\n> inside.
> 
> Here's a simple example:
> 
> ruleRef(rule,label,elementIndex,args,scope) ::= <<
> <if(label)><label>=<endif><if(scope)><scope:delegateName()>.<endif><rule.name>(<args; separator=", ">);
>>> 
> 
> it would probably be easier to read like this:
> 
> ruleRef(rule,label,elementIndex,args,scope) ::= <<<
> <if(label)>
> <label>=
> <endif>
> <if(scope)>
> <scope:delegateName()>.
> <endif>
> <rule.name>(<args; separator=", ">);
>>>> 
> 
> come to think of it, perhaps it should also ignore whitespace so that I could indent the conditionals:
> 
> ruleRef(rule,label,elementIndex,args,scope) ::= <<<
> <if(label)>
> 	<label>=
> <endif>
> <if(scope)>
> 	<scope:delegateName()>.
> <endif>
> <rule.name>(<args; separator=", ">);
>>>> 
> 
> We while the syntax to be close, but still recognizable as different than the usual <<...>>. I believe that there has been a proposal for special characters at the start of the template and the addition of keyword but I think a new template and closure syntax is better.
> 
> thoughts?
> 
> Thanks,
> Ter
> 
> 
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest


From ub at abego-software.de  Mon Apr  4 00:13:49 2011
From: ub at abego-software.de (Udo Borkowski)
Date: Mon, 4 Apr 2011 09:13:49 +0200
Subject: [stringtemplate-interest] proposed "ignore newlines" template
	syntax
In-Reply-To: <4173636A-BDF7-4B05-BE55-8096FC930622@buhacoff.net>
References: <E7535CD8-EC92-4D6C-A15C-CA951BAFA5F1@cs.usfca.edu>
	<4173636A-BDF7-4B05-BE55-8096FC930622@buhacoff.net>
Message-ID: <6BC3E599-3F8D-4D24-8A13-A2E5EE2D39D1@abego-software.de>

I like Jonathan's proposal and would prefer it over the <<< >>> syntax. 

The "character prefix"/"keyword prefix" approach makes it much easier to add new options in the future, without the need to extend the syntax. 

It is also easier to remember. Assume if we introduce a new syntax for each "feature" ( e.g. <<< >>> for 'ignore newlines', ''' ? ''' for ignore all whitespace, """ ? """ for ignore indents?) I can already see myself wondering which one meant what when I read old stuff. With the prefix syntax (especially the "full option" variant) things are very obvious.

Udo


On 04.04.2011, at 06:38, Jonathan Buhacoff wrote:

> I think ... ::= <<< ... >>>  is ok.  But I'll throw a couple of other ideas out there:
> 
> Characters at the beginning will be easy to extend later with other options.
> 
> For example, ... ::= w<<...>>   might mean ignore whitespace.  Later you might want ... ::= wgx<<...>>  to turn on ignore whitespace and two other hypothetical options named "g" and "x". 
> 
> Or allow full option names enclosed by some other symbol:   ... ::= [whitespace g xtra]<<. ... >>
> 
> Jonathan
> 
> 
> On Apr 4, 2011, at 2:09 AM, Terence Parr wrote:
> 
>> Hi. There is a proposal to create special syntax that allows arbitrary formatting within a template that does not result in new lines in the output. This is useful when you have a really complicated template with IFs and such that needs to generate output all on the same line. Currently, this can be quite challenging. There's no way to read a huge template on one line. Sam Harwell and I came up with a potential solution: a new <<<...>>> triple angle bracket template that ignores newlines unless you use <\n> inside.
>> 
>> Here's a simple example:
>> 
>> ruleRef(rule,label,elementIndex,args,scope) ::= <<
>> <if(label)><label>=<endif><if(scope)><scope:delegateName()>.<endif><rule.name>(<args; separator=", ">);
>>>> 
>> 
>> it would probably be easier to read like this:
>> 
>> ruleRef(rule,label,elementIndex,args,scope) ::= <<<
>> <if(label)>
>> <label>=
>> <endif>
>> <if(scope)>
>> <scope:delegateName()>.
>> <endif>
>> <rule.name>(<args; separator=", ">);
>>>>> 
>> 
>> come to think of it, perhaps it should also ignore whitespace so that I could indent the conditionals:
>> 
>> ruleRef(rule,label,elementIndex,args,scope) ::= <<<
>> <if(label)>
>> 	<label>=
>> <endif>
>> <if(scope)>
>> 	<scope:delegateName()>.
>> <endif>
>> <rule.name>(<args; separator=", ">);
>>>>> 
>> 
>> We while the syntax to be close, but still recognizable as different than the usual <<...>>. I believe that there has been a proposal for special characters at the start of the template and the addition of keyword but I think a new template and closure syntax is better.
>> 
>> thoughts?
>> 
>> Thanks,
>> Ter
>> 
>> 
>> _______________________________________________
>> stringtemplate-interest mailing list
>> stringtemplate-interest at antlr.org
>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
> 
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest


From sharwell at pixelminegames.com  Mon Apr  4 06:06:57 2011
From: sharwell at pixelminegames.com (Sam Harwell)
Date: Mon, 4 Apr 2011 08:06:57 -0500
Subject: [stringtemplate-interest] proposed "ignore newlines" template
	syntax
Message-ID: <02c001cbf2c9$2e1ecd70$8a5c6850$@pixelminegames.com>

After working to create some *very* large templates, Ter and I found that
the only true whitespace-related problem was the undesired introduction of
newline characters in the output. All other whitespace was straightforward
to control. The new option makes it especially easy to split larger
templates into multiple smaller ones. Also, we both felt that restricting
the feature to dropping only newline characters kept it in line with
StringTemplate's overall design simplicity.

In the templates I'm working on, I need to match the precise binary output
of a non-StringTemplate tool. The other tool is inconsistent in its use of
whitespace and single lines in the output ended up being 1000's of chars
long in the templates. This change alone made them completely manageable,
which I'm hoping is similar to what other users find.

Sam

-----Original Message-----
From: stringtemplate-interest-bounces at antlr.org
[mailto:stringtemplate-interest-bounces at antlr.org] On Behalf Of Udo
Borkowski
Sent: Monday, April 04, 2011 2:14 AM
Cc: stringtemplate-interest List
Subject: Re: [stringtemplate-interest] proposed "ignore newlines" template
syntax

I like Jonathan's proposal and would prefer it over the <<< >>> syntax. 

The "character prefix"/"keyword prefix" approach makes it much easier to add
new options in the future, without the need to extend the syntax. 

It is also easier to remember. Assume if we introduce a new syntax for each
"feature" ( e.g. <<< >>> for 'ignore newlines', ''' . ''' for ignore all
whitespace, """ . """ for ignore indents.) I can already see myself
wondering which one meant what when I read old stuff. With the prefix syntax
(especially the "full option" variant) things are very obvious.

Udo


On 04.04.2011, at 06:38, Jonathan Buhacoff wrote:

> I think ... ::= <<< ... >>>  is ok.  But I'll throw a couple of other
ideas out there:
> 
> Characters at the beginning will be easy to extend later with other
options.
> 
> For example, ... ::= w<<...>>   might mean ignore whitespace.  Later you
might want ... ::= wgx<<...>>  to turn on ignore whitespace and two other
hypothetical options named "g" and "x". 
> 
> Or allow full option names enclosed by some other symbol:   ... ::=
[whitespace g xtra]<<. ... >>
> 
> Jonathan
> 
> 
> On Apr 4, 2011, at 2:09 AM, Terence Parr wrote:
> 
>> Hi. There is a proposal to create special syntax that allows arbitrary
formatting within a template that does not result in new lines in the
output. This is useful when you have a really complicated template with IFs
and such that needs to generate output all on the same line. Currently, this
can be quite challenging. There's no way to read a huge template on one
line. Sam Harwell and I came up with a potential solution: a new <<<...>>>
triple angle bracket template that ignores newlines unless you use <\n>
inside.
>> 
>> Here's a simple example:
>> 
>> ruleRef(rule,label,elementIndex,args,scope) ::= << 
>> <if(label)><label>=<endif><if(scope)><scope:delegateName()>.<endif><r
>> ule.name>(<args; separator=", ">);
>>>> 
>> 
>> it would probably be easier to read like this:
>> 
>> ruleRef(rule,label,elementIndex,args,scope) ::= <<< <if(label)> 
>> <label>= <endif> <if(scope)> <scope:delegateName()>.
>> <endif>
>> <rule.name>(<args; separator=", ">);
>>>>> 
>> 
>> come to think of it, perhaps it should also ignore whitespace so that I
could indent the conditionals:
>> 
>> ruleRef(rule,label,elementIndex,args,scope) ::= <<< <if(label)>
>> 	<label>=
>> <endif>
>> <if(scope)>
>> 	<scope:delegateName()>.
>> <endif>
>> <rule.name>(<args; separator=", ">);
>>>>> 
>> 
>> We while the syntax to be close, but still recognizable as different than
the usual <<...>>. I believe that there has been a proposal for special
characters at the start of the template and the addition of keyword but I
think a new template and closure syntax is better.
>> 
>> thoughts?
>> 
>> Thanks,
>> Ter
>> 
>> 
>> _______________________________________________
>> stringtemplate-interest mailing list
>> stringtemplate-interest at antlr.org
>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
> 
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest

_______________________________________________
stringtemplate-interest mailing list
stringtemplate-interest at antlr.org
http://www.antlr.org/mailman/listinfo/stringtemplate-interest


From parrt at cs.usfca.edu  Mon Apr  4 08:31:24 2011
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon, 4 Apr 2011 08:31:24 -0700
Subject: [stringtemplate-interest] proposed "ignore newlines" template
	syntax
In-Reply-To: <BANLkTinWkQ4nZX6j49ZaNamr7H8dX42fXw@mail.gmail.com>
References: <E7535CD8-EC92-4D6C-A15C-CA951BAFA5F1@cs.usfca.edu>
	<BANLkTinWkQ4nZX6j49ZaNamr7H8dX42fXw@mail.gmail.com>
Message-ID: <D9A25C81-601C-43AA-A71D-1C80CB35EF33@cs.usfca.edu>

Hi guys, thanks for the response...

I was thinking '''...''' myself like python.  I like the suggestions about future flexibility but after 10 years this is the first change we've needed.  Contrast this with lots of antlr grammar rule options.

maybe triple double quotes to reuse "..." symbols?

t() ::= """
...
"""

?

Ter
On Apr 3, 2011, at 7:52 PM, Collin Fagan wrote:

> I think it's a great idea :) Here are some alternatives for the syntax. I'm not quite sure that at a glance I'd notice the difference between << and <<<.
> 
> Double 'double quotes'
> ""...""
> ruleRef(rule,label,elementIndex,args,scope) ::= ""
> <if(label)>
>        <label>=
> <endif>
> <if(scope)>
>        <scope:delegateName()>.
> <endif>
> <rule.name>(<args; separator=", ">);
> ""
> Triple 'single quotes'
> ruleRef(rule,label,elementIndex,args,scope) ::= 
> <if(label)>
>        <label>=
> <endif>
> <if(scope)>
>        <scope:delegateName()>.
> <endif>
> <rule.name>(<args; separator=", ">);
> """
> 
> The < and > with some other symbols.
> <# .. #>
> ruleRef(rule,label,elementIndex,args,scope) ::= <#
> <if(label)>
>        <label>=
> <endif>
> <if(scope)>
>        <scope:delegateName()>.
> <endif>
> <rule.name>(<args; separator=", ">);
> #>
> 
> <| ... |>
> ruleRef(rule,label,elementIndex,args,scope) ::= <|
> <if(label)>
>        <label>=
> <endif>
> <if(scope)>
>        <scope:delegateName()>.
> <endif>
> <rule.name>(<args; separator=", ">);
> |>
> 
> <@ ... @>
> ruleRef(rule,label,elementIndex,args,scope) ::= <@
> <if(label)>
>        <label>=
> <endif>
> <if(scope)>
>        <scope:delegateName()>.
> <endif>
> <rule.name>(<args; separator=", ">);
> @>
> 
> PHP style
> <?...?> 
> ruleRef(rule,label,elementIndex,args,scope) ::= <?
> <if(label)>
>        <label>=
> <endif>
> <if(scope)>
>        <scope:delegateName()>.
> <endif>
> <rule.name>(<args; separator=", ">);
> ?>
> 
> ASP style
> <%...%>
> ruleRef(rule,label,elementIndex,args,scope) ::= <%
> <if(label)>
>        <label>=
> <endif>
> <if(scope)>
>        <scope:delegateName()>.
> <endif>
> <rule.name>(<args; separator=", ">);
> %>
> 
> Collin
> 
> 
> On Sun, Apr 3, 2011 at 6:09 PM, Terence Parr <parrt at cs.usfca.edu> wrote:
> Hi. There is a proposal to create special syntax that allows arbitrary formatting within a template that does not result in new lines in the output. This is useful when you have a really complicated template with IFs and such that needs to generate output all on the same line. Currently, this can be quite challenging. There's no way to read a huge template on one line. Sam Harwell and I came up with a potential solution: a new <<<...>>> triple angle bracket template that ignores newlines unless you use <\n> inside.
> 
> Here's a simple example:
> 
> ruleRef(rule,label,elementIndex,args,scope) ::= <<
> <if(label)><label>=<endif><if(scope)><scope:delegateName()>.<endif><rule.name>(<args; separator=", ">);
> >>
> 
> it would probably be easier to read like this:
> 
> ruleRef(rule,label,elementIndex,args,scope) ::= <<<
> <if(label)>
> <label>=
> <endif>
> <if(scope)>
> <scope:delegateName()>.
> <endif>
> <rule.name>(<args; separator=", ">);
> >>>
> 
> come to think of it, perhaps it should also ignore whitespace so that I could indent the conditionals:
> 
> ruleRef(rule,label,elementIndex,args,scope) ::= <<<
> <if(label)>
>        <label>=
> <endif>
> <if(scope)>
>        <scope:delegateName()>.
> <endif>
> <rule.name>(<args; separator=", ">);
> >>>
> 
> We while the syntax to be close, but still recognizable as different than the usual <<...>>. I believe that there has been a proposal for special characters at the start of the template and the addition of keyword but I think a new template and closure syntax is better.
> 
> thoughts?
> 
> Thanks,
> Ter
> 
> 
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
> 
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20110404/bc18dc74/attachment.html 

From collin.fagan at gmail.com  Mon Apr  4 09:25:48 2011
From: collin.fagan at gmail.com (Collin Fagan)
Date: Mon, 4 Apr 2011 11:25:48 -0500
Subject: [stringtemplate-interest] proposed "ignore newlines" template
	syntax
In-Reply-To: <D9A25C81-601C-43AA-A71D-1C80CB35EF33@cs.usfca.edu>
References: <E7535CD8-EC92-4D6C-A15C-CA951BAFA5F1@cs.usfca.edu>
	<BANLkTinWkQ4nZX6j49ZaNamr7H8dX42fXw@mail.gmail.com>
	<D9A25C81-601C-43AA-A71D-1C80CB35EF33@cs.usfca.edu>
Message-ID: <BANLkTik_x_TP-_tPoSsShFzqY7PpCSz8XQ@mail.gmail.com>

When you declare a single line template you can use " so it does feel
consistent to use the " symbol again. Would using a different symbol like '
require one to escape the new symbol in our templates? That might be a good
reason to not introduce a new character and use "" or """.

Collin

On Mon, Apr 4, 2011 at 10:31 AM, Terence Parr <parrt at cs.usfca.edu> wrote:

> Hi guys, thanks for the response...
>
> I was thinking '''...''' myself like python.  I like the suggestions about
> future flexibility but after 10 years this is the first change we've needed.
>  Contrast this with lots of antlr grammar rule options.
>
> maybe triple double quotes to reuse "..." symbols?
>
> t() ::= """
> ...
> """
>
> ?
>
> Ter
> On Apr 3, 2011, at 7:52 PM, Collin Fagan wrote:
>
> I think it's a great idea :) Here are some alternatives for the syntax. I'm
> not quite sure that at a glance I'd notice the difference between << and
> <<<.
>
> Double 'double quotes'
> ""...""
> ruleRef(rule,label,elementIndex,args,scope) ::= ""
> <if(label)>
>        <label>=
> <endif>
> <if(scope)>
>        <scope:delegateName()>.
> <endif>
> <rule.name>(<args; separator=", ">);
> ""
> Triple 'single quotes'
> ruleRef(rule,label,elementIndex,args,scope) ::=
> <if(label)>
>        <label>=
> <endif>
> <if(scope)>
>        <scope:delegateName()>.
> <endif>
> <rule.name>(<args; separator=", ">);
> """
>
> The < and > with some other symbols.
> <# .. #>
> ruleRef(rule,label,elementIndex,args,scope) ::= <#
> <if(label)>
>        <label>=
> <endif>
> <if(scope)>
>        <scope:delegateName()>.
> <endif>
> <rule.name>(<args; separator=", ">);
> #>
>
> <| ... |>
> ruleRef(rule,label,elementIndex,args,scope) ::= <|
> <if(label)>
>        <label>=
> <endif>
> <if(scope)>
>        <scope:delegateName()>.
> <endif>
> <rule.name>(<args; separator=", ">);
> |>
>
> <@ ... @>
> ruleRef(rule,label,elementIndex,args,scope) ::= <@
> <if(label)>
>        <label>=
> <endif>
> <if(scope)>
>        <scope:delegateName()>.
> <endif>
> <rule.name>(<args; separator=", ">);
> @>
>
> PHP style
> <?...?>
> ruleRef(rule,label,elementIndex,args,scope) ::= <?
> <if(label)>
>        <label>=
> <endif>
> <if(scope)>
>        <scope:delegateName()>.
> <endif>
> <rule.name>(<args; separator=", ">);
> ?>
>
> ASP style
> <%...%>
> ruleRef(rule,label,elementIndex,args,scope) ::= <%
> <if(label)>
>        <label>=
> <endif>
> <if(scope)>
>        <scope:delegateName()>.
> <endif>
> <rule.name>(<args; separator=", ">);
> %>
>
> Collin
>
>
> On Sun, Apr 3, 2011 at 6:09 PM, Terence Parr <parrt at cs.usfca.edu> wrote:
>
>> Hi. There is a proposal to create special syntax that allows arbitrary
>> formatting within a template that does not result in new lines in the
>> output. This is useful when you have a really complicated template with IFs
>> and such that needs to generate output all on the same line. Currently, this
>> can be quite challenging. There's no way to read a huge template on one
>> line. Sam Harwell and I came up with a potential solution: a new <<<...>>>
>> triple angle bracket template that ignores newlines unless you use <\n>
>> inside.
>>
>> Here's a simple example:
>>
>> ruleRef(rule,label,elementIndex,args,scope) ::= <<
>> <if(label)><label>=<endif><if(scope)><scope:delegateName()>.<endif><
>> rule.name>(<args; separator=", ">);
>> >>
>>
>> it would probably be easier to read like this:
>>
>> ruleRef(rule,label,elementIndex,args,scope) ::= <<<
>> <if(label)>
>> <label>=
>> <endif>
>> <if(scope)>
>> <scope:delegateName()>.
>> <endif>
>> <rule.name>(<args; separator=", ">);
>> >>>
>>
>> come to think of it, perhaps it should also ignore whitespace so that I
>> could indent the conditionals:
>>
>> ruleRef(rule,label,elementIndex,args,scope) ::= <<<
>> <if(label)>
>>        <label>=
>> <endif>
>> <if(scope)>
>>        <scope:delegateName()>.
>> <endif>
>> <rule.name>(<args; separator=", ">);
>> >>>
>>
>> We while the syntax to be close, but still recognizable as different than
>> the usual <<...>>. I believe that there has been a proposal for special
>> characters at the start of the template and the addition of keyword but I
>> think a new template and closure syntax is better.
>>
>> thoughts?
>>
>> Thanks,
>> Ter
>>
>>
>> _______________________________________________
>> stringtemplate-interest mailing list
>> stringtemplate-interest at antlr.org
>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>>
>
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20110404/dff8f5c0/attachment.html 

From parrt at cs.usfca.edu  Mon Apr  4 09:59:52 2011
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon, 4 Apr 2011 09:59:52 -0700
Subject: [stringtemplate-interest] proposed "ignore newlines" template
	syntax
In-Reply-To: <BANLkTik_x_TP-_tPoSsShFzqY7PpCSz8XQ@mail.gmail.com>
References: <E7535CD8-EC92-4D6C-A15C-CA951BAFA5F1@cs.usfca.edu>
	<BANLkTinWkQ4nZX6j49ZaNamr7H8dX42fXw@mail.gmail.com>
	<D9A25C81-601C-43AA-A71D-1C80CB35EF33@cs.usfca.edu>
	<BANLkTik_x_TP-_tPoSsShFzqY7PpCSz8XQ@mail.gmail.com>
Message-ID: <D5D1BAF3-F598-4B83-87EC-C3DA8DF934F5@cs.usfca.edu>


On Apr 4, 2011, at 9:25 AM, Collin Fagan wrote:

> When you declare a single line template you can use " so it does feel consistent to use the " symbol again. Would using a different symbol like ' require one to escape the new symbol in our templates? That might be a good reason to not introduce a new character and use "" or """. 

Yeah,I was thinking the same thing on the way to work.  double quoted strings "..." means single-line template at the moment... double double quoted strings should therefore be used I guess. ok, I buy that.

t() ::= ""
<if(x)>
saldf;jalk;sdfj
<endif>
...
""

Looks fine.

Ter
> 
> Collin
> 
> On Mon, Apr 4, 2011 at 10:31 AM, Terence Parr <parrt at cs.usfca.edu> wrote:
> Hi guys, thanks for the response...
> 
> I was thinking '''...''' myself like python.  I like the suggestions about future flexibility but after 10 years this is the first change we've needed.  Contrast this with lots of antlr grammar rule options.
> 
> maybe triple double quotes to reuse "..." symbols?
> 
> t() ::= """
> ...
> """
> 
> ?
> 
> Ter
> On Apr 3, 2011, at 7:52 PM, Collin Fagan wrote:
> 
>> I think it's a great idea :) Here are some alternatives for the syntax. I'm not quite sure that at a glance I'd notice the difference between << and <<<.
>> 
>> Double 'double quotes'
>> ""...""
>> ruleRef(rule,label,elementIndex,args,scope) ::= ""
>> <if(label)>
>>        <label>=
>> <endif>
>> <if(scope)>
>>        <scope:delegateName()>.
>> <endif>
>> <rule.name>(<args; separator=", ">);
>> ""
>> Triple 'single quotes'
>> ruleRef(rule,label,elementIndex,args,scope) ::= 
>> <if(label)>
>>        <label>=
>> <endif>
>> <if(scope)>
>>        <scope:delegateName()>.
>> <endif>
>> <rule.name>(<args; separator=", ">);
>> """
>> 
>> The < and > with some other symbols.
>> <# .. #>
>> ruleRef(rule,label,elementIndex,args,scope) ::= <#
>> <if(label)>
>>        <label>=
>> <endif>
>> <if(scope)>
>>        <scope:delegateName()>.
>> <endif>
>> <rule.name>(<args; separator=", ">);
>> #>
>> 
>> <| ... |>
>> ruleRef(rule,label,elementIndex,args,scope) ::= <|
>> <if(label)>
>>        <label>=
>> <endif>
>> <if(scope)>
>>        <scope:delegateName()>.
>> <endif>
>> <rule.name>(<args; separator=", ">);
>> |>
>> 
>> <@ ... @>
>> ruleRef(rule,label,elementIndex,args,scope) ::= <@
>> <if(label)>
>>        <label>=
>> <endif>
>> <if(scope)>
>>        <scope:delegateName()>.
>> <endif>
>> <rule.name>(<args; separator=", ">);
>> @>
>> 
>> PHP style
>> <?...?> 
>> ruleRef(rule,label,elementIndex,args,scope) ::= <?
>> <if(label)>
>>        <label>=
>> <endif>
>> <if(scope)>
>>        <scope:delegateName()>.
>> <endif>
>> <rule.name>(<args; separator=", ">);
>> ?>
>> 
>> ASP style
>> <%...%>
>> ruleRef(rule,label,elementIndex,args,scope) ::= <%
>> <if(label)>
>>        <label>=
>> <endif>
>> <if(scope)>
>>        <scope:delegateName()>.
>> <endif>
>> <rule.name>(<args; separator=", ">);
>> %>
>> 
>> Collin
>> 
>> 
>> On Sun, Apr 3, 2011 at 6:09 PM, Terence Parr <parrt at cs.usfca.edu> wrote:
>> Hi. There is a proposal to create special syntax that allows arbitrary formatting within a template that does not result in new lines in the output. This is useful when you have a really complicated template with IFs and such that needs to generate output all on the same line. Currently, this can be quite challenging. There's no way to read a huge template on one line. Sam Harwell and I came up with a potential solution: a new <<<...>>> triple angle bracket template that ignores newlines unless you use <\n> inside.
>> 
>> Here's a simple example:
>> 
>> ruleRef(rule,label,elementIndex,args,scope) ::= <<
>> <if(label)><label>=<endif><if(scope)><scope:delegateName()>.<endif><rule.name>(<args; separator=", ">);
>> >>
>> 
>> it would probably be easier to read like this:
>> 
>> ruleRef(rule,label,elementIndex,args,scope) ::= <<<
>> <if(label)>
>> <label>=
>> <endif>
>> <if(scope)>
>> <scope:delegateName()>.
>> <endif>
>> <rule.name>(<args; separator=", ">);
>> >>>
>> 
>> come to think of it, perhaps it should also ignore whitespace so that I could indent the conditionals:
>> 
>> ruleRef(rule,label,elementIndex,args,scope) ::= <<<
>> <if(label)>
>>        <label>=
>> <endif>
>> <if(scope)>
>>        <scope:delegateName()>.
>> <endif>
>> <rule.name>(<args; separator=", ">);
>> >>>
>> 
>> We while the syntax to be close, but still recognizable as different than the usual <<...>>. I believe that there has been a proposal for special characters at the start of the template and the addition of keyword but I think a new template and closure syntax is better.
>> 
>> thoughts?
>> 
>> Thanks,
>> Ter
>> 
>> 
>> _______________________________________________
>> stringtemplate-interest mailing list
>> stringtemplate-interest at antlr.org
>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>> 
>> _______________________________________________
>> stringtemplate-interest mailing list
>> stringtemplate-interest at antlr.org
>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
> 
> 


From sharwell at pixelminegames.com  Mon Apr  4 10:27:05 2011
From: sharwell at pixelminegames.com (Sam Harwell)
Date: Mon, 4 Apr 2011 12:27:05 -0500
Subject: [stringtemplate-interest] proposed "ignore newlines"
	template	syntax
In-Reply-To: <D5D1BAF3-F598-4B83-87EC-C3DA8DF934F5@cs.usfca.edu>
References: <E7535CD8-EC92-4D6C-A15C-CA951BAFA5F1@cs.usfca.edu>	<BANLkTinWkQ4nZX6j49ZaNamr7H8dX42fXw@mail.gmail.com>	<D9A25C81-601C-43AA-A71D-1C80CB35EF33@cs.usfca.edu>	<BANLkTik_x_TP-_tPoSsShFzqY7PpCSz8XQ@mail.gmail.com>
	<D5D1BAF3-F598-4B83-87EC-C3DA8DF934F5@cs.usfca.edu>
Message-ID: <02eb01cbf2ed$84ee93f0$8ecbbbd0$@pixelminegames.com>

Using ""..."" makes it very tedious to change a template from << >> to a
non-newline template because the escape character changes.

Sam

-----Original Message-----
From: stringtemplate-interest-bounces at antlr.org
[mailto:stringtemplate-interest-bounces at antlr.org] On Behalf Of Terence Parr
Sent: Monday, April 04, 2011 12:00 PM
To: Collin Fagan
Cc: stringtemplate-interest List
Subject: Re: [stringtemplate-interest] proposed "ignore newlines" template
syntax


On Apr 4, 2011, at 9:25 AM, Collin Fagan wrote:

> When you declare a single line template you can use " so it does feel
consistent to use the " symbol again. Would using a different symbol like '
require one to escape the new symbol in our templates? That might be a good
reason to not introduce a new character and use "" or """. 

Yeah,I was thinking the same thing on the way to work.  double quoted
strings "..." means single-line template at the moment... double double
quoted strings should therefore be used I guess. ok, I buy that.

t() ::= ""
<if(x)>
saldf;jalk;sdfj
<endif>
...
""

Looks fine.

Ter
> 
> Collin
> 
> On Mon, Apr 4, 2011 at 10:31 AM, Terence Parr <parrt at cs.usfca.edu> wrote:
> Hi guys, thanks for the response...
> 
> I was thinking '''...''' myself like python.  I like the suggestions about
future flexibility but after 10 years this is the first change we've needed.
Contrast this with lots of antlr grammar rule options.
> 
> maybe triple double quotes to reuse "..." symbols?
> 
> t() ::= """
> ...
> """
> 
> ?
> 
> Ter
> On Apr 3, 2011, at 7:52 PM, Collin Fagan wrote:
> 
>> I think it's a great idea :) Here are some alternatives for the syntax.
I'm not quite sure that at a glance I'd notice the difference between << and
<<<.
>> 
>> Double 'double quotes'
>> ""...""
>> ruleRef(rule,label,elementIndex,args,scope) ::= ""
>> <if(label)>
>>        <label>=
>> <endif>
>> <if(scope)>
>>        <scope:delegateName()>.
>> <endif>
>> <rule.name>(<args; separator=", ">);
>> ""
>> Triple 'single quotes'
>> ruleRef(rule,label,elementIndex,args,scope) ::= <if(label)>
>>        <label>=
>> <endif>
>> <if(scope)>
>>        <scope:delegateName()>.
>> <endif>
>> <rule.name>(<args; separator=", ">);
>> """
>> 
>> The < and > with some other symbols.
>> <# .. #>
>> ruleRef(rule,label,elementIndex,args,scope) ::= <# <if(label)>
>>        <label>=
>> <endif>
>> <if(scope)>
>>        <scope:delegateName()>.
>> <endif>
>> <rule.name>(<args; separator=", ">);
>> #>
>> 
>> <| ... |>
>> ruleRef(rule,label,elementIndex,args,scope) ::= <| <if(label)>
>>        <label>=
>> <endif>
>> <if(scope)>
>>        <scope:delegateName()>.
>> <endif>
>> <rule.name>(<args; separator=", ">);
>> |>
>> 
>> <@ ... @>
>> ruleRef(rule,label,elementIndex,args,scope) ::= <@ <if(label)>
>>        <label>=
>> <endif>
>> <if(scope)>
>>        <scope:delegateName()>.
>> <endif>
>> <rule.name>(<args; separator=", ">);
>> @>
>> 
>> PHP style
>> <?...?>
>> ruleRef(rule,label,elementIndex,args,scope) ::= <?
>> <if(label)>
>>        <label>=
>> <endif>
>> <if(scope)>
>>        <scope:delegateName()>.
>> <endif>
>> <rule.name>(<args; separator=", ">);
>> ?>
>> 
>> ASP style
>> <%...%>
>> ruleRef(rule,label,elementIndex,args,scope) ::= <% <if(label)>
>>        <label>=
>> <endif>
>> <if(scope)>
>>        <scope:delegateName()>.
>> <endif>
>> <rule.name>(<args; separator=", ">);
>> %>
>> 
>> Collin
>> 
>> 
>> On Sun, Apr 3, 2011 at 6:09 PM, Terence Parr <parrt at cs.usfca.edu> wrote:
>> Hi. There is a proposal to create special syntax that allows arbitrary
formatting within a template that does not result in new lines in the
output. This is useful when you have a really complicated template with IFs
and such that needs to generate output all on the same line. Currently, this
can be quite challenging. There's no way to read a huge template on one
line. Sam Harwell and I came up with a potential solution: a new <<<...>>>
triple angle bracket template that ignores newlines unless you use <\n>
inside.
>> 
>> Here's a simple example:
>> 
>> ruleRef(rule,label,elementIndex,args,scope) ::= << 
>> <if(label)><label>=<endif><if(scope)><scope:delegateName()>.<endif><r
>> ule.name>(<args; separator=", ">);
>> >>
>> 
>> it would probably be easier to read like this:
>> 
>> ruleRef(rule,label,elementIndex,args,scope) ::= <<< <if(label)> 
>> <label>= <endif> <if(scope)> <scope:delegateName()>.
>> <endif>
>> <rule.name>(<args; separator=", ">);
>> >>>
>> 
>> come to think of it, perhaps it should also ignore whitespace so that I
could indent the conditionals:
>> 
>> ruleRef(rule,label,elementIndex,args,scope) ::= <<< <if(label)>
>>        <label>=
>> <endif>
>> <if(scope)>
>>        <scope:delegateName()>.
>> <endif>
>> <rule.name>(<args; separator=", ">);
>> >>>
>> 
>> We while the syntax to be close, but still recognizable as different than
the usual <<...>>. I believe that there has been a proposal for special
characters at the start of the template and the addition of keyword but I
think a new template and closure syntax is better.
>> 
>> thoughts?
>> 
>> Thanks,
>> Ter
>> 
>> 
>> _______________________________________________
>> stringtemplate-interest mailing list
>> stringtemplate-interest at antlr.org
>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>> 
>> _______________________________________________
>> stringtemplate-interest mailing list
>> stringtemplate-interest at antlr.org
>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
> 
> 

_______________________________________________
stringtemplate-interest mailing list
stringtemplate-interest at antlr.org
http://www.antlr.org/mailman/listinfo/stringtemplate-interest


From parrt at cs.usfca.edu  Mon Apr  4 10:32:11 2011
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon, 4 Apr 2011 10:32:11 -0700
Subject: [stringtemplate-interest] proposed "ignore newlines"
	template	syntax
In-Reply-To: <02eb01cbf2ed$84ee93f0$8ecbbbd0$@pixelminegames.com>
References: <E7535CD8-EC92-4D6C-A15C-CA951BAFA5F1@cs.usfca.edu>	<BANLkTinWkQ4nZX6j49ZaNamr7H8dX42fXw@mail.gmail.com>	<D9A25C81-601C-43AA-A71D-1C80CB35EF33@cs.usfca.edu>	<BANLkTik_x_TP-_tPoSsShFzqY7PpCSz8XQ@mail.gmail.com>
	<D5D1BAF3-F598-4B83-87EC-C3DA8DF934F5@cs.usfca.edu>
	<02eb01cbf2ed$84ee93f0$8ecbbbd0$@pixelminegames.com>
Message-ID: <4C41CCF8-5BFD-4B59-B7AE-D35C8975AC97@cs.usfca.edu>

true, but it seems like the better syntax.  Plus emacs is your friend ;)

Ter
On Apr 4, 2011, at 10:27 AM, Sam Harwell wrote:

> Using ""..."" makes it very tedious to change a template from << >> to a
> non-newline template because the escape character changes.
> 
> Sam
> 
> -----Original Message-----
> From: stringtemplate-interest-bounces at antlr.org
> [mailto:stringtemplate-interest-bounces at antlr.org] On Behalf Of Terence Parr
> Sent: Monday, April 04, 2011 12:00 PM
> To: Collin Fagan
> Cc: stringtemplate-interest List
> Subject: Re: [stringtemplate-interest] proposed "ignore newlines" template
> syntax
> 
> 
> On Apr 4, 2011, at 9:25 AM, Collin Fagan wrote:
> 
>> When you declare a single line template you can use " so it does feel
> consistent to use the " symbol again. Would using a different symbol like '
> require one to escape the new symbol in our templates? That might be a good
> reason to not introduce a new character and use "" or """. 
> 
> Yeah,I was thinking the same thing on the way to work.  double quoted
> strings "..." means single-line template at the moment... double double
> quoted strings should therefore be used I guess. ok, I buy that.
> 
> t() ::= ""
> <if(x)>
> saldf;jalk;sdfj
> <endif>
> ...
> ""
> 
> Looks fine.
> 
> Ter
>> 
>> Collin
>> 
>> On Mon, Apr 4, 2011 at 10:31 AM, Terence Parr <parrt at cs.usfca.edu> wrote:
>> Hi guys, thanks for the response...
>> 
>> I was thinking '''...''' myself like python.  I like the suggestions about
> future flexibility but after 10 years this is the first change we've needed.
> Contrast this with lots of antlr grammar rule options.
>> 
>> maybe triple double quotes to reuse "..." symbols?
>> 
>> t() ::= """
>> ...
>> """
>> 
>> ?
>> 
>> Ter
>> On Apr 3, 2011, at 7:52 PM, Collin Fagan wrote:
>> 
>>> I think it's a great idea :) Here are some alternatives for the syntax.
> I'm not quite sure that at a glance I'd notice the difference between << and
> <<<.
>>> 
>>> Double 'double quotes'
>>> ""...""
>>> ruleRef(rule,label,elementIndex,args,scope) ::= ""
>>> <if(label)>
>>>       <label>=
>>> <endif>
>>> <if(scope)>
>>>       <scope:delegateName()>.
>>> <endif>
>>> <rule.name>(<args; separator=", ">);
>>> ""
>>> Triple 'single quotes'
>>> ruleRef(rule,label,elementIndex,args,scope) ::= <if(label)>
>>>       <label>=
>>> <endif>
>>> <if(scope)>
>>>       <scope:delegateName()>.
>>> <endif>
>>> <rule.name>(<args; separator=", ">);
>>> """
>>> 
>>> The < and > with some other symbols.
>>> <# .. #>
>>> ruleRef(rule,label,elementIndex,args,scope) ::= <# <if(label)>
>>>       <label>=
>>> <endif>
>>> <if(scope)>
>>>       <scope:delegateName()>.
>>> <endif>
>>> <rule.name>(<args; separator=", ">);
>>> #>
>>> 
>>> <| ... |>
>>> ruleRef(rule,label,elementIndex,args,scope) ::= <| <if(label)>
>>>       <label>=
>>> <endif>
>>> <if(scope)>
>>>       <scope:delegateName()>.
>>> <endif>
>>> <rule.name>(<args; separator=", ">);
>>> |>
>>> 
>>> <@ ... @>
>>> ruleRef(rule,label,elementIndex,args,scope) ::= <@ <if(label)>
>>>       <label>=
>>> <endif>
>>> <if(scope)>
>>>       <scope:delegateName()>.
>>> <endif>
>>> <rule.name>(<args; separator=", ">);
>>> @>
>>> 
>>> PHP style
>>> <?...?>
>>> ruleRef(rule,label,elementIndex,args,scope) ::= <?
>>> <if(label)>
>>>       <label>=
>>> <endif>
>>> <if(scope)>
>>>       <scope:delegateName()>.
>>> <endif>
>>> <rule.name>(<args; separator=", ">);
>>> ?>
>>> 
>>> ASP style
>>> <%...%>
>>> ruleRef(rule,label,elementIndex,args,scope) ::= <% <if(label)>
>>>       <label>=
>>> <endif>
>>> <if(scope)>
>>>       <scope:delegateName()>.
>>> <endif>
>>> <rule.name>(<args; separator=", ">);
>>> %>
>>> 
>>> Collin
>>> 
>>> 
>>> On Sun, Apr 3, 2011 at 6:09 PM, Terence Parr <parrt at cs.usfca.edu> wrote:
>>> Hi. There is a proposal to create special syntax that allows arbitrary
> formatting within a template that does not result in new lines in the
> output. This is useful when you have a really complicated template with IFs
> and such that needs to generate output all on the same line. Currently, this
> can be quite challenging. There's no way to read a huge template on one
> line. Sam Harwell and I came up with a potential solution: a new <<<...>>>
> triple angle bracket template that ignores newlines unless you use <\n>
> inside.
>>> 
>>> Here's a simple example:
>>> 
>>> ruleRef(rule,label,elementIndex,args,scope) ::= << 
>>> <if(label)><label>=<endif><if(scope)><scope:delegateName()>.<endif><r
>>> ule.name>(<args; separator=", ">);
>>>>> 
>>> 
>>> it would probably be easier to read like this:
>>> 
>>> ruleRef(rule,label,elementIndex,args,scope) ::= <<< <if(label)> 
>>> <label>= <endif> <if(scope)> <scope:delegateName()>.
>>> <endif>
>>> <rule.name>(<args; separator=", ">);
>>>>>> 
>>> 
>>> come to think of it, perhaps it should also ignore whitespace so that I
> could indent the conditionals:
>>> 
>>> ruleRef(rule,label,elementIndex,args,scope) ::= <<< <if(label)>
>>>       <label>=
>>> <endif>
>>> <if(scope)>
>>>       <scope:delegateName()>.
>>> <endif>
>>> <rule.name>(<args; separator=", ">);
>>>>>> 
>>> 
>>> We while the syntax to be close, but still recognizable as different than
> the usual <<...>>. I believe that there has been a proposal for special
> characters at the start of the template and the addition of keyword but I
> think a new template and closure syntax is better.
>>> 
>>> thoughts?
>>> 
>>> Thanks,
>>> Ter
>>> 
>>> 
>>> _______________________________________________
>>> stringtemplate-interest mailing list
>>> stringtemplate-interest at antlr.org
>>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>>> 
>>> _______________________________________________
>>> stringtemplate-interest mailing list
>>> stringtemplate-interest at antlr.org
>>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>> 
>> 
> 
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
> 


From collin.fagan at gmail.com  Mon Apr  4 11:02:44 2011
From: collin.fagan at gmail.com (Collin Fagan)
Date: Mon, 4 Apr 2011 13:02:44 -0500
Subject: [stringtemplate-interest] proposed "ignore newlines" template
	syntax
In-Reply-To: <4C41CCF8-5BFD-4B59-B7AE-D35C8975AC97@cs.usfca.edu>
References: <E7535CD8-EC92-4D6C-A15C-CA951BAFA5F1@cs.usfca.edu>
	<BANLkTinWkQ4nZX6j49ZaNamr7H8dX42fXw@mail.gmail.com>
	<D9A25C81-601C-43AA-A71D-1C80CB35EF33@cs.usfca.edu>
	<BANLkTik_x_TP-_tPoSsShFzqY7PpCSz8XQ@mail.gmail.com>
	<D5D1BAF3-F598-4B83-87EC-C3DA8DF934F5@cs.usfca.edu>
	<02eb01cbf2ed$84ee93f0$8ecbbbd0$@pixelminegames.com>
	<4C41CCF8-5BFD-4B59-B7AE-D35C8975AC97@cs.usfca.edu>
Message-ID: <BANLkTikJbfJujd39ZPKWUmfqqANmUD73BA@mail.gmail.com>

Will using "" require people to escape a single " in a template?

t() ::= ""
System.out.println(\"hi\");
""
Collin

On Mon, Apr 4, 2011 at 12:32 PM, Terence Parr <parrt at cs.usfca.edu> wrote:

> true, but it seems like the better syntax.  Plus emacs is your friend ;)
>
> Ter
> On Apr 4, 2011, at 10:27 AM, Sam Harwell wrote:
>
> > Using ""..."" makes it very tedious to change a template from << >> to a
> > non-newline template because the escape character changes.
> >
> > Sam
> >
> > -----Original Message-----
> > From: stringtemplate-interest-bounces at antlr.org
> > [mailto:stringtemplate-interest-bounces at antlr.org] On Behalf Of Terence
> Parr
> > Sent: Monday, April 04, 2011 12:00 PM
> > To: Collin Fagan
> > Cc: stringtemplate-interest List
> > Subject: Re: [stringtemplate-interest] proposed "ignore newlines"
> template
> > syntax
> >
> >
> > On Apr 4, 2011, at 9:25 AM, Collin Fagan wrote:
> >
> >> When you declare a single line template you can use " so it does feel
> > consistent to use the " symbol again. Would using a different symbol like
> '
> > require one to escape the new symbol in our templates? That might be a
> good
> > reason to not introduce a new character and use "" or """.
> >
> > Yeah,I was thinking the same thing on the way to work.  double quoted
> > strings "..." means single-line template at the moment... double double
> > quoted strings should therefore be used I guess. ok, I buy that.
> >
> > t() ::= ""
> > <if(x)>
> > saldf;jalk;sdfj
> > <endif>
> > ...
> > ""
> >
> > Looks fine.
> >
> > Ter
> >>
> >> Collin
> >>
> >> On Mon, Apr 4, 2011 at 10:31 AM, Terence Parr <parrt at cs.usfca.edu>
> wrote:
> >> Hi guys, thanks for the response...
> >>
> >> I was thinking '''...''' myself like python.  I like the suggestions
> about
> > future flexibility but after 10 years this is the first change we've
> needed.
> > Contrast this with lots of antlr grammar rule options.
> >>
> >> maybe triple double quotes to reuse "..." symbols?
> >>
> >> t() ::= """
> >> ...
> >> """
> >>
> >> ?
> >>
> >> Ter
> >> On Apr 3, 2011, at 7:52 PM, Collin Fagan wrote:
> >>
> >>> I think it's a great idea :) Here are some alternatives for the syntax.
> > I'm not quite sure that at a glance I'd notice the difference between <<
> and
> > <<<.
> >>>
> >>> Double 'double quotes'
> >>> ""...""
> >>> ruleRef(rule,label,elementIndex,args,scope) ::= ""
> >>> <if(label)>
> >>>       <label>=
> >>> <endif>
> >>> <if(scope)>
> >>>       <scope:delegateName()>.
> >>> <endif>
> >>> <rule.name>(<args; separator=", ">);
> >>> ""
> >>> Triple 'single quotes'
> >>> ruleRef(rule,label,elementIndex,args,scope) ::= <if(label)>
> >>>       <label>=
> >>> <endif>
> >>> <if(scope)>
> >>>       <scope:delegateName()>.
> >>> <endif>
> >>> <rule.name>(<args; separator=", ">);
> >>> """
> >>>
> >>> The < and > with some other symbols.
> >>> <# .. #>
> >>> ruleRef(rule,label,elementIndex,args,scope) ::= <# <if(label)>
> >>>       <label>=
> >>> <endif>
> >>> <if(scope)>
> >>>       <scope:delegateName()>.
> >>> <endif>
> >>> <rule.name>(<args; separator=", ">);
> >>> #>
> >>>
> >>> <| ... |>
> >>> ruleRef(rule,label,elementIndex,args,scope) ::= <| <if(label)>
> >>>       <label>=
> >>> <endif>
> >>> <if(scope)>
> >>>       <scope:delegateName()>.
> >>> <endif>
> >>> <rule.name>(<args; separator=", ">);
> >>> |>
> >>>
> >>> <@ ... @>
> >>> ruleRef(rule,label,elementIndex,args,scope) ::= <@ <if(label)>
> >>>       <label>=
> >>> <endif>
> >>> <if(scope)>
> >>>       <scope:delegateName()>.
> >>> <endif>
> >>> <rule.name>(<args; separator=", ">);
> >>> @>
> >>>
> >>> PHP style
> >>> <?...?>
> >>> ruleRef(rule,label,elementIndex,args,scope) ::= <?
> >>> <if(label)>
> >>>       <label>=
> >>> <endif>
> >>> <if(scope)>
> >>>       <scope:delegateName()>.
> >>> <endif>
> >>> <rule.name>(<args; separator=", ">);
> >>> ?>
> >>>
> >>> ASP style
> >>> <%...%>
> >>> ruleRef(rule,label,elementIndex,args,scope) ::= <% <if(label)>
> >>>       <label>=
> >>> <endif>
> >>> <if(scope)>
> >>>       <scope:delegateName()>.
> >>> <endif>
> >>> <rule.name>(<args; separator=", ">);
> >>> %>
> >>>
> >>> Collin
> >>>
> >>>
> >>> On Sun, Apr 3, 2011 at 6:09 PM, Terence Parr <parrt at cs.usfca.edu>
> wrote:
> >>> Hi. There is a proposal to create special syntax that allows arbitrary
> > formatting within a template that does not result in new lines in the
> > output. This is useful when you have a really complicated template with
> IFs
> > and such that needs to generate output all on the same line. Currently,
> this
> > can be quite challenging. There's no way to read a huge template on one
> > line. Sam Harwell and I came up with a potential solution: a new
> <<<...>>>
> > triple angle bracket template that ignores newlines unless you use <\n>
> > inside.
> >>>
> >>> Here's a simple example:
> >>>
> >>> ruleRef(rule,label,elementIndex,args,scope) ::= <<
> >>> <if(label)><label>=<endif><if(scope)><scope:delegateName()>.<endif><r
> >>> ule.name>(<args; separator=", ">);
> >>>>>
> >>>
> >>> it would probably be easier to read like this:
> >>>
> >>> ruleRef(rule,label,elementIndex,args,scope) ::= <<< <if(label)>
> >>> <label>= <endif> <if(scope)> <scope:delegateName()>.
> >>> <endif>
> >>> <rule.name>(<args; separator=", ">);
> >>>>>>
> >>>
> >>> come to think of it, perhaps it should also ignore whitespace so that I
> > could indent the conditionals:
> >>>
> >>> ruleRef(rule,label,elementIndex,args,scope) ::= <<< <if(label)>
> >>>       <label>=
> >>> <endif>
> >>> <if(scope)>
> >>>       <scope:delegateName()>.
> >>> <endif>
> >>> <rule.name>(<args; separator=", ">);
> >>>>>>
> >>>
> >>> We while the syntax to be close, but still recognizable as different
> than
> > the usual <<...>>. I believe that there has been a proposal for special
> > characters at the start of the template and the addition of keyword but I
> > think a new template and closure syntax is better.
> >>>
> >>> thoughts?
> >>>
> >>> Thanks,
> >>> Ter
> >>>
> >>>
> >>> _______________________________________________
> >>> stringtemplate-interest mailing list
> >>> stringtemplate-interest at antlr.org
> >>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
> >>>
> >>> _______________________________________________
> >>> stringtemplate-interest mailing list
> >>> stringtemplate-interest at antlr.org
> >>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
> >>
> >>
> >
> > _______________________________________________
> > stringtemplate-interest mailing list
> > stringtemplate-interest at antlr.org
> > http://www.antlr.org/mailman/listinfo/stringtemplate-interest
> >
>
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20110404/05d946f3/attachment-0001.html 

From parrt at cs.usfca.edu  Mon Apr  4 11:09:08 2011
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon, 4 Apr 2011 11:09:08 -0700
Subject: [stringtemplate-interest] proposed "ignore newlines" template
	syntax
In-Reply-To: <BANLkTikJbfJujd39ZPKWUmfqqANmUD73BA@mail.gmail.com>
References: <E7535CD8-EC92-4D6C-A15C-CA951BAFA5F1@cs.usfca.edu>
	<BANLkTinWkQ4nZX6j49ZaNamr7H8dX42fXw@mail.gmail.com>
	<D9A25C81-601C-43AA-A71D-1C80CB35EF33@cs.usfca.edu>
	<BANLkTik_x_TP-_tPoSsShFzqY7PpCSz8XQ@mail.gmail.com>
	<D5D1BAF3-F598-4B83-87EC-C3DA8DF934F5@cs.usfca.edu>
	<02eb01cbf2ed$84ee93f0$8ecbbbd0$@pixelminegames.com>
	<4C41CCF8-5BFD-4B59-B7AE-D35C8975AC97@cs.usfca.edu>
	<BANLkTikJbfJujd39ZPKWUmfqqANmUD73BA@mail.gmail.com>
Message-ID: <802DB4A9-00F3-4E28-843E-6EBA89F3C1D5@cs.usfca.edu>

I could probably make it avoid the escape there... but what does """ means? better to escape.
T
On Apr 4, 2011, at 11:02 AM, Collin Fagan wrote:

> Will using "" require people to escape a single " in a template?
> 
> t() ::= "" 
> System.out.println(\"hi\");
> ""
> Collin
> 
> On Mon, Apr 4, 2011 at 12:32 PM, Terence Parr <parrt at cs.usfca.edu> wrote:
> true, but it seems like the better syntax.  Plus emacs is your friend ;)
> 
> Ter
> On Apr 4, 2011, at 10:27 AM, Sam Harwell wrote:
> 
> > Using ""..."" makes it very tedious to change a template from << >> to a
> > non-newline template because the escape character changes.
> >
> > Sam
> >
> > -----Original Message-----
> > From: stringtemplate-interest-bounces at antlr.org
> > [mailto:stringtemplate-interest-bounces at antlr.org] On Behalf Of Terence Parr
> > Sent: Monday, April 04, 2011 12:00 PM
> > To: Collin Fagan
> > Cc: stringtemplate-interest List
> > Subject: Re: [stringtemplate-interest] proposed "ignore newlines" template
> > syntax
> >
> >
> > On Apr 4, 2011, at 9:25 AM, Collin Fagan wrote:
> >
> >> When you declare a single line template you can use " so it does feel
> > consistent to use the " symbol again. Would using a different symbol like '
> > require one to escape the new symbol in our templates? That might be a good
> > reason to not introduce a new character and use "" or """.
> >
> > Yeah,I was thinking the same thing on the way to work.  double quoted
> > strings "..." means single-line template at the moment... double double
> > quoted strings should therefore be used I guess. ok, I buy that.
> >
> > t() ::= ""
> > <if(x)>
> > saldf;jalk;sdfj
> > <endif>
> > ...
> > ""
> >
> > Looks fine.
> >
> > Ter
> >>
> >> Collin
> >>
> >> On Mon, Apr 4, 2011 at 10:31 AM, Terence Parr <parrt at cs.usfca.edu> wrote:
> >> Hi guys, thanks for the response...
> >>
> >> I was thinking '''...''' myself like python.  I like the suggestions about
> > future flexibility but after 10 years this is the first change we've needed.
> > Contrast this with lots of antlr grammar rule options.
> >>
> >> maybe triple double quotes to reuse "..." symbols?
> >>
> >> t() ::= """
> >> ...
> >> """
> >>
> >> ?
> >>
> >> Ter
> >> On Apr 3, 2011, at 7:52 PM, Collin Fagan wrote:
> >>
> >>> I think it's a great idea :) Here are some alternatives for the syntax.
> > I'm not quite sure that at a glance I'd notice the difference between << and
> > <<<.
> >>>
> >>> Double 'double quotes'
> >>> ""...""
> >>> ruleRef(rule,label,elementIndex,args,scope) ::= ""
> >>> <if(label)>
> >>>       <label>=
> >>> <endif>
> >>> <if(scope)>
> >>>       <scope:delegateName()>.
> >>> <endif>
> >>> <rule.name>(<args; separator=", ">);
> >>> ""
> >>> Triple 'single quotes'
> >>> ruleRef(rule,label,elementIndex,args,scope) ::= <if(label)>
> >>>       <label>=
> >>> <endif>
> >>> <if(scope)>
> >>>       <scope:delegateName()>.
> >>> <endif>
> >>> <rule.name>(<args; separator=", ">);
> >>> """
> >>>
> >>> The < and > with some other symbols.
> >>> <# .. #>
> >>> ruleRef(rule,label,elementIndex,args,scope) ::= <# <if(label)>
> >>>       <label>=
> >>> <endif>
> >>> <if(scope)>
> >>>       <scope:delegateName()>.
> >>> <endif>
> >>> <rule.name>(<args; separator=", ">);
> >>> #>
> >>>
> >>> <| ... |>
> >>> ruleRef(rule,label,elementIndex,args,scope) ::= <| <if(label)>
> >>>       <label>=
> >>> <endif>
> >>> <if(scope)>
> >>>       <scope:delegateName()>.
> >>> <endif>
> >>> <rule.name>(<args; separator=", ">);
> >>> |>
> >>>
> >>> <@ ... @>
> >>> ruleRef(rule,label,elementIndex,args,scope) ::= <@ <if(label)>
> >>>       <label>=
> >>> <endif>
> >>> <if(scope)>
> >>>       <scope:delegateName()>.
> >>> <endif>
> >>> <rule.name>(<args; separator=", ">);
> >>> @>
> >>>
> >>> PHP style
> >>> <?...?>
> >>> ruleRef(rule,label,elementIndex,args,scope) ::= <?
> >>> <if(label)>
> >>>       <label>=
> >>> <endif>
> >>> <if(scope)>
> >>>       <scope:delegateName()>.
> >>> <endif>
> >>> <rule.name>(<args; separator=", ">);
> >>> ?>
> >>>
> >>> ASP style
> >>> <%...%>
> >>> ruleRef(rule,label,elementIndex,args,scope) ::= <% <if(label)>
> >>>       <label>=
> >>> <endif>
> >>> <if(scope)>
> >>>       <scope:delegateName()>.
> >>> <endif>
> >>> <rule.name>(<args; separator=", ">);
> >>> %>
> >>>
> >>> Collin
> >>>
> >>>
> >>> On Sun, Apr 3, 2011 at 6:09 PM, Terence Parr <parrt at cs.usfca.edu> wrote:
> >>> Hi. There is a proposal to create special syntax that allows arbitrary
> > formatting within a template that does not result in new lines in the
> > output. This is useful when you have a really complicated template with IFs
> > and such that needs to generate output all on the same line. Currently, this
> > can be quite challenging. There's no way to read a huge template on one
> > line. Sam Harwell and I came up with a potential solution: a new <<<...>>>
> > triple angle bracket template that ignores newlines unless you use <\n>
> > inside.
> >>>
> >>> Here's a simple example:
> >>>
> >>> ruleRef(rule,label,elementIndex,args,scope) ::= <<
> >>> <if(label)><label>=<endif><if(scope)><scope:delegateName()>.<endif><r
> >>> ule.name>(<args; separator=", ">);
> >>>>>
> >>>
> >>> it would probably be easier to read like this:
> >>>
> >>> ruleRef(rule,label,elementIndex,args,scope) ::= <<< <if(label)>
> >>> <label>= <endif> <if(scope)> <scope:delegateName()>.
> >>> <endif>
> >>> <rule.name>(<args; separator=", ">);
> >>>>>>
> >>>
> >>> come to think of it, perhaps it should also ignore whitespace so that I
> > could indent the conditionals:
> >>>
> >>> ruleRef(rule,label,elementIndex,args,scope) ::= <<< <if(label)>
> >>>       <label>=
> >>> <endif>
> >>> <if(scope)>
> >>>       <scope:delegateName()>.
> >>> <endif>
> >>> <rule.name>(<args; separator=", ">);
> >>>>>>
> >>>
> >>> We while the syntax to be close, but still recognizable as different than
> > the usual <<...>>. I believe that there has been a proposal for special
> > characters at the start of the template and the addition of keyword but I
> > think a new template and closure syntax is better.
> >>>
> >>> thoughts?
> >>>
> >>> Thanks,
> >>> Ter
> >>>
> >>>
> >>> _______________________________________________
> >>> stringtemplate-interest mailing list
> >>> stringtemplate-interest at antlr.org
> >>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
> >>>
> >>> _______________________________________________
> >>> stringtemplate-interest mailing list
> >>> stringtemplate-interest at antlr.org
> >>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
> >>
> >>
> >
> > _______________________________________________
> > stringtemplate-interest mailing list
> > stringtemplate-interest at antlr.org
> > http://www.antlr.org/mailman/listinfo/stringtemplate-interest
> >
> 
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
> 
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest


From sharwell at pixelminegames.com  Mon Apr  4 11:20:27 2011
From: sharwell at pixelminegames.com (Sam Harwell)
Date: Mon, 4 Apr 2011 13:20:27 -0500
Subject: [stringtemplate-interest] proposed "ignore newlines"
	template	syntax
In-Reply-To: <BANLkTikJbfJujd39ZPKWUmfqqANmUD73BA@mail.gmail.com>
References: <E7535CD8-EC92-4D6C-A15C-CA951BAFA5F1@cs.usfca.edu>	<BANLkTinWkQ4nZX6j49ZaNamr7H8dX42fXw@mail.gmail.com>	<D9A25C81-601C-43AA-A71D-1C80CB35EF33@cs.usfca.edu>	<BANLkTik_x_TP-_tPoSsShFzqY7PpCSz8XQ@mail.gmail.com>	<D5D1BAF3-F598-4B83-87EC-C3DA8DF934F5@cs.usfca.edu>	<02eb01cbf2ed$84ee93f0$8ecbbbd0$@pixelminegames.com>	<4C41CCF8-5BFD-4B59-B7AE-D35C8975AC97@cs.usfca.edu>
	<BANLkTikJbfJujd39ZPKWUmfqqANmUD73BA@mail.gmail.com>
Message-ID: <02f401cbf2f4$f9d13310$ed739930$@pixelminegames.com>

That was my concern.

 

Thinking about it more, it seems you shouldn't need to escape the quotes
unless there are two of them, in which case you could use "\" to produce two
sequential quotes in the output.

 

Sam

 

From: stringtemplate-interest-bounces at antlr.org
[mailto:stringtemplate-interest-bounces at antlr.org] On Behalf Of Collin Fagan
Sent: Monday, April 04, 2011 1:03 PM
To: Terence Parr
Cc: stringtemplate-interest List
Subject: Re: [stringtemplate-interest] proposed "ignore newlines" template
syntax

 

Will using "" require people to escape a single " in a template?

t() ::= "" 
System.out.println(\"hi\");
""
Collin

 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20110404/176d47f5/attachment.html 

From parrt at cs.usfca.edu  Mon Apr  4 11:25:36 2011
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon, 4 Apr 2011 11:25:36 -0700
Subject: [stringtemplate-interest] proposed "ignore newlines"
	template	syntax
In-Reply-To: <02f401cbf2f4$f9d13310$ed739930$@pixelminegames.com>
References: <E7535CD8-EC92-4D6C-A15C-CA951BAFA5F1@cs.usfca.edu>	<BANLkTinWkQ4nZX6j49ZaNamr7H8dX42fXw@mail.gmail.com>	<D9A25C81-601C-43AA-A71D-1C80CB35EF33@cs.usfca.edu>	<BANLkTik_x_TP-_tPoSsShFzqY7PpCSz8XQ@mail.gmail.com>	<D5D1BAF3-F598-4B83-87EC-C3DA8DF934F5@cs.usfca.edu>	<02eb01cbf2ed$84ee93f0$8ecbbbd0$@pixelminegames.com>	<4C41CCF8-5BFD-4B59-B7AE-D35C8975AC97@cs.usfca.edu>
	<BANLkTikJbfJujd39ZPKWUmfqqANmUD73BA@mail.gmail.com>
	<02f401cbf2f4$f9d13310$ed739930$@pixelminegames.com>
Message-ID: <7E6653A0-5D25-4AE7-BD66-11D4CD473F9F@cs.usfca.edu>

Quote is pretty common. hmm...let me try avoiding escape for single ".
Ter
On Apr 4, 2011, at 11:20 AM, Sam Harwell wrote:

> That was my concern.
>  
> Thinking about it more, it seems you shouldn?t need to escape the quotes unless there are two of them, in which case you could use "\" to produce two sequential quotes in the output.
>  
> Sam
>  
> From: stringtemplate-interest-bounces at antlr.org [mailto:stringtemplate-interest-bounces at antlr.org] On Behalf Of Collin Fagan
> Sent: Monday, April 04, 2011 1:03 PM
> To: Terence Parr
> Cc: stringtemplate-interest List
> Subject: Re: [stringtemplate-interest] proposed "ignore newlines" template syntax
>  
> Will using "" require people to escape a single " in a template?
> 
> t() ::= "" 
> System.out.println(\"hi\");
> ""
> Collin
> 
>  


From sharwell at pixelminegames.com  Mon Apr  4 12:22:09 2011
From: sharwell at pixelminegames.com (Sam Harwell)
Date: Mon, 4 Apr 2011 14:22:09 -0500
Subject: [stringtemplate-interest] proposed "ignore
	newlines"	template	syntax
In-Reply-To: <7E6653A0-5D25-4AE7-BD66-11D4CD473F9F@cs.usfca.edu>
References: <E7535CD8-EC92-4D6C-A15C-CA951BAFA5F1@cs.usfca.edu>	<BANLkTinWkQ4nZX6j49ZaNamr7H8dX42fXw@mail.gmail.com>	<D9A25C81-601C-43AA-A71D-1C80CB35EF33@cs.usfca.edu>	<BANLkTik_x_TP-_tPoSsShFzqY7PpCSz8XQ@mail.gmail.com>	<D5D1BAF3-F598-4B83-87EC-C3DA8DF934F5@cs.usfca.edu>	<02eb01cbf2ed$84ee93f0$8ecbbbd0$@pixelminegames.com>	<4C41CCF8-5BFD-4B59-B7AE-D35C8975AC97@cs.usfca.edu>	<BANLkTikJbfJujd39ZPKWUmfqqANmUD73BA@mail.gmail.com>	<02f401cbf2f4$f9d13310$ed739930$@pixelminegames.com>
	<7E6653A0-5D25-4AE7-BD66-11D4CD473F9F@cs.usfca.edu>
Message-ID: <02ff01cbf2fd$98313340$c89399c0$@pixelminegames.com>

It should be fairly straightforward to say it ends with two sequential
unescaped quote characters.

-----Original Message-----
From: stringtemplate-interest-bounces at antlr.org
[mailto:stringtemplate-interest-bounces at antlr.org] On Behalf Of Terence Parr
Sent: Monday, April 04, 2011 1:26 PM
To: stringtemplate-interest List
Subject: Re: [stringtemplate-interest] proposed "ignore newlines" template
syntax

Quote is pretty common. hmm...let me try avoiding escape for single ".
Ter



From jonathan at buhacoff.net  Mon Apr  4 12:24:13 2011
From: jonathan at buhacoff.net (Jonathan Buhacoff)
Date: Mon, 4 Apr 2011 22:24:13 +0300
Subject: [stringtemplate-interest] proposed "ignore newlines"
	template	syntax
In-Reply-To: <02f401cbf2f4$f9d13310$ed739930$@pixelminegames.com>
References: <E7535CD8-EC92-4D6C-A15C-CA951BAFA5F1@cs.usfca.edu>	<BANLkTinWkQ4nZX6j49ZaNamr7H8dX42fXw@mail.gmail.com>	<D9A25C81-601C-43AA-A71D-1C80CB35EF33@cs.usfca.edu>	<BANLkTik_x_TP-_tPoSsShFzqY7PpCSz8XQ@mail.gmail.com>	<D5D1BAF3-F598-4B83-87EC-C3DA8DF934F5@cs.usfca.edu>	<02eb01cbf2ed$84ee93f0$8ecbbbd0$@pixelminegames.com>	<4C41CCF8-5BFD-4B59-B7AE-D35C8975AC97@cs.usfca.edu>
	<BANLkTikJbfJujd39ZPKWUmfqqANmUD73BA@mail.gmail.com>
	<02f401cbf2f4$f9d13310$ed739930$@pixelminegames.com>
Message-ID: <EFAAA931-BE3C-48A3-AC49-C1D031832CCF@buhacoff.net>

You could take that idea even further and only escape "" if it's on a line by itself or followed only by whitespace.

t() ::= "" 
System.out.println("no need to escape double quotes");
No need to escape double-double quotes ("") either unless they are on a line by themselves:
\""
""

Jonathan

On Apr 4, 2011, at 9:20 PM, Sam Harwell wrote:

> That was my concern.
>  
> Thinking about it more, it seems you shouldn?t need to escape the quotes unless there are two of them, in which case you could use "\" to produce two sequential quotes in the output.
>  
> Sam
>  
> From: stringtemplate-interest-bounces at antlr.org [mailto:stringtemplate-interest-bounces at antlr.org] On Behalf Of Collin Fagan
> Sent: Monday, April 04, 2011 1:03 PM
> To: Terence Parr
> Cc: stringtemplate-interest List
> Subject: Re: [stringtemplate-interest] proposed "ignore newlines" template syntax
>  
> Will using "" require people to escape a single " in a template?
> 
> t() ::= "" 
> System.out.println(\"hi\");
> ""
> Collin
> 
>  
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20110404/d7036f05/attachment.html 

From parrt at cs.usfca.edu  Mon Apr  4 16:07:13 2011
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon, 4 Apr 2011 16:07:13 -0700
Subject: [stringtemplate-interest] proposed "ignore newlines"
	template	syntax
In-Reply-To: <EFAAA931-BE3C-48A3-AC49-C1D031832CCF@buhacoff.net>
References: <E7535CD8-EC92-4D6C-A15C-CA951BAFA5F1@cs.usfca.edu>	<BANLkTinWkQ4nZX6j49ZaNamr7H8dX42fXw@mail.gmail.com>	<D9A25C81-601C-43AA-A71D-1C80CB35EF33@cs.usfca.edu>	<BANLkTik_x_TP-_tPoSsShFzqY7PpCSz8XQ@mail.gmail.com>	<D5D1BAF3-F598-4B83-87EC-C3DA8DF934F5@cs.usfca.edu>	<02eb01cbf2ed$84ee93f0$8ecbbbd0$@pixelminegames.com>	<4C41CCF8-5BFD-4B59-B7AE-D35C8975AC97@cs.usfca.edu>
	<BANLkTikJbfJujd39ZPKWUmfqqANmUD73BA@mail.gmail.com>
	<02f401cbf2f4$f9d13310$ed739930$@pixelminegames.com>
	<EFAAA931-BE3C-48A3-AC49-C1D031832CCF@buhacoff.net>
Message-ID: <7583F602-6BE6-4428-9085-70568BED569C@cs.usfca.edu>

interesting.  hmm...antlr's lexers kinda suck at these complicated tokens...let me see what i can implement.
Ter
On Apr 4, 2011, at 12:24 PM, Jonathan Buhacoff wrote:

> You could take that idea even further and only escape "" if it's on a line by itself or followed only by whitespace.
> 
> t() ::= "" 
> System.out.println("no need to escape double quotes");
> No need to escape double-double quotes ("") either unless they are on a line by themselves:
> \""
> ""
> 
> Jonathan
> 
> On Apr 4, 2011, at 9:20 PM, Sam Harwell wrote:
> 
>> That was my concern.
>>  
>> Thinking about it more, it seems you shouldn?t need to escape the quotes unless there are two of them, in which case you could use "\" to produce two sequential quotes in the output.
>>  
>> Sam
>>  
>> From: stringtemplate-interest-bounces at antlr.org [mailto:stringtemplate-interest-bounces at antlr.org] On Behalf Of Collin Fagan
>> Sent: Monday, April 04, 2011 1:03 PM
>> To: Terence Parr
>> Cc: stringtemplate-interest List
>> Subject: Re: [stringtemplate-interest] proposed "ignore newlines" template syntax
>>  
>> Will using "" require people to escape a single " in a template?
>> 
>> t() ::= "" 
>> System.out.println(\"hi\");
>> ""
>> Collin
>> 
>>  
>> _______________________________________________
>> stringtemplate-interest mailing list
>> stringtemplate-interest at antlr.org
>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
> 
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest


From parrt at cs.usfca.edu  Mon Apr  4 16:43:55 2011
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon, 4 Apr 2011 16:43:55 -0700
Subject: [stringtemplate-interest] ST4: Five tests for the test suite
	fail
In-Reply-To: <6DF44496-F7BE-485C-B6E8-B3CA153604C8@abego-software.de>
References: <6DF44496-F7BE-485C-B6E8-B3CA153604C8@abego-software.de>
Message-ID: <C4CDCE85-AAEB-41A9-A4B6-418ADB15DE50@cs.usfca.edu>

Hi. Yep,I have a few unit tests that fail; I believe these are because they track character positions incorrectly. Decided not to worry about them the moment.
Ter
On Mar 29, 2011, at 2:18 AM, Udo Borkowski wrote:

> I used the ST4 test cases provided on Github and ran them from within Eclipse.
> 
> Much to my surprise 5 failures are reported.
> 
> Find attached a commented list of these failures.
> 
> Udo
> 
> 
> 
> ===========================================================================
> org.stringtemplate.v4.test.TestRenderers.testRendererWithPredefinedFormat2
> 
> ---------
> org.junit.ComparisonFailure: expected:<...5, 2005 12:00:00 AM [PD]T > but was:<...5, 2005 12:00:00 AM [CES]T >
> 	at org.junit.Assert.assertEquals(Assert.java:123)
> 	at org.junit.Assert.assertEquals(Assert.java:145)
> 	at org.stringtemplate.v4.test.TestRenderers.testRendererWithPredefinedFormat2(TestRenderers.java:90)
> 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
> 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
> 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
> 	at java.lang.reflect.Method.invoke(Method.java:597)
> 	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:44)
> 	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
> 	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:41)
> 	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)
> 	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:28)
> 	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:76)
> 	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)
> 	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:193)
> 	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:52)
> 	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:191)
> 	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:42)
> 	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:184)
> 	at org.junit.runners.ParentRunner.run(ParentRunner.java:236)
> 	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:49)
> 	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
> 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467)
> 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683)
> 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390)
> 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197)
> ------
> Problem already reported in private mail in August 2010, together with possible solution: 
> 
>> TestRenderers.testRendererWithPredefinedFormat2 failed.
>> - actual: "datetime: Tuesday, July 5, 2005 12:00:00 AM CEST"
>> - expect: "datetime: Tuesday, July 5, 2005 12:00:00 AM PDT"
>> 
>> Resolution: explicitly set the timezone to PDT:
>> 
>>    @Test public void testRendererWithPredefinedFormat2() throws Exception {
>>        String templates =
>>                "dateThing(created) ::= << datetime: <created; format=\"full\"> >>\n";
>>        writeFile(tmpdir, "t.stg", templates);
>>        org.stringtemplate.v4.STGroup group = new org.stringtemplate.v4.STGroupFile(tmpdir+"/t.stg");
>>        group.registerRenderer(GregorianCalendar.class, new org.stringtemplate.v4.DateRenderer());
>>        org.stringtemplate.v4.ST st = group.getInstanceOf("dateThing");
>>        TimeZone origTimeZone = TimeZone.getDefault();
>>        try {
>>        	// set Timezone to "PDT"
>>        	TimeZone.setDefault(TimeZone.getTimeZone("America/Los_Angeles"));
>>        	st.add("created", new GregorianCalendar(2005, 07-1, 05));
>>        	String expecting = " datetime: Tuesday, July 5, 2005 12:00:00 AM PDT ";
>>        	String result = st.render();
>>            assertEquals(expecting, result);
>>        } finally {
>>        	// Restore original Timezone
>>        	TimeZone.setDefault(origTimeZone);
>>        }
>>    }
> 
> 
> ===========================================================================
> org.stringtemplate.v4.test.TestRenderers.testLocaleWithNumberRenderer
> 
> -----------
> org.junit.ComparisonFailure: expected:< -2[?]100 3,142 > but was:< -2[ ]100 3,142 >
> 	at org.junit.Assert.assertEquals(Assert.java:123)
> 	at org.junit.Assert.assertEquals(Assert.java:145)
> 	at org.stringtemplate.v4.test.TestRenderers.testLocaleWithNumberRenderer(TestRenderers.java:180)
> 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
> 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
> 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
> 	at java.lang.reflect.Method.invoke(Method.java:597)
> 	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:44)
> 	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
> 	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:41)
> 	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)
> 	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:28)
> 	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:76)
> 	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)
> 	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:193)
> 	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:52)
> 	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:191)
> 	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:42)
> 	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:184)
> 	at org.junit.runners.ParentRunner.run(ParentRunner.java:236)
> 	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:49)
> 	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
> 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467)
> 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683)
> 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390)
> 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197)
> -------
> Encoding issue? see previous mail
> 
> 
> ===========================================================================
> org.stringtemplate.v4.test.TestWhitespace.testTabBeforeEndInSubtemplates
> 
> ------------
> org.junit.ComparisonFailure: expected:<    [Ter
>     Tom
> ]    Sumana
> !> but was:<    [  Ter
>       Tom
>   ]    Sumana
> !>
> 	at org.junit.Assert.assertEquals(Assert.java:123)
> 	at org.junit.Assert.assertEquals(Assert.java:145)
> 	at org.stringtemplate.v4.test.TestWhitespace.testTabBeforeEndInSubtemplates(TestWhitespace.java:149)
> 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
> 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
> 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
> 	at java.lang.reflect.Method.invoke(Method.java:597)
> 	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:44)
> 	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
> 	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:41)
> 	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)
> 	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:28)
> 	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:76)
> 	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)
> 	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:193)
> 	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:52)
> 	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:191)
> 	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:42)
> 	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:184)
> 	at org.junit.runners.ParentRunner.run(ParentRunner.java:236)
> 	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:49)
> 	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
> 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467)
> 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683)
> 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390)
> 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197)
> -------
> Method starts with comment "// fails since it counts indent from outer too". 
> What does this mean? 
> Why not just correct the expected string?
> 
> ===========================================================================
> org.stringtemplate.v4.test.TestGroups.testMissingNamedArg
> 
> ---------------
> org.junit.ComparisonFailure: expected:<group.stg 2:[29]: mismatched input '...> but was:<group.stg 2:[18]: mismatched input '...>
> 	at org.junit.Assert.assertEquals(Assert.java:123)
> 	at org.junit.Assert.assertEquals(Assert.java:145)
> 	at org.stringtemplate.v4.test.TestGroups.testMissingNamedArg(TestGroups.java:555)
> 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
> 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
> 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
> 	at java.lang.reflect.Method.invoke(Method.java:597)
> 	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:44)
> 	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
> 	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:41)
> 	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)
> 	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:28)
> 	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:76)
> 	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)
> 	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:193)
> 	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:52)
> 	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:191)
> 	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:42)
> 	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:184)
> 	at org.junit.runners.ParentRunner.run(ParentRunner.java:236)
> 	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:49)
> 	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
> 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467)
> 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683)
> 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390)
> 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197)
> -------
> looks like the expected string is wrong, there is no character 29 in the template:
>  "g() ::= \"<f(x={a},{b})>\"";
> //01234567890123456789
> 
> Actually I had expected 2:19 (not 2:18, which is the comma)
> 
> 
> ===========================================================================
> org.stringtemplate.v4.test.TestRegions.testUnknownRegionDefError
> 
> --------------
> org.junit.ComparisonFailure: expected:<g.stg [4:3]: template a doesn't...> but was:<g.stg [5:15]: template a doesn't...>
> 	at org.junit.Assert.assertEquals(Assert.java:123)
> 	at org.junit.Assert.assertEquals(Assert.java:145)
> 	at org.stringtemplate.v4.test.TestRegions.testUnknownRegionDefError(TestRegions.java:329)
> 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
> 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
> 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
> 	at java.lang.reflect.Method.invoke(Method.java:597)
> 	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:44)
> 	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
> 	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:41)
> 	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)
> 	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:28)
> 	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:76)
> 	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)
> 	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:193)
> 	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:52)
> 	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:191)
> 	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:42)
> 	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:184)
> 	at org.junit.runners.ParentRunner.run(ParentRunner.java:236)
> 	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:49)
> 	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
> 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467)
> 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683)
> 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390)
> 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197)
> ---------
> Looks like a wrong line and offset is given in the errors.
> 
> 
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest


From parrt at cs.usfca.edu  Mon Apr  4 16:49:55 2011
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon, 4 Apr 2011 16:49:55 -0700
Subject: [stringtemplate-interest] ST4: extra import
In-Reply-To: <B508E120-A6A6-4B3E-88B2-60E6D69E4B33@abego-software.de>
References: <B508E120-A6A6-4B3E-88B2-60E6D69E4B33@abego-software.de>
Message-ID: <0249137C-931C-4FBE-B485-87B9F08A59D6@cs.usfca.edu>

fixed.
Ter
On Mar 28, 2011, at 10:30 PM, Udo Borkowski wrote:

> in TestSubtemplates.java there is an extra import
> 
> import com.sun.xml.internal.bind.v2.runtime.unmarshaller.Intercepter;
> 
> 
> Udo
> 
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest


From parrt at cs.usfca.edu  Mon Apr  4 17:04:32 2011
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon, 4 Apr 2011 17:04:32 -0700
Subject: [stringtemplate-interest] ST4: Possible NullPointerException or
	redundant check in CompiledST.getTemplateRange
In-Reply-To: <9E9DA8D5-E426-4D0C-A7E2-38226AF71706@abego-software.de>
References: <9E9DA8D5-E426-4D0C-A7E2-38226AF71706@abego-software.de>
Message-ID: <A93F2F45-914C-48C3-A249-088BC5166C48@cs.usfca.edu>

good point. it can't be null really ever. removed.
Ter
On Mar 31, 2011, at 2:29 AM, Udo Borkowski wrote:

> CompiledST contains this method:
> 
> 	public Interval getTemplateRange() {
> 		if ( isAnonSubtemplate ) {
> 			Interval start = sourceMap[0];
> 			Interval stop = null;
> 			for (int i = sourceMap.length-1; i>=0; i--) {
> 				Interval I = sourceMap[i];
> 				if ( I!=null ) {
> 					stop = I;
> 					break;
> 				}
> 			}
> 			if ( template!=null ) return new Interval(start.a, stop.b); // (1)
> 		}
> 		return new Interval(0, template.length()-1); // (2)
> 	}
> 
> Assume isAnonSubtemplate is true.
> 
> At (1) there is a check for template!=null . 
> I.e. when template is not null the method returns at (1).
> When template is null the execution continues at (2).
> 
> However the statement at (2) contains the expression template.length() , i.e. it access the template member. As template is null this will lead to a NullPointerException.
> 
> I haven't run into this NPE yet. Maybe template is never null when isAnonSubtemplate is true. In that case the check 
> 
> 	if ( template!=null ) 
> 
> is redundant and can be removed.
> 
> If template can be null when  isAnonSubtemplate is true the code at (2) needs to be changed to avoid the NPE.
> 
> 
> Udo
> 
> 
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest


From parrt at cs.usfca.edu  Mon Apr  4 17:07:26 2011
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon, 4 Apr 2011 17:07:26 -0700
Subject: [stringtemplate-interest] ST4: *.class files checked in in
	github
In-Reply-To: <1BC8C057-48A2-4750-B163-A7E4016498E6@abego-software.de>
References: <1BC8C057-48A2-4750-B163-A7E4016498E6@abego-software.de>
Message-ID: <CE7BC00D-913A-4B4B-B94C-7726D9C1D3AD@cs.usfca.edu>

removed.
thanks,
Ter
On Mar 28, 2011, at 11:49 PM, Udo Borkowski wrote:

> On github the sub packages
> 
> 	src/org/stringtemplate/v4/debug
> 	src/org/stringtemplate/v4/gui
> 	src/org/stringtemplate/v4/misc
> 
> also contain the compiled *.class files.
> 
> As they are derived files they should not be included in version control.
> 
> Udo
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest


From parrt at cs.usfca.edu  Mon Apr  4 17:11:57 2011
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon, 4 Apr 2011 17:11:57 -0700
Subject: [stringtemplate-interest] Check attribute list length or empty
	list
In-Reply-To: <BE9946EC-57B8-446F-B089-4F07BD69A673@abego-software.de>
References: <834890.82124.qm@web113415.mail.gq1.yahoo.com>
	<BE9946EC-57B8-446F-B089-4F07BD69A673@abego-software.de>
Message-ID: <6CDE98A3-407E-4AA2-B24E-9E0D1D1CC9DA@cs.usfca.edu>

done. updated doc.
Ter
On Mar 30, 2011, at 12:08 AM, Udo Borkowski wrote:

> the following template will emit the expected result (i.e. only write the "select" when there are items in column):
> 
> $if(column)$
>     select $column; separator=","$
> $endif$
> 
> (in StringTemplate 4.0, not sure about older versions)
> 
> @Ter: you may want to update the ST4 documentation at http://www.antlr.org/wiki/display/ST4/Templates#Templates-conditionals: beside the stuff you mention ST4 also returns false for empty lists and maps as well a "empty" iterators (see Interpreter.testAttributeTrue).
> 
> Udo
> 
> 
> 
> On 30.03.2011, at 05:48, guk guk wrote:
> 
>> Hi !
>> 
>> I'm trying to check the length of the column list but it keep throwing an error.
>> How to check if an attribute has value on it or not ?
>>   
>> $if(length(strip(column)) >  0)
>>                 select $column; separator=\",\"$
>>  $endif$
>> 
>> Thanks for your help 
>> 
>> _______________________________________________
>> stringtemplate-interest mailing list
>> stringtemplate-interest at antlr.org
>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
> 
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest


From parrt at cs.usfca.edu  Mon Apr  4 17:14:06 2011
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon, 4 Apr 2011 17:14:06 -0700
Subject: [stringtemplate-interest] ST4: What encoding is used for the
	Java files
In-Reply-To: <D2837EB7-DAF0-4AC3-8684-ABC5D4644CD0@abego-software.de>
References: <1C656667-2D3E-48A7-98B7-511DBF9BD0A2@abego-software.de>
	<D2837EB7-DAF0-4AC3-8684-ABC5D4644CD0@abego-software.de>
Message-ID: <A459FF1A-3B38-4A91-B111-7C96CA889D56@cs.usfca.edu>

made it:

        // Polish uses ' ' (ASCII 160) for ',' and ',' for '.'
        String expecting = "-2\u00A0100 3,142";

Ter

On Mar 29, 2011, at 2:37 AM, Udo Borkowski wrote:

> Maybe a better way to write the expected string in TestRenderers.testLocaleWithNumberRenderer is to use the "\u?." notation in the string rather than typing the non-ascii character directly. 
> 
> This way we don't have to deal with encoding of Java files.
> 
> This would look like:
> 
>         String expecting = " -2\u00A0100 3,142 "; // Unicode 00A0: NO-BREAK SPACE
> 
> 
> Udo
> 
> On 29.03.2011, at 10:47, Udo Borkowski wrote:
> 
>> TestRenderers.testLocaleWithNumberRenderer contains a non-ASCII chars (>127) in the 'expecting' string.
>> 
>> Using the UTF-8 encoding for the Java file results in a failure in the assertEquals, also ISO-8859-1 and ISO 8859-15.
>> 
>> What encoding is used for the Java files?
>> 
>> 
>> Udo
>> 
>> P.S.: I got the files from github.
>> 
>> _______________________________________________
>> stringtemplate-interest mailing list
>> stringtemplate-interest at antlr.org
>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
> 
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest


From parrt at cs.usfca.edu  Mon Apr  4 17:21:46 2011
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon, 4 Apr 2011 17:21:46 -0700
Subject: [stringtemplate-interest] "".."" won't work
Message-ID: <720BE9AD-EC47-453A-A9DE-E48AE4380BD1@cs.usfca.edu>

t() ::= "" is an empty template. can't use that.

maybe triple single?

t() ::= '''
...
'''
too close to single double-quotes. grrrr...

Scriptlets in JSP/ASP are: <% ..%>

t() ::= <%
...
%>

might be mo' better.  no escaping required and says "script" more than template. what do you think?

Ter

From sharwell at pixelminegames.com  Mon Apr  4 18:05:06 2011
From: sharwell at pixelminegames.com (Sam Harwell)
Date: Mon, 4 Apr 2011 20:05:06 -0500
Subject: [stringtemplate-interest] "".."" won't work
In-Reply-To: <720BE9AD-EC47-453A-A9DE-E48AE4380BD1@cs.usfca.edu>
References: <720BE9AD-EC47-453A-A9DE-E48AE4380BD1@cs.usfca.edu>
Message-ID: <032201cbf32d$810e0a50$832a1ef0$@pixelminegames.com>

I guess with <%..%>, the escape character is still \>?

This should work fine.

Sam

-----Original Message-----
From: stringtemplate-interest-bounces at antlr.org
[mailto:stringtemplate-interest-bounces at antlr.org] On Behalf Of Terence Parr
Sent: Monday, April 04, 2011 7:22 PM
To: stringtemplate-interest List
Subject: [stringtemplate-interest] "".."" won't work

t() ::= "" is an empty template. can't use that.

maybe triple single?

t() ::= '''
...
'''
too close to single double-quotes. grrrr...

Scriptlets in JSP/ASP are: <% ..%>

t() ::= <%
...
%>

might be mo' better.  no escaping required and says "script" more than
template. what do you think?

Ter
_______________________________________________
stringtemplate-interest mailing list
stringtemplate-interest at antlr.org
http://www.antlr.org/mailman/listinfo/stringtemplate-interest


From parrt at cs.usfca.edu  Mon Apr  4 18:07:26 2011
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon, 4 Apr 2011 18:07:26 -0700
Subject: [stringtemplate-interest] "".."" won't work
In-Reply-To: <032201cbf32d$810e0a50$832a1ef0$@pixelminegames.com>
References: <720BE9AD-EC47-453A-A9DE-E48AE4380BD1@cs.usfca.edu>
	<032201cbf32d$810e0a50$832a1ef0$@pixelminegames.com>
Message-ID: <96E67EEF-7B73-4A1D-A621-36CD746EA61E@cs.usfca.edu>


On Apr 4, 2011, at 6:05 PM, Sam Harwell wrote:

> I guess with <%..%>, the escape character is still \>?
> 
> This should work fine.

Well, shouldn't need any escape really...should be \%?
Ter

From sharwell at pixelminegames.com  Mon Apr  4 18:39:43 2011
From: sharwell at pixelminegames.com (Sam Harwell)
Date: Mon, 4 Apr 2011 20:39:43 -0500
Subject: [stringtemplate-interest] "".."" won't work
In-Reply-To: <96E67EEF-7B73-4A1D-A621-36CD746EA61E@cs.usfca.edu>
References: <720BE9AD-EC47-453A-A9DE-E48AE4380BD1@cs.usfca.edu>	<032201cbf32d$810e0a50$832a1ef0$@pixelminegames.com>
	<96E67EEF-7B73-4A1D-A621-36CD746EA61E@cs.usfca.edu>
Message-ID: <032301cbf332$5708a5d0$0519f170$@pixelminegames.com>

If you want to emit the literal %> in the output, you can write it as %\>,
using the existing escape sequence without breaking anything.

Sam

-----Original Message-----
From: stringtemplate-interest-bounces at antlr.org
[mailto:stringtemplate-interest-bounces at antlr.org] On Behalf Of Terence Parr
Sent: Monday, April 04, 2011 8:07 PM
To: stringtemplate-interest List
Subject: Re: [stringtemplate-interest] "".."" won't work


On Apr 4, 2011, at 6:05 PM, Sam Harwell wrote:

> I guess with <%..%>, the escape character is still \>?
> 
> This should work fine.

Well, shouldn't need any escape really...should be \%?
Ter
_______________________________________________
stringtemplate-interest mailing list
stringtemplate-interest at antlr.org
http://www.antlr.org/mailman/listinfo/stringtemplate-interest


From collin.fagan at gmail.com  Mon Apr  4 19:29:23 2011
From: collin.fagan at gmail.com (Collin Fagan)
Date: Mon, 4 Apr 2011 21:29:23 -0500
Subject: [stringtemplate-interest] "".."" won't work
In-Reply-To: <032301cbf332$5708a5d0$0519f170$@pixelminegames.com>
References: <720BE9AD-EC47-453A-A9DE-E48AE4380BD1@cs.usfca.edu>
	<032201cbf32d$810e0a50$832a1ef0$@pixelminegames.com>
	<96E67EEF-7B73-4A1D-A621-36CD746EA61E@cs.usfca.edu>
	<032301cbf332$5708a5d0$0519f170$@pixelminegames.com>
Message-ID: <BANLkTik1JER1vqNzQTW--QqvyefhuTW84w@mail.gmail.com>

I have no problem with <%...%> but that eliminates one character available
as a valid delimiters right?

I can't set the starting and ending delimiters to '%' and have %%...%% can
I?

Collin

On Mon, Apr 4, 2011 at 8:39 PM, Sam Harwell <sharwell at pixelminegames.com>wrote:

> If you want to emit the literal %> in the output, you can write it as %\>,
> using the existing escape sequence without breaking anything.
>
> Sam
>
> -----Original Message-----
> From: stringtemplate-interest-bounces at antlr.org
> [mailto:stringtemplate-interest-bounces at antlr.org] On Behalf Of Terence
> Parr
> Sent: Monday, April 04, 2011 8:07 PM
> To: stringtemplate-interest List
> Subject: Re: [stringtemplate-interest] "".."" won't work
>
>
> On Apr 4, 2011, at 6:05 PM, Sam Harwell wrote:
>
> > I guess with <%..%>, the escape character is still \>?
> >
> > This should work fine.
>
> Well, shouldn't need any escape really...should be \%?
> Ter
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20110404/2a77d5e8/attachment-0001.html 

From sharwell at pixelminegames.com  Mon Apr  4 20:06:29 2011
From: sharwell at pixelminegames.com (Sam Harwell)
Date: Mon, 4 Apr 2011 22:06:29 -0500
Subject: [stringtemplate-interest] "".."" won't work
In-Reply-To: <BANLkTik1JER1vqNzQTW--QqvyefhuTW84w@mail.gmail.com>
References: <720BE9AD-EC47-453A-A9DE-E48AE4380BD1@cs.usfca.edu>	<032201cbf32d$810e0a50$832a1ef0$@pixelminegames.com>	<96E67EEF-7B73-4A1D-A621-36CD746EA61E@cs.usfca.edu>	<032301cbf332$5708a5d0$0519f170$@pixelminegames.com>
	<BANLkTik1JER1vqNzQTW--QqvyefhuTW84w@mail.gmail.com>
Message-ID: <032a01cbf33e$7698d300$63ca7900$@pixelminegames.com>

If you chose % as your delimiter, it would still be fine. The template
starts at <% and ends at %>.

 

<%%x%%>

 

Sam

 

From: Collin Fagan [mailto:collin.fagan at gmail.com] 
Sent: Monday, April 04, 2011 9:29 PM
To: Sam Harwell
Cc: Terence Parr; stringtemplate-interest List
Subject: Re: [stringtemplate-interest] "".."" won't work

 

I have no problem with <%...%> but that eliminates one character available
as a valid delimiters right?

I can't set the starting and ending delimiters to '%' and have %%...%% can
I?

Collin

On Mon, Apr 4, 2011 at 8:39 PM, Sam Harwell <sharwell at pixelminegames.com>
wrote:

If you want to emit the literal %> in the output, you can write it as %\>,
using the existing escape sequence without breaking anything.


Sam

-----Original Message-----
From: stringtemplate-interest-bounces at antlr.org
[mailto:stringtemplate-interest-bounces at antlr.org] On Behalf Of Terence Parr

Sent: Monday, April 04, 2011 8:07 PM
To: stringtemplate-interest List

Subject: Re: [stringtemplate-interest] "".."" won't work


On Apr 4, 2011, at 6:05 PM, Sam Harwell wrote:

> I guess with <%..%>, the escape character is still \>?
>
> This should work fine.

Well, shouldn't need any escape really...should be \%?
Ter
_______________________________________________
stringtemplate-interest mailing list
stringtemplate-interest at antlr.org
http://www.antlr.org/mailman/listinfo/stringtemplate-interest

_______________________________________________
stringtemplate-interest mailing list
stringtemplate-interest at antlr.org
http://www.antlr.org/mailman/listinfo/stringtemplate-interest

 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20110404/85f5c630/attachment.html 

From parrt at cs.usfca.edu  Mon Apr  4 21:14:46 2011
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon, 4 Apr 2011 21:14:46 -0700
Subject: [stringtemplate-interest] "".."" won't work
In-Reply-To: <BANLkTik1JER1vqNzQTW--QqvyefhuTW84w@mail.gmail.com>
References: <720BE9AD-EC47-453A-A9DE-E48AE4380BD1@cs.usfca.edu>
	<032201cbf32d$810e0a50$832a1ef0$@pixelminegames.com>
	<96E67EEF-7B73-4A1D-A621-36CD746EA61E@cs.usfca.edu>
	<032301cbf332$5708a5d0$0519f170$@pixelminegames.com>
	<BANLkTik1JER1vqNzQTW--QqvyefhuTW84w@mail.gmail.com>
Message-ID: <475D34C6-F794-4979-8049-FAB96310DCB6@cs.usfca.edu>


On Apr 4, 2011, at 7:29 PM, Collin Fagan wrote:

> I have no problem with <%...%> but that eliminates one character available as a valid delimiters right?
> 
> I can't set the starting and ending delimiters to '%' and have %%...%% can I?

true.  probably ok compromise.
T
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20110404/0a34fe0a/attachment.html 

From parrt at cs.usfca.edu  Mon Apr  4 21:15:06 2011
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon, 4 Apr 2011 21:15:06 -0700
Subject: [stringtemplate-interest] "".."" won't work
In-Reply-To: <032a01cbf33e$7698d300$63ca7900$@pixelminegames.com>
References: <720BE9AD-EC47-453A-A9DE-E48AE4380BD1@cs.usfca.edu>	<032201cbf32d$810e0a50$832a1ef0$@pixelminegames.com>	<96E67EEF-7B73-4A1D-A621-36CD746EA61E@cs.usfca.edu>	<032301cbf332$5708a5d0$0519f170$@pixelminegames.com>
	<BANLkTik1JER1vqNzQTW--QqvyefhuTW84w@mail.gmail.com>
	<032a01cbf33e$7698d300$63ca7900$@pixelminegames.com>
Message-ID: <4F284526-9AC3-449B-B577-00773FD3742F@cs.usfca.edu>

oh right.  might work.
Ter
On Apr 4, 2011, at 8:06 PM, Sam Harwell wrote:

> If you chose % as your delimiter, it would still be fine. The template starts at <% and ends at %>.
>  
> <%%x%%>
>  
> Sam
>  
> From: Collin Fagan [mailto:collin.fagan at gmail.com] 
> Sent: Monday, April 04, 2011 9:29 PM
> To: Sam Harwell
> Cc: Terence Parr; stringtemplate-interest List
> Subject: Re: [stringtemplate-interest] "".."" won't work
>  
> I have no problem with <%...%> but that eliminates one character available as a valid delimiters right?
> 
> I can't set the starting and ending delimiters to '%' and have %%...%% can I?
> 
> Collin
> 
> On Mon, Apr 4, 2011 at 8:39 PM, Sam Harwell <sharwell at pixelminegames.com> wrote:
> If you want to emit the literal %> in the output, you can write it as %\>,
> using the existing escape sequence without breaking anything.
> 
> Sam
> 
> -----Original Message-----
> From: stringtemplate-interest-bounces at antlr.org
> [mailto:stringtemplate-interest-bounces at antlr.org] On Behalf Of Terence Parr
> Sent: Monday, April 04, 2011 8:07 PM
> To: stringtemplate-interest List
> Subject: Re: [stringtemplate-interest] "".."" won't work
> 
> 
> On Apr 4, 2011, at 6:05 PM, Sam Harwell wrote:
> 
> > I guess with <%..%>, the escape character is still \>?
> >
> > This should work fine.
> 
> Well, shouldn't need any escape really...should be \%?
> Ter
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
> 
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>  

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20110404/ba1a72b5/attachment.html 

From ub at abego-software.de  Tue Apr  5 05:03:47 2011
From: ub at abego-software.de (Udo Borkowski)
Date: Tue, 5 Apr 2011 14:03:47 +0200
Subject: [stringtemplate-interest] "".."" won't work
In-Reply-To: <4F284526-9AC3-449B-B577-00773FD3742F@cs.usfca.edu>
References: <720BE9AD-EC47-453A-A9DE-E48AE4380BD1@cs.usfca.edu>	<032201cbf32d$810e0a50$832a1ef0$@pixelminegames.com>	<96E67EEF-7B73-4A1D-A621-36CD746EA61E@cs.usfca.edu>	<032301cbf332$5708a5d0$0519f170$@pixelminegames.com>
	<BANLkTik1JER1vqNzQTW--QqvyefhuTW84w@mail.gmail.com>
	<032a01cbf33e$7698d300$63ca7900$@pixelminegames.com>
	<4F284526-9AC3-449B-B577-00773FD3742F@cs.usfca.edu>
Message-ID: <0D3D1444-5569-4FA3-B4A3-AB7050B9ACC5@abego-software.de>

Following this thread makes me think if extending the syntax through new template delimiters ("", """, <% or whatsoever) is really a good idea. 

I assume we run into less problems (conflict with old syntax, escape issues etc.) with just sticking to the old ones ("?"  and <<?>>) and just add the optional "[?]" template prefix, as already suggested earlier.

t() ::= [?]<<
.
.
.
>>

Udo



On 05.04.2011, at 06:15, Terence Parr wrote:

> oh right.  might work.
> Ter
> On Apr 4, 2011, at 8:06 PM, Sam Harwell wrote:
> 
>> If you chose % as your delimiter, it would still be fine. The template starts at <% and ends at %>.
>>  
>> <%%x%%>
>>  
>> Sam
>>  
>> From: Collin Fagan [mailto:collin.fagan at gmail.com] 
>> Sent: Monday, April 04, 2011 9:29 PM
>> To: Sam Harwell
>> Cc: Terence Parr; stringtemplate-interest List
>> Subject: Re: [stringtemplate-interest] "".."" won't work
>>  
>> I have no problem with <%...%> but that eliminates one character available as a valid delimiters right?
>> 
>> I can't set the starting and ending delimiters to '%' and have %%...%% can I?
>> 
>> Collin
>> 
>> On Mon, Apr 4, 2011 at 8:39 PM, Sam Harwell <sharwell at pixelminegames.com> wrote:
>> If you want to emit the literal %> in the output, you can write it as %\>,
>> using the existing escape sequence without breaking anything.
>> 
>> Sam
>> 
>> -----Original Message-----
>> From: stringtemplate-interest-bounces at antlr.org
>> [mailto:stringtemplate-interest-bounces at antlr.org] On Behalf Of Terence Parr
>> Sent: Monday, April 04, 2011 8:07 PM
>> To: stringtemplate-interest List
>> Subject: Re: [stringtemplate-interest] "".."" won't work
>> 
>> 
>> On Apr 4, 2011, at 6:05 PM, Sam Harwell wrote:
>> 
>> > I guess with <%..%>, the escape character is still \>?
>> >
>> > This should work fine.
>> 
>> Well, shouldn't need any escape really...should be \%?
>> Ter
>> _______________________________________________
>> stringtemplate-interest mailing list
>> stringtemplate-interest at antlr.org
>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>> 
>> _______________________________________________
>> stringtemplate-interest mailing list
>> stringtemplate-interest at antlr.org
>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>>  
> 
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20110405/8c595bad/attachment-0001.html 

From parrt at cs.usfca.edu  Tue Apr  5 09:31:50 2011
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue, 5 Apr 2011 09:31:50 -0700
Subject: [stringtemplate-interest] "".."" won't work
In-Reply-To: <0D3D1444-5569-4FA3-B4A3-AB7050B9ACC5@abego-software.de>
References: <720BE9AD-EC47-453A-A9DE-E48AE4380BD1@cs.usfca.edu>	<032201cbf32d$810e0a50$832a1ef0$@pixelminegames.com>	<96E67EEF-7B73-4A1D-A621-36CD746EA61E@cs.usfca.edu>	<032301cbf332$5708a5d0$0519f170$@pixelminegames.com>
	<BANLkTik1JER1vqNzQTW--QqvyefhuTW84w@mail.gmail.com>
	<032a01cbf33e$7698d300$63ca7900$@pixelminegames.com>
	<4F284526-9AC3-449B-B577-00773FD3742F@cs.usfca.edu>
	<0D3D1444-5569-4FA3-B4A3-AB7050B9ACC5@abego-software.de>
Message-ID: <7016E1D8-9652-48B1-9C14-605C2138AE47@cs.usfca.edu>

yeah it was hassle flipping << >> to <% %> in Java.stg templates, though I'd need to insert [..] or whatever just the same.  still open for debate :)
T
On Apr 5, 2011, at 5:03 AM, Udo Borkowski wrote:

> Following this thread makes me think if extending the syntax through new template delimiters ("", """, <% or whatsoever) is really a good idea. 
> 
> I assume we run into less problems (conflict with old syntax, escape issues etc.) with just sticking to the old ones ("?"  and <<?>>) and just add the optional "[?]" template prefix, as already suggested earlier.
> 
> t() ::= [?]<<
> .
> .
> .
> >>
> 
> Udo
> 
> 
> 
> On 05.04.2011, at 06:15, Terence Parr wrote:
> 
>> oh right.  might work.
>> Ter
>> On Apr 4, 2011, at 8:06 PM, Sam Harwell wrote:
>> 
>>> If you chose % as your delimiter, it would still be fine. The template starts at <% and ends at %>.
>>>  
>>> <%%x%%>
>>>  
>>> Sam
>>>  
>>> From: Collin Fagan [mailto:collin.fagan at gmail.com] 
>>> Sent: Monday, April 04, 2011 9:29 PM
>>> To: Sam Harwell
>>> Cc: Terence Parr; stringtemplate-interest List
>>> Subject: Re: [stringtemplate-interest] "".."" won't work
>>>  
>>> I have no problem with <%...%> but that eliminates one character available as a valid delimiters right?
>>> 
>>> I can't set the starting and ending delimiters to '%' and have %%...%% can I?
>>> 
>>> Collin
>>> 
>>> On Mon, Apr 4, 2011 at 8:39 PM, Sam Harwell <sharwell at pixelminegames.com> wrote:
>>> If you want to emit the literal %> in the output, you can write it as %\>,
>>> using the existing escape sequence without breaking anything.
>>> 
>>> Sam
>>> 
>>> -----Original Message-----
>>> From: stringtemplate-interest-bounces at antlr.org
>>> [mailto:stringtemplate-interest-bounces at antlr.org] On Behalf Of Terence Parr
>>> Sent: Monday, April 04, 2011 8:07 PM
>>> To: stringtemplate-interest List
>>> Subject: Re: [stringtemplate-interest] "".."" won't work
>>> 
>>> 
>>> On Apr 4, 2011, at 6:05 PM, Sam Harwell wrote:
>>> 
>>> > I guess with <%..%>, the escape character is still \>?
>>> >
>>> > This should work fine.
>>> 
>>> Well, shouldn't need any escape really...should be \%?
>>> Ter
>>> _______________________________________________
>>> stringtemplate-interest mailing list
>>> stringtemplate-interest at antlr.org
>>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>>> 
>>> _______________________________________________
>>> stringtemplate-interest mailing list
>>> stringtemplate-interest at antlr.org
>>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>>>  
>> 
>> _______________________________________________
>> stringtemplate-interest mailing list
>> stringtemplate-interest at antlr.org
>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
> 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20110405/6e44cd29/attachment.html 

From ub at abego-software.de  Tue Apr  5 20:09:39 2011
From: ub at abego-software.de (Udo Borkowski)
Date: Wed, 6 Apr 2011 05:09:39 +0200
Subject: [stringtemplate-interest] "".."" won't work
In-Reply-To: <7016E1D8-9652-48B1-9C14-605C2138AE47@cs.usfca.edu>
References: <720BE9AD-EC47-453A-A9DE-E48AE4380BD1@cs.usfca.edu>	<032201cbf32d$810e0a50$832a1ef0$@pixelminegames.com>	<96E67EEF-7B73-4A1D-A621-36CD746EA61E@cs.usfca.edu>	<032301cbf332$5708a5d0$0519f170$@pixelminegames.com>
	<BANLkTik1JER1vqNzQTW--QqvyefhuTW84w@mail.gmail.com>
	<032a01cbf33e$7698d300$63ca7900$@pixelminegames.com>
	<4F284526-9AC3-449B-B577-00773FD3742F@cs.usfca.edu>
	<0D3D1444-5569-4FA3-B4A3-AB7050B9ACC5@abego-software.de>
	<7016E1D8-9652-48B1-9C14-605C2138AE47@cs.usfca.edu>
Message-ID: <C793665B-4331-4F21-8435-736958173177@abego-software.de>

Let's get back to the original issue: 
we want to make templates more readable that currently packed in one line (to avoid newline output):
> Here's a simple example:
> 
> ruleRef(rule,label,elementIndex,args,scope) ::= <<
> <if(label)><label>=<endif><if(scope)><scope:delegateName()>.<endif><rule.name>(<args; separator=", ">);
> >>
> 
Do we really need a new feature to achieve this? 
What about using stuff already implemented to improve readablity?

E.g. comments can be used to insert linebreaks that are visible in the template but not rendered:

ruleRef(rule,label,elementIndex,args,scope) ::= <<<!
!><if(label)><!
!><label>=<!
!><endif><!
!><if(scope)><!
!><scope:delegateName()>.<!
!><endif><!
!><rule.name>(<args; separator=", ">);
>>

With a proper syntax highlighting (which makes comments very "light") it becomes even more readable:

ruleRef(rule,label,elementIndex,args,scope) ::= <<<!
!><if(label)><!
!><label>=<!
!><endif><!
!><if(scope)><!
!><scope:delegateName()>.<!
!><endif><!
!><rule.name>(<args; separator=", ">);
>>

These comments can even be used to do indents, improving the readability again:

ruleRef(rule,label,elementIndex,args,scope) ::= <<<!
!><if(label)><!
    !><label>=<!
!><endif><!
!><if(scope)><!
    !><scope:delegateName()>.<!
!><endif><!
!><rule.name>(<args; separator=", ">);
>>
This final example looks very readable to me, even more readable than the template we would write with the suggested "newline eating" syntax:
> ruleRef(rule,label,elementIndex,args,scope) ::= <<<
> <if(label)>
> <label>=
> <endif>
> <if(scope)>
> <scope:delegateName()>.
> <endif>
> <rule.name>(<args; separator=", ">);
> >>>

Of cause this "comment formatting" involves a little more typing, but this can easily handled by any good editor (Ter: "... emacs is your friend ;)").

With this idea in mind, do we really need to add this "newline eating" feature? 

To me the benefit does not look that big. As I have not yet written any real long "one liners" I may not be the right person to judge this, so what do others think?

Implementing the "line eating" feature has quite its difficulties, as we noticed already. I have no doubt these issues can be solved, however I assume "StringTemplate's overall design simplicity" (Sam Harwell) will be bigger without it. 


Udo

On 05.04.2011, at 18:31, Terence Parr wrote:

> yeah it was hassle flipping << >> to <% %> in Java.stg templates, though I'd need to insert [..] or whatever just the same.  still open for debate :)
> T
> On Apr 5, 2011, at 5:03 AM, Udo Borkowski wrote:
> 
>> Following this thread makes me think if extending the syntax through new template delimiters ("", """, <% or whatsoever) is really a good idea. 
>> 
>> I assume we run into less problems (conflict with old syntax, escape issues etc.) with just sticking to the old ones ("?"  and <<?>>) and just add the optional "[?]" template prefix, as already suggested earlier.
>> 
>> t() ::= [?]<<
>> .
>> .
>> .
>> >>
>> 
>> Udo
>> 
>> 
>> 
>> On 05.04.2011, at 06:15, Terence Parr wrote:
>> 
>>> oh right.  might work.
>>> Ter
>>> On Apr 4, 2011, at 8:06 PM, Sam Harwell wrote:
>>> 
>>>> If you chose % as your delimiter, it would still be fine. The template starts at <% and ends at %>.
>>>>  
>>>> <%%x%%>
>>>>  
>>>> Sam
>>>>  
>>>> From: Collin Fagan [mailto:collin.fagan at gmail.com] 
>>>> Sent: Monday, April 04, 2011 9:29 PM
>>>> To: Sam Harwell
>>>> Cc: Terence Parr; stringtemplate-interest List
>>>> Subject: Re: [stringtemplate-interest] "".."" won't work
>>>>  
>>>> I have no problem with <%...%> but that eliminates one character available as a valid delimiters right?
>>>> 
>>>> I can't set the starting and ending delimiters to '%' and have %%...%% can I?
>>>> 
>>>> Collin
>>>> 
>>>> On Mon, Apr 4, 2011 at 8:39 PM, Sam Harwell <sharwell at pixelminegames.com> wrote:
>>>> If you want to emit the literal %> in the output, you can write it as %\>,
>>>> using the existing escape sequence without breaking anything.
>>>> 
>>>> Sam
>>>> 
>>>> -----Original Message-----
>>>> From: stringtemplate-interest-bounces at antlr.org
>>>> [mailto:stringtemplate-interest-bounces at antlr.org] On Behalf Of Terence Parr
>>>> Sent: Monday, April 04, 2011 8:07 PM
>>>> To: stringtemplate-interest List
>>>> Subject: Re: [stringtemplate-interest] "".."" won't work
>>>> 
>>>> 
>>>> On Apr 4, 2011, at 6:05 PM, Sam Harwell wrote:
>>>> 
>>>> > I guess with <%..%>, the escape character is still \>?
>>>> >
>>>> > This should work fine.
>>>> 
>>>> Well, shouldn't need any escape really...should be \%?
>>>> Ter
>>>> _______________________________________________
>>>> stringtemplate-interest mailing list
>>>> stringtemplate-interest at antlr.org
>>>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>>>> 
>>>> _______________________________________________
>>>> stringtemplate-interest mailing list
>>>> stringtemplate-interest at antlr.org
>>>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>>>>  
>>> 
>>> _______________________________________________
>>> stringtemplate-interest mailing list
>>> stringtemplate-interest at antlr.org
>>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>> 
> 
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20110406/44eb0fa6/attachment.html 

From sharwell at pixelminegames.com  Tue Apr  5 21:24:34 2011
From: sharwell at pixelminegames.com (Sam Harwell)
Date: Tue, 5 Apr 2011 23:24:34 -0500
Subject: [stringtemplate-interest] "".."" won't work
In-Reply-To: <C793665B-4331-4F21-8435-736958173177@abego-software.de>
References: <720BE9AD-EC47-453A-A9DE-E48AE4380BD1@cs.usfca.edu>	<032201cbf32d$810e0a50$832a1ef0$@pixelminegames.com>	<96E67EEF-7B73-4A1D-A621-36CD746EA61E@cs.usfca.edu>	<032301cbf332$5708a5d0$0519f170$@pixelminegames.com>	<BANLkTik1JER1vqNzQTW--QqvyefhuTW84w@mail.gmail.com>	<032a01cbf33e$7698d300$63ca7900$@pixelminegames.com>	<4F284526-9AC3-449B-B577-00773FD3742F@cs.usfca.edu>	<0D3D1444-5569-4FA3-B4A3-AB7050B9ACC5@abego-software.de>	<7016E1D8-9652-48B1-9C14-605C2138AE47@cs.usfca.edu>
	<C793665B-4331-4F21-8435-736958173177@abego-software.de>
Message-ID: <000901cbf412$89293940$9b7babc0$@pixelminegames.com>

I still don't see how <% %> would lead to implementation or usage problems.
Can anyone give a concrete example where it breaks?

 

The comments suggestion is completely impractical for the size templates I
work with, even with syntax highlighting.

 

That said, I just realized that it might make sense for <% %> to drop INDENT
tokens as well, for the following reasons:

 

.         Indentation doesn't make sense for a single-line token.

.         If someone wanted to insert whitespace in the middle of a line in
a single-line template, it wouldn't be at the beginning of a line.

 

Sam

 

From: stringtemplate-interest-bounces at antlr.org
[mailto:stringtemplate-interest-bounces at antlr.org] On Behalf Of Udo
Borkowski
Sent: Tuesday, April 05, 2011 10:10 PM
To: Terence Parr
Cc: stringtemplate-interest List
Subject: Re: [stringtemplate-interest] "".."" won't work

 

Let's get back to the original issue: 

we want to make templates more readable that currently packed in one line
(to avoid newline output):

Here's a simple example:
 
ruleRef(rule,label,elementIndex,args,scope) ::= <<
<if(label)><label>=<endif><if(scope)><scope:delegateName()>.<endif><rule.nam
e>(<args; separator=", ">);
>> 
 

Do we really need a new feature to achieve this? 

What about using stuff already implemented to improve readablity?

 

E.g. comments can be used to insert linebreaks that are visible in the
template but not rendered:

 

ruleRef(rule,label,elementIndex,args,scope) ::= <<<!
!><if(label)><!
!><label>=<!
!><endif><!
!><if(scope)><!
!><scope:delegateName()>.<!
!><endif><!
!><rule.name>(<args; separator=", ">);
>> 
 
With a proper syntax highlighting (which makes comments very "light") it
becomes even more readable:
 
ruleRef(rule,label,elementIndex,args,scope) ::= <<<!
!><if(label)><!
!><label>=<!
!><endif><!
!><if(scope)><!
!><scope:delegateName()>.<!
!><endif><!
!><rule.name>(<args; separator=", ">);
>> 
 
These comments can even be used to do indents, improving the readability
again:
 
ruleRef(rule,label,elementIndex,args,scope) ::= <<<!
!><if(label)><!
    !><label>=<!
!><endif><!
!><if(scope)><!
    !><scope:delegateName()>.<!
!><endif><!
!><rule.name>(<args; separator=", ">);
>> 
This final example looks very readable to me, even more readable than the
template we would write with the suggested "newline eating" syntax:

ruleRef(rule,label,elementIndex,args,scope) ::= <<<
<if(label)>
<label>=
<endif>
<if(scope)>
<scope:delegateName()>.
<endif>
<rule.name>(<args; separator=", ">);
>>> 

Of cause this "comment formatting" involves a little more typing, but this
can easily handled by any good editor (Ter: "... emacs is your friend ;)").
 
With this idea in mind, do we really need to add this "newline eating"
feature? 
 
To me the benefit does not look that big. As I have not yet written any real
long "one liners" I may not be the right person to judge this, so what do
others think?
 
Implementing the "line eating" feature has quite its difficulties, as we
noticed already. I have no doubt these issues can be solved, however I
assume "StringTemplate's overall design simplicity" (Sam Harwell) will be
bigger without it. 
 
 
Udo
 

On 05.04.2011, at 18:31, Terence Parr wrote:





yeah it was hassle flipping << >> to <% %> in Java.stg templates, though I'd
need to insert [..] or whatever just the same.  still open for debate :)

T

On Apr 5, 2011, at 5:03 AM, Udo Borkowski wrote:





Following this thread makes me think if extending the syntax through new
template delimiters ("", """, <% or whatsoever) is really a good idea. 

 

I assume we run into less problems (conflict with old syntax, escape issues
etc.) with just sticking to the old ones ("."  and <<.>>) and just add the
optional "[.]" template prefix, as already suggested earlier.

 

t() ::= [.]<<

.

.

.

>> 

 

Udo

 

 

 

On 05.04.2011, at 06:15, Terence Parr wrote:





oh right.  might work.

Ter

On Apr 4, 2011, at 8:06 PM, Sam Harwell wrote:





If you chose % as your delimiter, it would still be fine. The template
starts at <% and ends at %>.

 

<%%x%%>

 

Sam

 

From: Collin Fagan [mailto:collin.fagan at gmail.com] 
Sent: Monday, April 04, 2011 9:29 PM
To: Sam Harwell
Cc: Terence Parr; stringtemplate-interest List
Subject: Re: [stringtemplate-interest] "".."" won't work

 

I have no problem with <%...%> but that eliminates one character available
as a valid delimiters right?

I can't set the starting and ending delimiters to '%' and have %%...%% can
I?

Collin

On Mon, Apr 4, 2011 at 8:39 PM, Sam Harwell <sharwell at pixelminegames.com>
wrote:

If you want to emit the literal %> in the output, you can write it as %\>,
using the existing escape sequence without breaking anything.


Sam

-----Original Message-----
From: stringtemplate-interest-bounces at antlr.org
[mailto:stringtemplate-interest-bounces at antlr.org] On Behalf Of Terence Parr

Sent: Monday, April 04, 2011 8:07 PM
To: stringtemplate-interest List

Subject: Re: [stringtemplate-interest] "".."" won't work


On Apr 4, 2011, at 6:05 PM, Sam Harwell wrote:

> I guess with <%..%>, the escape character is still \>?
>
> This should work fine.

Well, shouldn't need any escape really...should be \%?
Ter
_______________________________________________
stringtemplate-interest mailing list
stringtemplate-interest at antlr.org
http://www.antlr.org/mailman/listinfo/stringtemplate-interest

_______________________________________________
stringtemplate-interest mailing list
stringtemplate-interest at antlr.org
http://www.antlr.org/mailman/listinfo/stringtemplate-interest

 

 

_______________________________________________
stringtemplate-interest mailing list
stringtemplate-interest at antlr.org
http://www.antlr.org/mailman/listinfo/stringtemplate-interest

 

 

_______________________________________________
stringtemplate-interest mailing list
stringtemplate-interest at antlr.org
http://www.antlr.org/mailman/listinfo/stringtemplate-interest

 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20110405/bd9c987d/attachment-0001.html 

From parrt at cs.usfca.edu  Wed Apr  6 10:34:06 2011
From: parrt at cs.usfca.edu (Terence Parr)
Date: Wed, 6 Apr 2011 10:34:06 -0700
Subject: [stringtemplate-interest] "".."" won't work
In-Reply-To: <C793665B-4331-4F21-8435-736958173177@abego-software.de>
References: <720BE9AD-EC47-453A-A9DE-E48AE4380BD1@cs.usfca.edu>	<032201cbf32d$810e0a50$832a1ef0$@pixelminegames.com>	<96E67EEF-7B73-4A1D-A621-36CD746EA61E@cs.usfca.edu>	<032301cbf332$5708a5d0$0519f170$@pixelminegames.com>
	<BANLkTik1JER1vqNzQTW--QqvyefhuTW84w@mail.gmail.com>
	<032a01cbf33e$7698d300$63ca7900$@pixelminegames.com>
	<4F284526-9AC3-449B-B577-00773FD3742F@cs.usfca.edu>
	<0D3D1444-5569-4FA3-B4A3-AB7050B9ACC5@abego-software.de>
	<7016E1D8-9652-48B1-9C14-605C2138AE47@cs.usfca.edu>
	<C793665B-4331-4F21-8435-736958173177@abego-software.de>
Message-ID: <C25E9F8A-0F08-43D2-B413-23D0DD986BD0@cs.usfca.edu>

well,In that case we already have the <\\> "insert but ignore \n" feature. :)
TerOn Apr 5, 2011, at 8:09 PM, Udo Borkowski wrote:

> Let's get back to the original issue: 
> we want to make templates more readable that currently packed in one line (to avoid newline output):
>> Here's a simple example:
>> 
>> ruleRef(rule,label,elementIndex,args,scope) ::= <<
>> <if(label)><label>=<endif><if(scope)><scope:delegateName()>.<endif><
>> rule.name
>> >(<args; separator=", ">);
>> >>
>> 
>> 
> Do we really need a new feature to achieve this? 
> What about using stuff already implemented to improve readablity?
> 
> E.g. comments can be used to insert linebreaks that are visible in the template but not rendered:
> 
> ruleRef(rule,label,elementIndex,args,scope) ::= <<<!
> !><if(label)><!
> !><label>=<!
> !><endif><!
> !><if(scope)><!
> !><scope:delegateName()>.<!
> !><endif><!
> !><
> rule.name
> >(<args; separator=", ">);
> >>
> 
> 
> With a proper syntax highlighting (which makes comments very "light") it becomes even more readable:
> 
> ruleRef(rule,label,elementIndex,args,scope) ::= <<
> <!
> !>
> <if(label)>
> <!
> !>
> <label>=
> <!
> !>
> <endif>
> <!
> !>
> <if(scope)>
> <!
> !>
> <scope:delegateName()>.
> <!
> !>
> <endif>
> <!
> !>
> <rule.name
> >(<args; separator=", ">);
> >>
> 
> 
> These comments can even be used to do indents, improving the readability again:
> 
> ruleRef(rule,label,elementIndex,args,scope) ::= <<
> <!
> !>
> <if(label)>
> <!
>     !>
> <label>=
> <!
> !>
> <endif>
> <!
> !>
> <if(scope)>
> <!
>     !>
> <scope:delegateName()>.
> <!
> !>
> <endif>
> <!
> !>
> <rule.name
> >(<args; separator=", ">);
> >>
> 
> This final example looks very readable to me, even more readable than the template we would write with the suggested "newline eating" syntax:
>> ruleRef(rule,label,elementIndex,args,scope) ::= <<<
>> <if(label)>
>> <label>=
>> <endif>
>> <if(scope)>
>> <scope:delegateName()>.
>> <endif>
>> <
>> rule.name
>> >(<args; separator=", ">);
>> >>>
>> 
> Of cause this "comment formatting" involves a little more typing, but this can easily handled by any good editor (Ter: "... emacs is your friend ;)").
> 
> With this idea in mind, do we really need to add this "newline eating" feature? 
> 
> To me the benefit does not look that big. As I have not yet written any real long "one liners" I may not be the right person to judge this, so what do others think?
> 
> Implementing the "line eating" feature has quite its difficulties, as we noticed already. I have no doubt these issues can be solved, however I assume "StringTemplate's overall design simplicity" (Sam Harwell) will be bigger without it. 
> 
> 
> Udo
> 
> On 05.04.2011, at 18:31, Terence Parr wrote:
> 
>> yeah it was hassle flipping << >> to <% %> in Java.stg templates, though I'd need to insert [..] or whatever just the same.  still open for debate :)
>> T
>> On Apr 5, 2011, at 5:03 AM, Udo Borkowski wrote:
>> 
>>> Following this thread makes me think if extending the syntax through new template delimiters ("", """, <% or whatsoever) is really a good idea. 
>>> 
>>> I assume we run into less problems (conflict with old syntax, escape issues etc.) with just sticking to the old ones ("?"  and <<?>>) and just add the optional "[?]" template prefix, as already suggested earlier.
>>> 
>>> t() ::= [?]<<
>>> .
>>> .
>>> .
>>> >>
>>> 
>>> Udo
>>> 
>>> 
>>> 
>>> On 05.04.2011, at 06:15, Terence Parr wrote:
>>> 
>>>> oh right.  might work.
>>>> Ter
>>>> On Apr 4, 2011, at 8:06 PM, Sam Harwell wrote:
>>>> 
>>>>> If you chose % as your delimiter, it would still be fine. The template starts at <% and ends at %>.
>>>>>  
>>>>> <%%x%%>
>>>>>  
>>>>> Sam
>>>>>  
>>>>> From: Collin Fagan [mailto:collin.fagan at gmail.com] 
>>>>> Sent: Monday, April 04, 2011 9:29 PM
>>>>> To: Sam Harwell
>>>>> Cc: Terence Parr; stringtemplate-interest List
>>>>> Subject: Re: [stringtemplate-interest] "".."" won't work
>>>>>  
>>>>> I have no problem with <%...%> but that eliminates one character available as a valid delimiters right?
>>>>> 
>>>>> I can't set the starting and ending delimiters to '%' and have %%...%% can I?
>>>>> 
>>>>> Collin
>>>>> 
>>>>> On Mon, Apr 4, 2011 at 8:39 PM, Sam Harwell <sharwell at pixelminegames.com> wrote:
>>>>> If you want to emit the literal %> in the output, you can write it as %\>,
>>>>> using the existing escape sequence without breaking anything.
>>>>> 
>>>>> Sam
>>>>> 
>>>>> -----Original Message-----
>>>>> From: stringtemplate-interest-bounces at antlr.org
>>>>> [mailto:stringtemplate-interest-bounces at antlr.org] On Behalf Of Terence Parr
>>>>> Sent: Monday, April 04, 2011 8:07 PM
>>>>> To: stringtemplate-interest List
>>>>> Subject: Re: [stringtemplate-interest] "".."" won't work
>>>>> 
>>>>> 
>>>>> On Apr 4, 2011, at 6:05 PM, Sam Harwell wrote:
>>>>> 
>>>>> > I guess with <%..%>, the escape character is still \>?
>>>>> >
>>>>> > This should work fine.
>>>>> 
>>>>> Well, shouldn't need any escape really...should be \%?
>>>>> Ter
>>>>> _______________________________________________
>>>>> stringtemplate-interest mailing list
>>>>> stringtemplate-interest at antlr.org
>>>>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>>>>> 
>>>>> _______________________________________________
>>>>> stringtemplate-interest mailing list
>>>>> stringtemplate-interest at antlr.org
>>>>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>>>>>  
>>>> 
>>>> _______________________________________________
>>>> stringtemplate-interest mailing list
>>>> stringtemplate-interest at antlr.org
>>>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>>> 
>> 
>> _______________________________________________
>> stringtemplate-interest mailing list
>> stringtemplate-interest at antlr.org
>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
> 
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest


From parrt at cs.usfca.edu  Wed Apr  6 10:35:46 2011
From: parrt at cs.usfca.edu (Terence Parr)
Date: Wed, 6 Apr 2011 10:35:46 -0700
Subject: [stringtemplate-interest] "".."" won't work
In-Reply-To: <000901cbf412$89293940$9b7babc0$@pixelminegames.com>
References: <720BE9AD-EC47-453A-A9DE-E48AE4380BD1@cs.usfca.edu>	<032201cbf32d$810e0a50$832a1ef0$@pixelminegames.com>	<96E67EEF-7B73-4A1D-A621-36CD746EA61E@cs.usfca.edu>	<032301cbf332$5708a5d0$0519f170$@pixelminegames.com>	<BANLkTik1JER1vqNzQTW--QqvyefhuTW84w@mail.gmail.com>	<032a01cbf33e$7698d300$63ca7900$@pixelminegames.com>	<4F284526-9AC3-449B-B577-00773FD3742F@cs.usfca.edu>	<0D3D1444-5569-4FA3-B4A3-AB7050B9ACC5@abego-software.de>	<7016E1D8-9652-48B1-9C14-605C2138AE47@cs.usfca.edu>
	<C793665B-4331-4F21-8435-736958173177@abego-software.de>
	<000901cbf412$89293940$9b7babc0$@pixelminegames.com>
Message-ID: <A5E37D65-5581-4FCE-81EC-2A371A2505AA@cs.usfca.edu>

Yeah,That is what I was thinking before. Ignoring indentation, particularly in front of conditionals seems reasonable. On the other hand what about indentation in front of text?

t() ::= <%
	start
	<if(x)>
		<x>
		foo
	<endif>
	end
%>

 should all that be ignored as equivalent to:

t() ::= <%
start
<if(x)>
<x>
foo
endif>
end
%>

I like the idea of throwing away indentation in front of conditionals; not sure about in front of text, but probably should for consistency.

T

On Apr 5, 2011, at 9:24 PM, Sam Harwell wrote:

> I still don?t see how <% %> would lead to implementation or usage problems. Can anyone give a concrete example where it breaks?
>  
> The comments suggestion is completely impractical for the size templates I work with, even with syntax highlighting.
>  
> That said, I just realized that it might make sense for <% %> to drop INDENT tokens as well, for the following reasons:
>  
> ?         Indentation doesn?t make sense for a single-line token.
> ?         If someone wanted to insert whitespace in the middle of a line in a single-line template, it wouldn?t be at the beginning of a line.
>  
> Sam
>  
> From: stringtemplate-interest-bounces at antlr.org [mailto:stringtemplate-interest-bounces at antlr.org] On Behalf Of Udo Borkowski
> Sent: Tuesday, April 05, 2011 10:10 PM
> To: Terence Parr
> Cc: stringtemplate-interest List
> Subject: Re: [stringtemplate-interest] "".."" won't work
>  
> Let's get back to the original issue: 
> we want to make templates more readable that currently packed in one line (to avoid newline output):
> Here's a simple example:
>  
> ruleRef(rule,label,elementIndex,args,scope) ::= <<
> <if(label)><label>=<endif><if(scope)><scope:delegateName()>.<endif><rule.name>(<args; separator=", ">);
> >> 
>  
> Do we really need a new feature to achieve this? 
> What about using stuff already implemented to improve readablity?
>  
> E.g. comments can be used to insert linebreaks that are visible in the template but not rendered:
>  
> ruleRef(rule,label,elementIndex,args,scope) ::= <<<!
> !><if(label)><!
> !><label>=<!
> !><endif><!
> !><if(scope)><!
> !><scope:delegateName()>.<!
> !><endif><!
> !><rule.name>(<args; separator=", ">);
> >> 
>  
> With a proper syntax highlighting (which makes comments very "light") it becomes even more readable:
>  
> ruleRef(rule,label,elementIndex,args,scope) ::= <<<!
> !><if(label)><!
> !><label>=<!
> !><endif><!
> !><if(scope)><!
> !><scope:delegateName()>.<!
> !><endif><!
> !><rule.name>(<args; separator=", ">);
> >> 
>  
> These comments can even be used to do indents, improving the readability again:
>  
> ruleRef(rule,label,elementIndex,args,scope) ::= <<<!
> !><if(label)><!
>     !><label>=<!
> !><endif><!
> !><if(scope)><!
>     !><scope:delegateName()>.<!
> !><endif><!
> !><rule.name>(<args; separator=", ">);
> >> 
> This final example looks very readable to me, even more readable than the template we would write with the suggested "newline eating" syntax:
> ruleRef(rule,label,elementIndex,args,scope) ::= <<<
> <if(label)>
> <label>=
> <endif>
> <if(scope)>
> <scope:delegateName()>.
> <endif>
> <rule.name>(<args; separator=", ">);
> >>> 
> Of cause this "comment formatting" involves a little more typing, but this can easily handled by any good editor (Ter: "... emacs is your friend ;)").
>  
> With this idea in mind, do we really need to add this "newline eating" feature? 
>  
> To me the benefit does not look that big. As I have not yet written any real long "one liners" I may not be the right person to judge this, so what do others think?
>  
> Implementing the "line eating" feature has quite its difficulties, as we noticed already. I have no doubt these issues can be solved, however I assume "StringTemplate's overall design simplicity" (Sam Harwell) will be bigger without it. 
>  
>  
> Udo
>  
> On 05.04.2011, at 18:31, Terence Parr wrote:
> 
> 
> yeah it was hassle flipping << >> to <% %> in Java.stg templates, though I'd need to insert [..] or whatever just the same.  still open for debate :)
> T
> On Apr 5, 2011, at 5:03 AM, Udo Borkowski wrote:
> 
> 
> Following this thread makes me think if extending the syntax through new template delimiters ("", """, <% or whatsoever) is really a good idea. 
>  
> I assume we run into less problems (conflict with old syntax, escape issues etc.) with just sticking to the old ones ("?"  and <<?>>) and just add the optional "[?]" template prefix, as already suggested earlier.
>  
> t() ::= [?]<<
> .
> .
> .
> >> 
>  
> Udo
>  
>  
>  
> On 05.04.2011, at 06:15, Terence Parr wrote:
> 
> 
> oh right.  might work.
> Ter
> On Apr 4, 2011, at 8:06 PM, Sam Harwell wrote:
> 
> 
> If you chose % as your delimiter, it would still be fine. The template starts at <% and ends at %>.
>  
> <%%x%%>
>  
> Sam
>  
> From: Collin Fagan [mailto:collin.fagan at gmail.com] 
> Sent: Monday, April 04, 2011 9:29 PM
> To: Sam Harwell
> Cc: Terence Parr; stringtemplate-interest List
> Subject: Re: [stringtemplate-interest] "".."" won't work
>  
> I have no problem with <%...%> but that eliminates one character available as a valid delimiters right?
> 
> I can't set the starting and ending delimiters to '%' and have %%...%% can I?
> 
> Collin
> 
> On Mon, Apr 4, 2011 at 8:39 PM, Sam Harwell <sharwell at pixelminegames.com> wrote:
> If you want to emit the literal %> in the output, you can write it as %\>,
> using the existing escape sequence without breaking anything.
> 
> Sam
> 
> -----Original Message-----
> From: stringtemplate-interest-bounces at antlr.org
> [mailto:stringtemplate-interest-bounces at antlr.org] On Behalf Of Terence Parr
> Sent: Monday, April 04, 2011 8:07 PM
> To: stringtemplate-interest List
> Subject: Re: [stringtemplate-interest] "".."" won't work
> 
> 
> On Apr 4, 2011, at 6:05 PM, Sam Harwell wrote:
> 
> > I guess with <%..%>, the escape character is still \>?
> >
> > This should work fine.
> 
> Well, shouldn't need any escape really...should be \%?
> Ter
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
> 
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>  
>  
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>  
>  
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>  


From sharwell at pixelminegames.com  Wed Apr  6 10:41:57 2011
From: sharwell at pixelminegames.com (Sam Harwell)
Date: Wed, 6 Apr 2011 12:41:57 -0500
Subject: [stringtemplate-interest] "".."" won't work
In-Reply-To: <A5E37D65-5581-4FCE-81EC-2A371A2505AA@cs.usfca.edu>
References: <720BE9AD-EC47-453A-A9DE-E48AE4380BD1@cs.usfca.edu>	<032201cbf32d$810e0a50$832a1ef0$@pixelminegames.com>	<96E67EEF-7B73-4A1D-A621-36CD746EA61E@cs.usfca.edu>	<032301cbf332$5708a5d0$0519f170$@pixelminegames.com>	<BANLkTik1JER1vqNzQTW--QqvyefhuTW84w@mail.gmail.com>	<032a01cbf33e$7698d300$63ca7900$@pixelminegames.com>	<4F284526-9AC3-449B-B577-00773FD3742F@cs.usfca.edu>	<0D3D1444-5569-4FA3-B4A3-AB7050B9ACC5@abego-software.de>	<7016E1D8-9652-48B1-9C14-605C2138AE47@cs.usfca.edu>	<C793665B-4331-4F21-8435-736958173177@abego-software.de>	<000901cbf412$89293940$9b7babc0$@pixelminegames.com>
	<A5E37D65-5581-4FCE-81EC-2A371A2505AA@cs.usfca.edu>
Message-ID: <003501cbf481$ee0785a0$ca1690e0$@pixelminegames.com>

Looking through the ANTLR templates, do you see any cases where it's an
issue to throw out both NEWLINE and INDENT tokens coming from STLexer?
INDENT is any leading whitespace on a line.

I'm looking at my other large codegen project and I can't see any place
where I need that indent. All the "indented blocks" in my code are indented
within a regular <<...>> BIGSTRING.

Sam

-----Original Message-----
From: stringtemplate-interest-bounces at antlr.org
[mailto:stringtemplate-interest-bounces at antlr.org] On Behalf Of Terence Parr
Sent: Wednesday, April 06, 2011 12:36 PM
To: stringtemplate-interest List
Subject: Re: [stringtemplate-interest] "".."" won't work

Yeah,That is what I was thinking before. Ignoring indentation, particularly
in front of conditionals seems reasonable. On the other hand what about
indentation in front of text?

t() ::= <%
	start
	<if(x)>
		<x>
		foo
	<endif>
	end
%>

 should all that be ignored as equivalent to:

t() ::= <%
start
<if(x)>
<x>
foo
endif>
end
%>

I like the idea of throwing away indentation in front of conditionals; not
sure about in front of text, but probably should for consistency.

T

On Apr 5, 2011, at 9:24 PM, Sam Harwell wrote:

> I still don't see how <% %> would lead to implementation or usage
problems. Can anyone give a concrete example where it breaks?
>  
> The comments suggestion is completely impractical for the size templates I
work with, even with syntax highlighting.
>  
> That said, I just realized that it might make sense for <% %> to drop
INDENT tokens as well, for the following reasons:
>  
> .         Indentation doesn't make sense for a single-line token.
> .         If someone wanted to insert whitespace in the middle of a line
in a single-line template, it wouldn't be at the beginning of a line.
>  
> Sam
>  
> From: stringtemplate-interest-bounces at antlr.org 
> [mailto:stringtemplate-interest-bounces at antlr.org] On Behalf Of Udo 
> Borkowski
> Sent: Tuesday, April 05, 2011 10:10 PM
> To: Terence Parr
> Cc: stringtemplate-interest List
> Subject: Re: [stringtemplate-interest] "".."" won't work
>  
> Let's get back to the original issue: 
> we want to make templates more readable that currently packed in one line
(to avoid newline output):
> Here's a simple example:
>  
> ruleRef(rule,label,elementIndex,args,scope) ::= << 
> <if(label)><label>=<endif><if(scope)><scope:delegateName()>.<endif><ru
> le.name>(<args; separator=", ">);
> >> 
>  
> Do we really need a new feature to achieve this? 
> What about using stuff already implemented to improve readablity?
>  
> E.g. comments can be used to insert linebreaks that are visible in the
template but not rendered:
>  
> ruleRef(rule,label,elementIndex,args,scope) ::= <<<!
> !><if(label)><!
> !><label>=<!
> !><endif><!
> !><if(scope)><!
> !><scope:delegateName()>.<!
> !><endif><!
> !><rule.name>(<args; separator=", ">);
> >> 
>  
> With a proper syntax highlighting (which makes comments very "light") it
becomes even more readable:
>  
> ruleRef(rule,label,elementIndex,args,scope) ::= <<<!
> !><if(label)><!
> !><label>=<!
> !><endif><!
> !><if(scope)><!
> !><scope:delegateName()>.<!
> !><endif><!
> !><rule.name>(<args; separator=", ">);
> >> 
>  
> These comments can even be used to do indents, improving the readability
again:
>  
> ruleRef(rule,label,elementIndex,args,scope) ::= <<<!
> !><if(label)><!
>     !><label>=<!
> !><endif><!
> !><if(scope)><!
>     !><scope:delegateName()>.<!
> !><endif><!
> !><rule.name>(<args; separator=", ">);
> >> 
> This final example looks very readable to me, even more readable than the
template we would write with the suggested "newline eating" syntax:
> ruleRef(rule,label,elementIndex,args,scope) ::= <<< <if(label)> 
> <label>= <endif> <if(scope)> <scope:delegateName()>.
> <endif>
> <rule.name>(<args; separator=", ">);
> >>> 
> Of cause this "comment formatting" involves a little more typing, but this
can easily handled by any good editor (Ter: "... emacs is your friend ;)").
>  
> With this idea in mind, do we really need to add this "newline eating"
feature? 
>  
> To me the benefit does not look that big. As I have not yet written any
real long "one liners" I may not be the right person to judge this, so what
do others think?
>  
> Implementing the "line eating" feature has quite its difficulties, as we
noticed already. I have no doubt these issues can be solved, however I
assume "StringTemplate's overall design simplicity" (Sam Harwell) will be
bigger without it. 
>  
>  
> Udo
>  
> On 05.04.2011, at 18:31, Terence Parr wrote:
> 
> 
> yeah it was hassle flipping << >> to <% %> in Java.stg templates, 
> though I'd need to insert [..] or whatever just the same.  still open 
> for debate :) T On Apr 5, 2011, at 5:03 AM, Udo Borkowski wrote:
> 
> 
> Following this thread makes me think if extending the syntax through new
template delimiters ("", """, <% or whatsoever) is really a good idea. 
>  
> I assume we run into less problems (conflict with old syntax, escape
issues etc.) with just sticking to the old ones ("."  and <<.>>) and just
add the optional "[.]" template prefix, as already suggested earlier.
>  
> t() ::= [.]<<
> .
> .
> .
> >> 
>  
> Udo
>  
>  
>  
> On 05.04.2011, at 06:15, Terence Parr wrote:
> 
> 
> oh right.  might work.
> Ter
> On Apr 4, 2011, at 8:06 PM, Sam Harwell wrote:
> 
> 
> If you chose % as your delimiter, it would still be fine. The template
starts at <% and ends at %>.
>  
> <%%x%%>
>  
> Sam
>  
> From: Collin Fagan [mailto:collin.fagan at gmail.com]
> Sent: Monday, April 04, 2011 9:29 PM
> To: Sam Harwell
> Cc: Terence Parr; stringtemplate-interest List
> Subject: Re: [stringtemplate-interest] "".."" won't work
>  
> I have no problem with <%...%> but that eliminates one character available
as a valid delimiters right?
> 
> I can't set the starting and ending delimiters to '%' and have %%...%% can
I?
> 
> Collin
> 
> On Mon, Apr 4, 2011 at 8:39 PM, Sam Harwell <sharwell at pixelminegames.com>
wrote:
> If you want to emit the literal %> in the output, you can write it as 
> %\>, using the existing escape sequence without breaking anything.
> 
> Sam
> 
> -----Original Message-----
> From: stringtemplate-interest-bounces at antlr.org
> [mailto:stringtemplate-interest-bounces at antlr.org] On Behalf Of 
> Terence Parr
> Sent: Monday, April 04, 2011 8:07 PM
> To: stringtemplate-interest List
> Subject: Re: [stringtemplate-interest] "".."" won't work
> 
> 
> On Apr 4, 2011, at 6:05 PM, Sam Harwell wrote:
> 
> > I guess with <%..%>, the escape character is still \>?
> >
> > This should work fine.
> 
> Well, shouldn't need any escape really...should be \%?
> Ter
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
> 
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>  
>  
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>  
>  
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>  

_______________________________________________
stringtemplate-interest mailing list
stringtemplate-interest at antlr.org
http://www.antlr.org/mailman/listinfo/stringtemplate-interest


From ub at abego-software.de  Wed Apr  6 12:55:55 2011
From: ub at abego-software.de (Udo Borkowski)
Date: Wed, 6 Apr 2011 21:55:55 +0200
Subject: [stringtemplate-interest] "".."" won't work
In-Reply-To: <C25E9F8A-0F08-43D2-B413-23D0DD986BD0@cs.usfca.edu>
References: <720BE9AD-EC47-453A-A9DE-E48AE4380BD1@cs.usfca.edu>	<032201cbf32d$810e0a50$832a1ef0$@pixelminegames.com>	<96E67EEF-7B73-4A1D-A621-36CD746EA61E@cs.usfca.edu>	<032301cbf332$5708a5d0$0519f170$@pixelminegames.com>
	<BANLkTik1JER1vqNzQTW--QqvyefhuTW84w@mail.gmail.com>
	<032a01cbf33e$7698d300$63ca7900$@pixelminegames.com>
	<4F284526-9AC3-449B-B577-00773FD3742F@cs.usfca.edu>
	<0D3D1444-5569-4FA3-B4A3-AB7050B9ACC5@abego-software.de>
	<7016E1D8-9652-48B1-9C14-605C2138AE47@cs.usfca.edu>
	<C793665B-4331-4F21-8435-736958173177@abego-software.de>
	<C25E9F8A-0F08-43D2-B413-23D0DD986BD0@cs.usfca.edu>
Message-ID: <0A4B44A2-AFD3-49E8-9AB0-4DAECCD5771C@abego-software.de>

> well,In that case we already have the <\\> "insert but ignore \n" feature. :)

Right, but without the "indent support" ;)

Ter: I looked for a documentation of the <\\> feature and found none. Can you give me a link, or update the documentation if missing? (including the cheat sheet) 

Udo


On 06.04.2011, at 19:34, Terence Parr wrote:

> well,In that case we already have the <\\> "insert but ignore \n" feature. :)
> TerOn Apr 5, 2011, at 8:09 PM, Udo Borkowski wrote:
> 
>> Let's get back to the original issue: 
>> we want to make templates more readable that currently packed in one line (to avoid newline output):
>>> Here's a simple example:
>>> 
>>> ruleRef(rule,label,elementIndex,args,scope) ::= <<
>>> <if(label)><label>=<endif><if(scope)><scope:delegateName()>.<endif><
>>> rule.name
>>>> (<args; separator=", ">);
>>>>> 
>>> 
>>> 
>> Do we really need a new feature to achieve this? 
>> What about using stuff already implemented to improve readablity?
>> 
>> E.g. comments can be used to insert linebreaks that are visible in the template but not rendered:
>> 
>> ruleRef(rule,label,elementIndex,args,scope) ::= <<<!
>> !><if(label)><!
>> !><label>=<!
>> !><endif><!
>> !><if(scope)><!
>> !><scope:delegateName()>.<!
>> !><endif><!
>> !><
>> rule.name
>>> (<args; separator=", ">);
>>>> 
>> 
>> 
>> With a proper syntax highlighting (which makes comments very "light") it becomes even more readable:
>> 
>> ruleRef(rule,label,elementIndex,args,scope) ::= <<
>> <!
>> !>
>> <if(label)>
>> <!
>> !>
>> <label>=
>> <!
>> !>
>> <endif>
>> <!
>> !>
>> <if(scope)>
>> <!
>> !>
>> <scope:delegateName()>.
>> <!
>> !>
>> <endif>
>> <!
>> !>
>> <rule.name
>>> (<args; separator=", ">);
>>>> 
>> 
>> 
>> These comments can even be used to do indents, improving the readability again:
>> 
>> ruleRef(rule,label,elementIndex,args,scope) ::= <<
>> <!
>> !>
>> <if(label)>
>> <!
>>    !>
>> <label>=
>> <!
>> !>
>> <endif>
>> <!
>> !>
>> <if(scope)>
>> <!
>>    !>
>> <scope:delegateName()>.
>> <!
>> !>
>> <endif>
>> <!
>> !>
>> <rule.name
>>> (<args; separator=", ">);
>>>> 
>> 
>> This final example looks very readable to me, even more readable than the template we would write with the suggested "newline eating" syntax:
>>> ruleRef(rule,label,elementIndex,args,scope) ::= <<<
>>> <if(label)>
>>> <label>=
>>> <endif>
>>> <if(scope)>
>>> <scope:delegateName()>.
>>> <endif>
>>> <
>>> rule.name
>>>> (<args; separator=", ">);
>>>>>> 
>>> 
>> Of cause this "comment formatting" involves a little more typing, but this can easily handled by any good editor (Ter: "... emacs is your friend ;)").
>> 
>> With this idea in mind, do we really need to add this "newline eating" feature? 
>> 
>> To me the benefit does not look that big. As I have not yet written any real long "one liners" I may not be the right person to judge this, so what do others think?
>> 
>> Implementing the "line eating" feature has quite its difficulties, as we noticed already. I have no doubt these issues can be solved, however I assume "StringTemplate's overall design simplicity" (Sam Harwell) will be bigger without it. 
>> 
>> 
>> Udo
>> 
>> On 05.04.2011, at 18:31, Terence Parr wrote:
>> 
>>> yeah it was hassle flipping << >> to <% %> in Java.stg templates, though I'd need to insert [..] or whatever just the same.  still open for debate :)
>>> T
>>> On Apr 5, 2011, at 5:03 AM, Udo Borkowski wrote:
>>> 
>>>> Following this thread makes me think if extending the syntax through new template delimiters ("", """, <% or whatsoever) is really a good idea. 
>>>> 
>>>> I assume we run into less problems (conflict with old syntax, escape issues etc.) with just sticking to the old ones ("?"  and <<?>>) and just add the optional "[?]" template prefix, as already suggested earlier.
>>>> 
>>>> t() ::= [?]<<
>>>> .
>>>> .
>>>> .
>>>>>> 
>>>> 
>>>> Udo
>>>> 
>>>> 
>>>> 
>>>> On 05.04.2011, at 06:15, Terence Parr wrote:
>>>> 
>>>>> oh right.  might work.
>>>>> Ter
>>>>> On Apr 4, 2011, at 8:06 PM, Sam Harwell wrote:
>>>>> 
>>>>>> If you chose % as your delimiter, it would still be fine. The template starts at <% and ends at %>.
>>>>>> 
>>>>>> <%%x%%>
>>>>>> 
>>>>>> Sam
>>>>>> 
>>>>>> From: Collin Fagan [mailto:collin.fagan at gmail.com] 
>>>>>> Sent: Monday, April 04, 2011 9:29 PM
>>>>>> To: Sam Harwell
>>>>>> Cc: Terence Parr; stringtemplate-interest List
>>>>>> Subject: Re: [stringtemplate-interest] "".."" won't work
>>>>>> 
>>>>>> I have no problem with <%...%> but that eliminates one character available as a valid delimiters right?
>>>>>> 
>>>>>> I can't set the starting and ending delimiters to '%' and have %%...%% can I?
>>>>>> 
>>>>>> Collin
>>>>>> 
>>>>>> On Mon, Apr 4, 2011 at 8:39 PM, Sam Harwell <sharwell at pixelminegames.com> wrote:
>>>>>> If you want to emit the literal %> in the output, you can write it as %\>,
>>>>>> using the existing escape sequence without breaking anything.
>>>>>> 
>>>>>> Sam
>>>>>> 
>>>>>> -----Original Message-----
>>>>>> From: stringtemplate-interest-bounces at antlr.org
>>>>>> [mailto:stringtemplate-interest-bounces at antlr.org] On Behalf Of Terence Parr
>>>>>> Sent: Monday, April 04, 2011 8:07 PM
>>>>>> To: stringtemplate-interest List
>>>>>> Subject: Re: [stringtemplate-interest] "".."" won't work
>>>>>> 
>>>>>> 
>>>>>> On Apr 4, 2011, at 6:05 PM, Sam Harwell wrote:
>>>>>> 
>>>>>>> I guess with <%..%>, the escape character is still \>?
>>>>>>> 
>>>>>>> This should work fine.
>>>>>> 
>>>>>> Well, shouldn't need any escape really...should be \%?
>>>>>> Ter
>>>>>> _______________________________________________
>>>>>> stringtemplate-interest mailing list
>>>>>> stringtemplate-interest at antlr.org
>>>>>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>>>>>> 
>>>>>> _______________________________________________
>>>>>> stringtemplate-interest mailing list
>>>>>> stringtemplate-interest at antlr.org
>>>>>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>>>>>> 
>>>>> 
>>>>> _______________________________________________
>>>>> stringtemplate-interest mailing list
>>>>> stringtemplate-interest at antlr.org
>>>>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>>>> 
>>> 
>>> _______________________________________________
>>> stringtemplate-interest mailing list
>>> stringtemplate-interest at antlr.org
>>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>> 
>> _______________________________________________
>> stringtemplate-interest mailing list
>> stringtemplate-interest at antlr.org
>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
> 
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest


From ub at abego-software.de  Wed Apr  6 12:50:59 2011
From: ub at abego-software.de (Udo Borkowski)
Date: Wed, 6 Apr 2011 21:50:59 +0200
Subject: [stringtemplate-interest] "".."" won't work
In-Reply-To: <000901cbf412$89293940$9b7babc0$@pixelminegames.com>
References: <720BE9AD-EC47-453A-A9DE-E48AE4380BD1@cs.usfca.edu>	<032201cbf32d$810e0a50$832a1ef0$@pixelminegames.com>	<96E67EEF-7B73-4A1D-A621-36CD746EA61E@cs.usfca.edu>	<032301cbf332$5708a5d0$0519f170$@pixelminegames.com>	<BANLkTik1JER1vqNzQTW--QqvyefhuTW84w@mail.gmail.com>	<032a01cbf33e$7698d300$63ca7900$@pixelminegames.com>	<4F284526-9AC3-449B-B577-00773FD3742F@cs.usfca.edu>	<0D3D1444-5569-4FA3-B4A3-AB7050B9ACC5@abego-software.de>	<7016E1D8-9652-48B1-9C14-605C2138AE47@cs.usfca.edu>
	<C793665B-4331-4F21-8435-736958173177@abego-software.de>
	<000901cbf412$89293940$9b7babc0$@pixelminegames.com>
Message-ID: <A30675D5-2A9C-40BE-A585-40B93AB3CF94@abego-software.de>

> The comments suggestion is completely impractical for the size templates I work with, even with syntax highlighting.

Thanks, that's what I wanted to know,

Udo


On 06.04.2011, at 06:24, Sam Harwell wrote:

> I still don?t see how <% %> would lead to implementation or usage problems. Can anyone give a concrete example where it breaks?
>  
> The comments suggestion is completely impractical for the size templates I work with, even with syntax highlighting.
>  
> That said, I just realized that it might make sense for <% %> to drop INDENT tokens as well, for the following reasons:
>  
> ?         Indentation doesn?t make sense for a single-line token.
> ?         If someone wanted to insert whitespace in the middle of a line in a single-line template, it wouldn?t be at the beginning of a line.
>  
> Sam
>  
> From: stringtemplate-interest-bounces at antlr.org [mailto:stringtemplate-interest-bounces at antlr.org] On Behalf Of Udo Borkowski
> Sent: Tuesday, April 05, 2011 10:10 PM
> To: Terence Parr
> Cc: stringtemplate-interest List
> Subject: Re: [stringtemplate-interest] "".."" won't work
>  
> Let's get back to the original issue: 
> we want to make templates more readable that currently packed in one line (to avoid newline output):
> Here's a simple example:
>  
> ruleRef(rule,label,elementIndex,args,scope) ::= <<
> <if(label)><label>=<endif><if(scope)><scope:delegateName()>.<endif><rule.name>(<args; separator=", ">);
> >> 
>  
> Do we really need a new feature to achieve this? 
> What about using stuff already implemented to improve readablity?
>  
> E.g. comments can be used to insert linebreaks that are visible in the template but not rendered:
>  
> ruleRef(rule,label,elementIndex,args,scope) ::= <<<!
> !><if(label)><!
> !><label>=<!
> !><endif><!
> !><if(scope)><!
> !><scope:delegateName()>.<!
> !><endif><!
> !><rule.name>(<args; separator=", ">);
> >> 
>  
> With a proper syntax highlighting (which makes comments very "light") it becomes even more readable:
>  
> ruleRef(rule,label,elementIndex,args,scope) ::= <<<!
> !><if(label)><!
> !><label>=<!
> !><endif><!
> !><if(scope)><!
> !><scope:delegateName()>.<!
> !><endif><!
> !><rule.name>(<args; separator=", ">);
> >> 
>  
> These comments can even be used to do indents, improving the readability again:
>  
> ruleRef(rule,label,elementIndex,args,scope) ::= <<<!
> !><if(label)><!
>     !><label>=<!
> !><endif><!
> !><if(scope)><!
>     !><scope:delegateName()>.<!
> !><endif><!
> !><rule.name>(<args; separator=", ">);
> >> 
> This final example looks very readable to me, even more readable than the template we would write with the suggested "newline eating" syntax:
> ruleRef(rule,label,elementIndex,args,scope) ::= <<<
> <if(label)>
> <label>=
> <endif>
> <if(scope)>
> <scope:delegateName()>.
> <endif>
> <rule.name>(<args; separator=", ">);
> >>> 
> Of cause this "comment formatting" involves a little more typing, but this can easily handled by any good editor (Ter: "... emacs is your friend ;)").
>  
> With this idea in mind, do we really need to add this "newline eating" feature? 
>  
> To me the benefit does not look that big. As I have not yet written any real long "one liners" I may not be the right person to judge this, so what do others think?
>  
> Implementing the "line eating" feature has quite its difficulties, as we noticed already. I have no doubt these issues can be solved, however I assume "StringTemplate's overall design simplicity" (Sam Harwell) will be bigger without it. 
>  
>  
> Udo
>  
> On 05.04.2011, at 18:31, Terence Parr wrote:
> 
> 
> yeah it was hassle flipping << >> to <% %> in Java.stg templates, though I'd need to insert [..] or whatever just the same.  still open for debate :)
> T
> On Apr 5, 2011, at 5:03 AM, Udo Borkowski wrote:
> 
> 
> Following this thread makes me think if extending the syntax through new template delimiters ("", """, <% or whatsoever) is really a good idea. 
>  
> I assume we run into less problems (conflict with old syntax, escape issues etc.) with just sticking to the old ones ("?"  and <<?>>) and just add the optional "[?]" template prefix, as already suggested earlier.
>  
> t() ::= [?]<<
> .
> .
> .
> >> 
>  
> Udo
>  
>  
>  
> On 05.04.2011, at 06:15, Terence Parr wrote:
> 
> 
> oh right.  might work.
> Ter
> On Apr 4, 2011, at 8:06 PM, Sam Harwell wrote:
> 
> 
> If you chose % as your delimiter, it would still be fine. The template starts at <% and ends at %>.
>  
> <%%x%%>
>  
> Sam
>  
> From: Collin Fagan [mailto:collin.fagan at gmail.com] 
> Sent: Monday, April 04, 2011 9:29 PM
> To: Sam Harwell
> Cc: Terence Parr; stringtemplate-interest List
> Subject: Re: [stringtemplate-interest] "".."" won't work
>  
> I have no problem with <%...%> but that eliminates one character available as a valid delimiters right?
> 
> I can't set the starting and ending delimiters to '%' and have %%...%% can I?
> 
> Collin
> 
> On Mon, Apr 4, 2011 at 8:39 PM, Sam Harwell <sharwell at pixelminegames.com> wrote:
> If you want to emit the literal %> in the output, you can write it as %\>,
> using the existing escape sequence without breaking anything.
> 
> Sam
> 
> -----Original Message-----
> From: stringtemplate-interest-bounces at antlr.org
> [mailto:stringtemplate-interest-bounces at antlr.org] On Behalf Of Terence Parr
> Sent: Monday, April 04, 2011 8:07 PM
> To: stringtemplate-interest List
> Subject: Re: [stringtemplate-interest] "".."" won't work
> 
> 
> On Apr 4, 2011, at 6:05 PM, Sam Harwell wrote:
> 
> > I guess with <%..%>, the escape character is still \>?
> >
> > This should work fine.
> 
> Well, shouldn't need any escape really...should be \%?
> Ter
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
> 
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>  
>  
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>  
>  
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>  

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20110406/7a41a640/attachment-0001.html 

From parrt at cs.usfca.edu  Wed Apr  6 16:04:13 2011
From: parrt at cs.usfca.edu (Terence Parr)
Date: Wed, 6 Apr 2011 16:04:13 -0700
Subject: [stringtemplate-interest] "".."" won't work
In-Reply-To: <003501cbf481$ee0785a0$ca1690e0$@pixelminegames.com>
References: <720BE9AD-EC47-453A-A9DE-E48AE4380BD1@cs.usfca.edu>	<032201cbf32d$810e0a50$832a1ef0$@pixelminegames.com>	<96E67EEF-7B73-4A1D-A621-36CD746EA61E@cs.usfca.edu>	<032301cbf332$5708a5d0$0519f170$@pixelminegames.com>	<BANLkTik1JER1vqNzQTW--QqvyefhuTW84w@mail.gmail.com>	<032a01cbf33e$7698d300$63ca7900$@pixelminegames.com>	<4F284526-9AC3-449B-B577-00773FD3742F@cs.usfca.edu>	<0D3D1444-5569-4FA3-B4A3-AB7050B9ACC5@abego-software.de>	<7016E1D8-9652-48B1-9C14-605C2138AE47@cs.usfca.edu>	<C793665B-4331-4F21-8435-736958173177@abego-software.de>	<000901cbf412$89293940$9b7babc0$@pixelminegames.com>
	<A5E37D65-5581-4FCE-81EC-2A371A2505AA@cs.usfca.edu>
	<003501cbf481$ee0785a0$ca1690e0$@pixelminegames.com>
Message-ID: <3310DEC5-EA79-41E5-B05E-1D5AA712732C@cs.usfca.edu>

yeah,I think it's okay to ignore indents. ok done. Made a few unit tests and pushed. e.g.,

	@Test public void testIgnoreIndentInIF() throws Exception {
		String template =
			"t(x) ::= <%\n" +
			"	<if(x)>\n" +
			"		foo\n" +
			"	<endif>\n" +
			"	<x>\n" +
			"%>\n";
		STGroup g = new STGroupString(template);
		ST st = g.getInstanceOf("t");
		st.add("x", 99);
		String expected = "foo99";
		String result = st.render();
		assertEquals(expected, result);
	}

Ter
On Apr 6, 2011, at 10:41 AM, Sam Harwell wrote:

> Looking through the ANTLR templates, do you see any cases where it's an
> issue to throw out both NEWLINE and INDENT tokens coming from STLexer?
> INDENT is any leading whitespace on a line.
> 
> I'm looking at my other large codegen project and I can't see any place
> where I need that indent. All the "indented blocks" in my code are indented
> within a regular <<...>> BIGSTRING.
> 
> Sam
> 
> -----Original Message-----
> From: stringtemplate-interest-bounces at antlr.org
> [mailto:stringtemplate-interest-bounces at antlr.org] On Behalf Of Terence Parr
> Sent: Wednesday, April 06, 2011 12:36 PM
> To: stringtemplate-interest List
> Subject: Re: [stringtemplate-interest] "".."" won't work
> 
> Yeah,That is what I was thinking before. Ignoring indentation, particularly
> in front of conditionals seems reasonable. On the other hand what about
> indentation in front of text?
> 
> t() ::= <%
> 	start
> 	<if(x)>
> 		<x>
> 		foo
> 	<endif>
> 	end
> %>
> 
> should all that be ignored as equivalent to:
> 
> t() ::= <%
> start
> <if(x)>
> <x>
> foo
> endif>
> end
> %>
> 
> I like the idea of throwing away indentation in front of conditionals; not
> sure about in front of text, but probably should for consistency.
> 
> T
> 
> On Apr 5, 2011, at 9:24 PM, Sam Harwell wrote:
> 
>> I still don't see how <% %> would lead to implementation or usage
> problems. Can anyone give a concrete example where it breaks?
>> 
>> The comments suggestion is completely impractical for the size templates I
> work with, even with syntax highlighting.
>> 
>> That said, I just realized that it might make sense for <% %> to drop
> INDENT tokens as well, for the following reasons:
>> 
>> .         Indentation doesn't make sense for a single-line token.
>> .         If someone wanted to insert whitespace in the middle of a line
> in a single-line template, it wouldn't be at the beginning of a line.
>> 
>> Sam
>> 
>> From: stringtemplate-interest-bounces at antlr.org 
>> [mailto:stringtemplate-interest-bounces at antlr.org] On Behalf Of Udo 
>> Borkowski
>> Sent: Tuesday, April 05, 2011 10:10 PM
>> To: Terence Parr
>> Cc: stringtemplate-interest List
>> Subject: Re: [stringtemplate-interest] "".."" won't work
>> 
>> Let's get back to the original issue: 
>> we want to make templates more readable that currently packed in one line
> (to avoid newline output):
>> Here's a simple example:
>> 
>> ruleRef(rule,label,elementIndex,args,scope) ::= << 
>> <if(label)><label>=<endif><if(scope)><scope:delegateName()>.<endif><ru
>> le.name>(<args; separator=", ">);
>>>> 
>> 
>> Do we really need a new feature to achieve this? 
>> What about using stuff already implemented to improve readablity?
>> 
>> E.g. comments can be used to insert linebreaks that are visible in the
> template but not rendered:
>> 
>> ruleRef(rule,label,elementIndex,args,scope) ::= <<<!
>> !><if(label)><!
>> !><label>=<!
>> !><endif><!
>> !><if(scope)><!
>> !><scope:delegateName()>.<!
>> !><endif><!
>> !><rule.name>(<args; separator=", ">);
>>>> 
>> 
>> With a proper syntax highlighting (which makes comments very "light") it
> becomes even more readable:
>> 
>> ruleRef(rule,label,elementIndex,args,scope) ::= <<<!
>> !><if(label)><!
>> !><label>=<!
>> !><endif><!
>> !><if(scope)><!
>> !><scope:delegateName()>.<!
>> !><endif><!
>> !><rule.name>(<args; separator=", ">);
>>>> 
>> 
>> These comments can even be used to do indents, improving the readability
> again:
>> 
>> ruleRef(rule,label,elementIndex,args,scope) ::= <<<!
>> !><if(label)><!
>>    !><label>=<!
>> !><endif><!
>> !><if(scope)><!
>>    !><scope:delegateName()>.<!
>> !><endif><!
>> !><rule.name>(<args; separator=", ">);
>>>> 
>> This final example looks very readable to me, even more readable than the
> template we would write with the suggested "newline eating" syntax:
>> ruleRef(rule,label,elementIndex,args,scope) ::= <<< <if(label)> 
>> <label>= <endif> <if(scope)> <scope:delegateName()>.
>> <endif>
>> <rule.name>(<args; separator=", ">);
>>>>> 
>> Of cause this "comment formatting" involves a little more typing, but this
> can easily handled by any good editor (Ter: "... emacs is your friend ;)").
>> 
>> With this idea in mind, do we really need to add this "newline eating"
> feature? 
>> 
>> To me the benefit does not look that big. As I have not yet written any
> real long "one liners" I may not be the right person to judge this, so what
> do others think?
>> 
>> Implementing the "line eating" feature has quite its difficulties, as we
> noticed already. I have no doubt these issues can be solved, however I
> assume "StringTemplate's overall design simplicity" (Sam Harwell) will be
> bigger without it. 
>> 
>> 
>> Udo
>> 
>> On 05.04.2011, at 18:31, Terence Parr wrote:
>> 
>> 
>> yeah it was hassle flipping << >> to <% %> in Java.stg templates, 
>> though I'd need to insert [..] or whatever just the same.  still open 
>> for debate :) T On Apr 5, 2011, at 5:03 AM, Udo Borkowski wrote:
>> 
>> 
>> Following this thread makes me think if extending the syntax through new
> template delimiters ("", """, <% or whatsoever) is really a good idea. 
>> 
>> I assume we run into less problems (conflict with old syntax, escape
> issues etc.) with just sticking to the old ones ("."  and <<.>>) and just
> add the optional "[.]" template prefix, as already suggested earlier.
>> 
>> t() ::= [.]<<
>> .
>> .
>> .
>>>> 
>> 
>> Udo
>> 
>> 
>> 
>> On 05.04.2011, at 06:15, Terence Parr wrote:
>> 
>> 
>> oh right.  might work.
>> Ter
>> On Apr 4, 2011, at 8:06 PM, Sam Harwell wrote:
>> 
>> 
>> If you chose % as your delimiter, it would still be fine. The template
> starts at <% and ends at %>.
>> 
>> <%%x%%>
>> 
>> Sam
>> 
>> From: Collin Fagan [mailto:collin.fagan at gmail.com]
>> Sent: Monday, April 04, 2011 9:29 PM
>> To: Sam Harwell
>> Cc: Terence Parr; stringtemplate-interest List
>> Subject: Re: [stringtemplate-interest] "".."" won't work
>> 
>> I have no problem with <%...%> but that eliminates one character available
> as a valid delimiters right?
>> 
>> I can't set the starting and ending delimiters to '%' and have %%...%% can
> I?
>> 
>> Collin
>> 
>> On Mon, Apr 4, 2011 at 8:39 PM, Sam Harwell <sharwell at pixelminegames.com>
> wrote:
>> If you want to emit the literal %> in the output, you can write it as 
>> %\>, using the existing escape sequence without breaking anything.
>> 
>> Sam
>> 
>> -----Original Message-----
>> From: stringtemplate-interest-bounces at antlr.org
>> [mailto:stringtemplate-interest-bounces at antlr.org] On Behalf Of 
>> Terence Parr
>> Sent: Monday, April 04, 2011 8:07 PM
>> To: stringtemplate-interest List
>> Subject: Re: [stringtemplate-interest] "".."" won't work
>> 
>> 
>> On Apr 4, 2011, at 6:05 PM, Sam Harwell wrote:
>> 
>>> I guess with <%..%>, the escape character is still \>?
>>> 
>>> This should work fine.
>> 
>> Well, shouldn't need any escape really...should be \%?
>> Ter
>> _______________________________________________
>> stringtemplate-interest mailing list
>> stringtemplate-interest at antlr.org
>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>> 
>> _______________________________________________
>> stringtemplate-interest mailing list
>> stringtemplate-interest at antlr.org
>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>> 
>> 
>> _______________________________________________
>> stringtemplate-interest mailing list
>> stringtemplate-interest at antlr.org
>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>> 
>> 
>> _______________________________________________
>> stringtemplate-interest mailing list
>> stringtemplate-interest at antlr.org
>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>> 
> 
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
> 


From parrt at cs.usfca.edu  Wed Apr  6 16:10:11 2011
From: parrt at cs.usfca.edu (Terence Parr)
Date: Wed, 6 Apr 2011 16:10:11 -0700
Subject: [stringtemplate-interest] "".."" won't work
In-Reply-To: <0A4B44A2-AFD3-49E8-9AB0-4DAECCD5771C@abego-software.de>
References: <720BE9AD-EC47-453A-A9DE-E48AE4380BD1@cs.usfca.edu>	<032201cbf32d$810e0a50$832a1ef0$@pixelminegames.com>	<96E67EEF-7B73-4A1D-A621-36CD746EA61E@cs.usfca.edu>	<032301cbf332$5708a5d0$0519f170$@pixelminegames.com>
	<BANLkTik1JER1vqNzQTW--QqvyefhuTW84w@mail.gmail.com>
	<032a01cbf33e$7698d300$63ca7900$@pixelminegames.com>
	<4F284526-9AC3-449B-B577-00773FD3742F@cs.usfca.edu>
	<0D3D1444-5569-4FA3-B4A3-AB7050B9ACC5@abego-software.de>
	<7016E1D8-9652-48B1-9C14-605C2138AE47@cs.usfca.edu>
	<C793665B-4331-4F21-8435-736958173177@abego-software.de>
	<C25E9F8A-0F08-43D2-B413-23D0DD986BD0@cs.usfca.edu>
	<0A4B44A2-AFD3-49E8-9AB0-4DAECCD5771C@abego-software.de>
Message-ID: <9FA8E385-5809-4E4F-8E01-CCC5F8575C6D@cs.usfca.edu>


On Apr 6, 2011, at 12:55 PM, Udo Borkowski wrote:

>> well,In that case we already have the <\\> "insert but ignore \n" feature. :)
> 
> Right, but without the "indent support" ;)
> 
> Ter: I looked for a documentation of the <\\> feature and found none. Can you give me a link, or update the documentation if missing? (including the cheat sheet) 

Doh. I put \\ In the literals area but of course that simply added a new line to the wiki! ;)  I added a line to the documentation

http://www.antlr.org/wiki/display/ST4/Templates

And  I added it to the cheat sheet.

 thanks,
Terence

From baerrach at gmail.com  Wed Apr  6 21:10:09 2011
From: baerrach at gmail.com (Barrie Treloar)
Date: Thu, 7 Apr 2011 13:40:09 +0930
Subject: [stringtemplate-interest] [antlr-interest] Release of
 StringTemplate 4.0
In-Reply-To: <BANLkTi=5SCB3A6vjDjat9r8vixQ2CFV5Vw@mail.gmail.com>
References: <011601cbefb7$4c601510$e5203f30$@pixelminegames.com>
	<8a78c052cb47c0dead2630d968163578@mail.gmail.com>
	<AANLkTi=b6-yOzqrysNON93EajW_HWrgH_r1VYUC55NL7@mail.gmail.com>
	<7428D380-5C70-4A71-9273-C56DBD10EFCB@cs.usfca.edu>
	<BANLkTi=5SCB3A6vjDjat9r8vixQ2CFV5Vw@mail.gmail.com>
Message-ID: <BANLkTi=fNnf7q16Fb-SBDf4Rzw-QrtcTYw@mail.gmail.com>

On Sun, Apr 3, 2011 at 10:44 AM, Michael Bedward
<michael.bedward at gmail.com> wrote:
> On 3 April 2011 04:13, Terence Parr <parrt at cs.usfca.edu> wrote:
>> There's no need for mvn with STv4 since its library not a tool like ANTLR.
>
> It has to be deployed to Maven Central though

+1 for this.

I'm having to manually deploy to our repository manager so I can
automate the build process for templating.
I currently use ST to generate the input files for Geocoding Locator creation.

From jimi at temporal-wave.com  Wed Apr  6 21:32:57 2011
From: jimi at temporal-wave.com (Jim Idle)
Date: Wed, 6 Apr 2011 21:32:57 -0700
Subject: [stringtemplate-interest] [antlr-interest] Release of
 StringTemplate 4.0
In-Reply-To: <BANLkTi=fNnf7q16Fb-SBDf4Rzw-QrtcTYw@mail.gmail.com>
References: <011601cbefb7$4c601510$e5203f30$@pixelminegames.com>
	<8a78c052cb47c0dead2630d968163578@mail.gmail.com>	<AANLkTi=b6-yOzqrysNON93EajW_HWrgH_r1VYUC55NL7@mail.gmail.com>
	<7428D380-5C70-4A71-9273-C56DBD10EFCB@cs.usfca.edu>	<BANLkTi=5SCB3A6vjDjat9r8vixQ2CFV5Vw@mail.gmail.com>
	<BANLkTi=fNnf7q16Fb-SBDf4Rzw-QrtcTYw@mail.gmail.com>
Message-ID: <040b8570fb5f0f99c8b0548adf07e0df@mail.gmail.com>

String template is already in Maven central - we are just debating what to
do with 4.0 here as it is not yet in there.

However, I cannot lose Maven support as I must have 50 customers who I
have made reliant on it. As I don't want to be nailed to a cross, I will
build a deployment script instead of a maven build for the components,
other than the ANTLR plugin itself.

Jim

> -----Original Message-----
> From: stringtemplate-interest-bounces at antlr.org [mailto:stringtemplate-
> interest-bounces at antlr.org] On Behalf Of Barrie Treloar
> Sent: Wednesday, April 06, 2011 9:10 PM
> To: stringtemplate-interest List
> Subject: Re: [stringtemplate-interest] [antlr-interest] Release of
> StringTemplate 4.0
>
> On Sun, Apr 3, 2011 at 10:44 AM, Michael Bedward
> <michael.bedward at gmail.com> wrote:
> > On 3 April 2011 04:13, Terence Parr <parrt at cs.usfca.edu> wrote:
> >> There's no need for mvn with STv4 since its library not a tool like
> ANTLR.
> >
> > It has to be deployed to Maven Central though
>
> +1 for this.
>
> I'm having to manually deploy to our repository manager so I can
> automate the build process for templating.
> I currently use ST to generate the input files for Geocoding Locator
> creation.
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest

From michael.bedward at gmail.com  Wed Apr  6 22:35:41 2011
From: michael.bedward at gmail.com (Michael Bedward)
Date: Thu, 7 Apr 2011 15:35:41 +1000
Subject: [stringtemplate-interest] [antlr-interest] Release of
 StringTemplate 4.0
In-Reply-To: <040b8570fb5f0f99c8b0548adf07e0df@mail.gmail.com>
References: <011601cbefb7$4c601510$e5203f30$@pixelminegames.com>
	<8a78c052cb47c0dead2630d968163578@mail.gmail.com>
	<AANLkTi=b6-yOzqrysNON93EajW_HWrgH_r1VYUC55NL7@mail.gmail.com>
	<7428D380-5C70-4A71-9273-C56DBD10EFCB@cs.usfca.edu>
	<BANLkTi=5SCB3A6vjDjat9r8vixQ2CFV5Vw@mail.gmail.com>
	<BANLkTi=fNnf7q16Fb-SBDf4Rzw-QrtcTYw@mail.gmail.com>
	<040b8570fb5f0f99c8b0548adf07e0df@mail.gmail.com>
Message-ID: <BANLkTimwHGWpSab8_9FgPEAqqA5RT4_M-g@mail.gmail.com>

<sigh of relief>

Thanks Jim - sounds good.

Michael

On 7 April 2011 14:32, Jim Idle <jimi at temporal-wave.com> wrote:
> String template is already in Maven central - we are just debating what to
> do with 4.0 here as it is not yet in there.
>
> However, I cannot lose Maven support as I must have 50 customers who I
> have made reliant on it. As I don't want to be nailed to a cross, I will
> build a deployment script instead of a maven build for the components,
> other than the ANTLR plugin itself.
>
> Jim
>

From parrt at cs.usfca.edu  Sat Apr  9 13:18:32 2011
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sat, 9 Apr 2011 13:18:32 -0700
Subject: [stringtemplate-interest] Updated STViz gui / wiki
Message-ID: <32931A0C-7A2F-478E-8081-C781D799600C@cs.usfca.edu>

I updated this page

http://www.antlr.org/wiki/display/ST4/StringTemplate+Inspector+GUI

because I updated the ST inspector, with the help of Sam Harwell. I'm rapidly fixing a few things here and there as I use ST v4 for ANTLR 3.4. That means I will push out ST 4.0.1 sometime soon.

Ter

From parrt at antlr.org  Sat Apr  9 15:17:58 2011
From: parrt at antlr.org (Terence Parr)
Date: Sat, 9 Apr 2011 15:17:58 -0700
Subject: [stringtemplate-interest] added ... back
Message-ID: <4598BBCF-29A9-420A-8D78-3E68CC94FAE7@antlr.org>

Sam convinced me we need ... pass through.

* Added '...' pass through arg back in. Only allowed with named arg lists
  or as sole arg. Not allowed in <(name)()> indirect includes.
  Inserts new passthru bytecode to set any unset args.

Ter

From parrt at cs.usfca.edu  Sun Apr 10 15:55:47 2011
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sun, 10 Apr 2011 15:55:47 -0700
Subject: [stringtemplate-interest] do we need null?
Message-ID: <A912D7C7-2152-4BA4-8E78-C61776CB5A64@cs.usfca.edu>

I'm calling a template that takes an argument but I don't have a value for it. That's fine except that at runtime it warns me that I haven't passed enough parameters. I guess I could pass in "", what should we introduce the notion of null?  Hmm... maybe it's not worth the extra concept. We have true, false, and empty string.

ter

From baerrach at gmail.com  Sun Apr 10 16:51:28 2011
From: baerrach at gmail.com (Barrie Treloar)
Date: Mon, 11 Apr 2011 09:21:28 +0930
Subject: [stringtemplate-interest] [antlr-interest] Release of
 StringTemplate 4.0
In-Reply-To: <040b8570fb5f0f99c8b0548adf07e0df@mail.gmail.com>
References: <011601cbefb7$4c601510$e5203f30$@pixelminegames.com>
	<8a78c052cb47c0dead2630d968163578@mail.gmail.com>
	<AANLkTi=b6-yOzqrysNON93EajW_HWrgH_r1VYUC55NL7@mail.gmail.com>
	<7428D380-5C70-4A71-9273-C56DBD10EFCB@cs.usfca.edu>
	<BANLkTi=5SCB3A6vjDjat9r8vixQ2CFV5Vw@mail.gmail.com>
	<BANLkTi=fNnf7q16Fb-SBDf4Rzw-QrtcTYw@mail.gmail.com>
	<040b8570fb5f0f99c8b0548adf07e0df@mail.gmail.com>
Message-ID: <BANLkTim5sMjb+jb4P92838T4Bdfu-bohBA@mail.gmail.com>

On Thu, Apr 7, 2011 at 2:02 PM, Jim Idle <jimi at temporal-wave.com> wrote:
> String template is already in Maven central - we are just debating what to
> do with 4.0 here as it is not yet in there.
>
> However, I cannot lose Maven support as I must have 50 customers who I
> have made reliant on it. As I don't want to be nailed to a cross, I will
> build a deployment script instead of a maven build for the components,
> other than the ANTLR plugin itself.

Exactly - I've manually deployed 4.0 because of this.

Once you have this sorted out, I wonder if there is a more automated
way to push these up so that they become available faster?

From baerrach at gmail.com  Sun Apr 10 16:52:32 2011
From: baerrach at gmail.com (Barrie Treloar)
Date: Mon, 11 Apr 2011 09:22:32 +0930
Subject: [stringtemplate-interest] do we need null?
In-Reply-To: <A912D7C7-2152-4BA4-8E78-C61776CB5A64@cs.usfca.edu>
References: <A912D7C7-2152-4BA4-8E78-C61776CB5A64@cs.usfca.edu>
Message-ID: <BANLkTi=KGnZ6BJ9QhwvriHvhK8NH6c1i7Q@mail.gmail.com>

On Mon, Apr 11, 2011 at 8:25 AM, Terence Parr <parrt at cs.usfca.edu> wrote:
> I'm calling a template that takes an argument but I don't have a value for it. That's fine except that at runtime it warns me that I haven't passed enough parameters. I guess I could pass in "", what should we introduce the notion of null? ?Hmm... maybe it's not worth the extra concept. We have true, false, and empty string.

How would null render?
Isn't empty string usually what you want for a "null" value anyway.

From parrt at cs.usfca.edu  Sun Apr 10 17:19:31 2011
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sun, 10 Apr 2011 17:19:31 -0700
Subject: [stringtemplate-interest] StringTemplate v4.0.1 bug fix and feature
	release
Message-ID: <625F62DE-8D9A-4F3A-8C33-2A1429225CF8@cs.usfca.edu>

Get it while it's hot :)

http://www.antlr.org/wiki/display/ST4/4.0.1+Release+Notes
http://www.stringtemplate.org/download.html

Ter

From parrt at cs.usfca.edu  Sun Apr 10 17:20:44 2011
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sun, 10 Apr 2011 17:20:44 -0700
Subject: [stringtemplate-interest] do we need null?
In-Reply-To: <BANLkTi=KGnZ6BJ9QhwvriHvhK8NH6c1i7Q@mail.gmail.com>
References: <A912D7C7-2152-4BA4-8E78-C61776CB5A64@cs.usfca.edu>
	<BANLkTi=KGnZ6BJ9QhwvriHvhK8NH6c1i7Q@mail.gmail.com>
Message-ID: <44FD7698-3A1D-4D0F-8C57-6D9EBF9491EC@cs.usfca.edu>

Yeah, I guess you're right... "" is basically the same thing for most purposes.
Ter
On Apr 10, 2011, at 4:52 PM, Barrie Treloar wrote:

> On Mon, Apr 11, 2011 at 8:25 AM, Terence Parr <parrt at cs.usfca.edu> wrote:
>> I'm calling a template that takes an argument but I don't have a value for it. That's fine except that at runtime it warns me that I haven't passed enough parameters. I guess I could pass in "", what should we introduce the notion of null?  Hmm... maybe it's not worth the extra concept. We have true, false, and empty string.
> 
> How would null render?
> Isn't empty string usually what you want for a "null" value anyway.
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest


From sharwell at pixelminegames.com  Sun Apr 10 17:37:59 2011
From: sharwell at pixelminegames.com (Sam Harwell)
Date: Sun, 10 Apr 2011 19:37:59 -0500
Subject: [stringtemplate-interest] do we need null?
In-Reply-To: <BANLkTi=KGnZ6BJ9QhwvriHvhK8NH6c1i7Q@mail.gmail.com>
References: <A912D7C7-2152-4BA4-8E78-C61776CB5A64@cs.usfca.edu>
	<BANLkTi=KGnZ6BJ9QhwvriHvhK8NH6c1i7Q@mail.gmail.com>
Message-ID: <022801cbf7e0$b63172a0$229457e0$@pixelminegames.com>

Null and an empty collection (no items) are equivalent. Null and empty
string are equivalent on output, but different if you use them in a test.

However, for cases where your template plans to test a value, it's easy to
make it a true/false parameter instead of a string.

In my ST3 templates, there were *many* places where I wished there were a
null value. With the added Boolean literals in ST4, every last one of them
was immediately resolved.

Sam

-----Original Message-----
From: stringtemplate-interest-bounces at antlr.org
[mailto:stringtemplate-interest-bounces at antlr.org] On Behalf Of Barrie
Treloar
Sent: Sunday, April 10, 2011 6:53 PM
To: Terence Parr
Cc: stringtemplate-interest List
Subject: Re: [stringtemplate-interest] do we need null?

On Mon, Apr 11, 2011 at 8:25 AM, Terence Parr <parrt at cs.usfca.edu> wrote:
> I'm calling a template that takes an argument but I don't have a value for
it. That's fine except that at runtime it warns me that I haven't passed
enough parameters. I guess I could pass in "", what should we introduce the
notion of null? ?Hmm... maybe it's not worth the extra concept. We have
true, false, and empty string.

How would null render?
Isn't empty string usually what you want for a "null" value anyway.
_______________________________________________
stringtemplate-interest mailing list
stringtemplate-interest at antlr.org
http://www.antlr.org/mailman/listinfo/stringtemplate-interest


From parrt at cs.usfca.edu  Mon Apr 11 08:19:01 2011
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon, 11 Apr 2011 08:19:01 -0700
Subject: [stringtemplate-interest] global boolean
Message-ID: <F974003A-266D-476C-9C08-0CBC59C35599@cs.usfca.edu>

ooops. the intro of STGroup.iterateAcrossValues to make maps iterate across values ala v3 not keys like v4 could be a problem if someone uses ANTLR's Tool object in their VM *and* ST v4.  ANTLR sets this for v3 compat but if, say, eclipse calls antlr but a plugin uses ST v4 "properly"...bang!

maybe put it on STGroup instances and force antlr to set it all over in code.  i guess that is better. grr...I was stupido this weekend.

Ter

From sharwell at pixelminegames.com  Mon Apr 11 08:59:00 2011
From: sharwell at pixelminegames.com (Sam Harwell)
Date: Mon, 11 Apr 2011 10:59:00 -0500
Subject: [stringtemplate-interest] global boolean
In-Reply-To: <F974003A-266D-476C-9C08-0CBC59C35599@cs.usfca.edu>
References: <F974003A-266D-476C-9C08-0CBC59C35599@cs.usfca.edu>
Message-ID: <025401cbf861$606fd8d0$214f8a70$@pixelminegames.com>

I made it an instance variable from the start for just this reason. :)

Set it to true for the STGroup created in CodeGenerator (in the Tool).

Change the signature of convertAnythingIteratableToIterator to
convertAnythingIteratableToIterator(InstanceScope, object). That will reveal
a number of other methods that need the exact same.

Test the value with
(scope.st.groupThatCreatedThisInstance.iterateAcrossValues). (I believe this
is correct - for the C# port it's frame.Template.Group.IterateAcrossValues).

Sam

-----Original Message-----
From: stringtemplate-interest-bounces at antlr.org
[mailto:stringtemplate-interest-bounces at antlr.org] On Behalf Of Terence Parr
Sent: Monday, April 11, 2011 10:19 AM
To: stringtemplate-interest List
Subject: [stringtemplate-interest] global boolean

ooops. the intro of STGroup.iterateAcrossValues to make maps iterate across
values ala v3 not keys like v4 could be a problem if someone uses ANTLR's
Tool object in their VM *and* ST v4.  ANTLR sets this for v3 compat but if,
say, eclipse calls antlr but a plugin uses ST v4 "properly"...bang!

maybe put it on STGroup instances and force antlr to set it all over in
code.  i guess that is better. grr...I was stupido this weekend.

Ter
_______________________________________________
stringtemplate-interest mailing list
stringtemplate-interest at antlr.org
http://www.antlr.org/mailman/listinfo/stringtemplate-interest


From parrt at cs.usfca.edu  Wed Apr 13 12:33:18 2011
From: parrt at cs.usfca.edu (Terence Parr)
Date: Wed, 13 Apr 2011 12:33:18 -0700
Subject: [stringtemplate-interest] global boolean
In-Reply-To: <025401cbf861$606fd8d0$214f8a70$@pixelminegames.com>
References: <F974003A-266D-476C-9C08-0CBC59C35599@cs.usfca.edu>
	<025401cbf861$606fd8d0$214f8a70$@pixelminegames.com>
Message-ID: <B5CFA9EA-12A1-4F07-9D22-30CC4C5E65F5@cs.usfca.edu>

ok, I'm changing it to an instance variable now as well.
Ter
On Apr 11, 2011, at 8:59 AM, Sam Harwell wrote:

> I made it an instance variable from the start for just this reason. :)
> 
> Set it to true for the STGroup created in CodeGenerator (in the Tool).
> 
> Change the signature of convertAnythingIteratableToIterator to
> convertAnythingIteratableToIterator(InstanceScope, object). That will reveal
> a number of other methods that need the exact same.
> 
> Test the value with
> (scope.st.groupThatCreatedThisInstance.iterateAcrossValues). (I believe this
> is correct - for the C# port it's frame.Template.Group.IterateAcrossValues).
> 
> Sam
> 
> -----Original Message-----
> From: stringtemplate-interest-bounces at antlr.org
> [mailto:stringtemplate-interest-bounces at antlr.org] On Behalf Of Terence Parr
> Sent: Monday, April 11, 2011 10:19 AM
> To: stringtemplate-interest List
> Subject: [stringtemplate-interest] global boolean
> 
> ooops. the intro of STGroup.iterateAcrossValues to make maps iterate across
> values ala v3 not keys like v4 could be a problem if someone uses ANTLR's
> Tool object in their VM *and* ST v4.  ANTLR sets this for v3 compat but if,
> say, eclipse calls antlr but a plugin uses ST v4 "properly"...bang!
> 
> maybe put it on STGroup instances and force antlr to set it all over in
> code.  i guess that is better. grr...I was stupido this weekend.
> 
> Ter
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
> 


From parrt at cs.usfca.edu  Wed Apr 13 12:34:46 2011
From: parrt at cs.usfca.edu (Terence Parr)
Date: Wed, 13 Apr 2011 12:34:46 -0700
Subject: [stringtemplate-interest] global boolean
In-Reply-To: <B5CFA9EA-12A1-4F07-9D22-30CC4C5E65F5@cs.usfca.edu>
References: <F974003A-266D-476C-9C08-0CBC59C35599@cs.usfca.edu>
	<025401cbf861$606fd8d0$214f8a70$@pixelminegames.com>
	<B5CFA9EA-12A1-4F07-9D22-30CC4C5E65F5@cs.usfca.edu>
Message-ID: <02C2A3EE-DA2E-4C38-9E99-7B06AA5D058A@cs.usfca.edu>

Actually I will have to addAs a to do item. I need a stable ST that the ANTLR target developers could use for the moment.
ter
On Apr 13, 2011, at 12:33 PM, Terence Parr wrote:

> ok, I'm changing it to an instance variable now as well.
> Ter
> On Apr 11, 2011, at 8:59 AM, Sam Harwell wrote:
> 
>> I made it an instance variable from the start for just this reason. :)
>> 
>> Set it to true for the STGroup created in CodeGenerator (in the Tool).
>> 
>> Change the signature of convertAnythingIteratableToIterator to
>> convertAnythingIteratableToIterator(InstanceScope, object). That will reveal
>> a number of other methods that need the exact same.
>> 
>> Test the value with
>> (scope.st.groupThatCreatedThisInstance.iterateAcrossValues). (I believe this
>> is correct - for the C# port it's frame.Template.Group.IterateAcrossValues).
>> 
>> Sam
>> 
>> -----Original Message-----
>> From: stringtemplate-interest-bounces at antlr.org
>> [mailto:stringtemplate-interest-bounces at antlr.org] On Behalf Of Terence Parr
>> Sent: Monday, April 11, 2011 10:19 AM
>> To: stringtemplate-interest List
>> Subject: [stringtemplate-interest] global boolean
>> 
>> ooops. the intro of STGroup.iterateAcrossValues to make maps iterate across
>> values ala v3 not keys like v4 could be a problem if someone uses ANTLR's
>> Tool object in their VM *and* ST v4.  ANTLR sets this for v3 compat but if,
>> say, eclipse calls antlr but a plugin uses ST v4 "properly"...bang!
>> 
>> maybe put it on STGroup instances and force antlr to set it all over in
>> code.  i guess that is better. grr...I was stupido this weekend.
>> 
>> Ter
>> _______________________________________________
>> stringtemplate-interest mailing list
>> stringtemplate-interest at antlr.org
>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>> 
> 
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest


From baerrach at gmail.com  Wed Apr 13 21:37:22 2011
From: baerrach at gmail.com (Barrie Treloar)
Date: Thu, 14 Apr 2011 14:07:22 +0930
Subject: [stringtemplate-interest] Building ST 4
Message-ID: <BANLkTinybCMQkAqiB9zcuhsTbq=tkH8P0A@mail.gmail.com>

A couple of questions.

1) build.properties

Is there a reason why the instructions do not say to copy
antlr-3.3-complete.jar and ant-antlr3.jar into ant.library.dir?
This makes it easier to run ant as you don't need to muck about with
classpath stuff.
I can understand if you are on a multi-user machine that has a central
installation of ant, but these can still be dropped in via due
process.

This makes the build.properties lines simpler (and a little more cross platform)
i.e.:
antlr3.jar=${ant.library.dir}/antlr-3.3-complete.jar
ant-antlr3.jar=${ant.library.dir}/ant-antlr3.jar


2) build.xml

The compile target specified Java 1.5:

    <javac destdir="${build.dir}/classes"
           source="1.5"
           target="1.5"
           debug="true"

Yet ST.java is using Java 6 features (Arrays.copyOf), see
http://download.oracle.com/javase/1.5.0/docs/api/java/util/Arrays.html
I think, if you want to stick with Java 1.5, you need to use
http://download.oracle.com/javase/1.5.0/docs/api/java/lang/System.html#arraycopy(java.lang.Object,%20int,%20java.lang.Object,%20int,%20int)
Or alternatively use an ArrayList.

Cheers
Barrie

From baerrach at gmail.com  Wed Apr 13 21:42:59 2011
From: baerrach at gmail.com (Barrie Treloar)
Date: Thu, 14 Apr 2011 14:12:59 +0930
Subject: [stringtemplate-interest] Logging framework?
Message-ID: <BANLkTi=r1rSnBD=x4HZKgTXEuo313deO8g@mail.gmail.com>

Is there a reason for not using a logging framework?

Instead there the code uses:
  if ( verbose ) System.out.println("getEmbeddedInstanceOf("+name+")");

I ask because I'd like to enhance the feedback from failure conditions
and using java.logging (or log4j) would be nicer.

From sharwell at pixelminegames.com  Thu Apr 14 05:38:31 2011
From: sharwell at pixelminegames.com (Sam Harwell)
Date: Thu, 14 Apr 2011 07:38:31 -0500
Subject: [stringtemplate-interest] Logging framework?
In-Reply-To: <BANLkTi=r1rSnBD=x4HZKgTXEuo313deO8g@mail.gmail.com>
References: <BANLkTi=r1rSnBD=x4HZKgTXEuo313deO8g@mail.gmail.com>
Message-ID: <03a701cbfaa0$dd4acf90$97e06eb0$@pixelminegames.com>

Ter is going to have to answer this fully, but from what I've seen these
messages are generally in place for the development of ST itself. Currently
you can provide a custom implementation of STErrorListener or ErrorManager
to handle compilation and runtime messages for ST users.

Sam

-----Original Message-----
From: stringtemplate-interest-bounces at antlr.org
[mailto:stringtemplate-interest-bounces at antlr.org] On Behalf Of Barrie
Treloar
Sent: Wednesday, April 13, 2011 11:43 PM
To: stringtemplate-interest Template
Subject: [stringtemplate-interest] Logging framework?

Is there a reason for not using a logging framework?

Instead there the code uses:
  if ( verbose ) System.out.println("getEmbeddedInstanceOf("+name+")");

I ask because I'd like to enhance the feedback from failure conditions and
using java.logging (or log4j) would be nicer.
_______________________________________________
stringtemplate-interest mailing list
stringtemplate-interest at antlr.org
http://www.antlr.org/mailman/listinfo/stringtemplate-interest


From jimi at temporal-wave.com  Thu Apr 14 06:53:06 2011
From: jimi at temporal-wave.com (Jim Idle)
Date: Thu, 14 Apr 2011 06:53:06 -0700
Subject: [stringtemplate-interest] Building ST 4
In-Reply-To: <BANLkTinybCMQkAqiB9zcuhsTbq=tkH8P0A@mail.gmail.com>
References: <BANLkTinybCMQkAqiB9zcuhsTbq=tkH8P0A@mail.gmail.com>
Message-ID: <2a834b2872d8646d495e9854ed8b9b11@mail.gmail.com>

This is why ant sucks :(

Jim

> -----Original Message-----
> From: stringtemplate-interest-bounces at antlr.org [mailto:stringtemplate-
> interest-bounces at antlr.org] On Behalf Of Barrie Treloar
> Sent: Wednesday, April 13, 2011 9:37 PM
> To: stringtemplate-interest Template
> Subject: [stringtemplate-interest] Building ST 4
>
> A couple of questions.
>
> 1) build.properties
>
> Is there a reason why the instructions do not say to copy antlr-3.3-
> complete.jar and ant-antlr3.jar into ant.library.dir?
> This makes it easier to run ant as you don't need to muck about with
> classpath stuff.
> I can understand if you are on a multi-user machine that has a central
> installation of ant, but these can still be dropped in via due process.
>
> This makes the build.properties lines simpler (and a little more cross
> platform)
> i.e.:
> antlr3.jar=${ant.library.dir}/antlr-3.3-complete.jar
> ant-antlr3.jar=${ant.library.dir}/ant-antlr3.jar
>
>
> 2) build.xml
>
> The compile target specified Java 1.5:
>
>     <javac destdir="${build.dir}/classes"
>            source="1.5"
>            target="1.5"
>            debug="true"
>
> Yet ST.java is using Java 6 features (Arrays.copyOf), see
> http://download.oracle.com/javase/1.5.0/docs/api/java/util/Arrays.html
> I think, if you want to stick with Java 1.5, you need to use
> http://download.oracle.com/javase/1.5.0/docs/api/java/lang/System.html#
> arraycopy(java.lang.Object,%20int,%20java.lang.Object,%20int,%20int)
> Or alternatively use an ArrayList.
>
> Cheers
> Barrie
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest

From parrt at cs.usfca.edu  Thu Apr 14 09:58:02 2011
From: parrt at cs.usfca.edu (Terence Parr)
Date: Thu, 14 Apr 2011 09:58:02 -0700
Subject: [stringtemplate-interest] Building ST 4
In-Reply-To: <2a834b2872d8646d495e9854ed8b9b11@mail.gmail.com>
References: <BANLkTinybCMQkAqiB9zcuhsTbq=tkH8P0A@mail.gmail.com>
	<2a834b2872d8646d495e9854ed8b9b11@mail.gmail.com>
Message-ID: <CE2582A3-443B-4CCD-BDE3-468D4B198D08@cs.usfca.edu>

it's my script ;)

btw, i think we should keep maven structure for antlr v4.  no point in changing since so much relies on it.
T
On Apr 14, 2011, at 6:53 AM, Jim Idle wrote:

> This is why ant sucks :(
> 
> Jim
> 
>> -----Original Message-----
>> From: stringtemplate-interest-bounces at antlr.org [mailto:stringtemplate-
>> interest-bounces at antlr.org] On Behalf Of Barrie Treloar
>> Sent: Wednesday, April 13, 2011 9:37 PM
>> To: stringtemplate-interest Template
>> Subject: [stringtemplate-interest] Building ST 4
>> 
>> A couple of questions.
>> 
>> 1) build.properties
>> 
>> Is there a reason why the instructions do not say to copy antlr-3.3-
>> complete.jar and ant-antlr3.jar into ant.library.dir?
>> This makes it easier to run ant as you don't need to muck about with
>> classpath stuff.
>> I can understand if you are on a multi-user machine that has a central
>> installation of ant, but these can still be dropped in via due process.
>> 
>> This makes the build.properties lines simpler (and a little more cross
>> platform)
>> i.e.:
>> antlr3.jar=${ant.library.dir}/antlr-3.3-complete.jar
>> ant-antlr3.jar=${ant.library.dir}/ant-antlr3.jar
>> 
>> 
>> 2) build.xml
>> 
>> The compile target specified Java 1.5:
>> 
>>    <javac destdir="${build.dir}/classes"
>>           source="1.5"
>>           target="1.5"
>>           debug="true"
>> 
>> Yet ST.java is using Java 6 features (Arrays.copyOf), see
>> http://download.oracle.com/javase/1.5.0/docs/api/java/util/Arrays.html
>> I think, if you want to stick with Java 1.5, you need to use
>> http://download.oracle.com/javase/1.5.0/docs/api/java/lang/System.html#
>> arraycopy(java.lang.Object,%20int,%20java.lang.Object,%20int,%20int)
>> Or alternatively use an ArrayList.
>> 
>> Cheers
>> Barrie
>> _______________________________________________
>> stringtemplate-interest mailing list
>> stringtemplate-interest at antlr.org
>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest


From parrt at cs.usfca.edu  Thu Apr 14 10:02:08 2011
From: parrt at cs.usfca.edu (Terence Parr)
Date: Thu, 14 Apr 2011 10:02:08 -0700
Subject: [stringtemplate-interest] Building ST 4
In-Reply-To: <BANLkTinybCMQkAqiB9zcuhsTbq=tkH8P0A@mail.gmail.com>
References: <BANLkTinybCMQkAqiB9zcuhsTbq=tkH8P0A@mail.gmail.com>
Message-ID: <1582C53D-A243-4BC9-9FB2-0AD1EBF0EBC2@cs.usfca.edu>

Added

http://www.antlr.org/jira/browse/STFOUR-13

Ter
On Apr 13, 2011, at 9:37 PM, Barrie Treloar wrote:

> A couple of questions.
> 
> 1) build.properties
> 
> Is there a reason why the instructions do not say to copy
> antlr-3.3-complete.jar and ant-antlr3.jar into ant.library.dir?
> This makes it easier to run ant as you don't need to muck about with
> classpath stuff.
> I can understand if you are on a multi-user machine that has a central
> installation of ant, but these can still be dropped in via due
> process.
> 
> This makes the build.properties lines simpler (and a little more cross platform)
> i.e.:
> antlr3.jar=${ant.library.dir}/antlr-3.3-complete.jar
> ant-antlr3.jar=${ant.library.dir}/ant-antlr3.jar
> 
> 
> 2) build.xml
> 
> The compile target specified Java 1.5:
> 
>    <javac destdir="${build.dir}/classes"
>           source="1.5"
>           target="1.5"
>           debug="true"
> 
> Yet ST.java is using Java 6 features (Arrays.copyOf), see
> http://download.oracle.com/javase/1.5.0/docs/api/java/util/Arrays.html
> I think, if you want to stick with Java 1.5, you need to use
> http://download.oracle.com/javase/1.5.0/docs/api/java/lang/System.html#arraycopy(java.lang.Object,%20int,%20java.lang.Object,%20int,%20int)
> Or alternatively use an ArrayList.
> 
> Cheers
> Barrie
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest


From baerrach at gmail.com  Thu Apr 14 17:49:27 2011
From: baerrach at gmail.com (Barrie Treloar)
Date: Fri, 15 Apr 2011 10:19:27 +0930
Subject: [stringtemplate-interest] Logging framework?
In-Reply-To: <03a701cbfaa0$dd4acf90$97e06eb0$@pixelminegames.com>
References: <BANLkTi=r1rSnBD=x4HZKgTXEuo313deO8g@mail.gmail.com>
	<03a701cbfaa0$dd4acf90$97e06eb0$@pixelminegames.com>
Message-ID: <BANLkTikEpfJd7BixRoOuqG-ObFxjJ-07xQ@mail.gmail.com>

On Thu, Apr 14, 2011 at 10:08 PM, Sam Harwell
<sharwell at pixelminegames.com> wrote:
> Ter is going to have to answer this fully, but from what I've seen these
> messages are generally in place for the development of ST itself. Currently
> you can provide a custom implementation of STErrorListener or ErrorManager
> to handle compilation and runtime messages for ST users.

Got one of those :)

My main problem was that moving from ST 3 to ST 4 wasn't a simple
"flick the switch" and I ran into problems that were not easily
diagnosable without access to the code.

Perhaps its the idiotic way I'm invoking ST, ala Maven -> Ant ->
Javascript and where input attributes are in a single JSON file and
templates are located on the classpath and which template to invoke is
passed to Javascript via Ant parameters.
I'll swear, with hand on heart, that what I am doing is sane.

But because of this, I found that templates weren't being located.
Even with STGroup.verbose = true I didn't get enough information to
find the answer.

In the end I think it was a simple problem, something like I was
asking it to load the template "MyTemplate.st" when I shouldn't have
been including the .st suffix.

If I can contribute to the code so that this sort of problem is better
diagnosed and this save someone else (or even me when I come back to
this project six months from now) I will be a happy man.

I have a personal aversion to things like STGroup.verbose for
debugging, but I'll swallow that if that's what Ter wants.
If I can get some guidance on how these extra debug/info statements
can be incorporated then I can do it in the "blessed way"

Cheers.

From baerrach at gmail.com  Thu Apr 14 17:51:59 2011
From: baerrach at gmail.com (Barrie Treloar)
Date: Fri, 15 Apr 2011 10:21:59 +0930
Subject: [stringtemplate-interest] Building ST 4
In-Reply-To: <CE2582A3-443B-4CCD-BDE3-468D4B198D08@cs.usfca.edu>
References: <BANLkTinybCMQkAqiB9zcuhsTbq=tkH8P0A@mail.gmail.com>
	<2a834b2872d8646d495e9854ed8b9b11@mail.gmail.com>
	<CE2582A3-443B-4CCD-BDE3-468D4B198D08@cs.usfca.edu>
Message-ID: <BANLkTik8UrLk9Q7siujoJ7V+3=Gu6FpkQw@mail.gmail.com>

On Fri, Apr 15, 2011 at 2:28 AM, Terence Parr <parrt at cs.usfca.edu> wrote:
> it's my script ;)
>
> btw, i think we should keep maven structure for antlr v4. ?no point in changing since so much relies on it.

I'm a little confused.

I wasn't proposing a change in structure.

p.s. Java 1.5 vs 1.6 wasn't answered.

From parrt at cs.usfca.edu  Thu Apr 14 20:05:08 2011
From: parrt at cs.usfca.edu (Terence Parr)
Date: Thu, 14 Apr 2011 20:05:08 -0700
Subject: [stringtemplate-interest] Building ST 4
In-Reply-To: <BANLkTik8UrLk9Q7siujoJ7V+3=Gu6FpkQw@mail.gmail.com>
References: <BANLkTinybCMQkAqiB9zcuhsTbq=tkH8P0A@mail.gmail.com>
	<2a834b2872d8646d495e9854ed8b9b11@mail.gmail.com>
	<CE2582A3-443B-4CCD-BDE3-468D4B198D08@cs.usfca.edu>
	<BANLkTik8UrLk9Q7siujoJ7V+3=Gu6FpkQw@mail.gmail.com>
Message-ID: <0A115C23-A918-443E-A064-D967347A026B@cs.usfca.edu>


On Apr 14, 2011, at 5:51 PM, Barrie Treloar wrote:

> On Fri, Apr 15, 2011 at 2:28 AM, Terence Parr <parrt at cs.usfca.edu> wrote:
>> it's my script ;)
>> 
>> btw, i think we should keep maven structure for antlr v4.  no point in changing since so much relies on it.
> 
> I'm a little confused.
> 
> I wasn't proposing a change in structure.

mixing threads sorry.

> 
> p.s. Java 1.5 vs 1.6 wasn't answered.

on todo list to think about

T


From baerrach at gmail.com  Thu Apr 14 20:48:25 2011
From: baerrach at gmail.com (Barrie Treloar)
Date: Fri, 15 Apr 2011 13:18:25 +0930
Subject: [stringtemplate-interest] Building ST 4
In-Reply-To: <0A115C23-A918-443E-A064-D967347A026B@cs.usfca.edu>
References: <BANLkTinybCMQkAqiB9zcuhsTbq=tkH8P0A@mail.gmail.com>
	<2a834b2872d8646d495e9854ed8b9b11@mail.gmail.com>
	<CE2582A3-443B-4CCD-BDE3-468D4B198D08@cs.usfca.edu>
	<BANLkTik8UrLk9Q7siujoJ7V+3=Gu6FpkQw@mail.gmail.com>
	<0A115C23-A918-443E-A064-D967347A026B@cs.usfca.edu>
Message-ID: <BANLkTincaDVDynbcpYM=rVpChhTAvMbQiA@mail.gmail.com>

On Fri, Apr 15, 2011 at 12:35 PM, Terence Parr <parrt at cs.usfca.edu> wrote:
> On Apr 14, 2011, at 5:51 PM, Barrie Treloar wrote:
>> On Fri, Apr 15, 2011 at 2:28 AM, Terence Parr <parrt at cs.usfca.edu> wrote:
>>> it's my script ;)
>>>
>>> btw, i think we should keep maven structure for antlr v4. ?no point in changing since so much relies on it.
>>
>> I'm a little confused.
>>
>> I wasn't proposing a change in structure.
>
> mixing threads sorry.

No worries.

>> p.s. Java 1.5 vs 1.6 wasn't answered.
>
> on todo list to think about

My workaround was to set up my system to use Java 1.6 before running ant.
It should complain about target=1.5, source=1.5 but it doesn't.

By default, at work, we are using a 1.5 jdk which is why I noticed the problem.

From collin.fagan at gmail.com  Fri Apr 15 07:07:27 2011
From: collin.fagan at gmail.com (Collin Fagan)
Date: Fri, 15 Apr 2011 09:07:27 -0500
Subject: [stringtemplate-interest] ST4: serializable for Template for
	Template Group?
Message-ID: <BANLkTikSis04gzb4awzihyY1Fbm9iK5BUA@mail.gmail.com>

Hi Ter,

I've been using ST with Apache Wicket. Wicket uses serialization for short
term storage of state. I'd like to be able to serialize a template and/or
template group with my wicket page. Can you implement serializable in ST4?
It really is just a marker interface, I'm not asking for a long term commit
to any particular serialization strategy. Right now I subclass
StringTemplateGroup and StringTemplate in ST3 and impliment Serializable to
get around this.

Thanks,

Collin
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20110415/9ef8fd8b/attachment.html 

From collin.fagan at gmail.com  Sat Apr 16 06:24:11 2011
From: collin.fagan at gmail.com (Collin Fagan)
Date: Sat, 16 Apr 2011 08:24:11 -0500
Subject: [stringtemplate-interest] Strum 0.2 Release
Message-ID: <BANLkTimZ=J1fsOdHibKZcNOvE+heL6+v=Q@mail.gmail.com>

Hi Everyone,

I've put together STRUM 0.2 (http://project-strumm.sourceforge.net/).

New in 0.2:

   - Upgraded to ST 4.0.1
   - AnnotationModelAdapter<http://project-strum.svn.sourceforge.net/viewvc/project-strum/trunk/strum-project/strum/src/main/java/com/collinfagan/strum/adapters/annotations/AnnotationModelAdapter.java?revision=31&view=markup>-
This exposes methods or fields annotated with the
   AdapterTarget<http://project-strum.svn.sourceforge.net/viewvc/project-strum/trunk/strum-project/strum/src/main/java/com/collinfagan/strum/adapters/annotations/AdapterTarget.java?view=log>annotation.
      - Here is an
example<http://project-strum.svn.sourceforge.net/viewvc/project-strum/trunk/strum-project/strum/src/test/java/com/collinfagan/strum/adaptors/AnnotatedClass.java?revision=33&view=markup>of
how this works.
   - SpringContextModelAdapter - This allows one to pull any bean out of an
   application context from ST.
   - Javadocs<http://project-strum.sourceforge.net/strum-0.2-snapshot/apidocs/>

Collin
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20110416/4fda6be9/attachment.html 

From parrt at cs.usfca.edu  Sat Apr 16 11:55:25 2011
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sat, 16 Apr 2011 11:55:25 -0700
Subject: [stringtemplate-interest] Building ST 4
In-Reply-To: <BANLkTinybCMQkAqiB9zcuhsTbq=tkH8P0A@mail.gmail.com>
References: <BANLkTinybCMQkAqiB9zcuhsTbq=tkH8P0A@mail.gmail.com>
Message-ID: <9E5A3C20-BC39-4D27-81E7-9C178B7C790F@cs.usfca.edu>

closed. 
http://www.antlr.org/jira/browse/STFOUR-13


* Made compatible with Java 1.5; removed Arrays.copyOf() ref.
* Updated ANT build to ref ant lib dir not /usr/local/lib/

Ter

On Apr 13, 2011, at 9:37 PM, Barrie Treloar wrote:

> A couple of questions.
> 
> 1) build.properties
> 
> Is there a reason why the instructions do not say to copy
> antlr-3.3-complete.jar and ant-antlr3.jar into ant.library.dir?
> This makes it easier to run ant as you don't need to muck about with
> classpath stuff.
> I can understand if you are on a multi-user machine that has a central
> installation of ant, but these can still be dropped in via due
> process.
> 
> This makes the build.properties lines simpler (and a little more cross platform)
> i.e.:
> antlr3.jar=${ant.library.dir}/antlr-3.3-complete.jar
> ant-antlr3.jar=${ant.library.dir}/ant-antlr3.jar
> 
> 
> 2) build.xml
> 
> The compile target specified Java 1.5:
> 
>    <javac destdir="${build.dir}/classes"
>           source="1.5"
>           target="1.5"
>           debug="true"
> 
> Yet ST.java is using Java 6 features (Arrays.copyOf), see
> http://download.oracle.com/javase/1.5.0/docs/api/java/util/Arrays.html
> I think, if you want to stick with Java 1.5, you need to use
> http://download.oracle.com/javase/1.5.0/docs/api/java/lang/System.html#arraycopy(java.lang.Object,%20int,%20java.lang.Object,%20int,%20int)
> Or alternatively use an ArrayList.
> 
> Cheers
> Barrie
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest


From parrt at cs.usfca.edu  Sat Apr 16 12:44:04 2011
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sat, 16 Apr 2011 12:44:04 -0700
Subject: [stringtemplate-interest] Logging framework?
In-Reply-To: <BANLkTikEpfJd7BixRoOuqG-ObFxjJ-07xQ@mail.gmail.com>
References: <BANLkTi=r1rSnBD=x4HZKgTXEuo313deO8g@mail.gmail.com>
	<03a701cbfaa0$dd4acf90$97e06eb0$@pixelminegames.com>
	<BANLkTikEpfJd7BixRoOuqG-ObFxjJ-07xQ@mail.gmail.com>
Message-ID: <30BD3F80-4E78-4859-9F60-1D8FFF1E36E4@cs.usfca.edu>

Hi Barrie. Did java -v help? Guess that only helps with loading classes not other things via the class path. What information ended up being helpful to you?

Ter
On Apr 14, 2011, at 5:49 PM, Barrie Treloar wrote:

> On Thu, Apr 14, 2011 at 10:08 PM, Sam Harwell
> <sharwell at pixelminegames.com> wrote:
>> Ter is going to have to answer this fully, but from what I've seen these
>> messages are generally in place for the development of ST itself. Currently
>> you can provide a custom implementation of STErrorListener or ErrorManager
>> to handle compilation and runtime messages for ST users.
> 
> Got one of those :)
> 
> My main problem was that moving from ST 3 to ST 4 wasn't a simple
> "flick the switch" and I ran into problems that were not easily
> diagnosable without access to the code.
> 
> Perhaps its the idiotic way I'm invoking ST, ala Maven -> Ant ->
> Javascript and where input attributes are in a single JSON file and
> templates are located on the classpath and which template to invoke is
> passed to Javascript via Ant parameters.
> I'll swear, with hand on heart, that what I am doing is sane.
> 
> But because of this, I found that templates weren't being located.
> Even with STGroup.verbose = true I didn't get enough information to
> find the answer.
> 
> In the end I think it was a simple problem, something like I was
> asking it to load the template "MyTemplate.st" when I shouldn't have
> been including the .st suffix.
> 
> If I can contribute to the code so that this sort of problem is better
> diagnosed and this save someone else (or even me when I come back to
> this project six months from now) I will be a happy man.
> 
> I have a personal aversion to things like STGroup.verbose for
> debugging, but I'll swallow that if that's what Ter wants.
> If I can get some guidance on how these extra debug/info statements
> can be incorporated then I can do it in the "blessed way"
> 
> Cheers.
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest


From parrt at cs.usfca.edu  Sun Apr 17 09:37:10 2011
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sun, 17 Apr 2011 09:37:10 -0700
Subject: [stringtemplate-interest] ST4: serializable for Template for
	Template Group?
In-Reply-To: <BANLkTikSis04gzb4awzihyY1Fbm9iK5BUA@mail.gmail.com>
References: <BANLkTikSis04gzb4awzihyY1Fbm9iK5BUA@mail.gmail.com>
Message-ID: <A21307C9-2AAD-4740-BD2C-936FE9705F62@cs.usfca.edu>

Hmm...oh,So you don't want me to actually specify the implementation, just insert "implements Serializable"?

Ter
On Apr 15, 2011, at 7:07 AM, Collin Fagan wrote:

> Hi Ter,
> 
> I've been using ST with Apache Wicket. Wicket uses serialization for short term storage of state. I'd like to be able to serialize a template and/or template group with my wicket page. Can you implement serializable in ST4? It really is just a marker interface, I'm not asking for a long term commit to any particular serialization strategy. Right now I subclass StringTemplateGroup and StringTemplate in ST3 and impliment Serializable to get around this. 
> 
> Thanks,
> 
> Collin
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest


From collin.fagan at gmail.com  Sun Apr 17 10:48:26 2011
From: collin.fagan at gmail.com (Collin Fagan)
Date: Sun, 17 Apr 2011 12:48:26 -0500
Subject: [stringtemplate-interest] ST4: serializable for Template for
 Template Group?
In-Reply-To: <A21307C9-2AAD-4740-BD2C-936FE9705F62@cs.usfca.edu>
References: <BANLkTikSis04gzb4awzihyY1Fbm9iK5BUA@mail.gmail.com>
	<A21307C9-2AAD-4740-BD2C-936FE9705F62@cs.usfca.edu>
Message-ID: <BANLkTi=3bs=PTejwzB9GTBeSJbByLwhwRg@mail.gmail.com>

You can do as you like, I'm just saying you don't *have* to in order to
satisfy my request.

Collin

On Sun, Apr 17, 2011 at 11:37 AM, Terence Parr <parrt at cs.usfca.edu> wrote:

> Hmm...oh,So you don't want me to actually specify the implementation, just
> insert "implements Serializable"?
>
> Ter
> On Apr 15, 2011, at 7:07 AM, Collin Fagan wrote:
>
> > Hi Ter,
> >
> > I've been using ST with Apache Wicket. Wicket uses serialization for
> short term storage of state. I'd like to be able to serialize a template
> and/or template group with my wicket page. Can you implement serializable in
> ST4? It really is just a marker interface, I'm not asking for a long term
> commit to any particular serialization strategy. Right now I subclass
> StringTemplateGroup and StringTemplate in ST3 and impliment Serializable to
> get around this.
> >
> > Thanks,
> >
> > Collin
> > _______________________________________________
> > stringtemplate-interest mailing list
> > stringtemplate-interest at antlr.org
> > http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20110417/b978ec8e/attachment.html 

From parrt at cs.usfca.edu  Sun Apr 17 11:06:03 2011
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sun, 17 Apr 2011 11:06:03 -0700
Subject: [stringtemplate-interest] ST4: serializable for Template for
	Template Group?
In-Reply-To: <BANLkTi=3bs=PTejwzB9GTBeSJbByLwhwRg@mail.gmail.com>
References: <BANLkTikSis04gzb4awzihyY1Fbm9iK5BUA@mail.gmail.com>
	<A21307C9-2AAD-4740-BD2C-936FE9705F62@cs.usfca.edu>
	<BANLkTi=3bs=PTejwzB9GTBeSJbByLwhwRg@mail.gmail.com>
Message-ID: <851AAEF2-0013-453D-B1E5-E08AD704400E@cs.usfca.edu>

Done.

* Added implements Serializable to ST, STGroup.

Submitting change 8257.
Locking 3 files ...
edit //depot/code/ST4/java/main/CHANGES.txt#81
edit //depot/code/ST4/java/main/src/org/stringtemplate/v4/ST.java#37
edit //depot/code/ST4/java/main/src/org/stringtemplate/v4/STGroup.java#53
Change 8257 submitted.

Ter

On Apr 17, 2011, at 10:48 AM, Collin Fagan wrote:

> You can do as you like, I'm just saying you don't have to in order to satisfy my request.
> 
> Collin
> 
> On Sun, Apr 17, 2011 at 11:37 AM, Terence Parr <parrt at cs.usfca.edu> wrote:
> Hmm...oh,So you don't want me to actually specify the implementation, just insert "implements Serializable"?
> 
> Ter
> On Apr 15, 2011, at 7:07 AM, Collin Fagan wrote:
> 
> > Hi Ter,
> >
> > I've been using ST with Apache Wicket. Wicket uses serialization for short term storage of state. I'd like to be able to serialize a template and/or template group with my wicket page. Can you implement serializable in ST4? It really is just a marker interface, I'm not asking for a long term commit to any particular serialization strategy. Right now I subclass StringTemplateGroup and StringTemplate in ST3 and impliment Serializable to get around this.
> >
> > Thanks,
> >
> > Collin
> > _______________________________________________
> > stringtemplate-interest mailing list
> > stringtemplate-interest at antlr.org
> > http://www.antlr.org/mailman/listinfo/stringtemplate-interest
> 
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
> 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20110417/21255885/attachment.html 

From collin.fagan at gmail.com  Sun Apr 17 11:17:01 2011
From: collin.fagan at gmail.com (Collin Fagan)
Date: Sun, 17 Apr 2011 13:17:01 -0500
Subject: [stringtemplate-interest] ST4: serializable for Template for
 Template Group?
In-Reply-To: <851AAEF2-0013-453D-B1E5-E08AD704400E@cs.usfca.edu>
References: <BANLkTikSis04gzb4awzihyY1Fbm9iK5BUA@mail.gmail.com>
	<A21307C9-2AAD-4740-BD2C-936FE9705F62@cs.usfca.edu>
	<BANLkTi=3bs=PTejwzB9GTBeSJbByLwhwRg@mail.gmail.com>
	<851AAEF2-0013-453D-B1E5-E08AD704400E@cs.usfca.edu>
Message-ID: <BANLkTimn7Zmb2v6Z-A_YAtgUTJ_VfA5PQQ@mail.gmail.com>

Thank you sir :)

On Sun, Apr 17, 2011 at 1:06 PM, Terence Parr <parrt at cs.usfca.edu> wrote:

> Done.
>
> * Added implements Serializable to ST, STGroup.
>
> Submitting change 8257.
> Locking 3 files ...
> edit //depot/code/ST4/java/main/CHANGES.txt#81
> edit //depot/code/ST4/java/main/src/org/stringtemplate/v4/ST.java#37
> edit //depot/code/ST4/java/main/src/org/stringtemplate/v4/STGroup.java#53
> Change 8257 submitted.
>
> Ter
>
> On Apr 17, 2011, at 10:48 AM, Collin Fagan wrote:
>
> You can do as you like, I'm just saying you don't *have* to in order to
> satisfy my request.
>
> Collin
>
> On Sun, Apr 17, 2011 at 11:37 AM, Terence Parr <parrt at cs.usfca.edu> wrote:
>
>> Hmm...oh,So you don't want me to actually specify the implementation, just
>> insert "implements Serializable"?
>>
>> Ter
>> On Apr 15, 2011, at 7:07 AM, Collin Fagan wrote:
>>
>> > Hi Ter,
>> >
>> > I've been using ST with Apache Wicket. Wicket uses serialization for
>> short term storage of state. I'd like to be able to serialize a template
>> and/or template group with my wicket page. Can you implement serializable in
>> ST4? It really is just a marker interface, I'm not asking for a long term
>> commit to any particular serialization strategy. Right now I subclass
>> StringTemplateGroup and StringTemplate in ST3 and impliment Serializable to
>> get around this.
>> >
>> > Thanks,
>> >
>> > Collin
>> > _______________________________________________
>> > stringtemplate-interest mailing list
>> > stringtemplate-interest at antlr.org
>> > http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>>
>> _______________________________________________
>> stringtemplate-interest mailing list
>> stringtemplate-interest at antlr.org
>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>>
>
>
>
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20110417/8688e19b/attachment.html 

From collin.fagan at gmail.com  Sun Apr 17 11:55:57 2011
From: collin.fagan at gmail.com (Collin Fagan)
Date: Sun, 17 Apr 2011 13:55:57 -0500
Subject: [stringtemplate-interest] Composing Model Adapters
Message-ID: <BANLkTinj8+NbMZz_cvHhmXJ7Ac8CaFf7xw@mail.gmail.com>

Hi Everyone,

As I've been working on Strum I have run into the reoccurring question of
'Should this model adapter inherit from ObjectModelAdapter?'. In some cases
it seems right to pass it to OMA when the custom model adapter fails to find
a property. Other times it seems like one might want to try OMA first ..
then go ahead with the 'special case' of the custom model adapter.
Eventually I wanted to just compose a group of model adapters into a
hierarchy. This is where I run to an issue with getProperty(). Since it
throws STNoSuchPropertyException to signal it's failure to find a property I
end up using execptions for flow control, which is a bad idea right?

Example:

public class MultiModelAdapter implements ModelAdaptor {

    private List<ModelAdaptor> adaptors = new ArrayList<ModelAdaptor>();

    @Override
    public Object getProperty(Interpreter interp, ST self, Object o,
            Object property, String propertyName) throws
STNoSuchPropertyException {

        Object value = null;
        boolean found = false;
        for(ModelAdaptor adaptor: adaptors){
            try{
                value = adaptor.getProperty(interp, self, adaptor, property,
propertyName);
                found = true;
            }catch(STNoSuchPropertyException exception){
                continue;
            }
        }
        if(!found){
            throw new STNoSuchPropertyException();
        }
        return value;
    }

}

Is there a way around this or is MA just not meant to be composed like this?

Collin
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20110417/e87c5fe1/attachment-0001.html 

From rafael at alphasimple.com  Sun Apr 17 15:19:06 2011
From: rafael at alphasimple.com (Rafael Chaves)
Date: Sun, 17 Apr 2011 15:19:06 -0700
Subject: [stringtemplate-interest] ST4: serializable for Template for
 Template Group?
Message-ID: <BANLkTimyFv8TsxvH6m3-6LYdT1o7yT4wHQ@mail.gmail.com>

Correct me if I am wrong, but I don't think marking those classes as
Serializable achieves anything. In order for them to be serializable
using the default mechanism, all of their slots must be serializable,
or marked as volatile, which is not the case for the error listener in
StringTemplate/StringTemplateGroup, for instance, at least in version
3.

On Sun, Apr 17, 2011 at 11:56 AM,
<stringtemplate-interest-request at antlr.org> wrote:
> Date: Sun, 17 Apr 2011 09:37:10 -0700
> From: Terence Parr <parrt at cs.usfca.edu>
> Subject: Re: [stringtemplate-interest] ST4: serializable for Template
> ? ? ? ?for ? ? Template Group?
> To: stringtemplate-interest List <stringtemplate-interest at antlr.org>
> Message-ID: <A21307C9-2AAD-4740-BD2C-936FE9705F62 at cs.usfca.edu>
> Content-Type: text/plain; charset=us-ascii
>
> Hmm...oh,So you don't want me to actually specify the implementation, just insert "implements Serializable"?
>
> Ter
> On Apr 15, 2011, at 7:07 AM, Collin Fagan wrote:
>
>> Hi Ter,
>>
>> I've been using ST with Apache Wicket. Wicket uses serialization for short term storage of state. I'd like to be able to serialize a template and/or template group with my wicket page. Can you implement serializable in ST4? It really is just a marker interface, I'm not asking for a long term commit to any particular serialization strategy. Right now I subclass StringTemplateGroup and StringTemplate in ST3 and impliment Serializable to get around this.
>>
>> Thanks,
>>
>> Collin
>> _______________________________________________
>> stringtemplate-interest mailing list
>> stringtemplate-interest at antlr.org
>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest

From parrt at cs.usfca.edu  Sun Apr 17 16:54:12 2011
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sun, 17 Apr 2011 16:54:12 -0700
Subject: [stringtemplate-interest] ST4: serializable for Template for
	Template Group?
In-Reply-To: <BANLkTimyFv8TsxvH6m3-6LYdT1o7yT4wHQ@mail.gmail.com>
References: <BANLkTimyFv8TsxvH6m3-6LYdT1o7yT4wHQ@mail.gmail.com>
Message-ID: <813A9D7F-FDDA-4EC1-8FF8-7871A19828AD@cs.usfca.edu>

Was wondering about that.  Collin: what did you need to do to get it to serialize?
Ter
On Apr 17, 2011, at 3:19 PM, Rafael Chaves wrote:

> Correct me if I am wrong, but I don't think marking those classes as
> Serializable achieves anything. In order for them to be serializable
> using the default mechanism, all of their slots must be serializable,
> or marked as volatile, which is not the case for the error listener in
> StringTemplate/StringTemplateGroup, for instance, at least in version
> 3.
> 
> On Sun, Apr 17, 2011 at 11:56 AM,
> <stringtemplate-interest-request at antlr.org> wrote:
>> Date: Sun, 17 Apr 2011 09:37:10 -0700
>> From: Terence Parr <parrt at cs.usfca.edu>
>> Subject: Re: [stringtemplate-interest] ST4: serializable for Template
>>        for     Template Group?
>> To: stringtemplate-interest List <stringtemplate-interest at antlr.org>
>> Message-ID: <A21307C9-2AAD-4740-BD2C-936FE9705F62 at cs.usfca.edu>
>> Content-Type: text/plain; charset=us-ascii
>> 
>> Hmm...oh,So you don't want me to actually specify the implementation, just insert "implements Serializable"?
>> 
>> Ter
>> On Apr 15, 2011, at 7:07 AM, Collin Fagan wrote:
>> 
>>> Hi Ter,
>>> 
>>> I've been using ST with Apache Wicket. Wicket uses serialization for short term storage of state. I'd like to be able to serialize a template and/or template group with my wicket page. Can you implement serializable in ST4? It really is just a marker interface, I'm not asking for a long term commit to any particular serialization strategy. Right now I subclass StringTemplateGroup and StringTemplate in ST3 and impliment Serializable to get around this.
>>> 
>>> Thanks,
>>> 
>>> Collin
>>> _______________________________________________
>>> stringtemplate-interest mailing list
>>> stringtemplate-interest at antlr.org
>>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest


From collin.fagan at gmail.com  Sun Apr 17 18:29:30 2011
From: collin.fagan at gmail.com (Collin Fagan)
Date: Sun, 17 Apr 2011 20:29:30 -0500
Subject: [stringtemplate-interest] ST4: serializable for Template for
 Template Group?
In-Reply-To: <813A9D7F-FDDA-4EC1-8FF8-7871A19828AD@cs.usfca.edu>
References: <BANLkTimyFv8TsxvH6m3-6LYdT1o7yT4wHQ@mail.gmail.com>
	<813A9D7F-FDDA-4EC1-8FF8-7871A19828AD@cs.usfca.edu>
Message-ID: <BANLkTikUUJNgu33m86a_Ui1Ju-W_AYD4VQ@mail.gmail.com>

Honestly I just inherited from StringTemplateGroup and StringTemplate (in
ST3) and implemented Serialaizeable. It works for me. I had not thought too
deeply about it, mostly because it worked, but that's probably because I
don't use an error handler.  This is an issue because others will implement
an error handler that won't necessarily be Serializable? I think in that
case you would get a Serializable error, and then be forced to implement
Serializable or not use serialization. I guess that would go for model
adapters also... and renderers.

Collin

P.S.

I think you mean transient not volatile.

On Sun, Apr 17, 2011 at 6:54 PM, Terence Parr <parrt at cs.usfca.edu> wrote:

> Was wondering about that.  Collin: what did you need to do to get it to
> serialize?
> Ter
> On Apr 17, 2011, at 3:19 PM, Rafael Chaves wrote:
>
> > Correct me if I am wrong, but I don't think marking those classes as
> > Serializable achieves anything. In order for them to be serializable
> > using the default mechanism, all of their slots must be serializable,
> > or marked as volatile, which is not the case for the error listener in
> > StringTemplate/StringTemplateGroup, for instance, at least in version
> > 3.
> >
> > On Sun, Apr 17, 2011 at 11:56 AM,
> > <stringtemplate-interest-request at antlr.org> wrote:
> >> Date: Sun, 17 Apr 2011 09:37:10 -0700
> >> From: Terence Parr <parrt at cs.usfca.edu>
> >> Subject: Re: [stringtemplate-interest] ST4: serializable for Template
> >>        for     Template Group?
> >> To: stringtemplate-interest List <stringtemplate-interest at antlr.org>
> >> Message-ID: <A21307C9-2AAD-4740-BD2C-936FE9705F62 at cs.usfca.edu>
> >> Content-Type: text/plain; charset=us-ascii
> >>
> >> Hmm...oh,So you don't want me to actually specify the implementation,
> just insert "implements Serializable"?
> >>
> >> Ter
> >> On Apr 15, 2011, at 7:07 AM, Collin Fagan wrote:
> >>
> >>> Hi Ter,
> >>>
> >>> I've been using ST with Apache Wicket. Wicket uses serialization for
> short term storage of state. I'd like to be able to serialize a template
> and/or template group with my wicket page. Can you implement serializable in
> ST4? It really is just a marker interface, I'm not asking for a long term
> commit to any particular serialization strategy. Right now I subclass
> StringTemplateGroup and StringTemplate in ST3 and impliment Serializable to
> get around this.
> >>>
> >>> Thanks,
> >>>
> >>> Collin
> >>> _______________________________________________
> >>> stringtemplate-interest mailing list
> >>> stringtemplate-interest at antlr.org
> >>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
> > _______________________________________________
> > stringtemplate-interest mailing list
> > stringtemplate-interest at antlr.org
> > http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20110417/f9c6fe58/attachment.html 

From baerrach at gmail.com  Sun Apr 17 18:33:08 2011
From: baerrach at gmail.com (Barrie Treloar)
Date: Mon, 18 Apr 2011 11:03:08 +0930
Subject: [stringtemplate-interest] Logging framework?
In-Reply-To: <30BD3F80-4E78-4859-9F60-1D8FFF1E36E4@cs.usfca.edu>
References: <BANLkTi=r1rSnBD=x4HZKgTXEuo313deO8g@mail.gmail.com>
	<03a701cbfaa0$dd4acf90$97e06eb0$@pixelminegames.com>
	<BANLkTikEpfJd7BixRoOuqG-ObFxjJ-07xQ@mail.gmail.com>
	<30BD3F80-4E78-4859-9F60-1D8FFF1E36E4@cs.usfca.edu>
Message-ID: <BANLkTi=t8gpxXO6oEPAfmLN=U+OWrz5o_g@mail.gmail.com>

On Sun, Apr 17, 2011 at 5:14 AM, Terence Parr <parrt at cs.usfca.edu> wrote:
> Hi Barrie. Did java -v help? Guess that only helps with loading classes not other things via the class path. What information ended up being helpful to you?

I haven't tried -v (did you mean -verbose:class) but like you I
suspect its not good for other things via the classpath.

I found the problem by looking at code:
STGroupDir.load(String name)
        try {
            is = groupFileURL.openStream();
        }
        catch (FileNotFoundException fnfe) {
            // must not be in a group file
            return loadTemplateFile(parent, name+".st"); // load t.st file
        }

Since it was appending ".st" I realized I shouldn't be including it.

The error you get when you include the ".st" suffix is:
java.lang.RuntimeException: Unable to load instance of template
"cls.st" from templateGroup: src/main/ST (ANT#49)

But cls.st exists in that directory - so I couldn't work out why the
template wasn't being found.

If I could enable logging then I would expect to see something like:
18/04/2011 10:51:59 DEBUG  org.stringtemplate.v4.STGroupDir -
Attempting to locate group file src/main/ST.stg
18/04/2011 10:51:59 DEBUG  org.stringtemplate.v4.STGroupDir - Group
file src/main/ST.stg does not exist
18/04/2011 10:51:59 DEBUG  org.stringtemplate.v4.STGroupDir -
Attempting to locate template file src/main/ST/cls.st.st
18/04/2011 10:51:59 DEBUG  org.stringtemplate.v4.STGroupDir - Template
file src/main/ST/cls.st.st does not exist

Which would make it obvious what I've done wrong.

This level of detail goes beyond what the simple boolean STGroup.verbose gives.

So the questions become:
1) Are you happy with STGroup.verbose?
2) If you are unhappy with STGroup.verbose, is it worth looking at logging?
3) What logging framework - java.util.logging, log4j (or using
http://commons.apache.org/logging/ so that your libraries dont impose
a logging framework on others)

Based on these answers, I can sprinkle in the logging statements I
expected to see to help trouble shoot problems.

Regards
Barrie

From ub at abego-software.de  Mon Apr 18 07:44:33 2011
From: ub at abego-software.de (Udo Borkowski)
Date: Mon, 18 Apr 2011 16:44:33 +0200
Subject: [stringtemplate-interest] ST4: serializable for Template for
	Template Group?
In-Reply-To: <BANLkTimyFv8TsxvH6m3-6LYdT1o7yT4wHQ@mail.gmail.com>
References: <BANLkTimyFv8TsxvH6m3-6LYdT1o7yT4wHQ@mail.gmail.com>
Message-ID: <C545768C-D3A4-4F82-B942-413AD728D098@abego-software.de>

> but I don't think marking those classes as
> Serializable achieves anything.

It is even worse. It makes StringTemplate (ST4) buggy.

I think is was the uncle of Peter Parker (/Spiderman) who said: "With implementing an interface comes great responsibility" ;-)

When marking these classes as Serializable one must follow the contract associated with this interface. As already mentioned by Rafael this is not the case as there are many fields that are not Serializable and not marked transient. 

Also all attributes added to a template need to be Serializable, all AttributeRenderers and all ModelAdaptors, too.

All this restricts the use of ST4 or makes it harder to use. So I suggest to undo this change and check what really is required. 

For ST4 this simple test case shows ST4 is currently not ready for default serialization:

public class SerializationTest extends BaseTest {
	@Test
	public void testSerialization() throws Exception {
		String templates = "f() ::= \"foo\"\n";
		writeFile(tmpdir, "t.stg", templates);
		STGroup group = new STGroupFile(tmpdir + "/t.stg");
		ST st = group.getInstanceOf("f");
		String expecting = "foo";
		String result = st.render();
		assertEquals(expecting, result);

		File serialFile = new File(tmpdir, "t.ser");
		FileOutputStream fos = new FileOutputStream(serialFile);
		ObjectOutputStream out = new ObjectOutputStream(fos);
		out.writeObject(group);
		out.close();

		FileInputStream fis = new FileInputStream(serialFile);
		ObjectInputStream in = new ObjectInputStream(fis);
		STGroup loadedGroup = (STGroup) in.readObject();
		ST st2 = loadedGroup.getInstanceOf("f");
		String result2 = st2.render();
		assertEquals(expecting, result2);
	}
}

This fails with

java.io.NotSerializableException: org.stringtemplate.v4.misc.ObjectModelAdaptor
	at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1164)
	?



Udo



On 18.04.2011, at 00:19, Rafael Chaves wrote:

> Correct me if I am wrong, but I don't think marking those classes as
> Serializable achieves anything. In order for them to be serializable
> using the default mechanism, all of their slots must be serializable,
> or marked as volatile, which is not the case for the error listener in
> StringTemplate/StringTemplateGroup, for instance, at least in version
> 3.
> 
> On Sun, Apr 17, 2011 at 11:56 AM,
> <stringtemplate-interest-request at antlr.org> wrote:
>> Date: Sun, 17 Apr 2011 09:37:10 -0700
>> From: Terence Parr <parrt at cs.usfca.edu>
>> Subject: Re: [stringtemplate-interest] ST4: serializable for Template
>>        for     Template Group?
>> To: stringtemplate-interest List <stringtemplate-interest at antlr.org>
>> Message-ID: <A21307C9-2AAD-4740-BD2C-936FE9705F62 at cs.usfca.edu>
>> Content-Type: text/plain; charset=us-ascii
>> 
>> Hmm...oh,So you don't want me to actually specify the implementation, just insert "implements Serializable"?
>> 
>> Ter
>> On Apr 15, 2011, at 7:07 AM, Collin Fagan wrote:
>> 
>>> Hi Ter,
>>> 
>>> I've been using ST with Apache Wicket. Wicket uses serialization for short term storage of state. I'd like to be able to serialize a template and/or template group with my wicket page. Can you implement serializable in ST4? It really is just a marker interface, I'm not asking for a long term commit to any particular serialization strategy. Right now I subclass StringTemplateGroup and StringTemplate in ST3 and impliment Serializable to get around this.
>>> 
>>> Thanks,
>>> 
>>> Collin
>>> _______________________________________________
>>> stringtemplate-interest mailing list
>>> stringtemplate-interest at antlr.org
>>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20110418/62756ad3/attachment-0001.html 

From i82much at gmail.com  Mon Apr 18 11:52:19 2011
From: i82much at gmail.com (Nicholas Dunn)
Date: Mon, 18 Apr 2011 14:52:19 -0400
Subject: [stringtemplate-interest] Treating inner classes differently than
 outer classes when rendering source code
Message-ID: <BANLkTi=QnxboKT+evgB-K3C6ENqUmGbc7A@mail.gmail.com>

I am using StringTemplate 3.2 in a project to generate sourcecode for
serializing/deserializing data adhering to binary packed message
specifications (e.g. DIS, STANAG 4586).  The problem I'm running into is as
follows.  I structure the templates roughly as follows:

http://i54.tinypic.com/29wphjl.jpg

The issue is that not all of my classes that I want to generate use the
STANAG4586Java specializations.  There are two exceptions.  One is inner
classes; I want all of the templates for the inner classes to use the Java
rather than STANAG4586Java templates.  The second is for helper classes that
don't actually represent complete messages themselves, but instead represent
some data structure that is repeated in multiple messages.  For instance, I
have a TimeStamp class that is used in many Messages, yet it is not a
message by itself.  I want the Java templates to take over in this case.

I think the second problem is easy to fix; in my domain object I have a
method "isHelperClass" that I can call to determine whether to use the Java
templates or the STANAG4586Java specialization templates; for those helper
classes I would just use the plain Java.

The real tricky problem is in the inner classes.  The way I'm doing inner
classes is as follows:

class(name, number, description, classAttributes, innerClasses,
classComments, package)::=<<
$packageDeclaration(package)$

$imports(...)$

$header()$

$classBody(...)$
>>

classBody(name, number, description, classAttributes, innerClasses,
classComments,innerClass)::=<<
$startBlockComment()$
$classComments; format="comment"$
$endBlockComment()$

$classDeclaration(className=name, parentClass=parentClass)$ $startBlock()$

    // snip

    $innerClasses(...)$

$endBlock()$
>>

where innerClasses is defined as follows:

innerClasses()::=<<
$innerClasses:{inner | $classBody(name=inner.name, number="",
classAttributes=inner.classAttributes, description=inner.comment,
innerClasses=inner.innerClasses, classComments=inner.comment,
innerClass=inner.innerClass)$}; separator="\n\n"$
>>

In other words, I recursively call the class template, which handles all of
the code generation I want to do.  The problem comes from the fact that I
want these inner classes to use a different set of templates than the
enclosing stanag message.  I'm getting around this by checking in the
specialized templates whether the object I'm rendering is in fact a helper
class or not:

declarations(variables)::=<<
$if(!helperClass)$
private PresenceVector presenceVector = new PresenceVector();

$super.declarations(rest(variables))$
$else$
$super.declarations(variables)$
$endif$
>>

I really don't like this approach because I'm repeating myself over and over
again with the $if(!helperClass)$ conditional template inclusion.


Am I missing something obvious?  Is there a better way of accomplishing what
I'm trying to do?  I would appreciate any help.

Thanks,

-- 
Nicholas Dunn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20110418/d984e1c6/attachment.html 

From baerrach at gmail.com  Tue Apr 19 19:17:26 2011
From: baerrach at gmail.com (Barrie Treloar)
Date: Wed, 20 Apr 2011 11:47:26 +0930
Subject: [stringtemplate-interest] ST4: Directory STGroups, common templates,
	relative template names?
Message-ID: <BANLkTi=1axG1aNrAGgGZgGbsg0BpRNZ1gg@mail.gmail.com>

I've built my ST3 process around not having a single group file
(*.stg) but using a directory instead.
I've ported this wholesale into ST4 and have a couple of questions.

I'm finding that when a template needs to invoke another template then
the template name must be specified as a relative path from the Group.
e.g.
<STGroup.dir>/
- mytemplate.st
- common/HelloWorld.st
- common/Hello.st
- common/World.st

In:
* mytemplate.st -> <common/HelloWorld()>
* common/HelloWorld -> <common/Hello()> and <common/World()>

This makes sense when I look at the code, but I had naively expected
that in common/HelloWorld to be able to reference <Hello()> and
<World()>
Having relative paths is making my templates a bit uglier than I
thought when I started separating out the files into multiple
directories, but that is better than having 60+ templates living in
the one directory.
It gets a bit more worse when you have multiple directories.

Does anyone have advice for me?

Should I move to using a *.stg file instead? I've not used a *.stg
file before, but since I can import templates from a directory, ala
import "test"      // import a directory of templates
(http://www.antlr.org/wiki/display/ST4/Group+file+syntax)
Perhaps that will do what I want...
Can I import "*" somehow?

Should directory based groups have similar functionality some how?

(As an aside, if you make a typo [in either the filename or
templatename] then ST will not be able to find your template and will
give you an error because the template does not exist.  From what I
can tell you can not also define other template names within the
template file either.  In java terminology the *.st must match the
name of the single public template within the file and no
package/private templates may also live inside that file
Is this expected behaviour?)

Cheers

From ub at abego-software.de  Wed Apr 20 00:44:02 2011
From: ub at abego-software.de (Udo Borkowski)
Date: Wed, 20 Apr 2011 09:44:02 +0200
Subject: [stringtemplate-interest] ST4: Directory STGroups,
	common templates, relative template names?
In-Reply-To: <BANLkTi=1axG1aNrAGgGZgGbsg0BpRNZ1gg@mail.gmail.com>
References: <BANLkTi=1axG1aNrAGgGZgGbsg0BpRNZ1gg@mail.gmail.com>
Message-ID: <90D3EDD2-5CA9-4065-9941-1BB95E129BA0@abego-software.de>

Hi Barrie,

you can simplify your templates by using both the "template group directory" and "template group file" feature of ST4. 

ST4 allows you to create template groups in two ways:
- create a directory (the "template group directory") and put all template files (extension ".st") of that group into the directory.
- create a template group file (extension ".stg") containing all template definitions of that group (for syntax see http://www.antlr.org/wiki/display/ST4/Group+file+syntax)

E.g. your "common" directory is already a perfect template group, called "common":

> - mytemplate.st
> - common/HelloWorld.st
> - common/Hello.st
> - common/World.st

It contains three templates "HelloWorld", "Hello" and "World". As "Hello" and "World" belong to the same group as "HelloWorld" you don't need to the "common" prefix (<common/Hello()>) to call them from "HelloWorld.". I.e. your "HelloWorld.st" just looks like this:

HelloWorld() ::= <<
<Hello()> <World()>
>>

("Hello.st" and "World.st" need no change)

To use the "common" group and call its templates from outside the group you need to import the group. Therefore make "mytemplate.st" a template group file by changing the extension to ".stg". Add the import statement for the "common" group. I.e.

mytemplate.stg
----------------------
import "common"

mytemplate() ::= <<
<HelloWorld()>
>>
----------------------

Again you don't need the "common" prefix when referencing the template.


Now you can load the group "mytemplate.stg", get a "mytemplate" template and render it.


Here a complete example:

package org.stringtemplate.v4.debug;

import org.junit.Assert;
import org.junit.Test;
import org.stringtemplate.v4.ST;
import org.stringtemplate.v4.STGroup;
import org.stringtemplate.v4.STGroupFile;

public class TreloarTest extends BaseTest {

	/**
	 * see http://www.antlr.org/pipermail/stringtemplate-interest/2011-April/003445.html
	 * 
	 * @throws Exception
	 */
	@Test
	public void testIt() throws Exception {
		String subdir = tmpdir + "/common";
		writeFile(tmpdir, "mytemplate.stg",
				"import \"common\"\n\nmytemplate() ::= <<\n<HelloWorld()>\n>>\n");
		writeFile(subdir, "Hello.st", "Hello() ::= <<\nHello\n>>");
		writeFile(subdir, "World.st", "World() ::= <<\nWorld\n>>");
		writeFile(subdir, "HelloWorld.st",
				"HelloWorld() ::= <<\n<Hello()> <World()>\n>>");

		STGroup group = new STGroupFile(tmpdir+ "/mytemplate.stg");
		ST st = group.getInstanceOf("mytemplate");
		String s = st.render();
		Assert.assertEquals("Hello World", s);
	}
}


You may also want to have a look at chapter "Import statements" in http://www.antlr.org/wiki/display/ST4/Group+file+syntax

Hope this helps.



Udo



On 20.04.2011, at 04:17, Barrie Treloar wrote:

> I've built my ST3 process around not having a single group file
> (*.stg) but using a directory instead.
> I've ported this wholesale into ST4 and have a couple of questions.
> 
> I'm finding that when a template needs to invoke another template then
> the template name must be specified as a relative path from the Group.
> e.g.
> <STGroup.dir>/
> - mytemplate.st
> - common/HelloWorld.st
> - common/Hello.st
> - common/World.st
> 
> In:
> * mytemplate.st -> <common/HelloWorld()>
> * common/HelloWorld -> <common/Hello()> and <common/World()>
> 
> This makes sense when I look at the code, but I had naively expected
> that in common/HelloWorld to be able to reference <Hello()> and
> <World()>
> Having relative paths is making my templates a bit uglier than I
> thought when I started separating out the files into multiple
> directories, but that is better than having 60+ templates living in
> the one directory.
> It gets a bit more worse when you have multiple directories.
> 
> Does anyone have advice for me?
> 
> Should I move to using a *.stg file instead? I've not used a *.stg
> file before, but since I can import templates from a directory, ala
> import "test"      // import a directory of templates
> (http://www.antlr.org/wiki/display/ST4/Group+file+syntax)
> Perhaps that will do what I want...
> Can I import "*" somehow?
> 
> Should directory based groups have similar functionality some how?
> 
> (As an aside, if you make a typo [in either the filename or
> templatename] then ST will not be able to find your template and will
> give you an error because the template does not exist.  From what I
> can tell you can not also define other template names within the
> template file either.  In java terminology the *.st must match the
> name of the single public template within the file and no
> package/private templates may also live inside that file
> Is this expected behaviour?)
> 
> Cheers
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20110420/771aa276/attachment.html 

From lepilache at hotmail.com  Wed Apr 20 02:59:55 2011
From: lepilache at hotmail.com (Damien Urruty)
Date: Wed, 20 Apr 2011 09:59:55 +0000
Subject: [stringtemplate-interest] Feature request
Message-ID: <BLU154-w40FB6C89D69BB8D403A976BC930@phx.gbl>


Hello,
I would like to add a feature to this brilliant tool. I am writing a  		 	   		  
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20110420/313d3f75/attachment.html 

From lepilache at hotmail.com  Wed Apr 20 03:19:15 2011
From: lepilache at hotmail.com (Damien Urruty)
Date: Wed, 20 Apr 2011 10:19:15 +0000
Subject: [stringtemplate-interest] Feature request
Message-ID: <BLU154-w37F573151C6BA079DC645BC930@phx.gbl>


Hello,
I would like to add a feature to this brilliant tool. I am writing a consequent template file, with hundreds templates. The goal of my project is to generate C# code. I have two requests :
- Firstly, I use the inspector with the inspect() method on a ST object. In my case, I have to generate several files, and I think it would be great that the inspector could handle more than one ST object, so that I could visualize all my generated files in the same inspector. I think this would be an interesting feature. Is it complicated to implement ? Is it helpful for others than me ?
- The second feature could be even more interesting, if the first feature is already adopted. If the various generated texts are all present in the inspector at the same time, we could have a list of templates that have been used to generate the text, but we could also get the templates, or the templates fragments, that have not been used for the generation. This would be helpful to me, while writing my unit tests. It will at least prove that every fragment is used once. Does this sound helpful, or realizable ?
Thanks !
Dam. 		 	   		  
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20110420/316cc94b/attachment-0001.html 

From baerrach at gmail.com  Wed Apr 20 04:40:50 2011
From: baerrach at gmail.com (Barrie Treloar)
Date: Wed, 20 Apr 2011 21:10:50 +0930
Subject: [stringtemplate-interest] ST4: Directory STGroups,
 common templates, relative template names?
In-Reply-To: <90D3EDD2-5CA9-4065-9941-1BB95E129BA0@abego-software.de>
References: <BANLkTi=1axG1aNrAGgGZgGbsg0BpRNZ1gg@mail.gmail.com>
	<90D3EDD2-5CA9-4065-9941-1BB95E129BA0@abego-software.de>
Message-ID: <BANLkTikoMbxqF=eu4dUDBrHyT3kvvH1OFw@mail.gmail.com>

On Wed, Apr 20, 2011 at 5:14 PM, Udo Borkowski <ub at abego-software.de> wrote:
> Hi Barrie,
> you can simplify your templates by using both the "template group directory"
> and "template group file" feature of ST4.
> ST4 allows you to create template groups in two ways:
> - create a directory (the "template group directory") and put all template
> files (extension ".st") of that group into the directory.
> - create a template group file (extension ".stg") containing all template
> definitions of that group (for syntax
> see?http://www.antlr.org/wiki/display/ST4/Group+file+syntax)
[del]
> mytemplate.stg
> ----------------------
> import "common"
> mytemplate() ::= <<
> <HelloWorld()>
[del]
> You may also want to have a look at chapter "Import statements"
> in?http://www.antlr.org/wiki/display/ST4/Group+file+syntax
> Hope this helps.

Yes, thanks.
I think its just my obsessive desire to have things cleanly separated
that makes me reluctant to have an *.stg file with template
definitions in it.
I'd rather them in their own *.st files.

But without the *.stg file there is no way to import stuff properly.
I almost wish STGroupDir had a magic file, like ".stg", that you could
place Group file syntax into (as STGroupDir doesn't have the same
features as STGroupFile does otherwise).
The problem then is that the STGroupDir has to treat the entire
directory as being part of the group, when it may not make sense to do
so.

I'll start use *.stg files and see how I go.

Thanks

From baerrach at gmail.com  Wed Apr 20 18:00:38 2011
From: baerrach at gmail.com (Barrie Treloar)
Date: Thu, 21 Apr 2011 10:30:38 +0930
Subject: [stringtemplate-interest] ST4: Directory STGroups,
 common templates, relative template names?
In-Reply-To: <BANLkTikoMbxqF=eu4dUDBrHyT3kvvH1OFw@mail.gmail.com>
References: <BANLkTi=1axG1aNrAGgGZgGbsg0BpRNZ1gg@mail.gmail.com>
	<90D3EDD2-5CA9-4065-9941-1BB95E129BA0@abego-software.de>
	<BANLkTikoMbxqF=eu4dUDBrHyT3kvvH1OFw@mail.gmail.com>
Message-ID: <BANLkTi=0WEXkRCaU_Fifw=nX429_z7uszg@mail.gmail.com>

I've been thinking about this some more.

So the advice really is "All entry points into ST should be via a STGroupFile"
Even if you have a simple template, it would still be beneficial to
use a STGroupFile so that when the template gets enhanced you already
have all the features you need.  Only the most basic templates should
just be a template file.  All support templates (i.e. never called
directly from code) can be basic templates.
STGroupDir features should only be used from within a STGroupFile,
dont try to use STGroupDir as an entry point for into ST.

Admittedly I read the ST 3 documentation a long time ago, and I've
only re-read the ST 4 documentation since then.
Is this advice sound?
Would it be worthwhile adding something like that to the wiki pages?

From baerrach at gmail.com  Wed Apr 20 21:14:45 2011
From: baerrach at gmail.com (Barrie Treloar)
Date: Thu, 21 Apr 2011 13:44:45 +0930
Subject: [stringtemplate-interest] Help turning this into a template?
Message-ID: <BANLkTimZN-RExs2Koct3eq6+CqqYdmf=4Q@mail.gmail.com>

I have three ways of doing essentially the same thing.
It feels like I should be able to templatize this in a sane way.

1 & 2 vary
* the end pattern ($ -> \&)
* in the variable to use (ZN -> Z1)

1 & 3 vary
* the start pattern (*\& inserted as prefix)
* all the operand numbers are incremented by one (e.g. [2] -> [3])
* in the variable to use (ZN -> Z2)

It gets harder because the knowledge of the operands shouldn't be part
of the template.
They are part of the pattern rule.

File 1) only includes Template 1).
File 2) only includes Templates 2) & 3)

At the moment these are all "cut-n-paste" (with an if statement to
include template 3) which is a cause of errors, as any change to 1)
requires similar changes to 2) and 3).
I can currently templatize this so that I can go from 1) to 2) but I
can't get 3) because the separation of the model and view.
i.e. I can't add 1 to the operand positions.

Does anyone have advice?

1)
** | D[{}="NORTH"] | D[{}="WEST"] | T[{}="BEND"] | $; special case
NORTH WEST BEND
COPY_A [2] temp
RETYPE [2] 0
CONCAT " " temp
CONCAT_A [3] temp
RETYPE [3] 0
CONCAT " " temp
CONCAT_A [4] temp
RETYPE [4] 0
COPY temp {ZN}

2)
** | D[{}="NORTH"] | D[{}="WEST"] | T[{}="BEND"] | \&; special case
NORTH WEST BEND
COPY_A [2] temp
RETYPE [2] 0
CONCAT " " temp
CONCAT_A [3] temp
RETYPE [3] 0
CONCAT " " temp
CONCAT_A [4] temp
RETYPE [4] 0
COPY temp {Z1}

3)
*\& | ** | D[{}="NORTH"] | D[{}="WEST"] | T[{}="BEND"] | $; special
case NORTH WEST BEND
COPY_A [3] temp
RETYPE [3] 0
CONCAT " " temp
CONCAT_A [4] temp
RETYPE [4] 0
CONCAT " " temp
CONCAT [5] temp
RETYPE [5] 0
COPY temp {Z2}

From ub at abego-software.de  Thu Apr 21 00:10:27 2011
From: ub at abego-software.de (Udo Borkowski)
Date: Thu, 21 Apr 2011 09:10:27 +0200
Subject: [stringtemplate-interest] ST4: Directory STGroups,
	common templates, relative template names?
In-Reply-To: <BANLkTi=0WEXkRCaU_Fifw=nX429_z7uszg@mail.gmail.com>
References: <BANLkTi=1axG1aNrAGgGZgGbsg0BpRNZ1gg@mail.gmail.com>
	<90D3EDD2-5CA9-4065-9941-1BB95E129BA0@abego-software.de>
	<BANLkTikoMbxqF=eu4dUDBrHyT3kvvH1OFw@mail.gmail.com>
	<BANLkTi=0WEXkRCaU_Fifw=nX429_z7uszg@mail.gmail.com>
Message-ID: <9806D8B6-2D08-4A1F-9CD9-C529C589BE3B@abego-software.de>

> So the advice really is "All entry points into ST should be via a STGroupFile"
> Even if you have a simple template, it would still be beneficial to
> use a STGroupFile so that when the template gets enhanced you already
> have all the features you need.  Only the most basic templates should
> just be a template file.  All support templates (i.e. never called
> directly from code) can be basic templates.
> STGroupDir features should only be used from within a STGroupFile,
> dont try to use STGroupDir as an entry point for into ST.

A very nice summary of the way group files, group directories and "basic" templates should be used. Looks very reasonable to me. I guess something like this should go into the ST4 documentation. It gives developers a better idea, how to organize their templates.

Personally I am now only using ".stg" files. I first started with simple template files, but ran into similar issues like you. I guess it highly depends on the stuff you are doing but for me GroupFiles give me most flexibility, especially when a project evolves over time.


Some time ago we already noticed the asymmetry between group files and group directories when discussing different topics (e.g. delimiter character specification in a group). It was suggested to add a special file in the group directory to support these features both in the file and directory variant. (http://www.antlr.org/pipermail/stringtemplate-interest/2011-January/003016.html) You also suggested something similar in a recent mail regarding the "imports" in group directories. Maybe we should restart the discussion of such a special file, as we now have more cases that could be covered this way (delimiters, imports, encoding). 

Udo




On 21.04.2011, at 03:00, Barrie Treloar wrote:

> I've been thinking about this some more.
> 
> So the advice really is "All entry points into ST should be via a STGroupFile"
> Even if you have a simple template, it would still be beneficial to
> use a STGroupFile so that when the template gets enhanced you already
> have all the features you need.  Only the most basic templates should
> just be a template file.  All support templates (i.e. never called
> directly from code) can be basic templates.
> STGroupDir features should only be used from within a STGroupFile,
> dont try to use STGroupDir as an entry point for into ST.
> 
> Admittedly I read the ST 3 documentation a long time ago, and I've
> only re-read the ST 4 documentation since then.
> Is this advice sound?
> Would it be worthwhile adding something like that to the wiki pages?
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest


From parrt at cs.usfca.edu  Thu Apr 21 10:39:54 2011
From: parrt at cs.usfca.edu (Terence Parr)
Date: Thu, 21 Apr 2011 10:39:54 -0700
Subject: [stringtemplate-interest] global boolean
In-Reply-To: <025401cbf861$606fd8d0$214f8a70$@pixelminegames.com>
References: <F974003A-266D-476C-9C08-0CBC59C35599@cs.usfca.edu>
	<025401cbf861$606fd8d0$214f8a70$@pixelminegames.com>
Message-ID: <5FC1BFF5-6C3C-4CDA-8B47-5A1ADFDED1D1@cs.usfca.edu>

* Made STGroup.iterateAcrossValues an instance variable not static.
  That needed a change to convertAnythingIteratableToIterator, etc..
  to non-static.
* Removed STDump as unneeded; Use STViz.


ter
On Apr 11, 2011, at 8:59 AM, Sam Harwell wrote:

> I made it an instance variable from the start for just this reason. :)
> 
> Set it to true for the STGroup created in CodeGenerator (in the Tool).
> 
> Change the signature of convertAnythingIteratableToIterator to
> convertAnythingIteratableToIterator(InstanceScope, object). That will reveal
> a number of other methods that need the exact same.
> 
> Test the value with
> (scope.st.groupThatCreatedThisInstance.iterateAcrossValues). (I believe this
> is correct - for the C# port it's frame.Template.Group.IterateAcrossValues).
> 
> Sam
> 
> -----Original Message-----
> From: stringtemplate-interest-bounces at antlr.org
> [mailto:stringtemplate-interest-bounces at antlr.org] On Behalf Of Terence Parr
> Sent: Monday, April 11, 2011 10:19 AM
> To: stringtemplate-interest List
> Subject: [stringtemplate-interest] global boolean
> 
> ooops. the intro of STGroup.iterateAcrossValues to make maps iterate across
> values ala v3 not keys like v4 could be a problem if someone uses ANTLR's
> Tool object in their VM *and* ST v4.  ANTLR sets this for v3 compat but if,
> say, eclipse calls antlr but a plugin uses ST v4 "properly"...bang!
> 
> maybe put it on STGroup instances and force antlr to set it all over in
> code.  i guess that is better. grr...I was stupido this weekend.
> 
> Ter
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
> 


From louis.burroughs at gmail.com  Fri Apr 22 06:36:26 2011
From: louis.burroughs at gmail.com (Louis Burroughs)
Date: Fri, 22 Apr 2011 09:36:26 -0400
Subject: [stringtemplate-interest] Access to ST 4.0.2 binaries
Message-ID: <BANLkTinapMDPAGGiXjKM_CxAB83AYuqWvg@mail.gmail.com>

Can someone point me to the 4.0.2 binaries?  I am running Java 1.5 and ran
into the Arrays copy issue.  I see that the issue is resolved in 4.0.2.
 Tried building 4.0.1 from source, but kept running into an issue
"[antlr:ant-antlr3] error(3):  cannot find tokens file STLexer.tokens".

btw - are mailing list archives searchable?  I hate asking something already
answered.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20110422/b586fb3b/attachment.html 

From parrt at cs.usfca.edu  Fri Apr 22 11:59:28 2011
From: parrt at cs.usfca.edu (Terence Parr)
Date: Fri, 22 Apr 2011 11:59:28 -0700
Subject: [stringtemplate-interest] Access to ST 4.0.2 binaries
In-Reply-To: <BANLkTinapMDPAGGiXjKM_CxAB83AYuqWvg@mail.gmail.com>
References: <BANLkTinapMDPAGGiXjKM_CxAB83AYuqWvg@mail.gmail.com>
Message-ID: <E9060CC4-5B7E-4F45-BD16-A3CDF21AB311@cs.usfca.edu>

Hi. IBumped up the version number to 4.0.2 and now you should see it at the website depot:

http://stringtemplate.org/depot/ST4/java/main/dist

Hmm.  where is the damn tarball? ah. build error. fixed. you should see the stuff up there now.

Ter
On Apr 22, 2011, at 6:36 AM, Louis Burroughs wrote:

> Can someone point me to the 4.0.2 binaries?  I am running Java 1.5 and ran into the Arrays copy issue.  I see that the issue is resolved in 4.0.2.  Tried building 4.0.1 from source, but kept running into an issue "[antlr:ant-antlr3] error(3):  cannot find tokens file STLexer.tokens".
> 
> btw - are mailing list archives searchable?  I hate asking something already answered.
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest


From baerrach at gmail.com  Fri Apr 22 20:29:47 2011
From: baerrach at gmail.com (Barrie Treloar)
Date: Sat, 23 Apr 2011 12:59:47 +0930
Subject: [stringtemplate-interest] Searchable Archive? (was Re: Access to ST
 4.0.2 binaries)
Message-ID: <BANLkTimticJ2S+Rpdnc+kUFc-ADUoHTLBQ@mail.gmail.com>

On Fri, Apr 22, 2011 at 11:06 PM, Louis Burroughs
<louis.burroughs at gmail.com> wrote:
[del]
> btw - are mailing list archives searchable? ?I hate asking something already
> answered.

I dont know, but I love nabble.
Is it worth getting a searchable archive via that?
http://n5.nabble.com/archive-your-mailing-list.html

From jdmitchell at gmail.com  Sat Apr 23 12:39:26 2011
From: jdmitchell at gmail.com (John D. Mitchell)
Date: Sat, 23 Apr 2011 12:39:26 -0700
Subject: [stringtemplate-interest] Searchable Archive? (was Re: Access
	to ST 4.0.2 binaries)
In-Reply-To: <BANLkTimticJ2S+Rpdnc+kUFc-ADUoHTLBQ@mail.gmail.com>
References: <BANLkTimticJ2S+Rpdnc+kUFc-ADUoHTLBQ@mail.gmail.com>
Message-ID: <71E752B0-9AA2-4CA2-9EDC-395E125FDBB4@gmail.com>

Fully searchable archives are at:
http://stringtemplate.markmail.org/
http://antlr.markmail.org/

Go wild,
John

On Apr 22, 2011, at 20:29 , Barrie Treloar wrote:

> On Fri, Apr 22, 2011 at 11:06 PM, Louis Burroughs
> <louis.burroughs at gmail.com> wrote:
> [del]
>> btw - are mailing list archives searchable?  I hate asking something already
>> answered.
> 
> I dont know, but I love nabble.
> Is it worth getting a searchable archive via that?
> http://n5.nabble.com/archive-your-mailing-list.html
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest


From rafael at alphasimple.com  Fri Apr 29 21:11:30 2011
From: rafael at alphasimple.com (Rafael Chaves)
Date: Fri, 29 Apr 2011 21:11:30 -0700
Subject: [stringtemplate-interest] sequences and unique numbers
In-Reply-To: <BANLkTin+TMQTy89Nojpy3F6LzwJ7S3a7tw@mail.gmail.com>
References: <BANLkTin+TMQTy89Nojpy3F6LzwJ7S3a7tw@mail.gmail.com>
Message-ID: <BANLkTi=q==tDYfW=5K-jFhvu=f6Kymq8Eg@mail.gmail.com>

I was looking for something similar to this:

http://www.antlr.org/pipermail/stringtemplate-interest/2009-August/002097.html

Was something like that ever implemented?

In my concrete case, I want to generate local variables and avoid
collisions between them.

Cheers,

Rafael

From ub at abego-software.de  Sat Apr 30 03:26:51 2011
From: ub at abego-software.de (Udo Borkowski)
Date: Sat, 30 Apr 2011 12:26:51 +0200
Subject: [stringtemplate-interest] sequences and unique numbers
In-Reply-To: <BANLkTi=q==tDYfW=5K-jFhvu=f6Kymq8Eg@mail.gmail.com>
References: <BANLkTin+TMQTy89Nojpy3F6LzwJ7S3a7tw@mail.gmail.com>
	<BANLkTi=q==tDYfW=5K-jFhvu=f6Kymq8Eg@mail.gmail.com>
Message-ID: <9DE37404-633E-4940-BCD9-EAC6DFEA2603@abego-software.de>

Hi Rafael,

> Was something like that ever implemented?
Several times, I guess.

Notice this is nothing that needs to be added to the StringTemplate framework but it is just a way how you write your templates and render them.

First you need to create the "Counter" class. 
E.g. as Ter suggested:

	public class Counter {
		private int n = 1;

		public String toString() {
			return String.valueOf(n++);
		}
	}

Then you create an instance of Counter every time you need a sequence of unique numbers. 
In the example of Ter (http://www.antlr.org/pipermail/stringtemplate-interest/2009-August/002097.html) this instance is stored in the attribute "uniq". 

Every time you need a new unique number reference "uniq", but make sure to use the "<(?)>" notation to ensure "early evaluation". As you will typically want to refer to the unique number you need to store it. In Ter's example the parameter "label" is used for this purpose.

if(cond, block, label={end<(uniq)>}) ::= <<
	<cond>
	brf <label>
	<block>
<label>:
 >>


When I tried to implement this I noticed a problem, at least when using StringTemplate v4 (not sure if this also happens for ST 3):

The parameter label={end<(uniq)>} will not ensure the early evaluation of uniq. Only default argument definitions of format 
     p = {<(...)>}
will evaluated early.

So you must split the creation of the unique number from the concatenation to the "end?" string. I.e. the template looks like this:

ifStmt(cond, block, n={<(uniq)>}, label={label<n>}) ::= <<
	<cond>
	brf <label>
	<block>
<label>:
>>

(I also changed the name to "ifStmt" to avoid collision with the "if" statement of ST4)


When calling the template like this:

main(uniq) ::= <<
<ifStmt("ld a","ld #17")>
<ifStmt("ld b","ld #42")>
>>

It will generate the following output:

	ld a
	brf label1
	ld #17
label1:
	ld b
	brf label2
	ld #42
label2:

Hope this helps,

Udo


P.S.: Here the complete example a test case:

package org.stringtemplate.v4;

import org.junit.Assert;
import org.junit.Test;
import org.stringtemplate.v4.debug.BaseTest;

public class UniqueNumberTest extends BaseTest {

	public class Counter {
		private int n = 1;

		public String toString() {
			return String.valueOf(n++);
		}
	}

	/**
	 * see http://www.antlr.org/pipermail/stringtemplate-interest/2011-April/003458.html
	 * 
	 * @throws Exception
	 */
	@Test
	public void testIt() throws Exception {
		String subdir = tmpdir + "/common";

		writeFile(tmpdir, "t.stg",
				"ifStmt(cond, block, n={<(uniq)>}, label={label<n>}) ::= <<\n"
						+ "\t<cond>\n\tbrf <label>\n\t<block>\n<label>:\n"
						+ ">>"
						+ //
						"main(uniq) ::= <<\n"
						+ "<ifStmt(\"ld a\",\"ld #17\")>\n\n"
						+ "<ifStmt(\"ld b\",\"ld #42\")>\n" + ">>");

		STGroup group = new STGroupFile(tmpdir + "/t.stg");
		ST st = group.getInstanceOf("main");
		st.add("uniq", new Counter());
		String s = st.render();
		Assert.assertEquals(
				"\tld a\n\tbrf label1\n\tld #17\nlabel1:\n\n\tld b\n\tbrf label2\n\tld #42\nlabel2:",
				s);
	}
}







On 30.04.2011, at 06:11, Rafael Chaves wrote:

> I was looking for something similar to this:
> 
> http://www.antlr.org/pipermail/stringtemplate-interest/2009-August/002097.html
> 
> Was something like that ever implemented?
> 
> In my concrete case, I want to generate local variables and avoid
> collisions between them.
> 
> Cheers,
> 
> Rafael
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20110430/ef7f6f69/attachment.html 

From ub at abego-software.de  Sat Apr 30 03:39:11 2011
From: ub at abego-software.de (Udo Borkowski)
Date: Sat, 30 Apr 2011 12:39:11 +0200
Subject: [stringtemplate-interest] ST4: Early evaluation of default arguments
Message-ID: <A427E43B-5ADB-41FF-8DB5-CBE73B91A331@abego-software.de>

Currently the only way to enforce early evaluation of template default arguments is through the syntax:

     p = {<(...)>}

I.e. one can only early evaluate anonymous template that contain just an expression tag.


It would be nice to also support early evaluation on any kind of anonymous template.

E.g. in http://www.antlr.org/pipermail/stringtemplate-interest/2009-August/002097.html Ter gave the following example:
if(cond, block, label={end<(uniq)>}) ::= << ... >>

However this will not give the expected result in ST4 (early evaluation of "end<(uniq)>").

Maybe we could extend the syntax for default arguments to also support
      p = ({ ... })

i.e. putting "( ? )" around the template forces early evaluation?


What do others think?

Udo


-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20110430/716bcbac/attachment-0001.html 

From rafael at alphasimple.com  Sat Apr 30 15:10:53 2011
From: rafael at alphasimple.com (Rafael Chaves)
Date: Sat, 30 Apr 2011 15:10:53 -0700
Subject: [stringtemplate-interest] sequences and unique numbers
In-Reply-To: <9DE37404-633E-4940-BCD9-EAC6DFEA2603@abego-software.de>
References: <BANLkTin+TMQTy89Nojpy3F6LzwJ7S3a7tw@mail.gmail.com>
	<BANLkTi=q==tDYfW=5K-jFhvu=f6Kymq8Eg@mail.gmail.com>
	<9DE37404-633E-4940-BCD9-EAC6DFEA2603@abego-software.de>
Message-ID: <BANLkTinsNQAu=iUk62pksFrb2fejUr64iA@mail.gmail.com>

That is great, Udo, thanks a lot. You mentioned a unrelated few things
I didn't know before as well (including the fact a parameter default
value can refer to another parameter).

Cheers,

Rafael

On Sat, Apr 30, 2011 at 3:26 AM, Udo Borkowski <ub at abego-software.de> wrote:
> Hi Rafael,
>
> Was something like that ever implemented?
>
> Several times, I guess.
> Notice this is nothing that needs to be added to the StringTemplate
> framework but it is just a way how you write your templates and render them.
> First you need to create the "Counter" class.
> E.g. as Ter suggested:
> public class Counter {
> private int n = 1;
> public String toString() {
> return String.valueOf(n++);
> }
> }
> Then you create an instance of Counter every time you need a sequence of
> unique numbers.
> In the example of Ter
> (http://www.antlr.org/pipermail/stringtemplate-interest/2009-August/002097.html)?this
> instance is stored in the attribute "uniq".
> Every time you need a new unique number reference "uniq", but make sure to
> use the "<(?)>" notation to ensure "early evaluation". As you will typically
> want to refer to the unique number you need to store it. In Ter's example
> the parameter "label" is used for this purpose.
>
> if(cond, block, label={end<(uniq)>}) ::= <<
> 	<cond>
> 	brf <label>
> 	<block>
> <label>:
>  >>
>
>
> When I tried to implement this I noticed a problem, at least when using
> StringTemplate v4 (not sure if this also happens for ST 3):
> The parameter?label={end<(uniq)>}?will not ensure the early evaluation of
> uniq. Only default argument definitions of format
>
>      p = {<(...)>}
>
> will evaluated early.
> So you must split the creation of the unique number from the concatenation
> to the "end?" string. I.e. the template looks like this:
> ifStmt(cond, block, n={<(uniq)>}, label={label<n>}) ::= <<
> <cond>
> brf <label>
> <block>
> <label>:
>>>
> (I also changed the name to "ifStmt" to avoid collision with the "if"
> statement of ST4)
>
> When calling the template like this:
> main(uniq) ::= <<
> <ifStmt("ld a","ld #17")>
> <ifStmt("ld b","ld #42")>
>>>
> It will generate the following output:
> ld a brf label1 ld #17 label1: ld b brf label2 ld #42 label2:
> Hope this helps,
> Udo
>
> P.S.: Here the complete example a test case:
> package org.stringtemplate.v4;
> import org.junit.Assert;
> import org.junit.Test;
> import org.stringtemplate.v4.debug.BaseTest;
> public class UniqueNumberTest extends BaseTest {
> public class Counter {
> private int n = 1;
> public String toString() {
> return String.valueOf(n++);
> }
> }
> /**
> * see
> http://www.antlr.org/pipermail/stringtemplate-interest/2011-April/003458.html
> *
> * @throws Exception
> */
> @Test
> public void testIt() throws Exception {
> String subdir = tmpdir + "/common";
> writeFile(tmpdir, "t.stg",
> "ifStmt(cond, block, n={<(uniq)>}, label={label<n>}) ::= <<\n"
> + "\t<cond>\n\tbrf <label>\n\t<block>\n<label>:\n"
> + ">>"
> + //
> "main(uniq) ::= <<\n"
> + "<ifStmt(\"ld a\",\"ld #17\")>\n\n"
> + "<ifStmt(\"ld b\",\"ld #42\")>\n" + ">>");
> STGroup group = new STGroupFile(tmpdir + "/t.stg");
> ST st = group.getInstanceOf("main");
> st.add("uniq", new Counter());
> String s = st.render();
> Assert.assertEquals(
> "\tld a\n\tbrf label1\n\tld #17\nlabel1:\n\n\tld b\n\tbrf label2\n\tld
> #42\nlabel2:",
> s);
> }
> }
>
>
>
>
>
>
> On 30.04.2011, at 06:11, Rafael Chaves wrote:
>
> I was looking for something similar to this:
>
> http://www.antlr.org/pipermail/stringtemplate-interest/2009-August/002097.html
>
> Was something like that ever implemented?
>
> In my concrete case, I want to generate local variables and avoid
> collisions between them.
>
> Cheers,
>
> Rafael
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>
>

From i82much at gmail.com  Sat Apr 30 21:08:13 2011
From: i82much at gmail.com (Nicholas Dunn)
Date: Sun, 1 May 2011 00:08:13 -0400
Subject: [stringtemplate-interest] Interactive StringTemplate sandbox
Message-ID: <BANLkTimGxU9uncfyL7OEkJ-RHAtpE6NK0Q@mail.gmail.com>

Hi all,

I am a huge fan of StringTemplate and evangelize for it all I can.  To that
end, I wrote up a small Google App Engine web app which allows new users to
experiment with StringTemplate without having to download jars, set up
classpaths, etc. etc.  It builds upon John Snyder's StringTemplate
Standalone Tool (
http://www.antlr.org/wiki/display/ST/STST+-+StringTemplate+Standalone+Tool),
specifically with respect to the use of JSON as the data model powering the
templates.

The webapp can be found at http://stringtemplate.appspot.com/ , and the
public github repository can be found at
https://github.com/I82Much/StringTemplate-Sandbox .  This is my first webapp
so it's very much a beta product at the minute.  I'm using StringTemplate
3.2.1 jar as that's the version I've got the most experience with; switching
it to 4 should not be too much work if that's more useful.

What do people think, is this a worthwhile idea?  If so, I'd love to hear
feedback and things to improve (especially in the design area).

Known bugs:
Whitespace isn't being output correctly to the "rendered template" side.  It
works fine locally but when I deploy it to app engine, new lines seem to get
eaten up.

Limitations/things to fix in future work:
No support for StringTemplate group/multiple templates.
No syntax highlighting


-- 
Nicholas Dunn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20110501/588a6c26/attachment.html 

From michael.bedward at gmail.com  Sat Apr 30 23:24:46 2011
From: michael.bedward at gmail.com (Michael Bedward)
Date: Sun, 1 May 2011 16:24:46 +1000
Subject: [stringtemplate-interest] Interactive StringTemplate sandbox
In-Reply-To: <BANLkTimGxU9uncfyL7OEkJ-RHAtpE6NK0Q@mail.gmail.com>
References: <BANLkTimGxU9uncfyL7OEkJ-RHAtpE6NK0Q@mail.gmail.com>
Message-ID: <BANLkTikciZHS8H7fWSQZGL3osGO39R+V4A@mail.gmail.com>

Hi Nicholas,

That's a great idea. Apart from fixing the newline problem if
possible, my only suggestion would be to have the layout so that both
the template code and the JSON layout are visible on an average
resolution screen (e.g. 800 px height) without having to scroll up and
down.

Michael

On 1 May 2011 14:08, Nicholas Dunn <i82much at gmail.com> wrote:
> Hi all,
> I am a huge fan of StringTemplate and evangelize for it all I can. ?To that
> end, I wrote up a small Google App Engine web app which allows new users to
> experiment with StringTemplate without having to download jars, set up
> classpaths, etc. etc. ?It builds upon John Snyder's StringTemplate
> Standalone Tool
> (http://www.antlr.org/wiki/display/ST/STST+-+StringTemplate+Standalone+Tool),
> specifically with respect to the use of JSON as the data model powering the
> templates.
> The webapp can be found at?http://stringtemplate.appspot.com/?, and the
> public github repository can be found
> at?https://github.com/I82Much/StringTemplate-Sandbox?. ?This is my first
> webapp so it's very much a beta product at the minute. ?I'm using
> StringTemplate 3.2.1 jar as that's the version I've got the most experience
> with; switching it to 4 should not be too much work if that's more useful.
> What do people think, is this a worthwhile idea? ?If so, I'd love to hear
> feedback and things to improve (especially in the design area).
> Known bugs:
> Whitespace isn't being output correctly to the "rendered template" side. ?It
> works fine locally but when I deploy it to app engine, new lines seem to get
> eaten up.
> Limitations/things to fix in future work:
> No support for StringTemplate group/multiple templates.
> No syntax highlighting
>
>
> --
> Nicholas Dunn
>
>
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>
>

