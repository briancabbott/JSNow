From parrt at cs.usfca.edu  Tue Jan  2 15:21:11 2007
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue, 2 Jan 2007 15:21:11 -0800
Subject: [stringtemplate-interest] stringtemplate-interest Digest, Vol 21,
	Issue 8
In-Reply-To: <458FCDEC.5030509@wheel.org>
References: <mailman.4.1165867202.25394.stringtemplate-interest@antlr.org>
	<458FCDEC.5030509@wheel.org>
Message-ID: <21115005-CD9D-4E1F-A7B6-291B7A7F097B@cs.usfca.edu>


On Dec 25, 2006, at 5:11 AM, tom wible wrote:

>> So,  We could do the following $name; format="%50s"$, right? then
>
> isn't that what i suggested some time ago?-)
> ___

Ha!  You probably did ;)

Ter


From parrt at cs.usfca.edu  Tue Jan  2 15:25:53 2007
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue, 2 Jan 2007 15:25:53 -0800
Subject: [stringtemplate-interest] Does StringTemplate support
	components?
In-Reply-To: <CD86CFB2-4C4C-46DC-9CF5-F90BB02F811D@artima.com>
References: <20061227182800.645f01c3@mail3.videx.com>
	<CD86CFB2-4C4C-46DC-9CF5-F90BB02F811D@artima.com>
Message-ID: <29581BAD-66B7-4DDB-8532-07DE332DD63C@cs.usfca.edu>


On Dec 27, 2006, at 4:45 PM, Bill Venners wrote:
> So why not let each component keep track of its own data and
> templates, and do the rendering of itself. What I'd need in ST is a
> way to call render() on components I suppose, and I don't believe I
> have a way to do that in ST, because it would open up the possibility
> of calling any arbitrary Java code.

Hi Bill, sorry for the delay, I have been working like mad to finish  
the new ANTLR V3 book.

Can you just make the component answer toString()?

> The other thing that bugs me a bit is that I can't know at compile
> time if I'm using a parameter in a template that doesn't exist in the
> data.

Yeah, that is annoying.

> I'm tempted towards the JSP approach of taking some template
> and translating it into print statements that could be called by the
> render method of component objects. These would not compile if there
> were naming problems.

I have thought about a mode where STs could be translated to pure  
Java or whatever language.

> I know that Terrence came to the design of ST while solving real
> problems of web pages and code generation. Is there any reason why
> doing such a component approach might be less useful in practice than
> the ST approach?

The only issue is that you're using real code, which opens up the  
potential for abuse.    Templates can't be extended with us all sorts  
of functionality whereas the component could be.  Further, components  
can't be used by graphics designers-- they have to be programmers to  
understand code.

Ter

From parrt at cs.usfca.edu  Tue Jan  2 15:26:39 2007
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue, 2 Jan 2007 15:26:39 -0800
Subject: [stringtemplate-interest] Does StringTemplate support
	components?
In-Reply-To: <F3C00830-AA33-460F-B0D4-DC67214FC766@artima.com>
References: <20061227182800.645f01c3@mail3.videx.com>
	<CD86CFB2-4C4C-46DC-9CF5-F90BB02F811D@artima.com>
	<F3C00830-AA33-460F-B0D4-DC67214FC766@artima.com>
Message-ID: <133F8942-01F7-4EE4-B907-2F46F59968EF@cs.usfca.edu>


On Dec 27, 2006, at 5:32 PM, Bill Venners wrote:

> Hello,
>
> One more note on components. I'm aware I can call toString() on a
> component object, and get the behavior I described. But that of
> course means you build Strings in memory first and then write them to
> the output stream.

Actually, toString just calls write(output stream), which is the  
method call that is actually propagated all the way down.  I don't  
actually buffer strings up, which is inefficient as you say.

Ter

From bv-svp at artima.com  Tue Jan  2 16:02:40 2007
From: bv-svp at artima.com (Bill Venners)
Date: Tue, 2 Jan 2007 16:02:40 -0800
Subject: [stringtemplate-interest] Does StringTemplate support
	components?
In-Reply-To: <29581BAD-66B7-4DDB-8532-07DE332DD63C@cs.usfca.edu>
References: <20061227182800.645f01c3@mail3.videx.com>
	<CD86CFB2-4C4C-46DC-9CF5-F90BB02F811D@artima.com>
	<29581BAD-66B7-4DDB-8532-07DE332DD63C@cs.usfca.edu>
Message-ID: <1FBFAE85-F1DF-403A-82F0-9B7878244660@artima.com>

Hi Terence,

On Jan 2, 2007, at 3:25 PM, Terence Parr wrote:

>
> On Dec 27, 2006, at 4:45 PM, Bill Venners wrote:
>> So why not let each component keep track of its own data and
>> templates, and do the rendering of itself. What I'd need in ST is a
>> way to call render() on components I suppose, and I don't believe I
>> have a way to do that in ST, because it would open up the possibility
>> of calling any arbitrary Java code.
>
> Hi Bill, sorry for the delay, I have been working like mad to finish
> the new ANTLR V3 book.
>
No problem. I look forward to your book. I just migrated a code  
generator from JavaCC to ANTLR 3 this weekend, and am working on  
migration one right now. ANTLR 3 is very nice.

> Can you just make the component answer toString()?

Yes, I can, and that solves the problem. It is probably premature  
optimization but the difference between toString() and render is  
simply that render takes a "Writer out" parameter. You mentioned you  
don't buffer up Strings, but inside the component's toString method,  
that's what we'd have to do, because we have to return the view of  
the whole component as one String. What I figured would be the  
"efficient" design up front would be to have ST check each object to  
see if it implements View (or whatever interface has the render 
(Writer) method whose semantics say it renders an ST template), and  
if so passes the Writer on down instead of calling toString(). The  
only difference is efficiency, and right now I'm not that worried  
about it.

>
>> The other thing that bugs me a bit is that I can't know at compile
>> time if I'm using a parameter in a template that doesn't exist in the
>> data.
>
> Yeah, that is annoying.
>
>> I'm tempted towards the JSP approach of taking some template
>> and translating it into print statements that could be called by the
>> render method of component objects. These would not compile if there
>> were naming problems.
>
> I have thought about a mode where STs could be translated to pure
> Java or whatever language.
>
Actually, in truth I don't care about the potential efficiency boost  
of compiling templates to Java code, and frankly I'm not sure there  
would be one. What I miss is type checking, and I already deployed a  
(minor) bug using ST because of that. One nice thing you do get with  
pre-compiling JSPs is that you find out at compile time if you  
mistyped an attribute name. But in truth again, I don't think I  
really care about type checking. I just care about *name* checking,  
and it doesn't have to be at compile time. It could be a test. I am  
planning on specifying "view" components in a DSL, and I am going to  
explore to what extent I can automatically generate name check tests  
for the templates that render each particular view. (I'm worried  
about this in particular because we want each component to be able to  
have multiple templates for different themes and locales.)

>> I know that Terrence came to the design of ST while solving real
>> problems of web pages and code generation. Is there any reason why
>> doing such a component approach might be less useful in practice than
>> the ST approach?
>
> The only issue is that you're using real code, which opens up the
> potential for abuse.    Templates can't be extended with us all sorts
> of functionality whereas the component could be.  Further, components
> can't be used by graphics designers-- they have to be programmers to
> understand code.
>
Well, I think the crux of the difference in my mind is simply do I  
call ST once per page and ask it to render a template, or once per  
page plus let each component on the page call ST to render itself.  
You're right that you can't control what someone does inside the  
render(Writer out) method, but as you mention in one or two of your  
papers about ST, you really can't control what people do inside  
toString() either. I'm going to be generating these render methods,  
and the only thing they will be doing is creating a StringTemplate,  
setting its attributes, and rendering the template to the Writer  
passed to render. The toString method will call render with a  
StringWriter, and that will work for now. If I actually have a  
performance problem, I'll deal with it then.

Thanks.

Bill
----
Bill Venners
President
Artima, Inc.
http://www.artima.com




From parrt at cs.usfca.edu  Sat Jan  6 12:54:26 2007
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sat, 6 Jan 2007 12:54:26 -0800
Subject: [stringtemplate-interest] out of action for 2 weeks
Message-ID: <62585FA9-3661-4EDF-B9CF-E73AEDC0CA45@cs.usfca.edu>

Howdy,

I will be even less responsive than usual over the next two weeks  
because of a family emergency. I will be out of town with a laptop,  
but doing only essential stuff like finishing the book ;)

Sorry...

Ter

From michael_ramirez44 at yahoo.com  Mon Jan  8 09:25:23 2007
From: michael_ramirez44 at yahoo.com (Michael Ramirez)
Date: Mon, 8 Jan 2007 09:25:23 -0800 (PST)
Subject: [stringtemplate-interest] Porting StringTemplate
Message-ID: <20070108172523.41902.qmail@web52506.mail.yahoo.com>

How difficult is it to port StringTemplate to another language (Actionscript 3 )?

__________________________________________________
Do You Yahoo!?
Tired of spam?  Yahoo! Mail has the best spam protection around 
http://mail.yahoo.com 

From jjsnyders at rcn.com  Fri Jan 12 07:37:32 2007
From: jjsnyders at rcn.com (John Snyders)
Date: Fri, 12 Jan 2007 10:37:32 -0500
Subject: [stringtemplate-interest] bug? calling template with null argument
Message-ID: <PMEOJKDLMMHOHNEAMPBGIEHPCAAA.jjsnyders@rcn.com>

Hi all,
I am finding that I can't call a template with a null argument either
explicitly or by omission unless the call is made from the top level
template.

Here is an example of what I am trying to do:

page(name, value) ::= <<
 $input(name=name, value=value, size="22", ...)$
 $input(name=name, value=value, size="23", required="t", ...)$
>>

input(name, value, size, required) ::= <<
  <input type="text" name="$name$" size="$size$" value="$value$">
  $if(required)$
  <span class="required">*</span>
  $endif$
>>

This example works as intended. The output is
   <input type="text" name="input1" size="22" value="value 1">
   <input type="text" name="input1" size="23" value="value 1">
   <span class="required">*</span>

However, and here is the bug, when I nest the call to input in another
template (named or anonymous) I get an exception.
Example:
page(name, value) ::= <<
 $t2()$
 $input(name=name, value=value, size="22", ...)$
 $input(name=name, value=value, size="23", required="t", ...)$
>>

t2() ::= <<
 named template
 $input(name=name, value=value, size="21", ...)$
>>

Now I get this exception:
java.util.NoSuchElementException: no such attribute: required in template
context [page t2(...) input(...)]

I think this is a bug because the behavior of passing parameters to a
template should not depend on the nesting depth.

The problem seems to be in
StringTemplate.checkNullAttributeAgainstFormalArguments at the call to
lookupFormalArgument
    FormalArgument formalArg = self.lookupFormalArgument(attribute);
In the case where input is called from the top level the lookup finds the
argument required but when called from t2 it doesn't. It seems to be looking
in the wrong place. I need to do some more debugging. I'm a bit unclear on
the use of self vs. this. Can someone give an overview of what self is for.

Now if I remove the ... from the call to input in t2 it works. This example
doesn't need the ... but in my real work I do need to use the ...
The reason it works without the ... is because of this code in
StringTemplate.get which makes sense
 if ( o==null &&
   !self.passThroughAttributes &&
   self.getFormalArgument(attribute)!=null )
The call to checkNullAttributeAgainstFormalArguments is never made.

Any comments? Anyone seen this or can confirm that this is a bug or have a
fix?

Thanks,
-John
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org:8080/pipermail/stringtemplate-interest/attachments/20070112/57a019d9/attachment.html 

From jjsnyders at rcn.com  Fri Jan 12 19:32:58 2007
From: jjsnyders at rcn.com (John Snyders)
Date: Fri, 12 Jan 2007 22:32:58 -0500
Subject: [stringtemplate-interest] bug? calling template with null
	argument
In-Reply-To: <PMEOJKDLMMHOHNEAMPBGIEHPCAAA.jjsnyders@rcn.com>
Message-ID: <PMEOJKDLMMHOHNEAMPBGMEIACAAA.jjsnyders@rcn.com>

I think I have the fix for this bug but I would like a second opinion if
possible.

In StringTemplate.java method
public Object get(StringTemplate self, String attribute)

I changed this:
  if ( o==null && self.enclosingInstance!=null ) {
      Object valueFromEnclosing = get(self.enclosingInstance, attribute);
      if ( valueFromEnclosing==null ) {
        checkNullAttributeAgainstFormalArguments(self, attribute);
      }
      o = valueFromEnclosing;
  }
To this:
  // not locally defined, check enclosingInstance if embedded
  if ( o==null && self.enclosingInstance!=null ) {
      Object valueFromEnclosing = get(self.enclosingInstance, attribute);
      if ( valueFromEnclosing==null ) {
        checkNullAttributeAgainstFormalArguments(this, attribute);
      }
      o = valueFromEnclosing;
  }

The only change is replacing self with this when calling
checkNullAttributeAgainstFormatArguments.

The get method is called with this being the inner most template in the
example below it is template input. The code above is invoked when there is
still no value for the attribute and it recursively goes up the call stack
looking for a value. When no value is found the checkNull... method is used
just to make sure the attribute is defined by some template in the call
stack. It is purely for runtime correctness checking. The problem is that
self has no meaning at this point. The reason is that the get recursion ends
when self is the second template from the top of the stack. The fix is to
start looking for the attribute in the arguments starting with the template
you are in which is this.

Not sure I explained that well but take a look. So far I have not noticed
any problems from this change but I have not run the unit tests.

-John


  -----Original Message-----
  From: John Snyders [mailto:jjsnyders at rcn.com]
  Sent: Friday, January 12, 2007 10:38 AM
  To: stringtemplate-interest at antlr.org
  Subject: bug? calling template with null argument


  Hi all,
  I am finding that I can't call a template with a null argument either
explicitly or by omission unless the call is made from the top level
template.

  Here is an example of what I am trying to do:

  page(name, value) ::= <<
   $input(name=name, value=value, size="22", ...)$
   $input(name=name, value=value, size="23", required="t", ...)$
  >>

  input(name, value, size, required) ::= <<
    <input type="text" name="$name$" size="$size$" value="$value$">
    $if(required)$
    <span class="required">*</span>
    $endif$
  >>

  This example works as intended. The output is
     <input type="text" name="input1" size="22" value="value 1">
     <input type="text" name="input1" size="23" value="value 1">
     <span class="required">*</span>

  However, and here is the bug, when I nest the call to input in another
template (named or anonymous) I get an exception.
  Example:
  page(name, value) ::= <<
   $t2()$
   $input(name=name, value=value, size="22", ...)$
   $input(name=name, value=value, size="23", required="t", ...)$
  >>

  t2() ::= <<
   named template
   $input(name=name, value=value, size="21", ...)$
  >>

  Now I get this exception:
  java.util.NoSuchElementException: no such attribute: required in template
context [page t2(...) input(...)]

  I think this is a bug because the behavior of passing parameters to a
template should not depend on the nesting depth.

  The problem seems to be in
StringTemplate.checkNullAttributeAgainstFormalArguments at the call to
lookupFormalArgument
      FormalArgument formalArg = self.lookupFormalArgument(attribute);
  In the case where input is called from the top level the lookup finds the
argument required but when called from t2 it doesn't. It seems to be looking
in the wrong place. I need to do some more debugging. I'm a bit unclear on
the use of self vs. this. Can someone give an overview of what self is for.

  Now if I remove the ... from the call to input in t2 it works. This
example doesn't need the ... but in my real work I do need to use the ...
  The reason it works without the ... is because of this code in
StringTemplate.get which makes sense
   if ( o==null &&
     !self.passThroughAttributes &&
     self.getFormalArgument(attribute)!=null )
  The call to checkNullAttributeAgainstFormalArguments is never made.

  Any comments? Anyone seen this or can confirm that this is a bug or have a
fix?

  Thanks,
  -John
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org:8080/pipermail/stringtemplate-interest/attachments/20070112/de0d6daa/attachment.html 

From antlr at foemmel.com  Fri Jan 12 19:42:44 2007
From: antlr at foemmel.com (Matthew Foemmel)
Date: Fri, 12 Jan 2007 21:42:44 -0600 (CST)
Subject: [stringtemplate-interest] trouble wth regions
Message-ID: <E1H5Zn2-0007Pa-Bs@garm.runbox.com>

Hi all,

I'm having a bit of trouble getting regions to work, and was wondering if someone could give me a hand. I've created two groups: a parent, which contains the layout for a web page, and a child, which contains the actual content. I'd like use regions to create "holes" in the layout page where the content page can insert values.

For example, the parent group looks like this:

-----
group Super;

main() ::= <<
<html><body>$@body()$</body></html>
>>
-----

and the child group looks like this:

-----
group Sub;

@main.body() ::= "Hello, World!"
-----

However, when I try to get an instance of the "main" template from the child group, I get an exception that says it can't find template "main.st". If I remove the "@main.body()" template from the child group, I don't get that error (but then the content from the child group isn't inserted, obviously).

Here's my JUnit test:

-----
import static org.junit.Assert.*;

import java.io.StringReader;

import org.antlr.stringtemplate.StringTemplateGroup;
import org.antlr.stringtemplate.StringTemplateGroupInterface;
import org.antlr.stringtemplate.StringTemplateGroupLoader;
import org.antlr.stringtemplate.language.DefaultTemplateLexer;
import org.junit.Test;


public class StringTemplateTest {
@Test
public void regionInhertiance() {
String superText = "group Super;\n\nmain() ::= <<\n<html><body>$@body()$</body></html>\n>>";
StringTemplateGroup superGroup = new StringTemplateGroup(new StringReader(superText), DefaultTemplateLexer.class);

String subText = "group Sub;\n\n at main.body() ::= \"Hello, World!\"";
StringTemplateGroup subGroup = new StringTemplateGroup(new StringReader(subText), DefaultTemplateLexer.class);
subGroup.setSuperGroup(superGroup);

String expected = "<html><body>Hello, World!</body></html>";
String actual = subGroup.getInstanceOf("main").toString();

assertEquals(expected, actual);
}

}
-----

Any help would be appreciated (I'm using version 3.0 of stringtemplate). Thanks in advance.

Cheers,
Foemmel

From parrt at cs.usfca.edu  Fri Jan 12 19:45:34 2007
From: parrt at cs.usfca.edu (Terence Parr)
Date: Fri, 12 Jan 2007 20:45:34 -0700
Subject: [stringtemplate-interest] trouble wth regions
In-Reply-To: <E1H5Zn2-0007Pa-Bs@garm.runbox.com>
References: <E1H5Zn2-0007Pa-Bs@garm.runbox.com>
Message-ID: <36EEC6B4-5DA2-4963-80E5-6AF16877AC79@cs.usfca.edu>

A subtle error.

StringTemplateGroup(new StringReader(subText),  
DefaultTemplateLexer.class);

loads the templates before the supergroup is set.  Try creating sub  
gropu, set super, then loadTemplate or whatever it is.  Or I think  
you can say

group sub : superGroup;
...

Ter

On Jan 12, 2007, at 8:42 PM, Matthew Foemmel wrote:

> Hi all,
>
> I'm having a bit of trouble getting regions to work, and was  
> wondering if someone could give me a hand. I've created two groups:  
> a parent, which contains the layout for a web page, and a child,  
> which contains the actual content. I'd like use regions to create  
> "holes" in the layout page where the content page can insert values.
>
> For example, the parent group looks like this:
>
> -----
> group Super;
>
> main() ::= <<
> <html><body>$@body()$</body></html>
>>>
> -----
>
> and the child group looks like this:
>
> -----
> group Sub;
>
> @main.body() ::= "Hello, World!"
> -----
>
> However, when I try to get an instance of the "main" template from  
> the child group, I get an exception that says it can't find  
> template "main.st". If I remove the "@main.body()" template from  
> the child group, I don't get that error (but then the content from  
> the child group isn't inserted, obviously).
>
> Here's my JUnit test:
>
> -----
> import static org.junit.Assert.*;
>
> import java.io.StringReader;
>
> import org.antlr.stringtemplate.StringTemplateGroup;
> import org.antlr.stringtemplate.StringTemplateGroupInterface;
> import org.antlr.stringtemplate.StringTemplateGroupLoader;
> import org.antlr.stringtemplate.language.DefaultTemplateLexer;
> import org.junit.Test;
>
>
> public class StringTemplateTest {
> @Test
> public void regionInhertiance() {
> String superText = "group Super;\n\nmain() ::= <<\n<html><body> 
> $@body()$</body></html>\n>>";
> StringTemplateGroup superGroup = new StringTemplateGroup(new  
> StringReader(superText), DefaultTemplateLexer.class);
>
> String subText = "group Sub;\n\n at main.body() ::= \"Hello, World!\"";
> StringTemplateGroup subGroup = new StringTemplateGroup(new  
> StringReader(subText), DefaultTemplateLexer.class);
> subGroup.setSuperGroup(superGroup);
>
> String expected = "<html><body>Hello, World!</body></html>";
> String actual = subGroup.getInstanceOf("main").toString();
>
> assertEquals(expected, actual);
> }
>
> }
> -----
>
> Any help would be appreciated (I'm using version 3.0 of  
> stringtemplate). Thanks in advance.
>
> Cheers,
> Foemmel
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org:8080/mailman/listinfo/stringtemplate-interest


From shane at digitalsanctum.com  Sun Jan 14 09:04:04 2007
From: shane at digitalsanctum.com (Shane Witbeck)
Date: Sun, 14 Jan 2007 12:04:04 -0500
Subject: [stringtemplate-interest] IDE support and an issue with a nested
	list of Java objects
Message-ID: <153af7a10701140904h4338b37ci3e3261beecb61329@mail.gmail.com>

Two questions:

1. Is there a "File Type" definition or plugin available for StringTemplate
somewhere which gives highlighting support for the IntelliJ IDEA IDE? If
not, which IDE has the best support for working with templates?

2. I'm getting the string representation of a nested object list instead of
the value of the method I'm calling.

Here's the code in question:

$tables:{
  public $it.capitalizedName$ get$it.capitalizedName$(int id) throws
DataAccessException {
    String sql = "select $it.columns; separator=", ":{ $it.capitalizedName$
}$ from $it.allLowerName$ where ID = ?";

which generates this:

 public Attribute getAttribute(int id) throws DataAccessException {
    String sql = "select
com.digitalsanctum.tools.DomainGenerator$Column at 125d06e,
com.digitalsanctum.tools.DomainGenerator$Column at 196f4b5 from attribute where
ID = ?";

tables is a List<Table> and columns (List<Column>) is a member variable of a
Table object.

TIA
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org:8080/pipermail/stringtemplate-interest/attachments/20070114/f0a0dab9/attachment.html 

From jjsnyders at rcn.com  Sun Jan 14 21:22:37 2007
From: jjsnyders at rcn.com (John Snyders)
Date: Mon, 15 Jan 2007 00:22:37 -0500
Subject: [stringtemplate-interest] IDE support and an issue with a
	nestedlist of Java objects
In-Reply-To: <153af7a10701140904h4338b37ci3e3261beecb61329@mail.gmail.com>
Message-ID: <PMEOJKDLMMHOHNEAMPBGKEIDCAAA.jjsnyders@rcn.com>


  -----Original Message-----
  From: stringtemplate-interest-bounces at antlr.org
[mailto:stringtemplate-interest-bounces at antlr.org]On Behalf Of Shane Witbeck
  Sent: Sunday, January 14, 2007 12:04 PM
  To: stringtemplate-interest at antlr.org
  Subject: [stringtemplate-interest] IDE support and an issue with a
nestedlist of Java objects


  Two questions:

  1. Is there a "File Type" definition or plugin available for
StringTemplate somewhere which gives highlighting support for the IntelliJ
IDEA IDE? If not, which IDE has the best support for working with templates?
  [John Snyders] I don't know of one and I'm not sure how useful they could
be. The tough thing about editing template languages is that you are working
in two dimensions at once. You have the template language syntax and the
generated document language syntax. I think that this would be confusing for
smart editors.

  2. I'm getting the string representation of a nested object list instead
of the value of the method I'm calling.

  Here's the code in question:

  $tables:{
    public $it.capitalizedName$ get$it.capitalizedName$(int id) throws
DataAccessException {
      String sql = "select $it.columns; separator=", ":{
$it.capitalizedName$ }$ from $it.allLowerName$ where ID = ?";

  [John Snyders] I think you want the separator option at the end of the
expression but I'm not sure this explains the output you are getting. You
should also look at your toString methods. Seeing the class at address
usually means you are missing a toString.

      String sql = "select $it.columns:{
$it.capitalizedName$ };separator=","$ from $it.allLowerName$ where ID = ?";

  which generates this:

   public Attribute getAttribute(int id) throws DataAccessException {
      String sql = "select
com.digitalsanctum.tools.DomainGenerator$Column at 125d06e,
com.digitalsanctum.tools.DomainGenerator$Column at 196f4b5 from attribute where
ID = ?";

  tables is a List<Table> and columns (List<Column>) is a member variable of
a Table object.

  TIA


-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org:8080/pipermail/stringtemplate-interest/attachments/20070115/bf946ae3/attachment.html 

From bv-svp at artima.com  Mon Jan 15 12:42:23 2007
From: bv-svp at artima.com (Bill Venners)
Date: Mon, 15 Jan 2007 12:42:23 -0800
Subject: [stringtemplate-interest] IDE support and an issue with a
	nestedlist of Java objects
In-Reply-To: <PMEOJKDLMMHOHNEAMPBGKEIDCAAA.jjsnyders@rcn.com>
References: <PMEOJKDLMMHOHNEAMPBGKEIDCAAA.jjsnyders@rcn.com>
Message-ID: <E5109172-6096-4F63-95CE-CA8E50818B6E@artima.com>

Hi John,

On Jan 14, 2007, at 9:22 PM, John Snyders wrote:

> 1. Is there a "File Type" definition or plugin available for  
> StringTemplate somewhere which gives highlighting support for the  
> IntelliJ IDEA IDE? If not, which IDE has the best support for  
> working with templates?
> [John Snyders] I don't know of one and I'm not sure how useful they  
> could be. The tough thing about editing template languages is that  
> you are working in two dimensions at once. You have the template  
> language syntax and the generated document language syntax. I think  
> that this would be confusing for smart editors.
>
I'd just want a plug-in that understands the ST stuff, and leaves the  
rest un-syntax highlighted, because the generated language syntax  
could be anything. We could write an open source one if we wanted one.

Bill
----
Bill Venners
President
Artima, Inc.
http://www.artima.com




From shane at digitalsanctum.com  Mon Jan 15 13:06:13 2007
From: shane at digitalsanctum.com (Shane Witbeck)
Date: Mon, 15 Jan 2007 16:06:13 -0500
Subject: [stringtemplate-interest] IDE support and an issue with a
	nestedlist of Java objects
In-Reply-To: <E5109172-6096-4F63-95CE-CA8E50818B6E@artima.com>
References: <PMEOJKDLMMHOHNEAMPBGKEIDCAAA.jjsnyders@rcn.com>
	<E5109172-6096-4F63-95CE-CA8E50818B6E@artima.com>
Message-ID: <153af7a10701151306o71363a09jbd55a95b3bddf07a@mail.gmail.com>

Yeah. This was really what I was looking for since I generally use ST for a
variety of things. What would be even better is if you have an existing file
that you could use as a template and be able to poke holes in it for the ST
attribute placeholders. I do this a lot already using the File and Live
Templates features of the IDEA IDE although last I heard they use Velocity
for their stuff.

On 1/15/07, Bill Venners <bv-svp at artima.com> wrote:
>
> Hi John,
>
> On Jan 14, 2007, at 9:22 PM, John Snyders wrote:
>
> > 1. Is there a "File Type" definition or plugin available for
> > StringTemplate somewhere which gives highlighting support for the
> > IntelliJ IDEA IDE? If not, which IDE has the best support for
> > working with templates?
> > [John Snyders] I don't know of one and I'm not sure how useful they
> > could be. The tough thing about editing template languages is that
> > you are working in two dimensions at once. You have the template
> > language syntax and the generated document language syntax. I think
> > that this would be confusing for smart editors.
> >
> I'd just want a plug-in that understands the ST stuff, and leaves the
> rest un-syntax highlighted, because the generated language syntax
> could be anything. We could write an open source one if we wanted one.
>
> Bill
> ----
> Bill Venners
> President
> Artima, Inc.
> http://www.artima.com
>
>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org:8080/pipermail/stringtemplate-interest/attachments/20070115/a216b693/attachment.html 

From shane at digitalsanctum.com  Mon Jan 15 20:59:43 2007
From: shane at digitalsanctum.com (Shane Witbeck)
Date: Mon, 15 Jan 2007 23:59:43 -0500
Subject: [stringtemplate-interest] IDE support and an issue with a
	nested list of Java objects
In-Reply-To: <153af7a10701140904h4338b37ci3e3261beecb61329@mail.gmail.com>
References: <153af7a10701140904h4338b37ci3e3261beecb61329@mail.gmail.com>
Message-ID: <153af7a10701152059v93512darac33bd87223e1db3@mail.gmail.com>

Although I've had some help from Terence, I'm still having an issue with the
first of my two questions. I'm iterating over a list of "table" objects and
for each table object I have a list of column objects.

His solution was something like this:

$tables:{
  public $it.capitalizedName$ get$it.capitalizedName$(int id) throws
DataAccessException {
    String sql = "select $it.columns{c | $c.lowerName()$}; separator=", "$
from $it.allLowerName$ where ID = ?";

I think he made the assumption that c.lowerName() is a call to a nested
template. What I really need it to do is to invoke a "lowerName()" method on
the column object like I'm doing in the iteration of tables above it. Not
sure if I'm unaware of a limitation or if I have the syntax wrong.

Thanks again.


On 1/14/07, Shane Witbeck <shane at digitalsanctum.com> wrote:
>
> Two questions:
>
> 1. Is there a "File Type" definition or plugin available for
> StringTemplate somewhere which gives highlighting support for the IntelliJ
> IDEA IDE? If not, which IDE has the best support for working with templates?
>
>
> 2. I'm getting the string representation of a nested object list instead
> of the value of the method I'm calling.
>
> Here's the code in question:
>
> $tables:{
>   public $it.capitalizedName$ get$it.capitalizedName$(int id) throws
> DataAccessException {
>     String sql = "select $it.columns; separator=", ":{
> $it.capitalizedName$ }$ from $it.allLowerName$ where ID = ?";
>
> which generates this:
>
>  public Attribute getAttribute(int id) throws DataAccessException {
>     String sql = "select
> com.digitalsanctum.tools.DomainGenerator$Column at 125d06e,
> com.digitalsanctum.tools.DomainGenerator$Column at 196f4b5 from attribute
> where ID = ?";
>
> tables is a List<Table> and columns (List<Column>) is a member variable of
> a Table object.
>
> TIA
>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org:8080/pipermail/stringtemplate-interest/attachments/20070115/242f86da/attachment.html 

From alan.j.larkin at ucd.ie  Tue Jan 16 04:29:25 2007
From: alan.j.larkin at ucd.ie (Alan Larkin)
Date: Tue, 16 Jan 2007 12:29:25 +0000
Subject: [stringtemplate-interest] ST/ANTLR Language Translation,
	Optional Attributes
Message-ID: <45ACC525.4040300@ucd.ie>

Im new to this so please be patient and have a go at reading/answering
this Q ...

I am experimenting with StringTemplate and ANTLR for language
translation a la Terrence's article
(http://www.codegeneration.net/tiki-read_article.php?articleId=77).

I have a question about how to handle stuff like the following production (from Wiggs' C++ Grammar):

...
("typedef")=>
  (
    ("typedef" class_specifier)=>
    "typedef" class_decl_or_def[fs] (init_declarator_list)? SEMICOLON
  |
    ("typedef" "enum")=>
    "typedef" enum_specifier (init_declarator_list)? SEMICOLON
  |
    (declaration_specifiers function_declarator[0] SEMICOLON)=>
    declaration
  |
    declaration
)
...

Should I create a single StringTemplate called typedef which takes all
the possible arguments, like this:

/* There is no translation required for typedefs */
typedef(class_decl_or_def, init_declarator_list, enum_specifier,
declaration) ::= <<
  "typedef " <class_decl_or_def> <enum_specifier> <init_declarator_list; separator=", "> ";"
>>

and write the production as:

...
("typedef")=>
  { code = template("typedef") }
  (
    ("typedef" class_specifier)=>
    "typedef" a=class_decl_or_def[fs] (b=init_declarator_list)? SEMICOLON
    {
      code.setAttribute("class_decl_or_def", a);
      code.setAttribute("init_declarator_list", b);
    }			}
  |
    ("typedef" "enum")=>
    "typedef" a=enum_specifier (b=init_declarator_list)? SEMICOLON
    {
      code.setAttribute("enum_specifier", a);
      code.setAttribute("init_declarator_list", b);
    }
  |
    (declaration_specifiers function_declarator[0] SEMICOLON)=>
    a=declaration
    {
      code.setAttribute("declaration", a);
    }
  |
    a=declaration
    {
      code.setAttribute("declaration", a);
    }
)
...

?

This doesnt capture the fact that only certain combinations of
arguments/attributes will occur.

Or should I write different templates for each type of typedef?

Or is there some other way that is appropriate?

Thanks for your help.

From jjsnyders at rcn.com  Tue Jan 16 06:47:39 2007
From: jjsnyders at rcn.com (John Snyders)
Date: Tue, 16 Jan 2007 09:47:39 -0500
Subject: [stringtemplate-interest] IDE support and an issue with anested
	list of Java objects
In-Reply-To: <153af7a10701152059v93512darac33bd87223e1db3@mail.gmail.com>
Message-ID: <PMEOJKDLMMHOHNEAMPBGOEIICAAA.jjsnyders@rcn.com>

A template cannot call any methods. This would break the seperation between
model and view. This is intentional. See
http://www.cs.usfca.edu/~parrt/papers/mvc.templates.pdf sections 7 and 7.1.
All data the view will use needs to be calculated before calling the
template.

I'm not sure what you are trying to do by calling a method. lowerName sounds
like a property. If you are trying to change the value of column c to
lowercase then there are a few ways to do this. The new format option could
be used but I don't know if it is available in a stable build. It would look
like this $c;format="lowercase"$ and you have to write the code to do the
lowercase in a renderer. If you always want the columns in lowercase
(probably not) you can wrap them in an object where the toString method does
the lowercase. You can also create pseudo properties on the column object
that does the formating. If c is a column object that holds the value of the
column create a getLowerName() getter property method which does the
lowercase (or whatever other formatting you want) on the column value.

-John
  -----Original Message-----
  From: stringtemplate-interest-bounces at antlr.org
[mailto:stringtemplate-interest-bounces at antlr.org]On Behalf Of Shane Witbeck
  Sent: Tuesday, January 16, 2007 12:00 AM
  To: stringtemplate-interest at antlr.org
  Subject: Re: [stringtemplate-interest] IDE support and an issue with
anested list of Java objects


  Although I've had some help from Terence, I'm still having an issue with
the first of my two questions. I'm iterating over a list of "table" objects
and for each table object I have a list of column objects.

  His solution was something like this:

  $tables:{
    public $it.capitalizedName$ get$it.capitalizedName$(int id) throws
DataAccessException {
      String sql = "select $it.columns{c | $c.lowerName()$}; separator=", "$
from $it.allLowerName$ where ID = ?";

  I think he made the assumption that c.lowerName() is a call to a nested
template. What I really need it to do is to invoke a "lowerName()" method on
the column object like I'm doing in the iteration of tables above it. Not
sure if I'm unaware of a limitation or if I have the syntax wrong.

  Thanks again.



  On 1/14/07, Shane Witbeck <shane at digitalsanctum.com> wrote:
    Two questions:

    1. Is there a "File Type" definition or plugin available for
StringTemplate somewhere which gives highlighting support for the IntelliJ
IDEA IDE? If not, which IDE has the best support for working with templates?

    2. I'm getting the string representation of a nested object list instead
of the value of the method I'm calling.

    Here's the code in question:

    $tables:{
      public $it.capitalizedName$ get$it.capitalizedName$(int id) throws
DataAccessException {
        String sql = "select $it.columns; separator=", ":{
$it.capitalizedName$ }$ from $it.allLowerName$ where ID = ?";

    which generates this:

     public Attribute getAttribute(int id) throws DataAccessException {
        String sql = "select
com.digitalsanctum.tools.DomainGenerator$Column at 125d06e,
com.digitalsanctum.tools.DomainGenerator$Column at 196f4b5 from attribute where
ID = ?";

    tables is a List<Table> and columns (List<Column>) is a member variable
of a Table object.

    TIA




-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org:8080/pipermail/stringtemplate-interest/attachments/20070116/2bf4b126/attachment.html 

From jjsnyders at rcn.com  Tue Jan 16 21:40:59 2007
From: jjsnyders at rcn.com (John Snyders)
Date: Wed, 17 Jan 2007 00:40:59 -0500
Subject: [stringtemplate-interest] handling of arrays
Message-ID: <PMEOJKDLMMHOHNEAMPBGCEIKCAAA.jjsnyders@rcn.com>

I noticed in ASTExpr.java the method convertArrayToList. It seems to me that
this is wasteful. I have not looked at it too deep but why not handle arrays
like other collections and wrap them in an ArrayIterator inside
convertAnythingIteratableToIterator.

-John
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org:8080/pipermail/stringtemplate-interest/attachments/20070117/14644c99/attachment.html 

From jjsnyders at rcn.com  Tue Jan 16 21:51:46 2007
From: jjsnyders at rcn.com (John Snyders)
Date: Wed, 17 Jan 2007 00:51:46 -0500
Subject: [stringtemplate-interest] inconsistency with length function
Message-ID: <PMEOJKDLMMHOHNEAMPBGMEIKCAAA.jjsnyders@rcn.com>

The length function knows how to get the length of List, Map, arrays, and
Iterator. However convertAnythingIteratableToIterator and
convertAnythingToIterator are more general and get iterators for Collection
rather than List.

I think that the length method in ASTExpr.java should be changed as follows:

From:

} else if (attribute instanceof List) {
  i = ((List)attribute).size();
}

To:

} else if (attribute instanceof Collection) {
  i = ((List)attribute).size();
}

In addition I don't think Iterator should be handled like it is. Getting the
length of an iterator will use it up so that it can't be used again.
Some rethinking of how iterators are dealt with is needed. Until then it
would be good practice to never pass an iterator in as a ST attribute.

The issue is the same as what lead to Iterable being added to Java 5 in
order to support the new foreach syntax. Because an iterator is single use
only there needed to be a way to get the iterator again and again.

Thanks,
-John
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org:8080/pipermail/stringtemplate-interest/attachments/20070117/cfd7cd13/attachment.html 

From jjsnyders at rcn.com  Tue Jan 16 22:01:32 2007
From: jjsnyders at rcn.com (John Snyders)
Date: Wed, 17 Jan 2007 01:01:32 -0500
Subject: [stringtemplate-interest] inconsistency with length function
In-Reply-To: <PMEOJKDLMMHOHNEAMPBGMEIKCAAA.jjsnyders@rcn.com>
Message-ID: <PMEOJKDLMMHOHNEAMPBGGEILCAAA.jjsnyders@rcn.com>

Woops, should be
} else if (attribute instanceof Collection) {
  i = ((Collection)attribute).size();
}

  -----Original Message-----
  From: John Snyders [mailto:jjsnyders at rcn.com]
  Sent: Wednesday, January 17, 2007 12:52 AM
  To: stringtemplate-interest at antlr.org
  Subject: inconsistency with length function


  The length function knows how to get the length of List, Map, arrays, and
Iterator. However convertAnythingIteratableToIterator and
convertAnythingToIterator are more general and get iterators for Collection
rather than List.

  I think that the length method in ASTExpr.java should be changed as
follows:

  From:

  } else if (attribute instanceof List) {
    i = ((List)attribute).size();
  }

  To:

  } else if (attribute instanceof Collection) {
    i = ((List)attribute).size();
  }

  In addition I don't think Iterator should be handled like it is. Getting
the length of an iterator will use it up so that it can't be used again.
  Some rethinking of how iterators are dealt with is needed. Until then it
would be good practice to never pass an iterator in as a ST attribute.

  The issue is the same as what lead to Iterable being added to Java 5 in
order to support the new foreach syntax. Because an iterator is single use
only there needed to be a way to get the iterator again and again.

  Thanks,
  -John
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org:8080/pipermail/stringtemplate-interest/attachments/20070117/88c78063/attachment.html 

From te0006 at web.de  Fri Jan 19 05:39:10 2007
From: te0006 at web.de (Thilo Ernst)
Date: Fri, 19 Jan 2007 14:39:10 +0100
Subject: [stringtemplate-interest] StringTemplateGroup from String vs.
 loaded with CommonGroupLoader: Inconsistent Rendering behaviour
Message-ID: <45B0C9FE.8000800@web.de>

Hello StringTemplate users,

and first of all, thanks to Terence Parr for such a powerful library.
I'm still pretty new to ST so I'm in doubt whether the following problem
is a bug in ST or simply my own lack of sufficient insight. Here we go:

I first tried the introductory example from
http://www.antlr.org/wiki/display/ST/Group+Files, which creates
a StringTemplateGroup from a string using a StringReader instance:

        String templates = "group simple; vardef(type,name)::= \"$type$
<name>;\"";
        StringTemplateGroup group = new StringTemplateGroup(new
StringReader(templates));
        StringTemplate t = group.getInstanceOf("vardef");
        t.setAttribute("type", "int");
        t.setAttribute("name", "foo");
        System.out.println("Generated: [["+t.toString()+"]]");

Expectedly, this works:
         Generated: [[int foo;]]

Now I tried to get the same thing to work with a StringTemplateGroup
loaded with a
PathGroupLoader:

            String location="templates";
            StringTemplateGroupLoader loader =
            new PathGroupLoader(location, new LogSTEL());
            StringTemplateGroup.registerGroupLoader (loader);
            StringTemplateGroup group = StringTemplateGroup.loadGroup
("test");
            System.out.println("TemplateGroup loaded ");
            StringTemplate t = group.getInstanceOf("vardef");
            t.setAttribute("type", "int");
            t.setAttribute("name", "foo");
            System.out.println("Generated: [["+t.toString()+"]]");

This is the contents of templates/test.stg:

  group simple;
  vardef(type,name) ::= "$type$ <name>;"

The output:
              Generated: [[int <name>;]]

That is, surprisingly, the <..> expressions are not substituted, while
the $...$
are.

I don't think the interpolation behaviour should depend on the way the
StringTemplateGroup object is created. Did I run into a bug, or am I
just too
stupid?

NB: The problem occurs as well when using CommonGroupLoader.
I'm using stringtemplate-3.0 on j2sdk1.5-sun. Any hints appreciated.

Best regards, Thilo




From parrt at cs.usfca.edu  Fri Jan 19 08:17:08 2007
From: parrt at cs.usfca.edu (Terence Parr)
Date: Fri, 19 Jan 2007 09:17:08 -0700
Subject: [stringtemplate-interest] StringTemplateGroup from String vs.
	loaded with CommonGroupLoader: Inconsistent Rendering behaviour
In-Reply-To: <45B0C9FE.8000800@web.de>
References: <45B0C9FE.8000800@web.de>
Message-ID: <B49AF982-3DB1-40A5-8A28-B87B6534489A@cs.usfca.edu>

Hi.  I believe it's because STG now using <...> as default because  
it's use more for code gen than HTML.
Ter
On Jan 19, 2007, at 6:39 AM, Thilo Ernst wrote:

> Hello StringTemplate users,
>
> and first of all, thanks to Terence Parr for such a powerful library.
> I'm still pretty new to ST so I'm in doubt whether the following  
> problem
> is a bug in ST or simply my own lack of sufficient insight. Here we  
> go:
>
> I first tried the introductory example from
> http://www.antlr.org/wiki/display/ST/Group+Files, which creates
> a StringTemplateGroup from a string using a StringReader instance:
>
>         String templates = "group simple; vardef(type,name)::=  
> \"$type$
> <name>;\"";
>         StringTemplateGroup group = new StringTemplateGroup(new
> StringReader(templates));
>         StringTemplate t = group.getInstanceOf("vardef");
>         t.setAttribute("type", "int");
>         t.setAttribute("name", "foo");
>         System.out.println("Generated: [["+t.toString()+"]]");
>
> Expectedly, this works:
>          Generated: [[int foo;]]
>
> Now I tried to get the same thing to work with a StringTemplateGroup
> loaded with a
> PathGroupLoader:
>
>             String location="templates";
>             StringTemplateGroupLoader loader =
>             new PathGroupLoader(location, new LogSTEL());
>             StringTemplateGroup.registerGroupLoader (loader);
>             StringTemplateGroup group = StringTemplateGroup.loadGroup
> ("test");
>             System.out.println("TemplateGroup loaded ");
>             StringTemplate t = group.getInstanceOf("vardef");
>             t.setAttribute("type", "int");
>             t.setAttribute("name", "foo");
>             System.out.println("Generated: [["+t.toString()+"]]");
>
> This is the contents of templates/test.stg:
>
>   group simple;
>   vardef(type,name) ::= "$type$ <name>;"
>
> The output:
>               Generated: [[int <name>;]]
>
> That is, surprisingly, the <..> expressions are not substituted, while
> the $...$
> are.
>
> I don't think the interpolation behaviour should depend on the way the
> StringTemplateGroup object is created. Did I run into a bug, or am I
> just too
> stupid?
>
> NB: The problem occurs as well when using CommonGroupLoader.
> I'm using stringtemplate-3.0 on j2sdk1.5-sun. Any hints appreciated.
>
> Best regards, Thilo
>
>
>
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org:8080/mailman/listinfo/stringtemplate-interest


From jjsnyders at rcn.com  Fri Jan 19 08:54:48 2007
From: jjsnyders at rcn.com (John Snyders)
Date: Fri, 19 Jan 2007 11:54:48 -0500
Subject: [stringtemplate-interest] StringTemplateGroup from String
	vs.loaded with CommonGroupLoader: Inconsistent Rendering behaviour
In-Reply-To: <B49AF982-3DB1-40A5-8A28-B87B6534489A@cs.usfca.edu>
Message-ID: <PMEOJKDLMMHOHNEAMPBGMEJACAAA.jjsnyders@rcn.com>

> That is, surprisingly, the <..> expressions are not substituted, while
> > the $...$
> > are.

You may be clear on this but just in case. There can only be one pair of
characters to separate and bracket template code from template document
chunks.
Some examples use $$ and some use <> but you can't mix them in a single
template.

I use the same method as you for loading group files and get the same
behavior.
The $ is the character that brackets template expressions.

I did read that the default changed to <> but I have not seen this. I
actually like the $ as a delimiter. I have used ST for XHTML, SQL, and
config files. <> doesn't mix well with XML/HTML but $ works well with all of
these things so I'm not sure what the motivation is for <>. Is it just a
preference for how it looks?

I did not try this but I rememeber seeing in the API docs someplace where
you can explicitly say which lexer you want either AngleBracketTemplateLexer
or DefaultTemplateLexer. I'm not sure how this interacts with
PathGroupLoader.

-John



> -----Original Message-----
> From: stringtemplate-interest-bounces at antlr.org
> [mailto:stringtemplate-interest-bounces at antlr.org]On Behalf Of Terence
> Parr
> Sent: Friday, January 19, 2007 11:17 AM
> To: StringTemplate
> Subject: Re: [stringtemplate-interest] StringTemplateGroup from String
> vs.loaded with CommonGroupLoader: Inconsistent Rendering behaviour
>
>
> Hi.  I believe it's because STG now using <...> as default because
> it's use more for code gen than HTML.
> Ter
> On Jan 19, 2007, at 6:39 AM, Thilo Ernst wrote:
>
> > Hello StringTemplate users,
> >
> > and first of all, thanks to Terence Parr for such a powerful library.
> > I'm still pretty new to ST so I'm in doubt whether the following
> > problem
> > is a bug in ST or simply my own lack of sufficient insight. Here we
> > go:
> >
> > I first tried the introductory example from
> > http://www.antlr.org/wiki/display/ST/Group+Files, which creates
> > a StringTemplateGroup from a string using a StringReader instance:
> >
> >         String templates = "group simple; vardef(type,name)::=
> > \"$type$
> > <name>;\"";
> >         StringTemplateGroup group = new StringTemplateGroup(new
> > StringReader(templates));
> >         StringTemplate t = group.getInstanceOf("vardef");
> >         t.setAttribute("type", "int");
> >         t.setAttribute("name", "foo");
> >         System.out.println("Generated: [["+t.toString()+"]]");
> >
> > Expectedly, this works:
> >          Generated: [[int foo;]]
> >
> > Now I tried to get the same thing to work with a StringTemplateGroup
> > loaded with a
> > PathGroupLoader:
> >
> >             String location="templates";
> >             StringTemplateGroupLoader loader =
> >             new PathGroupLoader(location, new LogSTEL());
> >             StringTemplateGroup.registerGroupLoader (loader);
> >             StringTemplateGroup group = StringTemplateGroup.loadGroup
> > ("test");
> >             System.out.println("TemplateGroup loaded ");
> >             StringTemplate t = group.getInstanceOf("vardef");
> >             t.setAttribute("type", "int");
> >             t.setAttribute("name", "foo");
> >             System.out.println("Generated: [["+t.toString()+"]]");
> >
> > This is the contents of templates/test.stg:
> >
> >   group simple;
> >   vardef(type,name) ::= "$type$ <name>;"
> >
> > The output:
> >               Generated: [[int <name>;]]
> >
> > That is, surprisingly, the <..> expressions are not substituted, while
> > the $...$
> > are.
> >
> > I don't think the interpolation behaviour should depend on the way the
> > StringTemplateGroup object is created. Did I run into a bug, or am I
> > just too
> > stupid?
> >
> > NB: The problem occurs as well when using CommonGroupLoader.
> > I'm using stringtemplate-3.0 on j2sdk1.5-sun. Any hints appreciated.
> >
> > Best regards, Thilo
> >
> >
> >
> > _______________________________________________
> > stringtemplate-interest mailing list
> > stringtemplate-interest at antlr.org
> > http://www.antlr.org:8080/mailman/listinfo/stringtemplate-interest
>
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org:8080/mailman/listinfo/stringtemplate-interest

From te0006 at web.de  Fri Jan 19 08:48:09 2007
From: te0006 at web.de (Thilo Ernst)
Date: Fri, 19 Jan 2007 17:48:09 +0100
Subject: [stringtemplate-interest] StringTemplateGroup from String vs.
 loaded with CommonGroupLoader: Inconsistent Rendering behaviour
In-Reply-To: <B49AF982-3DB1-40A5-8A28-B87B6534489A@cs.usfca.edu>
References: <45B0C9FE.8000800@web.de>
	<B49AF982-3DB1-40A5-8A28-B87B6534489A@cs.usfca.edu>
Message-ID: <45B0F649.8070901@web.de>

Hello Terence,

thanks for a quick reply!

I meanwhile found DefaultTemplateLexer, AngleBracketTemplateLexer &
StringTemplateGroup.registerDefaultLexer() , so I can deal with the issue.

In case anybody else stumbles into this, here is the new code, showing
how to select the lexer before loading the templates:

           StringTemplateGroupLoader loader =
            new PathGroupLoader(location, new LogSTEL());
            StringTemplateGroup.registerGroupLoader (loader);
            // 
StringTemplateGroup.registerDefaultLexer(DefaultTemplateLexer.class);
            
StringTemplateGroup.registerDefaultLexer(AngleBracketTemplateLexer.class);
            StringTemplateGroup group = StringTemplateGroup.loadGroup 
("test");
            System.out.println("TemplateGroup loaded ");
            StringTemplate t = group.getInstanceOf("vardef");
            t.setAttribute("type", "int");
            t.setAttribute("name", "foo");
            System.out.println("Generated: [["+t.toString()+"]]");

Still, I find it non-intuitive that STG uses a different  default lexer 
just because
another way of _creating_ the STG object happens to be used. But of course
this is a minor issue.

Thanks & best regards, Thilo

Terence Parr schrieb:

>Hi.  I believe it's because STG now using <...> as default because  
>it's use more for code gen than HTML.
>Ter
>On Jan 19, 2007, at 6:39 AM, Thilo Ernst wrote:
>
>  
>
>>Hello StringTemplate users,
>>
>>and first of all, thanks to Terence Parr for such a powerful library.
>>I'm still pretty new to ST so I'm in doubt whether the following  
>>problem
>>is a bug in ST or simply my own lack of sufficient insight. Here we  
>>go:
>>
>>I first tried the introductory example from
>>http://www.antlr.org/wiki/display/ST/Group+Files, which creates
>>a StringTemplateGroup from a string using a StringReader instance:
>>
>>        String templates = "group simple; vardef(type,name)::=  
>>\"$type$
>><name>;\"";
>>        StringTemplateGroup group = new StringTemplateGroup(new
>>StringReader(templates));
>>        StringTemplate t = group.getInstanceOf("vardef");
>>        t.setAttribute("type", "int");
>>        t.setAttribute("name", "foo");
>>        System.out.println("Generated: [["+t.toString()+"]]");
>>
>>Expectedly, this works:
>>         Generated: [[int foo;]]
>>
>>Now I tried to get the same thing to work with a StringTemplateGroup
>>loaded with a
>>PathGroupLoader:
>>
>>            String location="templates";
>>            StringTemplateGroupLoader loader =
>>            new PathGroupLoader(location, new LogSTEL());
>>            StringTemplateGroup.registerGroupLoader (loader);
>>            StringTemplateGroup group = StringTemplateGroup.loadGroup
>>("test");
>>            System.out.println("TemplateGroup loaded ");
>>            StringTemplate t = group.getInstanceOf("vardef");
>>            t.setAttribute("type", "int");
>>            t.setAttribute("name", "foo");
>>            System.out.println("Generated: [["+t.toString()+"]]");
>>
>>This is the contents of templates/test.stg:
>>
>>  group simple;
>>  vardef(type,name) ::= "$type$ <name>;"
>>
>>The output:
>>              Generated: [[int <name>;]]
>>
>>That is, surprisingly, the <..> expressions are not substituted, while
>>the $...$
>>are.
>>
>>I don't think the interpolation behaviour should depend on the way the
>>StringTemplateGroup object is created. Did I run into a bug, or am I
>>just too
>>stupid?
>>
>>NB: The problem occurs as well when using CommonGroupLoader.
>>I'm using stringtemplate-3.0 on j2sdk1.5-sun. Any hints appreciated.
>>
>>Best regards, Thilo
>>
>>
>>
>>_______________________________________________
>>stringtemplate-interest mailing list
>>stringtemplate-interest at antlr.org
>>http://www.antlr.org:8080/mailman/listinfo/stringtemplate-interest
>>    
>>
>
>_______________________________________________
>stringtemplate-interest mailing list
>stringtemplate-interest at antlr.org
>http://www.antlr.org:8080/mailman/listinfo/stringtemplate-interest
>
>  
>

From jjsnyders at rcn.com  Mon Jan 22 22:10:23 2007
From: jjsnyders at rcn.com (John Snyders)
Date: Tue, 23 Jan 2007 01:10:23 -0500
Subject: [stringtemplate-interest] bug in format option
Message-ID: <PMEOJKDLMMHOHNEAMPBGGEJFCAAA.jjsnyders@rcn.com>

This is a bug in the code I submitted for the format option feature.

Each time a template is written it should produce the same output assuming
the attributes have not changed. Right?

With this contrived renderer (I first found the bug with a more reasonable
renderer but this one makes the problem very obvious)

public static class TestStringRenderer implements AttributeRenderer
{
    public String toString(Object o, String formatName)
    {
        String s = (String)o;
        return "(" + formatName + ":" + s + ")";
    }
...

This code

StringTemplate st = new StringTemplate("v1 is: $v1;format=\"foo\"$");
st.registerRenderer(String.class, new TestStringRenderer());
st.setAttribute("v1", "value");
System.out.println(st.toString());
System.out.println(st.toString());
System.out.println(st.toString());

Produces this output
v1 is: (foo:value)
v1 is: ((foo:foo):value)
v1 is: (((foo:foo):foo):value)

I would expect this output:

v1 is: (foo:value)
v1 is: (foo:value)
v1 is: (foo:value)

There are other cases where a template can get used more than once such as
when iterating over a list. These cases have the exact same problem.

It doesn't even matter if the attribute changes value. Adding these lines
after the first println
  st.removeAttribute("v1");
  st.setAttribute("v1", "another Value");


produces this which is still wrong:

v1 is: (foo:value)
v1 is: ((foo:foo):another Value)
v1 is: (((foo:foo):foo):another Value)

The problem is in ASTExpr.java method handleExprOptions. The problem is that
the current formatString is used when evaluating the option value
expressions. Now the other options (such as null) don't seem to have a
similar problem even though the option already has a value when the template
is used again. I only played around with null and separator. But I did find
that format used with null and separator (and presumably the others that
take arguments) causes a problem. For example, if the above template is
changed to "v1 is: $v1;format=\"foo\",separator=\",\"$" and the value of v1
is a list with items "x", "y", "z" then the output is:

v1 is: (foo:x),(foo:y),(foo:z)
v1 is: ((foo:foo):x)(foo:,)((foo:foo):y)(foo:,)((foo:foo):z)
v1 is:
(((foo:foo):foo):x)((foo:foo):,)(((foo:foo):foo):y)((foo:foo):,)(((foo:foo):
foo):z)

The null option when combined with format has the same problem.

The solution is that the current value of formatString should not be used
when evaluating the expressions of any of the options. The code change I
made was to save off the current value of formatString before evaluating the
options and put it back when done.

String tempFormatString = formatString;
formatString = null;
StringTemplateAST wrapAST = (StringTemplateAST)getOption("wrap");
if ( wrapAST!=null ) {
    wrapString = evaluateExpression(self,wrapAST);
...

StringTemplateAST formatAST = (StringTemplateAST)getOption("format");
if ( formatAST!=null ) {
    // this gets assigned to the real formatString below
    tempFormatString = evaluateExpression(self, formatAST);
...

formatString = tempFormatString;

I have not yet sync'ed with the repository but have diffed my code with it
and believe the same problem exists there. If anyone wants the whole file I
can supply it.

Let me know if you think there is a better solution.

Thanks,
-John
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org:8080/pipermail/stringtemplate-interest/attachments/20070123/75c2bf40/attachment.html 

From brian.kejser at protexis.com  Wed Jan 24 09:59:38 2007
From: brian.kejser at protexis.com (brian.kejser at protexis.com)
Date: Wed, 24 Jan 2007 09:59:38 -0800 (PST)
Subject: [stringtemplate-interest] Remove carriage returns
Message-ID: <51517.10.238.10.71.1169661578.webmail@10.238.10.71>

Hi

In order to make a template human readable during editing I need to
include both carriage returns and line feeds in the document. When
rendering the template I need all carraige returns removed or the consumer
of the output throws an error. I currently render the template then do a
string replace to resolve this issue.

Is there a cleaner way? That is, can I instruct the template engine to
drop all carriage returns during rendering?

Thanks






From jjsnyders at rcn.com  Wed Jan 24 10:31:27 2007
From: jjsnyders at rcn.com (John Snyders)
Date: Wed, 24 Jan 2007 13:31:27 -0500
Subject: [stringtemplate-interest] Remove carriage returns
In-Reply-To: <51517.10.238.10.71.1169661578.webmail@10.238.10.71>
Message-ID: <PMEOJKDLMMHOHNEAMPBGIEJJCAAA.jjsnyders@rcn.com>

Because the source contains CRLF and the output just LF it makes me think
that this is an OS new line convention issue. If so you might try a source
editor that is happy with just LF as new line. Many code editors can be
configured for this. Then your source would just have LF in it and no need
for any transformation.

StringTemplate allows you to create your own StringTemplateWriter. This
gives you final control over the output. You should be able to strip CR at
this point. The advantage is that you don't have to wait for the whole
output to be available. You can pipe the output of your template directly to
the consumer. Look at NoIndentWriter and AutoIndentWriter implementation for
ideas. I have not created my own Writer yet.

Another option would be to preprocess the template to remove CR before
invoking the templates. There are various dos2unix commandline tools for
this. You can make it part of the build.

-John


> -----Original Message-----
> From: stringtemplate-interest-bounces at antlr.org
> [mailto:stringtemplate-interest-bounces at antlr.org]On Behalf Of
> brian.kejser at protexis.com
> Sent: Wednesday, January 24, 2007 1:00 PM
> To: stringtemplate-interest at antlr.org
> Subject: [stringtemplate-interest] Remove carriage returns
>
>
> Hi
>
> In order to make a template human readable during editing I need to
> include both carriage returns and line feeds in the document. When
> rendering the template I need all carraige returns removed or the consumer
> of the output throws an error. I currently render the template then do a
> string replace to resolve this issue.
>
> Is there a cleaner way? That is, can I instruct the template engine to
> drop all carriage returns during rendering?
>
> Thanks
>
>
>
>
>
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org:8080/mailman/listinfo/stringtemplate-interest

From parrt at cs.usfca.edu  Sat Jan 27 15:23:28 2007
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sat, 27 Jan 2007 15:23:28 -0800
Subject: [stringtemplate-interest] bug in format option
In-Reply-To: <PMEOJKDLMMHOHNEAMPBGGEJFCAAA.jjsnyders@rcn.com>
References: <PMEOJKDLMMHOHNEAMPBGGEJFCAAA.jjsnyders@rcn.com>
Message-ID: <745388F5-9009-4FF4-A6CB-302A5B160B8B@cs.usfca.edu>

Wow!  Nasty bug.  As usual, John, excellent analysis and solution.  I  
think just killing the formatString is ok:

	protected void handleExprOptions(StringTemplate self) {
		// make sure options don't use format / renderer.  They are usually
		// strings which might invoke a string renderer etc...
		formatString = null;
...

Try that.  I pushed to depot.

Ter


From parrt at cs.usfca.edu  Sat Jan 27 15:33:12 2007
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sat, 27 Jan 2007 15:33:12 -0800
Subject: [stringtemplate-interest] inconsistency with length function
In-Reply-To: <PMEOJKDLMMHOHNEAMPBGMEIKCAAA.jjsnyders@rcn.com>
References: <PMEOJKDLMMHOHNEAMPBGMEIKCAAA.jjsnyders@rcn.com>
Message-ID: <E8C9B11E-4DD2-48DF-8ED3-5383ED181E3C@cs.usfca.edu>

On Jan 16, 2007, at 9:51 PM, John Snyders wrote:

> The length function knows how to get the length of List, Map,  
> arrays, and Iterator. However convertAnythingIteratableToIterator  
> and convertAnythingToIterator are more general and get iterators  
> for Collection rather than List.
>
> I think that the length method in ASTExpr.java should be changed as  
> follows:
> From:
>
> } else if (attribute instanceof List) {
>   i = ((List)attribute).size();
> }
> To:
>
> } else if (attribute instanceof Collection) {
>   i = ((List)attribute).size();
> }

Howdy!  OK, yep, good fix.
> In addition I don't think Iterator should be handled like it is.  
> Getting the length of an iterator will use it up so that it can't  
> be used again.

yes, that's true, but how else to deal with iterators they pass in,  
for example?

> Some rethinking of how iterators are dealt with is needed. Until  
> then it would be good practice to never pass an iterator in as a ST  
> attribute.

That is very true.  They break the rules...they have side effects.

Ter

From parrt at cs.usfca.edu  Sat Jan 27 15:37:48 2007
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sat, 27 Jan 2007 15:37:48 -0800
Subject: [stringtemplate-interest] handling of arrays
In-Reply-To: <PMEOJKDLMMHOHNEAMPBGCEIKCAAA.jjsnyders@rcn.com>
References: <PMEOJKDLMMHOHNEAMPBGCEIKCAAA.jjsnyders@rcn.com>
Message-ID: <EA5C2B5D-1323-40F5-A65E-35CF13A22B33@cs.usfca.edu>


On Jan 16, 2007, at 9:40 PM, John Snyders wrote:

> I noticed in ASTExpr.java the method convertArrayToList.

it is.  just done to make things consistent...else have to check for  
arrays everyone.  gross, eh?

> It seems to me that this is wasteful. I have not looked at it too  
> deep but why not handle arrays like other collections and wrap them  
> in an ArrayIterator inside convertAnythingIteratableToIterator.

Interesting...ArrayIterator, eh?  Does Sun have a standard one?  I  
don't see it.  Do you mean I should create one real quick?

Ter


From parrt at cs.usfca.edu  Sat Jan 27 15:38:45 2007
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sat, 27 Jan 2007 15:38:45 -0800
Subject: [stringtemplate-interest] Porting StringTemplate
In-Reply-To: <20070108172523.41902.qmail@web52506.mail.yahoo.com>
References: <20070108172523.41902.qmail@web52506.mail.yahoo.com>
Message-ID: <F7B7DAFA-D0DC-4424-B748-5F7C13E27659@cs.usfca.edu>

This would be very involved and a huge project.  ANTLR doesn't  
generate ActionScript so you'd need to parse everything by hand.

Ter
On Jan 8, 2007, at 9:25 AM, Michael Ramirez wrote:

> How difficult is it to port StringTemplate to another language  
> (Actionscript 3 )?
>
> __________________________________________________
> Do You Yahoo!?
> Tired of spam?  Yahoo! Mail has the best spam protection around
> http://mail.yahoo.com
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org:8080/mailman/listinfo/stringtemplate-interest


From shane at digitalsanctum.com  Sat Jan 27 16:04:54 2007
From: shane at digitalsanctum.com (Shane Witbeck)
Date: Sat, 27 Jan 2007 19:04:54 -0500
Subject: [stringtemplate-interest] Porting StringTemplate
In-Reply-To: <F7B7DAFA-D0DC-4424-B748-5F7C13E27659@cs.usfca.edu>
References: <20070108172523.41902.qmail@web52506.mail.yahoo.com>
	<F7B7DAFA-D0DC-4424-B748-5F7C13E27659@cs.usfca.edu>
Message-ID: <153af7a10701271604k71cc0443v3a697ba54670909c@mail.gmail.com>

It seems like porting to ECMAScript would be better strategically
since ActionScript is an extension of it and the amount of work out
there being done in JavaScript (AJAX, etc.).

Shane

On 1/27/07, Terence Parr <parrt at cs.usfca.edu> wrote:
> This would be very involved and a huge project.  ANTLR doesn't
> generate ActionScript so you'd need to parse everything by hand.
>
> Ter
> On Jan 8, 2007, at 9:25 AM, Michael Ramirez wrote:
>
> > How difficult is it to port StringTemplate to another language
> > (Actionscript 3 )?
> >
> > __________________________________________________
> > Do You Yahoo!?
> > Tired of spam?  Yahoo! Mail has the best spam protection around
> > http://mail.yahoo.com
> > _______________________________________________
> > stringtemplate-interest mailing list
> > stringtemplate-interest at antlr.org
> > http://www.antlr.org:8080/mailman/listinfo/stringtemplate-interest
>
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org:8080/mailman/listinfo/stringtemplate-interest
>

From jjsnyders at rcn.com  Sun Jan 28 18:44:26 2007
From: jjsnyders at rcn.com (John Snyders)
Date: Sun, 28 Jan 2007 21:44:26 -0500
Subject: [stringtemplate-interest] handling of arrays
In-Reply-To: <EA5C2B5D-1323-40F5-A65E-35CF13A22B33@cs.usfca.edu>
Message-ID: <PMEOJKDLMMHOHNEAMPBGGEJMCAAA.jjsnyders@rcn.com>

> -----Original Message-----
> From: stringtemplate-interest-bounces at antlr.org
> [mailto:stringtemplate-interest-bounces at antlr.org]On Behalf Of Terence
> Parr
> Sent: Saturday, January 27, 2007 6:38 PM
> To: StringTemplate
> Subject: Re: [stringtemplate-interest] handling of arrays
>
> On Jan 16, 2007, at 9:40 PM, John Snyders wrote:
>
> > I noticed in ASTExpr.java the method convertArrayToList.
>
> it is.  just done to make things consistent...else have to check for
> arrays everyone.  gross, eh?
>
> > It seems to me that this is wasteful. I have not looked at it too
> > deep but why not handle arrays like other collections and wrap them
> > in an ArrayIterator inside convertAnythingIteratableToIterator.
>
> Interesting...ArrayIterator, eh?  Does Sun have a standard one?  I
> don't see it.  Do you mean I should create one real quick?

There isn't one in the Java SDK (as far as I know) but jakarta commons has
one
http://jakarta.apache.org/commons/collections/api-release/org/apache/commons
/collections/iterators/ArrayIterator.html

ST probably shouldn't rely on this so you can create your own. It is
straight forward.
I created one before I found the one in commons collections. I can give it
to you if you like
(assuming I can find it). But again I didn't think this through fully.

>
> Ter
>
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org:8080/mailman/listinfo/stringtemplate-interest

From o.flege at market-maker.de  Mon Jan 29 01:25:24 2007
From: o.flege at market-maker.de (Oliver Flege)
Date: Mon, 29 Jan 2007 10:25:24 +0100
Subject: [stringtemplate-interest] inconsistency with length function
In-Reply-To: <E8C9B11E-4DD2-48DF-8ED3-5383ED181E3C@cs.usfca.edu>
References: <PMEOJKDLMMHOHNEAMPBGMEIKCAAA.jjsnyders@rcn.com>
	<E8C9B11E-4DD2-48DF-8ED3-5383ED181E3C@cs.usfca.edu>
Message-ID: <45BDBD84.4040707@market-maker.de>

Hi,

Terence Parr wrote:
>> I think that the length method in ASTExpr.java should be changed as  
>> follows:
>> From:
>>
>> } else if (attribute instanceof List) {
>>   i = ((List)attribute).size();
>> }
>> To:
>>
>> } else if (attribute instanceof Collection) {
>>   i = ((List)attribute).size();
>> }
> 
> Howdy!  OK, yep, good fix.

even better would be

} else if (attribute instanceof Collection) {
  i = ((Collection)attribute).size();
}

:)

Cheers,

 Oliver


From harry.karadimas at hmn.aphp.fr  Tue Jan 30 09:13:16 2007
From: harry.karadimas at hmn.aphp.fr (Harry Karadimas)
Date: Tue, 30 Jan 2007 18:13:16 +0100
Subject: [stringtemplate-interest] handling of arrays (John Snyders)
In-Reply-To: <mailman.5.1170100802.25866.stringtemplate-interest@antlr.org>
References: <mailman.5.1170100802.25866.stringtemplate-interest@antlr.org>
Message-ID: <45BF7CAC.4010904@hmn.aphp.fr>

Hi, I don't know if that relates to the previous post, but java *does* 
have something
to encapsulate an array into a list, and that is the "asList" method of 
the java.util.Arrays
class.

Object[] myArray = ...
List myList = Arrays.asList(myArray);

                                                       Harry Karadimas
/______________________________________________________________________
Dr Harry Karadimas  Medecin Ingenieur resp. Recherche et Developpement
Departement d'Information Hospitalier
CHU Henri Mondor 51, av. du Mal de Lattre de Tassigny   94010  CRETEIL
tel : (00 33 1) 49 81 21 79                fax : (00 33 1) 49 81 27 08
secr.: (00 33 1) 49 81 23 82 m.el.:harry.karadimas at hmn.ap-hop-paris.fr
/



stringtemplate-interest-request at antlr.org a ?crit :
> Send stringtemplate-interest mailing list submissions to
> 	stringtemplate-interest at antlr.org
>
> To subscribe or unsubscribe via the World Wide Web, visit
> 	http://www.antlr.org:8080/mailman/listinfo/stringtemplate-interest
> or, via email, send a message with subject or body 'help' to
> 	stringtemplate-interest-request at antlr.org
>
> You can reach the person managing the list at
> 	stringtemplate-interest-owner at antlr.org
>
> When replying, please edit your Subject line so it is more specific
> than "Re: Contents of stringtemplate-interest digest..."
>
>
> Today's Topics:
>
>    1. Re: handling of arrays (John Snyders)
>    2. Re: inconsistency with length function (Oliver Flege)
>
>
> ----------------------------------------------------------------------
>
> Message: 1
> Date: Sun, 28 Jan 2007 21:44:26 -0500
> From: "John Snyders" <jjsnyders at rcn.com>
> Subject: Re: [stringtemplate-interest] handling of arrays
> To: "Terence Parr" <parrt at cs.usfca.edu>,	"StringTemplate"
> 	<stringtemplate-interest at antlr.org>
> Message-ID: <PMEOJKDLMMHOHNEAMPBGGEJMCAAA.jjsnyders at rcn.com>
> Content-Type: text/plain;	charset="US-ASCII"
>
>   
>> -----Original Message-----
>> From: stringtemplate-interest-bounces at antlr.org
>> [mailto:stringtemplate-interest-bounces at antlr.org]On Behalf Of Terence
>> Parr
>> Sent: Saturday, January 27, 2007 6:38 PM
>> To: StringTemplate
>> Subject: Re: [stringtemplate-interest] handling of arrays
>>
>> On Jan 16, 2007, at 9:40 PM, John Snyders wrote:
>>
>>     
>>> I noticed in ASTExpr.java the method convertArrayToList.
>>>       
>> it is.  just done to make things consistent...else have to check for
>> arrays everyone.  gross, eh?
>>
>>     
>>> It seems to me that this is wasteful. I have not looked at it too
>>> deep but why not handle arrays like other collections and wrap them
>>> in an ArrayIterator inside convertAnythingIteratableToIterator.
>>>       
>> Interesting...ArrayIterator, eh?  Does Sun have a standard one?  I
>> don't see it.  Do you mean I should create one real quick?
>>     
>
> There isn't one in the Java SDK (as far as I know) but jakarta commons has
> one
> http://jakarta.apache.org/commons/collections/api-release/org/apache/commons
> /collections/iterators/ArrayIterator.html
>
> ST probably shouldn't rely on this so you can create your own. It is
> straight forward.
> I created one before I found the one in commons collections. I can give it
> to you if you like
> (assuming I can find it). But again I didn't think this through fully.
>
>   
>> Ter
>>
>> _______________________________________________
>> stringtemplate-interest mailing list
>> stringtemplate-interest at antlr.org
>> http://www.antlr.org:8080/mailman/listinfo/stringtemplate-interest
>>     
>
>
> ------------------------------
>
> Message: 2
> Date: Mon, 29 Jan 2007 10:25:24 +0100
> From: Oliver Flege <o.flege at market-maker.de>
> Subject: Re: [stringtemplate-interest] inconsistency with length
> 	function
> To: StringTemplate <stringtemplate-interest at antlr.org>
> Message-ID: <45BDBD84.4040707 at market-maker.de>
> Content-Type: text/plain; charset=ISO-8859-1
>
> Hi,
>
> Terence Parr wrote:
>   
>>> I think that the length method in ASTExpr.java should be changed as  
>>> follows:
>>> From:
>>>
>>> } else if (attribute instanceof List) {
>>>   i = ((List)attribute).size();
>>> }
>>> To:
>>>
>>> } else if (attribute instanceof Collection) {
>>>   i = ((List)attribute).size();
>>> }
>>>       
>> Howdy!  OK, yep, good fix.
>>     
>
> even better would be
>
> } else if (attribute instanceof Collection) {
>   i = ((Collection)attribute).size();
> }
>
> :)
>
> Cheers,
>
>  Oliver
>
>
>
> ------------------------------
>
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org:8080/mailman/listinfo/stringtemplate-interest
>
>
> End of stringtemplate-interest Digest, Vol 22, Issue 14
> *******************************************************
>
>
>   

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org:8080/pipermail/stringtemplate-interest/attachments/20070130/a22ba43e/attachment.html 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: harry.karadimas.vcf
Type: text/x-vcard
Size: 407 bytes
Desc: not available
Url : http://www.antlr.org:8080/pipermail/stringtemplate-interest/attachments/20070130/a22ba43e/attachment.vcf 

From parrt at cs.usfca.edu  Tue Jan 30 10:09:12 2007
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue, 30 Jan 2007 10:09:12 -0800
Subject: [stringtemplate-interest] handling of arrays (John Snyders)
In-Reply-To: <45BF7CAC.4010904@hmn.aphp.fr>
References: <mailman.5.1170100802.25866.stringtemplate-interest@antlr.org>
	<45BF7CAC.4010904@hmn.aphp.fr>
Message-ID: <56A01D51-33D8-4A87-BE03-38CAC31F3C22@cs.usfca.edu>

Awesome!  Heh, it's exactly what we want I think.

Wait, class cast issue:

	public static Object convertArrayToList(Object value) {
		if ( value==null ) {
			return null;
		}
		if ( value.getClass().isArray() ) {
			return Arrays.asList((Object[])value);  // CAST ISSUE!
		}
		return value;
	}

won't work as value is not Object[] most of the time...but how do you  
get it to compile w/o the cast?

Ter

On Jan 30, 2007, at 9:13 AM, Harry Karadimas wrote:

> Hi, I don't know if that relates to the previous post, but java  
> *does* have something
> to encapsulate an array into a list, and that is the "asList"  
> method of the java.util.Arrays
> class.
>
> Object[] myArray = ...
> List myList = Arrays.asList(myArray);
>
> Harry Karadimas  
> ______________________________________________________________________ 
>  Dr Harry Karadimas Medecin Ingenieur resp. Recherche et  
> Developpement Departement d'Information Hospitalier CHU Henri  
> Mondor 51, av. du Mal de Lattre de Tassigny 94010 CRETEIL tel : (00  
> 33 1) 49 81 21 79 fax : (00 33 1) 49 81 27 08 secr.: (00 33 1) 49  
> 81 23 82 m.el.:harry.karadimas at hmn.ap-hop-paris.fr
>
>
> stringtemplate-interest-request at antlr.org a ?crit :
>> Send stringtemplate-interest mailing list submissions to  
>> stringtemplate-interest at antlr.org To subscribe or unsubscribe via  
>> the World Wide Web, visit http://www.antlr.org:8080/mailman/ 
>> listinfo/stringtemplate-interest or, via email, send a message  
>> with subject or body 'help' to stringtemplate-interest- 
>> request at antlr.org You can reach the person managing the list at  
>> stringtemplate-interest-owner at antlr.org When replying, please edit  
>> your Subject line so it is more specific than "Re: Contents of  
>> stringtemplate-interest digest..." Today's Topics: 1. Re: handling  
>> of arrays (John Snyders) 2. Re: inconsistency with length function  
>> (Oliver Flege)  
>> --------------------------------------------------------------------- 
>> - Message: 1 Date: Sun, 28 Jan 2007 21:44:26 -0500 From: "John  
>> Snyders" <jjsnyders at rcn.com> Subject: Re: [stringtemplate- 
>> interest] handling of arrays To: "Terence Parr"  
>> <parrt at cs.usfca.edu>,	"StringTemplate" <stringtemplate- 
>> interest at antlr.org> Message-ID:  
>> <PMEOJKDLMMHOHNEAMPBGGEJMCAAA.jjsnyders at rcn.com> Content-Type:  
>> text/plain;	charset="US-ASCII"
>>> -----Original Message----- From: stringtemplate-interest- 
>>> bounces at antlr.org [mailto:stringtemplate-interest- 
>>> bounces at antlr.org]On Behalf Of Terence Parr Sent: Saturday,  
>>> January 27, 2007 6:38 PM To: StringTemplate Subject: Re:  
>>> [stringtemplate-interest] handling of arrays On Jan 16, 2007, at  
>>> 9:40 PM, John Snyders wrote:
>>>> I noticed in ASTExpr.java the method convertArrayToList.
>>> it is. just done to make things consistent...else have to check  
>>> for arrays everyone. gross, eh?
>>>> It seems to me that this is wasteful. I have not looked at it  
>>>> too deep but why not handle arrays like other collections and  
>>>> wrap them in an ArrayIterator inside  
>>>> convertAnythingIteratableToIterator.
>>> Interesting...ArrayIterator, eh? Does Sun have a standard one? I  
>>> don't see it. Do you mean I should create one real quick?
>> There isn't one in the Java SDK (as far as I know) but jakarta  
>> commons has one http://jakarta.apache.org/commons/collections/api- 
>> release/org/apache/commons /collections/iterators/ 
>> ArrayIterator.html ST probably shouldn't rely on this so you can  
>> create your own. It is straight forward. I created one before I  
>> found the one in commons collections. I can give it to you if you  
>> like (assuming I can find it). But again I didn't think this  
>> through fully.
>>> Ter _______________________________________________  
>>> stringtemplate-interest mailing list stringtemplate- 
>>> interest at antlr.org http://www.antlr.org:8080/mailman/listinfo/ 
>>> stringtemplate-interest
>> ------------------------------ Message: 2 Date: Mon, 29 Jan 2007  
>> 10:25:24 +0100 From: Oliver Flege <o.flege at market-maker.de>  
>> Subject: Re: [stringtemplate-interest] inconsistency with length  
>> function To: StringTemplate <stringtemplate-interest at antlr.org>  
>> Message-ID: <45BDBD84.4040707 at market-maker.de> Content-Type: text/ 
>> plain; charset=ISO-8859-1 Hi, Terence Parr wrote:
>>>> I think that the length method in ASTExpr.java should be changed  
>>>> as follows: From: } else if (attribute instanceof List) { i =  
>>>> ((List)attribute).size(); } To: } else if (attribute instanceof  
>>>> Collection) { i = ((List)attribute).size(); }
>>> Howdy! OK, yep, good fix.
>> even better would be } else if (attribute instanceof Collection)  
>> { i = ((Collection)attribute).size(); } :) Cheers, Oliver  
>> ------------------------------  
>> _______________________________________________ stringtemplate- 
>> interest mailing list stringtemplate-interest at antlr.org http:// 
>> www.antlr.org:8080/mailman/listinfo/stringtemplate-interest End of  
>> stringtemplate-interest Digest, Vol 22, Issue 14  
>> *******************************************************
> <harry.karadimas.vcf>
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org:8080/mailman/listinfo/stringtemplate-interest


From misc at n4te.com  Tue Jan 30 11:54:50 2007
From: misc at n4te.com (Nate)
Date: Tue, 30 Jan 2007 11:54:50 -0800
Subject: [stringtemplate-interest] handling of arrays (John Snyders)
In-Reply-To: <56A01D51-33D8-4A87-BE03-38CAC31F3C22@cs.usfca.edu>
References: <mailman.5.1170100802.25866.stringtemplate-interest@antlr.org>	<45BF7CAC.4010904@hmn.aphp.fr>
	<56A01D51-33D8-4A87-BE03-38CAC31F3C22@cs.usfca.edu>
Message-ID: <45BFA28A.4060100@n4te.com>

Unless you are using Java 5+, you'd have to use System.arrayCopy to copy 
the array to an Object array.

-Nate


Terence Parr wrote:
> Awesome!  Heh, it's exactly what we want I think.
>
> Wait, class cast issue:
>
> 	public static Object convertArrayToList(Object value) {
> 		if ( value==null ) {
> 			return null;
> 		}
> 		if ( value.getClass().isArray() ) {
> 			return Arrays.asList((Object[])value);  // CAST ISSUE!
> 		}
> 		return value;
> 	}
>
> won't work as value is not Object[] most of the time...but how do you  
> get it to compile w/o the cast?
>
> Ter
>
> On Jan 30, 2007, at 9:13 AM, Harry Karadimas wrote:
>
>   
>> Hi, I don't know if that relates to the previous post, but java  
>> *does* have something
>> to encapsulate an array into a list, and that is the "asList"  
>> method of the java.util.Arrays
>> class.
>>
>> Object[] myArray = ...
>> List myList = Arrays.asList(myArray);
>>
>> Harry Karadimas  
>> ______________________________________________________________________ 
>>  Dr Harry Karadimas Medecin Ingenieur resp. Recherche et  
>> Developpement Departement d'Information Hospitalier CHU Henri  
>> Mondor 51, av. du Mal de Lattre de Tassigny 94010 CRETEIL tel : (00  
>> 33 1) 49 81 21 79 fax : (00 33 1) 49 81 27 08 secr.: (00 33 1) 49  
>> 81 23 82 m.el.:harry.karadimas at hmn.ap-hop-paris.fr
>>
>>
>> stringtemplate-interest-request at antlr.org a ?crit :
>>     
>>> Send stringtemplate-interest mailing list submissions to  
>>> stringtemplate-interest at antlr.org To subscribe or unsubscribe via  
>>> the World Wide Web, visit http://www.antlr.org:8080/mailman/ 
>>> listinfo/stringtemplate-interest or, via email, send a message  
>>> with subject or body 'help' to stringtemplate-interest- 
>>> request at antlr.org You can reach the person managing the list at  
>>> stringtemplate-interest-owner at antlr.org When replying, please edit  
>>> your Subject line so it is more specific than "Re: Contents of  
>>> stringtemplate-interest digest..." Today's Topics: 1. Re: handling  
>>> of arrays (John Snyders) 2. Re: inconsistency with length function  
>>> (Oliver Flege)  
>>> --------------------------------------------------------------------- 
>>> - Message: 1 Date: Sun, 28 Jan 2007 21:44:26 -0500 From: "John  
>>> Snyders" <jjsnyders at rcn.com> Subject: Re: [stringtemplate- 
>>> interest] handling of arrays To: "Terence Parr"  
>>> <parrt at cs.usfca.edu>,	"StringTemplate" <stringtemplate- 
>>> interest at antlr.org> Message-ID:  
>>> <PMEOJKDLMMHOHNEAMPBGGEJMCAAA.jjsnyders at rcn.com> Content-Type:  
>>> text/plain;	charset="US-ASCII"
>>>       
>>>> -----Original Message----- From: stringtemplate-interest- 
>>>> bounces at antlr.org [mailto:stringtemplate-interest- 
>>>> bounces at antlr.org]On Behalf Of Terence Parr Sent: Saturday,  
>>>> January 27, 2007 6:38 PM To: StringTemplate Subject: Re:  
>>>> [stringtemplate-interest] handling of arrays On Jan 16, 2007, at  
>>>> 9:40 PM, John Snyders wrote:
>>>>         
>>>>> I noticed in ASTExpr.java the method convertArrayToList.
>>>>>           
>>>> it is. just done to make things consistent...else have to check  
>>>> for arrays everyone. gross, eh?
>>>>         
>>>>> It seems to me that this is wasteful. I have not looked at it  
>>>>> too deep but why not handle arrays like other collections and  
>>>>> wrap them in an ArrayIterator inside  
>>>>> convertAnythingIteratableToIterator.
>>>>>           
>>>> Interesting...ArrayIterator, eh? Does Sun have a standard one? I  
>>>> don't see it. Do you mean I should create one real quick?
>>>>         
>>> There isn't one in the Java SDK (as far as I know) but jakarta  
>>> commons has one http://jakarta.apache.org/commons/collections/api- 
>>> release/org/apache/commons /collections/iterators/ 
>>> ArrayIterator.html ST probably shouldn't rely on this so you can  
>>> create your own. It is straight forward. I created one before I  
>>> found the one in commons collections. I can give it to you if you  
>>> like (assuming I can find it). But again I didn't think this  
>>> through fully.
>>>       
>>>> Ter _______________________________________________  
>>>> stringtemplate-interest mailing list stringtemplate- 
>>>> interest at antlr.org http://www.antlr.org:8080/mailman/listinfo/ 
>>>> stringtemplate-interest
>>>>         
>>> ------------------------------ Message: 2 Date: Mon, 29 Jan 2007  
>>> 10:25:24 +0100 From: Oliver Flege <o.flege at market-maker.de>  
>>> Subject: Re: [stringtemplate-interest] inconsistency with length  
>>> function To: StringTemplate <stringtemplate-interest at antlr.org>  
>>> Message-ID: <45BDBD84.4040707 at market-maker.de> Content-Type: text/ 
>>> plain; charset=ISO-8859-1 Hi, Terence Parr wrote:
>>>       
>>>>> I think that the length method in ASTExpr.java should be changed  
>>>>> as follows: From: } else if (attribute instanceof List) { i =  
>>>>> ((List)attribute).size(); } To: } else if (attribute instanceof  
>>>>> Collection) { i = ((List)attribute).size(); }
>>>>>           
>>>> Howdy! OK, yep, good fix.
>>>>         
>>> even better would be } else if (attribute instanceof Collection)  
>>> { i = ((Collection)attribute).size(); } :) Cheers, Oliver  
>>> ------------------------------  
>>> _______________________________________________ stringtemplate- 
>>> interest mailing list stringtemplate-interest at antlr.org http:// 
>>> www.antlr.org:8080/mailman/listinfo/stringtemplate-interest End of  
>>> stringtemplate-interest Digest, Vol 22, Issue 14  
>>> *******************************************************
>>>       
>> <harry.karadimas.vcf>
>> _______________________________________________
>> stringtemplate-interest mailing list
>> stringtemplate-interest at antlr.org
>> http://www.antlr.org:8080/mailman/listinfo/stringtemplate-interest
>>     
>
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org:8080/mailman/listinfo/stringtemplate-interest
>   


From parrt at cs.usfca.edu  Tue Jan 30 12:14:43 2007
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue, 30 Jan 2007 12:14:43 -0800
Subject: [stringtemplate-interest] handling of arrays (John Snyders)
In-Reply-To: <45BFA28A.4060100@n4te.com>
References: <mailman.5.1170100802.25866.stringtemplate-interest@antlr.org>	<45BF7CAC.4010904@hmn.aphp.fr>
	<56A01D51-33D8-4A87-BE03-38CAC31F3C22@cs.usfca.edu>
	<45BFA28A.4060100@n4te.com>
Message-ID: <E02F2DC0-7AE7-4B2B-A69A-49E19AD2CCE8@cs.usfca.edu>

crap.  Ok, back to arrayiterator then.
Ter
On Jan 30, 2007, at 11:54 AM, Nate wrote:

> Unless you are using Java 5+, you'd have to use System.arrayCopy to  
> copy the array to an Object array.
>
> -Nate
>
>
> Terence Parr wrote:
>> Awesome!  Heh, it's exactly what we want I think.
>>
>> Wait, class cast issue:
>>
>> 	public static Object convertArrayToList(Object value) {
>> 		if ( value==null ) {
>> 			return null;
>> 		}
>> 		if ( value.getClass().isArray() ) {
>> 			return Arrays.asList((Object[])value);  // CAST ISSUE!
>> 		}
>> 		return value;
>> 	}
>>
>> won't work as value is not Object[] most of the time...but how do  
>> you  get it to compile w/o the cast?
>>
>> Ter
>>
>> On Jan 30, 2007, at 9:13 AM, Harry Karadimas wrote:
>>
>>
>>> Hi, I don't know if that relates to the previous post, but java   
>>> *does* have something
>>> to encapsulate an array into a list, and that is the "asList"   
>>> method of the java.util.Arrays
>>> class.
>>>
>>> Object[] myArray = ...
>>> List myList = Arrays.asList(myArray);
>>>
>>> Harry Karadimas   
>>> ____________________________________________________________________ 
>>> __  Dr Harry Karadimas Medecin Ingenieur resp. Recherche et   
>>> Developpement Departement d'Information Hospitalier CHU Henri   
>>> Mondor 51, av. du Mal de Lattre de Tassigny 94010 CRETEIL tel :  
>>> (00  33 1) 49 81 21 79 fax : (00 33 1) 49 81 27 08 secr.: (00 33  
>>> 1) 49  81 23 82 m.el.:harry.karadimas at hmn.ap-hop-paris.fr
>>>
>>>
>>> stringtemplate-interest-request at antlr.org a ?crit :
>>>
>>>> Send stringtemplate-interest mailing list submissions to   
>>>> stringtemplate-interest at antlr.org To subscribe or unsubscribe  
>>>> via  the World Wide Web, visit http://www.antlr.org:8080/ 
>>>> mailman/ listinfo/stringtemplate-interest or, via email, send a  
>>>> message  with subject or body 'help' to stringtemplate-interest-  
>>>> request at antlr.org You can reach the person managing the list at   
>>>> stringtemplate-interest-owner at antlr.org When replying, please  
>>>> edit  your Subject line so it is more specific than "Re:  
>>>> Contents of  stringtemplate-interest digest..." Today's Topics:  
>>>> 1. Re: handling  of arrays (John Snyders) 2. Re: inconsistency  
>>>> with length function  (Oliver Flege)   
>>>> ------------------------------------------------------------------- 
>>>> -- - Message: 1 Date: Sun, 28 Jan 2007 21:44:26 -0500 From:  
>>>> "John  Snyders" <jjsnyders at rcn.com> Subject: Re:  
>>>> [stringtemplate- interest] handling of arrays To: "Terence  
>>>> Parr"  <parrt at cs.usfca.edu>,	"StringTemplate" <stringtemplate-  
>>>> interest at antlr.org> Message-ID:   
>>>> <PMEOJKDLMMHOHNEAMPBGGEJMCAAA.jjsnyders at rcn.com> Content-Type:   
>>>> text/plain;	charset="US-ASCII"
>>>>
>>>>> -----Original Message----- From: stringtemplate-interest-  
>>>>> bounces at antlr.org [mailto:stringtemplate-interest-  
>>>>> bounces at antlr.org]On Behalf Of Terence Parr Sent: Saturday,   
>>>>> January 27, 2007 6:38 PM To: StringTemplate Subject: Re:   
>>>>> [stringtemplate-interest] handling of arrays On Jan 16, 2007,  
>>>>> at  9:40 PM, John Snyders wrote:
>>>>>
>>>>>> I noticed in ASTExpr.java the method convertArrayToList.
>>>>>>
>>>>> it is. just done to make things consistent...else have to  
>>>>> check  for arrays everyone. gross, eh?
>>>>>
>>>>>> It seems to me that this is wasteful. I have not looked at it   
>>>>>> too deep but why not handle arrays like other collections and   
>>>>>> wrap them in an ArrayIterator inside   
>>>>>> convertAnythingIteratableToIterator.
>>>>>>
>>>>> Interesting...ArrayIterator, eh? Does Sun have a standard one?  
>>>>> I  don't see it. Do you mean I should create one real quick?
>>>>>
>>>> There isn't one in the Java SDK (as far as I know) but jakarta   
>>>> commons has one http://jakarta.apache.org/commons/collections/ 
>>>> api- release/org/apache/commons /collections/iterators/  
>>>> ArrayIterator.html ST probably shouldn't rely on this so you  
>>>> can  create your own. It is straight forward. I created one  
>>>> before I  found the one in commons collections. I can give it to  
>>>> you if you  like (assuming I can find it). But again I didn't  
>>>> think this  through fully.
>>>>
>>>>> Ter _______________________________________________   
>>>>> stringtemplate-interest mailing list stringtemplate-  
>>>>> interest at antlr.org http://www.antlr.org:8080/mailman/listinfo/  
>>>>> stringtemplate-interest
>>>>>
>>>> ------------------------------ Message: 2 Date: Mon, 29 Jan  
>>>> 2007  10:25:24 +0100 From: Oliver Flege <o.flege at market- 
>>>> maker.de>  Subject: Re: [stringtemplate-interest] inconsistency  
>>>> with length  function To: StringTemplate <stringtemplate- 
>>>> interest at antlr.org>  Message-ID: <45BDBD84.4040707 at market- 
>>>> maker.de> Content-Type: text/ plain; charset=ISO-8859-1 Hi,  
>>>> Terence Parr wrote:
>>>>
>>>>>> I think that the length method in ASTExpr.java should be  
>>>>>> changed  as follows: From: } else if (attribute instanceof  
>>>>>> List) { i =  ((List)attribute).size(); } To: } else if  
>>>>>> (attribute instanceof  Collection) { i = ((List)attribute).size 
>>>>>> (); }
>>>>>>
>>>>> Howdy! OK, yep, good fix.
>>>>>
>>>> even better would be } else if (attribute instanceof  
>>>> Collection)  { i = ((Collection)attribute).size(); } :) Cheers,  
>>>> Oliver  ------------------------------   
>>>> _______________________________________________ stringtemplate-  
>>>> interest mailing list stringtemplate-interest at antlr.org http://  
>>>> www.antlr.org:8080/mailman/listinfo/stringtemplate-interest End  
>>>> of  stringtemplate-interest Digest, Vol 22, Issue 14   
>>>> *******************************************************
>>>>
>>> <harry.karadimas.vcf>
>>> _______________________________________________
>>> stringtemplate-interest mailing list
>>> stringtemplate-interest at antlr.org
>>> http://www.antlr.org:8080/mailman/listinfo/stringtemplate-interest
>>>
>>
>> _______________________________________________
>> stringtemplate-interest mailing list
>> stringtemplate-interest at antlr.org
>> http://www.antlr.org:8080/mailman/listinfo/stringtemplate-interest
>>
>


From parrt at cs.usfca.edu  Tue Jan 30 13:13:24 2007
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue, 30 Jan 2007 13:13:24 -0800
Subject: [stringtemplate-interest] handling of arrays (John Snyders)
In-Reply-To: <45BF7CAC.4010904@hmn.aphp.fr>
References: <mailman.5.1170100802.25866.stringtemplate-interest@antlr.org>
	<45BF7CAC.4010904@hmn.aphp.fr>
Message-ID: <5DE29967-5C4B-4700-8D51-EDB9CF147D51@cs.usfca.edu>

Ok, i made an array wrapper and iterator.  had to do both so a list  
is not purely an iterator, which has sideeffects.

	/** Do a standard conversion of array attributes to a List.  Wrap the
	 *  array instead of copying like old version.  Make an
	 *  ArrayWrappedInList that knows to create an ArrayIterator.
	 */
	public static Object convertArrayToList(Object value) {
		if ( value==null ) {
			return null;
		}
		if ( value.getClass().isArray() ) {
			return new ArrayWrappedInList(value);
		}
		return value;
	}

ArrayWrappedInList creates ArrayIterator.  These are two new classes.

Pushed to depot.

Ter

On Jan 30, 2007, at 9:13 AM, Harry Karadimas wrote:

> Hi, I don't know if that relates to the previous post, but java  
> *does* have something
> to encapsulate an array into a list, and that is the "asList"  
> method of the java.util.Arrays
> class.
>
> Object[] myArray = ...
> List myList = Arrays.asList(myArray);
>
> Harry Karadimas ____

From kroepke at classdump.org  Tue Jan 30 17:21:11 2007
From: kroepke at classdump.org (Kay Roepke)
Date: Wed, 31 Jan 2007 02:21:11 +0100
Subject: [stringtemplate-interest] Porting StringTemplate
In-Reply-To: <153af7a10701271604k71cc0443v3a697ba54670909c@mail.gmail.com>
References: <20070108172523.41902.qmail@web52506.mail.yahoo.com>
	<F7B7DAFA-D0DC-4424-B748-5F7C13E27659@cs.usfca.edu>
	<153af7a10701271604k71cc0443v3a697ba54670909c@mail.gmail.com>
Message-ID: <6789A417-4627-450E-A443-BF753E93862F@classdump.org>


On Jan 28, 2007, at 1:04 AM, Shane Witbeck wrote:

> It seems like porting to ECMAScript would be better strategically
> since ActionScript is an extension of it and the amount of work out
> there being done in JavaScript (AJAX, etc.).
>
> Shane
>
> On 1/27/07, Terence Parr <parrt at cs.usfca.edu> wrote:
>> This would be very involved and a huge project.  ANTLR doesn't
>> generate ActionScript so you'd need to parse everything by hand.
>>

Porting StringTemplate isn't exactly easy, esp. since it uses ANTLR  
v2. My attempts
to do an Obj-C port haven't been exactly successful, mainly because  
ANTLR v3 threw
up parsing ST :(

I don't think that parsing ST by hand is a viable option, since it is  
a bit involved
at times. I certainly wouldn't attempt it unless I was desperate...
In the long run, though, v3 should be able to handle ST easily and  
that would make
it a lot easier (even if you'd need to write a new v3 target).

As to the ECMAScript target, I'm not sure whether the current engines  
are really fit to
do recursive descent parsing in. All the engines I have seen have  
some real issues in
regard to memory, ie. tend to be slow molasses (but I admit it would  
a cool thing to have
now and then).

my 0.02?,

-k

-- 
Kay R?pke
http://classdump.org/





