From edward.coffey at gmail.com  Sun Jul  1 04:34:27 2012
From: edward.coffey at gmail.com (Edward Coffey)
Date: Sun, 1 Jul 2012 21:34:27 +1000
Subject: [stringtemplate-interest] Web template caching
In-Reply-To: <2F55860E-E1C2-486B-A126-15556A10AE2A@cs.usfca.edu>
References: <CALTvmmL_TDaOapFR3=jcEbOoSEL7K2O6yeDrBy6J3FM5LVVAHw@mail.gmail.com>
	<2F55860E-E1C2-486B-A126-15556A10AE2A@cs.usfca.edu>
Message-ID: <CALTvmmKFELPOJaNXjubdNyRU8U7kzB=LXtqtOzGhBhU=ZgD+gg@mail.gmail.com>

Hi Ter,

No problem, two jobs sounds like more than enough work - my current
solution is holding up well enough for the time being.

Regards,
Ed.

On 1 July 2012 05:16, Terence Parr <parrt at cs.usfca.edu> wrote:

> Hi Ed,Sorry for the delay?I'm completely overwhelms doing 2 jobs and work
> until probably September or October. ugh!
>
> yeah, I can't remember what my philosophy was a few years ago concerning
> caching but I likely decided that it was an easy fix for someone to create
> a subclass of STGroup to handle.
>
>  Unfortunately, I don't have time at the moment to go dig into the
> software to try to remember what I intended? as anybody else tried to do
> some caching?
> Ter
> On Jun 17, 2012, at 5:00 PM, Edward Coffey wrote:
>
> > Hi,
> >
> > I'm attempting to use ST4 to do fairly simple web templating using raw
> templates. STRawGroupDir and the getInstanceOf method seems to be the
> recommended approach according to the documentation I've read. This method
> checks STGroup's templates map to see if there's already a CompiledST
> instance there, never stores anything in the map, so every request attempts
> to load the template as a .stg file, fails, then actually loads the correct
> .st file. Even without the first attempted load, opening a file for every
> hit on the web server is far too many opens.
> >
> > In a sleep-deprived state last night I reimplemented STRawGroupDir's
> load method, having it store any CompiledST it produces in a cache (not
> STGroup's templates map, but an independent EHCache instance). It works,
> increases performance, and gets rid of the occasional "too many open files"
> error I was getting under high load.
> >
> > In the cold light of day, that seems like a brave (foolish) approach,
> given how little I know of the internals of ST4 (in general, and
> specifically in regard to the thread safety of CompiledST instances). It
> seems like I'm probably missing something pretty fundamental here - like
> "is getInstanceOf even the right method to call, or is there an alternative
> method if I want to avoid the file-open hit each time?" or similar
> questions. Can someone point me in the right direction?
> >
> > Regards,
> > Ed.
> > _______________________________________________
> > stringtemplate-interest mailing list
> > stringtemplate-interest at antlr.org
> > http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20120701/549da1d5/attachment-0001.html 

From parrt at cs.usfca.edu  Mon Jul  2 11:43:48 2012
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon, 2 Jul 2012 11:43:48 -0700
Subject: [stringtemplate-interest] Formatting vs. Escaping in an
	AttributeRenderer
In-Reply-To: <CAHnygtGQR3xnJzGaG2aO8trZg5ZnSfs=ATvqsBdW6wEVXgpv6A@mail.gmail.com>
References: <CAHnygtGMuN9a1ntNxQUAfn6Evh5yQWBQkLpZkgkC8yyE9Xodcw@mail.gmail.com>
	<F37EEFA0-9B91-47E0-9B94-1B535EFCB318@cs.usfca.edu>
	<CAHnygtGQR3xnJzGaG2aO8trZg5ZnSfs=ATvqsBdW6wEVXgpv6A@mail.gmail.com>
Message-ID: <C3F1C208-6A03-4B4F-B761-1AB5651ED6C9@cs.usfca.edu>

Hm?ok, well, I designed ST so that different targets would get generated by different template groups.   For example, generating an HTML email vs text email seems to me to be different templates completely. Otherwise it would be like trying to generate Java and C in the same target templates, which doesn't make sense to me. If the languages are very similar, which you could argue with some of the e-mail stuff you mentioned, that I would organize it by subgroups where the subgroup explains the difference between it and the supergroup.
Ter
On Jun 30, 2012, at 10:02 PM, Scott Houchin wrote:

> Hi Ter,
> 
> It may not have been clear from my original note, but I don't want to
> have to have multiple template groups, thus placing the burden on the
> application specific Java code and on the application specific
> template "code" to properly determine how to encode data inserted into
> that template; it seems better from a reuse perspective if the logic
> to properly encode data inserted into an HTML-producing template was
> in the template engine.
> 
>> From the testing I did, the renderer could not be used to default
> everything to HTML encoding because all text from the template, even
> the literal text like "<html><body>..." gets put through the renderer,
> and thus encodes the real HTML element markers.
> 
> I'm not sure if an ObjectModelAdapter would work, but I haven't gotten
> to try that yet.
> 
> Regards,
> Scott Houchin
> 
> On Sat, Jun 30, 2012 at 3:19 PM, Terence Parr <parrt at cs.usfca.edu> wrote:
>> Hi Scott, can't you just set up a renderer for String.class per group?   you would register one for the plain group and one for HTML? I admit to reading this quickly, but don't the registers do precisely what you're asking for now and you don't want it on a per template basis?
>> 
>> Ter
>> On Jun 25, 2012, at 10:54 AM, Scott Houchin wrote:
>> 
>>> Hi all,
>>> 
>>> I have been using StringTemplate on a project and have run into two of
>>> the same issues Tobias posted about last September. In reviewing the
>>> email chain, it appears that the discussion died with some of Udo's
>>> questions left unanswered, specifically looking for a concrete
>>> example. Here's a shot at that example: MIME multipart-alternate
>>> e-mail, plaintext and HTML.
>>> 
>>> I want to create a set of text values ONCE, say in a hash, that I can
>>> then add to the two templates without modification, and get the
>>> correct escaping in each case. For example:
>>> 
>>> plain-alternate(data) ::= <<
>>> Send me email at $data.email$
>>>>> 
>>> 
>>> html-alternate(data) ::= <<
>>> <html><body><p>Send me email at $data.email; format="encode"$</p></body></html>
>>>>> 
>>> 
>>> STGroupDir plainGroup = new STGroupDir("/path/to/plain/templates");
>>> STGroupDir htmlGroup = new STGroupDir("/path/to/html/templates");
>>> htmlGroup.registerRenderer(String.class, new HtmlEncoder());
>>> 
>>> LinkedHashMap<String, String> data = new LinkedHashMap<String, String>();
>>> data.put("email", "John Doe <john at doe.com>");
>>> 
>>> ST plain = plainGroup.getInstanceOf("plain-alternate");
>>> plain.add("data", data);
>>> message.addPart("text/plain", plain.render());
>>> 
>>> ST html = htmlGroup.getInstanceOf("html-alternate");
>>> html.add("data", data);
>>> message.addPart("text/html", html.render());
>>> 
>>> For the plaintext template, I don't need the encoder, but for the HTML
>>> template, I need the <> characters encoded. Of course, I still have to
>>> create two separate template groups, I have to remember to attach the
>>> format to every single variable in the template, and I've got to
>>> create multiple template groups.
>>> 
>>> 
>>> What I really want is to be able to set renderers on a per-template
>>> basis, with the ability for my code to give sets of renders based on
>>> file type, with the STGroup automatically determining the file type.
>>> Assuming the core STGroup capability was added for different
>>> templates, it seems reasonable to extend STRawGroupDir to look at the
>>> file extension for the file type, using that to associate renderers
>>> with that specific template:
>>> 
>>> STImprovedRawGroupDir group = new STImprovedRawGroupDir("/path/to/templates");
>>> group.registerRenderer("html", String.class, new HtmlEncoder());
>>> 
>>> LinkedHashMap<String, String> data = new LinkedHashMap<String, String>();
>>> data.put("email", "John Doe <john at doe.com>");
>>> 
>>> ST plain = group.getInstanceOf("sendmeanemail.txt");
>>> plain.add("data", data);
>>> message.addPart(plain.getContentType(), plain.render());
>>> 
>>> ST html = htmlGroup.getInstanceOf("sendmeanemail.html");
>>> html.add("data", data);
>>> message.addPart(html.getContentType(), html.render());
>>> 
>>> 
>>> But also to echo another of Tobias' comments, I don't want to have to
>>> put format="encode" in each variable in the template; as he said,
>>> that's the fastest way to ensure that an important field somewhere
>>> will not get encoded.
>>> 
>>> 
>>> Regards,
>>> Scott Houchin
>>> 
>>> 
>>>> It looks like I still don't understand the context of your questions. Can you give a full "real life" example explaining your issues?
>>>> 
>>>> Udo
>>>> 
>>>> On 12.09.2011, at 04:28, Tobias G?ntner wrote:
>>>> 
>>>>> Am 11.09.2011 23:17, schrieb Udo Borkowski:
>>>>>>> * It interferes with "normal" renderer usage, i.e., I can either escape
>>>>>>> or format, but not both.
>>>>>> 
>>>>>> There are several ways to solve this. Some time ago Colin Fagan
>>>>>> suggested a "MultiFormatStringRenderer" that allows specify multiple
>>>>>> "formats" in one "format" string.
>>>>> 
>>>>> Well, yes. But I am looking for a cleaner solution (even if this means I
>>>>> have to wait for ST5). I don't want to end up with a Swiss army
>>>>> knife^wrenderer which can handle dates, numbers, 19 custom model
>>>>> objects, which knows 57 vital string transformations ("upper" plus 56
>>>>> others) and 21 different escape modes, and which can make tea in 30
>>>>> different locales - all controlled by a single format string which
>>>>> requires a grammar to parse. ;)
>>>>> 
>>>>>>> * I have to remember to specify the correct format everywhere.
>>>>>> Seems like a good idea to me.
>>>>>> 
>>>>>> But maybe I don't get your point. Can you give a concrete example to
>>>>>> make it clearer?
>>>>> 
>>>>> It is not a good idea. If I have to remember doing something again and
>>>>> again and again, I am bound to forget it now and then. If ST does it by
>>>>> default, I cannot forget it. Consequence: I create less bugs.
>>>>> 
>>>>>> In your AttributeRenderer you need to check for the formatString.
>>>>> [...]
>>>>>> If you don't do this check you will get strange results, like the
>>>>>> [start]?[end] you saw.
>>>>> 
>>>>> What I don't understand: Why are string literals fed into an
>>>>> AttributeRenderer? After all, it's an AttributeRenderer, not a
>>>>> StringLiteralRenderer or TemplateOutputASecondTimeRenderer. ;)
>>>>> This just does not make sense to me.
>>>>> 
>>>>> Regards,
>>>>> Tobias
>>> _______________________________________________
>>> stringtemplate-interest mailing list
>>> stringtemplate-interest at antlr.org
>>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>> 
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest


From erwin.mueller at deventm.org  Wed Jul  4 07:06:03 2012
From: erwin.mueller at deventm.org (Erwin Mueller)
Date: Wed, 04 Jul 2012 16:06:03 +0200
Subject: [stringtemplate-interest] function last() with int[]
Message-ID: <2001850.Y6PhiU2oqR@vostroem.localdomain>

Hello, I'm using ST 4.0.4 and there is a problem with last() (and maybe with 
rest() and the other list functions). They are not working with primitive 
arrays, because it tries to cast the primitive array to Object[]:

<== Interpreter.class line 928 ==>
		else if ( v.getClass().isArray() ) {
			Object[] elems = (Object[])v;
			return elems[elems.length-1];
		}

Exception on line 929:
com.anrisoftware.fdsanalysis.keys.project.OutputException: Error process the 
template: context [/head_derived_data /datacolumns] 1:35 internal error: 
java.lang.ClassCastException: [I cannot be cast to [Ljava.lang.Object;

I created a new issue: https://github.com/antlr/stringtemplate4/issues/12

Kind regards, Erwin.
-- 
Erwin Mueller
http://www.mueller-public.de - My site;
http://www.global-scaling-institute.de/ - Global Scaling Institute GmbH;
http://www.anr-institute.com - Advanced Natural Research Institute GmbH;
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20120704/5286edbd/attachment.html 

From Nathan.Comstock at wellsfargo.com  Thu Jul  5 09:38:41 2012
From: Nathan.Comstock at wellsfargo.com (Nathan.Comstock at wellsfargo.com)
Date: Thu, 5 Jul 2012 11:38:41 -0500
Subject: [stringtemplate-interest] ST 4.0.5 and antlr version
Message-ID: <CF3CD2E5FFE276459D8D4D6E78BAAB3C406A3D4CF2@MSGCMSV21014.ent.wfb.bank.corp>

Hello,

I am upgrading some java code to use ST 4.0.5 and am unsure about the correct version of antlr to use.

The documentation says to use antlr-3.4-complete.jar and ST 4.0.5 (http://www.stringtemplate.org/depot/ST4/README.txt)
However, it seems that antlr-3.4-complete.jar contains all the ST 4.0.4 classes. Is antlr-3.4-complete.jar meant to support String temaplate 4.0.4 without the ST 4.0.4 jar ? I'm not sure why it is recommended to have both of these jars.

If I want to use ST 4.0.5 , I assume that I need to use antlr-3.3-complete.jar which does not contain the ST 4.0.4 classes, is this correct

Also, I looked at antlr-3-3.jar (not antlr-3.4-complete.jar) but ST 4.0.5 requires classes not in antlr-3-4.jar




-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20120705/425d7429/attachment.html 

From parrt at cs.usfca.edu  Thu Jul  5 14:01:52 2012
From: parrt at cs.usfca.edu (Terence Parr)
Date: Thu, 5 Jul 2012 14:01:52 -0700
Subject: [stringtemplate-interest] ST 4.0.5 and antlr version
In-Reply-To: <CF3CD2E5FFE276459D8D4D6E78BAAB3C406A3D4CF2@MSGCMSV21014.ent.wfb.bank.corp>
References: <CF3CD2E5FFE276459D8D4D6E78BAAB3C406A3D4CF2@MSGCMSV21014.ent.wfb.bank.corp>
Message-ID: <6FF437A3-1225-4221-9395-A08E8D47FF76@cs.usfca.edu>

Hi. The easiest thing to do is just put ST 4.0.5 in your class path before antlr 3.4. That way it will pick up it instead of 4.0.4.
Ter
On Jul 5, 2012, at 9:38 AM, <Nathan.Comstock at wellsfargo.com> wrote:

> Hello,
>  
> I am upgrading some java code to use ST 4.0.5 and am unsure about the correct version of antlr to use.
>  
> The documentation says to use antlr-3.4-complete.jar and ST 4.0.5 (http://www.stringtemplate.org/depot/ST4/README.txt)
> However, it seems that antlr-3.4-complete.jar contains all the ST 4.0.4 classes. Is antlr-3.4-complete.jar meant to support String temaplate 4.0.4 without the ST 4.0.4 jar ? I?m not sure why it is recommended to have both of these jars.
>  
> If I want to use ST 4.0.5 , I assume that I need to use antlr-3.3-complete.jar which does not contain the ST 4.0.4 classes, is this correct
>  
> Also, I looked at antlr-3-3.jar (not antlr-3.4-complete.jar) but ST 4.0.5 requires classes not in antlr-3-4.jar
>  
>  
>  
>  
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest


From scott at houchin.us  Sun Jul  8 15:17:45 2012
From: scott at houchin.us (Scott Houchin)
Date: Sun, 8 Jul 2012 18:17:45 -0400
Subject: [stringtemplate-interest] Formatting vs. Escaping in an
	AttributeRenderer
In-Reply-To: <C3F1C208-6A03-4B4F-B761-1AB5651ED6C9@cs.usfca.edu>
References: <CAHnygtGMuN9a1ntNxQUAfn6Evh5yQWBQkLpZkgkC8yyE9Xodcw@mail.gmail.com>
	<F37EEFA0-9B91-47E0-9B94-1B535EFCB318@cs.usfca.edu>
	<CAHnygtGQR3xnJzGaG2aO8trZg5ZnSfs=ATvqsBdW6wEVXgpv6A@mail.gmail.com>
	<C3F1C208-6A03-4B4F-B761-1AB5651ED6C9@cs.usfca.edu>
Message-ID: <CAHnygtFwrJcmd5umrnmVy_gH0nGYR+xAiaEoxPtA=PamSUHV3A@mail.gmail.com>

Ter,


I can live with different types of templates in different template
groups, although if I did any more with this than we're doing now, I
probably would want other types of ST group objects to better handle
the construction of the Java group objects from directories of
templates. More on that in a minute.

The bigger issue is still that literal text from the template is being
sent through the formatter. I can see cases where this might be
desired, but I would think the predominate case would be that the
literal text is already properly encoded. Maybe a simple boolean
setting on either a template or the template group indicating whether
literal text should be formatted?

I agree from a programming perspective, the HTML and plaintext
versions of an e-mail message are very different things; however, from
the perspective of the content and designer, they're just different
forms of the different things, and I can see there being issues in
human workflow if they're not stored together. Maybe a new
STMultitypeGroup that takes both a template name and type on the
method to get an instance of a template. STMultitypeGroup could
encapsulate the literal groups as existing STGroup objects, adding
items of each type to the correct hidden STGroup. The functions to set
the formatters on the group could then also take the type, and the new
STMultitypeGroup would pass that onto the appropriate real STGroup.

Regards,
Scott Houchin

On Mon, Jul 2, 2012 at 2:43 PM, Terence Parr <parrt at cs.usfca.edu> wrote:
> Hm?ok, well, I designed ST so that different targets would get generated by different template groups.   For example, generating an HTML email vs text email seems to me to be different templates completely. Otherwise it would be like trying to generate Java and C in the same target templates, which doesn't make sense to me. If the languages are very similar, which you could argue with some of the e-mail stuff you mentioned, that I would organize it by subgroups where the subgroup explains the difference between it and the supergroup.
> Ter
> On Jun 30, 2012, at 10:02 PM, Scott Houchin wrote:
>
>> Hi Ter,
>>
>> It may not have been clear from my original note, but I don't want to
>> have to have multiple template groups, thus placing the burden on the
>> application specific Java code and on the application specific
>> template "code" to properly determine how to encode data inserted into
>> that template; it seems better from a reuse perspective if the logic
>> to properly encode data inserted into an HTML-producing template was
>> in the template engine.
>>
>>> From the testing I did, the renderer could not be used to default
>> everything to HTML encoding because all text from the template, even
>> the literal text like "<html><body>..." gets put through the renderer,
>> and thus encodes the real HTML element markers.
>>
>> I'm not sure if an ObjectModelAdapter would work, but I haven't gotten
>> to try that yet.
>>
>> Regards,
>> Scott Houchin
>>
>> On Sat, Jun 30, 2012 at 3:19 PM, Terence Parr <parrt at cs.usfca.edu> wrote:
>>> Hi Scott, can't you just set up a renderer for String.class per group?   you would register one for the plain group and one for HTML? I admit to reading this quickly, but don't the registers do precisely what you're asking for now and you don't want it on a per template basis?
>>>
>>> Ter
>>> On Jun 25, 2012, at 10:54 AM, Scott Houchin wrote:
>>>
>>>> Hi all,
>>>>
>>>> I have been using StringTemplate on a project and have run into two of
>>>> the same issues Tobias posted about last September. In reviewing the
>>>> email chain, it appears that the discussion died with some of Udo's
>>>> questions left unanswered, specifically looking for a concrete
>>>> example. Here's a shot at that example: MIME multipart-alternate
>>>> e-mail, plaintext and HTML.
>>>>
>>>> I want to create a set of text values ONCE, say in a hash, that I can
>>>> then add to the two templates without modification, and get the
>>>> correct escaping in each case. For example:
>>>>
>>>> plain-alternate(data) ::= <<
>>>> Send me email at $data.email$
>>>>>>
>>>>
>>>> html-alternate(data) ::= <<
>>>> <html><body><p>Send me email at $data.email; format="encode"$</p></body></html>
>>>>>>
>>>>
>>>> STGroupDir plainGroup = new STGroupDir("/path/to/plain/templates");
>>>> STGroupDir htmlGroup = new STGroupDir("/path/to/html/templates");
>>>> htmlGroup.registerRenderer(String.class, new HtmlEncoder());
>>>>
>>>> LinkedHashMap<String, String> data = new LinkedHashMap<String, String>();
>>>> data.put("email", "John Doe <john at doe.com>");
>>>>
>>>> ST plain = plainGroup.getInstanceOf("plain-alternate");
>>>> plain.add("data", data);
>>>> message.addPart("text/plain", plain.render());
>>>>
>>>> ST html = htmlGroup.getInstanceOf("html-alternate");
>>>> html.add("data", data);
>>>> message.addPart("text/html", html.render());
>>>>
>>>> For the plaintext template, I don't need the encoder, but for the HTML
>>>> template, I need the <> characters encoded. Of course, I still have to
>>>> create two separate template groups, I have to remember to attach the
>>>> format to every single variable in the template, and I've got to
>>>> create multiple template groups.
>>>>
>>>>
>>>> What I really want is to be able to set renderers on a per-template
>>>> basis, with the ability for my code to give sets of renders based on
>>>> file type, with the STGroup automatically determining the file type.
>>>> Assuming the core STGroup capability was added for different
>>>> templates, it seems reasonable to extend STRawGroupDir to look at the
>>>> file extension for the file type, using that to associate renderers
>>>> with that specific template:
>>>>
>>>> STImprovedRawGroupDir group = new STImprovedRawGroupDir("/path/to/templates");
>>>> group.registerRenderer("html", String.class, new HtmlEncoder());
>>>>
>>>> LinkedHashMap<String, String> data = new LinkedHashMap<String, String>();
>>>> data.put("email", "John Doe <john at doe.com>");
>>>>
>>>> ST plain = group.getInstanceOf("sendmeanemail.txt");
>>>> plain.add("data", data);
>>>> message.addPart(plain.getContentType(), plain.render());
>>>>
>>>> ST html = htmlGroup.getInstanceOf("sendmeanemail.html");
>>>> html.add("data", data);
>>>> message.addPart(html.getContentType(), html.render());
>>>>
>>>>
>>>> But also to echo another of Tobias' comments, I don't want to have to
>>>> put format="encode" in each variable in the template; as he said,
>>>> that's the fastest way to ensure that an important field somewhere
>>>> will not get encoded.
>>>>
>>>>
>>>> Regards,
>>>> Scott Houchin
>>>>
>>>>
>>>>> It looks like I still don't understand the context of your questions. Can you give a full "real life" example explaining your issues?
>>>>>
>>>>> Udo
>>>>>
>>>>> On 12.09.2011, at 04:28, Tobias G?ntner wrote:
>>>>>
>>>>>> Am 11.09.2011 23:17, schrieb Udo Borkowski:
>>>>>>>> * It interferes with "normal" renderer usage, i.e., I can either escape
>>>>>>>> or format, but not both.
>>>>>>>
>>>>>>> There are several ways to solve this. Some time ago Colin Fagan
>>>>>>> suggested a "MultiFormatStringRenderer" that allows specify multiple
>>>>>>> "formats" in one "format" string.
>>>>>>
>>>>>> Well, yes. But I am looking for a cleaner solution (even if this means I
>>>>>> have to wait for ST5). I don't want to end up with a Swiss army
>>>>>> knife^wrenderer which can handle dates, numbers, 19 custom model
>>>>>> objects, which knows 57 vital string transformations ("upper" plus 56
>>>>>> others) and 21 different escape modes, and which can make tea in 30
>>>>>> different locales - all controlled by a single format string which
>>>>>> requires a grammar to parse. ;)
>>>>>>
>>>>>>>> * I have to remember to specify the correct format everywhere.
>>>>>>> Seems like a good idea to me.
>>>>>>>
>>>>>>> But maybe I don't get your point. Can you give a concrete example to
>>>>>>> make it clearer?
>>>>>>
>>>>>> It is not a good idea. If I have to remember doing something again and
>>>>>> again and again, I am bound to forget it now and then. If ST does it by
>>>>>> default, I cannot forget it. Consequence: I create less bugs.
>>>>>>
>>>>>>> In your AttributeRenderer you need to check for the formatString.
>>>>>> [...]
>>>>>>> If you don't do this check you will get strange results, like the
>>>>>>> [start]?[end] you saw.
>>>>>>
>>>>>> What I don't understand: Why are string literals fed into an
>>>>>> AttributeRenderer? After all, it's an AttributeRenderer, not a
>>>>>> StringLiteralRenderer or TemplateOutputASecondTimeRenderer. ;)
>>>>>> This just does not make sense to me.
>>>>>>
>>>>>> Regards,
>>>>>> Tobias
>>>> _______________________________________________
>>>> stringtemplate-interest mailing list
>>>> stringtemplate-interest at antlr.org
>>>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>>>
>> _______________________________________________
>> stringtemplate-interest mailing list
>> stringtemplate-interest at antlr.org
>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>

From parrt at cs.usfca.edu  Wed Jul 11 08:36:17 2012
From: parrt at cs.usfca.edu (Terence Parr)
Date: Wed, 11 Jul 2012 08:36:17 -0700
Subject: [stringtemplate-interest] turned off public signup to wiki
Message-ID: <0D34E45E-63F7-4238-9FD4-FA1BDF038E27@cs.usfca.edu>

only evil spammers are signing up. turned it off. sorry?email me for access if you want to add/edit pages.
Ter

From breaux at users.sourceforge.net  Fri Jul 20 13:24:47 2012
From: breaux at users.sourceforge.net (Doug Breaux)
Date: Fri, 20 Jul 2012 15:24:47 -0500
Subject: [stringtemplate-interest] STRawGroupDir
Message-ID: <5009BE8F.5090302@users.sourceforge.net>

Is there any official documentation or example code for STRawGroupDir 
that I'm missing? The online API docs are for version 4.0.3.

This kind of template is definitely what I'll want to be using, but as a 
newbie to ST, the description in the 4.0.5 Release Notes is not clear to me.

By the way, I suggest maybe pointing to documentation for this class, 
and/or the release notes, from this archived email thread in case 
somebody else comes looking:

http://www.antlr.org/pipermail/stringtemplate-interest/2011-July/003712.html

I was almost about to give up on ST entirely until I stumbled on the 
release notes.

Thanks.
--
Doug

