From fw at deneb.enyo.de  Sat Mar  1 03:08:42 2008
From: fw at deneb.enyo.de (Florian Weimer)
Date: Sat, 01 Mar 2008 12:08:42 +0100
Subject: [stringtemplate-interest] HTML escaping
In-Reply-To: <200801182346.21643.roma@qwertty.com> (Roman Odaisky's message of
	"Fri, 18 Jan 2008 23:46:21 +0200")
References: <200801182346.21643.roma@qwertty.com>
Message-ID: <87ve46zop1.fsf@mid.deneb.enyo.de>

* Roman Odaisky:

> The manual says one should use renderers for escaping. That makes sense for 
> applications that generate SQL, or C, but how does one use ST for JS embedded 
> in HTML? <b>hello $user$</b> and alert("hello $user$") need different 
> escaping, and the possible presence of <![CDATA[ complicates things further.

I guess you have to use separate templates for Javascript and HTML.
Then you render the Javascript code to a string, and include it in the
HTML.  Since it's not permitted to use proper HTML escaping inside
<script>...</script> tags, it might be a better idea to put the
Javascript into a separate file (but this might result in security
issues if it contains private data, so you need to be careful).  Lexing
the generated Javascript and rewriting string literals and comments
containing offending strings could be another option.

From parrt at cs.usfca.edu  Sun Mar  2 13:42:06 2008
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sun, 2 Mar 2008 13:42:06 -0800
Subject: [stringtemplate-interest] Order of Attributes
In-Reply-To: <47C011C2.6040703@gmx.de>
References: <47C011C2.6040703@gmx.de>
Message-ID: <3EAB64D5-8B43-495D-82D8-BCAD7401F765@cs.usfca.edu>


On Feb 23, 2008, at 4:29 AM, Rabea Gransberger wrote:

> Hello,
>
> is there any way to question the Order of attributes in a  
> StringTemplate?
>
> I'd like to have some internationalization and have some properties
> files with entries like:
> plus=$right$ + $left?
>
> I take the String for plus and make a StringTemplate out of it, and  
> then
> I'd like to know if $right? occurs first in the template or $left$.

Do you mean the references to the templates or the order which they  
were set? The order of the attributes is undefined unless you are  
talking about the order in which you reference them.

Ter
>
>
> Right now I determine if by myself by using indexOf on the String, but
> that's not the best solution because I may get the index of an similar
> String which is not an attribute of the template.
>
> Greetings,
> Rabea
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org:8080/mailman/listinfo/stringtemplate-interest


From parrt at cs.usfca.edu  Sun Mar  2 13:43:18 2008
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sun, 2 Mar 2008 13:43:18 -0800
Subject: [stringtemplate-interest] Functional List Formatting
In-Reply-To: <cb0c557b0802251048mf8a49d6ra55fc646fb2ba060@mail.gmail.com>
References: <cb0c557b0802251048mf8a49d6ra55fc646fb2ba060@mail.gmail.com>
Message-ID: <8AA5E187-BB19-4FDF-8169-2834CC3E11A7@cs.usfca.edu>

Hi Fred, There is no reason that front in reverse can't be provided in  
that they do not violate any of the rules.  You can probably fake it  
with a format option for a moment and a renderer.
Ter
On Feb 25, 2008, at 10:48 AM, Fred wrote:

> I have doing some things related to lists in string templates that tax
> the current set of functions.
> Specifically, 'first', 'last', 'rest', 'tail' aren't quite do it for  
> me.
> In particular, I need to do things like...
>  'front'  : kind of like 'rest' but basically everything but 'last'
>  'reverse' : reverse the order of the list (useful for things like
>  building java package names)
>  'sublist(list,0,-2)+sublist(list,-1)' : all but the second to the  
> last item.
>
> ok, that last one is garbage but you get the idea.
> I know this is verging on something not unlike a functional language
> and you may have good reasons for not going there.
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org:8080/mailman/listinfo/stringtemplate-interest


From parrt at cs.usfca.edu  Sun Mar  2 13:44:32 2008
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sun, 2 Mar 2008 13:44:32 -0800
Subject: [stringtemplate-interest] Programatically escape arbitrary text
	as a stringtemplate template?
In-Reply-To: <4d596d820802251619k4bb4e871v93adecf17f0ae07a@mail.gmail.com>
References: <4d596d820802251619k4bb4e871v93adecf17f0ae07a@mail.gmail.com>
Message-ID: <AAA3AFCB-13BB-4C62-AD54-CE62B6732900@cs.usfca.edu>

Hi Darach, I have come across the same issue.  It's easy. make a  
template that is simply $data$ and then pass in the template as  
attribute data.  Then ST cannot be interpreting the text at all.
Ter
On Feb 25, 2008, at 4:19 PM, Darach Ennis wrote:

> Hi guys,
>
> I would like to escape some arbitrary text as a string template  
> template. Specifically
> the template text is macro text from an ANTLR grammar but this  
> question is purely
> a StringTemplate question/request. Given input of the form:
>
> $A $B $C c:\foo\bar\baz <> <> <>
>
> It is not obvious how to escape arbitrary text such that when output  
> from a StringTemplate
> template it will match the input source. I am generating the string  
> programatically so I 'know'
> when $ is literal and when $...$ represents an intentional attribute  
> reference when I generate
> the input string. Here is what I came up with viza vis a testcase:
>
>         final String TEST_INPUT = "$A $B $C c:\\foo\\bar\\baz <>  
> <>"; // double slash in a literal string represents a literal slash
>         System.out.println("raw: " + TEST_INPUT);
>         StringTemplate st = new StringTemplate(TEST_INPUT);
>         System.out.println("rst: " + st.toString());
>         final String escaped = TEST_INPUT.replace("\\","\\\ 
> \").replace("$","\\$");
>         System.out.println("esc: " + escaped);
>         StringTemplate st2 = new StringTemplate(escaped);
>         System.out.println("???: " + st2.toString());
>
> White outputs the following
>
> raw: $A $B $C c:\foo\bar\baz <> <>
> problem parsing template 'anonymous'
> line 1:30: expecting '$', found '<EOF>'
>     at  
> org 
> .antlr 
> .stringtemplate 
> .language.DefaultTemplateLexer.nextToken(DefaultTemplateLexer.java: 
> 149)
>     at antlr.TokenBuffer.fill(TokenBuffer.java:69)
>     at antlr.TokenBuffer.LA(TokenBuffer.java:80)
>     at antlr.LLkParser.LA(LLkParser.java:52)
>     at  
> org 
> .antlr 
> .stringtemplate.language.TemplateParser.template(TemplateParser.java: 
> 103)
>     at  
> org 
> .antlr 
> .stringtemplate 
> .StringTemplate.breakTemplateIntoChunks(StringTemplate.java:853)
>     at  
> org 
> .antlr.stringtemplate.StringTemplate.setTemplate(StringTemplate.java: 
> 455)
>     at  
> org.antlr.stringtemplate.StringTemplate.<init>(StringTemplate.java: 
> 311)
>     at  
> org.antlr.stringtemplate.StringTemplate.<init>(StringTemplate.java: 
> 296)
>     at spike.Test.main(Test.java:9)
> rst: B
> esc: \$A \$B \$C c:\\foo\\bar\\baz <> <>
> ???: $A $B $C c:\foo\bar\baz <> <>
>
> Are there any other possible gotchas, such as 'unfortunate'  
> attribute names? Is there a recommended
> strategy for escaping attribute names?
>
> It would be worthwhile adding an encode utility method to the  
> StringTemplate API as the inadvertent
> use of java's String.replaceAll now changes the meaning of 'slash'  
> and '$' as the first argument is a
> regular expression. So string now means 'end of line' as well under  
> certain conditions... At the least
> this should be documented in the wiki somewhere.
>
> Regards,
>
> Darach.
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org:8080/mailman/listinfo/stringtemplate-interest


From darach at gmail.com  Mon Mar  3 00:42:53 2008
From: darach at gmail.com (Darach Ennis)
Date: Mon, 3 Mar 2008 08:42:53 +0000
Subject: [stringtemplate-interest] Programatically escape arbitrary text
	as a stringtemplate template?
In-Reply-To: <AAA3AFCB-13BB-4C62-AD54-CE62B6732900@cs.usfca.edu>
References: <4d596d820802251619k4bb4e871v93adecf17f0ae07a@mail.gmail.com>
	<AAA3AFCB-13BB-4C62-AD54-CE62B6732900@cs.usfca.edu>
Message-ID: <4d596d820803030042i5f77dbd8ra5b41d43064d7af@mail.gmail.com>

Hi Terence,

I could use your suggested fix as an optimization for for no-arg and
empty-arg parameters.
I'll have to suck it and see for macro's with parameters which would imply
an ST template
of the form:
$data0$$arg0$$data1$$arg0$$data2$$arg1$$data3$$arg0$$arg1$$data4$.

However, your suggested fix has the advantage of full control over both
attribute names
and of the ST template text itself. This level of indirection might prove
useful.

Thanks!

Darach.

On Sun, Mar 2, 2008 at 9:44 PM, Terence Parr <parrt at cs.usfca.edu> wrote:

> Hi Darach, I have come across the same issue.  It's easy. make a
> template that is simply $data$ and then pass in the template as
> attribute data.  Then ST cannot be interpreting the text at all.
> Ter
> On Feb 25, 2008, at 4:19 PM, Darach Ennis wrote:
>
> > Hi guys,
> >
> > I would like to escape some arbitrary text as a string template
> > template. Specifically
> > the template text is macro text from an ANTLR grammar but this
> > question is purely
> > a StringTemplate question/request. Given input of the form:
> >
> > $A $B $C c:\foo\bar\baz <> <> <>
> >
> > It is not obvious how to escape arbitrary text such that when output
> > from a StringTemplate
> > template it will match the input source. I am generating the string
> > programatically so I 'know'
> > when $ is literal and when $...$ represents an intentional attribute
> > reference when I generate
> > the input string. Here is what I came up with viza vis a testcase:
> >
> >         final String TEST_INPUT = "$A $B $C c:\\foo\\bar\\baz <>
> > <>"; // double slash in a literal string represents a literal slash
> >         System.out.println("raw: " + TEST_INPUT);
> >         StringTemplate st = new StringTemplate(TEST_INPUT);
> >         System.out.println("rst: " + st.toString());
> >         final String escaped = TEST_INPUT.replace("\\","\\\
> > \").replace("$","\\$");
> >         System.out.println("esc: " + escaped);
> >         StringTemplate st2 = new StringTemplate(escaped);
> >         System.out.println("???: " + st2.toString());
> >
> > White outputs the following
> >
> > raw: $A $B $C c:\foo\bar\baz <> <>
> > problem parsing template 'anonymous'
> > line 1:30: expecting '$', found '<EOF>'
> >     at
> > org
> > .antlr
> > .stringtemplate
> > .language.DefaultTemplateLexer.nextToken(DefaultTemplateLexer.java:
> > 149)
> >     at antlr.TokenBuffer.fill(TokenBuffer.java:69)
> >     at antlr.TokenBuffer.LA(TokenBuffer.java:80)
> >     at antlr.LLkParser.LA(LLkParser.java:52)
> >     at
> > org
> > .antlr
> > .stringtemplate.language.TemplateParser.template(TemplateParser.java:
> > 103)
> >     at
> > org
> > .antlr
> > .stringtemplate
> > .StringTemplate.breakTemplateIntoChunks(StringTemplate.java:853)
> >     at
> > org
> > .antlr.stringtemplate.StringTemplate.setTemplate(StringTemplate.java:
> > 455)
> >     at
> > org.antlr.stringtemplate.StringTemplate.<init>(StringTemplate.java:
> > 311)
> >     at
> > org.antlr.stringtemplate.StringTemplate.<init>(StringTemplate.java:
> > 296)
> >     at spike.Test.main(Test.java:9)
> > rst: B
> > esc: \$A \$B \$C c:\\foo\\bar\\baz <> <>
> > ???: $A $B $C c:\foo\bar\baz <> <>
> >
> > Are there any other possible gotchas, such as 'unfortunate'
> > attribute names? Is there a recommended
> > strategy for escaping attribute names?
> >
> > It would be worthwhile adding an encode utility method to the
> > StringTemplate API as the inadvertent
> > use of java's String.replaceAll now changes the meaning of 'slash'
> > and '$' as the first argument is a
> > regular expression. So string now means 'end of line' as well under
> > certain conditions... At the least
> > this should be documented in the wiki somewhere.
> >
> > Regards,
> >
> > Darach.
> > _______________________________________________
> > stringtemplate-interest mailing list
> > stringtemplate-interest at antlr.org
> > http://www.antlr.org:8080/mailman/listinfo/stringtemplate-interest
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org:8080/pipermail/stringtemplate-interest/attachments/20080303/c4a01d18/attachment.html 

From phreed at gmail.com  Mon Mar  3 06:51:25 2008
From: phreed at gmail.com (Fred)
Date: Mon, 3 Mar 2008 08:51:25 -0600
Subject: [stringtemplate-interest] Functional List Formatting
In-Reply-To: <8AA5E187-BB19-4FDF-8169-2834CC3E11A7@cs.usfca.edu>
References: <cb0c557b0802251048mf8a49d6ra55fc646fb2ba060@mail.gmail.com>
	<8AA5E187-BB19-4FDF-8169-2834CC3E11A7@cs.usfca.edu>
Message-ID: <cb0c557b0803030651l5d022e98xef0365bab36f4da2@mail.gmail.com>

On Sun, Mar 2, 2008 at 3:43 PM, Terence Parr <parrt at cs.usfca.edu> wrote:
> Hi Fred, There is no reason that front in reverse can't be provided in
>  that they do not violate any of the rules.  You can probably fake it
>  with a format option for a moment and a renderer.

If I could do that it would be perfect.
I was under the impression that creating a custom renderer and using format
could only effect a change on the elements of list.
e.g. I could create a custom renderer to do things like...

import org.antlr.stringtemplate.AttributeRenderer;

public class javaRenderer implements AttributeRenderer {

   public String toString(Object obj) {
       return obj.toString();
   }
   public String toString(Object obj, String formatName) {
       if (formatName.equals("toUpper")) {
           return obj.toString().toUpperCase();
       } else if (formatName.equals("toLower")) {
           return obj.toString().toLowerCase();
       } else if (formatName.equals("escape")) {
           return obj.toString().replaceAll("\"","\\\"");
       } else if (formatName.equals("trim")) {
           return obj.toString().trim();
       } else {
           throw new IllegalArgumentException("Unsupported format:
"+formatName);
       }
   }
}

Which, given a list L = ["abc","xyz","123"], a template of the form <L,
format="toUpper", separator=":"> would produce "ABC:XYZ:123".
But given that the toString method takes a single Object as an argument I
don't see how to use the format capability to reorder a list.
If there were a way to do this it would be exactly what I am looking for.

>  Ter
>
>
> On Feb 25, 2008, at 10:48 AM, Fred wrote:
>
>  > I have doing some things related to lists in string templates that tax
>  > the current set of functions.
>  > Specifically, 'first', 'last', 'rest', 'tail' aren't quite do it for
>  > me.
>  > In particular, I need to do things like...
>  >  'front'  : kind of like 'rest' but basically everything but 'last'
>  >  'reverse' : reverse the order of the list (useful for things like
>  >  building java package names)
>  >  'sublist(list,0,-2)+sublist(list,-1)' : all but the second to the
>  > last item.
>  >
>  > ok, that last one is garbage but you get the idea.
>  > I know this is verging on something not unlike a functional language
>  > and you may have good reasons for not going there.
>  > _______________________________________________
>  > stringtemplate-interest mailing list
>  > stringtemplate-interest at antlr.org
>  > http://www.antlr.org:8080/mailman/listinfo/stringtemplate-interest
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org:8080/pipermail/stringtemplate-interest/attachments/20080303/d3504a89/attachment-0001.html 

From rgransberger at gmx.de  Tue Mar  4 01:28:32 2008
From: rgransberger at gmx.de (Rabea Gransberger)
Date: Tue, 04 Mar 2008 10:28:32 +0100
Subject: [stringtemplate-interest] Order of Attributes
In-Reply-To: <3EAB64D5-8B43-495D-82D8-BCAD7401F765@cs.usfca.edu>
References: <47C011C2.6040703@gmx.de>
	<3EAB64D5-8B43-495D-82D8-BCAD7401F765@cs.usfca.edu>
Message-ID: <47CD1640.9020303@gmx.de>

Terence Parr schrieb:
> 
> On Feb 23, 2008, at 4:29 AM, Rabea Gransberger wrote:
> 
>> Hello,
>>
>> is there any way to question the Order of attributes in a StringTemplate?
>>
>> I'd like to have some internationalization and have some properties
>> files with entries like:
>> plus=$right$ + $left?
>>
>> I take the String for plus and make a StringTemplate out of it, and then
>> I'd like to know if $right? occurs first in the template or $left$.
> 
> Do you mean the references to the templates or the order which they were 
> set? The order of the attributes is undefined unless you are talking 
> about the order in which you reference them.

I mean the reference to the templates. In my example I'd like to get 1 
if I request something like
getReferenceOfAttribute("right")
and 2 for
getReferenceOfAttribute("left")

A list of numbers would also be okay, if the attribute is referenced 
more than once.

Greetings,
Rabea

From parrt at cs.usfca.edu  Tue Mar  4 11:33:47 2008
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue, 4 Mar 2008 11:33:47 -0800
Subject: [stringtemplate-interest] Order of Attributes
In-Reply-To: <47CD1640.9020303@gmx.de>
References: <47C011C2.6040703@gmx.de>
	<3EAB64D5-8B43-495D-82D8-BCAD7401F765@cs.usfca.edu>
	<47CD1640.9020303@gmx.de>
Message-ID: <88529F04-EA2B-49E7-8F6B-ED63D5C3F6B6@cs.usfca.edu>

still not sure why you want this.  so, you want to examine the chunks  
within the template and ask when certain attributes are referenced?

Ter
On Mar 4, 2008, at 1:28 AM, Rabea Gransberger wrote:

> Terence Parr schrieb:
>>
>> On Feb 23, 2008, at 4:29 AM, Rabea Gransberger wrote:
>>
>>> Hello,
>>>
>>> is there any way to question the Order of attributes in a  
>>> StringTemplate?
>>>
>>> I'd like to have some internationalization and have some properties
>>> files with entries like:
>>> plus=$right$ + $left?
>>>
>>> I take the String for plus and make a StringTemplate out of it,  
>>> and then
>>> I'd like to know if $right? occurs first in the template or $left$.
>>
>> Do you mean the references to the templates or the order which they  
>> were
>> set? The order of the attributes is undefined unless you are talking
>> about the order in which you reference them.
>
> I mean the reference to the templates. In my example I'd like to get 1
> if I request something like
> getReferenceOfAttribute("right")
> and 2 for
> getReferenceOfAttribute("left")
>
> A list of numbers would also be okay, if the attribute is referenced
> more than once.
>
> Greetings,
> Rabea
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org:8080/mailman/listinfo/stringtemplate-interest


From parrt at cs.usfca.edu  Tue Mar  4 12:42:26 2008
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue, 4 Mar 2008 12:42:26 -0800
Subject: [stringtemplate-interest] ST C# 3.1beta released
Message-ID: <A71FBA4A-D860-41CF-BF54-AB6FC1D09063@cs.usfca.edu>

Enjoy :)

http://www.stringtemplate.org/download.html

Thanks to Kunle and Michael.

Ter

From parrt at cs.usfca.edu  Fri Mar  7 13:44:13 2008
From: parrt at cs.usfca.edu (Terence Parr)
Date: Fri, 7 Mar 2008 13:44:13 -0800
Subject: [stringtemplate-interest] speaking at ICPC 2008 in Amsterdam this
	June
Message-ID: <303AAED6-40BA-4800-8A72-824374141E71@cs.usfca.edu>

howdy,

I'll be giving a keynote lecture at this year's conference on program  
comprehension in Amsterdam if anybody's interested in going:

http://www.cs.vu.nl/icpc2008/keynote.php

I think I will also be giving a talk at CWI.  June 10-13.

Terence

From Thomas.Aigner at lff.bayern.de  Wed Mar 12 05:36:05 2008
From: Thomas.Aigner at lff.bayern.de (Aigner, Thomas (LfF-R))
Date: Wed, 12 Mar 2008 13:36:05 +0100
Subject: [stringtemplate-interest] Bug in 3.1: elseif missing from
	AngleBracketTemplateLexer
Message-ID: <68E01D7EA6B1AF4395B82A8B512107F203BE8699@LFF-L3ASRV02.bfd.bayern.de>

hi,
there is a bug in StringTemplate 3.1: the class
AngleBracketTemplateLexer doesn't know about the new 'elseif' - keyword.

Thomas

From parrt at cs.usfca.edu  Wed Mar 12 10:53:01 2008
From: parrt at cs.usfca.edu (Terence Parr)
Date: Wed, 12 Mar 2008 10:53:01 -0700
Subject: [stringtemplate-interest] Functional List Formatting
In-Reply-To: <cb0c557b0803030651l5d022e98xef0365bab36f4da2@mail.gmail.com>
References: <cb0c557b0802251048mf8a49d6ra55fc646fb2ba060@mail.gmail.com>
	<8AA5E187-BB19-4FDF-8169-2834CC3E11A7@cs.usfca.edu>
	<cb0c557b0803030651l5d022e98xef0365bab36f4da2@mail.gmail.com>
Message-ID: <3E377545-BF87-4F27-A449-D7CCCE2B0AE2@cs.usfca.edu>


On Mar 3, 2008, at 6:51 AM, Fred wrote:

>
>
> On Sun, Mar 2, 2008 at 3:43 PM, Terence Parr <parrt at cs.usfca.edu>  
> wrote:
> > Hi Fred, There is no reason that front in reverse can't be  
> provided in
> >  that they do not violate any of the rules.  You can probably fake  
> it
> >  with a format option for a moment and a renderer.
>
> If I could do that it would be perfect.
> I was under the impression that creating a custom renderer and using  
> format could only effect a change on the elements of list.

oh, right.  Hm.... what to do, what to do...

Ok, well here is a solution, but not the best one perhaps.  What you  
need to do is wrap lists in an object that adds an attribute called  
reverse. You can do this automatically by overriding ST.setAttribute.  
It will then auto wrap these objects as they come in.  You can then  
say $mylist.reverse$ in ST. :) Will this work for you?

Ter
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org:8080/pipermail/stringtemplate-interest/attachments/20080312/28535b07/attachment.html 

From parrt at cs.usfca.edu  Wed Mar 12 10:54:20 2008
From: parrt at cs.usfca.edu (Terence Parr)
Date: Wed, 12 Mar 2008 10:54:20 -0700
Subject: [stringtemplate-interest] Bug in 3.1: elseif missing from
	AngleBracketTemplateLexer
In-Reply-To: <68E01D7EA6B1AF4395B82A8B512107F203BE8699@LFF-L3ASRV02.bfd.bayern.de>
References: <68E01D7EA6B1AF4395B82A8B512107F203BE8699@LFF-L3ASRV02.bfd.bayern.de>
Message-ID: <98F37C74-6C83-440E-AB4A-433ED3C9ABEB@cs.usfca.edu>


On Mar 12, 2008, at 5:36 AM, Aigner, Thomas (LfF-R) wrote:

> hi,
> there is a bug in StringTemplate 3.1: the class
> AngleBracketTemplateLexer doesn't know about the new 'elseif' -  
> keyword.

oh crap!  Really? damn. Adding bug.

http://www.antlr.org:8888/browse/ST-36

Ter

From contact at moonbase.com.au  Sat Mar 15 02:44:38 2008
From: contact at moonbase.com.au (Mark Wharton)
Date: Sat, 15 Mar 2008 18:44:38 +0900
Subject: [stringtemplate-interest] Idea for passing parameters to another
	template...
Message-ID: <1205574278.4809.1242537017@webmail.messagingengine.com>

Hello,

I'm looking for feedback on an idea for passing parameters to another template...

In "Passing Parameters To Another Template" section of http://www.antlr.org/wiki/display/ST/Expressions it states:

"If you are using StringTemplate groups, then you have formal parameters and for those templates with a sole formal argument, you can pass just an expression instead of doing an assignment to the argument name. For example, if you do $bold(name)$ and bold has one formal argument called item, then item gets the value of name just as if you had said {$bold(item=name)$}."

Could this be extended to support multiple arguments, where just expressions can be passed for each of the formal arguments in a template?

Take the following for example:

  group sample;
  
  main(a, bitems, c) ::= "<bitems:item(a, it, c)>"
  
  item(a, b, c) ::= "a = <a>, b = <b>, c = <c>"

In the above example, the template application in main is passing (a, it, c) where 'it' is eventually assigned to 'b'. It fits well in the context of formal arguments and interfaces etc. It really makes sense in template application, for regular template includes I don't believe it makes so much sense, but it's basically OK. For me, it's clearer than the equivalent "<bitems:item(b=it, ...)>", which is how it works in the current StringTemplate implementation.

Does the idea seem reasonable, or does it violate the basic rules of StringTemplate? My reason for asking - I'm thinking about supporting this feature in a lightweight implementation of StringTemplate which I'm working on, but I don't want to completely mess up on the compatibility! If StringTemplate could support this one day then great, otherwise, I'll most probably drop the idea and just support assignment to the argument name, as in (b=it, ...).

Thanks,

Mark

Mark Wharton
+ 8190 9834 2559
contact at moonbase.com.au


From parrt at cs.usfca.edu  Sat Mar 15 18:33:05 2008
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sat, 15 Mar 2008 18:33:05 -0700
Subject: [stringtemplate-interest] Idea for passing parameters to
	another template...
In-Reply-To: <1205574278.4809.1242537017@webmail.messagingengine.com>
References: <1205574278.4809.1242537017@webmail.messagingengine.com>
Message-ID: <30F7EC5F-24F8-4B59-A1EA-A5304077D4BF@cs.usfca.edu>

Hi Mark,  seems ok, but I've kinda assumed attribute lists aren't  
ordered as they are named with <foo(a=x, b=y, ...)>.  No reason one  
couldn't design a system with ordered args.
Ter
On Mar 15, 2008, at 2:44 AM, Mark Wharton wrote:

> Hello,
>
> I'm looking for feedback on an idea for passing parameters to  
> another template...
>
> In "Passing Parameters To Another Template" section of http:// 
> www.antlr.org/wiki/display/ST/Expressions it states:
>
> "If you are using StringTemplate groups, then you have formal  
> parameters and for those templates with a sole formal argument, you  
> can pass just an expression instead of doing an assignment to the  
> argument name. For example, if you do $bold(name)$ and bold has one  
> formal argument called item, then item gets the value of name just  
> as if you had said {$bold(item=name)$}."
>
> Could this be extended to support multiple arguments, where just  
> expressions can be passed for each of the formal arguments in a  
> template?
>
> Take the following for example:
>
>   group sample;
>
>   main(a, bitems, c) ::= "<bitems:item(a, it, c)>"
>
>   item(a, b, c) ::= "a = <a>, b = <b>, c = <c>"
>
> In the above example, the template application in main is passing  
> (a, it, c) where 'it' is eventually assigned to 'b'. It fits well  
> in the context of formal arguments and interfaces etc. It really  
> makes sense in template application, for regular template includes  
> I don't believe it makes so much sense, but it's basically OK. For  
> me, it's clearer than the equivalent "<bitems:item(b=it, ...)>",  
> which is how it works in the current StringTemplate implementation.
>
> Does the idea seem reasonable, or does it violate the basic rules  
> of StringTemplate? My reason for asking - I'm thinking about  
> supporting this feature in a lightweight implementation of  
> StringTemplate which I'm working on, but I don't want to completely  
> mess up on the compatibility! If StringTemplate could support this  
> one day then great, otherwise, I'll most probably drop the idea and  
> just support assignment to the argument name, as in (b=it, ...).
>
> Thanks,
>
> Mark
>
> Mark Wharton
> + 8190 9834 2559
> contact at moonbase.com.au
>
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org:8080/mailman/listinfo/stringtemplate-interest


From msg.sriram at gmail.com  Sun Mar 16 09:54:51 2008
From: msg.sriram at gmail.com (Sriram Gopal)
Date: Sun, 16 Mar 2008 12:54:51 -0400
Subject: [stringtemplate-interest] Iterator in reverse order
In-Reply-To: <30F7EC5F-24F8-4B59-A1EA-A5304077D4BF@cs.usfca.edu>
References: <1205574278.4809.1242537017@webmail.messagingengine.com>
	<30F7EC5F-24F8-4B59-A1EA-A5304077D4BF@cs.usfca.edu>
Message-ID: <5EF490B9-9714-45A9-B62E-A652B9FE3DCC@gmail.com>

Please let me know if there is a way of obtaining the iteration value  
in reverse order (n to 0 instead of 0 to n).

-Sriram

From parrt at cs.usfca.edu  Sun Mar 16 19:16:03 2008
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sun, 16 Mar 2008 20:16:03 -0600
Subject: [stringtemplate-interest] Iterator in reverse order
In-Reply-To: <5EF490B9-9714-45A9-B62E-A652B9FE3DCC@gmail.com>
References: <1205574278.4809.1242537017@webmail.messagingengine.com>
	<30F7EC5F-24F8-4B59-A1EA-A5304077D4BF@cs.usfca.edu>
	<5EF490B9-9714-45A9-B62E-A652B9FE3DCC@gmail.com>
Message-ID: <2000A30D-DB49-4585-89D7-8EDE433B72C1@cs.usfca.edu>

Hi, no built in functionality for that...sorry.

you can do it with an attribute that is an object whose toString  
decrements a count and evaluates to that number.  it's "against the  
rules" but would work for now.

Ter
On Mar 16, 2008, at 10:54 AM, Sriram Gopal wrote:

> Please let me know if there is a way of obtaining the iteration value
> in reverse order (n to 0 instead of 0 to n).
>
> -Sriram
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org:8080/mailman/listinfo/stringtemplate-interest


From contact at moonbase.com.au  Sun Mar 16 23:23:49 2008
From: contact at moonbase.com.au (Mark Wharton)
Date: Mon, 17 Mar 2008 15:23:49 +0900
Subject: [stringtemplate-interest] Idea for passing parameters to
 another template...
In-Reply-To: <30F7EC5F-24F8-4B59-A1EA-A5304077D4BF@cs.usfca.edu>
References: <1205574278.4809.1242537017@webmail.messagingengine.com>
	<30F7EC5F-24F8-4B59-A1EA-A5304077D4BF@cs.usfca.edu>
Message-ID: <1205735029.19403.1242764049@webmail.messagingengine.com>

Thanks Terence,

OK, that makes sense. I suppose the order of arguments requirement could become difficult to manage at some point. I have implemented both to see how it goes, but will most probably end up sticking with the ST way for compatibility reasons.

Cheers,

Mark

On Sat, 15 Mar 2008 18:33:05 -0700, "Terence Parr" <parrt at cs.usfca.edu> said:
> Hi Mark,  seems ok, but I've kinda assumed attribute lists aren't  
> ordered as they are named with <foo(a=x, b=y, ...)>.  No reason one  
> couldn't design a system with ordered args.
> Ter
> On Mar 15, 2008, at 2:44 AM, Mark Wharton wrote:
> 
> > Hello,
> >
> > I'm looking for feedback on an idea for passing parameters to  
> > another template...
> >
> > In "Passing Parameters To Another Template" section of http:// 
> > www.antlr.org/wiki/display/ST/Expressions it states:
> >
> > "If you are using StringTemplate groups, then you have formal  
> > parameters and for those templates with a sole formal argument, you  
> > can pass just an expression instead of doing an assignment to the  
> > argument name. For example, if you do $bold(name)$ and bold has one  
> > formal argument called item, then item gets the value of name just  
> > as if you had said {$bold(item=name)$}."
> >
> > Could this be extended to support multiple arguments, where just  
> > expressions can be passed for each of the formal arguments in a  
> > template?
> >
> > Take the following for example:
> >
> >   group sample;
> >
> >   main(a, bitems, c) ::= "<bitems:item(a, it, c)>"
> >
> >   item(a, b, c) ::= "a = <a>, b = <b>, c = <c>"
> >
> > In the above example, the template application in main is passing  
> > (a, it, c) where 'it' is eventually assigned to 'b'. It fits well  
> > in the context of formal arguments and interfaces etc. It really  
> > makes sense in template application, for regular template includes  
> > I don't believe it makes so much sense, but it's basically OK. For  
> > me, it's clearer than the equivalent "<bitems:item(b=it, ...)>",  
> > which is how it works in the current StringTemplate implementation.
> >
> > Does the idea seem reasonable, or does it violate the basic rules  
> > of StringTemplate? My reason for asking - I'm thinking about  
> > supporting this feature in a lightweight implementation of  
> > StringTemplate which I'm working on, but I don't want to completely  
> > mess up on the compatibility! If StringTemplate could support this  
> > one day then great, otherwise, I'll most probably drop the idea and  
> > just support assignment to the argument name, as in (b=it, ...).
> >
> > Thanks,
> >
> > Mark
> >
> > Mark Wharton
> > + 8190 9834 2559
> > contact at moonbase.com.au
> >
> > _______________________________________________
> > stringtemplate-interest mailing list
> > stringtemplate-interest at antlr.org
> > http://www.antlr.org:8080/mailman/listinfo/stringtemplate-interest
> 
Mark Wharton
+ 8190 9834 2559
contact at moonbase.com.au


From contact at moonbase.com.au  Sun Mar 16 23:39:57 2008
From: contact at moonbase.com.au (Mark Wharton)
Date: Mon, 17 Mar 2008 15:39:57 +0900
Subject: [stringtemplate-interest] difficulty using format and null options
	together
Message-ID: <1205735997.21328.1242764925@webmail.messagingengine.com>

Hello,

I'm having difficulty using format and null options together in generating an SQL statement with quoted values and NULL keyword. Here's a sample:

	String ts = "$values; format=\"quote\", null=\"NULL\", separator=\", \"$";
	StringTemplate t = new StringTemplate(ts);
	t.registerRenderer(String.class, new ValueRenderer());
	List values = new ArrayList();
	values.add("x");
	values.add("y");
	values.add(null);
	values.add("z");
	values.add(null);
	t.setAttribute("values", values);
	System.out.println("t: "+t.toString());

Actual Result...

	t: "x", "y", "NULL", "z", "NULL"

Desired Result...

	t: "x", "y", NULL, "z", NULL

It looks like the null option is applied before the format option and consequently the NULL becomes quoted because it is a string when the renderer processes it. I don't see how it is possible to have non quoted NULL in the output for null values in the list when the format option is also used in the same expression.

Thanks,

Mark

Mark Wharton
+ 8190 9834 2559
contact at moonbase.com.au


From parrt at cs.usfca.edu  Mon Mar 17 07:46:06 2008
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon, 17 Mar 2008 08:46:06 -0600
Subject: [stringtemplate-interest] difficulty using format and null
	options together
In-Reply-To: <1205735997.21328.1242764925@webmail.messagingengine.com>
References: <1205735997.21328.1242764925@webmail.messagingengine.com>
Message-ID: <F2E64CD6-C5CA-4715-80A2-C34B90D8D4EA@cs.usfca.edu>


On Mar 17, 2008, at 12:39 AM, Mark Wharton wrote:

> Hello,
>
> I'm having difficulty using format and null options together in  
> generating an SQL statement with quoted values and NULL keyword.  
> Here's a sample:
>
> 	String ts = "$values; format=\"quote\", null=\"NULL\", separator= 
> \", \"$";
> 	StringTemplate t = new StringTemplate(ts);
> 	t.registerRenderer(String.class, new ValueRenderer());
> 	List values = new ArrayList();
> 	values.add("x");
> 	values.add("y");
> 	values.add(null);
> 	values.add("z");
> 	values.add(null);
> 	t.setAttribute("values", values);
> 	System.out.println("t: "+t.toString());
>
> Actual Result...
>
> 	t: "x", "y", "NULL", "z", "NULL"
>
> Desired Result...
>
> 	t: "x", "y", NULL, "z", NULL
>
> It looks like the null option is applied before the format option  
> and consequently the NULL becomes quoted because it is a string  
> when the renderer processes it. I don't see how it is possible to  
> have non quoted NULL in the output for null values in the list when  
> the format option is also used in the same expression.

Hi Mark.  Hmm...good question.  Should null option be considered  
totally apart from others?  Seems like null is in fact kind of like  
an exception thing...but, what if it's a template reference that is  
complicated and you need to run the format thing on it first?  i can  
see arguments for both.  Just adjust your formatter to avoid doing it  
for NULL for now.

Ter

From jjsnyders at rcn.com  Tue Mar 18 15:16:55 2008
From: jjsnyders at rcn.com (John Snyders)
Date: Tue, 18 Mar 2008 18:16:55 -0400
Subject: [stringtemplate-interest] Iterator in reverse order
In-Reply-To: <5EF490B9-9714-45A9-B62E-A652B9FE3DCC@gmail.com>
References: <1205574278.4809.1242537017@webmail.messagingengine.com>	<30F7EC5F-24F8-4B59-A1EA-A5304077D4BF@cs.usfca.edu>
	<5EF490B9-9714-45A9-B62E-A652B9FE3DCC@gmail.com>
Message-ID: <47E03F57.2070406@rcn.com>

I think I would wrap the List in a custom List that gives out a reverse 
iterator when the iterator method is called.
Pass the wrapper to ST and it will use it like a normal list.

You might take a look at ReverseListIterator from commons collections
http://commons.apache.org/collections/api-release/index.html
-John

Sriram Gopal wrote:
> Please let me know if there is a way of obtaining the iteration value  
> in reverse order (n to 0 instead of 0 to n).
>
> -Sriram
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org:8080/mailman/listinfo/stringtemplate-interest
>
>   

From terrence.x.brannon at jpmchase.com  Wed Mar 19 12:01:32 2008
From: terrence.x.brannon at jpmchase.com (terrence.x.brannon at jpmchase.com)
Date: Wed, 19 Mar 2008 15:01:32 -0400
Subject: [stringtemplate-interest] Push-style templating overview
Message-ID: <OF87FDA21B.C4DE0C15-ON85257411.00676381-85257411.00682894@jpmchase.com>

Hello, this email is quick pointer to the wide world of push-style 
templating:

* I wrote up a list of all the Perl, Python and Java push-style systems I 
know of here:
http://perlmonks.org/?node_id=674225

* A very recent perl.com article demonstrates push-style templating. The 
author calls it "reverse callback templating":
http://www.perl.com/pub/a/2008/03/14/reverse-callback-templating.html

* My own push-style product for Perl is HTML::Seamstress:
http://search.cpan.org/~tbone/HTML-Seamstress-5.0b/lib/HTML/Seamstress.pod

--
Terrence Brannon - SID W049945
1111 Polaris Pkwy, OH1-1141, Columbus, OH 43240 
818-359-0893 (cell)
614-213-3426 (fax)
614-213-2475 (office)




-----------------------------------------
This communication is for informational purposes only. It is not
intended as an offer or solicitation for the purchase or sale of
any financial instrument or as an official confirmation of any
transaction. All market prices, data and other information are not
warranted as to completeness or accuracy and are subject to change
without notice. Any comments or statements made herein do not
necessarily reflect those of JPMorgan Chase & Co., its subsidiaries
and affiliates.

This transmission may contain information that is privileged,
confidential, legally privileged, and/or exempt from disclosure
under applicable law. If you are not the intended recipient, you
are hereby notified that any disclosure, copying, distribution, or
use of the information contained herein (including any reliance
thereon) is STRICTLY PROHIBITED. Although this transmission and any
attachments are believed to be free of any virus or other defect
that might affect any computer system into which it is received and
opened, it is the responsibility of the recipient to ensure that it
is virus free and no responsibility is accepted by JPMorgan Chase &
Co., its subsidiaries and affiliates, as applicable, for any loss
or damage arising in any way from its use. If you received this
transmission in error, please immediately contact the sender and
destroy the material in its entirety, whether in electronic or hard
copy format. Thank you.

Please refer to http://www.jpmorgan.com/pages/disclosures for
disclosures relating to UK legal entities.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org:8080/pipermail/stringtemplate-interest/attachments/20080319/cfd2daca/attachment.html 

From jjsnyders at rcn.com  Thu Mar 20 18:55:29 2008
From: jjsnyders at rcn.com (John Snyders)
Date: Thu, 20 Mar 2008 21:55:29 -0400
Subject: [stringtemplate-interest] difficulty using format and null
 options together
In-Reply-To: <1205735997.21328.1242764925@webmail.messagingengine.com>
References: <1205735997.21328.1242764925@webmail.messagingengine.com>
Message-ID: <47E31591.2060807@rcn.com>

When you look at the implementation of all the options (format, null 
etc.) in ASTExpr.java it seems very natural to handle the null option 
first before format. The code checks for a null value a few steps before 
it has a string to render.
It is documented that the null option is applied first then format then 
separator.

In the case where the format option is transforming characters like 
changing case I think it makes sense to apply null first. I can see that 
in your case you clearly don't want to quote the NULL. The trouble is 
that you need some out of band value to pass to format. In general you 
don't have one and null is really your only 100% safe option. If you 
change the format renderer to check for the string NULL and don't quote 
it then there is a remote but possible chance that one of the non-null 
strings could have the value "NULL" in which case it would not get 
quoted when it should.

Changing ASTExpr so that it passes null to the format renderer could be 
tricky and in addition I don't think that existing renderers ever expect 
to be called with null.

I wonder if the following would work.
When the null option is used the string value is wrapped in a class such 
as NullDefault. This simple class acts much like a string and toString 
just renders the wrapped string. So because of the way ST default 
rendering works it should just call toString and get the intended 
default value. When the NullDefault object is passed to the format 
renderer it will be able to distinguish it from a normal string. This 
could still have some backward compatibility problems depending on if 
people wrote robust renderers that called toString on objects they 
didn't recognize.

Terence, what do you think? Is this worth doing or will it cause problems?
-John

Mark Wharton wrote:
> Hello,
>
> I'm having difficulty using format and null options together in generating an SQL statement with quoted values and NULL keyword. Here's a sample:
>
> 	String ts = "$values; format=\"quote\", null=\"NULL\", separator=\", \"$";
> 	StringTemplate t = new StringTemplate(ts);
> 	t.registerRenderer(String.class, new ValueRenderer());
> 	List values = new ArrayList();
> 	values.add("x");
> 	values.add("y");
> 	values.add(null);
> 	values.add("z");
> 	values.add(null);
> 	t.setAttribute("values", values);
> 	System.out.println("t: "+t.toString());
>
> Actual Result...
>
> 	t: "x", "y", "NULL", "z", "NULL"
>
> Desired Result...
>
> 	t: "x", "y", NULL, "z", NULL
>
> It looks like the null option is applied before the format option and consequently the NULL becomes quoted because it is a string when the renderer processes it. I don't see how it is possible to have non quoted NULL in the output for null values in the list when the format option is also used in the same expression.
>
> Thanks,
>
> Mark
>
> Mark Wharton
> + 8190 9834 2559
> contact at moonbase.com.au
>
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org:8080/mailman/listinfo/stringtemplate-interest
>
>   

From jjsnyders at rcn.com  Thu Mar 20 19:12:06 2008
From: jjsnyders at rcn.com (John Snyders)
Date: Thu, 20 Mar 2008 22:12:06 -0400
Subject: [stringtemplate-interest] Idea for passing parameters
 to	another template...
In-Reply-To: <30F7EC5F-24F8-4B59-A1EA-A5304077D4BF@cs.usfca.edu>
References: <1205574278.4809.1242537017@webmail.messagingengine.com>
	<30F7EC5F-24F8-4B59-A1EA-A5304077D4BF@cs.usfca.edu>
Message-ID: <47E31976.507@rcn.com>

An HTML attachment was scrubbed...
URL: http://www.antlr.org:8080/pipermail/stringtemplate-interest/attachments/20080320/09e5b308/attachment.html 

From jjsnyders at rcn.com  Thu Mar 20 19:16:10 2008
From: jjsnyders at rcn.com (John Snyders)
Date: Thu, 20 Mar 2008 22:16:10 -0400
Subject: [stringtemplate-interest] HTML escaping
In-Reply-To: <200801182346.21643.roma@qwertty.com>
References: <200801182346.21643.roma@qwertty.com>
Message-ID: <47E31A6A.605@rcn.com>

This may be of interest to you
http://hardlikesoftware.com/weblog/2008/02/15/script-injection-and-stringtemplate/
Just some thoughts. The current best answer is what Terence already 
said; use a format option/renderer.
-John

Roman Odaisky wrote:
> Greetings,
>
> I?m looking for a template engine for a future Web project. I really like the 
> strict philosophy of StringTemplate, but could you please explain one thing:
>
> The manual says one should use renderers for escaping. That makes sense for 
> applications that generate SQL, or C, but how does one use ST for JS embedded 
> in HTML? <b>hello $user$</b> and alert("hello $user$") need different 
> escaping, and the possible presence of <![CDATA[ complicates things further.
>
> WBR, Roman.
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org:8080/mailman/listinfo/stringtemplate-interest
>   

From chris77550 at gmail.com  Fri Mar 21 01:50:16 2008
From: chris77550 at gmail.com (Christopher Brown)
Date: Fri, 21 Mar 2008 09:50:16 +0100
Subject: [stringtemplate-interest] HTML escaping
In-Reply-To: <47E31A6A.605@rcn.com>
References: <200801182346.21643.roma@qwertty.com> <47E31A6A.605@rcn.com>
Message-ID: <85c0f52a0803210150l11406d57q6d1a2031eb5ddda1@mail.gmail.com>

I'd just like to take this opportunity to thank those involved in
releasing the ST#3.1 beta, which now has the "format" option and which
is useful for exactly this sort of thing (avoiding script injection).

Incidentally, on the subject of registering formatters (on the C#
version), I can't register a formatter by interface, which is a shame.
 I have three classes that implement "ITranslated", so I had to write
this :

// can't register attribute renderer for interfaces :-(
TranslationRenderer translationRenderer = new
TranslationRenderer(_engine, _localeProvider);
template.RegisterAttributeRenderer(typeof(LmsPath), translationRenderer);
template.RegisterAttributeRenderer(typeof(LmsModule), translationRenderer);
template.RegisterAttributeRenderer(typeof(Discipline), translationRenderer);

...instead of doing it just once, for "typeof(ITranslated)".  I'm
guessing the reflection code is comparing the type and not taking into
account implemented interfaces.  Is there any chance this might be
improved in future versions?

Thanks,
Christopher



On 21/03/2008, John Snyders <jjsnyders at rcn.com> wrote:
> This may be of interest to you
>  http://hardlikesoftware.com/weblog/2008/02/15/script-injection-and-stringtemplate/
>  Just some thoughts. The current best answer is what Terence already
>  said; use a format option/renderer.
>  -John
>
>  Roman Odaisky wrote:
>  > Greetings,
>  >
>  > I'm looking for a template engine for a future Web project. I really like the
>  > strict philosophy of StringTemplate, but could you please explain one thing:
>  >
>  > The manual says one should use renderers for escaping. That makes sense for
>  > applications that generate SQL, or C, but how does one use ST for JS embedded
>  > in HTML? <b>hello $user$</b> and alert("hello $user$") need different
>  > escaping, and the possible presence of <![CDATA[ complicates things further.
>  >
>  > WBR, Roman.
>  > _______________________________________________
>  > stringtemplate-interest mailing list
>  > stringtemplate-interest at antlr.org
>  > http://www.antlr.org:8080/mailman/listinfo/stringtemplate-interest
>  >
>  _______________________________________________
>  stringtemplate-interest mailing list
>  stringtemplate-interest at antlr.org
>  http://www.antlr.org:8080/mailman/listinfo/stringtemplate-interest
>

From carfield at carfield.com.hk  Sun Mar 23 10:57:49 2008
From: carfield at carfield.com.hk (Carfield Yim)
Date: Mon, 24 Mar 2008 01:57:49 +0800
Subject: [stringtemplate-interest] Why velocity is not MVC?
Message-ID: <47E69A1D.1090607@carfield.com.hk>

Hi, I've read the paper about string-template, but it still look like 
velocity to me. However the paper saying that velocity is similar to 
JSP... Anyone can tell me more about why velocity is not MVC?

From Lawrence.Eng at spansion.com  Mon Mar 24 20:03:08 2008
From: Lawrence.Eng at spansion.com (Eng, Lawrence)
Date: Mon, 24 Mar 2008 22:03:08 -0500
Subject: [stringtemplate-interest] ST example doesn't work with ANTLR 3
Message-ID: <2EAF61A7E343F64DA3800C7EE0D644AC01A3DB2D@USAUSEXMBPF1.spansion.com>

Hi,

 

The ST example given in
http://www.codegeneration.net/tiki-read_article.php?articleId=77 doesn't
seem to work with ANTLR 3.  Is there simple reason why? This is the only
existing pure STG example and I'd like to use it with ANTLR 3, not 2.

 

Thanks very much!

Larry

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org:8080/pipermail/stringtemplate-interest/attachments/20080324/5ad5587c/attachment.html 

From parrt at cs.usfca.edu  Mon Mar 24 20:58:03 2008
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon, 24 Mar 2008 20:58:03 -0700
Subject: [stringtemplate-interest] ST example doesn't work with ANTLR 3
In-Reply-To: <2EAF61A7E343F64DA3800C7EE0D644AC01A3DB2D@USAUSEXMBPF1.spansion.com>
References: <2EAF61A7E343F64DA3800C7EE0D644AC01A3DB2D@USAUSEXMBPF1.spansion.com>
Message-ID: <5C6D375E-D23D-4655-ACF2-14B6B89F234C@cs.usfca.edu>

hi. plenty of examples in ANTLR book...those articles were written  
prior to v3.
Ter
On Mar 24, 2008, at 8:03 PM, Eng, Lawrence wrote:

> Hi,
>
>
>
> The ST example given in http://www.codegeneration.net/tiki- 
> read_article.php?articleId=77 doesn't seem to work with ANTLR 3.   
> Is there simple reason why? This is the only existing pure STG  
> example and I'd like to use it with ANTLR 3, not 2.
>
>
>
> Thanks very much!
>
> Larry
>
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org:8080/mailman/listinfo/stringtemplate-interest

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org:8080/pipermail/stringtemplate-interest/attachments/20080324/b7571188/attachment.html 

From harry.karadimas at hmn.aphp.fr  Tue Mar 25 04:05:20 2008
From: harry.karadimas at hmn.aphp.fr (Harry)
Date: Tue, 25 Mar 2008 12:05:20 +0100
Subject: [stringtemplate-interest] bug in
	org.antlr.stringtemplate.StringTemplate.removeAttribute(String)
Message-ID: <0JYA002K79GWL010@mta-2.aphp.fr>

Hi,
 
I spotted a little bug in the method

org.antlr.stringtemplate.StringTemplate.removeAttribute(String)

when "attributes" is null, a NullPointerException is called. In other places of
the code
a check is made to verify if "attributes" is null or not. In my opinion, when
"attributes"
is null, nothing should occur, so I would write :
 
  if (attributes != null) attributes.remove(name);

instead of
 
  attributes.remove(name);

Best regards,
 
                                                       Harry Karadimas
______________________________________________________________________
Dr Harry Karadimas  Medecin Ingenieur
resp. Recherche et Developpement, Administration Wintel
Departement d'Information Hospitalier (DIH)
C.H.U. Albert Chenevier - Henri Mondor 
51, av. du Marechal de Lattre de Tassigny               94010  CRETEIL
tel : (00 33 1) 49 81 21 79                fax : (00 33 1) 49 81 27 08
secr.: (00 33 1) 49 81 23 82         m.el.:harry.karadimas at hmn.aphp.fr



From parrt at cs.usfca.edu  Tue Mar 25 15:14:50 2008
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue, 25 Mar 2008 15:14:50 -0700
Subject: [stringtemplate-interest] bug in
	org.antlr.stringtemplate.StringTemplate.removeAttribute(String)
In-Reply-To: <0JYA002K79GWL010@mta-2.aphp.fr>
References: <0JYA002K79GWL010@mta-2.aphp.fr>
Message-ID: <6D8C4E13-8D67-4CCB-96F7-2D85513DFD12@cs.usfca.edu>

thanks...added bug:

http://www.antlr.org:8888/browse/ST-37

Ter
On Mar 25, 2008, at 4:05 AM, Harry wrote:
> Hi,
>
> I spotted a little bug in the method
>
> org.antlr.stringtemplate.StringTemplate.removeAttribute(String)
>
> when "attributes" is null, a NullPointerException is called. In  
> other places of
> the code
> a check is made to verify if "attributes" is null or not. In my  
> opinion, when
> "attributes"
> is null, nothing should occur, so I would write :
>
>  if (attributes != null) attributes.remove(name);
>
> instead of
>
>  attributes.remove(name);
>
> Best regards,
>
>                                                       Harry Karadimas
> ______________________________________________________________________
> Dr Harry Karadimas  Medecin Ingenieur
> resp. Recherche et Developpement, Administration Wintel
> Departement d'Information Hospitalier (DIH)
> C.H.U. Albert Chenevier - Henri Mondor
> 51, av. du Marechal de Lattre de Tassigny               94010  CRETEIL
> tel : (00 33 1) 49 81 21 79                fax : (00 33 1) 49 81 27 08
> secr.: (00 33 1) 49 81 23 82         m.el.:harry.karadimas at hmn.aphp.fr
>
>
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org:8080/mailman/listinfo/stringtemplate-interest


From parrt at cs.usfca.edu  Tue Mar 25 16:56:41 2008
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue, 25 Mar 2008 16:56:41 -0700
Subject: [stringtemplate-interest] difficulty using format and null
	options together
In-Reply-To: <47E31591.2060807@rcn.com>
References: <1205735997.21328.1242764925@webmail.messagingengine.com>
	<47E31591.2060807@rcn.com>
Message-ID: <82780F62-59AD-4348-A744-0525768C8090@cs.usfca.edu>


On Mar 20, 2008, at 6:55 PM, John Snyders wrote:
> I wonder if the following would work.
> When the null option is used the string value is wrapped in a class  
> such
> as NullDefault. This simple class acts much like a string and toString
> just renders the wrapped string. So because of the way ST default
> rendering works it should just call toString and get the intended
> default value. When the NullDefault object is passed to the format
> renderer it will be able to distinguish it from a normal string. This
> could still have some backward compatibility problems depending on if
> people wrote robust renderers that called toString on objects they
> didn't recognize.
>
> Terence, what do you think? Is this worth doing or will it cause  
> problems?

very interesting John.  Your thing that I'm wondering about is the  
fact that the null argument can actually be a template not just a  
string. In his case he could use maybe null={NULL} instead of  
null="NULL" and then distinguish string from the template...or if you  
is doing that check, why can't he just check for "NULL"?

Ter

From parrt at cs.usfca.edu  Tue Mar 25 16:57:19 2008
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue, 25 Mar 2008 16:57:19 -0700
Subject: [stringtemplate-interest] Idea for passing parameters
	to	another template...
In-Reply-To: <47E31976.507@rcn.com>
References: <1205574278.4809.1242537017@webmail.messagingengine.com>
	<30F7EC5F-24F8-4B59-A1EA-A5304077D4BF@cs.usfca.edu>
	<47E31976.507@rcn.com>
Message-ID: <E15E4B52-0964-49F7-8B70-981F440FF794@cs.usfca.edu>


On Mar 20, 2008, at 7:12 PM, John Snyders wrote:

> One problem with having ordered parameters rather than named  
> parameters is that it makes the pass through functionality less  
> useful.

Ah.  correct. had not thought of that.

Ter

From parrt at cs.usfca.edu  Tue Mar 25 16:58:21 2008
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue, 25 Mar 2008 16:58:21 -0700
Subject: [stringtemplate-interest] HTML escaping
In-Reply-To: <85c0f52a0803210150l11406d57q6d1a2031eb5ddda1@mail.gmail.com>
References: <200801182346.21643.roma@qwertty.com> <47E31A6A.605@rcn.com>
	<85c0f52a0803210150l11406d57q6d1a2031eb5ddda1@mail.gmail.com>
Message-ID: <16AF9D19-BAC3-44F9-83BD-CB15496FE292@cs.usfca.edu>


On Mar 21, 2008, at 1:50 AM, Christopher Brown wrote:
> I'd just like to take this opportunity to thank those involved in
> releasing the ST#3.1 beta, which now has the "format" option and which
> is useful for exactly this sort of thing (avoiding script injection).

Kunle and Michael be praised!

> Incidentally, on the subject of registering formatters (on the C#
> version), I can't register a formatter by interface, which is a shame.
> I have three classes that implement "ITranslated", so I had to write
> this :
>
> // can't register attribute renderer for interfaces :-(
> TranslationRenderer translationRenderer = new
> TranslationRenderer(_engine, _localeProvider);
> template.RegisterAttributeRenderer(typeof(LmsPath),  
> translationRenderer);
> template.RegisterAttributeRenderer(typeof(LmsModule),  
> translationRenderer);
> template.RegisterAttributeRenderer(typeof(Discipline),  
> translationRenderer);
>
> ...instead of doing it just once, for "typeof(ITranslated)".  I'm
> guessing the reflection code is comparing the type and not taking into
> account implemented interfaces.  Is there any chance this might be
> improved in future versions?

Those guys are incredibly busy and don't have much time.  I would not  
hold my breath.

Ter

From parrt at cs.usfca.edu  Tue Mar 25 16:59:38 2008
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue, 25 Mar 2008 16:59:38 -0700
Subject: [stringtemplate-interest] Why velocity is not MVC?
In-Reply-To: <47E69A1D.1090607@carfield.com.hk>
References: <47E69A1D.1090607@carfield.com.hk>
Message-ID: <E7F53F1F-B8BB-452A-A12B-B47161AA8358@cs.usfca.edu>


On Mar 23, 2008, at 10:57 AM, Carfield Yim wrote:
> Hi, I've read the paper about string-template, but it still look like
> velocity to me.

  Velocity can set a variable and test the value of variables and call  
an arbitrary function on their model. ST can do none of those.

> However the paper saying that velocity is similar to
> JSP... Anyone can tell me more about why velocity is not MVC?

Velocity is JSP with a different embedded language. Well, as far as  
separation is concerned.  Velocity has all sorts of things around it  
that make it very useful.

Ter


From jjsnyders at rcn.com  Wed Mar 26 17:24:33 2008
From: jjsnyders at rcn.com (John Snyders)
Date: Wed, 26 Mar 2008 20:24:33 -0400
Subject: [stringtemplate-interest] difficulty using format and null
 options together
In-Reply-To: <82780F62-59AD-4348-A744-0525768C8090@cs.usfca.edu>
References: <1205735997.21328.1242764925@webmail.messagingengine.com>
	<47E31591.2060807@rcn.com>
	<82780F62-59AD-4348-A744-0525768C8090@cs.usfca.edu>
Message-ID: <47EAE941.7010902@rcn.com>

Terence Parr wrote:
>
> On Mar 20, 2008, at 6:55 PM, John Snyders wrote:
>> I wonder if the following would work.
>> When the null option is used the string value is wrapped in a class such
>> as NullDefault. This simple class acts much like a string and toString
>> just renders the wrapped string. So because of the way ST default
>> rendering works it should just call toString and get the intended
>> default value. When the NullDefault object is passed to the format
>> renderer it will be able to distinguish it from a normal string. This
>> could still have some backward compatibility problems depending on if
>> people wrote robust renderers that called toString on objects they
>> didn't recognize.
>>
>> Terence, what do you think? Is this worth doing or will it cause 
>> problems?
>
> very interesting John.  Your thing that I'm wondering about is the 
> fact that the null argument can actually be a template not just a 
> string. In his case he could use maybe null={NULL} instead of 
> null="NULL" and then distinguish string from the template...or if you 
> is doing that check, why can't he just check for "NULL"?
>
> Ter
>
The trouble with the null argument being a template is that it is 
converted to a string first. In other words it is evaluated first. So 
the renderer couldn't check its type. You can check for the special 
string "NULL" but in doing so you exclude" NULL" from being a legal 
value of any other attribute or template result that is passed to the 
renderer. You could pick any other string to be the "out of band" value. 
It requires that your application has some reasonable out of band value 
that you can use. Not all applications will have that. In any event null 
makes sense as a reasonable out of band value for any type. That is why 
it is attractive to use it here.

-John


From keepitsimple12 at gmail.com  Thu Mar 27 12:58:23 2008
From: keepitsimple12 at gmail.com (Zemian Deng)
Date: Thu, 27 Mar 2008 15:58:23 -0400
Subject: [stringtemplate-interest] latest release for maven2 repo?
Message-ID: <caeee4f40803271258y5937c307p96c5ef474f41aad2@mail.gmail.com>

Hi,
Is there a plan on updating
http://repo1.maven.org/maven2/antlr/stringtemplate with latest release?

Thanks,
-Zemian Deng
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org:8080/pipermail/stringtemplate-interest/attachments/20080327/07d1a892/attachment.html 

From parrt at cs.usfca.edu  Fri Mar 28 16:30:39 2008
From: parrt at cs.usfca.edu (Terence Parr)
Date: Fri, 28 Mar 2008 16:30:39 -0700
Subject: [stringtemplate-interest] difficulty using format and null
	options together
In-Reply-To: <47EAE941.7010902@rcn.com>
References: <1205735997.21328.1242764925@webmail.messagingengine.com>
	<47E31591.2060807@rcn.com>
	<82780F62-59AD-4348-A744-0525768C8090@cs.usfca.edu>
	<47EAE941.7010902@rcn.com>
Message-ID: <E7DCB28E-D8E6-4AB1-8436-505032B80644@cs.usfca.edu>


On Mar 26, 2008, at 5:24 PM, John Snyders wrote:
> Terence Parr wrote:
>>
>> On Mar 20, 2008, at 6:55 PM, John Snyders wrote:
>>> I wonder if the following would work.
>>> When the null option is used the string value is wrapped in a  
>>> class such
>>> as NullDefault. This simple class acts much like a string and  
>>> toString
>>> just renders the wrapped string. So because of the way ST default
>>> rendering works it should just call toString and get the intended
>>> default value. When the NullDefault object is passed to the format
>>> renderer it will be able to distinguish it from a normal string.  
>>> This
>>> could still have some backward compatibility problems depending on  
>>> if
>>> people wrote robust renderers that called toString on objects they
>>> didn't recognize.
>>>
>>> Terence, what do you think? Is this worth doing or will it cause  
>>> problems?
>>
>> very interesting John.  Your thing that I'm wondering about is the  
>> fact that the null argument can actually be a template not just a  
>> string. In his case he could use maybe null={NULL} instead of  
>> null="NULL" and then distinguish string from the template...or if  
>> you is doing that check, why can't he just check for "NULL"?
>>
>> Ter
>>
> The trouble with the null argument being a template is that it is  
> converted to a string first.

really!  ooops...that ain't no good.

> In other words it is evaluated first. So the renderer couldn't check  
> its type. You can check for the special string "NULL" but in doing  
> so you exclude" NULL" from being a legal value of any other  
> attribute or template result that is passed to the renderer. You  
> could pick any other string to be the "out of band" value. It  
> requires that your application has some reasonable out of band value  
> that you can use. Not all applications will have that. In any event  
> null makes sense as a reasonable out of band value for any type.  
> That is why it is attractive to use it here.

I'm addding a bug to look at this.

http://www.antlr.org:8888/browse/ST-38

Ter

From parrt at cs.usfca.edu  Fri Mar 28 16:30:54 2008
From: parrt at cs.usfca.edu (Terence Parr)
Date: Fri, 28 Mar 2008 16:30:54 -0700
Subject: [stringtemplate-interest] latest release for maven2 repo?
In-Reply-To: <caeee4f40803271258y5937c307p96c5ef474f41aad2@mail.gmail.com>
References: <caeee4f40803271258y5937c307p96c5ef474f41aad2@mail.gmail.com>
Message-ID: <B78239F3-3189-4691-A74E-807A471876C8@cs.usfca.edu>

Hi Zemian, I'm not sure who added that. I'm not one with maven so I  
can't help.
ter
On Mar 27, 2008, at 12:58 PM, Zemian Deng wrote:

> Hi,
> Is there a plan on updating http://repo1.maven.org/maven2/antlr/stringtemplate 
>  with latest release?
>
> Thanks,
> -Zemian Deng
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org:8080/mailman/listinfo/stringtemplate-interest

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org:8080/pipermail/stringtemplate-interest/attachments/20080328/4ce73f8e/attachment.html 

From zen at freedbms.net  Sat Mar 29 05:43:30 2008
From: zen at freedbms.net (Zenaan Harkness)
Date: Sat, 29 Mar 2008 23:43:30 +1100
Subject: [stringtemplate-interest] template existence testing
Message-ID: <20080329124330.GN8764@freedbms.net>

Hi, I've come across a feature which I would find useful:

It might sound odd, but I would like to be able to, within an <if(...)>
block, test for the existence of a specific template name.

I need to provide template-level specialization of getter/setter method
bodies, and I'd like the template name to be tested for automatically in
the if block, so that a default method body is used normally, and the
specialization is used otherwise.

It is possible to put a boolean in the Model, but that would violate my
MVC: specializations depend purely on the specific template being used.
The model simply should not know or care whether there is an attribute
method body specialization - it is a view specific thing.

The st code looks like this (attribute "a" is the property/ model
attribute which I am rendering in the template as a getter method):

<if( st_exists("att_"+a.attributeName) )>
   // we have a specialization for this method, include
   // attribute-specific specialization code:
   <("att_"+a.attributeName)()>
   //alternatively:
   <({att_<a.attributeName>})()>
<else>
   return a.attributeName;
<endif>

Barring the if conditional of course - st_exists("att_"+a.attributeName).

Any ideas about how much effort this might be to implement, and if it's
sensible or not?

Thanks in advance
Zenaan

-- 
Homepage: www.SoulSound.net -- Free Australia: www.UPMART.org
Please respect the confidentiality of this email as sensibly warranted.

From zen at freedbms.net  Sat Mar 29 06:01:43 2008
From: zen at freedbms.net (Zenaan Harkness)
Date: Sun, 30 Mar 2008 00:01:43 +1100
Subject: [stringtemplate-interest] template existence testing
In-Reply-To: <20080329124330.GN8764@freedbms.net>
References: <20080329124330.GN8764@freedbms.net>
Message-ID: <20080329130143.GP8764@freedbms.net>

On Sat, Mar 29, 2008 at 11:43:30PM +1100, Zenaan Harkness wrote:
> It might sound odd, but I would like to be able to, within an <if(...)>
> block, test for the existence of a specific template name.

I've been thinking about the performance of such a feature.

Each time such a test is made (if it existed), the "polymorphic" lookup
would occur, starting at the lowest template group, and this would
happen for each method body (those which could be specialized) of each
attribute being rendered, for each output view being rendered (eg, there
might be a bean, a struct, and more).

For a large model, this would be lots of unnecessary redundancy
multiplying into a lot of run time.

My runs are offline, so that would be OK for me, but nevertheless, a
more efficient mechanism might be useful, such as pre-scanning all the
template names when loaded by my template driver, and doing a
pre-rendering model/attribute cross-reference, and applying an
appropriate boolean switch for each custom template.
This process can be hidden in the template driver, so normal user code,
and the templates themselves, can forget it even exists.

I'll hack this for now...

-- 
Homepage: www.SoulSound.net -- Free Australia: www.UPMART.org
Please respect the confidentiality of this email as sensibly warranted.

From parrt at cs.usfca.edu  Sat Mar 29 13:07:25 2008
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sat, 29 Mar 2008 13:07:25 -0700
Subject: [stringtemplate-interest] template existence testing
In-Reply-To: <20080329124330.GN8764@freedbms.net>
References: <20080329124330.GN8764@freedbms.net>
Message-ID: <4E37D0DE-60EB-48CA-BD56-5533CDB1602E@cs.usfca.edu>


On Mar 29, 2008, at 5:43 AM, Zenaan Harkness wrote:
> Hi, I've come across a feature which I would find useful:
>
> It might sound odd, but I would like to be able to, within an  
> <if(...)>
> block, test for the existence of a specific template name.
>
> I need to provide template-level specialization of getter/setter  
> method
> bodies, and I'd like the template name to be tested for  
> automatically in
> the if block, so that a default method body is used normally, and the
> specialization is used otherwise.

Wouldn't normal group inheritance handle this case?

Ter

From zen at freedbms.net  Sun Mar 30 00:33:08 2008
From: zen at freedbms.net (Zenaan Harkness)
Date: Sun, 30 Mar 2008 18:33:08 +1100
Subject: [stringtemplate-interest] template existence testing
In-Reply-To: <4E37D0DE-60EB-48CA-BD56-5533CDB1602E@cs.usfca.edu>
References: <20080329124330.GN8764@freedbms.net>
	<4E37D0DE-60EB-48CA-BD56-5533CDB1602E@cs.usfca.edu>
Message-ID: <20080330073308.GA25757@freedbms.net>

On Sat, Mar 29, 2008 at 01:07:25PM -0700, Terence Parr wrote:
>
> On Mar 29, 2008, at 5:43 AM, Zenaan Harkness wrote:
>> Hi, I've come across a feature which I would find useful:
>>
>> It might sound odd, but I would like to be able to, within an <if(...)>
>> block, test for the existence of a specific template name.
>>
>> I need to provide template-level specialization of getter/setter method
>> bodies, and I'd like the template name to be tested for automatically in
>> the if block, so that a default method body is used normally, and the
>> specialization is used otherwise.
>
> Wouldn't normal group inheritance handle this case?

For inheritance to work, I would have to have an empty get-, set- and
misc- template in a parent group, for _every_ conceivable attribute that
my model might want to model, which is simply silly.

The attributes of a particular model, a farm let's say, might be
land-size, water-flow, crops, etc, whereas a model of a music album
would have artist, recording company and track attributes. My views
cannot possibly guess the attributes desired by my models (and the
models are totally separate).

So the thing is, I want, on occasion, to have a specialization of say, a
Java Bean view template, and I have in this actual example, attributes
of att-version-major, att-version-minor, and att-version. Now
att-version is in my current implementation, to be rendered as a
concatenation of the major and minor version strings, so I want, instead
of a normal "return _attVersion;" getter for att-version, a
specialization (in a one-shot sub-template), where att-version's getter
body is specialized into "return _attVersionMajor + _attVersionMinor;".

Since there are three attributes, how does my standard javaBean
template's getterBody(att)... template know that the sub-template-group
wants to override that _particular_ attribute's getter method body and
leave the other two as standard getters?

I can already see many other uses for such template specialization,
where the specialization is per-model-attribute, where the model
attribute is entirely unknown in advance, and the polymorphic
sub-template-group feature of StringTemplate would otherwise very
cleanly solve this problem, if I could only test for the existence of a
particular template (in the sub group), the name of which is unknown in
advance, but should be used if it exists.


-- 
Homepage: www.SoulSound.net -- Free Australia: www.UPMART.org
Please respect the confidentiality of this email as sensibly warranted.

From parrt at cs.usfca.edu  Mon Mar 31 09:37:15 2008
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon, 31 Mar 2008 09:37:15 -0700
Subject: [stringtemplate-interest] template existence testing
In-Reply-To: <20080330073308.GA25757@freedbms.net>
References: <20080329124330.GN8764@freedbms.net>
	<4E37D0DE-60EB-48CA-BD56-5533CDB1602E@cs.usfca.edu>
	<20080330073308.GA25757@freedbms.net>
Message-ID: <1A44D263-3AED-445D-91AB-AF27ADE706D0@cs.usfca.edu>

hi Zenaan you cannot cat major and minor version strings in model and  
push in.  that is a view issue.  So, have a template called version  
that you override to be either <major><minor> or just <minor>.  I am  
rushed so might not be understanding...sorry.
Ter
On Mar 30, 2008, at 12:33 AM, Zenaan Harkness wrote:
> On Sat, Mar 29, 2008 at 01:07:25PM -0700, Terence Parr wrote:
>>
>> On Mar 29, 2008, at 5:43 AM, Zenaan Harkness wrote:
>>> Hi, I've come across a feature which I would find useful:
>>>
>>> It might sound odd, but I would like to be able to, within an  
>>> <if(...)>
>>> block, test for the existence of a specific template name.
>>>
>>> I need to provide template-level specialization of getter/setter  
>>> method
>>> bodies, and I'd like the template name to be tested for  
>>> automatically in
>>> the if block, so that a default method body is used normally, and  
>>> the
>>> specialization is used otherwise.
>>
>> Wouldn't normal group inheritance handle this case?
>
> For inheritance to work, I would have to have an empty get-, set- and
> misc- template in a parent group, for _every_ conceivable attribute  
> that
> my model might want to model, which is simply silly.
>
> The attributes of a particular model, a farm let's say, might be
> land-size, water-flow, crops, etc, whereas a model of a music album
> would have artist, recording company and track attributes. My views
> cannot possibly guess the attributes desired by my models (and the
> models are totally separate).
>
> So the thing is, I want, on occasion, to have a specialization of  
> say, a
> Java Bean view template, and I have in this actual example, attributes
> of att-version-major, att-version-minor, and att-version. Now
> att-version is in my current implementation, to be rendered as a
> concatenation of the major and minor version strings, so I want,  
> instead
> of a normal "return _attVersion;" getter for att-version, a
> specialization (in a one-shot sub-template), where att-version's  
> getter
> body is specialized into "return _attVersionMajor +  
> _attVersionMinor;".
>
> Since there are three attributes, how does my standard javaBean
> template's getterBody(att)... template know that the sub-template- 
> group
> wants to override that _particular_ attribute's getter method body and
> leave the other two as standard getters?
>
> I can already see many other uses for such template specialization,
> where the specialization is per-model-attribute, where the model
> attribute is entirely unknown in advance, and the polymorphic
> sub-template-group feature of StringTemplate would otherwise very
> cleanly solve this problem, if I could only test for the existence  
> of a
> particular template (in the sub group), the name of which is unknown  
> in
> advance, but should be used if it exists.
>
>
> -- 
> Homepage: www.SoulSound.net -- Free Australia: www.UPMART.org
> Please respect the confidentiality of this email as sensibly  
> warranted.
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org:8080/mailman/listinfo/stringtemplate-interest


From zen at freedbms.net  Mon Mar 31 15:41:53 2008
From: zen at freedbms.net (Zenaan Harkness)
Date: Tue, 1 Apr 2008 09:41:53 +1100
Subject: [stringtemplate-interest] template existence testing
In-Reply-To: <1A44D263-3AED-445D-91AB-AF27ADE706D0@cs.usfca.edu>
References: <20080329124330.GN8764@freedbms.net>
	<4E37D0DE-60EB-48CA-BD56-5533CDB1602E@cs.usfca.edu>
	<20080330073308.GA25757@freedbms.net>
	<1A44D263-3AED-445D-91AB-AF27ADE706D0@cs.usfca.edu>
Message-ID: <20080331224153.GA7226@freedbms.net>

On Mon, Mar 31, 2008 at 09:37:15AM -0700, Terence Parr wrote:
> hi Zenaan you cannot cat major and minor version strings in model and push 
> in.  that is a view issue.

Exactly, which is why I want the view to have some code specialization
which does the cat-ing, and to have that code (ie 'view') specialization
be totally within the view.

The major/minor version numbers is simply the simplest example I have,
to illustrate the need: there are others where I have a specific
template which has "extraCode(Model)" template which has _two_pages_ of
code, which is totally non-generic to my java-lib.stg template group,
but needs to be somewhat generic with respect to my data Model.
This example is a once-off, relating to a specific output view (CLI
options processing boilerplate).

But I have other examples where, for example, I have say 10 attribute
methods, all of which are simple getters, and thus all of which are
easily generically generated by a standard java-lib.stg template, eg:

attGetter(att) ::= "public <att.type> get<att.Jname> () {return <att.name>;}"

However, _one_ of these attributes needs a whole bunch of custom code in
its setter method - much more than a mere concatenation of strings.

> So, have a template called version that you 
> override to be either <major><minor> or just <minor>.  I am rushed so might 
> not be understanding...sorry.

Ahh not to worry, I'll explain again:

As you correctly point out, overriding a template is exactly what I want
to do.

BUT !!  I don't know the name of the template I want to override in
advance ((at least, the view does not know, and the view should not have
any deep knowledge of the data Model, at least as much as possible, and
putting this in the view would cause an explosion of data model
knowledge in the view, where there should be none)),

which is BECAUSE, the name of the template to be overridden will always
be totally arbitrary: today it's attGetter(att) for the "version"
attribute, and another attSetter(att) for the "name" attribute of some
random entity in my model, so I could create two view templates (which
otherwise just call the default attGetter and attSetter bodies
respectively), and these templates might be named attGetterBodyVersion
and attSetterBodyFarmName.

Tomorrow it might be the attSetter(att) for the cowsInPlantation model
attribute, or the wierdVersionParticularity attribute, and all these
random model attributes want to have a bit of view specialization code.

This code cannot be static - it depends on the output language desired
(do I want Java, C# or perl "beans"), and on the input model (eg
<debug(att)> type templates, <className(model)> templates, etc etc which
must of necessity come from the model.

As you can see, not only am I currently caused to put very
model-specific knowledge in my [java|csharp|perl]-lib.stg template
groups, but it would also obviously cause the unnecessary explosion in
number of templates mentioned above.


-- 
Homepage: www.SoulSound.net -- Free Australia: www.UPMART.org
Please respect the confidentiality of this email as sensibly warranted.

