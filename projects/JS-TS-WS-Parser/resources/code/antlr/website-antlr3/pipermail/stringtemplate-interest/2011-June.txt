From jjtapia at gmail.com  Fri Jun  3 11:45:08 2011
From: jjtapia at gmail.com (Jose Juan Tapia)
Date: Fri, 3 Jun 2011 14:45:08 -0400
Subject: [stringtemplate-interest] Defer definition of a parameter in a
	StringTemplate function
Message-ID: <BANLkTimq00qzi9wdTUv+ka=r4Qc0KDLiXg@mail.gmail.com>

So suppose I want to produce the following output with a Stringtemplate

<TopLevel id="T1">
   <LowLevel id="T1_L1"/>
 </TopLevel>
<TopLevel id="T2">
   <LowLevel id="T2_L1"/>
   <LowLevel id="T2_L2"/>
 </TopLevel>


Right now my Stringtemplate grammar looks something like this

Root(id,topCollection)::<<
 <topCollection; separator="\n">
>>

Top(id,lowCollection)::<<
  \<TopLevel id="T<id>"\>
  <lowCollection; separator="\n">
 \</TopLevel\>
>>

Low(id)::=<<
\<LowerLevel id="<id>"\/>
>>

With things being defined separately through an ANTLR grammar in a
bottom up fashion. (So when all the LowLevel tags
of a given TopLevel section are created, they are passed to the upper
level of the grammar as an array of stringTemplates).


My problem right now with this definition is doesn't manage the id's
correctly at all. I was wondering if there was a way to defer the
definition of the Low function id parameter and define it latter on
StringTemplate itself , something like

   <topCollection(id="T<i>"); separator="\n">

 <lowCollection(id="<id>_L<i>"; separator="\n">


An alternative solution to this would be to manage all the indexing
from ANTLR instead of using the <i> tag (which is what
I'm doing right now), but I think using ANTLR for keeping the indexing
would be messier (since there are several nested levels of indexing in
my true grammar) so I was wondering if there was a way to do this with
StringTemplate.

-- 
Jos? Juan Tapia Valenzuela
Research Associate
University of Pittsburgh
3076.1 Biological Sciences Tower 3
Pittsburgh, Pa 15260

From s.barnett-cormack at lancaster.ac.uk  Sun Jun  5 04:55:20 2011
From: s.barnett-cormack at lancaster.ac.uk (Sam Barnett-Cormack)
Date: Sun, 05 Jun 2011 12:55:20 +0100
Subject: [stringtemplate-interest] Dynamic binding of templates?
Message-ID: <4DEB6EA8.1030105@lancaster.ac.uk>

Hi all,

So, I've been away from StringTemplate use for a while, but I'm planning 
a new project using ST, and want to do something that I'm not sure is 
possible (even after a glance over current documentation).

I want to use templates that invoke other templates; no problem. I want 
to allow simple configuration to determine which specific templates to 
use to satisfy interfaces. I want extensions to my software to define 
new interfaces (generally with default implementations). So, in an 
installation of the software, there will be a whole group of interfaces 
(one or more for the core, and zero or more for each extension), and 
there may be several implementations of each interface. I want to be 
able to decide, at run-time, which implementations to use. That much I 
think is straightforwardly possible, except for this:

I want the extension templates to actually be satisfying some abstract 
interface and be called by the core templates. So a core template might 
only know that it's going to invoke 'some item template', and then it 
will invoke a specific template that was not even conceived off at the 
time the core template was written. The immediate idea that occurs to me 
is if it were possible to pass a template reference as a parameter and 
invoke it, but that would be kind of awkward and still hard to use, as 
it would have to be passed down through any external templates (although 
it could be deeper in a data structure, so it's possible - say that the 
core template just receives a list of items, and the template reference 
is a member of the item data structure, and so forth - maybe this could 
be done through invoking a 'getOutput' method on the item that invokes 
its own template, which may then invoke core templates perhaps, and then 
is just used as a string for output). Is anything like this possible?

The other point part of this, in terms of working out how I'll do it, is 
to ask whether it's possible/easy for the extensions to have their own 
template groups that are automatically able to use the templates in the 
core group, even though the core group is determined at runtime, 
possibly from multiple sources. I can see one way of doing it with 
dynamically generating strings that are used to build the groups, and 
using the same components for multiple groups, but that would lead to 
duplication; I suppose it could be done using the same dynamic building, 
but grouping everything in one group, but then I'm not sure about 
verifying that the conceptual groups satisfy their interfaces. In the 
end, at runtime, I envisage having a load of well-defined, in files, 
interfaces, dynamically building the implementation of each interface 
from fragments that come from files, and verifying that they satisfy 
their interfaces, but ending up with them being able to invoke templates 
from other groups.

So, for the bits that are weird, I'm hoping for ideas; for bits that are 
quite straightforward, I'm hoping for pointers - either in replies, or 
via pointers to resources online that will help me see what to do.

Thanks all,

Sam

From s.barnett-cormack at lancaster.ac.uk  Sun Jun  5 05:12:12 2011
From: s.barnett-cormack at lancaster.ac.uk (Sam Barnett-Cormack)
Date: Sun, 05 Jun 2011 13:12:12 +0100
Subject: [stringtemplate-interest] Dynamic binding of templates?
In-Reply-To: <4DEB6EA8.1030105@lancaster.ac.uk>
References: <4DEB6EA8.1030105@lancaster.ac.uk>
Message-ID: <4DEB729C.9070702@lancaster.ac.uk>

On 05/06/2011 12:55, Sam Barnett-Cormack wrote:
> I want the extension templates to actually be satisfying some abstract
> interface and be called by the core templates. So a core template might
> only know that it's going to invoke 'some item template', and then it
> will invoke a specific template that was not even conceived off at the
> time the core template was written. The immediate idea that occurs to me
> is if it were possible to pass a template reference as a parameter and
> invoke it, but that would be kind of awkward and still hard to use, as
> it would have to be passed down through any external templates (although
> it could be deeper in a data structure, so it's possible - say that the
> core template just receives a list of items, and the template reference
> is a member of the item data structure, and so forth - maybe this could
> be done through invoking a 'getOutput' method on the item that invokes
> its own template, which may then invoke core templates perhaps, and then
> is just used as a string for output). Is anything like this possible?

And as I scan docs I can see that this element can be handled by the 
syntax <(expr)(argument-list)>... that's embarassing... but thoughts and 
ideas on the whole lot are still welcome.

Sam


From s.barnett-cormack at lancaster.ac.uk  Sun Jun  5 05:20:28 2011
From: s.barnett-cormack at lancaster.ac.uk (Sam Barnett-Cormack)
Date: Sun, 05 Jun 2011 13:20:28 +0100
Subject: [stringtemplate-interest] Dynamic binding of templates?
In-Reply-To: <4DEB729C.9070702@lancaster.ac.uk>
References: <4DEB6EA8.1030105@lancaster.ac.uk>
	<4DEB729C.9070702@lancaster.ac.uk>
Message-ID: <4DEB748C.70100@lancaster.ac.uk>

Also, am I right from my scanning of docs that interfaces aren't around 
anymore in ST4? If so, what's the reasoning behind that?

On 05/06/2011 13:12, Sam Barnett-Cormack wrote:
> On 05/06/2011 12:55, Sam Barnett-Cormack wrote:
>> I want the extension templates to actually be satisfying some abstract
>> interface and be called by the core templates. So a core template might
>> only know that it's going to invoke 'some item template', and then it
>> will invoke a specific template that was not even conceived off at the
>> time the core template was written. The immediate idea that occurs to me
>> is if it were possible to pass a template reference as a parameter and
>> invoke it, but that would be kind of awkward and still hard to use, as
>> it would have to be passed down through any external templates (although
>> it could be deeper in a data structure, so it's possible - say that the
>> core template just receives a list of items, and the template reference
>> is a member of the item data structure, and so forth - maybe this could
>> be done through invoking a 'getOutput' method on the item that invokes
>> its own template, which may then invoke core templates perhaps, and then
>> is just used as a string for output). Is anything like this possible?
>
> And as I scan docs I can see that this element can be handled by the
> syntax<(expr)(argument-list)>... that's embarassing... but thoughts and
> ideas on the whole lot are still welcome.
>
> Sam
>
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest


From alejandro.osso at integraware.com.br  Tue Jun  7 08:58:25 2011
From: alejandro.osso at integraware.com.br (alejandro.osso at integraware.com.br)
Date: Tue, 7 Jun 2011 13:58:25 -0200
Subject: [stringtemplate-interest] ST v4 with ANTLR 3.3
Message-ID: <OF172A0EB6.608BDD6C-ON032578A8.0057A118-832578A8.0057BE32@integraware.com.br>

Good morning to all! 

I would like to use ST v4 along with an ANTLR 3.3 tree grammar.  Can I do 
this?   ANTLR complains about the setTemplateLib(group) for STv4 groups. 


Kind regards, 

Alejandro Osso. 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20110607/afd34aee/attachment.html 

From alejandro.osso at integraware.com.br  Tue Jun  7 09:15:18 2011
From: alejandro.osso at integraware.com.br (alejandro.osso at integraware.com.br)
Date: Tue, 7 Jun 2011 14:15:18 -0200
Subject: [stringtemplate-interest] templateLib in imported grammar
Message-ID: <OFA4FD8686.CC6F5657-ON032578A8.005875FC-832578A8.00594A08@integraware.com.br>

Good morning to all!

I have a root tree grammar R which imports another one A.  The root 
grammar finds the template group correctly, but the subordinate grammar 
does not; it seems to be looking for a "R_ATemplates" group.

How can I tell the subordinate grammar to use the same template group as 
the root grammar?

Thanks in advance.

Kind regards,

Alejandro Osso
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20110607/21ba5ef6/attachment.html 

From michael.bedward at gmail.com  Mon Jun 13 20:39:22 2011
From: michael.bedward at gmail.com (Michael Bedward)
Date: Tue, 14 Jun 2011 13:39:22 +1000
Subject: [stringtemplate-interest] ST v4 with ANTLR 3.3
In-Reply-To: <OF172A0EB6.608BDD6C-ON032578A8.0057A118-832578A8.0057BE32@integraware.com.br>
References: <OF172A0EB6.608BDD6C-ON032578A8.0057A118-832578A8.0057BE32@integraware.com.br>
Message-ID: <BANLkTi=jeXO4nmkJ6w9-iJDDTrv6CRX7Fg@mail.gmail.com>

Hi Alejandro,

I was hoping someone else would reply to your question with an easier
suggestion than my own, but since they haven't...

Using ST4 in an ANTLR 3.3. grammar, you don't have the normal string
template syntax available. Instead you have to do everything
"manually".  The way that I've done this is to have a superclass which
is responsible for loading the template group file...

// group is a field in the superclass
group = new STGroupFile( path );

The superclass also provides a helper method to get individual templates...

    protected ST getTemplate(String name) {
        ST st = group.getInstanceOf(name);
        if (st == null) {
            throw new RuntimeException("template not found: " + name);
        }
        return st;
    }

Then in my grammar I use that helper method and have each rule return
an ST object, as in this example...

assignmentExpression returns [ST st]
                : ^(op=assignmentOp id=assignableVar e=expression)
                {
                    $st = getTemplate("binaryexpr");
                    $st.add("lhs", $id.st);
                    $st.add("op", $op.st);
                    $st.add("rhs", $e.st);
                }
                ;

Of course, when ANTLR catches up with ST4 this will be unnecessary.

Hope this helps.

Michael



On 8 June 2011 01:58,  <alejandro.osso at integraware.com.br> wrote:
> Good morning to all!
>
> I would like to use ST v4 along with an ANTLR 3.3 tree grammar. ?Can I do
> this? ? ANTLR complains about the setTemplateLib(group) for STv4 groups.
>
>
> Kind regards,
>
> Alejandro Osso.
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>
>

From parrt at cs.usfca.edu  Tue Jun 14 16:17:01 2011
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue, 14 Jun 2011 16:17:01 -0700
Subject: [stringtemplate-interest] Subdirectory access in v4
Message-ID: <31F98D92-72A5-4C97-B416-EADD44C7C72D@cs.usfca.edu>

Hi, Looks like I kind of messed so directory access. Currently everything has to be fully qualified. If you don't put "/" on the front like /templates/mainlook-n-feel/homepage.st it automatically puts one on the front for you.

Originally, talking with Tom Burns (a co-designer of ST), we wanted template references to the relative to the current location. But somehow I remember we found some kind of ambiguity or difficulty and so I backed off to what it was in version 3:  fully qualified template names.

I'm nervous about updating given that v4 has been in the wild for five months, but I'm also concerned with the subdirectory thing not working correctly. Tom just suggested a good compromise:

* unqualified template references like <homepage()> would look in the current group
* qualify template references must be fully qualified from the root and start with "/"

I look at a few examples and I think it's hosed. Imagine the following directory structure

root
	b.st is b() ::= "yo"
	subdir
		a.st is a() ::= "<b()>"
		b.st is b() ::= "hi"

If you create STGroupDir("root") and ask for b, you will get "yo". If you ask for "/subdir/b" you will get "hi". However, if you ask for "/subdir/a" you will get "yo" NOT "hi" because it takes everything is fully qualified. "<b()>" will look in the root directory because <b()> does not specify a subdirectory.

ok, that is just wrong.

So, do people agree with the breaking change above in the two bullet points? Fortunately, the documentation doesn't seem to even talk about this so were probably okay to fix it ;)

Udo Borkowski has made some good fixes and updates as well; we should do another point release.

Thanks!
Ter

From baerrach at gmail.com  Tue Jun 14 17:22:58 2011
From: baerrach at gmail.com (Barrie Treloar)
Date: Wed, 15 Jun 2011 09:52:58 +0930
Subject: [stringtemplate-interest] Subdirectory access in v4
In-Reply-To: <31F98D92-72A5-4C97-B416-EADD44C7C72D@cs.usfca.edu>
References: <31F98D92-72A5-4C97-B416-EADD44C7C72D@cs.usfca.edu>
Message-ID: <BANLkTimgFhBa7TN_0+JSZGnQTm6pbNNRHA@mail.gmail.com>

On Wed, Jun 15, 2011 at 8:47 AM, Terence Parr <parrt at cs.usfca.edu> wrote:
> So, do people agree with the breaking change above in the two bullet points? Fortunately, the documentation doesn't seem to even talk about this so were probably okay to fix it ;)

Yes please.

I have in my notes:

Template Group Hierarchies.
  Interestingly these are not template relative, but group relative.
  i.e
  ROOT/module/one.st
  ROOT/module/two.st
  where one.st needs to reference a call to two() then it needs to use
module/two() in order to do so.

As an aside, I think STGroupDir is a poor cousin of STGroupFile.
STGroupDir doesn't seem to behave the same or have the same feature
set.
Unfortunately I didn't keep notes as to what was different.
I think the only way to ensure compatibility is by using the same test
suite against both group types.

In the end I just moved to *.stg files with imports and haven't looked back.

From kiran.kandru at citi.com  Tue Jun 14 20:01:46 2011
From: kiran.kandru at citi.com (Kandru, Kiran )
Date: Tue, 14 Jun 2011 23:01:46 -0400
Subject: [stringtemplate-interest] ST variable substitution issue,
	pls advise.
In-Reply-To: <409CBD8E1644D3488D15DD8D112394292BDC481233@exnjmb80.nam.nsroot.net>
References: <31F98D92-72A5-4C97-B416-EADD44C7C72D@cs.usfca.edu>
	<BANLkTimgFhBa7TN_0+JSZGnQTm6pbNNRHA@mail.gmail.com>
	<409CBD8E1644D3488D15DD8D112394292BDC481233@exnjmb80.nam.nsroot.net>
Message-ID: <409CBD8E1644D3488D15DD8D112394292BDC6F3325@exnjmb80.nam.nsroot.net>

Hi,

I need advise on using variable substitution into String Template file using XPATH Query.When I try parsing XML file , for some syntax error, conceptName highlighted in RED not being substituted by parameter passed to apply method. Right now I'm clueless, could you please advise?


main(root,fldNames) ::= <<

        Concepts: <root.("/ChangedProductNotification/product/concepts/concept"): { concept |
                <concept.cname:apply()>
        }>
>>

apply(conceptName) ::= <<
                Narrowing to Product Concept: <root.("/ChangedProductNotification/product/concepts/concept[@cname=<conceptName>]/recs/rec/attributes/attribute[@name='XrefValue']"): { attribute |
                                <attribute.name>,<attribute>
        }>

>>

Thx,
Kiran

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20110614/b20f278b/attachment.html 

From michael.bedward at gmail.com  Tue Jun 14 21:34:40 2011
From: michael.bedward at gmail.com (Michael Bedward)
Date: Wed, 15 Jun 2011 14:34:40 +1000
Subject: [stringtemplate-interest] ST variable substitution issue,
	pls advise.
In-Reply-To: <409CBD8E1644D3488D15DD8D112394292BDC6F3325@exnjmb80.nam.nsroot.net>
References: <31F98D92-72A5-4C97-B416-EADD44C7C72D@cs.usfca.edu>
	<BANLkTimgFhBa7TN_0+JSZGnQTm6pbNNRHA@mail.gmail.com>
	<409CBD8E1644D3488D15DD8D112394292BDC481233@exnjmb80.nam.nsroot.net>
	<409CBD8E1644D3488D15DD8D112394292BDC6F3325@exnjmb80.nam.nsroot.net>
Message-ID: <BANLkTimiyWFkqrq7iC+akDKS+fC91fp7yg@mail.gmail.com>

Hi Kiran,

Try changing this...
concept | <concept.cname:apply()>

to this...
concept | <apply(concept.cname)>

Michael


On 15 June 2011 13:01, Kandru, Kiran <kiran.kandru at citi.com> wrote:
> Hi,
>
> I need advise on using variable substitution into String Template file using
> XPATH Query.When I try parsing XML file , for some syntax error, conceptName
> highlighted in RED not being substituted by parameter passed to apply
> method. Right now I?m clueless, could you please advise?
>
>
> main(root,fldNames) ::= <<
>
> ??????? Concepts:
> <root.("/ChangedProductNotification/product/concepts/concept"): { concept |
> ??????????????? <concept.cname:apply()>
> ??????? }>
>>>
>
> apply(conceptName) ::= <<
> ??????????????? Narrowing to Product Concept:
> <root.("/ChangedProductNotification/product/concepts/concept[@cname=<conceptName>]/recs/rec/attributes/attribute[@name='XrefValue']"):
> { attribute |
> ??????????????????????????????? <attribute.name>,<attribute>
> ??????? }>
>
>>>
>
> Thx,
> Kiran
>
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>
>

From michael.bedward at gmail.com  Tue Jun 14 22:00:39 2011
From: michael.bedward at gmail.com (Michael Bedward)
Date: Wed, 15 Jun 2011 15:00:39 +1000
Subject: [stringtemplate-interest] Subdirectory access in v4
In-Reply-To: <31F98D92-72A5-4C97-B416-EADD44C7C72D@cs.usfca.edu>
References: <31F98D92-72A5-4C97-B416-EADD44C7C72D@cs.usfca.edu>
Message-ID: <BANLkTin_mG+78mJAR0T=W+oLdNk4wE4Tcg@mail.gmail.com>

On 15 June 2011 09:17, Terence Parr <parrt at cs.usfca.edu> wrote:
> So, do people agree with the breaking change above in the two bullet points?

+1 from me :)

Thanks,
Michael

From s.barnett-cormack at lancaster.ac.uk  Thu Jun 16 09:33:15 2011
From: s.barnett-cormack at lancaster.ac.uk (Sam Barnett-Cormack)
Date: Thu, 16 Jun 2011 17:33:15 +0100
Subject: [stringtemplate-interest] A plan/idea - seeking thoughts and so
	forth
Message-ID: <4DFA304B.9040601@lancaster.ac.uk>

So, I'm thinking about starting a fairly substantial project with 
StringTemplate. Initially, my use for it is internal (for developing 
websites/webapps), but I'm hoping to make it more generally useful.

Basically, I want to develop java-driven websites (using Java EE, of 
course), but as I want to produce extensive and flexible templatisation, 
I don't want to use Facelets or JSP. My plan is to effectively put 
together a servlet, some EJP and some utility classes that enable the 
use of StringTemplate flexibly as a web presentation layer - not writing 
a single website that uses it and has some dynamic elements, but 
actually having run-time decisions about what template to use where, and 
basically having a flexible structure (similar-ish to Drupal templates, 
in essence, but not in detail) for the presentation layer that can be 
played with somewhat independently of the business logic or the glue. 
Obviously, individual projects using this structure would have to supply 
their templates, but each could then be extended with modules providing 
their own models and their own templates, so it would be switching in 
templates as needed.

I could go into more detail, but my brain isn't up to it right now. What 
I'd like to hear from people, if I can, is whether there are existing 
examples of this, and generally what people's thoughts are on pitfalls 
and possibilities.

On a very specific note, though, as I work out some implementation 
details that I need to know (at least whether they are possible) before 
I go further - is it possible in ST4, to have a STGroup (created 
however) and add templates to it at run-time? I imagine I'll be wanting 
to dynamically construct a group based on configuration, using files in 
all sorts of places and possibly pulling things in from arbitrary data 
sources (DBs, remote filesystems, black boxes even). The API docs list 
functions that look like this might be possible, but the lack of any 
description on them makes it hard to tell. Can anyone (Terence, for 
example) tell me if this is possible, and which methods to use for it?

Thanks for any answers and feedback people can give,

Sam

From parrt at cs.usfca.edu  Thu Jun 16 11:50:40 2011
From: parrt at cs.usfca.edu (Terence Parr)
Date: Thu, 16 Jun 2011 11:50:40 -0700
Subject: [stringtemplate-interest] templateLib in imported grammar
In-Reply-To: <OFA4FD8686.CC6F5657-ON032578A8.005875FC-832578A8.00594A08@integraware.com.br>
References: <OFA4FD8686.CC6F5657-ON032578A8.005875FC-832578A8.00594A08@integraware.com.br>
Message-ID: <010CBF4C-D5B1-41AA-A421-D0F52A9B50C6@cs.usfca.edu>

Hi. can you call setTemplateLib on the subordinate?
Ter
On Jun 7, 2011, at 9:15 AM, alejandro.osso at integraware.com.br wrote:

> 
> Good morning to all! 
> 
> I have a root tree grammar R which imports another one A.  The root grammar finds the template group correctly, but the subordinate grammar does not; it seems to be looking for a "R_ATemplates" group. 
> 
> How can I tell the subordinate grammar to use the same template group as the root grammar? 
> 
> Thanks in advance. 
> 
> Kind regards, 
> 
> Alejandro Osso_______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20110616/77564cfc/attachment.html 

From kiran.kandru at citi.com  Thu Jun 16 12:09:27 2011
From: kiran.kandru at citi.com (Kandru, Kiran )
Date: Thu, 16 Jun 2011 15:09:27 -0400
Subject: [stringtemplate-interest] ST variable substitution issue,
	pls advise.
In-Reply-To: <409CBD8E1644D3488D15DD8D112394292BDC481234@exnjmb80.nam.nsroot.net>
References: <31F98D92-72A5-4C97-B416-EADD44C7C72D@cs.usfca.edu>
	<BANLkTimgFhBa7TN_0+JSZGnQTm6pbNNRHA@mail.gmail.com>
	<409CBD8E1644D3488D15DD8D112394292BDC481233@exnjmb80.nam.nsroot.net>
	<409CBD8E1644D3488D15DD8D112394292BDC481234@exnjmb80.nam.nsroot.net>
Message-ID: <409CBD8E1644D3488D15DD8D112394292BDCA806D8@exnjmb80.nam.nsroot.net>

Hello members,
The issue may be very small, could you please advise.

Thx,
Kiran

_____________________________________________
From: Kandru, Kiran [ICG-IT]
Sent: Tuesday, June 14, 2011 11:02 PM
To: 'stringtemplate-interest at antlr.org'
Subject: ST variable substitution issue, pls advise.


Hi,

I need advise on using variable substitution into String Template file using XPATH Query.When I try parsing XML file , for some syntax error, conceptName highlighted in RED not being substituted by parameter passed to apply method. Right now I'm clueless, could you please advise?


main(root,fldNames) ::= <<

        Concepts: <root.("/ChangedProductNotification/product/concepts/concept"): { concept |
                <concept.cname:apply()>
        }>
>>

apply(conceptName) ::= <<
                Narrowing to Product Concept: <root.("/ChangedProductNotification/product/concepts/concept[@cname=<conceptName>]/recs/rec/attributes/attribute[@name='XrefValue']"): { attribute |
                                <attribute.name>,<attribute>
        }>

>>

Thx,
Kiran

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20110616/9eabf8d1/attachment.html 

From baerrach at gmail.com  Thu Jun 16 17:27:42 2011
From: baerrach at gmail.com (Barrie Treloar)
Date: Fri, 17 Jun 2011 09:57:42 +0930
Subject: [stringtemplate-interest] A plan/idea - seeking thoughts and so
	forth
In-Reply-To: <4DFA304B.9040601@lancaster.ac.uk>
References: <4DFA304B.9040601@lancaster.ac.uk>
Message-ID: <BANLkTi=C8vaHFqzZ_=P=LD3cewoSVw-TDQ@mail.gmail.com>

On Fri, Jun 17, 2011 at 2:03 AM, Sam Barnett-Cormack
<s.barnett-cormack at lancaster.ac.uk> wrote:
> On a very specific note, though, as I work out some implementation
> details that I need to know (at least whether they are possible) before
> I go further - is it possible in ST4, to have a STGroup (created
> however) and add templates to it at run-time? I imagine I'll be wanting
> to dynamically construct a group based on configuration, using files in
> all sorts of places and possibly pulling things in from arbitrary data
> sources (DBs, remote filesystems, black boxes even). The API docs list
> functions that look like this might be possible, but the lack of any

I've had a look around in STGroup, and I can't think of any reason why
you can't create your own that pull stuff from your list of places.

But you wont know for sure until you code it.

From parrt at cs.usfca.edu  Thu Jun 16 18:26:53 2011
From: parrt at cs.usfca.edu (Terence Parr)
Date: Thu, 16 Jun 2011 18:26:53 -0700
Subject: [stringtemplate-interest] A plan/idea - seeking thoughts and so
	forth
In-Reply-To: <BANLkTi=C8vaHFqzZ_=P=LD3cewoSVw-TDQ@mail.gmail.com>
References: <4DFA304B.9040601@lancaster.ac.uk>
	<BANLkTi=C8vaHFqzZ_=P=LD3cewoSVw-TDQ@mail.gmail.com>
Message-ID: <63BC0294-2F79-4F77-BAC3-B0CC94525B64@cs.usfca.edu>

I know a guy that pulls all templates from a DB (using v3 but still should work). Make STGroupDB or whatever.
T
On Jun 16, 2011, at 5:27 PM, Barrie Treloar wrote:

> On Fri, Jun 17, 2011 at 2:03 AM, Sam Barnett-Cormack
> <s.barnett-cormack at lancaster.ac.uk> wrote:
>> On a very specific note, though, as I work out some implementation
>> details that I need to know (at least whether they are possible) before
>> I go further - is it possible in ST4, to have a STGroup (created
>> however) and add templates to it at run-time? I imagine I'll be wanting
>> to dynamically construct a group based on configuration, using files in
>> all sorts of places and possibly pulling things in from arbitrary data
>> sources (DBs, remote filesystems, black boxes even). The API docs list
>> functions that look like this might be possible, but the lack of any
> 
> I've had a look around in STGroup, and I can't think of any reason why
> you can't create your own that pull stuff from your list of places.
> 
> But you wont know for sure until you code it.
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest


From alejandro.osso at integraware.com.br  Fri Jun 17 06:59:15 2011
From: alejandro.osso at integraware.com.br (alejandro.osso at integraware.com.br)
Date: Fri, 17 Jun 2011 11:59:15 -0200
Subject: [stringtemplate-interest] ST v4 with ANTLR 3.3
In-Reply-To: <BANLkTi=jeXO4nmkJ6w9-iJDDTrv6CRX7Fg@mail.gmail.com>
References: <OF172A0EB6.608BDD6C-ON032578A8.0057A118-832578A8.0057BE32@integraware.com.br>
	<BANLkTi=jeXO4nmkJ6w9-iJDDTrv6CRX7Fg@mail.gmail.com>
Message-ID: <OFD2CAB43C.BC0DA7E6-ON032578B2.004C7BEF-832578B2.004CD4AB@integraware.com.br>

Hi Michael, 

I'm glad you posted this reply, thank you.  It really helped.

Kind regards,

Alejandro Osso.




From:   Michael Bedward <michael.bedward at gmail.com>
To:     alejandro.osso at integraware.com.br
Cc:     stringtemplate-interest at antlr.org
Date:   14/06/2011 00:39
Subject:        Re: [stringtemplate-interest] ST v4 with ANTLR 3.3



Hi Alejandro,

I was hoping someone else would reply to your question with an easier
suggestion than my own, but since they haven't...

Using ST4 in an ANTLR 3.3. grammar, you don't have the normal string
template syntax available. Instead you have to do everything
"manually".  The way that I've done this is to have a superclass which
is responsible for loading the template group file...

// group is a field in the superclass
group = new STGroupFile( path );

The superclass also provides a helper method to get individual 
templates...

    protected ST getTemplate(String name) {
        ST st = group.getInstanceOf(name);
        if (st == null) {
            throw new RuntimeException("template not found: " + name);
        }
        return st;
    }

Then in my grammar I use that helper method and have each rule return
an ST object, as in this example...

assignmentExpression returns [ST st]
                : ^(op=assignmentOp id=assignableVar e=expression)
                {
                    $st = getTemplate("binaryexpr");
                    $st.add("lhs", $id.st);
                    $st.add("op", $op.st);
                    $st.add("rhs", $e.st);
                }
                ;

Of course, when ANTLR catches up with ST4 this will be unnecessary.

Hope this helps.

Michael



On 8 June 2011 01:58,  <alejandro.osso at integraware.com.br> wrote:
> Good morning to all!
>
> I would like to use ST v4 along with an ANTLR 3.3 tree grammar.  Can I 
do
> this?   ANTLR complains about the setTemplateLib(group) for STv4 groups.
>
>
> Kind regards,
>
> Alejandro Osso.
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>
>

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20110617/bfdbf438/attachment.html 

From alejandro.osso at integraware.com.br  Fri Jun 17 07:04:03 2011
From: alejandro.osso at integraware.com.br (alejandro.osso at integraware.com.br)
Date: Fri, 17 Jun 2011 12:04:03 -0200
Subject: [stringtemplate-interest] templateLib in imported grammar
In-Reply-To: <010CBF4C-D5B1-41AA-A421-D0F52A9B50C6@cs.usfca.edu>
References: <OFA4FD8686.CC6F5657-ON032578A8.005875FC-832578A8.00594A08@integraware.com.br>
	<010CBF4C-D5B1-41AA-A421-D0F52A9B50C6@cs.usfca.edu>
Message-ID: <OFEC7F0011.E5C58877-ON032578B2.004AB5BF-832578B2.004D4545@integraware.com.br>

Good morning Ter, and thank you for your reply.

Can I?  I learned in your books how to call setTemplateLib in the class 
which invokes the parser, but I haven't figured out how to pass this 
information to imported grammars. 

Kind regards,

Alejandro Osso




From:   Terence Parr <parrt at cs.usfca.edu>
To:     alejandro.osso at integraware.com.br
Cc:     stringtemplate-interest at antlr.org
Date:   16/06/2011 15:50
Subject:        Re: [stringtemplate-interest] templateLib in imported 
grammar



Hi. can you call setTemplateLib on the subordinate?
Ter
On Jun 7, 2011, at 9:15 AM, alejandro.osso at integraware.com.br wrote:


Good morning to all! 

I have a root tree grammar R which imports another one A.  The root 
grammar finds the template group correctly, but the subordinate grammar 
does not; it seems to be looking for a "R_ATemplates" group. 

How can I tell the subordinate grammar to use the same template group as 
the root grammar? 

Thanks in advance. 

Kind regards, 

Alejandro Osso_______________________________________________
stringtemplate-interest mailing list
stringtemplate-interest at antlr.org
http://www.antlr.org/mailman/listinfo/stringtemplate-interest

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20110617/834a4b9a/attachment-0001.html 

From parrt at cs.usfca.edu  Fri Jun 17 10:03:03 2011
From: parrt at cs.usfca.edu (Terence Parr)
Date: Fri, 17 Jun 2011 10:03:03 -0700
Subject: [stringtemplate-interest] templateLib in imported grammar
In-Reply-To: <OFEC7F0011.E5C58877-ON032578B2.004AB5BF-832578B2.004D4545@integraware.com.br>
References: <OFA4FD8686.CC6F5657-ON032578A8.005875FC-832578A8.00594A08@integraware.com.br>
	<010CBF4C-D5B1-41AA-A421-D0F52A9B50C6@cs.usfca.edu>
	<OFEC7F0011.E5C58877-ON032578B2.004AB5BF-832578B2.004D4545@integraware.com.br>
Message-ID: <31525FE0-C2EB-4EDC-AA7D-1791F0CE9DFB@cs.usfca.edu>

hi. i'd start by looking at library source.
Ter
On Jun 17, 2011, at 7:04 AM, alejandro.osso at integraware.com.br wrote:

> Good morning Ter, and thank you for your reply. 
> 
> Can I?  I learned in your books how to call setTemplateLib in the class which invokes the parser, but I haven't figured out how to pass this information to imported grammars.   
> 
> Kind regards, 
> 
> Alejandro Osso
> 
> 
> 
> 
> From:        Terence Parr <parrt at cs.usfca.edu> 
> To:        alejandro.osso at integraware.com.br 
> Cc:        stringtemplate-interest at antlr.org 
> Date:        16/06/2011 15:50 
> Subject:        Re: [stringtemplate-interest] templateLib in imported grammar 
> 
> 
> 
> Hi. can you call setTemplateLib on the subordinate? 
> Ter 
> On Jun 7, 2011, at 9:15 AM, alejandro.osso at integraware.com.br wrote: 
> 
> 
> Good morning to all! 
> 
> I have a root tree grammar R which imports another one A.  The root grammar finds the template group correctly, but the subordinate grammar does not; it seems to be looking for a "R_ATemplates" group. 
> 
> How can I tell the subordinate grammar to use the same template group as the root grammar? 
> 
> Thanks in advance. 
> 
> Kind regards, 
> 
> Alejandro Osso_______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest 
> 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20110617/a04fc3db/attachment.html 

From parrt at cs.usfca.edu  Fri Jun 17 12:42:08 2011
From: parrt at cs.usfca.edu (Terence Parr)
Date: Fri, 17 Jun 2011 12:42:08 -0700
Subject: [stringtemplate-interest] heading for ST 4.0.3
Message-ID: <A921974B-55EE-48EE-84C7-03B401347B7D@cs.usfca.edu>

Hi,

Please try 4.0.3 early access

http://stringtemplate.org/depot/ST4/java/main/dist

i made major changes to how it looks up template names but ONLY if you use subdirectories within a single group:

* Major overhaul of template names:
** '/' allowed as starting ID letter like </a/b()>
** getInstanceOf names must be fully qualified.  If you don't put / on
   front, one is added for you.
** template refs in expr are relative to location of surrounding template
   unless prefixed with /. In that case they are relative to root of group.
** import statement no longer allows fully qualified file name.
** Changed all unit tests to use fully qualified names and see results that way.

other bug fixes too but please let me know if this breaks anything.

Ter
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20110617/ad582ba1/attachment.html 

From parrt at cs.usfca.edu  Sun Jun 19 14:50:58 2011
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sun, 19 Jun 2011 14:50:58 -0700
Subject: [stringtemplate-interest] anybody tried ST 4.0.3 yet?
Message-ID: <847DFA46-F392-4565-B543-D86316283D7A@cs.usfca.edu>

i'd like to release if it works for you folks...
Ter

From s.barnett-cormack at lancaster.ac.uk  Sun Jun 19 14:55:52 2011
From: s.barnett-cormack at lancaster.ac.uk (Sam Barnett-Cormack)
Date: Sun, 19 Jun 2011 22:55:52 +0100
Subject: [stringtemplate-interest] A plan/idea - seeking thoughts and
 so	forth
In-Reply-To: <63BC0294-2F79-4F77-BAC3-B0CC94525B64@cs.usfca.edu>
References: <4DFA304B.9040601@lancaster.ac.uk>	<BANLkTi=C8vaHFqzZ_=P=LD3cewoSVw-TDQ@mail.gmail.com>
	<63BC0294-2F79-4F77-BAC3-B0CC94525B64@cs.usfca.edu>
Message-ID: <4DFE7068.4000200@lancaster.ac.uk>

On 17/06/2011 02:26, Terence Parr wrote:
> I know a guy that pulls all templates from a DB (using v3 but still should work). Make STGroupDB or whatever.

So, if you're using a customised STGroup subclass, and a template in it 
refers to another template by name, that name is looked up in the same 
group, yes? What characters are valid in a template name? I assume word 
characters, and judging by anther post forward-slash is also permitted - 
what about any other 'symbol' characters? I can see some marvellous 
potential to make the specific-template-picking system be built directly 
into a custom STGroup subclass, and that would be great if there's some 
character I could use as a wildcard, but then the wildcard could be in 
the template definitions rather than in the references in other 
templates, possibly. Hmm.

Sam

>> On Fri, Jun 17, 2011 at 2:03 AM, Sam Barnett-Cormack
>> <s.barnett-cormack at lancaster.ac.uk>  wrote:
>>> On a very specific note, though, as I work out some implementation
>>> details that I need to know (at least whether they are possible) before
>>> I go further - is it possible in ST4, to have a STGroup (created
>>> however) and add templates to it at run-time? I imagine I'll be wanting
>>> to dynamically construct a group based on configuration, using files in
>>> all sorts of places and possibly pulling things in from arbitrary data
>>> sources (DBs, remote filesystems, black boxes even). The API docs list
>>> functions that look like this might be possible, but the lack of any
>>
>> I've had a look around in STGroup, and I can't think of any reason why
>> you can't create your own that pull stuff from your list of places.
>>
>> But you wont know for sure until you code it.
>> _______________________________________________
>> stringtemplate-interest mailing list
>> stringtemplate-interest at antlr.org
>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest


From baerrach at gmail.com  Sun Jun 19 15:08:05 2011
From: baerrach at gmail.com (Barrie Treloar)
Date: Mon, 20 Jun 2011 07:38:05 +0930
Subject: [stringtemplate-interest] A plan/idea - seeking thoughts and so
	forth
In-Reply-To: <4DFE7068.4000200@lancaster.ac.uk>
References: <4DFA304B.9040601@lancaster.ac.uk>
	<BANLkTi=C8vaHFqzZ_=P=LD3cewoSVw-TDQ@mail.gmail.com>
	<63BC0294-2F79-4F77-BAC3-B0CC94525B64@cs.usfca.edu>
	<4DFE7068.4000200@lancaster.ac.uk>
Message-ID: <BANLkTikZP=G+j4PvNhAWriY987D3wNNoNw@mail.gmail.com>

On Mon, Jun 20, 2011 at 7:25 AM, Sam Barnett-Cormack
<s.barnett-cormack at lancaster.ac.uk> wrote:
> On 17/06/2011 02:26, Terence Parr wrote:
>>
>> I know a guy that pulls all templates from a DB (using v3 but still should
>> work). Make STGroupDB or whatever.
>
> So, if you're using a customised STGroup subclass, and a template in it
> refers to another template by name, that name is looked up in the same
> group, yes? What characters are valid in a template name? I assume word
> characters, and judging by anther post forward-slash is also permitted -
> what about any other 'symbol' characters? I can see some marvellous
> potential to make the specific-template-picking system be built directly
> into a custom STGroup subclass, and that would be great if there's some
> character I could use as a wildcard, but then the wildcard could be in the
> template definitions rather than

Did you look at the ST 4 documentation?

http://www.antlr.org/wiki/display/ST4/Group+file+syntax

Its just
  'import' STRING

So it an be anything.

From s.barnett-cormack at lancaster.ac.uk  Sun Jun 19 15:33:51 2011
From: s.barnett-cormack at lancaster.ac.uk (Sam Barnett-Cormack)
Date: Sun, 19 Jun 2011 23:33:51 +0100
Subject: [stringtemplate-interest] A plan/idea - seeking thoughts and
 so	forth
In-Reply-To: <BANLkTikZP=G+j4PvNhAWriY987D3wNNoNw@mail.gmail.com>
References: <4DFA304B.9040601@lancaster.ac.uk>	<BANLkTi=C8vaHFqzZ_=P=LD3cewoSVw-TDQ@mail.gmail.com>	<63BC0294-2F79-4F77-BAC3-B0CC94525B64@cs.usfca.edu>	<4DFE7068.4000200@lancaster.ac.uk>
	<BANLkTikZP=G+j4PvNhAWriY987D3wNNoNw@mail.gmail.com>
Message-ID: <4DFE794F.4010900@lancaster.ac.uk>

On 19/06/2011 23:08, Barrie Treloar wrote:
> On Mon, Jun 20, 2011 at 7:25 AM, Sam Barnett-Cormack
> <s.barnett-cormack at lancaster.ac.uk>  wrote:
>> On 17/06/2011 02:26, Terence Parr wrote:
>>>
>>> I know a guy that pulls all templates from a DB (using v3 but still should
>>> work). Make STGroupDB or whatever.
>>
>> So, if you're using a customised STGroup subclass, and a template in it
>> refers to another template by name, that name is looked up in the same
>> group, yes? What characters are valid in a template name? I assume word
>> characters, and judging by anther post forward-slash is also permitted -
>> what about any other 'symbol' characters? I can see some marvellous
>> potential to make the specific-template-picking system be built directly
>> into a custom STGroup subclass, and that would be great if there's some
>> character I could use as a wildcard, but then the wildcard could be in the
>> template definitions rather than
>
> Did you look at the ST 4 documentation?
>
> http://www.antlr.org/wiki/display/ST4/Group+file+syntax
>
> Its just
>    'import' STRING
>
> So it an be anything.

See, if it's a custom STGroup subclass, it might not use a group 
subclass. What's important syntactically for what I'm talking about is 
the question of what is a valid template when it's used within a 
template, rather than in an import statement in a group file.

Sam

From michael.bedward at gmail.com  Mon Jun 20 00:18:59 2011
From: michael.bedward at gmail.com (Michael Bedward)
Date: Mon, 20 Jun 2011 17:18:59 +1000
Subject: [stringtemplate-interest] anybody tried ST 4.0.3 yet?
In-Reply-To: <847DFA46-F392-4565-B543-D86316283D7A@cs.usfca.edu>
References: <847DFA46-F392-4565-B543-D86316283D7A@cs.usfca.edu>
Message-ID: <BANLkTi=hG8Zc-PwLU7mqiwSokiRNBUY5UQ@mail.gmail.com>

Hi Ter,

I'm spending some time this evening / tomorrow morning (Sydney time)
converting the Jiffle language over to ANTLR 3.4 / ST 4.0.3. Hope to
be reporting back on complete success tomorrow :)

Michael


On 20 June 2011 07:50, Terence Parr <parrt at cs.usfca.edu> wrote:
> i'd like to release if it works for you folks...
> Ter
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>

From parrt at cs.usfca.edu  Mon Jun 20 11:39:47 2011
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon, 20 Jun 2011 11:39:47 -0700
Subject: [stringtemplate-interest] anybody tried ST 4.0.3 yet?
In-Reply-To: <BANLkTi=hG8Zc-PwLU7mqiwSokiRNBUY5UQ@mail.gmail.com>
References: <847DFA46-F392-4565-B543-D86316283D7A@cs.usfca.edu>
	<BANLkTi=hG8Zc-PwLU7mqiwSokiRNBUY5UQ@mail.gmail.com>
Message-ID: <C3F8457C-45EC-4ABC-9135-C2D59954147C@cs.usfca.edu>

Cool. let us know.
T
On Jun 20, 2011, at 12:18 AM, Michael Bedward wrote:

> Hi Ter,
> 
> I'm spending some time this evening / tomorrow morning (Sydney time)
> converting the Jiffle language over to ANTLR 3.4 / ST 4.0.3. Hope to
> be reporting back on complete success tomorrow :)
> 
> Michael
> 
> 
> On 20 June 2011 07:50, Terence Parr <parrt at cs.usfca.edu> wrote:
>> i'd like to release if it works for you folks...
>> Ter
>> _______________________________________________
>> stringtemplate-interest mailing list
>> stringtemplate-interest at antlr.org
>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>> 


From parrt at cs.usfca.edu  Mon Jun 20 11:40:45 2011
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon, 20 Jun 2011 11:40:45 -0700
Subject: [stringtemplate-interest] Dynamic binding of templates?
In-Reply-To: <4DEB748C.70100@lancaster.ac.uk>
References: <4DEB6EA8.1030105@lancaster.ac.uk>
	<4DEB729C.9070702@lancaster.ac.uk> <4DEB748C.70100@lancaster.ac.uk>
Message-ID: <A3F5A0E9-46A3-4B94-8191-4F7644A08FFD@cs.usfca.edu>

coorect. no interfaces. turns out they added nothing and were annoying on antlr project. counterintuitive, eh?
T
On Jun 5, 2011, at 5:20 AM, Sam Barnett-Cormack wrote:

> Also, am I right from my scanning of docs that interfaces aren't around 
> anymore in ST4? If so, what's the reasoning behind that?
> 
> On 05/06/2011 13:12, Sam Barnett-Cormack wrote:
>> On 05/06/2011 12:55, Sam Barnett-Cormack wrote:
>>> I want the extension templates to actually be satisfying some abstract
>>> interface and be called by the core templates. So a core template might
>>> only know that it's going to invoke 'some item template', and then it
>>> will invoke a specific template that was not even conceived off at the
>>> time the core template was written. The immediate idea that occurs to me
>>> is if it were possible to pass a template reference as a parameter and
>>> invoke it, but that would be kind of awkward and still hard to use, as
>>> it would have to be passed down through any external templates (although
>>> it could be deeper in a data structure, so it's possible - say that the
>>> core template just receives a list of items, and the template reference
>>> is a member of the item data structure, and so forth - maybe this could
>>> be done through invoking a 'getOutput' method on the item that invokes
>>> its own template, which may then invoke core templates perhaps, and then
>>> is just used as a string for output). Is anything like this possible?
>> 
>> And as I scan docs I can see that this element can be handled by the
>> syntax<(expr)(argument-list)>... that's embarassing... but thoughts and
>> ideas on the whole lot are still welcome.
>> 
>> Sam
>> 
>> _______________________________________________
>> stringtemplate-interest mailing list
>> stringtemplate-interest at antlr.org
>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
> 
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest


From parrt at cs.usfca.edu  Mon Jun 20 11:43:15 2011
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon, 20 Jun 2011 11:43:15 -0700
Subject: [stringtemplate-interest] Defer definition of a parameter in a
	StringTemplate function
In-Reply-To: <BANLkTimq00qzi9wdTUv+ka=r4Qc0KDLiXg@mail.gmail.com>
References: <BANLkTimq00qzi9wdTUv+ka=r4Qc0KDLiXg@mail.gmail.com>
Message-ID: <5F1D7DB7-6AB6-4589-824A-5D3D35F5F114@cs.usfca.edu>

I can suggest creating different id parameters, one for toplevel and one for lowlevel. then use <topid>_<lowid>.
Ter
On Jun 3, 2011, at 11:45 AM, Jose Juan Tapia wrote:

> So suppose I want to produce the following output with a Stringtemplate
> 
> <TopLevel id="T1">
>   <LowLevel id="T1_L1"/>
> </TopLevel>
> <TopLevel id="T2">
>   <LowLevel id="T2_L1"/>
>   <LowLevel id="T2_L2"/>
> </TopLevel>
> 
> 
> Right now my Stringtemplate grammar looks something like this
> 
> Root(id,topCollection)::<<
> <topCollection; separator="\n">
>>> 
> 
> Top(id,lowCollection)::<<
>  \<TopLevel id="T<id>"\>
>  <lowCollection; separator="\n">
> \</TopLevel\>
>>> 
> 
> Low(id)::=<<
> \<LowerLevel id="<id>"\/>
>>> 
> 
> With things being defined separately through an ANTLR grammar in a
> bottom up fashion. (So when all the LowLevel tags
> of a given TopLevel section are created, they are passed to the upper
> level of the grammar as an array of stringTemplates).
> 
> 
> My problem right now with this definition is doesn't manage the id's
> correctly at all. I was wondering if there was a way to defer the
> definition of the Low function id parameter and define it latter on
> StringTemplate itself , something like
> 
>   <topCollection(id="T<i>"); separator="\n">
> 
> <lowCollection(id="<id>_L<i>"; separator="\n">
> 
> 
> An alternative solution to this would be to manage all the indexing
> from ANTLR instead of using the <i> tag (which is what
> I'm doing right now), but I think using ANTLR for keeping the indexing
> would be messier (since there are several nested levels of indexing in
> my true grammar) so I was wondering if there was a way to do this with
> StringTemplate.
> 
> -- 
> Jos? Juan Tapia Valenzuela
> Research Associate
> University of Pittsburgh
> 3076.1 Biological Sciences Tower 3
> Pittsburgh, Pa 15260
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest


From ub at abego-software.de  Tue Jun 21 01:17:42 2011
From: ub at abego-software.de (Udo Borkowski)
Date: Tue, 21 Jun 2011 10:17:42 +0200
Subject: [stringtemplate-interest] Group Syntax extension for ModelAdapter
	and Renderer
Message-ID: <22302E49-6669-4311-8024-99B17674A80F@abego-software.de>

Hi,

currently we programmatically register ModelAdapters and Renderers to an STGroup.

What about providing an extension to the syntax of Group to also define these in a Group file?

E.g. I could imagine to use something like

adapter "org.w3c.dom.Node" "com.collinfagan.strum.adapters.xml.NodeModelAdapter"
renderer "org.w3c.dom.Node" "com.collinfagan.strum.adapters.xml.NodeRenderer"

at the top of an Group file. This would mean the same as running this Java code for the group:

group.registerRenderer(org.w3c.dom.Node.class, new com.collinfagan.strum.adapters.xml.NodeRenderer()); 
group.registerModelAdaptor(org.w3c.dom.Node.class, new com.collinfagan.strum.adapters.xml.NodeModelAdapter()); 

Especially when importing groups this feature comes in handy as I cannot register adapters/renderers when importing. In these cases I must rely on the root group. For this group R we must register ALL adapters/renders used in ANY group R imports. This make things hard to maintain as using a "new" renderer in some template T requires me to add the "registerRenderer" in EVERY code using T, maybe indirectly through imports.

Similar to features discussed earlier this feature is easy to implement for the STGroupFile, but the STGroupDir currently has no proper place to hold this information. So we may also need to tackle this re-appearing topic, too.


What do others think?

Udo

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20110621/12cb47cb/attachment.html 

From daniel.brenner at cas.de  Tue Jun 21 04:51:58 2011
From: daniel.brenner at cas.de (Daniel Brenner)
Date: Tue, 21 Jun 2011 13:51:58 +0200
Subject: [stringtemplate-interest] NullPointerException from
	stgroup.getInstance()
Message-ID: <380-220116221115158660@cas.de>

Hi everybody,

after a long time I want to use stringtemplate in one of my projects againg. I worked with stringtemplate v2 and the early versions of 3. However, it seems that I cannot get v4 working.

This is my scenario:
In the folder "content/" there is the template file "decl.st" containing a very easy HTML page

<html>
<head>
<title>$title$</title>
</head>
<body>
<h1>$title$</h1>
</body>
</html>


The source code with stringtemplate v3 is this

StringTemplateGroup group = new StringTemplateGroup(null, "content/", DefaultTemplateLexer.class);
StringTemplate template = group.getInstanceOf("decl");
template.setAttribute("title", "Hello World");

And it works perfectly fine.

The equivalent in stringtemplate v4 (4.0.2) is - from what I figured and please correct me if I am wrong - 

STGroup group = new STGroupDir("content", '$', '$');
ST template = group.getInstanceOf("decl");	
template.add("title", "Hello World");

Now when I run this, I am seeing a NullPointerException:

Exception in thread "main" java.lang.NullPointerException
	at org.stringtemplate.v4.STGroup.loadTemplateFile(STGroup.java:624)
	at org.stringtemplate.v4.STGroupDir.loadTemplateFile(STGroupDir.java:165)
	at org.stringtemplate.v4.STGroupDir.load(STGroupDir.java:127)
	at org.stringtemplate.v4.STGroup.lookupTemplate(STGroup.java:226)
	at org.stringtemplate.v4.STGroup.getInstanceOf(STGroup.java:160)
	at Fancy.main(Fancy.java:15)

Also with stringtemplate v4.0.3 I am seeing the NPE.

What did I do wrong? I want to use v4 because of its cool new feature.

Alongside with the NullPointerException I get the following output in my eclipse console:

decl.st 1:1: invalid character '<'
decl.st 1:5: invalid character '>'
decl.st 2:1: invalid character '<'
decl.st 1:1: no viable alternative at input 'html'
decl.st 2:5: invalid character '>'
decl.st 3:1: invalid character '<'
decl.st 3:6: invalid character '>'
decl.st 3:7: invalid character '$'
decl.st 3:13: invalid character '$'
decl.st 3:15: invalid character '<'
decl.st 3:16: invalid character '/'
decl.st 3:21: invalid character '>'
decl.st 4:1: invalid character '<'
decl.st 4:2: invalid character '/'
decl.st 4:6: invalid character '>'
decl.st 5:1: invalid character '<'
decl.st 5:5: invalid character '>'
decl.st 6:1: invalid character '<'
decl.st 6:3: invalid character '>'
decl.st 6:4: invalid character '$'
decl.st 6:10: invalid character '$'
decl.st 6:12: invalid character '<'
decl.st 6:13: invalid character '/'
decl.st 6:15: invalid character '>'
decl.st 7:1: invalid character '<'
decl.st 7:2: invalid character '/'
decl.st 7:6: invalid character '>'
decl.st 8:1: invalid character '<'
decl.st 8:2: invalid character '/'
decl.st 8:6: invalid character '>'

What is this all about?

Thanks in advance and cheers,

- Daniel


From parrt at cs.usfca.edu  Tue Jun 21 09:55:41 2011
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue, 21 Jun 2011 09:55:41 -0700
Subject: [stringtemplate-interest] anybody tried ST 4.0.3 yet?
In-Reply-To: <BANLkTikfnTMfaDRoXV-H=grkp_1koYbzxQ@mail.gmail.com>
References: <847DFA46-F392-4565-B543-D86316283D7A@cs.usfca.edu>
	<BANLkTi=hG8Zc-PwLU7mqiwSokiRNBUY5UQ@mail.gmail.com>
	<C3F8457C-45EC-4ABC-9135-C2D59954147C@cs.usfca.edu>
	<BANLkTikfnTMfaDRoXV-H=grkp_1koYbzxQ@mail.gmail.com>
Message-ID: <546CF97C-6CB4-463B-9486-91941F22C528@cs.usfca.edu>

hooray. i found 1 bug yesterday. now to track it down.
T
On Jun 20, 2011, at 10:42 PM, Michael Bedward wrote:

> Works for me. Using ANTLR 3.4 and ST 4.0.3 my Jiffle project builds
> and all tests pass.
> 
> Michael
> 
> On 21 June 2011 04:39, Terence Parr <parrt at cs.usfca.edu> wrote:
>> Cool. let us know.
>> T
>> On Jun 20, 2011, at 12:18 AM, Michael Bedward wrote:
>> 
>>> Hi Ter,
>>> 
>>> I'm spending some time this evening / tomorrow morning (Sydney time)
>>> converting the Jiffle language over to ANTLR 3.4 / ST 4.0.3. Hope to
>>> be reporting back on complete success tomorrow :)
>>> 
>>> Michael
>>> 
>>> 
>>> On 20 June 2011 07:50, Terence Parr <parrt at cs.usfca.edu> wrote:
>>>> i'd like to release if it works for you folks...
>>>> Ter
>>>> _______________________________________________
>>>> stringtemplate-interest mailing list
>>>> stringtemplate-interest at antlr.org
>>>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>>>> 
>> 
>> _______________________________________________
>> stringtemplate-interest mailing list
>> stringtemplate-interest at antlr.org
>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>> 


From parrt at cs.usfca.edu  Tue Jun 21 09:57:33 2011
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue, 21 Jun 2011 09:57:33 -0700
Subject: [stringtemplate-interest] NullPointerException from
	stgroup.getInstance()
In-Reply-To: <380-220116221115158660@cas.de>
References: <380-220116221115158660@cas.de>
Message-ID: <981929E1-C2D0-40E9-8BC9-C04C7246B146@cs.usfca.edu>

hi. do you have a header in each .st file?  I might make a backward compat thing but you need a formal header for now

t(args) ::= <<
template
>>

T
On Jun 21, 2011, at 4:51 AM, Daniel Brenner wrote:

> Hi everybody,
> 
> after a long time I want to use stringtemplate in one of my projects againg. I worked with stringtemplate v2 and the early versions of 3. However, it seems that I cannot get v4 working.
> 
> This is my scenario:
> In the folder "content/" there is the template file "decl.st" containing a very easy HTML page
> 
> <html>
> <head>
> <title>$title$</title>
> </head>
> <body>
> <h1>$title$</h1>
> </body>
> </html>
> 
> 
> The source code with stringtemplate v3 is this
> 
> StringTemplateGroup group = new StringTemplateGroup(null, "content/", DefaultTemplateLexer.class);
> StringTemplate template = group.getInstanceOf("decl");
> template.setAttribute("title", "Hello World");
> 
> And it works perfectly fine.
> 
> The equivalent in stringtemplate v4 (4.0.2) is - from what I figured and please correct me if I am wrong - 
> 
> STGroup group = new STGroupDir("content", '$', '$');
> ST template = group.getInstanceOf("decl");	
> template.add("title", "Hello World");
> 
> Now when I run this, I am seeing a NullPointerException:
> 
> Exception in thread "main" java.lang.NullPointerException
> 	at org.stringtemplate.v4.STGroup.loadTemplateFile(STGroup.java:624)
> 	at org.stringtemplate.v4.STGroupDir.loadTemplateFile(STGroupDir.java:165)
> 	at org.stringtemplate.v4.STGroupDir.load(STGroupDir.java:127)
> 	at org.stringtemplate.v4.STGroup.lookupTemplate(STGroup.java:226)
> 	at org.stringtemplate.v4.STGroup.getInstanceOf(STGroup.java:160)
> 	at Fancy.main(Fancy.java:15)
> 
> Also with stringtemplate v4.0.3 I am seeing the NPE.
> 
> What did I do wrong? I want to use v4 because of its cool new feature.
> 
> Alongside with the NullPointerException I get the following output in my eclipse console:
> 
> decl.st 1:1: invalid character '<'
> decl.st 1:5: invalid character '>'
> decl.st 2:1: invalid character '<'
> decl.st 1:1: no viable alternative at input 'html'
> decl.st 2:5: invalid character '>'
> decl.st 3:1: invalid character '<'
> decl.st 3:6: invalid character '>'
> decl.st 3:7: invalid character '$'
> decl.st 3:13: invalid character '$'
> decl.st 3:15: invalid character '<'
> decl.st 3:16: invalid character '/'
> decl.st 3:21: invalid character '>'
> decl.st 4:1: invalid character '<'
> decl.st 4:2: invalid character '/'
> decl.st 4:6: invalid character '>'
> decl.st 5:1: invalid character '<'
> decl.st 5:5: invalid character '>'
> decl.st 6:1: invalid character '<'
> decl.st 6:3: invalid character '>'
> decl.st 6:4: invalid character '$'
> decl.st 6:10: invalid character '$'
> decl.st 6:12: invalid character '<'
> decl.st 6:13: invalid character '/'
> decl.st 6:15: invalid character '>'
> decl.st 7:1: invalid character '<'
> decl.st 7:2: invalid character '/'
> decl.st 7:6: invalid character '>'
> decl.st 8:1: invalid character '<'
> decl.st 8:2: invalid character '/'
> decl.st 8:6: invalid character '>'
> 
> What is this all about?
> 
> Thanks in advance and cheers,
> 
> - Daniel
> 
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest


From daniel.brenner at cas.de  Tue Jun 21 10:35:32 2011
From: daniel.brenner at cas.de (Daniel Brenner)
Date: Tue, 21 Jun 2011 19:35:32 +0200
Subject: [stringtemplate-interest] [RE:] Re: NullPointerException from
	stgroup.getInstance()
Message-ID: <380-220116221173532603@cas.de>

hi Ter,

tried it. Now, "decl.st" looks like

t(args) ::= <<
<html>
<head>
<title>$title$</title>
</head>
<body>
<h1>$title$</h1>
</body>
</html>
>>

and it still keeps giving me the NPE.

Cheers,

- Daniel



	-----Urspr?ngliche Nachricht-----
	Von: Terence Parr mailto:parrt at cs.usfca.edu
	Gesendet: 21.06.2011 19:28:10
	An: Daniel Brenner mailto:daniel.brenner at cas.de
	Cc:  mailto:stringtemplate-interest at antlr.org
	Betreff: [RE:] Re: [stringtemplate-interest] NullPointerException from stgroup.getInstance()

	hi. do you have a header in each .st file?  I might make a backward compat thing but you need a formal header for now

	t(args) ::= <<
	template
	>>

	T
	On Jun 21, 2011, at 4:51 AM, Daniel Brenner wrote:

	> Hi everybody,
	> 
	> after a long time I want to use stringtemplate in one of my projects againg. I worked with stringtemplate v2 and the early versions of 3. However, it seems that I cannot get v4 working.
	> 
	> This is my scenario:
	> In the folder "content/" there is the template file "decl.st" containing a very easy HTML page
	> 
	> <html>
	> <head>
	> <title>$title$</title>
	> </head>
	> <body>
	> <h1>$title$</h1>
	> </body>
	> </html>
	> 
	> 
	> The source code with stringtemplate v3 is this
	> 
	> StringTemplateGroup group = new StringTemplateGroup(null, "content/", DefaultTemplateLexer.class);
	> StringTemplate template = group.getInstanceOf("decl");
	> template.setAttribute("title", "Hello World");
	> 
	> And it works perfectly fine.
	> 
	> The equivalent in stringtemplate v4 (4.0.2) is - from what I figured and please correct me if I am wrong - 
	> 
	> STGroup group = new STGroupDir("content", '$', '$');
	> ST template = group.getInstanceOf("decl");	
	> template.add("title", "Hello World");
	> 
	> Now when I run this, I am seeing a NullPointerException:
	> 
	> Exception in thread "main" java.lang.NullPointerException
	> 	at org.stringtemplate.v4.STGroup.loadTemplateFile(STGroup.java:624)
	> 	at org.stringtemplate.v4.STGroupDir.loadTemplateFile(STGroupDir.java:165)
	> 	at org.stringtemplate.v4.STGroupDir.load(STGroupDir.java:127)
	> 	at org.stringtemplate.v4.STGroup.lookupTemplate(STGroup.java:226)
	> 	at org.stringtemplate.v4.STGroup.getInstanceOf(STGroup.java:160)
	> 	at Fancy.main(Fancy.java:15)
	> 
	> Also with stringtemplate v4.0.3 I am seeing the NPE.
	> 
	> What did I do wrong? I want to use v4 because of its cool new feature.
	> 
	> Alongside with the NullPointerException I get the following output in my eclipse console:
	> 
	> decl.st 1:1: invalid character '<'
	> decl.st 1:5: invalid character '>'
	> decl.st 2:1: invalid character '<'
	> decl.st 1:1: no viable alternative at input 'html'
	> decl.st 2:5: invalid character '>'
	> decl.st 3:1: invalid character '<'
	> decl.st 3:6: invalid character '>'
	> decl.st 3:7: invalid character '$'
	> decl.st 3:13: invalid character '$'
	> decl.st 3:15: invalid character '<'
	> decl.st 3:16: invalid character '/'
	> decl.st 3:21: invalid character '>'
	> decl.st 4:1: invalid character '<'
	> decl.st 4:2: invalid character '/'
	> decl.st 4:6: invalid character '>'
	> decl.st 5:1: invalid character '<'
	> decl.st 5:5: invalid character '>'
	> decl.st 6:1: invalid character '<'
	> decl.st 6:3: invalid character '>'
	> decl.st 6:4: invalid character '$'
	> decl.st 6:10: invalid character '$'
	> decl.st 6:12: invalid character '<'
	> decl.st 6:13: invalid character '/'
	> decl.st 6:15: invalid character '>'
	> decl.st 7:1: invalid character '<'
	> decl.st 7:2: invalid character '/'
	> decl.st 7:6: invalid character '>'
	> decl.st 8:1: invalid character '<'
	> decl.st 8:2: invalid character '/'
	> decl.st 8:6: invalid character '>'
	> 
	> What is this all about?
	> 
	> Thanks in advance and cheers,
	> 
	> - Daniel
	> 
	> _______________________________________________
	> stringtemplate-interest mailing list
	> stringtemplate-interest at antlr.org
	>  http://www.antlr.org/mailman/listinfo/stringtemplate-interest




From parrt at cs.usfca.edu  Tue Jun 21 11:12:58 2011
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue, 21 Jun 2011 11:12:58 -0700
Subject: [stringtemplate-interest] [RE:] Re: NullPointerException from
	stgroup.getInstance()
In-Reply-To: <380-220116221173532603@cas.de>
References: <380-220116221173532603@cas.de>
Message-ID: <CCD7004E-9444-4E79-BFDD-759D437512C2@cs.usfca.edu>

well, you really want

decl(title, body) ::= ...

right? ;)

no errors other than NPE?
T
On Jun 21, 2011, at 10:35 AM, Daniel Brenner wrote:

> hi Ter,
> 
> tried it. Now, "decl.st" looks like
> 
> t(args) ::= <<
> <html>
> <head>
> <title>$title$</title>
> </head>
> <body>
> <h1>$title$</h1>
> </body>
> </html>
>>> 
> 
> and it still keeps giving me the NPE.
> 
> Cheers,
> 
> - Daniel
> 
> 
> 
> 	-----Urspr?ngliche Nachricht-----
> 	Von: Terence Parr mailto:parrt at cs.usfca.edu
> 	Gesendet: 21.06.2011 19:28:10
> 	An: Daniel Brenner mailto:daniel.brenner at cas.de
> 	Cc:  mailto:stringtemplate-interest at antlr.org
> 	Betreff: [RE:] Re: [stringtemplate-interest] NullPointerException from stgroup.getInstance()
> 
> 	hi. do you have a header in each .st file?  I might make a backward compat thing but you need a formal header for now
> 
> 	t(args) ::= <<
> 	template
> 	>>
> 
> 	T
> 	On Jun 21, 2011, at 4:51 AM, Daniel Brenner wrote:
> 
> 	> Hi everybody,
> 	> 
> 	> after a long time I want to use stringtemplate in one of my projects againg. I worked with stringtemplate v2 and the early versions of 3. However, it seems that I cannot get v4 working.
> 	> 
> 	> This is my scenario:
> 	> In the folder "content/" there is the template file "decl.st" containing a very easy HTML page
> 	> 
> 	> <html>
> 	> <head>
> 	> <title>$title$</title>
> 	> </head>
> 	> <body>
> 	> <h1>$title$</h1>
> 	> </body>
> 	> </html>
> 	> 
> 	> 
> 	> The source code with stringtemplate v3 is this
> 	> 
> 	> StringTemplateGroup group = new StringTemplateGroup(null, "content/", DefaultTemplateLexer.class);
> 	> StringTemplate template = group.getInstanceOf("decl");
> 	> template.setAttribute("title", "Hello World");
> 	> 
> 	> And it works perfectly fine.
> 	> 
> 	> The equivalent in stringtemplate v4 (4.0.2) is - from what I figured and please correct me if I am wrong - 
> 	> 
> 	> STGroup group = new STGroupDir("content", '$', '$');
> 	> ST template = group.getInstanceOf("decl");	
> 	> template.add("title", "Hello World");
> 	> 
> 	> Now when I run this, I am seeing a NullPointerException:
> 	> 
> 	> Exception in thread "main" java.lang.NullPointerException
> 	> 	at org.stringtemplate.v4.STGroup.loadTemplateFile(STGroup.java:624)
> 	> 	at org.stringtemplate.v4.STGroupDir.loadTemplateFile(STGroupDir.java:165)
> 	> 	at org.stringtemplate.v4.STGroupDir.load(STGroupDir.java:127)
> 	> 	at org.stringtemplate.v4.STGroup.lookupTemplate(STGroup.java:226)
> 	> 	at org.stringtemplate.v4.STGroup.getInstanceOf(STGroup.java:160)
> 	> 	at Fancy.main(Fancy.java:15)
> 	> 
> 	> Also with stringtemplate v4.0.3 I am seeing the NPE.
> 	> 
> 	> What did I do wrong? I want to use v4 because of its cool new feature.
> 	> 
> 	> Alongside with the NullPointerException I get the following output in my eclipse console:
> 	> 
> 	> decl.st 1:1: invalid character '<'
> 	> decl.st 1:5: invalid character '>'
> 	> decl.st 2:1: invalid character '<'
> 	> decl.st 1:1: no viable alternative at input 'html'
> 	> decl.st 2:5: invalid character '>'
> 	> decl.st 3:1: invalid character '<'
> 	> decl.st 3:6: invalid character '>'
> 	> decl.st 3:7: invalid character '$'
> 	> decl.st 3:13: invalid character '$'
> 	> decl.st 3:15: invalid character '<'
> 	> decl.st 3:16: invalid character '/'
> 	> decl.st 3:21: invalid character '>'
> 	> decl.st 4:1: invalid character '<'
> 	> decl.st 4:2: invalid character '/'
> 	> decl.st 4:6: invalid character '>'
> 	> decl.st 5:1: invalid character '<'
> 	> decl.st 5:5: invalid character '>'
> 	> decl.st 6:1: invalid character '<'
> 	> decl.st 6:3: invalid character '>'
> 	> decl.st 6:4: invalid character '$'
> 	> decl.st 6:10: invalid character '$'
> 	> decl.st 6:12: invalid character '<'
> 	> decl.st 6:13: invalid character '/'
> 	> decl.st 6:15: invalid character '>'
> 	> decl.st 7:1: invalid character '<'
> 	> decl.st 7:2: invalid character '/'
> 	> decl.st 7:6: invalid character '>'
> 	> decl.st 8:1: invalid character '<'
> 	> decl.st 8:2: invalid character '/'
> 	> decl.st 8:6: invalid character '>'
> 	> 
> 	> What is this all about?
> 	> 
> 	> Thanks in advance and cheers,
> 	> 
> 	> - Daniel
> 	> 
> 	> _______________________________________________
> 	> stringtemplate-interest mailing list
> 	> stringtemplate-interest at antlr.org
> 	>  http://www.antlr.org/mailman/listinfo/stringtemplate-interest
> 
> 
> 
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest


From parrt at cs.usfca.edu  Tue Jun 21 13:33:23 2011
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue, 21 Jun 2011 13:33:23 -0700
Subject: [stringtemplate-interest] ST 4.0.3 released!
Message-ID: <A325F98D-A78F-4D64-8581-8E972CE1C60C@cs.usfca.edu>

get it while it's hot.

http://bit.ly/jwdkmF

Mainly bug fixes and stuff needed to get ANTLR 3.4 out the door.

Ter

From sharwell at pixelminegames.com  Tue Jun 21 15:30:27 2011
From: sharwell at pixelminegames.com (Sam Harwell)
Date: Tue, 21 Jun 2011 17:30:27 -0500
Subject: [stringtemplate-interest] ST 4.0.3 released!
In-Reply-To: <A325F98D-A78F-4D64-8581-8E972CE1C60C@cs.usfca.edu>
References: <A325F98D-A78F-4D64-8581-8E972CE1C60C@cs.usfca.edu>
Message-ID: <063201cc3062$d2b6def0$78249cd0$@pixelminegames.com>

Awesome! I'll release the C# version at the same time as I release ANTLR
3.4. :)

-----Original Message-----
From: stringtemplate-interest-bounces at antlr.org
[mailto:stringtemplate-interest-bounces at antlr.org] On Behalf Of Terence Parr
Sent: Tuesday, June 21, 2011 3:33 PM
To: stringtemplate-interest List
Subject: [stringtemplate-interest] ST 4.0.3 released!

get it while it's hot.

http://bit.ly/jwdkmF

Mainly bug fixes and stuff needed to get ANTLR 3.4 out the door.

Ter
_______________________________________________
stringtemplate-interest mailing list
stringtemplate-interest at antlr.org
http://www.antlr.org/mailman/listinfo/stringtemplate-interest


From daniel.brenner at cas.de  Wed Jun 22 11:09:40 2011
From: daniel.brenner at cas.de (Daniel Brenner)
Date: Wed, 22 Jun 2011 20:09:40 +0200
Subject: [stringtemplate-interest] [RE:] Re: [RE:] Re: NullPointerException
	from stgroup.getInstance()
Message-ID: <380-22011632218940864@cas.de>

thanks alot. It's running smoothly now.

I checked again: the "Five minute introduction" does not contain the hint that such a header is required.

Thanks again,

- Daniel



	-----Urspr?ngliche Nachricht-----
	Von: Terence Parr mailto:parrt at cs.usfca.edu
	Gesendet: 21.06.2011 20:13:17
	An: stringtemplate-interest List mailto:stringtemplate-interest at antlr.org
	Betreff: [RE:] Re: [stringtemplate-interest] [RE:] Re: NullPointerException from stgroup.getInstance()

	well, you really want

	decl(title, body) ::= ...

	right? ;)

	no errors other than NPE?
	T
	On Jun 21, 2011, at 10:35 AM, Daniel Brenner wrote:

	> hi Ter,
	> 
	> tried it. Now, "decl.st" looks like
	> 
	> t(args) ::= <<
	> <html>
	> <head>
	> <title>$title$</title>
	> </head>
	> <body>
	> <h1>$title$</h1>
	> </body>
	> </html>
	>>> 
	> 
	> and it still keeps giving me the NPE.
	> 
	> Cheers,
	> 
	> - Daniel
	> 
	> 
	> 
	> 	-----Urspr?ngliche Nachricht-----
	> 	Von: Terence Parr  mailto:parrt at cs.usfca.edu
	> 	Gesendet: 21.06.2011 19:28:10
	> 	An: Daniel Brenner mailto:daniel.brenner at cas.de
	> 	Cc:  mailto:stringtemplate-interest at antlr.org
	> 	Betreff: [RE:] Re: [stringtemplate-interest] NullPointerException from stgroup.getInstance()
	> 
	> 	hi. do you have a header in each .st file?  I might make a backward compat thing but you need a formal header for now
	> 
	> 	t(args) ::= <<
	> 	template
	> 	>>
	> 
	> 	T
	> 	On Jun 21, 2011, at 4:51 AM, Daniel Brenner wrote:
	> 
	> 	> Hi everybody,
	> 	> 
	> 	> after a long time I want to use stringtemplate in one of my projects againg. I worked with stringtemplate v2 and the early versions of 3. However, it seems that I cannot get v4 working.
	> 	> 
	> 	> This is my scenario:
	> 	> In the folder "content/" there is the template file "decl.st" containing a very easy HTML page
	> 	> 
	> 	> <html>
	> 	> <head>
	> 	> <title>$title$</title>
	> 	> </head>
	> 	> <body>
	> 	> <h1>$title$</h1>
	> 	> </body>
	> 	> </html>
	> 	> 
	> 	> 
	> 	> The source code with stringtemplate v3 is this
	> 	> 
	> 	> StringTemplateGroup group = new StringTemplateGroup(null, "content/", DefaultTemplateLexer.class);
	> 	> StringTemplate template = group.getInstanceOf("decl");
	> 	> template.setAttribute("title", "Hello World");
	> 	> 
	> 	> And it works perfectly fine.
	> 	> 
	> 	> The equivalent in stringtemplate v4 (4.0.2) is - from what I figured and please correct me if I am wrong - 
	> 	> 
	> 	> STGroup group = new STGroupDir("content", '$', '$');
	> 	> ST template = group.getInstanceOf("decl");	
	> 	> template.add("title", "Hello World");
	> 	> 
	> 	> Now when I run this, I am seeing a NullPointerException:
	> 	> 
	> 	> Exception in thread "main" java.lang.NullPointerException
	> 	> 	at org.stringtemplate.v4.STGroup.loadTemplateFile(STGroup.java:624)
	> 	> 	at org.stringtemplate.v4.STGroupDir.loadTemplateFile(STGroupDir.java:165)
	> 	> 	at org.stringtemplate.v4.STGroupDir.load(STGroupDir.java:127)
	> 	> 	at org.stringtemplate.v4.STGroup.lookupTemplate(STGroup.java:226)
	> 	> 	at org.stringtemplate.v4.STGroup.getInstanceOf(STGroup.java:160)
	> 	> 	at Fancy.main(Fancy.java:15)
	> 	> 
	> 	> Also with stringtemplate v4.0.3 I am seeing the NPE.
	> 	> 
	> 	> What did I do wrong? I want to use v4 because of its cool new feature.
	> 	> 
	> 	> Alongside with the NullPointerException I get the following output in my eclipse console:
	> 	> 
	> 	> decl.st 1:1: invalid character '<'
	> 	> decl.st 1:5: invalid character '>'
	> 	> decl.st 2:1: invalid character '<'
	> 	> decl.st 1:1: no viable alternative at input 'html'
	> 	> decl.st 2:5: invalid character '>'
	> 	> decl.st 3:1: invalid character '<'
	> 	> decl.st 3:6: invalid character '>'
	> 	> decl.st 3:7: invalid character '$'
	> 	> decl.st 3:13: invalid character '$'
	> 	> decl.st 3:15: invalid character '<'
	> 	> decl.st 3:16: invalid character '/'
	> 	> decl.st 3:21: invalid character '>'
	> 	> decl.st 4:1: invalid character '<'
	> 	> decl.st 4:2: invalid character '/'
	> 	> decl.st 4:6: invalid character '>'
	> 	> decl.st 5:1: invalid character '<'
	> 	> decl.st 5:5: invalid character '>'
	> 	> decl.st 6:1: invalid character '<'
	> 	> decl.st 6:3: invalid character '>'
	> 	> decl.st 6:4: invalid character '$'
	> 	> decl.st 6:10: invalid character '$'
	> 	> decl.st 6:12: invalid character '<'
	> 	> decl.st 6:13: invalid character '/'
	> 	> decl.st 6:15: invalid character '>'
	> 	> decl.st 7:1: invalid character '<'
	> 	> decl.st 7:2: invalid character '/'
	> 	> decl.st 7:6: invalid character '>'
	> 	> decl.st 8:1: invalid character '<'
	> 	> decl.st 8:2: invalid character '/'
	> 	> decl.st 8:6: invalid character '>'
	> 	> 
	> 	> What is this all about?
	> 	> 
	> 	> Thanks in advance and cheers,
	> 	> 
	> 	> - Daniel
	> 	> 
	> 	> _______________________________________________
	> 	> stringtemplate-interest mailing list
	> 	> stringtemplate-interest at antlr.org
	> 	>  http://www.antlr.org/mailman/listinfo/stringtemplate-interest
	> 
	> 
	> 
	> _______________________________________________
	> stringtemplate-interest mailing list
	> stringtemplate-interest at antlr.org
	> http://www.antlr.org/mailman/listinfo/stringtemplate-interest

	_______________________________________________
	stringtemplate-interest mailing list
	stringtemplate-interest at antlr.org
	http://www.antlr.org/mailman/listinfo/stringtemplate-interest



From parrt at cs.usfca.edu  Wed Jun 22 11:39:14 2011
From: parrt at cs.usfca.edu (Terence Parr)
Date: Wed, 22 Jun 2011 11:39:14 -0700
Subject: [stringtemplate-interest] [RE:] Re: [RE:] Re:
	NullPointerException from stgroup.getInstance()
In-Reply-To: <380-22011632218940864@cas.de>
References: <380-22011632218940864@cas.de>
Message-ID: <EDD83A9F-05F9-4E31-9C41-E30B834BCD9E@cs.usfca.edu>

but it does say "v3 not v4" at top ;)
Ter
On Jun 22, 2011, at 11:09 AM, Daniel Brenner wrote:

> thanks alot. It's running smoothly now.
> 
> I checked again: the "Five minute introduction" does not contain the hint that such a header is required.
> 
> Thanks again,
> 
> - Daniel
> 
> 
> 
> 	-----Urspr?ngliche Nachricht-----
> 	Von: Terence Parr mailto:parrt at cs.usfca.edu
> 	Gesendet: 21.06.2011 20:13:17
> 	An: stringtemplate-interest List mailto:stringtemplate-interest at antlr.org
> 	Betreff: [RE:] Re: [stringtemplate-interest] [RE:] Re: NullPointerException from stgroup.getInstance()
> 
> 	well, you really want
> 
> 	decl(title, body) ::= ...
> 
> 	right? ;)
> 
> 	no errors other than NPE?
> 	T
> 	On Jun 21, 2011, at 10:35 AM, Daniel Brenner wrote:
> 
> 	> hi Ter,
> 	> 
> 	> tried it. Now, "decl.st" looks like
> 	> 
> 	> t(args) ::= <<
> 	> <html>
> 	> <head>
> 	> <title>$title$</title>
> 	> </head>
> 	> <body>
> 	> <h1>$title$</h1>
> 	> </body>
> 	> </html>
> 	>>> 
> 	> 
> 	> and it still keeps giving me the NPE.
> 	> 
> 	> Cheers,
> 	> 
> 	> - Daniel
> 	> 
> 	> 
> 	> 
> 	> 	-----Urspr?ngliche Nachricht-----
> 	> 	Von: Terence Parr  mailto:parrt at cs.usfca.edu
> 	> 	Gesendet: 21.06.2011 19:28:10
> 	> 	An: Daniel Brenner mailto:daniel.brenner at cas.de
> 	> 	Cc:  mailto:stringtemplate-interest at antlr.org
> 	> 	Betreff: [RE:] Re: [stringtemplate-interest] NullPointerException from stgroup.getInstance()
> 	> 
> 	> 	hi. do you have a header in each .st file?  I might make a backward compat thing but you need a formal header for now
> 	> 
> 	> 	t(args) ::= <<
> 	> 	template
> 	> 	>>
> 	> 
> 	> 	T
> 	> 	On Jun 21, 2011, at 4:51 AM, Daniel Brenner wrote:
> 	> 
> 	> 	> Hi everybody,
> 	> 	> 
> 	> 	> after a long time I want to use stringtemplate in one of my projects againg. I worked with stringtemplate v2 and the early versions of 3. However, it seems that I cannot get v4 working.
> 	> 	> 
> 	> 	> This is my scenario:
> 	> 	> In the folder "content/" there is the template file "decl.st" containing a very easy HTML page
> 	> 	> 
> 	> 	> <html>
> 	> 	> <head>
> 	> 	> <title>$title$</title>
> 	> 	> </head>
> 	> 	> <body>
> 	> 	> <h1>$title$</h1>
> 	> 	> </body>
> 	> 	> </html>
> 	> 	> 
> 	> 	> 
> 	> 	> The source code with stringtemplate v3 is this
> 	> 	> 
> 	> 	> StringTemplateGroup group = new StringTemplateGroup(null, "content/", DefaultTemplateLexer.class);
> 	> 	> StringTemplate template = group.getInstanceOf("decl");
> 	> 	> template.setAttribute("title", "Hello World");
> 	> 	> 
> 	> 	> And it works perfectly fine.
> 	> 	> 
> 	> 	> The equivalent in stringtemplate v4 (4.0.2) is - from what I figured and please correct me if I am wrong - 
> 	> 	> 
> 	> 	> STGroup group = new STGroupDir("content", '$', '$');
> 	> 	> ST template = group.getInstanceOf("decl");	
> 	> 	> template.add("title", "Hello World");
> 	> 	> 
> 	> 	> Now when I run this, I am seeing a NullPointerException:
> 	> 	> 
> 	> 	> Exception in thread "main" java.lang.NullPointerException
> 	> 	> 	at org.stringtemplate.v4.STGroup.loadTemplateFile(STGroup.java:624)
> 	> 	> 	at org.stringtemplate.v4.STGroupDir.loadTemplateFile(STGroupDir.java:165)
> 	> 	> 	at org.stringtemplate.v4.STGroupDir.load(STGroupDir.java:127)
> 	> 	> 	at org.stringtemplate.v4.STGroup.lookupTemplate(STGroup.java:226)
> 	> 	> 	at org.stringtemplate.v4.STGroup.getInstanceOf(STGroup.java:160)
> 	> 	> 	at Fancy.main(Fancy.java:15)
> 	> 	> 
> 	> 	> Also with stringtemplate v4.0.3 I am seeing the NPE.
> 	> 	> 
> 	> 	> What did I do wrong? I want to use v4 because of its cool new feature.
> 	> 	> 
> 	> 	> Alongside with the NullPointerException I get the following output in my eclipse console:
> 	> 	> 
> 	> 	> decl.st 1:1: invalid character '<'
> 	> 	> decl.st 1:5: invalid character '>'
> 	> 	> decl.st 2:1: invalid character '<'
> 	> 	> decl.st 1:1: no viable alternative at input 'html'
> 	> 	> decl.st 2:5: invalid character '>'
> 	> 	> decl.st 3:1: invalid character '<'
> 	> 	> decl.st 3:6: invalid character '>'
> 	> 	> decl.st 3:7: invalid character '$'
> 	> 	> decl.st 3:13: invalid character '$'
> 	> 	> decl.st 3:15: invalid character '<'
> 	> 	> decl.st 3:16: invalid character '/'
> 	> 	> decl.st 3:21: invalid character '>'
> 	> 	> decl.st 4:1: invalid character '<'
> 	> 	> decl.st 4:2: invalid character '/'
> 	> 	> decl.st 4:6: invalid character '>'
> 	> 	> decl.st 5:1: invalid character '<'
> 	> 	> decl.st 5:5: invalid character '>'
> 	> 	> decl.st 6:1: invalid character '<'
> 	> 	> decl.st 6:3: invalid character '>'
> 	> 	> decl.st 6:4: invalid character '$'
> 	> 	> decl.st 6:10: invalid character '$'
> 	> 	> decl.st 6:12: invalid character '<'
> 	> 	> decl.st 6:13: invalid character '/'
> 	> 	> decl.st 6:15: invalid character '>'
> 	> 	> decl.st 7:1: invalid character '<'
> 	> 	> decl.st 7:2: invalid character '/'
> 	> 	> decl.st 7:6: invalid character '>'
> 	> 	> decl.st 8:1: invalid character '<'
> 	> 	> decl.st 8:2: invalid character '/'
> 	> 	> decl.st 8:6: invalid character '>'
> 	> 	> 
> 	> 	> What is this all about?
> 	> 	> 
> 	> 	> Thanks in advance and cheers,
> 	> 	> 
> 	> 	> - Daniel
> 	> 	> 
> 	> 	> _______________________________________________
> 	> 	> stringtemplate-interest mailing list
> 	> 	> stringtemplate-interest at antlr.org
> 	> 	>  http://www.antlr.org/mailman/listinfo/stringtemplate-interest
> 	> 
> 	> 
> 	> 
> 	> _______________________________________________
> 	> stringtemplate-interest mailing list
> 	> stringtemplate-interest at antlr.org
> 	> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
> 
> 	_______________________________________________
> 	stringtemplate-interest mailing list
> 	stringtemplate-interest at antlr.org
> 	http://www.antlr.org/mailman/listinfo/stringtemplate-interest
> 
> 
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest


From croudet at gmail.com  Wed Jun 22 14:49:46 2011
From: croudet at gmail.com (Christophe Roudet)
Date: Wed, 22 Jun 2011 17:49:46 -0400
Subject: [stringtemplate-interest] Problem with ST 4.0.3
Message-ID: <BANLkTikOmbM_shtbyGvD-N5KV4BWryHgRg@mail.gmail.com>

Hello,

I have just upgraded to ST v4.0.3 and I have a template that was
working with 4.0.2 that no longer works
So have a template file:
ae.st:
ae(triggerUserList) ::= <<
    <triggerUserList:{u | <u>}>
>>

some test code:

 STGroup group = new STGroupDir("conf/emailTemplates");
  ST st = group.getInstanceOf("/html/ae");
  List<User> users = new ArrayList<User>();
  User u = new User();
  u.setUsername("u1");
  u.setEmail("u1 at email.com");
  users.add(u);
  u = new User();
  u.setUsername("u2");
  u.setEmail("u2 at email.com");
  users.add(u);
  st.add("triggerUserList", users);
  System.out.println(st.render());

I have some trace on the console:
context [/html/ae] 1:7 no such template: /html/_sub1
context [/html/ae] 1:23 passed 1 arg(s) to template null with 0 declared arg(s)
context [/html/ae] 1:7 passed 1 arg(s) to template null with 0 declared arg(s)
context [/html/ae] 1:7 passed 1 arg(s) to template null with 0 declared arg(s)

A similar template build like this works fine:
 STGroup g = new STGroup('$', '$');
  g.defineTemplate("test", "triggerUserList", "$triggerUserList:{u |
$u.username$ ($u.email$)}; separator=\", \"$");
  ST st = g.getInstanceOf("test");

Any idea,?

thanks,

Christophe

From parrt at cs.usfca.edu  Wed Jun 22 15:16:32 2011
From: parrt at cs.usfca.edu (Terence Parr)
Date: Wed, 22 Jun 2011 15:16:32 -0700
Subject: [stringtemplate-interest] Problem with ST 4.0.3
In-Reply-To: <BANLkTikOmbM_shtbyGvD-N5KV4BWryHgRg@mail.gmail.com>
References: <BANLkTikOmbM_shtbyGvD-N5KV4BWryHgRg@mail.gmail.com>
Message-ID: <E002E7D2-80E4-40EC-927B-AC58220B15B9@cs.usfca.edu>

crap. it should be defining /html/_sub1 not /_sub1 no doubt. ;)  Where were you last week! :D

let me try here.
T
On Jun 22, 2011, at 2:49 PM, Christophe Roudet wrote:

> Hello,
> 
> I have just upgraded to ST v4.0.3 and I have a template that was
> working with 4.0.2 that no longer works
> So have a template file:
> ae.st:
> ae(triggerUserList) ::= <<
>    <triggerUserList:{u | <u>}>
>>> 
> 
> some test code:
> 
> STGroup group = new STGroupDir("conf/emailTemplates");
>  ST st = group.getInstanceOf("/html/ae");
>  List<User> users = new ArrayList<User>();
>  User u = new User();
>  u.setUsername("u1");
>  u.setEmail("u1 at email.com");
>  users.add(u);
>  u = new User();
>  u.setUsername("u2");
>  u.setEmail("u2 at email.com");
>  users.add(u);
>  st.add("triggerUserList", users);
>  System.out.println(st.render());
> 
> I have some trace on the console:
> context [/html/ae] 1:7 no such template: /html/_sub1
> context [/html/ae] 1:23 passed 1 arg(s) to template null with 0 declared arg(s)
> context [/html/ae] 1:7 passed 1 arg(s) to template null with 0 declared arg(s)
> context [/html/ae] 1:7 passed 1 arg(s) to template null with 0 declared arg(s)
> 
> A similar template build like this works fine:
> STGroup g = new STGroup('$', '$');
>  g.defineTemplate("test", "triggerUserList", "$triggerUserList:{u |
> $u.username$ ($u.email$)}; separator=\", \"$");
>  ST st = g.getInstanceOf("test");
> 
> Any idea,?
> 
> thanks,
> 
> Christophe
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest


From parrt at cs.usfca.edu  Wed Jun 22 15:38:33 2011
From: parrt at cs.usfca.edu (Terence Parr)
Date: Wed, 22 Jun 2011 15:38:33 -0700
Subject: [stringtemplate-interest] Problem with ST 4.0.3
In-Reply-To: <BANLkTikOmbM_shtbyGvD-N5KV4BWryHgRg@mail.gmail.com>
References: <BANLkTikOmbM_shtbyGvD-N5KV4BWryHgRg@mail.gmail.com>
Message-ID: <C58FD0FB-730E-49EB-BA74-2C14FCB02275@cs.usfca.edu>

Ok, fixed. please try:

http://www.stringtemplate.org/depot/ST4/java/main/dist/ST-4.0.4.jar

Ter

On Jun 22, 2011, at 2:49 PM, Christophe Roudet wrote:

> Hello,
> 
> I have just upgraded to ST v4.0.3 and I have a template that was
> working with 4.0.2 that no longer works
> So have a template file:
> ae.st:
> ae(triggerUserList) ::= <<
>    <triggerUserList:{u | <u>}>
>>> 
> 
> some test code:
> 
> STGroup group = new STGroupDir("conf/emailTemplates");
>  ST st = group.getInstanceOf("/html/ae");
>  List<User> users = new ArrayList<User>();
>  User u = new User();
>  u.setUsername("u1");
>  u.setEmail("u1 at email.com");
>  users.add(u);
>  u = new User();
>  u.setUsername("u2");
>  u.setEmail("u2 at email.com");
>  users.add(u);
>  st.add("triggerUserList", users);
>  System.out.println(st.render());
> 
> I have some trace on the console:
> context [/html/ae] 1:7 no such template: /html/_sub1
> context [/html/ae] 1:23 passed 1 arg(s) to template null with 0 declared arg(s)
> context [/html/ae] 1:7 passed 1 arg(s) to template null with 0 declared arg(s)
> context [/html/ae] 1:7 passed 1 arg(s) to template null with 0 declared arg(s)
> 
> A similar template build like this works fine:
> STGroup g = new STGroup('$', '$');
>  g.defineTemplate("test", "triggerUserList", "$triggerUserList:{u |
> $u.username$ ($u.email$)}; separator=\", \"$");
>  ST st = g.getInstanceOf("test");
> 
> Any idea,?
> 
> thanks,
> 
> Christophe
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest


From jimi at temporal-wave.com  Wed Jun 22 17:50:29 2011
From: jimi at temporal-wave.com (Jim Idle)
Date: Wed, 22 Jun 2011 17:50:29 -0700
Subject: [stringtemplate-interest] Maven Artifacts for ST4
Message-ID: <1782489aa1d3080ab3b2637df753b6f8@mail.gmail.com>

All,



Please note that starting with 4.0.3 (just released to ANTLR repository, so
should make Central tonight all being well), the artifact name for ST4 has
changed to ST4 instead of stringtemplate. This is because it occupies a
different package space and may co-exist with stringtemplate 3 (for instance
ANTLR 3.4 requires this). I should have done this right at the start but did
not have time to think it through until now. Sorry for any confusion.



Here is a sample dependency:



        <dependency>

            <groupId>org.antlr</groupId>

            <artifactId>ST4</artifactId>

            <version>4.0.3</version>

            <scope>compile</scope>

        </dependency>



Jim
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20110622/a729b211/attachment.html 

From michael.bedward at gmail.com  Wed Jun 22 18:21:19 2011
From: michael.bedward at gmail.com (Michael Bedward)
Date: Thu, 23 Jun 2011 11:21:19 +1000
Subject: [stringtemplate-interest] Maven Artifacts for ST4
In-Reply-To: <1782489aa1d3080ab3b2637df753b6f8@mail.gmail.com>
References: <1782489aa1d3080ab3b2637df753b6f8@mail.gmail.com>
Message-ID: <BANLkTim7AEbkB2=UgW2LRqbqaVTiUvk3wg@mail.gmail.com>

Thanks very much Jim.

Michael

On 23 June 2011 10:50, Jim Idle <jimi at temporal-wave.com> wrote:
> All,
>
>
>
> Please note that starting with 4.0.3 (just released to ANTLR repository, so
> should make Central tonight all being well), the artifact name for ST4 has
> changed to ST4 instead of stringtemplate. This is because it occupies a
> different package space and may co-exist with stringtemplate 3 (for instance
> ANTLR 3.4 requires this). I should have done this right at the start but did
> not have time to think it through until now. Sorry for any confusion.
>
>
>
> Here is a sample dependency:
>
>
>
> ??????? <dependency>
>
> ??????????? <groupId>org.antlr</groupId>
>
> ??????????? <artifactId>ST4</artifactId>
>
> ??????????? <version>4.0.3</version>
>
> ??????????? <scope>compile</scope>
>
> ??????? </dependency>
>
>
>
> Jim
>
>
>
>
>
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>
>

From croudet at gmail.com  Thu Jun 23 07:13:02 2011
From: croudet at gmail.com (Christophe Roudet)
Date: Thu, 23 Jun 2011 10:13:02 -0400
Subject: [stringtemplate-interest] Problem with ST 4.0.3
In-Reply-To: <C58FD0FB-730E-49EB-BA74-2C14FCB02275@cs.usfca.edu>
References: <BANLkTikOmbM_shtbyGvD-N5KV4BWryHgRg@mail.gmail.com>
	<C58FD0FB-730E-49EB-BA74-2C14FCB02275@cs.usfca.edu>
Message-ID: <BANLkTi=TvUuJ5nNivCU9OjGY+K7s3BJ+qA@mail.gmail.com>

Problem fixed!

thanks,

Christophe

On Wed, Jun 22, 2011 at 6:38 PM, Terence Parr <parrt at cs.usfca.edu> wrote:
> Ok, fixed. please try:
>
> http://www.stringtemplate.org/depot/ST4/java/main/dist/ST-4.0.4.jar
>
> Ter
>
> On Jun 22, 2011, at 2:49 PM, Christophe Roudet wrote:
>
>> Hello,
>>
>> I have just upgraded to ST v4.0.3 and I have a template that was
>> working with 4.0.2 that no longer works
>> So have a template file:
>> ae.st:
>> ae(triggerUserList) ::= <<
>> ? ?<triggerUserList:{u | <u>}>
>>>>
>>
>> some test code:
>>
>> STGroup group = new STGroupDir("conf/emailTemplates");
>> ?ST st = group.getInstanceOf("/html/ae");
>> ?List<User> users = new ArrayList<User>();
>> ?User u = new User();
>> ?u.setUsername("u1");
>> ?u.setEmail("u1 at email.com");
>> ?users.add(u);
>> ?u = new User();
>> ?u.setUsername("u2");
>> ?u.setEmail("u2 at email.com");
>> ?users.add(u);
>> ?st.add("triggerUserList", users);
>> ?System.out.println(st.render());
>>
>> I have some trace on the console:
>> context [/html/ae] 1:7 no such template: /html/_sub1
>> context [/html/ae] 1:23 passed 1 arg(s) to template null with 0 declared arg(s)
>> context [/html/ae] 1:7 passed 1 arg(s) to template null with 0 declared arg(s)
>> context [/html/ae] 1:7 passed 1 arg(s) to template null with 0 declared arg(s)
>>
>> A similar template build like this works fine:
>> STGroup g = new STGroup('$', '$');
>> ?g.defineTemplate("test", "triggerUserList", "$triggerUserList:{u |
>> $u.username$ ($u.email$)}; separator=\", \"$");
>> ?ST st = g.getInstanceOf("test");
>>
>> Any idea,?
>>
>> thanks,
>>
>> Christophe
>> _______________________________________________
>> stringtemplate-interest mailing list
>> stringtemplate-interest at antlr.org
>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>
>

From parrt at cs.usfca.edu  Thu Jun 23 10:23:48 2011
From: parrt at cs.usfca.edu (Terence Parr)
Date: Thu, 23 Jun 2011 10:23:48 -0700
Subject: [stringtemplate-interest] Problem with ST 4.0.3
In-Reply-To: <BANLkTi=TvUuJ5nNivCU9OjGY+K7s3BJ+qA@mail.gmail.com>
References: <BANLkTikOmbM_shtbyGvD-N5KV4BWryHgRg@mail.gmail.com>
	<C58FD0FB-730E-49EB-BA74-2C14FCB02275@cs.usfca.edu>
	<BANLkTi=TvUuJ5nNivCU9OjGY+K7s3BJ+qA@mail.gmail.com>
Message-ID: <D3E0C11E-356A-47E3-973C-F549C5F53B69@cs.usfca.edu>

Please dig and stress test all you can. I will release 4.0.4 soon :)
T
On Jun 23, 2011, at 7:13 AM, Christophe Roudet wrote:

> Problem fixed!
> 
> thanks,
> 
> Christophe
> 
> On Wed, Jun 22, 2011 at 6:38 PM, Terence Parr <parrt at cs.usfca.edu> wrote:
>> Ok, fixed. please try:
>> 
>> http://www.stringtemplate.org/depot/ST4/java/main/dist/ST-4.0.4.jar
>> 
>> Ter
>> 
>> On Jun 22, 2011, at 2:49 PM, Christophe Roudet wrote:
>> 
>>> Hello,
>>> 
>>> I have just upgraded to ST v4.0.3 and I have a template that was
>>> working with 4.0.2 that no longer works
>>> So have a template file:
>>> ae.st:
>>> ae(triggerUserList) ::= <<
>>>    <triggerUserList:{u | <u>}>
>>>>> 
>>> 
>>> some test code:
>>> 
>>> STGroup group = new STGroupDir("conf/emailTemplates");
>>>  ST st = group.getInstanceOf("/html/ae");
>>>  List<User> users = new ArrayList<User>();
>>>  User u = new User();
>>>  u.setUsername("u1");
>>>  u.setEmail("u1 at email.com");
>>>  users.add(u);
>>>  u = new User();
>>>  u.setUsername("u2");
>>>  u.setEmail("u2 at email.com");
>>>  users.add(u);
>>>  st.add("triggerUserList", users);
>>>  System.out.println(st.render());
>>> 
>>> I have some trace on the console:
>>> context [/html/ae] 1:7 no such template: /html/_sub1
>>> context [/html/ae] 1:23 passed 1 arg(s) to template null with 0 declared arg(s)
>>> context [/html/ae] 1:7 passed 1 arg(s) to template null with 0 declared arg(s)
>>> context [/html/ae] 1:7 passed 1 arg(s) to template null with 0 declared arg(s)
>>> 
>>> A similar template build like this works fine:
>>> STGroup g = new STGroup('$', '$');
>>>  g.defineTemplate("test", "triggerUserList", "$triggerUserList:{u |
>>> $u.username$ ($u.email$)}; separator=\", \"$");
>>>  ST st = g.getInstanceOf("test");
>>> 
>>> Any idea,?
>>> 
>>> thanks,
>>> 
>>> Christophe
>>> _______________________________________________
>>> stringtemplate-interest mailing list
>>> stringtemplate-interest at antlr.org
>>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>> 
>> 
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest


From parrt at cs.usfca.edu  Thu Jun 23 11:44:27 2011
From: parrt at cs.usfca.edu (Terence Parr)
Date: Thu, 23 Jun 2011 11:44:27 -0700
Subject: [stringtemplate-interest] Group Syntax extension for
	ModelAdapter and Renderer
In-Reply-To: <22302E49-6669-4311-8024-99B17674A80F@abego-software.de>
References: <22302E49-6669-4311-8024-99B17674A80F@abego-software.de>
Message-ID: <71F0A5CD-D401-44E7-8F0A-83C3C51A7E51@cs.usfca.edu>

I think that we should probably keep this at the programming level.   should we make renderers inherited instead to solve your problem?

Ter
On Jun 21, 2011, at 1:17 AM, Udo Borkowski wrote:

> Hi,
> 
> currently we programmatically register ModelAdapters and Renderers to an STGroup.
> 
> What about providing an extension to the syntax of Group to also define these in a Group file?
> 
> E.g. I could imagine to use something like
> 
> adapter "org.w3c.dom.Node" "com.collinfagan.strum.adapters.xml.NodeModelAdapter"
> renderer "org.w3c.dom.Node" "com.collinfagan.strum.adapters.xml.NodeRenderer"
> 
> at the top of an Group file. This would mean the same as running this Java code for the group:
> 
> group.registerRenderer(org.w3c.dom.Node.class, new com.collinfagan.strum.adapters.xml.NodeRenderer()); 
> group.registerModelAdaptor(org.w3c.dom.Node.class, new com.collinfagan.strum.adapters.xml.NodeModelAdapter()); 
> 
> Especially when importing groups this feature comes in handy as I cannot register adapters/renderers when importing. In these cases I must rely on the root group. For this group R we must register ALL adapters/renders used in ANY group R imports. This make things hard to maintain as using a "new" renderer in some template T requires me to add the "registerRenderer" in EVERY code using T, maybe indirectly through imports.
> 
> Similar to features discussed earlier this feature is easy to implement for the STGroupFile, but the STGroupDir currently has no proper place to hold this information. So we may also need to tackle this re-appearing topic, too.
> 
> 
> What do others think?
> 
> Udo
> 
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20110623/c7148329/attachment-0001.html 

From sharwell at pixelminegames.com  Thu Jun 23 14:38:25 2011
From: sharwell at pixelminegames.com (Sam Harwell)
Date: Thu, 23 Jun 2011 16:38:25 -0500
Subject: [stringtemplate-interest] Group Syntax extension
	for	ModelAdapter and Renderer
In-Reply-To: <71F0A5CD-D401-44E7-8F0A-83C3C51A7E51@cs.usfca.edu>
References: <22302E49-6669-4311-8024-99B17674A80F@abego-software.de>
	<71F0A5CD-D401-44E7-8F0A-83C3C51A7E51@cs.usfca.edu>
Message-ID: <074701cc31ed$e2a55d00$a7f01700$@pixelminegames.com>

This is an interesting problem. Normally when things are inherited, they
start at the imported group and propagate to the group that imported them.
In this case, it sounds like you want to propagate it from the topmost group
to all the groups it imports.

 

Perhaps the thing to do here is propagate renderers to groups imported with
STGroup.importTemplates(Token) (those are the ones imported via the group
file), but don't propagate them to groups imported with a direct call to
importTemplates(STGroup)?

 

If you look at the diff of TemplateGroup.cs in CL8734 (it's a small diff),
you can see how I adjusted the import code to handle the unload() method in
everyone's cases. If the java code is adjusted in the same way (I can make
the change if you want), then it's easy to propagate renderers by the
following two rules:

 

1.       When STGroup.importTemplates(Token) is called, the current group's
renderers are added to the group that just got imported. This handles the
case where the renderer is registered before the group is imported
(especially relevant in reloading a group file after calling unload()).

2.       When a renderer is added to a group, it is automatically added (by
calling registerRenderer) to all groups in the importsToClearOnUnload list.
This handles the case where the group is imported before the renderer is
registered.

 

Sam

 

From: stringtemplate-interest-bounces at antlr.org
[mailto:stringtemplate-interest-bounces at antlr.org] On Behalf Of Terence Parr
Sent: Thursday, June 23, 2011 1:44 PM
To: Udo Borkowski
Cc: stringtemplate-interest Template
Subject: Re: [stringtemplate-interest] Group Syntax extension for
ModelAdapter and Renderer

 

I think that we should probably keep this at the programming level.   should
we make renderers inherited instead to solve your problem?

 

Ter

On Jun 21, 2011, at 1:17 AM, Udo Borkowski wrote:





Hi,

 

currently we programmatically register ModelAdapters and Renderers to an
STGroup.

 

What about providing an extension to the syntax of Group to also define
these in a Group file?

 

E.g. I could imagine to use something like

 

adapter "org.w3c.dom.Node"
"com.collinfagan.strum.adapters.xml.NodeModelAdapter"

renderer "org.w3c.dom.Node"
"com.collinfagan.strum.adapters.xml.NodeRenderer"

 

at the top of an Group file. This would mean the same as running this Java
code for the group:

 

group.registerRenderer(org.w3c.dom.Node.class, new
com.collinfagan.strum.adapters.xml.NodeRenderer()); 

group.registerModelAdaptor(org.w3c.dom.Node.class, new
com.collinfagan.strum.adapters.xml.NodeModelAdapter()); 

 

Especially when importing groups this feature comes in handy as I cannot
register adapters/renderers when importing. In these cases I must rely on
the root group. For this group R we must register ALL adapters/renders used
in ANY group R imports. This make things hard to maintain as using a "new"
renderer in some template T requires me to add the "registerRenderer" in
EVERY code using T, maybe indirectly through imports.

 

Similar to features discussed earlier this feature is easy to implement for
the STGroupFile, but the STGroupDir currently has no proper place to hold
this information. So we may also need to tackle this re-appearing topic,
too.

 

 

What do others think?

 

Udo

 

_______________________________________________
stringtemplate-interest mailing list
stringtemplate-interest at antlr.org
http://www.antlr.org/mailman/listinfo/stringtemplate-interest

 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20110623/7889cd92/attachment.html 

From collin.fagan at gmail.com  Thu Jun 23 18:51:20 2011
From: collin.fagan at gmail.com (Collin Fagan)
Date: Thu, 23 Jun 2011 20:51:20 -0500
Subject: [stringtemplate-interest] ST variable substitution issue,
	pls advise.
In-Reply-To: <409CBD8E1644D3488D15DD8D112394292BDCA806D8@exnjmb80.nam.nsroot.net>
References: <31F98D92-72A5-4C97-B416-EADD44C7C72D@cs.usfca.edu>
	<BANLkTimgFhBa7TN_0+JSZGnQTm6pbNNRHA@mail.gmail.com>
	<409CBD8E1644D3488D15DD8D112394292BDC481233@exnjmb80.nam.nsroot.net>
	<409CBD8E1644D3488D15DD8D112394292BDC481234@exnjmb80.nam.nsroot.net>
	<409CBD8E1644D3488D15DD8D112394292BDCA806D8@exnjmb80.nam.nsroot.net>
Message-ID: <BANLkTi=_yrw38MU-xKbvZdYmpjTXVSaw6Q@mail.gmail.com>

Hi Kiran,

Sorry for taking so long. I looked into this and discovered two things.

1. Your encoding is wrong in the header. It should be UTF-8.

<?xml version="1.0" encoding="UTF-8"?>

It's possibly that it got changed in downloading it somehere along the way,
but check just in case. If the encoding is wrong Java won't create the full
dom tree and the node model won't work.

2. I think what you really want to do is select a node with xpath then pass
that node to the next template.

Concepts: <root.("/ChangedProductNotification/product/concepts/concept"): {
concept |
     <concept.cname> <concept:apply()>
}>
>>

apply(concept) ::= <<
    Narrowing to Product Concept:
<concept.("descendant::attribute[@name='XrefValue']"): { attribute |
    * <attribute.name>,<attribute>
}>

The descendant 'axis', as it's called in xpath, selects every node that is a
child of the concept node that you passed to the apply template.

I would use this approach and not trying to build an xpath statement from
the root every time you wish to select something.

I hope this helps.

Collin


On Thu, Jun 16, 2011 at 2:09 PM, Kandru, Kiran <kiran.kandru at citi.com>wrote:

>  Hello members,
> The issue may be very small, could you please advise.
>
> Thx,
> Kiran
>
> _____________________________________________
> *From:* Kandru, Kiran [ICG-IT]
> *Sent:* Tuesday, June 14, 2011 11:02 PM
> *To:* 'stringtemplate-interest at antlr.org'
> *Subject:* ST variable substitution issue, pls advise.
>
>
> Hi,
>
> I need advise on using variable substitution into String Template file
> using XPATH Query.When I try parsing XML file , for some syntax error,
> conceptName highlighted in *RED* not being substituted by parameter passed
> to apply method. Right now I?m clueless, could you please advise?
>
>
> main(root,fldNames) ::= <<
>
>         Concepts:
> <root.("/ChangedProductNotification/product/concepts/concept"): { concept |
>                 <concept.cname:apply()>
>         }>
> >>
>
> apply(*conceptName*) ::= <<
>                 Narrowing to Product Concept:
> <root.("/ChangedProductNotification/product/concepts/concept[@cname=<*
> conceptName*>]/recs/rec/attributes/attribute[@name='XrefValue']"): {
> attribute |
>                                 <attribute.name>,<attribute>
>         }>
>
> >>
>
> Thx,
> Kiran
>
>
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20110623/4e8a08e6/attachment-0001.html 

From ub at abego-software.de  Fri Jun 24 02:41:11 2011
From: ub at abego-software.de (Udo Borkowski)
Date: Fri, 24 Jun 2011 11:41:11 +0200
Subject: [stringtemplate-interest] Group Syntax extension
	for	ModelAdapter and Renderer
In-Reply-To: <074701cc31ed$e2a55d00$a7f01700$@pixelminegames.com>
References: <22302E49-6669-4311-8024-99B17674A80F@abego-software.de>
	<71F0A5CD-D401-44E7-8F0A-83C3C51A7E51@cs.usfca.edu>
	<074701cc31ed$e2a55d00$a7f01700$@pixelminegames.com>
Message-ID: <2ADFB36D-6BC2-4B09-9DD6-A4F8291F9118@abego-software.de>

The "propagation" approach solves one half of the problem: with this approach one could use renderers and adapters in groups that are imported through the "import" statement (and not programmatically). This is currently not possible.

But the other half of the problem still exists: assume I change a group G and use some special renderer in the new version. The group G is imported by many other groups (maybe indirectly). I now need to find all the "roots" of imports to G and add the new renderer there. This can really become a maintenance nightmare. Providing the "renderer" syntax extension and defining the renderer in the group text would solve this issue.

Regarding the implementation of the "propagation" approach: registering a renderer will require to visit all directly and indirectly imported groups and add the renderer to all of them, possibly creating new maps etc.. Most of the times this will be extra work as the imported groups don't reference that renderer. Propagating a renderer to all imported groups may lead to a performance issue when using large systems.

I would also hesitate to use the "propagation" approach as it adds a new concept to StringTemplate ("propagation of renderers") that in addition seems to "reverse" an already existing concept ("inheritance"). I guess this may to misunderstandings. 

In contrast to this the "renderer" syntax extension does not use a new concept but rather makes an existing feature ("registerRenderer") accessible to those users who prefer to work on the group text than coding in Java.

As the "propagation" approach does not solve the whole problem I still think we should add the "renderer"/"adapter" feature I suggested.

Udo

P.S.: all stuff mentioned regarding "renderer" also applied "adapter".



On 23.06.2011, at 23:38, Sam Harwell wrote:

> This is an interesting problem. Normally when things are inherited, they start at the imported group and propagate to the group that imported them. In this case, it sounds like you want to propagate it from the topmost group to all the groups it imports.
>  
> Perhaps the thing to do here is propagate renderers to groups imported with STGroup.importTemplates(Token) (those are the ones imported via the group file), but don?t propagate them to groups imported with a direct call to importTemplates(STGroup)?
>  
> If you look at the diff of TemplateGroup.cs in CL8734 (it?s a small diff), you can see how I adjusted the import code to handle the unload() method in everyone?s cases. If the java code is adjusted in the same way (I can make the change if you want), then it?s easy to propagate renderers by the following two rules:
>  
> 1.       When STGroup.importTemplates(Token) is called, the current group?s renderers are added to the group that just got imported. This handles the case where the renderer is registered before the group is imported (especially relevant in reloading a group file after calling unload()).
> 2.       When a renderer is added to a group, it is automatically added (by calling registerRenderer) to all groups in the importsToClearOnUnload list. This handles the case where the group is imported before the renderer is registered.
>  
> Sam
>  
> From: stringtemplate-interest-bounces at antlr.org [mailto:stringtemplate-interest-bounces at antlr.org] On Behalf Of Terence Parr
> Sent: Thursday, June 23, 2011 1:44 PM
> To: Udo Borkowski
> Cc: stringtemplate-interest Template
> Subject: Re: [stringtemplate-interest] Group Syntax extension for ModelAdapter and Renderer
>  
> I think that we should probably keep this at the programming level.   should we make renderers inherited instead to solve your problem?
>  
> Ter
> On Jun 21, 2011, at 1:17 AM, Udo Borkowski wrote:
> 
> 
> Hi,
>  
> currently we programmatically register ModelAdapters and Renderers to an STGroup.
>  
> What about providing an extension to the syntax of Group to also define these in a Group file?
>  
> E.g. I could imagine to use something like
>  
> adapter "org.w3c.dom.Node" "com.collinfagan.strum.adapters.xml.NodeModelAdapter"
> renderer "org.w3c.dom.Node" "com.collinfagan.strum.adapters.xml.NodeRenderer"
>  
> at the top of an Group file. This would mean the same as running this Java code for the group:
>  
> group.registerRenderer(org.w3c.dom.Node.class, new com.collinfagan.strum.adapters.xml.NodeRenderer());
> group.registerModelAdaptor(org.w3c.dom.Node.class, new com.collinfagan.strum.adapters.xml.NodeModelAdapter()); 
>  
> Especially when importing groups this feature comes in handy as I cannot register adapters/renderers when importing. In these cases I must rely on the root group. For this group R we must register ALL adapters/renders used in ANY group R imports. This make things hard to maintain as using a "new" renderer in some template T requires me to add the "registerRenderer" in EVERY code using T, maybe indirectly through imports.
>  
> Similar to features discussed earlier this feature is easy to implement for the STGroupFile, but the STGroupDir currently has no proper place to hold this information. So we may also need to tackle this re-appearing topic, too.
>  
>  
> What do others think?
>  
> Udo
>  
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>  

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20110624/f34c4d47/attachment.html 

From s.barnett-cormack at lancaster.ac.uk  Fri Jun 24 03:16:30 2011
From: s.barnett-cormack at lancaster.ac.uk (Sam Barnett-Cormack)
Date: Fri, 24 Jun 2011 11:16:30 +0100
Subject: [stringtemplate-interest] Group Syntax
 extension	for	ModelAdapter and Renderer
In-Reply-To: <2ADFB36D-6BC2-4B09-9DD6-A4F8291F9118@abego-software.de>
References: <22302E49-6669-4311-8024-99B17674A80F@abego-software.de>	<71F0A5CD-D401-44E7-8F0A-83C3C51A7E51@cs.usfca.edu>	<074701cc31ed$e2a55d00$a7f01700$@pixelminegames.com>
	<2ADFB36D-6BC2-4B09-9DD6-A4F8291F9118@abego-software.de>
Message-ID: <4E0463FE.2040905@lancaster.ac.uk>

Sorry to top-post, but this is a very general statement/opinion...

Renderers and ModelAdapters need to be entirely in the programming side, 
surely, to keep the complete language-agnostic value of template code. 
Unlike Antlr grammars, for instance, there's nothing in a StringTemplate 
that is ever language-specific (in terms of implementation), that I'm 
aware of, and I devoutly hope it will remain so.

Furthermore, whether it happens at the programming level or in the group 
file (and what about people not using group files, but group dirs or a 
custom group type), whatever is chosen in terms of when to propagate and 
in which direction, there will always be situations where what happens 
isn't what makes sense for that use-case. Thus, what would really be 
ideal is a way of controlling it more finely, as to when it propagates 
or doesn't, some sort of configuration. This would, however, likely be a 
huge burden on the ST developers, and a pretty big burden on those using it.

One alternative that occurs to me as probably working in most cases, is 
to allow a VM-wide setting of model adapters and renderers, and then 
allow group-specific overriding of this. Whether the group-specific ones 
then propagate or not, and in which direction, I'm not sure. You 
obviously can't have them propagating in both directions without every 
change always affecting the whole constellation of groups involved, 
which would seem suboptimal to me.

Anyway, that's just some software engineering thoughts. To get a better 
decision, it would really make sense to drill down to some competing 
use-cases and see if there's a common denominator that would work in all 
cases that anyone can think of.

Sam

On 24/06/2011 10:41, Udo Borkowski wrote:
> The "propagation" approach solves one half of the problem: with this
> approach one could use renderers and adapters in groups that are
> imported through the "import" statement (and not programmatically). This
> is currently not possible.
>
> But the other half of the problem still exists: assume I change a group
> G and use some special renderer in the new version. The group G is
> imported by many other groups (maybe indirectly). I now need to find all
> the "roots" of imports to G and add the new renderer there. This can
> really become a maintenance nightmare. Providing the "renderer" syntax
> extension and defining the renderer in the group text would solve this
> issue.
>
> Regarding the implementation of the "propagation" approach: registering
> a renderer will require to visit all directly and indirectly imported
> groups and add the renderer to all of them, possibly creating new maps
> etc.. Most of the times this will be extra work as the imported groups
> don't reference that renderer. Propagating a renderer to all imported
> groups may lead to a performance issue when using large systems.
>
> I would also hesitate to use the "propagation" approach as it adds a new
> concept to StringTemplate ("propagation of renderers") that in addition
> seems to "reverse" an already existing concept ("inheritance"). I guess
> this may to misunderstandings.
>
> In contrast to this the "renderer" syntax extension does not use a new
> concept but rather makes an existing feature ("registerRenderer")
> accessible to those users who prefer to work on the group text than
> coding in Java.
>
> As the "propagation" approach does not solve the whole problem I still
> think we should add the "renderer"/"adapter" feature I suggested.
>
> Udo
>
> P.S.: all stuff mentioned regarding "renderer" also applied "adapter".
>
>
>
> On 23.06.2011, at 23:38, Sam Harwell wrote:
>
>> This is an interesting problem. Normally when things are inherited,
>> they start at the imported group and propagate to the group that
>> imported them. In this case, it sounds like you want to propagate it
>> from the topmost group to all the groups it imports.
>> Perhaps the thing to do here is propagate renderers to groups imported
>> with STGroup.importTemplates(Token) (those are the ones imported via
>> the group file), but don?t propagate them to groups imported with a
>> direct call to importTemplates(STGroup)?
>> If you look at the diff of TemplateGroup.cs in CL8734 (it?s a small
>> diff), you can see how I adjusted the import code to handle the
>> unload() method in everyone?s cases. If the java code is adjusted in
>> the same way (I can make the change if you want), then it?s easy to
>> propagate renderers by the following two rules:
>> 1.When STGroup.importTemplates(Token) is called, the current group?s
>> renderers are added to the group that just got imported. This handles
>> the case where the renderer is registered before the group is imported
>> (especially relevant in reloading a group file after calling unload()).
>> 2.When a renderer is added to a group, it is automatically added (by
>> calling registerRenderer) to all groups in the importsToClearOnUnload
>> list. This handles the case where the group is imported before the
>> renderer is registered.
>> Sam
>> *From:*stringtemplate-interest-bounces at antlr.org
>> <mailto:stringtemplate-interest-bounces at antlr.org>[mailto:stringtemplate-interest-bounces at antlr.org]*On
>> Behalf Of*Terence Parr
>> *Sent:*Thursday, June 23, 2011 1:44 PM
>> *To:*Udo Borkowski
>> *Cc:*stringtemplate-interest Template
>> *Subject:*Re: [stringtemplate-interest] Group Syntax extension for
>> ModelAdapter and Renderer
>> I think that we should probably keep this at the programming level.
>> should we make renderers inherited instead to solve your problem?
>> Ter
>> On Jun 21, 2011, at 1:17 AM, Udo Borkowski wrote:
>>
>>
>> Hi,
>> currently we programmatically register ModelAdapters and Renderers to
>> an STGroup.
>> What about providing an extension to the syntax of Group to also
>> define these in a Group file?
>> E.g. I could imagine to use something like
>>
>>     adapter "org.w3c.dom.Node"
>>     "com.collinfagan.strum.adapters.xml.NodeModelAdapter"
>>     renderer "org.w3c.dom.Node"
>>     "com.collinfagan.strum.adapters.xml.NodeRenderer"
>>
>> at the top of an Group file. This would mean the same as running this
>> Java code for the group:
>>
>>     group.registerRenderer(org.w3c.dom.Node.class, new
>>     com.collinfagan.strum.adapters.xml.NodeRenderer());
>>
>>     group.registerModelAdaptor(org.w3c.dom.Node.class, new
>>     com.collinfagan.strum.adapters.xml.NodeModelAdapter());
>>
>> Especially when importing groups this feature comes in handy as I
>> cannot register adapters/renderers when importing. In these cases I
>> must rely on the root group. For this group R we must register ALL
>> adapters/renders used in ANY group R imports. This make things hard to
>> maintain as using a "new" renderer in some template T requires me to
>> add the "registerRenderer" in EVERY code using T, maybe indirectly
>> through imports.
>> Similar to features discussed earlier this feature is easy to
>> implement for the STGroupFile, but the STGroupDir currently has no
>> proper place to hold this information. So we may also need to tackle
>> this re-appearing topic, too.
>> What do others think?
>> Udo
>> _______________________________________________
>> stringtemplate-interest mailing list
>> stringtemplate-interest at antlr.org
>> <mailto:stringtemplate-interest at antlr.org>
>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>
>
>
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest


From sharwell at pixelminegames.com  Fri Jun 24 06:59:40 2011
From: sharwell at pixelminegames.com (Sam Harwell)
Date: Fri, 24 Jun 2011 08:59:40 -0500
Subject: [stringtemplate-interest] Group Syntax
	extension	for	ModelAdapter and Renderer
In-Reply-To: <4E0463FE.2040905@lancaster.ac.uk>
References: <22302E49-6669-4311-8024-99B17674A80F@abego-software.de>	<71F0A5CD-D401-44E7-8F0A-83C3C51A7E51@cs.usfca.edu>	<074701cc31ed$e2a55d00$a7f01700$@pixelminegames.com>
	<2ADFB36D-6BC2-4B09-9DD6-A4F8291F9118@abego-software.de>
	<4E0463FE.2040905@lancaster.ac.uk>
Message-ID: <007f01cc3276$f6cef5f0$e46ce1d0$@pixelminegames.com>

>From the first time I was introduced to ST, everything I've read is right in
line with your statement that language-specific configuration have no place
in the templates themselves. I have seriously doubts that this can be solved
with a template extension, which is why I'm looking at various code
solutions.

The VM-wide setting approach seems like a possibility, but only if the "VM"
is an instance object. There are a number of cases where I run several
independent ST "sessions" within a single process, so I'm trying hard to
remove every last mutable static variable from the entire [C# port of the]
library. Perhaps an Interpreter object could be stored in an STGroup at the
time when the group is constructed, and that interpreter used for all
rendering of templates accessed through that group's getInstanceOf() method.
That way, we have a "VM" which is a single interpreter used for that group's
operations. I'd even go so far as to declare the Interpreter field of
STGroup final, giving a fixed view of the VM.

Sam

-----Original Message-----
From: Sam Barnett-Cormack [mailto:s.barnett-cormack at lancaster.ac.uk] 
Sent: Friday, June 24, 2011 5:17 AM
To: Udo Borkowski
Cc: Sam Harwell; 'stringtemplate-interest Template'; 'Terence Parr'
Subject: Re: [stringtemplate-interest] Group Syntax extension for
ModelAdapter and Renderer

Sorry to top-post, but this is a very general statement/opinion...

Renderers and ModelAdapters need to be entirely in the programming side,
surely, to keep the complete language-agnostic value of template code. 
Unlike Antlr grammars, for instance, there's nothing in a StringTemplate
that is ever language-specific (in terms of implementation), that I'm aware
of, and I devoutly hope it will remain so.

Furthermore, whether it happens at the programming level or in the group
file (and what about people not using group files, but group dirs or a
custom group type), whatever is chosen in terms of when to propagate and in
which direction, there will always be situations where what happens isn't
what makes sense for that use-case. Thus, what would really be ideal is a
way of controlling it more finely, as to when it propagates or doesn't, some
sort of configuration. This would, however, likely be a huge burden on the
ST developers, and a pretty big burden on those using it.

One alternative that occurs to me as probably working in most cases, is to
allow a VM-wide setting of model adapters and renderers, and then allow
group-specific overriding of this. Whether the group-specific ones then
propagate or not, and in which direction, I'm not sure. You obviously can't
have them propagating in both directions without every change always
affecting the whole constellation of groups involved, which would seem
suboptimal to me.

Anyway, that's just some software engineering thoughts. To get a better
decision, it would really make sense to drill down to some competing
use-cases and see if there's a common denominator that would work in all
cases that anyone can think of.

Sam

On 24/06/2011 10:41, Udo Borkowski wrote:
> The "propagation" approach solves one half of the problem: with this 
> approach one could use renderers and adapters in groups that are 
> imported through the "import" statement (and not programmatically). 
> This is currently not possible.
>
> But the other half of the problem still exists: assume I change a 
> group G and use some special renderer in the new version. The group G 
> is imported by many other groups (maybe indirectly). I now need to 
> find all the "roots" of imports to G and add the new renderer there. 
> This can really become a maintenance nightmare. Providing the 
> "renderer" syntax extension and defining the renderer in the group 
> text would solve this issue.
>
> Regarding the implementation of the "propagation" approach: 
> registering a renderer will require to visit all directly and 
> indirectly imported groups and add the renderer to all of them, 
> possibly creating new maps etc.. Most of the times this will be extra 
> work as the imported groups don't reference that renderer. Propagating 
> a renderer to all imported groups may lead to a performance issue when
using large systems.
>
> I would also hesitate to use the "propagation" approach as it adds a 
> new concept to StringTemplate ("propagation of renderers") that in 
> addition seems to "reverse" an already existing concept 
> ("inheritance"). I guess this may to misunderstandings.
>
> In contrast to this the "renderer" syntax extension does not use a new 
> concept but rather makes an existing feature ("registerRenderer") 
> accessible to those users who prefer to work on the group text than 
> coding in Java.
>
> As the "propagation" approach does not solve the whole problem I still 
> think we should add the "renderer"/"adapter" feature I suggested.
>
> Udo
>
> P.S.: all stuff mentioned regarding "renderer" also applied "adapter".
>
>
>
> On 23.06.2011, at 23:38, Sam Harwell wrote:
>
>> This is an interesting problem. Normally when things are inherited, 
>> they start at the imported group and propagate to the group that 
>> imported them. In this case, it sounds like you want to propagate it 
>> from the topmost group to all the groups it imports.
>> Perhaps the thing to do here is propagate renderers to groups 
>> imported with STGroup.importTemplates(Token) (those are the ones 
>> imported via the group file), but don't propagate them to groups 
>> imported with a direct call to importTemplates(STGroup)?
>> If you look at the diff of TemplateGroup.cs in CL8734 (it's a small 
>> diff), you can see how I adjusted the import code to handle the
>> unload() method in everyone's cases. If the java code is adjusted in 
>> the same way (I can make the change if you want), then it's easy to 
>> propagate renderers by the following two rules:
>> 1.When STGroup.importTemplates(Token) is called, the current group's 
>> renderers are added to the group that just got imported. This handles 
>> the case where the renderer is registered before the group is 
>> imported (especially relevant in reloading a group file after calling
unload()).
>> 2.When a renderer is added to a group, it is automatically added (by 
>> calling registerRenderer) to all groups in the importsToClearOnUnload 
>> list. This handles the case where the group is imported before the 
>> renderer is registered.
>> Sam
>> *From:*stringtemplate-interest-bounces at antlr.org
>> <mailto:stringtemplate-interest-bounces at antlr.org>[mailto:stringtempl
>> ate-interest-bounces at antlr.org]*On
>> Behalf Of*Terence Parr
>> *Sent:*Thursday, June 23, 2011 1:44 PM *To:*Udo Borkowski 
>> *Cc:*stringtemplate-interest Template
>> *Subject:*Re: [stringtemplate-interest] Group Syntax extension for 
>> ModelAdapter and Renderer I think that we should probably keep this 
>> at the programming level.
>> should we make renderers inherited instead to solve your problem?
>> Ter
>> On Jun 21, 2011, at 1:17 AM, Udo Borkowski wrote:
>>
>>
>> Hi,
>> currently we programmatically register ModelAdapters and Renderers to 
>> an STGroup.
>> What about providing an extension to the syntax of Group to also 
>> define these in a Group file?
>> E.g. I could imagine to use something like
>>
>>     adapter "org.w3c.dom.Node"
>>     "com.collinfagan.strum.adapters.xml.NodeModelAdapter"
>>     renderer "org.w3c.dom.Node"
>>     "com.collinfagan.strum.adapters.xml.NodeRenderer"
>>
>> at the top of an Group file. This would mean the same as running this 
>> Java code for the group:
>>
>>     group.registerRenderer(org.w3c.dom.Node.class, new
>>     com.collinfagan.strum.adapters.xml.NodeRenderer());
>>
>>     group.registerModelAdaptor(org.w3c.dom.Node.class, new
>>     com.collinfagan.strum.adapters.xml.NodeModelAdapter());
>>
>> Especially when importing groups this feature comes in handy as I 
>> cannot register adapters/renderers when importing. In these cases I 
>> must rely on the root group. For this group R we must register ALL 
>> adapters/renders used in ANY group R imports. This make things hard 
>> to maintain as using a "new" renderer in some template T requires me 
>> to add the "registerRenderer" in EVERY code using T, maybe indirectly 
>> through imports.
>> Similar to features discussed earlier this feature is easy to 
>> implement for the STGroupFile, but the STGroupDir currently has no 
>> proper place to hold this information. So we may also need to tackle 
>> this re-appearing topic, too.
>> What do others think?
>> Udo
>> _______________________________________________
>> stringtemplate-interest mailing list
>> stringtemplate-interest at antlr.org
>> <mailto:stringtemplate-interest at antlr.org>
>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>
>
>
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest



From s.barnett-cormack at lancaster.ac.uk  Fri Jun 24 07:20:10 2011
From: s.barnett-cormack at lancaster.ac.uk (Sam Barnett-Cormack)
Date: Fri, 24 Jun 2011 15:20:10 +0100
Subject: [stringtemplate-interest] Group Syntax
 extension	for	ModelAdapter and Renderer
In-Reply-To: <007f01cc3276$f6cef5f0$e46ce1d0$@pixelminegames.com>
References: <22302E49-6669-4311-8024-99B17674A80F@abego-software.de>	<71F0A5CD-D401-44E7-8F0A-83C3C51A7E51@cs.usfca.edu>	<074701cc31ed$e2a55d00$a7f01700$@pixelminegames.com>
	<2ADFB36D-6BC2-4B09-9DD6-A4F8291F9118@abego-software.de>
	<4E0463FE.2040905@lancaster.ac.uk>
	<007f01cc3276$f6cef5f0$e46ce1d0$@pixelminegames.com>
Message-ID: <4E049D1A.9070403@lancaster.ac.uk>

On 24/06/2011 14:59, Sam Harwell wrote:
> The VM-wide setting approach seems like a possibility, but only if the "VM"
> is an instance object. There are a number of cases where I run several
> independent ST "sessions" within a single process, so I'm trying hard to
> remove every last mutable static variable from the entire [C# port of the]
> library. Perhaps an Interpreter object could be stored in an STGroup at the
> time when the group is constructed, and that interpreter used for all
> rendering of templates accessed through that group's getInstanceOf() method.
> That way, we have a "VM" which is a single interpreter used for that group's
> operations. I'd even go so far as to declare the Interpreter field of
> STGroup final, giving a fixed view of the VM.

I used the term VM based on my understanding of the Java version. I 
would agree that it would be best not to have such things truly static - 
I would support a (for example) STInterpreter class, an instance of 
which can be used when creating a group, or it be specified with a 
boolean parameter that a new one should be created (otherwise a truly 
VM-wide default shared one would be used). I imagine implementation 
would be awkward if you could import groups that use a different 
STInterpreter from the one doing the important (depending on what 
actually gets stored in the instance), but otherwise it's a good way to 
share details of such things between multiple groups under control. 
Perhaps allow STInterpreters to be defined as 'children' of another 
STInterpreter, with any properties not specifically set in that child 
being proxied to the parent (implementation details could vary, but I 
can see that being easiest with a specialised subclass).

And yes, it would make sense for the interpreter of any given STGroup to 
be final, to whatever extent is possible in any given implementation 
language. You don't want to be changing back and forth all of those 
things after a group is created, though you may want to manipulate the 
interpreter itself.

This would also fit with the usual patterns used for such things in Java 
these days, particularly EE, allowing it to fit better with Dependency 
Injection and Contexts. It's definitely more common in my experience to 
have some sort of context class to hold such things than it is to have 
anything global/static.

Sam

> -----Original Message-----
> From: Sam Barnett-Cormack [mailto:s.barnett-cormack at lancaster.ac.uk]
> Sent: Friday, June 24, 2011 5:17 AM
> To: Udo Borkowski
> Cc: Sam Harwell; 'stringtemplate-interest Template'; 'Terence Parr'
> Subject: Re: [stringtemplate-interest] Group Syntax extension for
> ModelAdapter and Renderer
>
> Sorry to top-post, but this is a very general statement/opinion...
>
> Renderers and ModelAdapters need to be entirely in the programming side,
> surely, to keep the complete language-agnostic value of template code.
> Unlike Antlr grammars, for instance, there's nothing in a StringTemplate
> that is ever language-specific (in terms of implementation), that I'm aware
> of, and I devoutly hope it will remain so.
>
> Furthermore, whether it happens at the programming level or in the group
> file (and what about people not using group files, but group dirs or a
> custom group type), whatever is chosen in terms of when to propagate and in
> which direction, there will always be situations where what happens isn't
> what makes sense for that use-case. Thus, what would really be ideal is a
> way of controlling it more finely, as to when it propagates or doesn't, some
> sort of configuration. This would, however, likely be a huge burden on the
> ST developers, and a pretty big burden on those using it.
>
> One alternative that occurs to me as probably working in most cases, is to
> allow a VM-wide setting of model adapters and renderers, and then allow
> group-specific overriding of this. Whether the group-specific ones then
> propagate or not, and in which direction, I'm not sure. You obviously can't
> have them propagating in both directions without every change always
> affecting the whole constellation of groups involved, which would seem
> suboptimal to me.
>
> Anyway, that's just some software engineering thoughts. To get a better
> decision, it would really make sense to drill down to some competing
> use-cases and see if there's a common denominator that would work in all
> cases that anyone can think of.
>
> Sam
>
> On 24/06/2011 10:41, Udo Borkowski wrote:
>> The "propagation" approach solves one half of the problem: with this
>> approach one could use renderers and adapters in groups that are
>> imported through the "import" statement (and not programmatically).
>> This is currently not possible.
>>
>> But the other half of the problem still exists: assume I change a
>> group G and use some special renderer in the new version. The group G
>> is imported by many other groups (maybe indirectly). I now need to
>> find all the "roots" of imports to G and add the new renderer there.
>> This can really become a maintenance nightmare. Providing the
>> "renderer" syntax extension and defining the renderer in the group
>> text would solve this issue.
>>
>> Regarding the implementation of the "propagation" approach:
>> registering a renderer will require to visit all directly and
>> indirectly imported groups and add the renderer to all of them,
>> possibly creating new maps etc.. Most of the times this will be extra
>> work as the imported groups don't reference that renderer. Propagating
>> a renderer to all imported groups may lead to a performance issue when
> using large systems.
>>
>> I would also hesitate to use the "propagation" approach as it adds a
>> new concept to StringTemplate ("propagation of renderers") that in
>> addition seems to "reverse" an already existing concept
>> ("inheritance"). I guess this may to misunderstandings.
>>
>> In contrast to this the "renderer" syntax extension does not use a new
>> concept but rather makes an existing feature ("registerRenderer")
>> accessible to those users who prefer to work on the group text than
>> coding in Java.
>>
>> As the "propagation" approach does not solve the whole problem I still
>> think we should add the "renderer"/"adapter" feature I suggested.
>>
>> Udo
>>
>> P.S.: all stuff mentioned regarding "renderer" also applied "adapter".
>>
>>
>>
>> On 23.06.2011, at 23:38, Sam Harwell wrote:
>>
>>> This is an interesting problem. Normally when things are inherited,
>>> they start at the imported group and propagate to the group that
>>> imported them. In this case, it sounds like you want to propagate it
>>> from the topmost group to all the groups it imports.
>>> Perhaps the thing to do here is propagate renderers to groups
>>> imported with STGroup.importTemplates(Token) (those are the ones
>>> imported via the group file), but don't propagate them to groups
>>> imported with a direct call to importTemplates(STGroup)?
>>> If you look at the diff of TemplateGroup.cs in CL8734 (it's a small
>>> diff), you can see how I adjusted the import code to handle the
>>> unload() method in everyone's cases. If the java code is adjusted in
>>> the same way (I can make the change if you want), then it's easy to
>>> propagate renderers by the following two rules:
>>> 1.When STGroup.importTemplates(Token) is called, the current group's
>>> renderers are added to the group that just got imported. This handles
>>> the case where the renderer is registered before the group is
>>> imported (especially relevant in reloading a group file after calling
> unload()).
>>> 2.When a renderer is added to a group, it is automatically added (by
>>> calling registerRenderer) to all groups in the importsToClearOnUnload
>>> list. This handles the case where the group is imported before the
>>> renderer is registered.
>>> Sam
>>> *From:*stringtemplate-interest-bounces at antlr.org
>>> <mailto:stringtemplate-interest-bounces at antlr.org>[mailto:stringtempl
>>> ate-interest-bounces at antlr.org]*On
>>> Behalf Of*Terence Parr
>>> *Sent:*Thursday, June 23, 2011 1:44 PM *To:*Udo Borkowski
>>> *Cc:*stringtemplate-interest Template
>>> *Subject:*Re: [stringtemplate-interest] Group Syntax extension for
>>> ModelAdapter and Renderer I think that we should probably keep this
>>> at the programming level.
>>> should we make renderers inherited instead to solve your problem?
>>> Ter
>>> On Jun 21, 2011, at 1:17 AM, Udo Borkowski wrote:
>>>
>>>
>>> Hi,
>>> currently we programmatically register ModelAdapters and Renderers to
>>> an STGroup.
>>> What about providing an extension to the syntax of Group to also
>>> define these in a Group file?
>>> E.g. I could imagine to use something like
>>>
>>>      adapter "org.w3c.dom.Node"
>>>      "com.collinfagan.strum.adapters.xml.NodeModelAdapter"
>>>      renderer "org.w3c.dom.Node"
>>>      "com.collinfagan.strum.adapters.xml.NodeRenderer"
>>>
>>> at the top of an Group file. This would mean the same as running this
>>> Java code for the group:
>>>
>>>      group.registerRenderer(org.w3c.dom.Node.class, new
>>>      com.collinfagan.strum.adapters.xml.NodeRenderer());
>>>
>>>      group.registerModelAdaptor(org.w3c.dom.Node.class, new
>>>      com.collinfagan.strum.adapters.xml.NodeModelAdapter());
>>>
>>> Especially when importing groups this feature comes in handy as I
>>> cannot register adapters/renderers when importing. In these cases I
>>> must rely on the root group. For this group R we must register ALL
>>> adapters/renders used in ANY group R imports. This make things hard
>>> to maintain as using a "new" renderer in some template T requires me
>>> to add the "registerRenderer" in EVERY code using T, maybe indirectly
>>> through imports.
>>> Similar to features discussed earlier this feature is easy to
>>> implement for the STGroupFile, but the STGroupDir currently has no
>>> proper place to hold this information. So we may also need to tackle
>>> this re-appearing topic, too.
>>> What do others think?
>>> Udo
>>> _______________________________________________
>>> stringtemplate-interest mailing list
>>> stringtemplate-interest at antlr.org
>>> <mailto:stringtemplate-interest at antlr.org>
>>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>>
>>
>>
>> _______________________________________________
>> stringtemplate-interest mailing list
>> stringtemplate-interest at antlr.org
>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>
>


From parrt at cs.usfca.edu  Sat Jun 25 11:08:45 2011
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sat, 25 Jun 2011 11:08:45 -0700
Subject: [stringtemplate-interest] Group Syntax
	extension	for	ModelAdapter and Renderer
In-Reply-To: <4E049D1A.9070403@lancaster.ac.uk>
References: <22302E49-6669-4311-8024-99B17674A80F@abego-software.de>	<71F0A5CD-D401-44E7-8F0A-83C3C51A7E51@cs.usfca.edu>	<074701cc31ed$e2a55d00$a7f01700$@pixelminegames.com>
	<2ADFB36D-6BC2-4B09-9DD6-A4F8291F9118@abego-software.de>
	<4E0463FE.2040905@lancaster.ac.uk>
	<007f01cc3276$f6cef5f0$e46ce1d0$@pixelminegames.com>
	<4E049D1A.9070403@lancaster.ac.uk>
Message-ID: <DD30493C-6612-406B-95C0-357AB10DF856@cs.usfca.edu>

hiya.  Inheritance will work on this.  it's the only way polymorphism works with template instantiation; same for adaptors/renderers.  If A imports B we created templates relative to A even if defined in B.  Therefore, a renderer for A works for B.  A's renderer overrides any you set in B as well.  No need to think about propagation or whatever.

I'll go look at inheritance mech. i see on my list "should adaptors get imported from super group?"

http://www.antlr.org/wiki/display/ST4/ST+v4+TODO+list

Ter
On Jun 24, 2011, at 7:20 AM, Sam Barnett-Cormack wrote:

> On 24/06/2011 14:59, Sam Harwell wrote:
>> The VM-wide setting approach seems like a possibility, but only if the "VM"
>> is an instance object. There are a number of cases where I run several
>> independent ST "sessions" within a single process, so I'm trying hard to
>> remove every last mutable static variable from the entire [C# port of the]
>> library. Perhaps an Interpreter object could be stored in an STGroup at the
>> time when the group is constructed, and that interpreter used for all
>> rendering of templates accessed through that group's getInstanceOf() method.
>> That way, we have a "VM" which is a single interpreter used for that group's
>> operations. I'd even go so far as to declare the Interpreter field of
>> STGroup final, giving a fixed view of the VM.
> 
> I used the term VM based on my understanding of the Java version. I 
> would agree that it would be best not to have such things truly static - 
> I would support a (for example) STInterpreter class, an instance of 
> which can be used when creating a group, or it be specified with a 
> boolean parameter that a new one should be created (otherwise a truly 
> VM-wide default shared one would be used). I imagine implementation 
> would be awkward if you could import groups that use a different 
> STInterpreter from the one doing the important (depending on what 
> actually gets stored in the instance), but otherwise it's a good way to 
> share details of such things between multiple groups under control. 
> Perhaps allow STInterpreters to be defined as 'children' of another 
> STInterpreter, with any properties not specifically set in that child 
> being proxied to the parent (implementation details could vary, but I 
> can see that being easiest with a specialised subclass).
> 
> And yes, it would make sense for the interpreter of any given STGroup to 
> be final, to whatever extent is possible in any given implementation 
> language. You don't want to be changing back and forth all of those 
> things after a group is created, though you may want to manipulate the 
> interpreter itself.
> 
> This would also fit with the usual patterns used for such things in Java 
> these days, particularly EE, allowing it to fit better with Dependency 
> Injection and Contexts. It's definitely more common in my experience to 
> have some sort of context class to hold such things than it is to have 
> anything global/static.
> 
> Sam
> 
>> -----Original Message-----
>> From: Sam Barnett-Cormack [mailto:s.barnett-cormack at lancaster.ac.uk]
>> Sent: Friday, June 24, 2011 5:17 AM
>> To: Udo Borkowski
>> Cc: Sam Harwell; 'stringtemplate-interest Template'; 'Terence Parr'
>> Subject: Re: [stringtemplate-interest] Group Syntax extension for
>> ModelAdapter and Renderer
>> 
>> Sorry to top-post, but this is a very general statement/opinion...
>> 
>> Renderers and ModelAdapters need to be entirely in the programming side,
>> surely, to keep the complete language-agnostic value of template code.
>> Unlike Antlr grammars, for instance, there's nothing in a StringTemplate
>> that is ever language-specific (in terms of implementation), that I'm aware
>> of, and I devoutly hope it will remain so.
>> 
>> Furthermore, whether it happens at the programming level or in the group
>> file (and what about people not using group files, but group dirs or a
>> custom group type), whatever is chosen in terms of when to propagate and in
>> which direction, there will always be situations where what happens isn't
>> what makes sense for that use-case. Thus, what would really be ideal is a
>> way of controlling it more finely, as to when it propagates or doesn't, some
>> sort of configuration. This would, however, likely be a huge burden on the
>> ST developers, and a pretty big burden on those using it.
>> 
>> One alternative that occurs to me as probably working in most cases, is to
>> allow a VM-wide setting of model adapters and renderers, and then allow
>> group-specific overriding of this. Whether the group-specific ones then
>> propagate or not, and in which direction, I'm not sure. You obviously can't
>> have them propagating in both directions without every change always
>> affecting the whole constellation of groups involved, which would seem
>> suboptimal to me.
>> 
>> Anyway, that's just some software engineering thoughts. To get a better
>> decision, it would really make sense to drill down to some competing
>> use-cases and see if there's a common denominator that would work in all
>> cases that anyone can think of.
>> 
>> Sam
>> 
>> On 24/06/2011 10:41, Udo Borkowski wrote:
>>> The "propagation" approach solves one half of the problem: with this
>>> approach one could use renderers and adapters in groups that are
>>> imported through the "import" statement (and not programmatically).
>>> This is currently not possible.
>>> 
>>> But the other half of the problem still exists: assume I change a
>>> group G and use some special renderer in the new version. The group G
>>> is imported by many other groups (maybe indirectly). I now need to
>>> find all the "roots" of imports to G and add the new renderer there.
>>> This can really become a maintenance nightmare. Providing the
>>> "renderer" syntax extension and defining the renderer in the group
>>> text would solve this issue.
>>> 
>>> Regarding the implementation of the "propagation" approach:
>>> registering a renderer will require to visit all directly and
>>> indirectly imported groups and add the renderer to all of them,
>>> possibly creating new maps etc.. Most of the times this will be extra
>>> work as the imported groups don't reference that renderer. Propagating
>>> a renderer to all imported groups may lead to a performance issue when
>> using large systems.
>>> 
>>> I would also hesitate to use the "propagation" approach as it adds a
>>> new concept to StringTemplate ("propagation of renderers") that in
>>> addition seems to "reverse" an already existing concept
>>> ("inheritance"). I guess this may to misunderstandings.
>>> 
>>> In contrast to this the "renderer" syntax extension does not use a new
>>> concept but rather makes an existing feature ("registerRenderer")
>>> accessible to those users who prefer to work on the group text than
>>> coding in Java.
>>> 
>>> As the "propagation" approach does not solve the whole problem I still
>>> think we should add the "renderer"/"adapter" feature I suggested.
>>> 
>>> Udo
>>> 
>>> P.S.: all stuff mentioned regarding "renderer" also applied "adapter".
>>> 
>>> 
>>> 
>>> On 23.06.2011, at 23:38, Sam Harwell wrote:
>>> 
>>>> This is an interesting problem. Normally when things are inherited,
>>>> they start at the imported group and propagate to the group that
>>>> imported them. In this case, it sounds like you want to propagate it
>>>> from the topmost group to all the groups it imports.
>>>> Perhaps the thing to do here is propagate renderers to groups
>>>> imported with STGroup.importTemplates(Token) (those are the ones
>>>> imported via the group file), but don't propagate them to groups
>>>> imported with a direct call to importTemplates(STGroup)?
>>>> If you look at the diff of TemplateGroup.cs in CL8734 (it's a small
>>>> diff), you can see how I adjusted the import code to handle the
>>>> unload() method in everyone's cases. If the java code is adjusted in
>>>> the same way (I can make the change if you want), then it's easy to
>>>> propagate renderers by the following two rules:
>>>> 1.When STGroup.importTemplates(Token) is called, the current group's
>>>> renderers are added to the group that just got imported. This handles
>>>> the case where the renderer is registered before the group is
>>>> imported (especially relevant in reloading a group file after calling
>> unload()).
>>>> 2.When a renderer is added to a group, it is automatically added (by
>>>> calling registerRenderer) to all groups in the importsToClearOnUnload
>>>> list. This handles the case where the group is imported before the
>>>> renderer is registered.
>>>> Sam
>>>> *From:*stringtemplate-interest-bounces at antlr.org
>>>> <mailto:stringtemplate-interest-bounces at antlr.org>[mailto:stringtempl
>>>> ate-interest-bounces at antlr.org]*On
>>>> Behalf Of*Terence Parr
>>>> *Sent:*Thursday, June 23, 2011 1:44 PM *To:*Udo Borkowski
>>>> *Cc:*stringtemplate-interest Template
>>>> *Subject:*Re: [stringtemplate-interest] Group Syntax extension for
>>>> ModelAdapter and Renderer I think that we should probably keep this
>>>> at the programming level.
>>>> should we make renderers inherited instead to solve your problem?
>>>> Ter
>>>> On Jun 21, 2011, at 1:17 AM, Udo Borkowski wrote:
>>>> 
>>>> 
>>>> Hi,
>>>> currently we programmatically register ModelAdapters and Renderers to
>>>> an STGroup.
>>>> What about providing an extension to the syntax of Group to also
>>>> define these in a Group file?
>>>> E.g. I could imagine to use something like
>>>> 
>>>>     adapter "org.w3c.dom.Node"
>>>>     "com.collinfagan.strum.adapters.xml.NodeModelAdapter"
>>>>     renderer "org.w3c.dom.Node"
>>>>     "com.collinfagan.strum.adapters.xml.NodeRenderer"
>>>> 
>>>> at the top of an Group file. This would mean the same as running this
>>>> Java code for the group:
>>>> 
>>>>     group.registerRenderer(org.w3c.dom.Node.class, new
>>>>     com.collinfagan.strum.adapters.xml.NodeRenderer());
>>>> 
>>>>     group.registerModelAdaptor(org.w3c.dom.Node.class, new
>>>>     com.collinfagan.strum.adapters.xml.NodeModelAdapter());
>>>> 
>>>> Especially when importing groups this feature comes in handy as I
>>>> cannot register adapters/renderers when importing. In these cases I
>>>> must rely on the root group. For this group R we must register ALL
>>>> adapters/renders used in ANY group R imports. This make things hard
>>>> to maintain as using a "new" renderer in some template T requires me
>>>> to add the "registerRenderer" in EVERY code using T, maybe indirectly
>>>> through imports.
>>>> Similar to features discussed earlier this feature is easy to
>>>> implement for the STGroupFile, but the STGroupDir currently has no
>>>> proper place to hold this information. So we may also need to tackle
>>>> this re-appearing topic, too.
>>>> What do others think?
>>>> Udo
>>>> _______________________________________________
>>>> stringtemplate-interest mailing list
>>>> stringtemplate-interest at antlr.org
>>>> <mailto:stringtemplate-interest at antlr.org>
>>>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>>> 
>>> 
>>> 
>>> _______________________________________________
>>> stringtemplate-interest mailing list
>>> stringtemplate-interest at antlr.org
>>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>> 
>> 
> 
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest


From dmitry.vasil at gmail.com  Sun Jun 26 09:14:57 2011
From: dmitry.vasil at gmail.com (=?KOI8-R?B?5M3J1NLJyiD3wdPJzNjF1w==?=)
Date: Sun, 26 Jun 2011 20:14:57 +0400
Subject: [stringtemplate-interest] Templates that get another templates as
	arguments?
Message-ID: <BANLkTinXzZGiRhSTT4PxLXcAP=xEX6X1Pw@mail.gmail.com>

Consider the following example. I have a template that greets my friends:

greet()::=<<
<hello("Bob")>
<hello("John")>
<hello("Kate")>
<hello("Barbara")>
>>

hello(name)::=<<
Hello, <name>!
>>

Sometimes I want print their names in bold:

hello(name)::=<<
Hello, [b]<name>[/b]!
>>

Sometimes I want to prepend their names with the word "dear":

hello(name)::=<<
Hello, dear <name>!
>>

Generally, I want to pass a template for handling various cases as an
argument to template 'greet()'. I want to be able to do something like this:

greet(processName)::=<<
<hello("Bob")>
<hello("John")>
<hello("Kate")>
<hello("Barbara")>
>>

hello(name)::=<<
Hello, <processName(name)>
>>

bold(text)::=<<
[b]<text>[/b]
>>

dear(name)::=<<
dear <name>
>>

greet_in_bold()::=<<
<greet(processName=bold)>
>>

greet_dear()::=<<
<greet(processName=dear)>
>>

But I can't find how I can do something similar with StringTemplate. Do I
miss something obvious?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20110626/7b262c50/attachment.html 

From baerrach at gmail.com  Sun Jun 26 16:55:20 2011
From: baerrach at gmail.com (Barrie Treloar)
Date: Mon, 27 Jun 2011 09:25:20 +0930
Subject: [stringtemplate-interest] Templates that get another templates
	as arguments?
In-Reply-To: <BANLkTinXzZGiRhSTT4PxLXcAP=xEX6X1Pw@mail.gmail.com>
References: <BANLkTinXzZGiRhSTT4PxLXcAP=xEX6X1Pw@mail.gmail.com>
Message-ID: <BANLkTik1kb8Ff8vSjTd-PhPRi5i2b7xOBQ@mail.gmail.com>

2011/6/27 ??????? ???????? <dmitry.vasil at gmail.com>:
> Consider the following example. I have a template that greets my friends:
>
> greet()::=<<
> <hello("Bob")>
> <hello("John")>
> <hello("Kate")>
> <hello("Barbara")>
>>>
>
> hello(name)::=<<
> Hello, <name>!
>>>
>
> Sometimes I want print their names in bold:
>
> hello(name)::=<<
> Hello, [b]<name>[/b]!
>>>
>
> Sometimes I want to prepend their names with the word "dear":
>
> hello(name)::=<<
> Hello, dear <name>!
>>>
>
> Generally, I want to pass a template for handling various cases as an
> argument to template 'greet()'. I want to be able to do something like this:
>
> greet(processName)::=<<
> <hello("Bob")>
> <hello("John")>
> <hello("Kate")>
> <hello("Barbara")>
>>>
>
> hello(name)::=<<
> Hello, <processName(name)>
>>>
>
> bold(text)::=<<
> [b]<text>[/b]
>>>
>
> dear(name)::=<<
> dear <name>
>>>
>
> greet_in_bold()::=<<
> <greet(processName=bold)>
>>>
>
> greet_dear()::=<<
> <greet(processName=dear)>
>>>
>
> But I can't find how I can do something similar with StringTemplate. Do I
> miss something obvious?

I'm sorry that I dont have time to hack your scripts to show this
working, I can only throw some comments over the wall and let you
attempt them.
Hopefully you will get a better answer but this may get you moving in
the mean time.

Your hello template can take another argument which is the template
that will be applied.

hello(name, processName)::=<<
Hello, <processName(name)>
>>

Then greet becomes
greet(processName)::=<<
<hello("Bob",processName)>
<hello("John",processName)>
<hello("Kate",processName)>
<hello("Barbara",processName)>
>>

Alternatively, apply the template outside of the hello template:

Leave
hello(name)::=<<
Hello, <name>!
>>

And greet becomes
greet(processName)::=<<
<hello(<processName("Bob")>)>
<hello(<processName("John")>)>
<hello(<processName("Kate")>)>
<hello(<processName("Barbara")>)>
>>

You may also be better off using a list to apply templates over, see
http://www.antlr.org/wiki/display/ST4/StringTemplate+cheat+sheet

(You may need to wrap this in a list []...)
< "Bob", "John", "Kate", "Barbara" : { name |  greet(name, processName=bold)}>
or
< "Bob", "John", "Kate", "Barbara" : { name |  greet(<bold(name)>)}>
Depending on which way you decide to go.

Its too early in the morning to think about what the correct advice should be.
I think one way is better than the other, for all the usual comp. sci.
reasons of good design.

From mwipliez at yahoo.fr  Mon Jun 27 01:25:57 2011
From: mwipliez at yahoo.fr (Matthieu Wipliez)
Date: Mon, 27 Jun 2011 09:25:57 +0100 (BST)
Subject: [stringtemplate-interest] Re : Templates that get another templates
	as arguments?
In-Reply-To: <BANLkTik1kb8Ff8vSjTd-PhPRi5i2b7xOBQ@mail.gmail.com>
References: <BANLkTinXzZGiRhSTT4PxLXcAP=xEX6X1Pw@mail.gmail.com>
	<BANLkTik1kb8Ff8vSjTd-PhPRi5i2b7xOBQ@mail.gmail.com>
Message-ID: <1309163157.3303.YahooMailNeo@web25706.mail.ukl.yahoo.com>

Hi Dmitry,

I think you could also use the indirect template expression:

hello(name) ::= <<
Hello, <(processName)(name)>
>>

This will call the template whose name is computed from processName.

Cheers
Matthieu




>________________________________
>De?: Barrie Treloar <baerrach at gmail.com>
>??: ??????? ???????? <dmitry.vasil at gmail.com>
>Cc?: stringtemplate-interest at antlr.org
>Envoy? le : Lundi 27 Juin 2011 1h55
>Objet?: Re: [stringtemplate-interest] Templates that get another templates as arguments?
>
>2011/6/27 ??????? ???????? <dmitry.vasil at gmail.com>:
>> Consider the following example. I have a template that greets my friends:
>>
>> greet()::=<<
>> <hello("Bob")>
>> <hello("John")>
>> <hello("Kate")>
>> <hello("Barbara")>
>>>>
>>
>> hello(name)::=<<
>> Hello, <name>!
>>>>
>>
>> Sometimes I want print their names in bold:
>>
>> hello(name)::=<<
>> Hello, [b]<name>[/b]!
>>>>
>>
>> Sometimes I want to prepend their names with the word "dear":
>>
>> hello(name)::=<<
>> Hello, dear <name>!
>>>>
>>
>> Generally, I want to pass a template for handling various cases as an
>> argument to template 'greet()'. I want to be able to do something like this:
>>
>> greet(processName)::=<<
>> <hello("Bob")>
>> <hello("John")>
>> <hello("Kate")>
>> <hello("Barbara")>
>>>>
>>
>> hello(name)::=<<
>> Hello, <processName(name)>
>>>>
>>
>> bold(text)::=<<
>> [b]<text>[/b]
>>>>
>>
>> dear(name)::=<<
>> dear <name>
>>>>
>>
>> greet_in_bold()::=<<
>> <greet(processName=bold)>
>>>>
>>
>> greet_dear()::=<<
>> <greet(processName=dear)>
>>>>
>>
>> But I can't find how I can do something similar with StringTemplate. Do I
>> miss something obvious?
>
>I'm sorry that I dont have time to hack your scripts to show this
>working, I can only throw some comments over the wall and let you
>attempt them.
>Hopefully you will get a better answer but this may get you moving in
>the mean time.
>
>Your hello template can take another argument which is the template
>that will be applied.
>
>hello(name, processName)::=<<
>Hello, <processName(name)>
>>>
>
>Then greet becomes
>greet(processName)::=<<
><hello("Bob",processName)>
><hello("John",processName)>
><hello("Kate",processName)>
><hello("Barbara",processName)>
>>>
>
>Alternatively, apply the template outside of the hello template:
>
>Leave
>hello(name)::=<<
>Hello, <name>!
>>>
>
>And greet becomes
>greet(processName)::=<<
><hello(<processName("Bob")>)>
><hello(<processName("John")>)>
><hello(<processName("Kate")>)>
><hello(<processName("Barbara")>)>
>>>
>
>You may also be better off using a list to apply templates over, see
>http://www.antlr.org/wiki/display/ST4/StringTemplate+cheat+sheet
>
>(You may need to wrap this in a list []...)
>< "Bob", "John", "Kate", "Barbara" : { name |? greet(name, processName=bold)}>
>or
>< "Bob", "John", "Kate", "Barbara" : { name |? greet(<bold(name)>)}>
>Depending on which way you decide to go.
>
>Its too early in the morning to think about what the correct advice should be.
>I think one way is better than the other, for all the usual comp. sci.
>reasons of good design.
>_______________________________________________
>stringtemplate-interest mailing list
>stringtemplate-interest at antlr.org
>http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20110627/fc06f5f2/attachment.html 

From ub at abego-software.de  Mon Jun 27 06:54:30 2011
From: ub at abego-software.de (Udo Borkowski)
Date: Mon, 27 Jun 2011 15:54:30 +0200
Subject: [stringtemplate-interest] Group Syntax
	extension	for	ModelAdapter and Renderer
In-Reply-To: <DD30493C-6612-406B-95C0-357AB10DF856@cs.usfca.edu>
References: <22302E49-6669-4311-8024-99B17674A80F@abego-software.de>	<71F0A5CD-D401-44E7-8F0A-83C3C51A7E51@cs.usfca.edu>	<074701cc31ed$e2a55d00$a7f01700$@pixelminegames.com>
	<2ADFB36D-6BC2-4B09-9DD6-A4F8291F9118@abego-software.de>
	<4E0463FE.2040905@lancaster.ac.uk>
	<007f01cc3276$f6cef5f0$e46ce1d0$@pixelminegames.com>
	<4E049D1A.9070403@lancaster.ac.uk>
	<DD30493C-6612-406B-95C0-357AB10DF856@cs.usfca.edu>
Message-ID: <5F0F63EB-8DEC-4852-9507-D940F17FAEF4@abego-software.de>

> Inheritance will work on this.  it's the only way polymorphism works with template instantiation; same for adaptors/renderers.  If A imports B we created templates relative to A even if defined in B.  Therefore, a renderer for A works for B.  A's renderer overrides any you set in B as well.  No need to think about propagation or whatever.

I think we don't need polymorphism for renderer/adapter lookup. Also I do have my doubts polymorphism is an appropriate way to work with renderers/adapters. 

The main reason is we are very limited in choosing the "selector" in the renderer/adapter case, because we can only use the Java classes we want to render/adapter. In the template lookup we are free to select any valid template name and thus can easily decide if it will later be "overloaded" by a calling group or not. In the renderer case in nearly all my AttributeRenderers I am using "String.class" as the selector.

To explain this a little more and motivate a solution let me give you an example.

I have a group J with this template:

--- template J.stg ---------------
javadoc(s) ::= <<
<s;format="javadoc">
>>
-----------------------------------------

The template uses a custom attribute renderer (JavaDocRenderer) that renders the given text as a JavaDoc comment, e.g.:

/**
 * hello
 */

The way to achieve this today is load the group J and register the attributeRenderer for that group:

	groupJ.registerRenderer(String.class, new JavaDocRenderer());

The group J is a general purpose group, intended to be used in other groups. Now lets discuss two different cases.

CASE A
======

I have a group main that imports J programmatically, to use the "javadoc" template:

--- template main.stg ---------
main(cmt) ::= <<
<javadoc(cmt)>
?
>>
-----------------------------------------

Rendering main will however not render the expected JavaDoc comment, as only the AttributeRenderers registered to group main are used. 

So the way to cure this problem in the current implementation is to register the JavaDocRenderer also to the main group:

	group.registerRenderer(String.class, new JavaDocRenderer());

If we would implement the "inheritance" mechanism as Terence suggested, this extra statement would no longer be necessary, as the code will look for a renderer of String.class in the current scope. It will find a renderer in J. So here inheritance is fine.

CASE B
======

But now assume we have a slightly different main template:

--- template main.stg ---------
main(s,cmt) ::= <<
<javadoc(cmt)>
String f() {
   return <s;format="quote">;
}
>>
-----------------------------------------

Here template main needs an attribute renderer for the "quote" format (QuotedStringRenderer). Therefore we add this:

	group.registerRenderer(String.class, new QuotedStringRenderer());

Now the "quote" renders fine, however the JavaDoc is not ok. 

Note we cannot just add

	group.registerRenderer(String.class, new JavaDocRenderer());

to the main group as we have already registered a renderer for String.class.

Also the "inheritance" mechanism will not help here, as the lookup for a renderer for String.class will find the QuotedStringRenderer in group main and also use this one for the "javadoc" case.


PROPOSAL
=========

Instead of using inheritance we could make the attributeRender lookup a simple two step approach: 

Before using the renderer as provided by the current implementation check if the group containing the template using the "format" option defines an appropriate renderer. If yes, use that, otherwise use the "old" one.

    protected int writePOJO(STWriter out, ST self, Object o, String[] options) throws IOException {
        String formatString = null;
        if ( options!=null ) formatString = options[Option.FORMAT.ordinal()];
		
        AttributeRenderer r = self.impl.nativeGroup.getAttributeRenderer(o.getClass());
        if (r == null) {
            r = group.getAttributeRenderer(o.getClass());
        }
        ...

This will work fine in both case A and case B.

This is a simple solution, simpler than any "inheritance" or "propagation" approach. Actually I currently cannot think of a use case I would need anything more sophisticated.

Note if someone prefers to define all renderers in the root group (and not in imported groups) he is still free to do so. The proposed solution will then automatically fall back to the current behavior (as no attributeRenderers are found in the imported groups).


BTW: this suggested extension to the attributeRenderer lookup is not directly related to the "syntax extension" I proposed. Actually the "programmatic" approach to add renderers and do imports will benefit from the new lookup rules as well.



Udo



On 25.06.2011, at 20:08, Terence Parr wrote:

> hiya.  Inheritance will work on this.  it's the only way polymorphism works with template instantiation; same for adaptors/renderers.  If A imports B we created templates relative to A even if defined in B.  Therefore, a renderer for A works for B.  A's renderer overrides any you set in B as well.  No need to think about propagation or whatever.
> 
> I'll go look at inheritance mech. i see on my list "should adaptors get imported from super group?"
> 
> http://www.antlr.org/wiki/display/ST4/ST+v4+TODO+list
> 
> Ter
> On Jun 24, 2011, at 7:20 AM, Sam Barnett-Cormack wrote:
> 
>> On 24/06/2011 14:59, Sam Harwell wrote:
>>> The VM-wide setting approach seems like a possibility, but only if the "VM"
>>> is an instance object. There are a number of cases where I run several
>>> independent ST "sessions" within a single process, so I'm trying hard to
>>> remove every last mutable static variable from the entire [C# port of the]
>>> library. Perhaps an Interpreter object could be stored in an STGroup at the
>>> time when the group is constructed, and that interpreter used for all
>>> rendering of templates accessed through that group's getInstanceOf() method.
>>> That way, we have a "VM" which is a single interpreter used for that group's
>>> operations. I'd even go so far as to declare the Interpreter field of
>>> STGroup final, giving a fixed view of the VM.
>> 
>> I used the term VM based on my understanding of the Java version. I 
>> would agree that it would be best not to have such things truly static - 
>> I would support a (for example) STInterpreter class, an instance of 
>> which can be used when creating a group, or it be specified with a 
>> boolean parameter that a new one should be created (otherwise a truly 
>> VM-wide default shared one would be used). I imagine implementation 
>> would be awkward if you could import groups that use a different 
>> STInterpreter from the one doing the important (depending on what 
>> actually gets stored in the instance), but otherwise it's a good way to 
>> share details of such things between multiple groups under control. 
>> Perhaps allow STInterpreters to be defined as 'children' of another 
>> STInterpreter, with any properties not specifically set in that child 
>> being proxied to the parent (implementation details could vary, but I 
>> can see that being easiest with a specialised subclass).
>> 
>> And yes, it would make sense for the interpreter of any given STGroup to 
>> be final, to whatever extent is possible in any given implementation 
>> language. You don't want to be changing back and forth all of those 
>> things after a group is created, though you may want to manipulate the 
>> interpreter itself.
>> 
>> This would also fit with the usual patterns used for such things in Java 
>> these days, particularly EE, allowing it to fit better with Dependency 
>> Injection and Contexts. It's definitely more common in my experience to 
>> have some sort of context class to hold such things than it is to have 
>> anything global/static.
>> 
>> Sam
>> 
>>> -----Original Message-----
>>> From: Sam Barnett-Cormack [mailto:s.barnett-cormack at lancaster.ac.uk]
>>> Sent: Friday, June 24, 2011 5:17 AM
>>> To: Udo Borkowski
>>> Cc: Sam Harwell; 'stringtemplate-interest Template'; 'Terence Parr'
>>> Subject: Re: [stringtemplate-interest] Group Syntax extension for
>>> ModelAdapter and Renderer
>>> 
>>> Sorry to top-post, but this is a very general statement/opinion...
>>> 
>>> Renderers and ModelAdapters need to be entirely in the programming side,
>>> surely, to keep the complete language-agnostic value of template code.
>>> Unlike Antlr grammars, for instance, there's nothing in a StringTemplate
>>> that is ever language-specific (in terms of implementation), that I'm aware
>>> of, and I devoutly hope it will remain so.
>>> 
>>> Furthermore, whether it happens at the programming level or in the group
>>> file (and what about people not using group files, but group dirs or a
>>> custom group type), whatever is chosen in terms of when to propagate and in
>>> which direction, there will always be situations where what happens isn't
>>> what makes sense for that use-case. Thus, what would really be ideal is a
>>> way of controlling it more finely, as to when it propagates or doesn't, some
>>> sort of configuration. This would, however, likely be a huge burden on the
>>> ST developers, and a pretty big burden on those using it.
>>> 
>>> One alternative that occurs to me as probably working in most cases, is to
>>> allow a VM-wide setting of model adapters and renderers, and then allow
>>> group-specific overriding of this. Whether the group-specific ones then
>>> propagate or not, and in which direction, I'm not sure. You obviously can't
>>> have them propagating in both directions without every change always
>>> affecting the whole constellation of groups involved, which would seem
>>> suboptimal to me.
>>> 
>>> Anyway, that's just some software engineering thoughts. To get a better
>>> decision, it would really make sense to drill down to some competing
>>> use-cases and see if there's a common denominator that would work in all
>>> cases that anyone can think of.
>>> 
>>> Sam
>>> 
>>> On 24/06/2011 10:41, Udo Borkowski wrote:
>>>> The "propagation" approach solves one half of the problem: with this
>>>> approach one could use renderers and adapters in groups that are
>>>> imported through the "import" statement (and not programmatically).
>>>> This is currently not possible.
>>>> 
>>>> But the other half of the problem still exists: assume I change a
>>>> group G and use some special renderer in the new version. The group G
>>>> is imported by many other groups (maybe indirectly). I now need to
>>>> find all the "roots" of imports to G and add the new renderer there.
>>>> This can really become a maintenance nightmare. Providing the
>>>> "renderer" syntax extension and defining the renderer in the group
>>>> text would solve this issue.
>>>> 
>>>> Regarding the implementation of the "propagation" approach:
>>>> registering a renderer will require to visit all directly and
>>>> indirectly imported groups and add the renderer to all of them,
>>>> possibly creating new maps etc.. Most of the times this will be extra
>>>> work as the imported groups don't reference that renderer. Propagating
>>>> a renderer to all imported groups may lead to a performance issue when
>>> using large systems.
>>>> 
>>>> I would also hesitate to use the "propagation" approach as it adds a
>>>> new concept to StringTemplate ("propagation of renderers") that in
>>>> addition seems to "reverse" an already existing concept
>>>> ("inheritance"). I guess this may to misunderstandings.
>>>> 
>>>> In contrast to this the "renderer" syntax extension does not use a new
>>>> concept but rather makes an existing feature ("registerRenderer")
>>>> accessible to those users who prefer to work on the group text than
>>>> coding in Java.
>>>> 
>>>> As the "propagation" approach does not solve the whole problem I still
>>>> think we should add the "renderer"/"adapter" feature I suggested.
>>>> 
>>>> Udo
>>>> 
>>>> P.S.: all stuff mentioned regarding "renderer" also applied "adapter".
>>>> 
>>>> 
>>>> 
>>>> On 23.06.2011, at 23:38, Sam Harwell wrote:
>>>> 
>>>>> This is an interesting problem. Normally when things are inherited,
>>>>> they start at the imported group and propagate to the group that
>>>>> imported them. In this case, it sounds like you want to propagate it
>>>>> from the topmost group to all the groups it imports.
>>>>> Perhaps the thing to do here is propagate renderers to groups
>>>>> imported with STGroup.importTemplates(Token) (those are the ones
>>>>> imported via the group file), but don't propagate them to groups
>>>>> imported with a direct call to importTemplates(STGroup)?
>>>>> If you look at the diff of TemplateGroup.cs in CL8734 (it's a small
>>>>> diff), you can see how I adjusted the import code to handle the
>>>>> unload() method in everyone's cases. If the java code is adjusted in
>>>>> the same way (I can make the change if you want), then it's easy to
>>>>> propagate renderers by the following two rules:
>>>>> 1.When STGroup.importTemplates(Token) is called, the current group's
>>>>> renderers are added to the group that just got imported. This handles
>>>>> the case where the renderer is registered before the group is
>>>>> imported (especially relevant in reloading a group file after calling
>>> unload()).
>>>>> 2.When a renderer is added to a group, it is automatically added (by
>>>>> calling registerRenderer) to all groups in the importsToClearOnUnload
>>>>> list. This handles the case where the group is imported before the
>>>>> renderer is registered.
>>>>> Sam
>>>>> *From:*stringtemplate-interest-bounces at antlr.org
>>>>> <mailto:stringtemplate-interest-bounces at antlr.org>[mailto:stringtempl
>>>>> ate-interest-bounces at antlr.org]*On
>>>>> Behalf Of*Terence Parr
>>>>> *Sent:*Thursday, June 23, 2011 1:44 PM *To:*Udo Borkowski
>>>>> *Cc:*stringtemplate-interest Template
>>>>> *Subject:*Re: [stringtemplate-interest] Group Syntax extension for
>>>>> ModelAdapter and Renderer I think that we should probably keep this
>>>>> at the programming level.
>>>>> should we make renderers inherited instead to solve your problem?
>>>>> Ter
>>>>> On Jun 21, 2011, at 1:17 AM, Udo Borkowski wrote:
>>>>> 
>>>>> 
>>>>> Hi,
>>>>> currently we programmatically register ModelAdapters and Renderers to
>>>>> an STGroup.
>>>>> What about providing an extension to the syntax of Group to also
>>>>> define these in a Group file?
>>>>> E.g. I could imagine to use something like
>>>>> 
>>>>>    adapter "org.w3c.dom.Node"
>>>>>    "com.collinfagan.strum.adapters.xml.NodeModelAdapter"
>>>>>    renderer "org.w3c.dom.Node"
>>>>>    "com.collinfagan.strum.adapters.xml.NodeRenderer"
>>>>> 
>>>>> at the top of an Group file. This would mean the same as running this
>>>>> Java code for the group:
>>>>> 
>>>>>    group.registerRenderer(org.w3c.dom.Node.class, new
>>>>>    com.collinfagan.strum.adapters.xml.NodeRenderer());
>>>>> 
>>>>>    group.registerModelAdaptor(org.w3c.dom.Node.class, new
>>>>>    com.collinfagan.strum.adapters.xml.NodeModelAdapter());
>>>>> 
>>>>> Especially when importing groups this feature comes in handy as I
>>>>> cannot register adapters/renderers when importing. In these cases I
>>>>> must rely on the root group. For this group R we must register ALL
>>>>> adapters/renders used in ANY group R imports. This make things hard
>>>>> to maintain as using a "new" renderer in some template T requires me
>>>>> to add the "registerRenderer" in EVERY code using T, maybe indirectly
>>>>> through imports.
>>>>> Similar to features discussed earlier this feature is easy to
>>>>> implement for the STGroupFile, but the STGroupDir currently has no
>>>>> proper place to hold this information. So we may also need to tackle
>>>>> this re-appearing topic, too.
>>>>> What do others think?
>>>>> Udo
>>>>> _______________________________________________
>>>>> stringtemplate-interest mailing list
>>>>> stringtemplate-interest at antlr.org
>>>>> <mailto:stringtemplate-interest at antlr.org>
>>>>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>>>> 
>>>> 
>>>> 
>>>> _______________________________________________
>>>> stringtemplate-interest mailing list
>>>> stringtemplate-interest at antlr.org
>>>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>>> 
>>> 
>> 
>> _______________________________________________
>> stringtemplate-interest mailing list
>> stringtemplate-interest at antlr.org
>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
> 
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20110627/52786ce0/attachment-0001.html 

From noreply at boxbe.com  Mon Jun 27 06:55:09 2011
From: noreply at boxbe.com (noreply at boxbe.com)
Date: Mon, 27 Jun 2011 06:55:09 -0700 (PDT)
Subject: [stringtemplate-interest] stringtemplate-interest Digest, Vol 75,
 Issue 19 (Action Required)
Message-ID: <1159200387.1818400.1309182909559.JavaMail.prod@app008.boxbe.com>


Dear sender,

You will not receive any more courtesy notices from our members 
for two days. Messages you have sent will remain in a lower 
priority mailbox for our member to review at their leisure.

Future messages will be more likely to be viewed if you are on 
our member's priority Guest List.


  Thank you,
  edwardt.tril at gmail.com


Powered by Boxbe -- "End Email Overload"
Visit http://www.boxbe.com/how-it-works?tc=8526380534_557231436

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20110627/10e62942/attachment.html 
-------------- next part --------------
An embedded message was scrubbed...
From: stringtemplate-interest-request at antlr.org
Subject: stringtemplate-interest Digest, Vol 75, Issue 19
Date: Mon, 27 Jun 2011 06:54:40 -0700
Size: 2483
Url: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20110627/10e62942/attachment.mht 

From ub at abego-software.de  Mon Jun 27 07:15:20 2011
From: ub at abego-software.de (Udo Borkowski)
Date: Mon, 27 Jun 2011 16:15:20 +0200
Subject: [stringtemplate-interest] Re : Templates that get another
	templates as arguments?
In-Reply-To: <1309163157.3303.YahooMailNeo@web25706.mail.ukl.yahoo.com>
References: <BANLkTinXzZGiRhSTT4PxLXcAP=xEX6X1Pw@mail.gmail.com>
	<BANLkTik1kb8Ff8vSjTd-PhPRi5i2b7xOBQ@mail.gmail.com>
	<1309163157.3303.YahooMailNeo@web25706.mail.ukl.yahoo.com>
Message-ID: <12BDA1CA-336B-4823-A8AB-23B22593C778@abego-software.de>

Matthieu is right, the indirect template expression is one way to solve this. 

Alternatively you may also use anonymous templates. Therefore you don't even need to create an extra template for each "greeting pattern". Here the complete example:

main() ::= <<
<greet(pattern={[b]<name>[/b]})>

<greet(pattern={dear <name>})>
>>

greet(pattern)::=<<
<hello("Bob")>
<hello("John")>
<hello("Kate")>
<hello("Barbara")>
>>

hello(name)::=<<
Hello, <pattern>
>>

This will generate:

Hello, [b]Bob[/b]
Hello, [b]John[/b]
Hello, [b]Kate[/b]
Hello, [b]Barbara[/b]

Hello, dear Bob
Hello, dear John
Hello, dear Kate
Hello, dear Barbara




BTW: here your complete example converted using the "indirect template expression" approach:

main() ::= <<
<greet_in_bold()>

<greet_dear()>
>>

greet(processName)::=<<
<hello("Bob")>
<hello("John")>
<hello("Kate")>
<hello("Barbara")>
>>

hello(name)::=<<
Hello, <(processName)(name)>
>>

bold(text)::=<<
[b]<text>[/b]
>>

dear(name)::=<<
dear <name>
>>

greet_in_bold()::=<<
<greet(processName="bold")>
>>

greet_dear()::=<<
<greet(processName="dear")>
>>

Udo

On 27.06.2011, at 10:25, Matthieu Wipliez wrote:

> Hi Dmitry,
> 
> I think you could also use the indirect template expression:
> 
> hello(name) ::= <<
> Hello, <(processName)(name)>
> >>
> 
> This will call the template whose name is computed from processName.
> 
> Cheers
> Matthieu
> 
> De : Barrie Treloar <baerrach at gmail.com>
> ? : ??????? ???????? <dmitry.vasil at gmail.com>
> Cc : stringtemplate-interest at antlr.org
> Envoy? le : Lundi 27 Juin 2011 1h55
> Objet : Re: [stringtemplate-interest] Templates that get another templates as arguments?
> 
> 2011/6/27 ??????? ???????? <dmitry.vasil at gmail.com>:
> > Consider the following example. I have a template that greets my friends:
> >
> > greet()::=<<
> > <hello("Bob")>
> > <hello("John")>
> > <hello("Kate")>
> > <hello("Barbara")>
> >>>
> >
> > hello(name)::=<<
> > Hello, <name>!
> >>>
> >
> > Sometimes I want print their names in bold:
> >
> > hello(name)::=<<
> > Hello, [b]<name>[/b]!
> >>>
> >
> > Sometimes I want to prepend their names with the word "dear":
> >
> > hello(name)::=<<
> > Hello, dear <name>!
> >>>
> >
> > Generally, I want to pass a template for handling various cases as an
> > argument to template 'greet()'. I want to be able to do something like this:
> >
> > greet(processName)::=<<
> > <hello("Bob")>
> > <hello("John")>
> > <hello("Kate")>
> > <hello("Barbara")>
> >>>
> >
> > hello(name)::=<<
> > Hello, <processName(name)>
> >>>
> >
> > bold(text)::=<<
> > [b]<text>[/b]
> >>>
> >
> > dear(name)::=<<
> > dear <name>
> >>>
> >
> > greet_in_bold()::=<<
> > <greet(processName=bold)>
> >>>
> >
> > greet_dear()::=<<
> > <greet(processName=dear)>
> >>>
> >
> > But I can't find how I can do something similar with StringTemplate. Do I
> > miss something obvious?
> 
> I'm sorry that I dont have time to hack your scripts to show this
> working, I can only throw some comments over the wall and let you
> attempt them.
> Hopefully you will get a better answer but this may get you moving in
> the mean time.
> 
> Your hello template can take another argument which is the template
> that will be applied.
> 
> hello(name, processName)::=<<
> Hello, <processName(name)>
> >>
> 
> Then greet becomes
> greet(processName)::=<<
> <hello("Bob",processName)>
> <hello("John",processName)>
> <hello("Kate",processName)>
> <hello("Barbara",processName)>
> >>
> 
> Alternatively, apply the template outside of the hello template:
> 
> Leave
> hello(name)::=<<
> Hello, <name>!
> >>
> 
> And greet becomes
> greet(processName)::=<<
> <hello(<processName("Bob")>)>
> <hello(<processName("John")>)>
> <hello(<processName("Kate")>)>
> <hello(<processName("Barbara")>)>
> >>
> 
> You may also be better off using a list to apply templates over, see
> http://www.antlr.org/wiki/display/ST4/StringTemplate+cheat+sheet
> 
> (You may need to wrap this in a list []...)
> < "Bob", "John", "Kate", "Barbara" : { name |  greet(name, processName=bold)}>
> or
> < "Bob", "John", "Kate", "Barbara" : { name |  greet(<bold(name)>)}>
> Depending on which way you decide to go.
> 
> Its too early in the morning to think about what the correct advice should be.
> I think one way is better than the other, for all the usual comp. sci.
> reasons of good design.
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
> 
> 
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20110627/fa4d330a/attachment.html 

From s.barnett-cormack at lancaster.ac.uk  Mon Jun 27 07:52:11 2011
From: s.barnett-cormack at lancaster.ac.uk (Sam Barnett-Cormack)
Date: Mon, 27 Jun 2011 15:52:11 +0100
Subject: [stringtemplate-interest] Group
 Syntax	extension	for	ModelAdapter and Renderer
In-Reply-To: <5F0F63EB-8DEC-4852-9507-D940F17FAEF4@abego-software.de>
References: <22302E49-6669-4311-8024-99B17674A80F@abego-software.de>	<71F0A5CD-D401-44E7-8F0A-83C3C51A7E51@cs.usfca.edu>	<074701cc31ed$e2a55d00$a7f01700$@pixelminegames.com>	<2ADFB36D-6BC2-4B09-9DD6-A4F8291F9118@abego-software.de>	<4E0463FE.2040905@lancaster.ac.uk>	<007f01cc3276$f6cef5f0$e46ce1d0$@pixelminegames.com>	<4E049D1A.9070403@lancaster.ac.uk>	<DD30493C-6612-406B-95C0-357AB10DF856@cs.usfca.edu>
	<5F0F63EB-8DEC-4852-9507-D940F17FAEF4@abego-software.de>
Message-ID: <4E08991B.3080304@lancaster.ac.uk>

On 27/06/2011 14:54, Udo Borkowski wrote:
> CASE B
> ======
>
> But now assume we have a slightly different main template:
>
> --- template main.stg ---------
> main(s,cmt) ::= <<
> <*javadoc*(cmt)>
> String f() {
> return <s;*format="quote"*>;
> }
>  >>
> -----------------------------------------
>
> Here template main needs an attribute renderer for the "quote" format
> (QuotedStringRenderer). Therefore we add this:
>
> group.registerRenderer(String.class, new QuotedStringRenderer());
>
> Now the "quote" renders fine, however the JavaDoc is not ok.
>
> Note we cannot just add
>
> group.registerRenderer(String.class, new JavaDocRenderer());
>
> to the main group as we have already registered a renderer for String.class.
>
> Also the "inheritance" mechanism will not help here, as the lookup for a
> renderer for String.class will find the QuotedStringRenderer in group
> main and also use this one for the "javadoc" case.

This sounds like a situation that the renderer system isn't design to 
cater to; rather, it sounds like you should be using a template itself 
for the javadoccing case, for instance, or having a single renderer that 
does both sensitive to the template; perhaps a meta-renderer that checks 
to see whether formats are recognised. In any case, it's not a case that 
ST seems to try to cater to at the moment, renderers instead being based 
principally on the type being passed, rather than the format. I'm not 
sure how generally usefula a fix for it would be, as your examples seem 
to be generally better served by templates than by renderers (okay, the 
quote one presumeably does escaping and suchlike, making it possibly 
appropriate to the renderer). Maybe the sensible thing to do, if you 
really run into things like this, is define a dynamic renderer for 
strings, that you can then register format-specific subrenderers with.

Sam

> PROPOSAL
> =========
>
> Instead of using inheritance we could make the attributeRender lookup a
> simple two step approach:
>
> Before using the renderer as provided by the current implementation
> check if the group containing the template using the "format" option
> defines an appropriate renderer. If yes, use that, otherwise use the
> "old" one.
>
> protectedintwritePOJO(STWriter out, ST self, Object o, String[] options)
> throwsIOException {
> String formatString = null;
> if( options!=null) formatString = options[Option.FORMAT.ordinal()];
>
>
> AttributeRenderer r =
> *self.**impl**.**nativeGroup**.getAttributeRenderer(o.getClass());*
> *****if**(r == **null**) {*
> r = group.getAttributeRenderer(o.getClass());
> }
> ...
>
> This will work fine in both case A and case B.
>
> This is a simple solution, simpler than any "inheritance" or
> "propagation" approach. Actually I currently cannot think of a use case
> I would need anything more sophisticated.
>
> Note if someone prefers to define all renderers in the root group (and
> not in imported groups) he is still free to do so. The proposed solution
> will then automatically fall back to the current behavior (as no
> attributeRenderers are found in the imported groups).
>
>
> BTW: this suggested extension to the attributeRenderer lookup is not
> directly related to the "syntax extension" I proposed. Actually the
> "programmatic" approach to add renderers and do imports will benefit
> from the new lookup rules as well.
>
>
>
> Udo
>
>
>
> On 25.06.2011, at 20:08, Terence Parr wrote:
>
>> hiya. Inheritance will work on this. it's the only way polymorphism
>> works with template instantiation; same for adaptors/renderers. If A
>> imports B we created templates relative to A even if defined in B.
>> Therefore, a renderer for A works for B. A's renderer overrides any
>> you set in B as well. No need to think about propagation or whatever.
>>
>> I'll go look at inheritance mech. i see on my list "should adaptors
>> get imported from super group?"
>>
>> http://www.antlr.org/wiki/display/ST4/ST+v4+TODO+list
>>
>> Ter
>> On Jun 24, 2011, at 7:20 AM, Sam Barnett-Cormack wrote:
>>
>>> On 24/06/2011 14:59, Sam Harwell wrote:
>>>> The VM-wide setting approach seems like a possibility, but only if
>>>> the "VM"
>>>> is an instance object. There are a number of cases where I run several
>>>> independent ST "sessions" within a single process, so I'm trying hard to
>>>> remove every last mutable static variable from the entire [C# port
>>>> of the]
>>>> library. Perhaps an Interpreter object could be stored in an STGroup
>>>> at the
>>>> time when the group is constructed, and that interpreter used for all
>>>> rendering of templates accessed through that group's getInstanceOf()
>>>> method.
>>>> That way, we have a "VM" which is a single interpreter used for that
>>>> group's
>>>> operations. I'd even go so far as to declare the Interpreter field of
>>>> STGroup final, giving a fixed view of the VM.
>>>
>>> I used the term VM based on my understanding of the Java version. I
>>> would agree that it would be best not to have such things truly static -
>>> I would support a (for example) STInterpreter class, an instance of
>>> which can be used when creating a group, or it be specified with a
>>> boolean parameter that a new one should be created (otherwise a truly
>>> VM-wide default shared one would be used). I imagine implementation
>>> would be awkward if you could import groups that use a different
>>> STInterpreter from the one doing the important (depending on what
>>> actually gets stored in the instance), but otherwise it's a good way to
>>> share details of such things between multiple groups under control.
>>> Perhaps allow STInterpreters to be defined as 'children' of another
>>> STInterpreter, with any properties not specifically set in that child
>>> being proxied to the parent (implementation details could vary, but I
>>> can see that being easiest with a specialised subclass).
>>>
>>> And yes, it would make sense for the interpreter of any given STGroup to
>>> be final, to whatever extent is possible in any given implementation
>>> language. You don't want to be changing back and forth all of those
>>> things after a group is created, though you may want to manipulate the
>>> interpreter itself.
>>>
>>> This would also fit with the usual patterns used for such things in Java
>>> these days, particularly EE, allowing it to fit better with Dependency
>>> Injection and Contexts. It's definitely more common in my experience to
>>> have some sort of context class to hold such things than it is to have
>>> anything global/static.
>>>
>>> Sam
>>>
>>>> -----Original Message-----
>>>> From: Sam Barnett-Cormack [mailto:s.barnett-cormack at lancaster.ac.uk]
>>>> Sent: Friday, June 24, 2011 5:17 AM
>>>> To: Udo Borkowski
>>>> Cc: Sam Harwell; 'stringtemplate-interest Template'; 'Terence Parr'
>>>> Subject: Re: [stringtemplate-interest] Group Syntax extension for
>>>> ModelAdapter and Renderer
>>>>
>>>> Sorry to top-post, but this is a very general statement/opinion...
>>>>
>>>> Renderers and ModelAdapters need to be entirely in the programming side,
>>>> surely, to keep the complete language-agnostic value of template code.
>>>> Unlike Antlr grammars, for instance, there's nothing in a StringTemplate
>>>> that is ever language-specific (in terms of implementation), that
>>>> I'm aware
>>>> of, and I devoutly hope it will remain so.
>>>>
>>>> Furthermore, whether it happens at the programming level or in the group
>>>> file (and what about people not using group files, but group dirs or a
>>>> custom group type), whatever is chosen in terms of when to propagate
>>>> and in
>>>> which direction, there will always be situations where what happens
>>>> isn't
>>>> what makes sense for that use-case. Thus, what would really be ideal
>>>> is a
>>>> way of controlling it more finely, as to when it propagates or
>>>> doesn't, some
>>>> sort of configuration. This would, however, likely be a huge burden
>>>> on the
>>>> ST developers, and a pretty big burden on those using it.
>>>>
>>>> One alternative that occurs to me as probably working in most cases,
>>>> is to
>>>> allow a VM-wide setting of model adapters and renderers, and then allow
>>>> group-specific overriding of this. Whether the group-specific ones then
>>>> propagate or not, and in which direction, I'm not sure. You
>>>> obviously can't
>>>> have them propagating in both directions without every change always
>>>> affecting the whole constellation of groups involved, which would seem
>>>> suboptimal to me.
>>>>
>>>> Anyway, that's just some software engineering thoughts. To get a better
>>>> decision, it would really make sense to drill down to some competing
>>>> use-cases and see if there's a common denominator that would work in all
>>>> cases that anyone can think of.
>>>>
>>>> Sam
>>>>
>>>> On 24/06/2011 10:41, Udo Borkowski wrote:
>>>>> The "propagation" approach solves one half of the problem: with this
>>>>> approach one could use renderers and adapters in groups that are
>>>>> imported through the "import" statement (and not programmatically).
>>>>> This is currently not possible.
>>>>>
>>>>> But the other half of the problem still exists: assume I change a
>>>>> group G and use some special renderer in the new version. The group G
>>>>> is imported by many other groups (maybe indirectly). I now need to
>>>>> find all the "roots" of imports to G and add the new renderer there.
>>>>> This can really become a maintenance nightmare. Providing the
>>>>> "renderer" syntax extension and defining the renderer in the group
>>>>> text would solve this issue.
>>>>>
>>>>> Regarding the implementation of the "propagation" approach:
>>>>> registering a renderer will require to visit all directly and
>>>>> indirectly imported groups and add the renderer to all of them,
>>>>> possibly creating new maps etc.. Most of the times this will be extra
>>>>> work as the imported groups don't reference that renderer. Propagating
>>>>> a renderer to all imported groups may lead to a performance issue when
>>>> using large systems.
>>>>>
>>>>> I would also hesitate to use the "propagation" approach as it adds a
>>>>> new concept to StringTemplate ("propagation of renderers") that in
>>>>> addition seems to "reverse" an already existing concept
>>>>> ("inheritance"). I guess this may to misunderstandings.
>>>>>
>>>>> In contrast to this the "renderer" syntax extension does not use a new
>>>>> concept but rather makes an existing feature ("registerRenderer")
>>>>> accessible to those users who prefer to work on the group text than
>>>>> coding in Java.
>>>>>
>>>>> As the "propagation" approach does not solve the whole problem I still
>>>>> think we should add the "renderer"/"adapter" feature I suggested.
>>>>>
>>>>> Udo
>>>>>
>>>>> P.S.: all stuff mentioned regarding "renderer" also applied "adapter".
>>>>>
>>>>>
>>>>>
>>>>> On 23.06.2011, at 23:38, Sam Harwell wrote:
>>>>>
>>>>>> This is an interesting problem. Normally when things are inherited,
>>>>>> they start at the imported group and propagate to the group that
>>>>>> imported them. In this case, it sounds like you want to propagate it
>>>>>> from the topmost group to all the groups it imports.
>>>>>> Perhaps the thing to do here is propagate renderers to groups
>>>>>> imported with STGroup.importTemplates(Token) (those are the ones
>>>>>> imported via the group file), but don't propagate them to groups
>>>>>> imported with a direct call to importTemplates(STGroup)?
>>>>>> If you look at the diff of TemplateGroup.cs in CL8734 (it's a small
>>>>>> diff), you can see how I adjusted the import code to handle the
>>>>>> unload() method in everyone's cases. If the java code is adjusted in
>>>>>> the same way (I can make the change if you want), then it's easy to
>>>>>> propagate renderers by the following two rules:
>>>>>> 1.When STGroup.importTemplates(Token) is called, the current group's
>>>>>> renderers are added to the group that just got imported. This handles
>>>>>> the case where the renderer is registered before the group is
>>>>>> imported (especially relevant in reloading a group file after calling
>>>> unload()).
>>>>>> 2.When a renderer is added to a group, it is automatically added (by
>>>>>> calling registerRenderer) to all groups in the importsToClearOnUnload
>>>>>> list. This handles the case where the group is imported before the
>>>>>> renderer is registered.
>>>>>> Sam
>>>>>> *From:*stringtemplate-interest-bounces at antlr.org
>>>>>> <mailto:stringtemplate-interest-bounces at antlr.org>[mailto:stringtempl
>>>>>> ate-interest-bounces at antlr.org]*On
>>>>>> Behalf Of*Terence Parr
>>>>>> *Sent:*Thursday, June 23, 2011 1:44 PM *To:*Udo Borkowski
>>>>>> *Cc:*stringtemplate-interest Template
>>>>>> *Subject:*Re: [stringtemplate-interest] Group Syntax extension for
>>>>>> ModelAdapter and Renderer I think that we should probably keep this
>>>>>> at the programming level.
>>>>>> should we make renderers inherited instead to solve your problem?
>>>>>> Ter
>>>>>> On Jun 21, 2011, at 1:17 AM, Udo Borkowski wrote:
>>>>>>
>>>>>>
>>>>>> Hi,
>>>>>> currently we programmatically register ModelAdapters and Renderers to
>>>>>> an STGroup.
>>>>>> What about providing an extension to the syntax of Group to also
>>>>>> define these in a Group file?
>>>>>> E.g. I could imagine to use something like
>>>>>>
>>>>>> adapter "org.w3c.dom.Node"
>>>>>> "com.collinfagan.strum.adapters.xml.NodeModelAdapter"
>>>>>> renderer "org.w3c.dom.Node"
>>>>>> "com.collinfagan.strum.adapters.xml.NodeRenderer"
>>>>>>
>>>>>> at the top of an Group file. This would mean the same as running this
>>>>>> Java code for the group:
>>>>>>
>>>>>> group.registerRenderer(org.w3c.dom.Node.class, new
>>>>>> com.collinfagan.strum.adapters.xml.NodeRenderer());
>>>>>>
>>>>>> group.registerModelAdaptor(org.w3c.dom.Node.class, new
>>>>>> com.collinfagan.strum.adapters.xml.NodeModelAdapter());
>>>>>>
>>>>>> Especially when importing groups this feature comes in handy as I
>>>>>> cannot register adapters/renderers when importing. In these cases I
>>>>>> must rely on the root group. For this group R we must register ALL
>>>>>> adapters/renders used in ANY group R imports. This make things hard
>>>>>> to maintain as using a "new" renderer in some template T requires me
>>>>>> to add the "registerRenderer" in EVERY code using T, maybe indirectly
>>>>>> through imports.
>>>>>> Similar to features discussed earlier this feature is easy to
>>>>>> implement for the STGroupFile, but the STGroupDir currently has no
>>>>>> proper place to hold this information. So we may also need to tackle
>>>>>> this re-appearing topic, too.
>>>>>> What do others think?
>>>>>> Udo
>>>>>> _______________________________________________
>>>>>> stringtemplate-interest mailing list
>>>>>> stringtemplate-interest at antlr.org
>>>>>> <mailto:stringtemplate-interest at antlr.org>
>>>>>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>>>>>
>>>>>
>>>>>
>>>>> _______________________________________________
>>>>> stringtemplate-interest mailing list
>>>>> stringtemplate-interest at antlr.org
>>>>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>>>>
>>>>
>>>
>>> _______________________________________________
>>> stringtemplate-interest mailing list
>>> stringtemplate-interest at antlr.org
>>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>>
>> _______________________________________________
>> stringtemplate-interest mailing list
>> stringtemplate-interest at antlr.org
>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>
>
>
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest


From sharwell at pixelminegames.com  Mon Jun 27 08:27:26 2011
From: sharwell at pixelminegames.com (Sam Harwell)
Date: Mon, 27 Jun 2011 10:27:26 -0500
Subject: [stringtemplate-interest] Group
	Syntax	extension	for	ModelAdapter and Renderer
In-Reply-To: <5F0F63EB-8DEC-4852-9507-D940F17FAEF4@abego-software.de>
References: <22302E49-6669-4311-8024-99B17674A80F@abego-software.de>	<71F0A5CD-D401-44E7-8F0A-83C3C51A7E51@cs.usfca.edu>	<074701cc31ed$e2a55d00$a7f01700$@pixelminegames.com>	<2ADFB36D-6BC2-4B09-9DD6-A4F8291F9118@abego-software.de>	<4E0463FE.2040905@lancaster.ac.uk>	<007f01cc3276$f6cef5f0$e46ce1d0$@pixelminegames.com>	<4E049D1A.9070403@lancaster.ac.uk>	<DD30493C-6612-406B-95C0-357AB10DF856@cs.usfca.edu>
	<5F0F63EB-8DEC-4852-9507-D940F17FAEF4@abego-software.de>
Message-ID: <00b801cc34de$b9471810$2bd54830$@pixelminegames.com>

Your particular example leads me to think you may be trying to use renderers
to replace templates.

 

javadoc(s) ::= <<

/**

* <s; wrap="\n * ">

*/

>> 

 

Sam

 

From: stringtemplate-interest-bounces at antlr.org
[mailto:stringtemplate-interest-bounces at antlr.org] On Behalf Of Udo
Borkowski
Sent: Monday, June 27, 2011 8:55 AM
To: Terence Parr
Cc: stringtemplate-interest Template
Subject: Re: [stringtemplate-interest] Group Syntax extension for
ModelAdapter and Renderer

 

Inheritance will work on this.  it's the only way polymorphism works with
template instantiation; same for adaptors/renderers.  If A imports B we
created templates relative to A even if defined in B.  Therefore, a renderer
for A works for B.  A's renderer overrides any you set in B as well.  No
need to think about propagation or whatever.

 

I think we don't need polymorphism for renderer/adapter lookup. Also I do
have my doubts polymorphism is an appropriate way to work with
renderers/adapters. 

 

The main reason is we are very limited in choosing the "selector" in the
renderer/adapter case, because we can only use the Java classes we want to
render/adapter. In the template lookup we are free to select any valid
template name and thus can easily decide if it will later be "overloaded" by
a calling group or not. In the renderer case in nearly all my
AttributeRenderers I am using "String.class" as the selector.

 

To explain this a little more and motivate a solution let me give you an
example.

 

I have a group J with this template:

 

--- template J.stg ---------------

javadoc(s) ::= <<

<s;format="javadoc">

>> 

-----------------------------------------

 

The template uses a custom attribute renderer (JavaDocRenderer) that renders
the given text as a JavaDoc comment, e.g.:

 

/**

 * hello

 */

 

The way to achieve this today is load the group J and register the
attributeRenderer for that group:

 

       groupJ.registerRenderer(String.class, new JavaDocRenderer());

 

The group J is a general purpose group, intended to be used in other groups.
Now lets discuss two different cases.

 

CASE A

======

 

I have a group main that imports J programmatically, to use the "javadoc"
template:

 

--- template main.stg ---------

main(cmt) ::= <<

<javadoc(cmt)>

.

>> 

-----------------------------------------

 

Rendering main will however not render the expected JavaDoc comment, as only
the AttributeRenderers registered to group main are used. 

 

So the way to cure this problem in the current implementation is to register
the JavaDocRenderer also to the main group:

 

       group.registerRenderer(String.class, new JavaDocRenderer());

 

If we would implement the "inheritance" mechanism as Terence suggested, this
extra statement would no longer be necessary, as the code will look for a
renderer of String.class in the current scope. It will find a renderer in J.
So here inheritance is fine.

 

CASE B

======

 

But now assume we have a slightly different main template:

 

--- template main.stg ---------

main(s,cmt) ::= <<

<javadoc(cmt)>

String f() {

   return <s;format="quote">;

}

>> 

-----------------------------------------

 

Here template main needs an attribute renderer for the "quote" format
(QuotedStringRenderer). Therefore we add this:

 

       group.registerRenderer(String.class, new QuotedStringRenderer());

 

Now the "quote" renders fine, however the JavaDoc is not ok. 

 

Note we cannot just add

 

       group.registerRenderer(String.class, new JavaDocRenderer());

 

to the main group as we have already registered a renderer for String.class.

 

Also the "inheritance" mechanism will not help here, as the lookup for a
renderer for String.class will find the QuotedStringRenderer in group main
and also use this one for the "javadoc" case.

 

 

PROPOSAL

=========

 

Instead of using inheritance we could make the attributeRender lookup a
simple two step approach: 

 

Before using the renderer as provided by the current implementation check if
the group containing the template using the "format" option defines an
appropriate renderer. If yes, use that, otherwise use the "old" one.

 

    protected int writePOJO(STWriter out, ST self, Object o, String[]
options) throws IOException {

        String formatString = null;

        if ( options!=null ) formatString =
options[Option.FORMAT.ordinal()];

                                

        AttributeRenderer r =
self.impl.nativeGroup.getAttributeRenderer(o.getClass());

        if (r == null) {

            r = group.getAttributeRenderer(o.getClass());

        }

        ...

 

This will work fine in both case A and case B.

 

This is a simple solution, simpler than any "inheritance" or "propagation"
approach. Actually I currently cannot think of a use case I would need
anything more sophisticated.

 

Note if someone prefers to define all renderers in the root group (and not
in imported groups) he is still free to do so. The proposed solution will
then automatically fall back to the current behavior (as no
attributeRenderers are found in the imported groups).

 

 

BTW: this suggested extension to the attributeRenderer lookup is not
directly related to the "syntax extension" I proposed. Actually the
"programmatic" approach to add renderers and do imports will benefit from
the new lookup rules as well.

 

 

 

Udo

 

 

 

On 25.06.2011, at 20:08, Terence Parr wrote:





hiya.  Inheritance will work on this.  it's the only way polymorphism works
with template instantiation; same for adaptors/renderers.  If A imports B we
created templates relative to A even if defined in B.  Therefore, a renderer
for A works for B.  A's renderer overrides any you set in B as well.  No
need to think about propagation or whatever.

I'll go look at inheritance mech. i see on my list "should adaptors get
imported from super group?"

http://www.antlr.org/wiki/display/ST4/ST+v4+TODO+list

Ter
On Jun 24, 2011, at 7:20 AM, Sam Barnett-Cormack wrote:




On 24/06/2011 14:59, Sam Harwell wrote:

The VM-wide setting approach seems like a possibility, but only if the "VM"

is an instance object. There are a number of cases where I run several

independent ST "sessions" within a single process, so I'm trying hard to

remove every last mutable static variable from the entire [C# port of the]

library. Perhaps an Interpreter object could be stored in an STGroup at the

time when the group is constructed, and that interpreter used for all

rendering of templates accessed through that group's getInstanceOf() method.

That way, we have a "VM" which is a single interpreter used for that group's

operations. I'd even go so far as to declare the Interpreter field of

STGroup final, giving a fixed view of the VM.

 

I used the term VM based on my understanding of the Java version. I 

would agree that it would be best not to have such things truly static - 

I would support a (for example) STInterpreter class, an instance of 

which can be used when creating a group, or it be specified with a 

boolean parameter that a new one should be created (otherwise a truly 

VM-wide default shared one would be used). I imagine implementation 

would be awkward if you could import groups that use a different 

STInterpreter from the one doing the important (depending on what 

actually gets stored in the instance), but otherwise it's a good way to 

share details of such things between multiple groups under control. 

Perhaps allow STInterpreters to be defined as 'children' of another 

STInterpreter, with any properties not specifically set in that child 

being proxied to the parent (implementation details could vary, but I 

can see that being easiest with a specialised subclass).

 

And yes, it would make sense for the interpreter of any given STGroup to 

be final, to whatever extent is possible in any given implementation 

language. You don't want to be changing back and forth all of those 

things after a group is created, though you may want to manipulate the 

interpreter itself.

 

This would also fit with the usual patterns used for such things in Java 

these days, particularly EE, allowing it to fit better with Dependency 

Injection and Contexts. It's definitely more common in my experience to 

have some sort of context class to hold such things than it is to have 

anything global/static.

 

Sam

 

-----Original Message-----

From: Sam Barnett-Cormack [mailto:s.barnett-cormack at lancaster.ac.uk]

Sent: Friday, June 24, 2011 5:17 AM

To: Udo Borkowski

Cc: Sam Harwell; 'stringtemplate-interest Template'; 'Terence Parr'

Subject: Re: [stringtemplate-interest] Group Syntax extension for

ModelAdapter and Renderer

 

Sorry to top-post, but this is a very general statement/opinion...

 

Renderers and ModelAdapters need to be entirely in the programming side,

surely, to keep the complete language-agnostic value of template code.

Unlike Antlr grammars, for instance, there's nothing in a StringTemplate

that is ever language-specific (in terms of implementation), that I'm aware

of, and I devoutly hope it will remain so.

 

Furthermore, whether it happens at the programming level or in the group

file (and what about people not using group files, but group dirs or a

custom group type), whatever is chosen in terms of when to propagate and in

which direction, there will always be situations where what happens isn't

what makes sense for that use-case. Thus, what would really be ideal is a

way of controlling it more finely, as to when it propagates or doesn't, some

sort of configuration. This would, however, likely be a huge burden on the

ST developers, and a pretty big burden on those using it.

 

One alternative that occurs to me as probably working in most cases, is to

allow a VM-wide setting of model adapters and renderers, and then allow

group-specific overriding of this. Whether the group-specific ones then

propagate or not, and in which direction, I'm not sure. You obviously can't

have them propagating in both directions without every change always

affecting the whole constellation of groups involved, which would seem

suboptimal to me.

 

Anyway, that's just some software engineering thoughts. To get a better

decision, it would really make sense to drill down to some competing

use-cases and see if there's a common denominator that would work in all

cases that anyone can think of.

 

Sam

 

On 24/06/2011 10:41, Udo Borkowski wrote:

The "propagation" approach solves one half of the problem: with this

approach one could use renderers and adapters in groups that are

imported through the "import" statement (and not programmatically).

This is currently not possible.

 

But the other half of the problem still exists: assume I change a

group G and use some special renderer in the new version. The group G

is imported by many other groups (maybe indirectly). I now need to

find all the "roots" of imports to G and add the new renderer there.

This can really become a maintenance nightmare. Providing the

"renderer" syntax extension and defining the renderer in the group

text would solve this issue.

 

Regarding the implementation of the "propagation" approach:

registering a renderer will require to visit all directly and

indirectly imported groups and add the renderer to all of them,

possibly creating new maps etc.. Most of the times this will be extra

work as the imported groups don't reference that renderer. Propagating

a renderer to all imported groups may lead to a performance issue when

using large systems.

 

I would also hesitate to use the "propagation" approach as it adds a

new concept to StringTemplate ("propagation of renderers") that in

addition seems to "reverse" an already existing concept

("inheritance"). I guess this may to misunderstandings.

 

In contrast to this the "renderer" syntax extension does not use a new

concept but rather makes an existing feature ("registerRenderer")

accessible to those users who prefer to work on the group text than

coding in Java.

 

As the "propagation" approach does not solve the whole problem I still

think we should add the "renderer"/"adapter" feature I suggested.

 

Udo

 

P.S.: all stuff mentioned regarding "renderer" also applied "adapter".

 

 

 

On 23.06.2011, at 23:38, Sam Harwell wrote:

 

This is an interesting problem. Normally when things are inherited,

they start at the imported group and propagate to the group that

imported them. In this case, it sounds like you want to propagate it

from the topmost group to all the groups it imports.

Perhaps the thing to do here is propagate renderers to groups

imported with STGroup.importTemplates(Token) (those are the ones

imported via the group file), but don't propagate them to groups

imported with a direct call to importTemplates(STGroup)?

If you look at the diff of TemplateGroup.cs in CL8734 (it's a small

diff), you can see how I adjusted the import code to handle the

unload() method in everyone's cases. If the java code is adjusted in

the same way (I can make the change if you want), then it's easy to

propagate renderers by the following two rules:

1.When STGroup.importTemplates(Token) is called, the current group's

renderers are added to the group that just got imported. This handles

the case where the renderer is registered before the group is

imported (especially relevant in reloading a group file after calling

unload()).

2.When a renderer is added to a group, it is automatically added (by

calling registerRenderer) to all groups in the importsToClearOnUnload

list. This handles the case where the group is imported before the

renderer is registered.

Sam

*From:*stringtemplate-interest-bounces at antlr.org

<mailto:stringtemplate-interest-bounces at antlr.org>[mailto:stringtempl

ate-interest-bounces at antlr.org]*On

Behalf Of*Terence Parr

*Sent:*Thursday, June 23, 2011 1:44 PM *To:*Udo Borkowski

*Cc:*stringtemplate-interest Template

*Subject:*Re: [stringtemplate-interest] Group Syntax extension for

ModelAdapter and Renderer I think that we should probably keep this

at the programming level.

should we make renderers inherited instead to solve your problem?

Ter

On Jun 21, 2011, at 1:17 AM, Udo Borkowski wrote:

 

 

Hi,

currently we programmatically register ModelAdapters and Renderers to

an STGroup.

What about providing an extension to the syntax of Group to also

define these in a Group file?

E.g. I could imagine to use something like

 

   adapter "org.w3c.dom.Node"

   "com.collinfagan.strum.adapters.xml.NodeModelAdapter"

   renderer "org.w3c.dom.Node"

   "com.collinfagan.strum.adapters.xml.NodeRenderer"

 

at the top of an Group file. This would mean the same as running this

Java code for the group:

 

   group.registerRenderer(org.w3c.dom.Node.class, new

   com.collinfagan.strum.adapters.xml.NodeRenderer());

 

   group.registerModelAdaptor(org.w3c.dom.Node.class, new

   com.collinfagan.strum.adapters.xml.NodeModelAdapter());

 

Especially when importing groups this feature comes in handy as I

cannot register adapters/renderers when importing. In these cases I

must rely on the root group. For this group R we must register ALL

adapters/renders used in ANY group R imports. This make things hard

to maintain as using a "new" renderer in some template T requires me

to add the "registerRenderer" in EVERY code using T, maybe indirectly

through imports.

Similar to features discussed earlier this feature is easy to

implement for the STGroupFile, but the STGroupDir currently has no

proper place to hold this information. So we may also need to tackle

this re-appearing topic, too.

What do others think?

Udo

_______________________________________________

stringtemplate-interest mailing list

stringtemplate-interest at antlr.org

<mailto:stringtemplate-interest at antlr.org>

http://www.antlr.org/mailman/listinfo/stringtemplate-interest

 

 

 

_______________________________________________

stringtemplate-interest mailing list

stringtemplate-interest at antlr.org

http://www.antlr.org/mailman/listinfo/stringtemplate-interest

 

 

 

_______________________________________________

stringtemplate-interest mailing list

stringtemplate-interest at antlr.org

http://www.antlr.org/mailman/listinfo/stringtemplate-interest


_______________________________________________
stringtemplate-interest mailing list
stringtemplate-interest at antlr.org
http://www.antlr.org/mailman/listinfo/stringtemplate-interest

 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20110627/4cd1dadd/attachment-0001.html 

From s.barnett-cormack at lancaster.ac.uk  Mon Jun 27 08:48:31 2011
From: s.barnett-cormack at lancaster.ac.uk (Sam Barnett-Cormack)
Date: Mon, 27 Jun 2011 16:48:31 +0100
Subject: [stringtemplate-interest] Specialised STGroup Implementation
Message-ID: <4E08A64F.6080508@lancaster.ac.uk>

Hi all,

So, after describing my needs and ideas really vaguely before, the idea 
of a specialised STGroup subclass came up. I think I've got my head 
around how this would work, but before I start actually implementing it, 
I want to check whether some aspects of the plan are actually possible.

Firstly, I want to use a (sort-of) different lookup scheme - I want 
template names to be hierarchical (like with directories), but 
individual templates to specify a wildcard of some sort for any element 
but the first - so templates will have names like such (precise symbol 
used as wildcard will likely have to change, I know): 
/CatA/*/field/*/integer ; when requeting a template instance, or 
referring to a template from within a template, there would (of course) 
be no wildcards.

Dove-tailing with this is the idea that dynamic modules to the 
application could add templates to the group. At its most basic, this 
could be done at application startup, or when otherwise requested, in 
which case a string for the whole group *could* be created, but I'd 
prefer to have some ability to call an add method on the group - my 
perusal of the source indicates the methods STGroup.defineTemplate(*), 
though all but one of them are noted in comments as being for testing - 
is the one that isn't (being defineTemplate(String 
fullyQualifiedTemplateName, Token nameT, List<FormalArgument> args, 
String template, Token templateToken)) actually of general utility? I 
understand the purpose of the arguments (I think) except the two 
instances of Token. This could then be used other than on specific 
occaisions, although thread synchronisation would be harder in that case 
- hoping to use the almost-automatic locking mechanics of Java EE in the 
end.

I'm expecting that imcluded groups will work on whatever basis they 
themselves use, so a flat-file group could be included for utility purposes.

I'm also intending that, if multiple modules define identically-named 
templates, I'll be able to just make it predictably use either the first 
one defined or the last one defined (not sure which yet). I may make it 
so that the templates provided by modules are actually done in the form 
of groups that can then be included, so ones that are added to the 
'core' group will always take precedence, and then have some other rule 
for a name being re-used in the core group.

So, apart from being insane, does anyone have thoughts? Is what I'm 
describing (or any particular variant of it) possible? What methods need 
to be implemented or overriden in STGroup to do the sort of thing I'm 
describing? Is it sensible to reuse the directory-hierarchy symbol ('/') 
for my hierarchy, or would it be better to use some other symbol 
arbitrarily? For the purposes of referring inside a template, what 
characters are valid for template names? Is there any reason (when 
adding a template to a group) to restrict the lookup name for the 
template itself to the same characters? My glance at the grammars 
suggests that IDs have to be the tradition mix of letters and 
underscores, and that would (I assume) apply to references within a 
template to another template (except '/' is obviously allowed, binding 
several of those together), but if the name is being provided 
dynamically in code (rather than read from a file), would it be 
restricted similarly? If it's all as restricted as it could possibly be, 
there's still ways around it, but I thought I'd check, as it'd be better 
to have (for instance) the wildcard being some character, rather than 
the absence of any character between separators.

Finally: no, really, is this insane?

Sam

From ub at abego-software.de  Mon Jun 27 08:57:19 2011
From: ub at abego-software.de (Udo Borkowski)
Date: Mon, 27 Jun 2011 17:57:19 +0200
Subject: [stringtemplate-interest] Group
	Syntax	extension	for	ModelAdapter and Renderer
In-Reply-To: <00b801cc34de$b9471810$2bd54830$@pixelminegames.com>
References: <22302E49-6669-4311-8024-99B17674A80F@abego-software.de>	<71F0A5CD-D401-44E7-8F0A-83C3C51A7E51@cs.usfca.edu>	<074701cc31ed$e2a55d00$a7f01700$@pixelminegames.com>	<2ADFB36D-6BC2-4B09-9DD6-A4F8291F9118@abego-software.de>	<4E0463FE.2040905@lancaster.ac.uk>	<007f01cc3276$f6cef5f0$e46ce1d0$@pixelminegames.com>	<4E049D1A.9070403@lancaster.ac.uk>	<DD30493C-6612-406B-95C0-357AB10DF856@cs.usfca.edu>
	<5F0F63EB-8DEC-4852-9507-D940F17FAEF4@abego-software.de>
	<00b801cc34de$b9471810$2bd54830$@pixelminegames.com>
Message-ID: <8439C55A-DF22-411C-A83B-5A7E75B11F7D@abego-software.de>

> Your particular example leads me to think you may be trying to use renderers to replace templates.
Actually I just try to render a JavaDoc comment "around" an arbitrary string. I found not "template only" solution that works so I was forced to write some AttributeRenderer for this.

> javadoc(s) ::= <<
> /**
> * <s; wrap="\n * ">
> */
> >> 

This does not solve the issue in general. E.g. when the string s contains an '*/' this must be escaped, to avoid the comment is closed too early. Also newlines in the string are not handled as expected.

Udo


On 27.06.2011, at 17:27, Sam Harwell wrote:

> Your particular example leads me to think you may be trying to use renderers to replace templates.
>  
> javadoc(s) ::= <<
> /**
> * <s; wrap="\n * ">
> */
> >> 
>  
> Sam
>  
> From: stringtemplate-interest-bounces at antlr.org [mailto:stringtemplate-interest-bounces at antlr.org] On Behalf Of Udo Borkowski
> Sent: Monday, June 27, 2011 8:55 AM
> To: Terence Parr
> Cc: stringtemplate-interest Template
> Subject: Re: [stringtemplate-interest] Group Syntax extension for ModelAdapter and Renderer
>  
> Inheritance will work on this.  it's the only way polymorphism works with template instantiation; same for adaptors/renderers.  If A imports B we created templates relative to A even if defined in B.  Therefore, a renderer for A works for B.  A's renderer overrides any you set in B as well.  No need to think about propagation or whatever.
>  
> I think we don't need polymorphism for renderer/adapter lookup. Also I do have my doubts polymorphism is an appropriate way to work with renderers/adapters. 
>  
> The main reason is we are very limited in choosing the "selector" in the renderer/adapter case, because we can only use the Java classes we want to render/adapter. In the template lookup we are free to select any valid template name and thus can easily decide if it will later be "overloaded" by a calling group or not. In the renderer case in nearly all my AttributeRenderers I am using "String.class" as the selector.
>  
> To explain this a little more and motivate a solution let me give you an example.
>  
> I have a group J with this template:
>  
> --- template J.stg ---------------
> javadoc(s) ::= <<
> <s;format="javadoc">
> >> 
> -----------------------------------------
>  
> The template uses a custom attribute renderer (JavaDocRenderer) that renders the given text as a JavaDoc comment, e.g.:
>  
> /**
>  * hello
>  */
>  
> The way to achieve this today is load the group J and register the attributeRenderer for that group:
>  
>        groupJ.registerRenderer(String.class, new JavaDocRenderer());
>  
> The group J is a general purpose group, intended to be used in other groups. Now lets discuss two different cases.
>  
> CASE A
> ======
>  
> I have a group main that imports J programmatically, to use the "javadoc" template:
>  
> --- template main.stg ---------
> main(cmt) ::= <<
> <javadoc(cmt)>
> ?
> >> 
> -----------------------------------------
>  
> Rendering main will however not render the expected JavaDoc comment, as only the AttributeRenderers registered to group main are used. 
>  
> So the way to cure this problem in the current implementation is to register the JavaDocRenderer also to the main group:
>  
>        group.registerRenderer(String.class, new JavaDocRenderer());
>  
> If we would implement the "inheritance" mechanism as Terence suggested, this extra statement would no longer be necessary, as the code will look for a renderer of String.class in the current scope. It will find a renderer in J. So here inheritance is fine.
>  
> CASE B
> ======
>  
> But now assume we have a slightly different main template:
>  
> --- template main.stg ---------
> main(s,cmt) ::= <<
> <javadoc(cmt)>
> String f() {
>    return <s;format="quote">;
> }
> >> 
> -----------------------------------------
>  
> Here template main needs an attribute renderer for the "quote" format (QuotedStringRenderer). Therefore we add this:
>  
>        group.registerRenderer(String.class, new QuotedStringRenderer());
>  
> Now the "quote" renders fine, however the JavaDoc is not ok. 
>  
> Note we cannot just add
>  
>        group.registerRenderer(String.class, new JavaDocRenderer());
>  
> to the main group as we have already registered a renderer for String.class.
>  
> Also the "inheritance" mechanism will not help here, as the lookup for a renderer for String.class will find the QuotedStringRenderer in group main and also use this one for the "javadoc" case.
>  
>  
> PROPOSAL
> =========
>  
> Instead of using inheritance we could make the attributeRender lookup a simple two step approach: 
>  
> Before using the renderer as provided by the current implementation check if the group containing the template using the "format" option defines an appropriate renderer. If yes, use that, otherwise use the "old" one.
>  
>     protected int writePOJO(STWriter out, ST self, Object o, String[] options) throws IOException {
>         String formatString = null;
>         if ( options!=null ) formatString = options[Option.FORMAT.ordinal()];
>                                
>         AttributeRenderer r = self.impl.nativeGroup.getAttributeRenderer(o.getClass());
>         if (r == null) {
>             r = group.getAttributeRenderer(o.getClass());
>         }
>         ...
>  
> This will work fine in both case A and case B.
>  
> This is a simple solution, simpler than any "inheritance" or "propagation" approach. Actually I currently cannot think of a use case I would need anything more sophisticated.
>  
> Note if someone prefers to define all renderers in the root group (and not in imported groups) he is still free to do so. The proposed solution will then automatically fall back to the current behavior (as no attributeRenderers are found in the imported groups).
>  
>  
> BTW: this suggested extension to the attributeRenderer lookup is not directly related to the "syntax extension" I proposed. Actually the "programmatic" approach to add renderers and do imports will benefit from the new lookup rules as well.
>  
>  
>  
> Udo
>  
>  
>  
> On 25.06.2011, at 20:08, Terence Parr wrote:
> 
> 
> hiya.  Inheritance will work on this.  it's the only way polymorphism works with template instantiation; same for adaptors/renderers.  If A imports B we created templates relative to A even if defined in B.  Therefore, a renderer for A works for B.  A's renderer overrides any you set in B as well.  No need to think about propagation or whatever.
> 
> I'll go look at inheritance mech. i see on my list "should adaptors get imported from super group?"
> 
> http://www.antlr.org/wiki/display/ST4/ST+v4+TODO+list
> 
> Ter
> On Jun 24, 2011, at 7:20 AM, Sam Barnett-Cormack wrote:
> 
> 
> On 24/06/2011 14:59, Sam Harwell wrote:
> The VM-wide setting approach seems like a possibility, but only if the "VM"
> is an instance object. There are a number of cases where I run several
> independent ST "sessions" within a single process, so I'm trying hard to
> remove every last mutable static variable from the entire [C# port of the]
> library. Perhaps an Interpreter object could be stored in an STGroup at the
> time when the group is constructed, and that interpreter used for all
> rendering of templates accessed through that group's getInstanceOf() method.
> That way, we have a "VM" which is a single interpreter used for that group's
> operations. I'd even go so far as to declare the Interpreter field of
> STGroup final, giving a fixed view of the VM.
>  
> I used the term VM based on my understanding of the Java version. I
> would agree that it would be best not to have such things truly static -
> I would support a (for example) STInterpreter class, an instance of
> which can be used when creating a group, or it be specified with a
> boolean parameter that a new one should be created (otherwise a truly
> VM-wide default shared one would be used). I imagine implementation
> would be awkward if you could import groups that use a different
> STInterpreter from the one doing the important (depending on what
> actually gets stored in the instance), but otherwise it's a good way to
> share details of such things between multiple groups under control.
> Perhaps allow STInterpreters to be defined as 'children' of another
> STInterpreter, with any properties not specifically set in that child
> being proxied to the parent (implementation details could vary, but I
> can see that being easiest with a specialised subclass).
>  
> And yes, it would make sense for the interpreter of any given STGroup to
> be final, to whatever extent is possible in any given implementation
> language. You don't want to be changing back and forth all of those
> things after a group is created, though you may want to manipulate the
> interpreter itself.
>  
> This would also fit with the usual patterns used for such things in Java
> these days, particularly EE, allowing it to fit better with Dependency
> Injection and Contexts. It's definitely more common in my experience to
> have some sort of context class to hold such things than it is to have
> anything global/static.
>  
> Sam
>  
> -----Original Message-----
> From: Sam Barnett-Cormack [mailto:s.barnett-cormack at lancaster.ac.uk]
> Sent: Friday, June 24, 2011 5:17 AM
> To: Udo Borkowski
> Cc: Sam Harwell; 'stringtemplate-interest Template'; 'Terence Parr'
> Subject: Re: [stringtemplate-interest] Group Syntax extension for
> ModelAdapter and Renderer
>  
> Sorry to top-post, but this is a very general statement/opinion...
>  
> Renderers and ModelAdapters need to be entirely in the programming side,
> surely, to keep the complete language-agnostic value of template code.
> Unlike Antlr grammars, for instance, there's nothing in a StringTemplate
> that is ever language-specific (in terms of implementation), that I'm aware
> of, and I devoutly hope it will remain so.
>  
> Furthermore, whether it happens at the programming level or in the group
> file (and what about people not using group files, but group dirs or a
> custom group type), whatever is chosen in terms of when to propagate and in
> which direction, there will always be situations where what happens isn't
> what makes sense for that use-case. Thus, what would really be ideal is a
> way of controlling it more finely, as to when it propagates or doesn't, some
> sort of configuration. This would, however, likely be a huge burden on the
> ST developers, and a pretty big burden on those using it.
>  
> One alternative that occurs to me as probably working in most cases, is to
> allow a VM-wide setting of model adapters and renderers, and then allow
> group-specific overriding of this. Whether the group-specific ones then
> propagate or not, and in which direction, I'm not sure. You obviously can't
> have them propagating in both directions without every change always
> affecting the whole constellation of groups involved, which would seem
> suboptimal to me.
>  
> Anyway, that's just some software engineering thoughts. To get a better
> decision, it would really make sense to drill down to some competing
> use-cases and see if there's a common denominator that would work in all
> cases that anyone can think of.
>  
> Sam
>  
> On 24/06/2011 10:41, Udo Borkowski wrote:
> The "propagation" approach solves one half of the problem: with this
> approach one could use renderers and adapters in groups that are
> imported through the "import" statement (and not programmatically).
> This is currently not possible.
>  
> But the other half of the problem still exists: assume I change a
> group G and use some special renderer in the new version. The group G
> is imported by many other groups (maybe indirectly). I now need to
> find all the "roots" of imports to G and add the new renderer there.
> This can really become a maintenance nightmare. Providing the
> "renderer" syntax extension and defining the renderer in the group
> text would solve this issue.
>  
> Regarding the implementation of the "propagation" approach:
> registering a renderer will require to visit all directly and
> indirectly imported groups and add the renderer to all of them,
> possibly creating new maps etc.. Most of the times this will be extra
> work as the imported groups don't reference that renderer. Propagating
> a renderer to all imported groups may lead to a performance issue when
> using large systems.
>  
> I would also hesitate to use the "propagation" approach as it adds a
> new concept to StringTemplate ("propagation of renderers") that in
> addition seems to "reverse" an already existing concept
> ("inheritance"). I guess this may to misunderstandings.
>  
> In contrast to this the "renderer" syntax extension does not use a new
> concept but rather makes an existing feature ("registerRenderer")
> accessible to those users who prefer to work on the group text than
> coding in Java.
>  
> As the "propagation" approach does not solve the whole problem I still
> think we should add the "renderer"/"adapter" feature I suggested.
>  
> Udo
>  
> P.S.: all stuff mentioned regarding "renderer" also applied "adapter".
>  
>  
>  
> On 23.06.2011, at 23:38, Sam Harwell wrote:
>  
> This is an interesting problem. Normally when things are inherited,
> they start at the imported group and propagate to the group that
> imported them. In this case, it sounds like you want to propagate it
> from the topmost group to all the groups it imports.
> Perhaps the thing to do here is propagate renderers to groups
> imported with STGroup.importTemplates(Token) (those are the ones
> imported via the group file), but don't propagate them to groups
> imported with a direct call to importTemplates(STGroup)?
> If you look at the diff of TemplateGroup.cs in CL8734 (it's a small
> diff), you can see how I adjusted the import code to handle the
> unload() method in everyone's cases. If the java code is adjusted in
> the same way (I can make the change if you want), then it's easy to
> propagate renderers by the following two rules:
> 1.When STGroup.importTemplates(Token) is called, the current group's
> renderers are added to the group that just got imported. This handles
> the case where the renderer is registered before the group is
> imported (especially relevant in reloading a group file after calling
> unload()).
> 2.When a renderer is added to a group, it is automatically added (by
> calling registerRenderer) to all groups in the importsToClearOnUnload
> list. This handles the case where the group is imported before the
> renderer is registered.
> Sam
> *From:*stringtemplate-interest-bounces at antlr.org
> <mailto:stringtemplate-interest-bounces at antlr.org>[mailto:stringtempl
> ate-interest-bounces at antlr.org]*On
> Behalf Of*Terence Parr
> *Sent:*Thursday, June 23, 2011 1:44 PM *To:*Udo Borkowski
> *Cc:*stringtemplate-interest Template
> *Subject:*Re: [stringtemplate-interest] Group Syntax extension for
> ModelAdapter and Renderer I think that we should probably keep this
> at the programming level.
> should we make renderers inherited instead to solve your problem?
> Ter
> On Jun 21, 2011, at 1:17 AM, Udo Borkowski wrote:
>  
>  
> Hi,
> currently we programmatically register ModelAdapters and Renderers to
> an STGroup.
> What about providing an extension to the syntax of Group to also
> define these in a Group file?
> E.g. I could imagine to use something like
>  
>    adapter "org.w3c.dom.Node"
>    "com.collinfagan.strum.adapters.xml.NodeModelAdapter"
>    renderer "org.w3c.dom.Node"
>    "com.collinfagan.strum.adapters.xml.NodeRenderer"
>  
> at the top of an Group file. This would mean the same as running this
> Java code for the group:
>  
>    group.registerRenderer(org.w3c.dom.Node.class, new
>    com.collinfagan.strum.adapters.xml.NodeRenderer());
>  
>    group.registerModelAdaptor(org.w3c.dom.Node.class, new
>    com.collinfagan.strum.adapters.xml.NodeModelAdapter());
>  
> Especially when importing groups this feature comes in handy as I
> cannot register adapters/renderers when importing. In these cases I
> must rely on the root group. For this group R we must register ALL
> adapters/renders used in ANY group R imports. This make things hard
> to maintain as using a "new" renderer in some template T requires me
> to add the "registerRenderer" in EVERY code using T, maybe indirectly
> through imports.
> Similar to features discussed earlier this feature is easy to
> implement for the STGroupFile, but the STGroupDir currently has no
> proper place to hold this information. So we may also need to tackle
> this re-appearing topic, too.
> What do others think?
> Udo
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> <mailto:stringtemplate-interest at antlr.org>
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>  
>  
>  
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>  
>  
>  
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
> 
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>  

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20110627/46946be5/attachment-0001.html 

From ub at abego-software.de  Mon Jun 27 08:58:26 2011
From: ub at abego-software.de (Udo Borkowski)
Date: Mon, 27 Jun 2011 17:58:26 +0200
Subject: [stringtemplate-interest] Group
	Syntax	extension	for	ModelAdapter and Renderer
In-Reply-To: <4E08991B.3080304@lancaster.ac.uk>
References: <22302E49-6669-4311-8024-99B17674A80F@abego-software.de>	<71F0A5CD-D401-44E7-8F0A-83C3C51A7E51@cs.usfca.edu>	<074701cc31ed$e2a55d00$a7f01700$@pixelminegames.com>	<2ADFB36D-6BC2-4B09-9DD6-A4F8291F9118@abego-software.de>	<4E0463FE.2040905@lancaster.ac.uk>	<007f01cc3276$f6cef5f0$e46ce1d0$@pixelminegames.com>	<4E049D1A.9070403@lancaster.ac.uk>	<DD30493C-6612-406B-95C0-357AB10DF856@cs.usfca.edu>
	<5F0F63EB-8DEC-4852-9507-D940F17FAEF4@abego-software.de>
	<4E08991B.3080304@lancaster.ac.uk>
Message-ID: <0718126E-4F2A-4F08-976A-46EE26D8271C@abego-software.de>


> Maybe the sensible thing to do, if you really run into things like this,
I am really running into things like this :) 

> is define a dynamic renderer for strings, that you can then register format-specific subrenderers with.
This is what I am currently doing. However this does not seem to be the right way. Now I am adding more and more "subrenderers" to the system and I am either getting this gigantic "Super StringRenderer" I need to use in all my projects, or I need to individually add the subrenderers for each project and need to maintain these individual lists as the templates evolve over time and need more/other "subrenderers". 

Putting the renderers next to the place where their are used (the groups) seem to lead to a more maintainable structure.


Udo



On 27.06.2011, at 16:52, Sam Barnett-Cormack wrote:

> On 27/06/2011 14:54, Udo Borkowski wrote:
>> CASE B
>> ======
>> 
>> But now assume we have a slightly different main template:
>> 
>> --- template main.stg ---------
>> main(s,cmt) ::= <<
>> <*javadoc*(cmt)>
>> String f() {
>> return <s;*format="quote"*>;
>> }
>> >>
>> -----------------------------------------
>> 
>> Here template main needs an attribute renderer for the "quote" format
>> (QuotedStringRenderer). Therefore we add this:
>> 
>> group.registerRenderer(String.class, new QuotedStringRenderer());
>> 
>> Now the "quote" renders fine, however the JavaDoc is not ok.
>> 
>> Note we cannot just add
>> 
>> group.registerRenderer(String.class, new JavaDocRenderer());
>> 
>> to the main group as we have already registered a renderer for String.class.
>> 
>> Also the "inheritance" mechanism will not help here, as the lookup for a
>> renderer for String.class will find the QuotedStringRenderer in group
>> main and also use this one for the "javadoc" case.
> 
> This sounds like a situation that the renderer system isn't design to cater to; rather, it sounds like you should be using a template itself for the javadoccing case, for instance, or having a single renderer that does both sensitive to the template; perhaps a meta-renderer that checks to see whether formats are recognised. In any case, it's not a case that ST seems to try to cater to at the moment, renderers instead being based principally on the type being passed, rather than the format. I'm not sure how generally usefula a fix for it would be, as your examples seem to be generally better served by templates than by renderers (okay, the quote one presumeably does escaping and suchlike, making it possibly appropriate to the renderer). Maybe the sensible thing to do, if you really run into things like this, is define a dynamic renderer for strings, that you can then register format-specific subrenderers with.
> 
> Sam
> 
>> PROPOSAL
>> =========
>> 
>> Instead of using inheritance we could make the attributeRender lookup a
>> simple two step approach:
>> 
>> Before using the renderer as provided by the current implementation
>> check if the group containing the template using the "format" option
>> defines an appropriate renderer. If yes, use that, otherwise use the
>> "old" one.
>> 
>> protectedintwritePOJO(STWriter out, ST self, Object o, String[] options)
>> throwsIOException {
>> String formatString = null;
>> if( options!=null) formatString = options[Option.FORMAT.ordinal()];
>> 
>> 
>> AttributeRenderer r =
>> *self.**impl**.**nativeGroup**.getAttributeRenderer(o.getClass());*
>> *****if**(r == **null**) {*
>> r = group.getAttributeRenderer(o.getClass());
>> }
>> ...
>> 
>> This will work fine in both case A and case B.
>> 
>> This is a simple solution, simpler than any "inheritance" or
>> "propagation" approach. Actually I currently cannot think of a use case
>> I would need anything more sophisticated.
>> 
>> Note if someone prefers to define all renderers in the root group (and
>> not in imported groups) he is still free to do so. The proposed solution
>> will then automatically fall back to the current behavior (as no
>> attributeRenderers are found in the imported groups).
>> 
>> 
>> BTW: this suggested extension to the attributeRenderer lookup is not
>> directly related to the "syntax extension" I proposed. Actually the
>> "programmatic" approach to add renderers and do imports will benefit
>> from the new lookup rules as well.
>> 
>> 
>> 
>> Udo
>> 
>> 
>> 
>> On 25.06.2011, at 20:08, Terence Parr wrote:
>> 
>>> hiya. Inheritance will work on this. it's the only way polymorphism
>>> works with template instantiation; same for adaptors/renderers. If A
>>> imports B we created templates relative to A even if defined in B.
>>> Therefore, a renderer for A works for B. A's renderer overrides any
>>> you set in B as well. No need to think about propagation or whatever.
>>> 
>>> I'll go look at inheritance mech. i see on my list "should adaptors
>>> get imported from super group?"
>>> 
>>> http://www.antlr.org/wiki/display/ST4/ST+v4+TODO+list
>>> 
>>> Ter
>>> On Jun 24, 2011, at 7:20 AM, Sam Barnett-Cormack wrote:
>>> 
>>>> On 24/06/2011 14:59, Sam Harwell wrote:
>>>>> The VM-wide setting approach seems like a possibility, but only if
>>>>> the "VM"
>>>>> is an instance object. There are a number of cases where I run several
>>>>> independent ST "sessions" within a single process, so I'm trying hard to
>>>>> remove every last mutable static variable from the entire [C# port
>>>>> of the]
>>>>> library. Perhaps an Interpreter object could be stored in an STGroup
>>>>> at the
>>>>> time when the group is constructed, and that interpreter used for all
>>>>> rendering of templates accessed through that group's getInstanceOf()
>>>>> method.
>>>>> That way, we have a "VM" which is a single interpreter used for that
>>>>> group's
>>>>> operations. I'd even go so far as to declare the Interpreter field of
>>>>> STGroup final, giving a fixed view of the VM.
>>>> 
>>>> I used the term VM based on my understanding of the Java version. I
>>>> would agree that it would be best not to have such things truly static -
>>>> I would support a (for example) STInterpreter class, an instance of
>>>> which can be used when creating a group, or it be specified with a
>>>> boolean parameter that a new one should be created (otherwise a truly
>>>> VM-wide default shared one would be used). I imagine implementation
>>>> would be awkward if you could import groups that use a different
>>>> STInterpreter from the one doing the important (depending on what
>>>> actually gets stored in the instance), but otherwise it's a good way to
>>>> share details of such things between multiple groups under control.
>>>> Perhaps allow STInterpreters to be defined as 'children' of another
>>>> STInterpreter, with any properties not specifically set in that child
>>>> being proxied to the parent (implementation details could vary, but I
>>>> can see that being easiest with a specialised subclass).
>>>> 
>>>> And yes, it would make sense for the interpreter of any given STGroup to
>>>> be final, to whatever extent is possible in any given implementation
>>>> language. You don't want to be changing back and forth all of those
>>>> things after a group is created, though you may want to manipulate the
>>>> interpreter itself.
>>>> 
>>>> This would also fit with the usual patterns used for such things in Java
>>>> these days, particularly EE, allowing it to fit better with Dependency
>>>> Injection and Contexts. It's definitely more common in my experience to
>>>> have some sort of context class to hold such things than it is to have
>>>> anything global/static.
>>>> 
>>>> Sam
>>>> 
>>>>> -----Original Message-----
>>>>> From: Sam Barnett-Cormack [mailto:s.barnett-cormack at lancaster.ac.uk]
>>>>> Sent: Friday, June 24, 2011 5:17 AM
>>>>> To: Udo Borkowski
>>>>> Cc: Sam Harwell; 'stringtemplate-interest Template'; 'Terence Parr'
>>>>> Subject: Re: [stringtemplate-interest] Group Syntax extension for
>>>>> ModelAdapter and Renderer
>>>>> 
>>>>> Sorry to top-post, but this is a very general statement/opinion...
>>>>> 
>>>>> Renderers and ModelAdapters need to be entirely in the programming side,
>>>>> surely, to keep the complete language-agnostic value of template code.
>>>>> Unlike Antlr grammars, for instance, there's nothing in a StringTemplate
>>>>> that is ever language-specific (in terms of implementation), that
>>>>> I'm aware
>>>>> of, and I devoutly hope it will remain so.
>>>>> 
>>>>> Furthermore, whether it happens at the programming level or in the group
>>>>> file (and what about people not using group files, but group dirs or a
>>>>> custom group type), whatever is chosen in terms of when to propagate
>>>>> and in
>>>>> which direction, there will always be situations where what happens
>>>>> isn't
>>>>> what makes sense for that use-case. Thus, what would really be ideal
>>>>> is a
>>>>> way of controlling it more finely, as to when it propagates or
>>>>> doesn't, some
>>>>> sort of configuration. This would, however, likely be a huge burden
>>>>> on the
>>>>> ST developers, and a pretty big burden on those using it.
>>>>> 
>>>>> One alternative that occurs to me as probably working in most cases,
>>>>> is to
>>>>> allow a VM-wide setting of model adapters and renderers, and then allow
>>>>> group-specific overriding of this. Whether the group-specific ones then
>>>>> propagate or not, and in which direction, I'm not sure. You
>>>>> obviously can't
>>>>> have them propagating in both directions without every change always
>>>>> affecting the whole constellation of groups involved, which would seem
>>>>> suboptimal to me.
>>>>> 
>>>>> Anyway, that's just some software engineering thoughts. To get a better
>>>>> decision, it would really make sense to drill down to some competing
>>>>> use-cases and see if there's a common denominator that would work in all
>>>>> cases that anyone can think of.
>>>>> 
>>>>> Sam
>>>>> 
>>>>> On 24/06/2011 10:41, Udo Borkowski wrote:
>>>>>> The "propagation" approach solves one half of the problem: with this
>>>>>> approach one could use renderers and adapters in groups that are
>>>>>> imported through the "import" statement (and not programmatically).
>>>>>> This is currently not possible.
>>>>>> 
>>>>>> But the other half of the problem still exists: assume I change a
>>>>>> group G and use some special renderer in the new version. The group G
>>>>>> is imported by many other groups (maybe indirectly). I now need to
>>>>>> find all the "roots" of imports to G and add the new renderer there.
>>>>>> This can really become a maintenance nightmare. Providing the
>>>>>> "renderer" syntax extension and defining the renderer in the group
>>>>>> text would solve this issue.
>>>>>> 
>>>>>> Regarding the implementation of the "propagation" approach:
>>>>>> registering a renderer will require to visit all directly and
>>>>>> indirectly imported groups and add the renderer to all of them,
>>>>>> possibly creating new maps etc.. Most of the times this will be extra
>>>>>> work as the imported groups don't reference that renderer. Propagating
>>>>>> a renderer to all imported groups may lead to a performance issue when
>>>>> using large systems.
>>>>>> 
>>>>>> I would also hesitate to use the "propagation" approach as it adds a
>>>>>> new concept to StringTemplate ("propagation of renderers") that in
>>>>>> addition seems to "reverse" an already existing concept
>>>>>> ("inheritance"). I guess this may to misunderstandings.
>>>>>> 
>>>>>> In contrast to this the "renderer" syntax extension does not use a new
>>>>>> concept but rather makes an existing feature ("registerRenderer")
>>>>>> accessible to those users who prefer to work on the group text than
>>>>>> coding in Java.
>>>>>> 
>>>>>> As the "propagation" approach does not solve the whole problem I still
>>>>>> think we should add the "renderer"/"adapter" feature I suggested.
>>>>>> 
>>>>>> Udo
>>>>>> 
>>>>>> P.S.: all stuff mentioned regarding "renderer" also applied "adapter".
>>>>>> 
>>>>>> 
>>>>>> 
>>>>>> On 23.06.2011, at 23:38, Sam Harwell wrote:
>>>>>> 
>>>>>>> This is an interesting problem. Normally when things are inherited,
>>>>>>> they start at the imported group and propagate to the group that
>>>>>>> imported them. In this case, it sounds like you want to propagate it
>>>>>>> from the topmost group to all the groups it imports.
>>>>>>> Perhaps the thing to do here is propagate renderers to groups
>>>>>>> imported with STGroup.importTemplates(Token) (those are the ones
>>>>>>> imported via the group file), but don't propagate them to groups
>>>>>>> imported with a direct call to importTemplates(STGroup)?
>>>>>>> If you look at the diff of TemplateGroup.cs in CL8734 (it's a small
>>>>>>> diff), you can see how I adjusted the import code to handle the
>>>>>>> unload() method in everyone's cases. If the java code is adjusted in
>>>>>>> the same way (I can make the change if you want), then it's easy to
>>>>>>> propagate renderers by the following two rules:
>>>>>>> 1.When STGroup.importTemplates(Token) is called, the current group's
>>>>>>> renderers are added to the group that just got imported. This handles
>>>>>>> the case where the renderer is registered before the group is
>>>>>>> imported (especially relevant in reloading a group file after calling
>>>>> unload()).
>>>>>>> 2.When a renderer is added to a group, it is automatically added (by
>>>>>>> calling registerRenderer) to all groups in the importsToClearOnUnload
>>>>>>> list. This handles the case where the group is imported before the
>>>>>>> renderer is registered.
>>>>>>> Sam
>>>>>>> *From:*stringtemplate-interest-bounces at antlr.org
>>>>>>> <mailto:stringtemplate-interest-bounces at antlr.org>[mailto:stringtempl
>>>>>>> ate-interest-bounces at antlr.org]*On
>>>>>>> Behalf Of*Terence Parr
>>>>>>> *Sent:*Thursday, June 23, 2011 1:44 PM *To:*Udo Borkowski
>>>>>>> *Cc:*stringtemplate-interest Template
>>>>>>> *Subject:*Re: [stringtemplate-interest] Group Syntax extension for
>>>>>>> ModelAdapter and Renderer I think that we should probably keep this
>>>>>>> at the programming level.
>>>>>>> should we make renderers inherited instead to solve your problem?
>>>>>>> Ter
>>>>>>> On Jun 21, 2011, at 1:17 AM, Udo Borkowski wrote:
>>>>>>> 
>>>>>>> 
>>>>>>> Hi,
>>>>>>> currently we programmatically register ModelAdapters and Renderers to
>>>>>>> an STGroup.
>>>>>>> What about providing an extension to the syntax of Group to also
>>>>>>> define these in a Group file?
>>>>>>> E.g. I could imagine to use something like
>>>>>>> 
>>>>>>> adapter "org.w3c.dom.Node"
>>>>>>> "com.collinfagan.strum.adapters.xml.NodeModelAdapter"
>>>>>>> renderer "org.w3c.dom.Node"
>>>>>>> "com.collinfagan.strum.adapters.xml.NodeRenderer"
>>>>>>> 
>>>>>>> at the top of an Group file. This would mean the same as running this
>>>>>>> Java code for the group:
>>>>>>> 
>>>>>>> group.registerRenderer(org.w3c.dom.Node.class, new
>>>>>>> com.collinfagan.strum.adapters.xml.NodeRenderer());
>>>>>>> 
>>>>>>> group.registerModelAdaptor(org.w3c.dom.Node.class, new
>>>>>>> com.collinfagan.strum.adapters.xml.NodeModelAdapter());
>>>>>>> 
>>>>>>> Especially when importing groups this feature comes in handy as I
>>>>>>> cannot register adapters/renderers when importing. In these cases I
>>>>>>> must rely on the root group. For this group R we must register ALL
>>>>>>> adapters/renders used in ANY group R imports. This make things hard
>>>>>>> to maintain as using a "new" renderer in some template T requires me
>>>>>>> to add the "registerRenderer" in EVERY code using T, maybe indirectly
>>>>>>> through imports.
>>>>>>> Similar to features discussed earlier this feature is easy to
>>>>>>> implement for the STGroupFile, but the STGroupDir currently has no
>>>>>>> proper place to hold this information. So we may also need to tackle
>>>>>>> this re-appearing topic, too.
>>>>>>> What do others think?
>>>>>>> Udo
>>>>>>> _______________________________________________
>>>>>>> stringtemplate-interest mailing list
>>>>>>> stringtemplate-interest at antlr.org
>>>>>>> <mailto:stringtemplate-interest at antlr.org>
>>>>>>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>>>>>> 
>>>>>> 
>>>>>> 
>>>>>> _______________________________________________
>>>>>> stringtemplate-interest mailing list
>>>>>> stringtemplate-interest at antlr.org
>>>>>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>>>>> 
>>>>> 
>>>> 
>>>> _______________________________________________
>>>> stringtemplate-interest mailing list
>>>> stringtemplate-interest at antlr.org
>>>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>>> 
>>> _______________________________________________
>>> stringtemplate-interest mailing list
>>> stringtemplate-interest at antlr.org
>>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>> 
>> 
>> 
>> _______________________________________________
>> stringtemplate-interest mailing list
>> stringtemplate-interest at antlr.org
>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
> 


From s.barnett-cormack at lancaster.ac.uk  Mon Jun 27 09:42:30 2011
From: s.barnett-cormack at lancaster.ac.uk (Sam Barnett-Cormack)
Date: Mon, 27 Jun 2011 17:42:30 +0100
Subject: [stringtemplate-interest] Group
 Syntax	extension	for	ModelAdapter and Renderer
In-Reply-To: <0718126E-4F2A-4F08-976A-46EE26D8271C@abego-software.de>
References: <22302E49-6669-4311-8024-99B17674A80F@abego-software.de>	<71F0A5CD-D401-44E7-8F0A-83C3C51A7E51@cs.usfca.edu>	<074701cc31ed$e2a55d00$a7f01700$@pixelminegames.com>	<2ADFB36D-6BC2-4B09-9DD6-A4F8291F9118@abego-software.de>	<4E0463FE.2040905@lancaster.ac.uk>	<007f01cc3276$f6cef5f0$e46ce1d0$@pixelminegames.com>	<4E049D1A.9070403@lancaster.ac.uk>	<DD30493C-6612-406B-95C0-357AB10DF856@cs.usfca.edu>
	<5F0F63EB-8DEC-4852-9507-D940F17FAEF4@abego-software.de>
	<4E08991B.3080304@lancaster.ac.uk>
	<0718126E-4F2A-4F08-976A-46EE26D8271C@abego-software.de>
Message-ID: <4E08B2F6.3010407@lancaster.ac.uk>

On 27/06/2011 16:58, Udo Borkowski wrote:
>
>> Maybe the sensible thing to do, if you really run into things like this,
> I am really running into things like this :)
>
>> is define a dynamic renderer for strings, that you can then register format-specific subrenderers with.
> This is what I am currently doing. However this does not seem to be the right way. Now I am adding more and more "subrenderers" to the system and I am either getting this gigantic "Super StringRenderer" I need to use in all my projects, or I need to individually add the subrenderers for each project and need to maintain these individual lists as the templates evolve over time and need more/other "subrenderers".
>
> Putting the renderers next to the place where their are used (the groups) seem to lead to a more maintainable structure.

The problem with that idea is that ST was always meant (afaict) to be an 
implementation-language-agnostic syntax. I don't think it's worth 
sacrificing that in order to do what you seem to be suggesting.

Regarding the problem of escapes that are clearly the common point in 
your two examples, maybe there is another way to handle this... it might 
be seen as beyond the scope of ST itself, but it's a well-defined enough 
task that it might be worth it being support in a default 
StringRenderer, with flags to indicate what escapes are needed, 
including a flexible enough one to work in cases like the 
javadoc-comment one. The other option there is to make it the 
responsibility of the model to provide data that's already 'suitable' to 
be used as a javadoc-comment.

Sam

> On 27.06.2011, at 16:52, Sam Barnett-Cormack wrote:
>
>> On 27/06/2011 14:54, Udo Borkowski wrote:
>>> CASE B
>>> ======
>>>
>>> But now assume we have a slightly different main template:
>>>
>>> --- template main.stg ---------
>>> main(s,cmt) ::=<<
>>> <*javadoc*(cmt)>
>>> String f() {
>>> return<s;*format="quote"*>;
>>> }
>>>>>
>>> -----------------------------------------
>>>
>>> Here template main needs an attribute renderer for the "quote" format
>>> (QuotedStringRenderer). Therefore we add this:
>>>
>>> group.registerRenderer(String.class, new QuotedStringRenderer());
>>>
>>> Now the "quote" renders fine, however the JavaDoc is not ok.
>>>
>>> Note we cannot just add
>>>
>>> group.registerRenderer(String.class, new JavaDocRenderer());
>>>
>>> to the main group as we have already registered a renderer for String.class.
>>>
>>> Also the "inheritance" mechanism will not help here, as the lookup for a
>>> renderer for String.class will find the QuotedStringRenderer in group
>>> main and also use this one for the "javadoc" case.
>>
>> This sounds like a situation that the renderer system isn't design to cater to; rather, it sounds like you should be using a template itself for the javadoccing case, for instance, or having a single renderer that does both sensitive to the template; perhaps a meta-renderer that checks to see whether formats are recognised. In any case, it's not a case that ST seems to try to cater to at the moment, renderers instead being based principally on the type being passed, rather than the format. I'm not sure how generally usefula a fix for it would be, as your examples seem to be generally better served by templates than by renderers (okay, the quote one presumeably does escaping and suchlike, making it possibly appropriate to the renderer). Maybe the sensible thing to do, if you really run into things like this, is define a dynamic renderer for strings, that you can then register format-specific subrenderers with.
>>
>> Sam
>>
>>> PROPOSAL
>>> =========
>>>
>>> Instead of using inheritance we could make the attributeRender lookup a
>>> simple two step approach:
>>>
>>> Before using the renderer as provided by the current implementation
>>> check if the group containing the template using the "format" option
>>> defines an appropriate renderer. If yes, use that, otherwise use the
>>> "old" one.
>>>
>>> protectedintwritePOJO(STWriter out, ST self, Object o, String[] options)
>>> throwsIOException {
>>> String formatString = null;
>>> if( options!=null) formatString = options[Option.FORMAT.ordinal()];
>>>
>>>
>>> AttributeRenderer r =
>>> *self.**impl**.**nativeGroup**.getAttributeRenderer(o.getClass());*
>>> *****if**(r == **null**) {*
>>> r = group.getAttributeRenderer(o.getClass());
>>> }
>>> ...
>>>
>>> This will work fine in both case A and case B.
>>>
>>> This is a simple solution, simpler than any "inheritance" or
>>> "propagation" approach. Actually I currently cannot think of a use case
>>> I would need anything more sophisticated.
>>>
>>> Note if someone prefers to define all renderers in the root group (and
>>> not in imported groups) he is still free to do so. The proposed solution
>>> will then automatically fall back to the current behavior (as no
>>> attributeRenderers are found in the imported groups).
>>>
>>>
>>> BTW: this suggested extension to the attributeRenderer lookup is not
>>> directly related to the "syntax extension" I proposed. Actually the
>>> "programmatic" approach to add renderers and do imports will benefit
>>> from the new lookup rules as well.
>>>
>>>
>>>
>>> Udo
>>>
>>>
>>>
>>> On 25.06.2011, at 20:08, Terence Parr wrote:
>>>
>>>> hiya. Inheritance will work on this. it's the only way polymorphism
>>>> works with template instantiation; same for adaptors/renderers. If A
>>>> imports B we created templates relative to A even if defined in B.
>>>> Therefore, a renderer for A works for B. A's renderer overrides any
>>>> you set in B as well. No need to think about propagation or whatever.
>>>>
>>>> I'll go look at inheritance mech. i see on my list "should adaptors
>>>> get imported from super group?"
>>>>
>>>> http://www.antlr.org/wiki/display/ST4/ST+v4+TODO+list
>>>>
>>>> Ter
>>>> On Jun 24, 2011, at 7:20 AM, Sam Barnett-Cormack wrote:
>>>>
>>>>> On 24/06/2011 14:59, Sam Harwell wrote:
>>>>>> The VM-wide setting approach seems like a possibility, but only if
>>>>>> the "VM"
>>>>>> is an instance object. There are a number of cases where I run several
>>>>>> independent ST "sessions" within a single process, so I'm trying hard to
>>>>>> remove every last mutable static variable from the entire [C# port
>>>>>> of the]
>>>>>> library. Perhaps an Interpreter object could be stored in an STGroup
>>>>>> at the
>>>>>> time when the group is constructed, and that interpreter used for all
>>>>>> rendering of templates accessed through that group's getInstanceOf()
>>>>>> method.
>>>>>> That way, we have a "VM" which is a single interpreter used for that
>>>>>> group's
>>>>>> operations. I'd even go so far as to declare the Interpreter field of
>>>>>> STGroup final, giving a fixed view of the VM.
>>>>>
>>>>> I used the term VM based on my understanding of the Java version. I
>>>>> would agree that it would be best not to have such things truly static -
>>>>> I would support a (for example) STInterpreter class, an instance of
>>>>> which can be used when creating a group, or it be specified with a
>>>>> boolean parameter that a new one should be created (otherwise a truly
>>>>> VM-wide default shared one would be used). I imagine implementation
>>>>> would be awkward if you could import groups that use a different
>>>>> STInterpreter from the one doing the important (depending on what
>>>>> actually gets stored in the instance), but otherwise it's a good way to
>>>>> share details of such things between multiple groups under control.
>>>>> Perhaps allow STInterpreters to be defined as 'children' of another
>>>>> STInterpreter, with any properties not specifically set in that child
>>>>> being proxied to the parent (implementation details could vary, but I
>>>>> can see that being easiest with a specialised subclass).
>>>>>
>>>>> And yes, it would make sense for the interpreter of any given STGroup to
>>>>> be final, to whatever extent is possible in any given implementation
>>>>> language. You don't want to be changing back and forth all of those
>>>>> things after a group is created, though you may want to manipulate the
>>>>> interpreter itself.
>>>>>
>>>>> This would also fit with the usual patterns used for such things in Java
>>>>> these days, particularly EE, allowing it to fit better with Dependency
>>>>> Injection and Contexts. It's definitely more common in my experience to
>>>>> have some sort of context class to hold such things than it is to have
>>>>> anything global/static.
>>>>>
>>>>> Sam
>>>>>
>>>>>> -----Original Message-----
>>>>>> From: Sam Barnett-Cormack [mailto:s.barnett-cormack at lancaster.ac.uk]
>>>>>> Sent: Friday, June 24, 2011 5:17 AM
>>>>>> To: Udo Borkowski
>>>>>> Cc: Sam Harwell; 'stringtemplate-interest Template'; 'Terence Parr'
>>>>>> Subject: Re: [stringtemplate-interest] Group Syntax extension for
>>>>>> ModelAdapter and Renderer
>>>>>>
>>>>>> Sorry to top-post, but this is a very general statement/opinion...
>>>>>>
>>>>>> Renderers and ModelAdapters need to be entirely in the programming side,
>>>>>> surely, to keep the complete language-agnostic value of template code.
>>>>>> Unlike Antlr grammars, for instance, there's nothing in a StringTemplate
>>>>>> that is ever language-specific (in terms of implementation), that
>>>>>> I'm aware
>>>>>> of, and I devoutly hope it will remain so.
>>>>>>
>>>>>> Furthermore, whether it happens at the programming level or in the group
>>>>>> file (and what about people not using group files, but group dirs or a
>>>>>> custom group type), whatever is chosen in terms of when to propagate
>>>>>> and in
>>>>>> which direction, there will always be situations where what happens
>>>>>> isn't
>>>>>> what makes sense for that use-case. Thus, what would really be ideal
>>>>>> is a
>>>>>> way of controlling it more finely, as to when it propagates or
>>>>>> doesn't, some
>>>>>> sort of configuration. This would, however, likely be a huge burden
>>>>>> on the
>>>>>> ST developers, and a pretty big burden on those using it.
>>>>>>
>>>>>> One alternative that occurs to me as probably working in most cases,
>>>>>> is to
>>>>>> allow a VM-wide setting of model adapters and renderers, and then allow
>>>>>> group-specific overriding of this. Whether the group-specific ones then
>>>>>> propagate or not, and in which direction, I'm not sure. You
>>>>>> obviously can't
>>>>>> have them propagating in both directions without every change always
>>>>>> affecting the whole constellation of groups involved, which would seem
>>>>>> suboptimal to me.
>>>>>>
>>>>>> Anyway, that's just some software engineering thoughts. To get a better
>>>>>> decision, it would really make sense to drill down to some competing
>>>>>> use-cases and see if there's a common denominator that would work in all
>>>>>> cases that anyone can think of.
>>>>>>
>>>>>> Sam
>>>>>>
>>>>>> On 24/06/2011 10:41, Udo Borkowski wrote:
>>>>>>> The "propagation" approach solves one half of the problem: with this
>>>>>>> approach one could use renderers and adapters in groups that are
>>>>>>> imported through the "import" statement (and not programmatically).
>>>>>>> This is currently not possible.
>>>>>>>
>>>>>>> But the other half of the problem still exists: assume I change a
>>>>>>> group G and use some special renderer in the new version. The group G
>>>>>>> is imported by many other groups (maybe indirectly). I now need to
>>>>>>> find all the "roots" of imports to G and add the new renderer there.
>>>>>>> This can really become a maintenance nightmare. Providing the
>>>>>>> "renderer" syntax extension and defining the renderer in the group
>>>>>>> text would solve this issue.
>>>>>>>
>>>>>>> Regarding the implementation of the "propagation" approach:
>>>>>>> registering a renderer will require to visit all directly and
>>>>>>> indirectly imported groups and add the renderer to all of them,
>>>>>>> possibly creating new maps etc.. Most of the times this will be extra
>>>>>>> work as the imported groups don't reference that renderer. Propagating
>>>>>>> a renderer to all imported groups may lead to a performance issue when
>>>>>> using large systems.
>>>>>>>
>>>>>>> I would also hesitate to use the "propagation" approach as it adds a
>>>>>>> new concept to StringTemplate ("propagation of renderers") that in
>>>>>>> addition seems to "reverse" an already existing concept
>>>>>>> ("inheritance"). I guess this may to misunderstandings.
>>>>>>>
>>>>>>> In contrast to this the "renderer" syntax extension does not use a new
>>>>>>> concept but rather makes an existing feature ("registerRenderer")
>>>>>>> accessible to those users who prefer to work on the group text than
>>>>>>> coding in Java.
>>>>>>>
>>>>>>> As the "propagation" approach does not solve the whole problem I still
>>>>>>> think we should add the "renderer"/"adapter" feature I suggested.
>>>>>>>
>>>>>>> Udo
>>>>>>>
>>>>>>> P.S.: all stuff mentioned regarding "renderer" also applied "adapter".
>>>>>>>
>>>>>>>
>>>>>>>
>>>>>>> On 23.06.2011, at 23:38, Sam Harwell wrote:
>>>>>>>
>>>>>>>> This is an interesting problem. Normally when things are inherited,
>>>>>>>> they start at the imported group and propagate to the group that
>>>>>>>> imported them. In this case, it sounds like you want to propagate it
>>>>>>>> from the topmost group to all the groups it imports.
>>>>>>>> Perhaps the thing to do here is propagate renderers to groups
>>>>>>>> imported with STGroup.importTemplates(Token) (those are the ones
>>>>>>>> imported via the group file), but don't propagate them to groups
>>>>>>>> imported with a direct call to importTemplates(STGroup)?
>>>>>>>> If you look at the diff of TemplateGroup.cs in CL8734 (it's a small
>>>>>>>> diff), you can see how I adjusted the import code to handle the
>>>>>>>> unload() method in everyone's cases. If the java code is adjusted in
>>>>>>>> the same way (I can make the change if you want), then it's easy to
>>>>>>>> propagate renderers by the following two rules:
>>>>>>>> 1.When STGroup.importTemplates(Token) is called, the current group's
>>>>>>>> renderers are added to the group that just got imported. This handles
>>>>>>>> the case where the renderer is registered before the group is
>>>>>>>> imported (especially relevant in reloading a group file after calling
>>>>>> unload()).
>>>>>>>> 2.When a renderer is added to a group, it is automatically added (by
>>>>>>>> calling registerRenderer) to all groups in the importsToClearOnUnload
>>>>>>>> list. This handles the case where the group is imported before the
>>>>>>>> renderer is registered.
>>>>>>>> Sam
>>>>>>>> *From:*stringtemplate-interest-bounces at antlr.org
>>>>>>>> <mailto:stringtemplate-interest-bounces at antlr.org>[mailto:stringtempl
>>>>>>>> ate-interest-bounces at antlr.org]*On
>>>>>>>> Behalf Of*Terence Parr
>>>>>>>> *Sent:*Thursday, June 23, 2011 1:44 PM *To:*Udo Borkowski
>>>>>>>> *Cc:*stringtemplate-interest Template
>>>>>>>> *Subject:*Re: [stringtemplate-interest] Group Syntax extension for
>>>>>>>> ModelAdapter and Renderer I think that we should probably keep this
>>>>>>>> at the programming level.
>>>>>>>> should we make renderers inherited instead to solve your problem?
>>>>>>>> Ter
>>>>>>>> On Jun 21, 2011, at 1:17 AM, Udo Borkowski wrote:
>>>>>>>>
>>>>>>>>
>>>>>>>> Hi,
>>>>>>>> currently we programmatically register ModelAdapters and Renderers to
>>>>>>>> an STGroup.
>>>>>>>> What about providing an extension to the syntax of Group to also
>>>>>>>> define these in a Group file?
>>>>>>>> E.g. I could imagine to use something like
>>>>>>>>
>>>>>>>> adapter "org.w3c.dom.Node"
>>>>>>>> "com.collinfagan.strum.adapters.xml.NodeModelAdapter"
>>>>>>>> renderer "org.w3c.dom.Node"
>>>>>>>> "com.collinfagan.strum.adapters.xml.NodeRenderer"
>>>>>>>>
>>>>>>>> at the top of an Group file. This would mean the same as running this
>>>>>>>> Java code for the group:
>>>>>>>>
>>>>>>>> group.registerRenderer(org.w3c.dom.Node.class, new
>>>>>>>> com.collinfagan.strum.adapters.xml.NodeRenderer());
>>>>>>>>
>>>>>>>> group.registerModelAdaptor(org.w3c.dom.Node.class, new
>>>>>>>> com.collinfagan.strum.adapters.xml.NodeModelAdapter());
>>>>>>>>
>>>>>>>> Especially when importing groups this feature comes in handy as I
>>>>>>>> cannot register adapters/renderers when importing. In these cases I
>>>>>>>> must rely on the root group. For this group R we must register ALL
>>>>>>>> adapters/renders used in ANY group R imports. This make things hard
>>>>>>>> to maintain as using a "new" renderer in some template T requires me
>>>>>>>> to add the "registerRenderer" in EVERY code using T, maybe indirectly
>>>>>>>> through imports.
>>>>>>>> Similar to features discussed earlier this feature is easy to
>>>>>>>> implement for the STGroupFile, but the STGroupDir currently has no
>>>>>>>> proper place to hold this information. So we may also need to tackle
>>>>>>>> this re-appearing topic, too.
>>>>>>>> What do others think?
>>>>>>>> Udo
>>>>>>>> _______________________________________________
>>>>>>>> stringtemplate-interest mailing list
>>>>>>>> stringtemplate-interest at antlr.org
>>>>>>>> <mailto:stringtemplate-interest at antlr.org>
>>>>>>>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>>>>>>>
>>>>>>>
>>>>>>>
>>>>>>> _______________________________________________
>>>>>>> stringtemplate-interest mailing list
>>>>>>> stringtemplate-interest at antlr.org
>>>>>>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>>>>>>
>>>>>>
>>>>>
>>>>> _______________________________________________
>>>>> stringtemplate-interest mailing list
>>>>> stringtemplate-interest at antlr.org
>>>>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>>>>
>>>> _______________________________________________
>>>> stringtemplate-interest mailing list
>>>> stringtemplate-interest at antlr.org
>>>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>>>
>>>
>>>
>>> _______________________________________________
>>> stringtemplate-interest mailing list
>>> stringtemplate-interest at antlr.org
>>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>>
>


From s.barnett-cormack at lancaster.ac.uk  Mon Jun 27 09:45:10 2011
From: s.barnett-cormack at lancaster.ac.uk (Sam Barnett-Cormack)
Date: Mon, 27 Jun 2011 17:45:10 +0100
Subject: [stringtemplate-interest] Group
 Syntax	extension	for	ModelAdapter and Renderer
In-Reply-To: <4E08B2F6.3010407@lancaster.ac.uk>
References: <22302E49-6669-4311-8024-99B17674A80F@abego-software.de>	<71F0A5CD-D401-44E7-8F0A-83C3C51A7E51@cs.usfca.edu>	<074701cc31ed$e2a55d00$a7f01700$@pixelminegames.com>	<2ADFB36D-6BC2-4B09-9DD6-A4F8291F9118@abego-software.de>	<4E0463FE.2040905@lancaster.ac.uk>	<007f01cc3276$f6cef5f0$e46ce1d0$@pixelminegames.com>	<4E049D1A.9070403@lancaster.ac.uk>	<DD30493C-6612-406B-95C0-357AB10DF856@cs.usfca.edu>	<5F0F63EB-8DEC-4852-9507-D940F17FAEF4@abego-software.de>	<4E08991B.3080304@lancaster.ac.uk>	<0718126E-4F2A-4F08-976A-46EE26D8271C@abego-software.de>
	<4E08B2F6.3010407@lancaster.ac.uk>
Message-ID: <4E08B396.4070708@lancaster.ac.uk>

On 27/06/2011 17:42, Sam Barnett-Cormack wrote:
> On 27/06/2011 16:58, Udo Borkowski wrote:
>>
>>> Maybe the sensible thing to do, if you really run into things like this,
>> I am really running into things like this :)
>>
>>> is define a dynamic renderer for strings, that you can then register format-specific subrenderers with.
>> This is what I am currently doing. However this does not seem to be the right way. Now I am adding more and more "subrenderers" to the system and I am either getting this gigantic "Super StringRenderer" I need to use in all my projects, or I need to individually add the subrenderers for each project and need to maintain these individual lists as the templates evolve over time and need more/other "subrenderers".
>>
>> Putting the renderers next to the place where their are used (the groups) seem to lead to a more maintainable structure.
>
> The problem with that idea is that ST was always meant (afaict) to be an
> implementation-language-agnostic syntax. I don't think it's worth
> sacrificing that in order to do what you seem to be suggesting.
>
> Regarding the problem of escapes that are clearly the common point in
> your two examples, maybe there is another way to handle this... it might
> be seen as beyond the scope of ST itself, but it's a well-defined enough
> task that it might be worth it being support in a default
> StringRenderer, with flags to indicate what escapes are needed,
> including a flexible enough one to work in cases like the
> javadoc-comment one. The other option there is to make it the
> responsibility of the model to provide data that's already 'suitable' to
> be used as a javadoc-comment.

Afterthought: a similar possibility might be the registration of 
separate text filters, with key names, and a syntax for invoking them - 
they would be separate from renderers, as they'd always be operating on 
strings, at the stage immediately before 'returning' the thing being 
rendered. Just something to think about.

Sam

>> On 27.06.2011, at 16:52, Sam Barnett-Cormack wrote:
>>
>>> On 27/06/2011 14:54, Udo Borkowski wrote:
>>>> CASE B
>>>> ======
>>>>
>>>> But now assume we have a slightly different main template:
>>>>
>>>> --- template main.stg ---------
>>>> main(s,cmt) ::=<<
>>>> <*javadoc*(cmt)>
>>>> String f() {
>>>> return<s;*format="quote"*>;
>>>> }
>>>>>>
>>>> -----------------------------------------
>>>>
>>>> Here template main needs an attribute renderer for the "quote" format
>>>> (QuotedStringRenderer). Therefore we add this:
>>>>
>>>> group.registerRenderer(String.class, new QuotedStringRenderer());
>>>>
>>>> Now the "quote" renders fine, however the JavaDoc is not ok.
>>>>
>>>> Note we cannot just add
>>>>
>>>> group.registerRenderer(String.class, new JavaDocRenderer());
>>>>
>>>> to the main group as we have already registered a renderer for String.class.
>>>>
>>>> Also the "inheritance" mechanism will not help here, as the lookup for a
>>>> renderer for String.class will find the QuotedStringRenderer in group
>>>> main and also use this one for the "javadoc" case.
>>>
>>> This sounds like a situation that the renderer system isn't design to cater to; rather, it sounds like you should be using a template itself for the javadoccing case, for instance, or having a single renderer that does both sensitive to the template; perhaps a meta-renderer that checks to see whether formats are recognised. In any case, it's not a case that ST seems to try to cater to at the moment, renderers instead being based principally on the type being passed, rather than the format. I'm not sure how generally usefula a fix for it would be, as your examples seem to be generally better served by templates than by renderers (okay, the quote one presumeably does escaping and suchlike, making it possibly appropriate to the renderer). Maybe the sensible thing to do, if you really run into things like this, is define a dynamic renderer for strings, that you can then register format-specific subrenderers with.
>>>
>>> Sam
>>>
>>>> PROPOSAL
>>>> =========
>>>>
>>>> Instead of using inheritance we could make the attributeRender lookup a
>>>> simple two step approach:
>>>>
>>>> Before using the renderer as provided by the current implementation
>>>> check if the group containing the template using the "format" option
>>>> defines an appropriate renderer. If yes, use that, otherwise use the
>>>> "old" one.
>>>>
>>>> protectedintwritePOJO(STWriter out, ST self, Object o, String[] options)
>>>> throwsIOException {
>>>> String formatString = null;
>>>> if( options!=null) formatString = options[Option.FORMAT.ordinal()];
>>>>
>>>>
>>>> AttributeRenderer r =
>>>> *self.**impl**.**nativeGroup**.getAttributeRenderer(o.getClass());*
>>>> *****if**(r == **null**) {*
>>>> r = group.getAttributeRenderer(o.getClass());
>>>> }
>>>> ...
>>>>
>>>> This will work fine in both case A and case B.
>>>>
>>>> This is a simple solution, simpler than any "inheritance" or
>>>> "propagation" approach. Actually I currently cannot think of a use case
>>>> I would need anything more sophisticated.
>>>>
>>>> Note if someone prefers to define all renderers in the root group (and
>>>> not in imported groups) he is still free to do so. The proposed solution
>>>> will then automatically fall back to the current behavior (as no
>>>> attributeRenderers are found in the imported groups).
>>>>
>>>>
>>>> BTW: this suggested extension to the attributeRenderer lookup is not
>>>> directly related to the "syntax extension" I proposed. Actually the
>>>> "programmatic" approach to add renderers and do imports will benefit
>>>> from the new lookup rules as well.
>>>>
>>>>
>>>>
>>>> Udo
>>>>
>>>>
>>>>
>>>> On 25.06.2011, at 20:08, Terence Parr wrote:
>>>>
>>>>> hiya. Inheritance will work on this. it's the only way polymorphism
>>>>> works with template instantiation; same for adaptors/renderers. If A
>>>>> imports B we created templates relative to A even if defined in B.
>>>>> Therefore, a renderer for A works for B. A's renderer overrides any
>>>>> you set in B as well. No need to think about propagation or whatever.
>>>>>
>>>>> I'll go look at inheritance mech. i see on my list "should adaptors
>>>>> get imported from super group?"
>>>>>
>>>>> http://www.antlr.org/wiki/display/ST4/ST+v4+TODO+list
>>>>>
>>>>> Ter
>>>>> On Jun 24, 2011, at 7:20 AM, Sam Barnett-Cormack wrote:
>>>>>
>>>>>> On 24/06/2011 14:59, Sam Harwell wrote:
>>>>>>> The VM-wide setting approach seems like a possibility, but only if
>>>>>>> the "VM"
>>>>>>> is an instance object. There are a number of cases where I run several
>>>>>>> independent ST "sessions" within a single process, so I'm trying hard to
>>>>>>> remove every last mutable static variable from the entire [C# port
>>>>>>> of the]
>>>>>>> library. Perhaps an Interpreter object could be stored in an STGroup
>>>>>>> at the
>>>>>>> time when the group is constructed, and that interpreter used for all
>>>>>>> rendering of templates accessed through that group's getInstanceOf()
>>>>>>> method.
>>>>>>> That way, we have a "VM" which is a single interpreter used for that
>>>>>>> group's
>>>>>>> operations. I'd even go so far as to declare the Interpreter field of
>>>>>>> STGroup final, giving a fixed view of the VM.
>>>>>>
>>>>>> I used the term VM based on my understanding of the Java version. I
>>>>>> would agree that it would be best not to have such things truly static -
>>>>>> I would support a (for example) STInterpreter class, an instance of
>>>>>> which can be used when creating a group, or it be specified with a
>>>>>> boolean parameter that a new one should be created (otherwise a truly
>>>>>> VM-wide default shared one would be used). I imagine implementation
>>>>>> would be awkward if you could import groups that use a different
>>>>>> STInterpreter from the one doing the important (depending on what
>>>>>> actually gets stored in the instance), but otherwise it's a good way to
>>>>>> share details of such things between multiple groups under control.
>>>>>> Perhaps allow STInterpreters to be defined as 'children' of another
>>>>>> STInterpreter, with any properties not specifically set in that child
>>>>>> being proxied to the parent (implementation details could vary, but I
>>>>>> can see that being easiest with a specialised subclass).
>>>>>>
>>>>>> And yes, it would make sense for the interpreter of any given STGroup to
>>>>>> be final, to whatever extent is possible in any given implementation
>>>>>> language. You don't want to be changing back and forth all of those
>>>>>> things after a group is created, though you may want to manipulate the
>>>>>> interpreter itself.
>>>>>>
>>>>>> This would also fit with the usual patterns used for such things in Java
>>>>>> these days, particularly EE, allowing it to fit better with Dependency
>>>>>> Injection and Contexts. It's definitely more common in my experience to
>>>>>> have some sort of context class to hold such things than it is to have
>>>>>> anything global/static.
>>>>>>
>>>>>> Sam
>>>>>>
>>>>>>> -----Original Message-----
>>>>>>> From: Sam Barnett-Cormack [mailto:s.barnett-cormack at lancaster.ac.uk]
>>>>>>> Sent: Friday, June 24, 2011 5:17 AM
>>>>>>> To: Udo Borkowski
>>>>>>> Cc: Sam Harwell; 'stringtemplate-interest Template'; 'Terence Parr'
>>>>>>> Subject: Re: [stringtemplate-interest] Group Syntax extension for
>>>>>>> ModelAdapter and Renderer
>>>>>>>
>>>>>>> Sorry to top-post, but this is a very general statement/opinion...
>>>>>>>
>>>>>>> Renderers and ModelAdapters need to be entirely in the programming side,
>>>>>>> surely, to keep the complete language-agnostic value of template code.
>>>>>>> Unlike Antlr grammars, for instance, there's nothing in a StringTemplate
>>>>>>> that is ever language-specific (in terms of implementation), that
>>>>>>> I'm aware
>>>>>>> of, and I devoutly hope it will remain so.
>>>>>>>
>>>>>>> Furthermore, whether it happens at the programming level or in the group
>>>>>>> file (and what about people not using group files, but group dirs or a
>>>>>>> custom group type), whatever is chosen in terms of when to propagate
>>>>>>> and in
>>>>>>> which direction, there will always be situations where what happens
>>>>>>> isn't
>>>>>>> what makes sense for that use-case. Thus, what would really be ideal
>>>>>>> is a
>>>>>>> way of controlling it more finely, as to when it propagates or
>>>>>>> doesn't, some
>>>>>>> sort of configuration. This would, however, likely be a huge burden
>>>>>>> on the
>>>>>>> ST developers, and a pretty big burden on those using it.
>>>>>>>
>>>>>>> One alternative that occurs to me as probably working in most cases,
>>>>>>> is to
>>>>>>> allow a VM-wide setting of model adapters and renderers, and then allow
>>>>>>> group-specific overriding of this. Whether the group-specific ones then
>>>>>>> propagate or not, and in which direction, I'm not sure. You
>>>>>>> obviously can't
>>>>>>> have them propagating in both directions without every change always
>>>>>>> affecting the whole constellation of groups involved, which would seem
>>>>>>> suboptimal to me.
>>>>>>>
>>>>>>> Anyway, that's just some software engineering thoughts. To get a better
>>>>>>> decision, it would really make sense to drill down to some competing
>>>>>>> use-cases and see if there's a common denominator that would work in all
>>>>>>> cases that anyone can think of.
>>>>>>>
>>>>>>> Sam
>>>>>>>
>>>>>>> On 24/06/2011 10:41, Udo Borkowski wrote:
>>>>>>>> The "propagation" approach solves one half of the problem: with this
>>>>>>>> approach one could use renderers and adapters in groups that are
>>>>>>>> imported through the "import" statement (and not programmatically).
>>>>>>>> This is currently not possible.
>>>>>>>>
>>>>>>>> But the other half of the problem still exists: assume I change a
>>>>>>>> group G and use some special renderer in the new version. The group G
>>>>>>>> is imported by many other groups (maybe indirectly). I now need to
>>>>>>>> find all the "roots" of imports to G and add the new renderer there.
>>>>>>>> This can really become a maintenance nightmare. Providing the
>>>>>>>> "renderer" syntax extension and defining the renderer in the group
>>>>>>>> text would solve this issue.
>>>>>>>>
>>>>>>>> Regarding the implementation of the "propagation" approach:
>>>>>>>> registering a renderer will require to visit all directly and
>>>>>>>> indirectly imported groups and add the renderer to all of them,
>>>>>>>> possibly creating new maps etc.. Most of the times this will be extra
>>>>>>>> work as the imported groups don't reference that renderer. Propagating
>>>>>>>> a renderer to all imported groups may lead to a performance issue when
>>>>>>> using large systems.
>>>>>>>>
>>>>>>>> I would also hesitate to use the "propagation" approach as it adds a
>>>>>>>> new concept to StringTemplate ("propagation of renderers") that in
>>>>>>>> addition seems to "reverse" an already existing concept
>>>>>>>> ("inheritance"). I guess this may to misunderstandings.
>>>>>>>>
>>>>>>>> In contrast to this the "renderer" syntax extension does not use a new
>>>>>>>> concept but rather makes an existing feature ("registerRenderer")
>>>>>>>> accessible to those users who prefer to work on the group text than
>>>>>>>> coding in Java.
>>>>>>>>
>>>>>>>> As the "propagation" approach does not solve the whole problem I still
>>>>>>>> think we should add the "renderer"/"adapter" feature I suggested.
>>>>>>>>
>>>>>>>> Udo
>>>>>>>>
>>>>>>>> P.S.: all stuff mentioned regarding "renderer" also applied "adapter".
>>>>>>>>
>>>>>>>>
>>>>>>>>
>>>>>>>> On 23.06.2011, at 23:38, Sam Harwell wrote:
>>>>>>>>
>>>>>>>>> This is an interesting problem. Normally when things are inherited,
>>>>>>>>> they start at the imported group and propagate to the group that
>>>>>>>>> imported them. In this case, it sounds like you want to propagate it
>>>>>>>>> from the topmost group to all the groups it imports.
>>>>>>>>> Perhaps the thing to do here is propagate renderers to groups
>>>>>>>>> imported with STGroup.importTemplates(Token) (those are the ones
>>>>>>>>> imported via the group file), but don't propagate them to groups
>>>>>>>>> imported with a direct call to importTemplates(STGroup)?
>>>>>>>>> If you look at the diff of TemplateGroup.cs in CL8734 (it's a small
>>>>>>>>> diff), you can see how I adjusted the import code to handle the
>>>>>>>>> unload() method in everyone's cases. If the java code is adjusted in
>>>>>>>>> the same way (I can make the change if you want), then it's easy to
>>>>>>>>> propagate renderers by the following two rules:
>>>>>>>>> 1.When STGroup.importTemplates(Token) is called, the current group's
>>>>>>>>> renderers are added to the group that just got imported. This handles
>>>>>>>>> the case where the renderer is registered before the group is
>>>>>>>>> imported (especially relevant in reloading a group file after calling
>>>>>>> unload()).
>>>>>>>>> 2.When a renderer is added to a group, it is automatically added (by
>>>>>>>>> calling registerRenderer) to all groups in the importsToClearOnUnload
>>>>>>>>> list. This handles the case where the group is imported before the
>>>>>>>>> renderer is registered.
>>>>>>>>> Sam
>>>>>>>>> *From:*stringtemplate-interest-bounces at antlr.org
>>>>>>>>> <mailto:stringtemplate-interest-bounces at antlr.org>[mailto:stringtempl
>>>>>>>>> ate-interest-bounces at antlr.org]*On
>>>>>>>>> Behalf Of*Terence Parr
>>>>>>>>> *Sent:*Thursday, June 23, 2011 1:44 PM *To:*Udo Borkowski
>>>>>>>>> *Cc:*stringtemplate-interest Template
>>>>>>>>> *Subject:*Re: [stringtemplate-interest] Group Syntax extension for
>>>>>>>>> ModelAdapter and Renderer I think that we should probably keep this
>>>>>>>>> at the programming level.
>>>>>>>>> should we make renderers inherited instead to solve your problem?
>>>>>>>>> Ter
>>>>>>>>> On Jun 21, 2011, at 1:17 AM, Udo Borkowski wrote:
>>>>>>>>>
>>>>>>>>>
>>>>>>>>> Hi,
>>>>>>>>> currently we programmatically register ModelAdapters and Renderers to
>>>>>>>>> an STGroup.
>>>>>>>>> What about providing an extension to the syntax of Group to also
>>>>>>>>> define these in a Group file?
>>>>>>>>> E.g. I could imagine to use something like
>>>>>>>>>
>>>>>>>>> adapter "org.w3c.dom.Node"
>>>>>>>>> "com.collinfagan.strum.adapters.xml.NodeModelAdapter"
>>>>>>>>> renderer "org.w3c.dom.Node"
>>>>>>>>> "com.collinfagan.strum.adapters.xml.NodeRenderer"
>>>>>>>>>
>>>>>>>>> at the top of an Group file. This would mean the same as running this
>>>>>>>>> Java code for the group:
>>>>>>>>>
>>>>>>>>> group.registerRenderer(org.w3c.dom.Node.class, new
>>>>>>>>> com.collinfagan.strum.adapters.xml.NodeRenderer());
>>>>>>>>>
>>>>>>>>> group.registerModelAdaptor(org.w3c.dom.Node.class, new
>>>>>>>>> com.collinfagan.strum.adapters.xml.NodeModelAdapter());
>>>>>>>>>
>>>>>>>>> Especially when importing groups this feature comes in handy as I
>>>>>>>>> cannot register adapters/renderers when importing. In these cases I
>>>>>>>>> must rely on the root group. For this group R we must register ALL
>>>>>>>>> adapters/renders used in ANY group R imports. This make things hard
>>>>>>>>> to maintain as using a "new" renderer in some template T requires me
>>>>>>>>> to add the "registerRenderer" in EVERY code using T, maybe indirectly
>>>>>>>>> through imports.
>>>>>>>>> Similar to features discussed earlier this feature is easy to
>>>>>>>>> implement for the STGroupFile, but the STGroupDir currently has no
>>>>>>>>> proper place to hold this information. So we may also need to tackle
>>>>>>>>> this re-appearing topic, too.
>>>>>>>>> What do others think?
>>>>>>>>> Udo
>>>>>>>>> _______________________________________________
>>>>>>>>> stringtemplate-interest mailing list
>>>>>>>>> stringtemplate-interest at antlr.org
>>>>>>>>> <mailto:stringtemplate-interest at antlr.org>
>>>>>>>>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>>>>>>>>
>>>>>>>>
>>>>>>>>
>>>>>>>> _______________________________________________
>>>>>>>> stringtemplate-interest mailing list
>>>>>>>> stringtemplate-interest at antlr.org
>>>>>>>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>>>>>>>
>>>>>>>
>>>>>>
>>>>>> _______________________________________________
>>>>>> stringtemplate-interest mailing list
>>>>>> stringtemplate-interest at antlr.org
>>>>>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>>>>>
>>>>> _______________________________________________
>>>>> stringtemplate-interest mailing list
>>>>> stringtemplate-interest at antlr.org
>>>>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>>>>
>>>>
>>>>
>>>> _______________________________________________
>>>> stringtemplate-interest mailing list
>>>> stringtemplate-interest at antlr.org
>>>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>>>
>>
>
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest


From sharwell at pixelminegames.com  Mon Jun 27 10:47:29 2011
From: sharwell at pixelminegames.com (Sam Harwell)
Date: Mon, 27 Jun 2011 12:47:29 -0500
Subject: [stringtemplate-interest] Visual Studio 2010 support for ST4
	template editing
Message-ID: <00d001cc34f2$4cd502a0$e67f07e0$@pixelminegames.com>

Hi everyone,

I'm working on support for ST4 editing within Visual Studio 2010. Attached
is a screenshot showing the current syntax highlighting, collapsing code,
and dropdown bars support. If anyone has any suggestions for other/improved
styles to highlight the templates, feel free to drop me a message. :)

I'll be releasing this extension for testing with the upcoming release of
the C# port. :)

Thanks,
Sam

-------------- next part --------------
A non-text attachment was scrubbed...
Name: ST4Editor.png
Type: image/png
Size: 28175 bytes
Desc: not available
Url : http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20110627/ba1b72b2/attachment-0001.png 

From parrt at cs.usfca.edu  Mon Jun 27 11:04:28 2011
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon, 27 Jun 2011 11:04:28 -0700
Subject: [stringtemplate-interest] Visual Studio 2010 support for ST4
	template editing
In-Reply-To: <00d001cc34f2$4cd502a0$e67f07e0$@pixelminegames.com>
References: <00d001cc34f2$4cd502a0$e67f07e0$@pixelminegames.com>
Message-ID: <D9E6120E-459D-4B11-AD4E-9122F074DEC6@cs.usfca.edu>

that is so cool!  you bastard. now do it for java ;)

Ter
On Jun 27, 2011, at 10:47 AM, Sam Harwell wrote:

> Hi everyone,
> 
> I'm working on support for ST4 editing within Visual Studio 2010. Attached
> is a screenshot showing the current syntax highlighting, collapsing code,
> and dropdown bars support. If anyone has any suggestions for other/improved
> styles to highlight the templates, feel free to drop me a message. :)
> 
> I'll be releasing this extension for testing with the upcoming release of
> the C# port. :)
> 
> Thanks,
> Sam
> 
> <ST4Editor.png>_______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest


From baerrach at gmail.com  Mon Jun 27 13:30:42 2011
From: baerrach at gmail.com (Barrie Treloar)
Date: Tue, 28 Jun 2011 06:00:42 +0930
Subject: [stringtemplate-interest] Re : Templates that get another
 templates as arguments?
In-Reply-To: <EB9E0A53-CF84-43D3-BAAA-E5FE650105C2@gmx.de>
References: <BANLkTinXzZGiRhSTT4PxLXcAP=xEX6X1Pw@mail.gmail.com>
	<BANLkTik1kb8Ff8vSjTd-PhPRi5i2b7xOBQ@mail.gmail.com>
	<1309163157.3303.YahooMailNeo@web25706.mail.ukl.yahoo.com>
	<EB9E0A53-CF84-43D3-BAAA-E5FE650105C2@gmx.de>
Message-ID: <BANLkTimN=Z3bj4i18pMthBYaJQ56A0Gg=g@mail.gmail.com>

2011/6/27 Udo Borkowski <Udo.Borkowski at gmx.de>:
> Matthieu is right, the indirect template expression is one way to solve
> this.
> Alternatively you may also use anonymous templates. Therefore you don't even
> need to create an extra template for each "greeting pattern". Here the
> complete example:

[del]
> hello(name)::=<<
> Hello, <pattern>

[del]

> hello(name)::=<<
> Hello, <(processName)(name)>

I know that StringTemplate will lookup the template name through the
call stack, but is that better than explicitly passing the argument in
to the template?

From ub at abego-software.de  Mon Jun 27 14:27:27 2011
From: ub at abego-software.de (Udo Borkowski)
Date: Mon, 27 Jun 2011 23:27:27 +0200
Subject: [stringtemplate-interest] Group
	Syntax	extension	for	ModelAdapter and Renderer
In-Reply-To: <4E08B2F6.3010407@lancaster.ac.uk>
References: <22302E49-6669-4311-8024-99B17674A80F@abego-software.de>	<71F0A5CD-D401-44E7-8F0A-83C3C51A7E51@cs.usfca.edu>	<074701cc31ed$e2a55d00$a7f01700$@pixelminegames.com>	<2ADFB36D-6BC2-4B09-9DD6-A4F8291F9118@abego-software.de>	<4E0463FE.2040905@lancaster.ac.uk>	<007f01cc3276$f6cef5f0$e46ce1d0$@pixelminegames.com>	<4E049D1A.9070403@lancaster.ac.uk>	<DD30493C-6612-406B-95C0-357AB10DF856@cs.usfca.edu>
	<5F0F63EB-8DEC-4852-9507-D940F17FAEF4@abego-software.de>
	<4E08991B.3080304@lancaster.ac.uk>
	<0718126E-4F2A-4F08-976A-46EE26D8271C@abego-software.de>
	<4E08B2F6.3010407@lancaster.ac.uk>
Message-ID: <05A0DA7A-6586-40A8-8C41-896AE052CBC7@abego-software.de>

> The problem with that idea is that ST was always meant (afaict) to be an implementation-language-agnostic syntax. I don't think it's worth sacrificing that in order to do what you seem to be suggesting.

I think the "implementation-language-agnostic" syntax of StringTemplate may have been a goal (I was not aware of this, btw). 

However in its current implementation StringTemplate (ST4) is implementation language dependent. The feature that directly comes into my mind is ("surprise") the StringRenderer, as delivered in the Java reference implementation. If the format specified for a String attribute is not "upper", "lower", "cap", "url-encode", or "xml-encode" the current implementation will pass the format string to the Java String.format method. This is a very powerful method with a lot of nice features. However other implementations of ST4 do not implement exactly this functionality. E.g. the C-Sharp implementation calls

	string.Format(formatString, s);

Even though both methods sound similar they use a completely different syntax (%... vs. {?}). So when you write a template (and used the format option in its free form) you must know what implementation language is used for your engine, even when you restrict yourself to the build-in StringRenderer.

So ST4 is has no implementation language agnostic syntax, at least if you include the syntax of the format string into the ST4 syntax.


If you don't want to include the format syntax into the ST4 syntax you also should not do so for the suggested "renderer" feature. Then the renderer feature has the following implementation agnostic syntax:

renderer : 'renderer' STRING STRING

The meaning of the strings depends on the engine you are using and for Java this may look like

	renderer "org.w3c.dom.Node" "com.collinfagan.strum.adapters.xml.NodeRenderer"

and for C-Sharp 

	renderer "some text to identify a class in CS" "some text to identify a class in CS"



Udo


On 27.06.2011, at 18:42, Sam Barnett-Cormack wrote:

> On 27/06/2011 16:58, Udo Borkowski wrote:
>> 
>>> Maybe the sensible thing to do, if you really run into things like this,
>> I am really running into things like this :)
>> 
>>> is define a dynamic renderer for strings, that you can then register format-specific subrenderers with.
>> This is what I am currently doing. However this does not seem to be the right way. Now I am adding more and more "subrenderers" to the system and I am either getting this gigantic "Super StringRenderer" I need to use in all my projects, or I need to individually add the subrenderers for each project and need to maintain these individual lists as the templates evolve over time and need more/other "subrenderers".
>> 
>> Putting the renderers next to the place where their are used (the groups) seem to lead to a more maintainable structure.
> 
> The problem with that idea is that ST was always meant (afaict) to be an implementation-language-agnostic syntax. I don't think it's worth sacrificing that in order to do what you seem to be suggesting.
> 
> Regarding the problem of escapes that are clearly the common point in your two examples, maybe there is another way to handle this... it might be seen as beyond the scope of ST itself, but it's a well-defined enough task that it might be worth it being support in a default StringRenderer, with flags to indicate what escapes are needed, including a flexible enough one to work in cases like the javadoc-comment one. The other option there is to make it the responsibility of the model to provide data that's already 'suitable' to be used as a javadoc-comment.
> 
> Sam
> 
>> On 27.06.2011, at 16:52, Sam Barnett-Cormack wrote:
>> 
>>> On 27/06/2011 14:54, Udo Borkowski wrote:
>>>> CASE B
>>>> ======
>>>> 
>>>> But now assume we have a slightly different main template:
>>>> 
>>>> --- template main.stg ---------
>>>> main(s,cmt) ::=<<
>>>> <*javadoc*(cmt)>
>>>> String f() {
>>>> return<s;*format="quote"*>;
>>>> }
>>>>>> 
>>>> -----------------------------------------
>>>> 
>>>> Here template main needs an attribute renderer for the "quote" format
>>>> (QuotedStringRenderer). Therefore we add this:
>>>> 
>>>> group.registerRenderer(String.class, new QuotedStringRenderer());
>>>> 
>>>> Now the "quote" renders fine, however the JavaDoc is not ok.
>>>> 
>>>> Note we cannot just add
>>>> 
>>>> group.registerRenderer(String.class, new JavaDocRenderer());
>>>> 
>>>> to the main group as we have already registered a renderer for String.class.
>>>> 
>>>> Also the "inheritance" mechanism will not help here, as the lookup for a
>>>> renderer for String.class will find the QuotedStringRenderer in group
>>>> main and also use this one for the "javadoc" case.
>>> 
>>> This sounds like a situation that the renderer system isn't design to cater to; rather, it sounds like you should be using a template itself for the javadoccing case, for instance, or having a single renderer that does both sensitive to the template; perhaps a meta-renderer that checks to see whether formats are recognised. In any case, it's not a case that ST seems to try to cater to at the moment, renderers instead being based principally on the type being passed, rather than the format. I'm not sure how generally usefula a fix for it would be, as your examples seem to be generally better served by templates than by renderers (okay, the quote one presumeably does escaping and suchlike, making it possibly appropriate to the renderer). Maybe the sensible thing to do, if you really run into things like this, is define a dynamic renderer for strings, that you can then register format-specific subrenderers with.
>>> 
>>> Sam
>>> 
>>>> PROPOSAL
>>>> =========
>>>> 
>>>> Instead of using inheritance we could make the attributeRender lookup a
>>>> simple two step approach:
>>>> 
>>>> Before using the renderer as provided by the current implementation
>>>> check if the group containing the template using the "format" option
>>>> defines an appropriate renderer. If yes, use that, otherwise use the
>>>> "old" one.
>>>> 
>>>> protectedintwritePOJO(STWriter out, ST self, Object o, String[] options)
>>>> throwsIOException {
>>>> String formatString = null;
>>>> if( options!=null) formatString = options[Option.FORMAT.ordinal()];
>>>> 
>>>> 
>>>> AttributeRenderer r =
>>>> *self.**impl**.**nativeGroup**.getAttributeRenderer(o.getClass());*
>>>> *****if**(r == **null**) {*
>>>> r = group.getAttributeRenderer(o.getClass());
>>>> }
>>>> ...
>>>> 
>>>> This will work fine in both case A and case B.
>>>> 
>>>> This is a simple solution, simpler than any "inheritance" or
>>>> "propagation" approach. Actually I currently cannot think of a use case
>>>> I would need anything more sophisticated.
>>>> 
>>>> Note if someone prefers to define all renderers in the root group (and
>>>> not in imported groups) he is still free to do so. The proposed solution
>>>> will then automatically fall back to the current behavior (as no
>>>> attributeRenderers are found in the imported groups).
>>>> 
>>>> 
>>>> BTW: this suggested extension to the attributeRenderer lookup is not
>>>> directly related to the "syntax extension" I proposed. Actually the
>>>> "programmatic" approach to add renderers and do imports will benefit
>>>> from the new lookup rules as well.
>>>> 
>>>> 
>>>> 
>>>> Udo
>>>> 
>>>> 
>>>> 
>>>> On 25.06.2011, at 20:08, Terence Parr wrote:
>>>> 
>>>>> hiya. Inheritance will work on this. it's the only way polymorphism
>>>>> works with template instantiation; same for adaptors/renderers. If A
>>>>> imports B we created templates relative to A even if defined in B.
>>>>> Therefore, a renderer for A works for B. A's renderer overrides any
>>>>> you set in B as well. No need to think about propagation or whatever.
>>>>> 
>>>>> I'll go look at inheritance mech. i see on my list "should adaptors
>>>>> get imported from super group?"
>>>>> 
>>>>> http://www.antlr.org/wiki/display/ST4/ST+v4+TODO+list
>>>>> 
>>>>> Ter
>>>>> On Jun 24, 2011, at 7:20 AM, Sam Barnett-Cormack wrote:
>>>>> 
>>>>>> On 24/06/2011 14:59, Sam Harwell wrote:
>>>>>>> The VM-wide setting approach seems like a possibility, but only if
>>>>>>> the "VM"
>>>>>>> is an instance object. There are a number of cases where I run several
>>>>>>> independent ST "sessions" within a single process, so I'm trying hard to
>>>>>>> remove every last mutable static variable from the entire [C# port
>>>>>>> of the]
>>>>>>> library. Perhaps an Interpreter object could be stored in an STGroup
>>>>>>> at the
>>>>>>> time when the group is constructed, and that interpreter used for all
>>>>>>> rendering of templates accessed through that group's getInstanceOf()
>>>>>>> method.
>>>>>>> That way, we have a "VM" which is a single interpreter used for that
>>>>>>> group's
>>>>>>> operations. I'd even go so far as to declare the Interpreter field of
>>>>>>> STGroup final, giving a fixed view of the VM.
>>>>>> 
>>>>>> I used the term VM based on my understanding of the Java version. I
>>>>>> would agree that it would be best not to have such things truly static -
>>>>>> I would support a (for example) STInterpreter class, an instance of
>>>>>> which can be used when creating a group, or it be specified with a
>>>>>> boolean parameter that a new one should be created (otherwise a truly
>>>>>> VM-wide default shared one would be used). I imagine implementation
>>>>>> would be awkward if you could import groups that use a different
>>>>>> STInterpreter from the one doing the important (depending on what
>>>>>> actually gets stored in the instance), but otherwise it's a good way to
>>>>>> share details of such things between multiple groups under control.
>>>>>> Perhaps allow STInterpreters to be defined as 'children' of another
>>>>>> STInterpreter, with any properties not specifically set in that child
>>>>>> being proxied to the parent (implementation details could vary, but I
>>>>>> can see that being easiest with a specialised subclass).
>>>>>> 
>>>>>> And yes, it would make sense for the interpreter of any given STGroup to
>>>>>> be final, to whatever extent is possible in any given implementation
>>>>>> language. You don't want to be changing back and forth all of those
>>>>>> things after a group is created, though you may want to manipulate the
>>>>>> interpreter itself.
>>>>>> 
>>>>>> This would also fit with the usual patterns used for such things in Java
>>>>>> these days, particularly EE, allowing it to fit better with Dependency
>>>>>> Injection and Contexts. It's definitely more common in my experience to
>>>>>> have some sort of context class to hold such things than it is to have
>>>>>> anything global/static.
>>>>>> 
>>>>>> Sam
>>>>>> 
>>>>>>> -----Original Message-----
>>>>>>> From: Sam Barnett-Cormack [mailto:s.barnett-cormack at lancaster.ac.uk]
>>>>>>> Sent: Friday, June 24, 2011 5:17 AM
>>>>>>> To: Udo Borkowski
>>>>>>> Cc: Sam Harwell; 'stringtemplate-interest Template'; 'Terence Parr'
>>>>>>> Subject: Re: [stringtemplate-interest] Group Syntax extension for
>>>>>>> ModelAdapter and Renderer
>>>>>>> 
>>>>>>> Sorry to top-post, but this is a very general statement/opinion...
>>>>>>> 
>>>>>>> Renderers and ModelAdapters need to be entirely in the programming side,
>>>>>>> surely, to keep the complete language-agnostic value of template code.
>>>>>>> Unlike Antlr grammars, for instance, there's nothing in a StringTemplate
>>>>>>> that is ever language-specific (in terms of implementation), that
>>>>>>> I'm aware
>>>>>>> of, and I devoutly hope it will remain so.
>>>>>>> 
>>>>>>> Furthermore, whether it happens at the programming level or in the group
>>>>>>> file (and what about people not using group files, but group dirs or a
>>>>>>> custom group type), whatever is chosen in terms of when to propagate
>>>>>>> and in
>>>>>>> which direction, there will always be situations where what happens
>>>>>>> isn't
>>>>>>> what makes sense for that use-case. Thus, what would really be ideal
>>>>>>> is a
>>>>>>> way of controlling it more finely, as to when it propagates or
>>>>>>> doesn't, some
>>>>>>> sort of configuration. This would, however, likely be a huge burden
>>>>>>> on the
>>>>>>> ST developers, and a pretty big burden on those using it.
>>>>>>> 
>>>>>>> One alternative that occurs to me as probably working in most cases,
>>>>>>> is to
>>>>>>> allow a VM-wide setting of model adapters and renderers, and then allow
>>>>>>> group-specific overriding of this. Whether the group-specific ones then
>>>>>>> propagate or not, and in which direction, I'm not sure. You
>>>>>>> obviously can't
>>>>>>> have them propagating in both directions without every change always
>>>>>>> affecting the whole constellation of groups involved, which would seem
>>>>>>> suboptimal to me.
>>>>>>> 
>>>>>>> Anyway, that's just some software engineering thoughts. To get a better
>>>>>>> decision, it would really make sense to drill down to some competing
>>>>>>> use-cases and see if there's a common denominator that would work in all
>>>>>>> cases that anyone can think of.
>>>>>>> 
>>>>>>> Sam
>>>>>>> 
>>>>>>> On 24/06/2011 10:41, Udo Borkowski wrote:
>>>>>>>> The "propagation" approach solves one half of the problem: with this
>>>>>>>> approach one could use renderers and adapters in groups that are
>>>>>>>> imported through the "import" statement (and not programmatically).
>>>>>>>> This is currently not possible.
>>>>>>>> 
>>>>>>>> But the other half of the problem still exists: assume I change a
>>>>>>>> group G and use some special renderer in the new version. The group G
>>>>>>>> is imported by many other groups (maybe indirectly). I now need to
>>>>>>>> find all the "roots" of imports to G and add the new renderer there.
>>>>>>>> This can really become a maintenance nightmare. Providing the
>>>>>>>> "renderer" syntax extension and defining the renderer in the group
>>>>>>>> text would solve this issue.
>>>>>>>> 
>>>>>>>> Regarding the implementation of the "propagation" approach:
>>>>>>>> registering a renderer will require to visit all directly and
>>>>>>>> indirectly imported groups and add the renderer to all of them,
>>>>>>>> possibly creating new maps etc.. Most of the times this will be extra
>>>>>>>> work as the imported groups don't reference that renderer. Propagating
>>>>>>>> a renderer to all imported groups may lead to a performance issue when
>>>>>>> using large systems.
>>>>>>>> 
>>>>>>>> I would also hesitate to use the "propagation" approach as it adds a
>>>>>>>> new concept to StringTemplate ("propagation of renderers") that in
>>>>>>>> addition seems to "reverse" an already existing concept
>>>>>>>> ("inheritance"). I guess this may to misunderstandings.
>>>>>>>> 
>>>>>>>> In contrast to this the "renderer" syntax extension does not use a new
>>>>>>>> concept but rather makes an existing feature ("registerRenderer")
>>>>>>>> accessible to those users who prefer to work on the group text than
>>>>>>>> coding in Java.
>>>>>>>> 
>>>>>>>> As the "propagation" approach does not solve the whole problem I still
>>>>>>>> think we should add the "renderer"/"adapter" feature I suggested.
>>>>>>>> 
>>>>>>>> Udo
>>>>>>>> 
>>>>>>>> P.S.: all stuff mentioned regarding "renderer" also applied "adapter".
>>>>>>>> 
>>>>>>>> 
>>>>>>>> 
>>>>>>>> On 23.06.2011, at 23:38, Sam Harwell wrote:
>>>>>>>> 
>>>>>>>>> This is an interesting problem. Normally when things are inherited,
>>>>>>>>> they start at the imported group and propagate to the group that
>>>>>>>>> imported them. In this case, it sounds like you want to propagate it
>>>>>>>>> from the topmost group to all the groups it imports.
>>>>>>>>> Perhaps the thing to do here is propagate renderers to groups
>>>>>>>>> imported with STGroup.importTemplates(Token) (those are the ones
>>>>>>>>> imported via the group file), but don't propagate them to groups
>>>>>>>>> imported with a direct call to importTemplates(STGroup)?
>>>>>>>>> If you look at the diff of TemplateGroup.cs in CL8734 (it's a small
>>>>>>>>> diff), you can see how I adjusted the import code to handle the
>>>>>>>>> unload() method in everyone's cases. If the java code is adjusted in
>>>>>>>>> the same way (I can make the change if you want), then it's easy to
>>>>>>>>> propagate renderers by the following two rules:
>>>>>>>>> 1.When STGroup.importTemplates(Token) is called, the current group's
>>>>>>>>> renderers are added to the group that just got imported. This handles
>>>>>>>>> the case where the renderer is registered before the group is
>>>>>>>>> imported (especially relevant in reloading a group file after calling
>>>>>>> unload()).
>>>>>>>>> 2.When a renderer is added to a group, it is automatically added (by
>>>>>>>>> calling registerRenderer) to all groups in the importsToClearOnUnload
>>>>>>>>> list. This handles the case where the group is imported before the
>>>>>>>>> renderer is registered.
>>>>>>>>> Sam
>>>>>>>>> *From:*stringtemplate-interest-bounces at antlr.org
>>>>>>>>> <mailto:stringtemplate-interest-bounces at antlr.org>[mailto:stringtempl
>>>>>>>>> ate-interest-bounces at antlr.org]*On
>>>>>>>>> Behalf Of*Terence Parr
>>>>>>>>> *Sent:*Thursday, June 23, 2011 1:44 PM *To:*Udo Borkowski
>>>>>>>>> *Cc:*stringtemplate-interest Template
>>>>>>>>> *Subject:*Re: [stringtemplate-interest] Group Syntax extension for
>>>>>>>>> ModelAdapter and Renderer I think that we should probably keep this
>>>>>>>>> at the programming level.
>>>>>>>>> should we make renderers inherited instead to solve your problem?
>>>>>>>>> Ter
>>>>>>>>> On Jun 21, 2011, at 1:17 AM, Udo Borkowski wrote:
>>>>>>>>> 
>>>>>>>>> 
>>>>>>>>> Hi,
>>>>>>>>> currently we programmatically register ModelAdapters and Renderers to
>>>>>>>>> an STGroup.
>>>>>>>>> What about providing an extension to the syntax of Group to also
>>>>>>>>> define these in a Group file?
>>>>>>>>> E.g. I could imagine to use something like
>>>>>>>>> 
>>>>>>>>> adapter "org.w3c.dom.Node"
>>>>>>>>> "com.collinfagan.strum.adapters.xml.NodeModelAdapter"
>>>>>>>>> renderer "org.w3c.dom.Node"
>>>>>>>>> "com.collinfagan.strum.adapters.xml.NodeRenderer"
>>>>>>>>> 
>>>>>>>>> at the top of an Group file. This would mean the same as running this
>>>>>>>>> Java code for the group:
>>>>>>>>> 
>>>>>>>>> group.registerRenderer(org.w3c.dom.Node.class, new
>>>>>>>>> com.collinfagan.strum.adapters.xml.NodeRenderer());
>>>>>>>>> 
>>>>>>>>> group.registerModelAdaptor(org.w3c.dom.Node.class, new
>>>>>>>>> com.collinfagan.strum.adapters.xml.NodeModelAdapter());
>>>>>>>>> 
>>>>>>>>> Especially when importing groups this feature comes in handy as I
>>>>>>>>> cannot register adapters/renderers when importing. In these cases I
>>>>>>>>> must rely on the root group. For this group R we must register ALL
>>>>>>>>> adapters/renders used in ANY group R imports. This make things hard
>>>>>>>>> to maintain as using a "new" renderer in some template T requires me
>>>>>>>>> to add the "registerRenderer" in EVERY code using T, maybe indirectly
>>>>>>>>> through imports.
>>>>>>>>> Similar to features discussed earlier this feature is easy to
>>>>>>>>> implement for the STGroupFile, but the STGroupDir currently has no
>>>>>>>>> proper place to hold this information. So we may also need to tackle
>>>>>>>>> this re-appearing topic, too.
>>>>>>>>> What do others think?
>>>>>>>>> Udo
>>>>>>>>> _______________________________________________
>>>>>>>>> stringtemplate-interest mailing list
>>>>>>>>> stringtemplate-interest at antlr.org
>>>>>>>>> <mailto:stringtemplate-interest at antlr.org>
>>>>>>>>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>>>>>>>> 
>>>>>>>> 
>>>>>>>> 
>>>>>>>> _______________________________________________
>>>>>>>> stringtemplate-interest mailing list
>>>>>>>> stringtemplate-interest at antlr.org
>>>>>>>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>>>>>>> 
>>>>>>> 
>>>>>> 
>>>>>> _______________________________________________
>>>>>> stringtemplate-interest mailing list
>>>>>> stringtemplate-interest at antlr.org
>>>>>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>>>>> 
>>>>> _______________________________________________
>>>>> stringtemplate-interest mailing list
>>>>> stringtemplate-interest at antlr.org
>>>>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>>>> 
>>>> 
>>>> 
>>>> _______________________________________________
>>>> stringtemplate-interest mailing list
>>>> stringtemplate-interest at antlr.org
>>>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>>> 
>> 
> 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20110627/c6203e8e/attachment-0001.html 

From ub at abego-software.de  Mon Jun 27 15:08:52 2011
From: ub at abego-software.de (Udo Borkowski)
Date: Tue, 28 Jun 2011 00:08:52 +0200
Subject: [stringtemplate-interest] Re : Templates that get another
	templates as arguments?
In-Reply-To: <BANLkTimN=Z3bj4i18pMthBYaJQ56A0Gg=g@mail.gmail.com>
References: <BANLkTinXzZGiRhSTT4PxLXcAP=xEX6X1Pw@mail.gmail.com>
	<BANLkTik1kb8Ff8vSjTd-PhPRi5i2b7xOBQ@mail.gmail.com>
	<1309163157.3303.YahooMailNeo@web25706.mail.ukl.yahoo.com>
	<EB9E0A53-CF84-43D3-BAAA-E5FE650105C2@gmx.de>
	<BANLkTimN=Z3bj4i18pMthBYaJQ56A0Gg=g@mail.gmail.com>
Message-ID: <D236806F-F9D3-4175-A0C8-7AAE0F3F584D@abego-software.de>

> I know that StringTemplate will lookup the template name through the
> call stack, but is that better than explicitly passing the argument in
> to the template?

I guess this is partly a question of personal taste. 

In general I'd prefer to always pass things through explicitly defined parameters. This better documents what parameters a template depends on. 

However in this case I was working on an existing example and I wanted to change as little as necessary on the original code. 

With explicit parameters I need to add a parameter to "hello" and pass the pattern, either explicitly:

greet(pattern)::=<<
<hello("Bob",pattern)>
<hello("John",pattern)>
<hello("Kate",pattern)>
<hello("Barbara",pattern)>
>>

hello(name,pattern)::=<<
Hello, <pattern>
>>

or using the "?" passthru (This requires we also pass the name "by name")

greet(pattern)::=<<
<hello(name="Bob",...)>
<hello(name="John",...)>
<hello(name="Kate",...)>
<hello(name="Barbara",?)>
>>

hello(name,pattern)::=<<
Hello, <pattern>
>>



Udo
On 27.06.2011, at 22:30, Barrie Treloar wrote:

> 2011/6/27 Udo Borkowski <Udo.Borkowski at gmx.de>:
>> Matthieu is right, the indirect template expression is one way to solve
>> this.
>> Alternatively you may also use anonymous templates. Therefore you don't even
>> need to create an extra template for each "greeting pattern". Here the
>> complete example:
> 
> [del]
>> hello(name)::=<<
>> Hello, <pattern>
> 
> [del]
> 
>> hello(name)::=<<
>> Hello, <(processName)(name)>
> 
> I know that StringTemplate will lookup the template name through the
> call stack, but is that better than explicitly passing the argument in
> to the template?
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest


From baerrach at gmail.com  Mon Jun 27 17:13:44 2011
From: baerrach at gmail.com (Barrie Treloar)
Date: Tue, 28 Jun 2011 09:43:44 +0930
Subject: [stringtemplate-interest] Re : Templates that get another
 templates as arguments?
In-Reply-To: <BD0F2CB1-FF1A-42BA-8330-4CBA8D51A3B2@gmx.de>
References: <BANLkTinXzZGiRhSTT4PxLXcAP=xEX6X1Pw@mail.gmail.com>
	<BANLkTik1kb8Ff8vSjTd-PhPRi5i2b7xOBQ@mail.gmail.com>
	<1309163157.3303.YahooMailNeo@web25706.mail.ukl.yahoo.com>
	<EB9E0A53-CF84-43D3-BAAA-E5FE650105C2@gmx.de>
	<BANLkTimN=Z3bj4i18pMthBYaJQ56A0Gg=g@mail.gmail.com>
	<BD0F2CB1-FF1A-42BA-8330-4CBA8D51A3B2@gmx.de>
Message-ID: <BANLkTi=e7SXvkLfoQojj4qS7eEKDpy_H_Q@mail.gmail.com>

On Tue, Jun 28, 2011 at 7:14 AM, Udo Borkowski <Udo.Borkowski at gmx.de> wrote:
>> I know that StringTemplate will lookup the template name through the
>> call stack, but is that better than explicitly passing the argument in
>> to the template?
>
> I guess this is partly a question of personal taste.
>
> In general I'd prefer to always pass things through explicitly defined parameters. This better documents what parameters a template depends on.

[del]

Fair enough.

With ST4 I *like* explicit argument passing.
So I prefer that option too.

From mwipliez at yahoo.fr  Tue Jun 28 02:23:42 2011
From: mwipliez at yahoo.fr (Matthieu Wipliez)
Date: Tue, 28 Jun 2011 10:23:42 +0100 (BST)
Subject: [stringtemplate-interest] Re : Visual Studio 2010 support for ST4
	template editing
In-Reply-To: <D9E6120E-459D-4B11-AD4E-9122F074DEC6@cs.usfca.edu>
References: <00d001cc34f2$4cd502a0$e67f07e0$@pixelminegames.com>
	<D9E6120E-459D-4B11-AD4E-9122F074DEC6@cs.usfca.edu>
Message-ID: <1309253022.87510.YahooMailNeo@web25704.mail.ukl.yahoo.com>

As a matter of fact, a colleague and I have made an Xtext-based editor for ST4 (requires Eclipse 3.7), available here: http://sourceforge.net/p/hastee/

The grammar is a bit hackish (we do everything with a single lexer + parser) and not complete yet, and the editor is still in an early version (0.2.0), but we already use it to edit the templates in our tools.
In the future I intend to rewrite the grammar and use a custom lexer (to allow other separators than < and >).

One of the nice feature the editor has is that it solves implicit references to attributes. This is by definition limited, because scoping is dynamic in ST, but we have found that it is quite helpful when writing templates.
One thing we would like to do is autocomplete of properties based on an annotation that specifies the class of the input model.

Cheers
Matthieu




>________________________________
>De?: Terence Parr <parrt at cs.usfca.edu>
>??: Sam Harwell <sharwell at pixelminegames.com>
>Cc?: stringtemplate-interest <stringtemplate-interest at antlr.org>
>Envoy? le : Lundi 27 Juin 2011 20h04
>Objet?: Re: [stringtemplate-interest] Visual Studio 2010 support for ST4 template editing
>
>that is so cool!? you bastard. now do it for java ;)
>
>Ter
>On Jun 27, 2011, at 10:47 AM, Sam Harwell wrote:
>
>> Hi everyone,
>> 
>> I'm working on support for ST4 editing within Visual Studio 2010. Attached
>> is a screenshot showing the current syntax highlighting, collapsing code,
>> and dropdown bars support. If anyone has any suggestions for other/improved
>> styles to highlight the templates, feel free to drop me a message. :)
>> 
>> I'll be releasing this extension for testing with the upcoming release of
>> the C# port. :)
>> 
>> Thanks,
>> Sam
>> 
>> <ST4Editor.png>_______________________________________________
>> stringtemplate-interest mailing list
>> stringtemplate-interest at antlr.org
>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>
>_______________________________________________
>stringtemplate-interest mailing list
>stringtemplate-interest at antlr.org
>http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20110628/0d2d820e/attachment.html 

From elldekaa at gmail.com  Tue Jun 28 02:44:50 2011
From: elldekaa at gmail.com (LdK)
Date: Tue, 28 Jun 2011 11:44:50 +0200
Subject: [stringtemplate-interest] Re : Visual Studio 2010 support for
 ST4 template editing
In-Reply-To: <1309253022.87510.YahooMailNeo@web25704.mail.ukl.yahoo.com>
References: <00d001cc34f2$4cd502a0$e67f07e0$@pixelminegames.com>
	<D9E6120E-459D-4B11-AD4E-9122F074DEC6@cs.usfca.edu>
	<1309253022.87510.YahooMailNeo@web25704.mail.ukl.yahoo.com>
Message-ID: <BANLkTi=biLdg0b3rqRkm5KBeqPPuGWGHkA@mail.gmail.com>

This is a screenshot of Hastee.

Cheers,
Herv?

2011/6/28 Matthieu Wipliez <mwipliez at yahoo.fr>

> As a matter of fact, a colleague and I have made an Xtext-based editor for
> ST4 (requires Eclipse 3.7), available here:
> http://sourceforge.net/p/hastee/
> The grammar is a bit hackish (we do everything with a single lexer +
> parser) and not complete yet, and the editor is still in an early version
> (0.2.0), but we already use it to edit the templates in our tools.
> In the future I intend to rewrite the grammar and use a custom lexer (to
> allow other separators than < and >).
>
> One of the nice feature the editor has is that it solves implicit
> references to attributes. This is by definition limited, because scoping is
> dynamic in ST, but we have found that it is quite helpful when writing
> templates.
> One thing we would like to do is autocomplete of properties based on an
> annotation that specifies the class of the input model.
>
> Cheers
> Matthieu
>
> ------------------------------
> *De :* Terence Parr <parrt at cs.usfca.edu>
> *? :* Sam Harwell <sharwell at pixelminegames.com>
> *Cc :* stringtemplate-interest <stringtemplate-interest at antlr.org>
> *Envoy? le :* Lundi 27 Juin 2011 20h04
> *Objet :* Re: [stringtemplate-interest] Visual Studio 2010 support for ST4
> template editing
>
> that is so cool!  you bastard. now do it for java ;)
>
> Ter
> On Jun 27, 2011, at 10:47 AM, Sam Harwell wrote:
>
> > Hi everyone,
> >
> > I'm working on support for ST4 editing within Visual Studio 2010.
> Attached
> > is a screenshot showing the current syntax highlighting, collapsing code,
> > and dropdown bars support. If anyone has any suggestions for
> other/improved
> > styles to highlight the templates, feel free to drop me a message. :)
> >
> > I'll be releasing this extension for testing with the upcoming release of
> > the C# port. :)
> >
> > Thanks,
> > Sam
> >
> > <ST4Editor.png>_______________________________________________
> > stringtemplate-interest mailing list
> > stringtemplate-interest at antlr.org
> > http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>
>
>
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20110628/69f7652d/attachment-0001.html 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: hastee.jpg
Type: image/jpeg
Size: 136346 bytes
Desc: not available
Url : http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20110628/69f7652d/attachment-0001.jpg 

From parrt at cs.usfca.edu  Tue Jun 28 10:48:07 2011
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue, 28 Jun 2011 10:48:07 -0700
Subject: [stringtemplate-interest] Re : Visual Studio 2010 support for
	ST4 template editing
In-Reply-To: <BANLkTi=biLdg0b3rqRkm5KBeqPPuGWGHkA@mail.gmail.com>
References: <00d001cc34f2$4cd502a0$e67f07e0$@pixelminegames.com>
	<D9E6120E-459D-4B11-AD4E-9122F074DEC6@cs.usfca.edu>
	<1309253022.87510.YahooMailNeo@web25704.mail.ukl.yahoo.com>
	<BANLkTi=biLdg0b3rqRkm5KBeqPPuGWGHkA@mail.gmail.com>
Message-ID: <428B3B4D-47CD-4E22-989C-D89F311FE966@cs.usfca.edu>

nice. :)  I think AntlrDT plugin also does ST v3 highlighting.
Ter
On Jun 28, 2011, at 2:44 AM, LdK wrote:

> This is a screenshot of Hastee.
> 
> Cheers,
> Herv?
> 
> 2011/6/28 Matthieu Wipliez <mwipliez at yahoo.fr>
> As a matter of fact, a colleague and I have made an Xtext-based editor for ST4 (requires Eclipse 3.7), available here: http://sourceforge.net/p/hastee/
> The grammar is a bit hackish (we do everything with a single lexer + parser) and not complete yet, and the editor is still in an early version (0.2.0), but we already use it to edit the templates in our tools.
> In the future I intend to rewrite the grammar and use a custom lexer (to allow other separators than < and >).
> 
> One of the nice feature the editor has is that it solves implicit references to attributes. This is by definition limited, because scoping is dynamic in ST, but we have found that it is quite helpful when writing templates.
> One thing we would like to do is autocomplete of properties based on an annotation that specifies the class of the input model.
> 
> Cheers
> Matthieu
> 
> De : Terence Parr <parrt at cs.usfca.edu>
> ? : Sam Harwell <sharwell at pixelminegames.com>
> Cc : stringtemplate-interest <stringtemplate-interest at antlr.org>
> Envoy? le : Lundi 27 Juin 2011 20h04
> Objet : Re: [stringtemplate-interest] Visual Studio 2010 support for ST4 template editing
> 
> that is so cool!  you bastard. now do it for java ;)
> 
> Ter
> On Jun 27, 2011, at 10:47 AM, Sam Harwell wrote:
> 
> > Hi everyone,
> > 
> > I'm working on support for ST4 editing within Visual Studio 2010. Attached
> > is a screenshot showing the current syntax highlighting, collapsing code,
> > and dropdown bars support. If anyone has any suggestions for other/improved
> > styles to highlight the templates, feel free to drop me a message. :)
> > 
> > I'll be releasing this extension for testing with the upcoming release of
> > the C# port. :)
> > 
> > Thanks,
> > Sam
> > 
> > <ST4Editor.png>_______________________________________________
> > stringtemplate-interest mailing list
> > stringtemplate-interest at antlr.org
> > http://www.antlr.org/mailman/listinfo/stringtemplate-interest
> 
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
> 
> 
> 
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
> 
> 
> <hastee.jpg>_______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20110628/89505f87/attachment.html 

From robert.clark at quest.com  Tue Jun 28 12:25:58 2011
From: robert.clark at quest.com (Robert Clark)
Date: Tue, 28 Jun 2011 15:25:58 -0400
Subject: [stringtemplate-interest] Re : Visual Studio 2010 support for
	ST4 template editing
In-Reply-To: <1309253022.87510.YahooMailNeo@web25704.mail.ukl.yahoo.com>
References: <00d001cc34f2$4cd502a0$e67f07e0$@pixelminegames.com>
	<D9E6120E-459D-4B11-AD4E-9122F074DEC6@cs.usfca.edu>
	<1309253022.87510.YahooMailNeo@web25704.mail.ukl.yahoo.com>
Message-ID: <201106281525.58638.robert.clark@quest.com>

On June 28, 2011 5:23:42 AM Matthieu Wipliez wrote:
> As a matter of fact, a colleague and I have made an Xtext-based editor
> for ST4 (requires Eclipse 3.7), available here:
> http://sourceforge.net/p/hastee/

Just trying it out now. This looks very nice. 

Thank you!
 
> In the future I intend to rewrite the grammar and use a custom
> lexer (to allow other separators than < and >).

+1000, I end up generating a lot of XML-like documents and use '%' as the 
separator more often than not. 

However, even as it is your editor has saved me quite some time already as 
it was very obvious when I forgot to close a template definition (oops).

- Rob

From parrt at cs.usfca.edu  Thu Jun 30 11:30:25 2011
From: parrt at cs.usfca.edu (Terence Parr)
Date: Thu, 30 Jun 2011 11:30:25 -0700
Subject: [stringtemplate-interest] Group
	Syntax	extension	for	ModelAdapter and Renderer
In-Reply-To: <05A0DA7A-6586-40A8-8C41-896AE052CBC7@abego-software.de>
References: <22302E49-6669-4311-8024-99B17674A80F@abego-software.de>	<71F0A5CD-D401-44E7-8F0A-83C3C51A7E51@cs.usfca.edu>	<074701cc31ed$e2a55d00$a7f01700$@pixelminegames.com>	<2ADFB36D-6BC2-4B09-9DD6-A4F8291F9118@abego-software.de>	<4E0463FE.2040905@lancaster.ac.uk>	<007f01cc3276$f6cef5f0$e46ce1d0$@pixelminegames.com>	<4E049D1A.9070403@lancaster.ac.uk>	<DD30493C-6612-406B-95C0-357AB10DF856@cs.usfca.edu>
	<5F0F63EB-8DEC-4852-9507-D940F17FAEF4@abego-software.de>
	<4E08991B.3080304@lancaster.ac.uk>
	<0718126E-4F2A-4F08-976A-46EE26D8271C@abego-software.de>
	<4E08B2F6.3010407@lancaster.ac.uk>
	<05A0DA7A-6586-40A8-8C41-896AE052CBC7@abego-software.de>
Message-ID: <8D3D0433-9E76-4736-AA14-1B3D05EFCFB0@cs.usfca.edu>

Hi Gang, thanks for the excellent discussion.

Udo had a nice suggestion to look first at the native group then requesting group in a reverse polymorphism.

The Sams suggested that perhaps templates not renderers are what is needed.

Udo points out that we need to escape lots of things like " in strings, */ in javadoc etc...

One of the Sams suggested a single renderer for strings that knows more escapes. I think that is a fine solution since we are really saying we need to render strings in both cases. Why not group together:

<s; format="javadoc-escape">
...

I think we should stick to something super simple. I don't like String having two renderers in system at once. BUT, we currently allow you to set renderers PER group so what does that mean?  For non-imported groups, it's obvious.  For imports, any renderer set on import group is ignored even when using import template.  I guess I'm ok with that. Set the renderer on the main group you use (or all to be sure).  I look at import groups as "helpers" that should give me templates and nothing else.

Udo: can you live with making one uber-string-renderer?

Ter

From parrt at cs.usfca.edu  Thu Jun 30 11:55:35 2011
From: parrt at cs.usfca.edu (Terence Parr)
Date: Thu, 30 Jun 2011 11:55:35 -0700
Subject: [stringtemplate-interest] who uses regions?
Message-ID: <FAF1B006-D328-45F3-B8D9-426567E136C0@cs.usfca.edu>

they are driving me nuts in STv4 implementation. i'm not even sure what they mean anymore with subdirs and /a/b/c/d style references with inheritance mixed in.

I don't use anymore myself. I released I needed them in ANTLR v3 code gen due to forcing too much of logic into templates.  v4 does all thinking in code and constructs internal model and then just makes templates and fills and renders.

i'd love to eject regions but not if people use.  I guess ANTLR 3.4 needs them...hmm...

Ter

From robert.clark at quest.com  Thu Jun 30 12:01:17 2011
From: robert.clark at quest.com (Robert Clark)
Date: Thu, 30 Jun 2011 15:01:17 -0400
Subject: [stringtemplate-interest] who uses regions?
In-Reply-To: <FAF1B006-D328-45F3-B8D9-426567E136C0@cs.usfca.edu>
References: <FAF1B006-D328-45F3-B8D9-426567E136C0@cs.usfca.edu>
Message-ID: <201106301501.17816.robert.clark@quest.com>

On June 30, 2011 2:55:35 PM Terence Parr wrote:
> they are driving me nuts in STv4 implementation. i'm not even sure what
> they mean anymore with subdirs and /a/b/c/d style references with
> inheritance mixed in.
> 
> I don't use anymore myself. I released I needed them in ANTLR v3 code
> gen due to forcing too much of logic into templates.  v4 does all
> thinking in code and constructs internal model and then just makes
> templates and fills and renders.
> 
> i'd love to eject regions but not if people use.  I guess ANTLR 3.4
> needs them...hmm...

I'm currently using regions with 4.0.something to allow customizations of 
templates under special conditions. I suppose I could do the same thing 
with a mix of references and inheritance, but up until now I've been too 
lazy to learn how to do so.

If the same functionality can be achieved without regions, then I'd have no 
problem re-tweaking my templates to get rid of them. Especially if they are 
making maintenance harder.

- Rob

From parrt at cs.usfca.edu  Thu Jun 30 12:10:30 2011
From: parrt at cs.usfca.edu (Terence Parr)
Date: Thu, 30 Jun 2011 12:10:30 -0700
Subject: [stringtemplate-interest] who uses regions?
In-Reply-To: <201106301501.17816.robert.clark@quest.com>
References: <FAF1B006-D328-45F3-B8D9-426567E136C0@cs.usfca.edu>
	<201106301501.17816.robert.clark@quest.com>
Message-ID: <81904061-9F90-4B0D-8984-1927BE8B0221@cs.usfca.edu>

I should leave them in but I'm going to put in a warning that they are ill-advised (ie. broken) if defined in subdirs. i love open source software ;)
Ter
On Jun 30, 2011, at 12:01 PM, Robert Clark wrote:

> On June 30, 2011 2:55:35 PM Terence Parr wrote:
>> they are driving me nuts in STv4 implementation. i'm not even sure what
>> they mean anymore with subdirs and /a/b/c/d style references with
>> inheritance mixed in.
>> 
>> I don't use anymore myself. I released I needed them in ANTLR v3 code
>> gen due to forcing too much of logic into templates.  v4 does all
>> thinking in code and constructs internal model and then just makes
>> templates and fills and renders.
>> 
>> i'd love to eject regions but not if people use.  I guess ANTLR 3.4
>> needs them...hmm...
> 
> I'm currently using regions with 4.0.something to allow customizations of 
> templates under special conditions. I suppose I could do the same thing 
> with a mix of references and inheritance, but up until now I've been too 
> lazy to learn how to do so.
> 
> If the same functionality can be achieved without regions, then I'd have no 
> problem re-tweaking my templates to get rid of them. Especially if they are 
> making maintenance harder.
> 
> - Rob
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest


From parrt at cs.usfca.edu  Thu Jun 30 12:15:34 2011
From: parrt at cs.usfca.edu (Terence Parr)
Date: Thu, 30 Jun 2011 12:15:34 -0700
Subject: [stringtemplate-interest] ok, any other issues with 4.0.3?
Message-ID: <30BE1C5D-A107-4C17-8CC1-26C32905D2A6@cs.usfca.edu>

I'd like to cut 4.0.4
Ter

From sharwell at pixelminegames.com  Thu Jun 30 12:39:41 2011
From: sharwell at pixelminegames.com (Sam Harwell)
Date: Thu, 30 Jun 2011 14:39:41 -0500
Subject: [stringtemplate-interest] who uses regions?
In-Reply-To: <FAF1B006-D328-45F3-B8D9-426567E136C0@cs.usfca.edu>
References: <FAF1B006-D328-45F3-B8D9-426567E136C0@cs.usfca.edu>
Message-ID: <009901cc375d$757c5330$6074f990$@pixelminegames.com>

I actually came up with an idea last week concerning this, but figured you
were done looking at regions so I didn't mention it. Looks like that might
not be the case anymore. :)

Summary of how it could work:

* Get rid of explicit/implicit/embedded regions. Regions are always defined
explicitly, and a region reference is just a normal template reference.
* Allow a template definition to be formatted as "@dotted.ident.ifier".
* For the above rule, the template name is "@dotted.ident.ifier". The
character '@' is a new ID start char. The characters '-', '_', and '.' are
ID characters (but not ID start chars).
* A template expression <@name> refers to @currentTemplate.name.

In the implementation, the notion of regions is now gone. The @ syntax is
just shorthand for adding "@currentTemplateName." to the name of the
template to lookup, which makes them effectively the same as they used to be
since the automatic insertion of the current template name means you can
only reference them within a specific template.

If <@name()> appears within a template named "@other.item", the extra @ is
dropped when forming "@other.item.name".

When looking up a template, if the name starts with @ and isn't found,
return an empty template without printing an error message (covers the case
where implicit regions were used before).

Sam

-----Original Message-----
From: stringtemplate-interest-bounces at antlr.org
[mailto:stringtemplate-interest-bounces at antlr.org] On Behalf Of Terence Parr
Sent: Thursday, June 30, 2011 1:56 PM
To: stringtemplate-interest Template
Subject: [stringtemplate-interest] who uses regions?

they are driving me nuts in STv4 implementation. i'm not even sure what they
mean anymore with subdirs and /a/b/c/d style references with inheritance
mixed in.

I don't use anymore myself. I released I needed them in ANTLR v3 code gen
due to forcing too much of logic into templates.  v4 does all thinking in
code and constructs internal model and then just makes templates and fills
and renders.

i'd love to eject regions but not if people use.  I guess ANTLR 3.4 needs
them...hmm...

Ter
_______________________________________________
stringtemplate-interest mailing list
stringtemplate-interest at antlr.org
http://www.antlr.org/mailman/listinfo/stringtemplate-interest


From parrt at cs.usfca.edu  Thu Jun 30 12:58:43 2011
From: parrt at cs.usfca.edu (Terence Parr)
Date: Thu, 30 Jun 2011 12:58:43 -0700
Subject: [stringtemplate-interest] who uses regions?
In-Reply-To: <009901cc375d$757c5330$6074f990$@pixelminegames.com>
References: <FAF1B006-D328-45F3-B8D9-426567E136C0@cs.usfca.edu>
	<009901cc375d$757c5330$6074f990$@pixelminegames.com>
Message-ID: <24018537-2D4C-485C-A7C7-13864760737C@cs.usfca.edu>


On Jun 30, 2011, at 12:39 PM, Sam Harwell wrote:

> I actually came up with an idea last week concerning this, but figured you
> were done looking at regions so I didn't mention it. Looks like that might
> not be the case anymore. :)
> 
> Summary of how it could work:
> 
> * Get rid of explicit/implicit/embedded regions. Regions are always defined
> explicitly, and a region reference is just a normal template reference.

How do you define explicitly?  Can you give an example?
T

> * Allow a template definition to be formatted as "@dotted.ident.ifier".
> * For the above rule, the template name is "@dotted.ident.ifier". The
> character '@' is a new ID start char. The characters '-', '_', and '.' are
> ID characters (but not ID start chars).
> * A template expression <@name> refers to @currentTemplate.name.
> 
> In the implementation, the notion of regions is now gone. The @ syntax is
> just shorthand for adding "@currentTemplateName." to the name of the
> template to lookup, which makes them effectively the same as they used to be
> since the automatic insertion of the current template name means you can
> only reference them within a specific template.
> 
> If <@name()> appears within a template named "@other.item", the extra @ is
> dropped when forming "@other.item.name".
> 
> When looking up a template, if the name starts with @ and isn't found,
> return an empty template without printing an error message (covers the case
> where implicit regions were used before).
> 
> Sam
> 
> -----Original Message-----
> From: stringtemplate-interest-bounces at antlr.org
> [mailto:stringtemplate-interest-bounces at antlr.org] On Behalf Of Terence Parr
> Sent: Thursday, June 30, 2011 1:56 PM
> To: stringtemplate-interest Template
> Subject: [stringtemplate-interest] who uses regions?
> 
> they are driving me nuts in STv4 implementation. i'm not even sure what they
> mean anymore with subdirs and /a/b/c/d style references with inheritance
> mixed in.
> 
> I don't use anymore myself. I released I needed them in ANTLR v3 code gen
> due to forcing too much of logic into templates.  v4 does all thinking in
> code and constructs internal model and then just makes templates and fills
> and renders.
> 
> i'd love to eject regions but not if people use.  I guess ANTLR 3.4 needs
> them...hmm...
> 
> Ter
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
> 


From sharwell at pixelminegames.com  Thu Jun 30 13:22:05 2011
From: sharwell at pixelminegames.com (Sam Harwell)
Date: Thu, 30 Jun 2011 15:22:05 -0500
Subject: [stringtemplate-interest] who uses regions?
In-Reply-To: <24018537-2D4C-485C-A7C7-13864760737C@cs.usfca.edu>
References: <FAF1B006-D328-45F3-B8D9-426567E136C0@cs.usfca.edu>	<009901cc375d$757c5330$6074f990$@pixelminegames.com>
	<24018537-2D4C-485C-A7C7-13864760737C@cs.usfca.edu>
Message-ID: <009d01cc3763$61826fd0$24874f70$@pixelminegames.com>

The following is allowed and works like you'd expect:

foo() ::= <<
<@bar()>
>>

@foo.bar() ::= <<
<@subbar()>
>>

@foo.bar.subbar() ::= <<
Yay!
>>

The following is not allowed:

foo() ::= <<
<@bar><@subbar>Nay!<@end><@end>
>>

The following both produce empty output but foo2 does not print any message
about a missing template:

foo() ::= <<
<bar()>
>>

foo2() ::= <<
<@bar()>
>>


-----Original Message-----
From: stringtemplate-interest-bounces at antlr.org
[mailto:stringtemplate-interest-bounces at antlr.org] On Behalf Of Terence Parr
Sent: Thursday, June 30, 2011 2:59 PM
To: stringtemplate-interest Template
Subject: Re: [stringtemplate-interest] who uses regions?


On Jun 30, 2011, at 12:39 PM, Sam Harwell wrote:

> I actually came up with an idea last week concerning this, but figured 
> you were done looking at regions so I didn't mention it. Looks like 
> that might not be the case anymore. :)
> 
> Summary of how it could work:
> 
> * Get rid of explicit/implicit/embedded regions. Regions are always 
> defined explicitly, and a region reference is just a normal template
reference.

How do you define explicitly?  Can you give an example?
T

> * Allow a template definition to be formatted as "@dotted.ident.ifier".
> * For the above rule, the template name is "@dotted.ident.ifier". The 
> character '@' is a new ID start char. The characters '-', '_', and '.' 
> are ID characters (but not ID start chars).
> * A template expression <@name> refers to @currentTemplate.name.
> 
> In the implementation, the notion of regions is now gone. The @ syntax 
> is just shorthand for adding "@currentTemplateName." to the name of 
> the template to lookup, which makes them effectively the same as they 
> used to be since the automatic insertion of the current template name 
> means you can only reference them within a specific template.
> 
> If <@name()> appears within a template named "@other.item", the extra 
> @ is dropped when forming "@other.item.name".
> 
> When looking up a template, if the name starts with @ and isn't found, 
> return an empty template without printing an error message (covers the 
> case where implicit regions were used before).
> 
> Sam
> 
> -----Original Message-----
> From: stringtemplate-interest-bounces at antlr.org
> [mailto:stringtemplate-interest-bounces at antlr.org] On Behalf Of 
> Terence Parr
> Sent: Thursday, June 30, 2011 1:56 PM
> To: stringtemplate-interest Template
> Subject: [stringtemplate-interest] who uses regions?
> 
> they are driving me nuts in STv4 implementation. i'm not even sure 
> what they mean anymore with subdirs and /a/b/c/d style references with 
> inheritance mixed in.
> 
> I don't use anymore myself. I released I needed them in ANTLR v3 code 
> gen due to forcing too much of logic into templates.  v4 does all 
> thinking in code and constructs internal model and then just makes 
> templates and fills and renders.
> 
> i'd love to eject regions but not if people use.  I guess ANTLR 3.4 
> needs them...hmm...
> 
> Ter
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
> 

_______________________________________________
stringtemplate-interest mailing list
stringtemplate-interest at antlr.org
http://www.antlr.org/mailman/listinfo/stringtemplate-interest


From ub at abego-software.de  Thu Jun 30 13:57:41 2011
From: ub at abego-software.de (Udo Borkowski)
Date: Thu, 30 Jun 2011 22:57:41 +0200
Subject: [stringtemplate-interest] Group
	Syntax	extension	for	ModelAdapter and Renderer
In-Reply-To: <8D3D0433-9E76-4736-AA14-1B3D05EFCFB0@cs.usfca.edu>
References: <22302E49-6669-4311-8024-99B17674A80F@abego-software.de>	<71F0A5CD-D401-44E7-8F0A-83C3C51A7E51@cs.usfca.edu>	<074701cc31ed$e2a55d00$a7f01700$@pixelminegames.com>	<2ADFB36D-6BC2-4B09-9DD6-A4F8291F9118@abego-software.de>	<4E0463FE.2040905@lancaster.ac.uk>	<007f01cc3276$f6cef5f0$e46ce1d0$@pixelminegames.com>	<4E049D1A.9070403@lancaster.ac.uk>	<DD30493C-6612-406B-95C0-357AB10DF856@cs.usfca.edu>
	<5F0F63EB-8DEC-4852-9507-D940F17FAEF4@abego-software.de>
	<4E08991B.3080304@lancaster.ac.uk>
	<0718126E-4F2A-4F08-976A-46EE26D8271C@abego-software.de>
	<4E08B2F6.3010407@lancaster.ac.uk>
	<05A0DA7A-6586-40A8-8C41-896AE052CBC7@abego-software.de>
	<8D3D0433-9E76-4736-AA14-1B3D05EFCFB0@cs.usfca.edu>
Message-ID: <7BBD403A-CF7E-4C12-A94B-BF7AA378474B@abego-software.de>

> ... I don't like String having two renderers in system at once. BUT, we currently allow you to set renderers PER group so what does that mean?  For non-imported groups, it's obvious.  For imports, any renderer set on import group is ignored even when using import template.  I guess I'm ok with that. Set the renderer on the main group you use (or all to be sure).  I look at import groups as "helpers" that should give me templates and nothing else.

This is a very nice summary of your objectives and your intentions. However ST4 as it is today does not really reflect this. 

I think the main problem is associating renderers/adaptors with STGroups. From what you write I think you are thinking of renderers/adapters more of "language extensions" (or "system extensions") rather than "Group extensions". This would be better reflected by moving the whole renderer/adapter stuff to the "Interpreter" (something already suggested in this thread). This way it is obvious there will be no "two renderers for String in the system". Attaching the renderers/adaptors to the interpreter would also get rid of the question what "renderers of imported templates" mean (as there aren't any). This would also mean one would not need to set the "renderers of the main groups" but just to the interpreter, also avoiding this "in-symmetry" regarding groups. (BTW: This change will break existing code, as STGroup no longer provides the "register?" method. Also the Interpreter would become more prominent in this solution etc.).

On the other hand I personally would prefer to stick to the "per group" registration of renderers/adapters and add the "look first in native group" feature. This would mean there could be more than one renderer per class (e.g. for String). However I don't have a problem with this as long it is clear what renderer is used. The main reason why I support this is probably the way I look at groups. Rather than looking at imported groups as "helpers" groups are for me the units of modularization in ST4. I create groups that serve a certain purpose and can be used "on their own". I later want to use them in other groups, simply be importing them and calling their templates. I would not like to do more (like merging various String renderer implementations) as this makes the reuse harder and more error-prone. (BTW: this change is compatible with existing code, just adds some more options)

So I see two options regarding renderers/adapters of imported groups here:
1) move the renderer/adapter stuff from STGroup to Interpreter, or
2) Implement the "look first in native group" for renderers/adapters (my favorite)


-----------

> Udo: can you live with making one uber-string-renderer?

Actually no, as this does not really solves the problem I tried to point out. The example I brought up was just an example to illustrate the situation. Of cause one could come up with solutions that work around the issue, but this was not really my point. 

My main point was asking to support renderers in imported groups (without changing the root groups). This is not directly related to String renderers. E.g. if I have a general purpose group "XMLUtil" dealing with XML I want to add a renderer(/adapter) for "org.w3c.dom.Node" to the "XMLUtil" group. The "root groups" don't need to know about this. I may even have different groups using different adapters/renderers of "Node". This leads to a better system structure, with all these things like "information hiding", "separation of concern", "modularization", "encapsulation", ?

----------

> One of the Sams suggested a single renderer for strings that knows more escapes. I think that is a fine solution since we are really saying we need to render strings in both cases. Why not group together:
> 
> <s; format="javadoc-escape">


When you talk about "group together" do you mean the stuff discussed in "[stringtemplate-interest] [ST4] How to apply multiple "format"s to an expression?" http://www.antlr.org/pipermail/stringtemplate-interest/2011-February/003216.html ?


Udo

On 30.06.2011, at 20:30, Terence Parr wrote:

> Hi Gang, thanks for the excellent discussion.
> 
> Udo had a nice suggestion to look first at the native group then requesting group in a reverse polymorphism.
> 
> The Sams suggested that perhaps templates not renderers are what is needed.
> 
> Udo points out that we need to escape lots of things like " in strings, */ in javadoc etc...
> 
> One of the Sams suggested a single renderer for strings that knows more escapes. I think that is a fine solution since we are really saying we need to render strings in both cases. Why not group together:
> 
> <s; format="javadoc-escape">
> ...
> 
> I think we should stick to something super simple. I don't like String having two renderers in system at once. BUT, we currently allow you to set renderers PER group so what does that mean?  For non-imported groups, it's obvious.  For imports, any renderer set on import group is ignored even when using import template.  I guess I'm ok with that. Set the renderer on the main group you use (or all to be sure).  I look at import groups as "helpers" that should give me templates and nothing else.
> 
> Udo: can you live with making one uber-string-renderer?
> 
> Ter
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20110630/f0d67639/attachment-0001.html 

From rafael at alphasimple.com  Thu Jun 30 14:08:58 2011
From: rafael at alphasimple.com (Rafael Chaves)
Date: Thu, 30 Jun 2011 14:08:58 -0700
Subject: [stringtemplate-interest] who uses regions
Message-ID: <BANLkTikNrBcKQujWdnigsav6oU78Cc2z9g@mail.gmail.com>

From: Rafael Chaves <rafael.chaves at gmail.com>
To: stringtemplate-interest at antlr.org
Date: Thu, 30 Jun 2011 14:01:05 -0700
Subject: Re: who uses regions?
> I should leave them in but I'm going to put in a warning that they are ill-advised (ie. broken) if defined in subdirs. i love open source software ;)
> Ter

I use them for families of templates.  But I don't use directories (or
file system lookups).

From parrt at cs.usfca.edu  Thu Jun 30 16:45:37 2011
From: parrt at cs.usfca.edu (Terence Parr)
Date: Thu, 30 Jun 2011 16:45:37 -0700
Subject: [stringtemplate-interest] Group
	Syntax	extension	for	ModelAdapter and Renderer
In-Reply-To: <7BBD403A-CF7E-4C12-A94B-BF7AA378474B@abego-software.de>
References: <22302E49-6669-4311-8024-99B17674A80F@abego-software.de>	<71F0A5CD-D401-44E7-8F0A-83C3C51A7E51@cs.usfca.edu>	<074701cc31ed$e2a55d00$a7f01700$@pixelminegames.com>	<2ADFB36D-6BC2-4B09-9DD6-A4F8291F9118@abego-software.de>	<4E0463FE.2040905@lancaster.ac.uk>	<007f01cc3276$f6cef5f0$e46ce1d0$@pixelminegames.com>	<4E049D1A.9070403@lancaster.ac.uk>	<DD30493C-6612-406B-95C0-357AB10DF856@cs.usfca.edu>
	<5F0F63EB-8DEC-4852-9507-D940F17FAEF4@abego-software.de>
	<4E08991B.3080304@lancaster.ac.uk>
	<0718126E-4F2A-4F08-976A-46EE26D8271C@abego-software.de>
	<4E08B2F6.3010407@lancaster.ac.uk>
	<05A0DA7A-6586-40A8-8C41-896AE052CBC7@abego-software.de>
	<8D3D0433-9E76-4736-AA14-1B3D05EFCFB0@cs.usfca.edu>
	<7BBD403A-CF7E-4C12-A94B-BF7AA378474B@abego-software.de>
Message-ID: <1A859F8A-AF49-4F1E-A8BC-0E01E0D121FB@cs.usfca.edu>


On Jun 30, 2011, at 1:57 PM, Udo Borkowski wrote:

>> ... I don't like String having two renderers in system at once. BUT, we currently allow you to set renderers PER group so what does that mean?  For non-imported groups, it's obvious.  For imports, any renderer set on import group is ignored even when using import template.  I guess I'm ok with that. Set the renderer on the main group you use (or all to be sure).  I look at import groups as "helpers" that should give me templates and nothing else.
> 
> This is a very nice summary of your objectives and your intentions. However ST4 as it is today does not really reflect this. 
> 
> I think the main problem is associating renderers/adaptors with STGroups. From what you write I think you are thinking of renderers/adapters more of "language extensions" (or "system extensions") rather than "Group extensions". This would be better reflected by moving the whole renderer/adapter stuff to the "Interpreter" (something already suggested in this thread). This way it is obvious there will be no "two renderers for String in the system".

ah! you are so right! it was a leftover from v3 that had no interp really.

> Attaching the renderers/adaptors to the interpreter would also get rid of the question what "renderers of imported templates" mean (as there aren't any). This would also mean one would not need to set the "renderers of the main groups" but just to the interpreter, also avoiding this "in-symmetry" regarding groups. (BTW: This change will break existing code, as STGroup no longer provides the "register?" method. Also the Interpreter would become more prominent in this solution etc.).
> 
> On the other hand I personally would prefer to stick to the "per group" registration of renderers/adapters and add the "look first in native group" feature. This would mean there could be more than one renderer per class (e.g. for String). However I don't have a problem with this as long it is clear what renderer is used. The main reason why I support this is probably the way I look at groups. Rather than looking at imported groups as "helpers" groups are for me the units of modularization in ST4. I create groups that serve a certain purpose and can be used "on their own". I later want to use them in other groups, simply be importing them and calling their templates. I would not like to do more (like merging various String renderer implementations) as this makes the reuse harder and more error-prone. (BTW: this change is compatible with existing code, just adds some more options)
> 
> So I see two options regarding renderers/adapters of imported groups here:
> 1) move the renderer/adapter stuff from STGroup to Interpreter, or
> 2) Implement the "look first in native group" for renderers/adapters (my favorite)

how about ONLY look in native group?  That is even more clear I think and was sort of my original thought/expectation on this.

> 
>> Udo: can you live with making one uber-string-renderer?
> 
> Actually no, as this does not really solves the problem I tried to point out. The example I brought up was just an example to illustrate the situation. Of cause one could come up with solutions that work around the issue, but this was not really my point. 
> 
> My main point was asking to support renderers in imported groups (without changing the root groups). This is not directly related to String renderers. E.g. if I have a general purpose group "XMLUtil" dealing with XML I want to add a renderer(/adapter) for "org.w3c.dom.Node" to the "XMLUtil" group. The "root groups" don't need to know about this. I may even have different groups using different adapters/renderers of "Node". This leads to a better system structure, with all these things like "information hiding", "separation of concern", "modularization", "encapsulation", ?
> 
> ----------
> 
>> One of the Sams suggested a single renderer for strings that knows more escapes. I think that is a fine solution since we are really saying we need to render strings in both cases. Why not group together:
>> 
>> <s; format="javadoc-escape">
> 
> 
> When you talk about "group together" do you mean the stuff discussed in "[stringtemplate-interest] [ST4] How to apply multiple "format"s to an expression?" http://www.antlr.org/pipermail/stringtemplate-interest/2011-February/003216.html ?

Just meant building combining code from two renderers into one.

Ter
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20110630/1eb73d00/attachment.html 

