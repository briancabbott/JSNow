From Ulf.Dreyer at de.bosch.com  Thu Jun  1 00:16:09 2006
From: Ulf.Dreyer at de.bosch.com (Dreyer Ulf (CR/APA3))
Date: Thu Jun  1 00:16:14 2006
Subject: AW: AW: [stringtemplate-interest] Problems with List and
	Hashesrevisited
In-Reply-To: <00CDA233-6C81-4FC5-B0DF-DF35BC276B22@cs.usfca.edu>
Message-ID: <19D19E1AA3C5154D85A43D38808E48AB7116AE@fe-mail29.de.bosch.com>

Hi!
 
> > RecursiveOut(Daten) ::= << $Daten:RecursiveOut();separator=","$ >>
> > As both classes in my data-structure (AttributeHash and 
> AttributeList)
> > are IEnumerable it should strip away one layer at a time, 
> shouldn't  
> > it?
> 
> You are saying
> 
> f(x) { f(x); }
> 
> here.

Of course this does not have any output but 
I assumed because of attribute application and the fact
that Daten is always IEnumerable it would "shave off"
one layer per call. (as it is essentially 
a  foreach( foreach (foreach))) construct)

Assume List of Lists for simplicity:

[A,B,C]
A=[1,2,3]
1=[I,II,III]

I would assume, that I get
A
1
I II III
2
[...]

I suppose the last layer (of Strings) was the 
real problem as the above template does not differenciate
between enumerations and values.


Anyway current implementation works as inteded:

TreeOut(Daten) ::= <<
$if(Daten.Length)$
String: $Daten$
$else$
$Daten.DebugName$
    $Daten:TreeOut();separator="\n"$
$endif$
>>

Daten can be List, Hash or String
and as Kunle pointed out (Big thanks - I hadn't thought of that)
List and Hash have .Count
and String has .Length and therefore can be distinguished from
inside a template.
Mind you this dirty hack is not meant for real template programming
but for debugging purposes. ;)


I think it will take a while to really know all the finer points
of ST but I DO like it. (In spite of it doing what I code - not what
I WANT)  *G*


Ulf
From open.zone at virgin.net  Thu Jun  1 01:28:57 2006
From: open.zone at virgin.net (Micheal J)
Date: Thu Jun  1 01:11:19 2006
Subject: [stringtemplate-interest] Newbie Some issues 
In-Reply-To: <447E19DE.90908@ntlworld.com>
Message-ID: <000a01c68555$6e62f050$c704a8c0@hercules>

Hi,

> I have issue with calling Templates
> I am using the c#  version 2.3b7 of string Templates  : I 
> have not tried 
> this in the Java version;

Try it and report your findings here.

> The following code segment raises the exception 
> 'antlr.NoViableAltException'
> 
> string tmplt = @"
> group DescDataSet ;
> DescTable(tab) ::= <<
> Hello There
>  >>
> DescDataSet( ds ) ::= <<$ds.Tables:DescTable(tab=it)$>>
> ";
>             StringTemplateGroup stg = new StringTemplateGroup(new 
> StringReader(tmplt), typeof(DefaultTemplateLexer));
> 
> ------------------------------

I'd have used something like:

  DescDataSet( ds ) ::= <<$ds.Tables:{table|DescTable(tab=table)}$>>

or just:

  DescDataSet( ds ) ::= <<$ds.Tables:DescTable()$>>


Micheal

-----------------------
The best way to contact me is via the list/forum. My time is very limited.

From Ulf.Dreyer at de.bosch.com  Thu Jun  1 06:47:57 2006
From: Ulf.Dreyer at de.bosch.com (Dreyer Ulf (CR/APA3))
Date: Thu Jun  1 06:48:01 2006
Subject: [stringtemplate-interest] Padding for all
Message-ID: <19D19E1AA3C5154D85A43D38808E48AB7116B1@fe-mail29.de.bosch.com>

Hi all!

Is there a simple way in ST to pad
any outputvalue from within a template?
That is without defining a load of
wrapper classes (attribute renderers).

(sorry if that has already been discussed
 200 times - I've only done a rough scan
 of the news-archives)

I'd like to format something like this
("<--" mark the padding)

(* -------------------------------- *)
(* Some text                        *)    <--  
(* some longer text                 *)    <--
(* -------------------------------- *)
IF ( ( Var1         = TRUE  ) AND         <--   
     ( Var_____2    = TRUE  ) AND         <--   
     ( Var_3        = TRUE  ) AND         <--   
     ( Var___4      = FALSE ) )		<--
THEN
END_IF

Terence what is your view on this? :

For best separation I would have to compute
the padded strings beforehand.
But if I want to use the same data in different
places that would be an awful lot of dublication.

Although padding is a computation on the data
it does not (not really) depend on the data
but on the output and should be possible within 
templates.

Ulf
From parrt at cs.usfca.edu  Thu Jun  1 10:30:11 2006
From: parrt at cs.usfca.edu (Terence Parr)
Date: Thu Jun  1 10:31:00 2006
Subject: AW: AW: [stringtemplate-interest] Problems with List and
	Hashesrevisited
In-Reply-To: <19D19E1AA3C5154D85A43D38808E48AB7116AE@fe-mail29.de.bosch.com>
References: <19D19E1AA3C5154D85A43D38808E48AB7116AE@fe-mail29.de.bosch.com>
Message-ID: <A5C8869F-B1DF-4706-8477-E08026F3179F@cs.usfca.edu>


On Jun 1, 2006, at 12:16 AM, Dreyer Ulf (CR/APA3) wrote:

> Hi!
>
>>> RecursiveOut(Daten) ::= << $Daten:RecursiveOut();separator=","$ >>
>>> As both classes in my data-structure (AttributeHash and
>> AttributeList)
>>> are IEnumerable it should strip away one layer at a time,
>> shouldn't
>>> it?
>>
>> You are saying
>>
>> f(x) { f(x); }
>>
>> here.
>
> Of course this does not have any output but
> I assumed because of attribute application and the fact
> that Daten is always IEnumerable it would "shave off"
> one layer per call. (as it is essentially
> a  foreach( foreach (foreach))) construct)

Normally it will, *if* you let it iterate.

Imagine one value in Daten, x.  You are passing the start of x again  
to the same template.  At the start of the template, it will always  
have that value, hence, infinitely.
Ter
From parrt at cs.usfca.edu  Thu Jun  1 10:31:49 2006
From: parrt at cs.usfca.edu (Terence Parr)
Date: Thu Jun  1 10:32:36 2006
Subject: [stringtemplate-interest] Padding for all
In-Reply-To: <19D19E1AA3C5154D85A43D38808E48AB7116B1@fe-mail29.de.bosch.com>
References: <19D19E1AA3C5154D85A43D38808E48AB7116B1@fe-mail29.de.bosch.com>
Message-ID: <C3861DD5-10CF-4903-A63A-8DC36E09B2E7@cs.usfca.edu>


On Jun 1, 2006, at 6:47 AM, Dreyer Ulf (CR/APA3) wrote:

> Hi all!
>
> Is there a simple way in ST to pad
> any outputvalue from within a template?

Not that I can think of.  We do not have a length operator yet.

> That is without defining a load of
> wrapper classes (attribute renderers).

Perhaps somethign in the output writer object?

> Although padding is a computation on the data
> it does not (not really) depend on the data
> but on the output and should be possible within
> templates.

it would not violate separation I don't think.  length is not a  
function of data value, just an attribute of the data.

Ter
From parrt at cs.usfca.edu  Thu Jun  1 10:32:42 2006
From: parrt at cs.usfca.edu (Terence Parr)
Date: Thu Jun  1 10:33:28 2006
Subject: [stringtemplate-interest] Newbie Some issues 
In-Reply-To: <447E19DE.90908@ntlworld.com>
References: <447E19DE.90908@ntlworld.com>
Message-ID: <FA07ACF1-C2A8-4769-92F4-0FEAA523ACD3@cs.usfca.edu>


On May 31, 2006, at 3:34 PM, Kenny Cockburn wrote:

> Hi,
>
>
> I have issue with calling Templates
> I am using the c#  version 2.3b7 of string Templates  : I have not  
> tried this in the Java version;
> The following code segment raises the exception  
> 'antlr.NoViableAltException'
>
> string tmplt = @"
> group DescDataSet ;
> DescTable(tab) ::= <<
> Hello There
> >>
> DescDataSet( ds ) ::= <<$ds.Tables:DescTable(tab=it)$>>
> ";
>            StringTemplateGroup stg = new StringTemplateGroup(new  
> StringReader(tmplt), typeof(DefaultTemplateLexer));
>
> ------------------------------
>
> if I change the template call from :DescTable(tab=it) to :DescTable 
> (it) I do not get any exception is this expected behaviour ?

That is not expected behavior...hmm...pretty sure we have a unit test  
that does that...argh!
Ter
From kenny.cockburn at ntlworld.com  Thu Jun  1 16:18:31 2006
From: kenny.cockburn at ntlworld.com (Kenny Cockburn)
Date: Thu Jun  1 16:07:20 2006
Subject: [stringtemplate-interest] Problem with checking length of string
Message-ID: <447F75C7.3030009@ntlworld.com>

I had the following test script in c# 2.3b7 version

      string TestIfStr = @"
group Base ;
TestStr(EmptyString) ::=<<
$if(!EmptyString)$
   String Passed is NULL
$endif$

$if(!EmptyString.Length )$
   String Passed has a Zero Length
$endif$

$if( EmptyString )$
   Test for non null String Passed is The value ""$EmptyString$""
$endif$

$if( EmptyString.Length )$
   String Has a Non Zero Length and the value ""$EmptyString$""
$endif$

 >>
";
            stg = new StringTemplateGroup(new StringReader(TestIfStr), 
typeof(DefaultTemplateLexer));
            sta3 = stg.GetInstanceOf("TestStr");
            sta3.SetAttribute("EmptyString", "I have set a Value");
            System.Console.WriteLine("EmptyString Passing In Value");
            System.Console.WriteLine(sta3.ToString());

            sta3 = stg.GetInstanceOf("TestStr");
            System.Console.WriteLine("EmptyString Set To Empty String");
            sta3.SetAttribute("EmptyString", string.Empty);
            System.Console.WriteLine(sta3.ToString());

            sta3 = stg.GetInstanceOf("TestStr");
            System.Console.WriteLine("EmptyString To the null value");
            sta3.SetAttribute("EmptyString", null);
            System.Console.WriteLine(sta3.ToString());


-----

The only test that worked was when the string being passed contained a 
Null reference ;

after some investigation in the c# I found the problem
the method
*public virtual bool TestAttributeTrue(object a) in file ASTExpr.cs
*
has a bug it did not deal with *numeric *values

The fix  is to add the following lines at the end of the function

              // KAC Can We convert this to a boolean
                Type classType = typeof(System.Convert);
                try
                {
                    MethodInfo methodInfo = 
classType.GetMethod(@"ToBoolean", new Type[] { a.GetType() });
                    // We should cache this relfection info
                    // Note It is possible methodInfo to be null
                    return (Boolean) methodInfo.Invoke(null, new 
object[] { a });                   
                }
                catch
                {
                    return true; // any other non-null object, return 
true--it's present
                }

------------
for best performance this reflection info should be cached in a hash   
     


From Kunle_Odutola at hotmail.com  Thu Jun  1 18:35:39 2006
From: Kunle_Odutola at hotmail.com (Kunle Odutola)
Date: Thu Jun  1 18:18:01 2006
Subject: [stringtemplate-interest] Problem with checking length of string
References: <447F75C7.3030009@ntlworld.com>
Message-ID: <BAY101-DAV23CE9E5024829D3689F9081910@phx.gbl>

Hi Kenny,

Thanks for the report and the tests.

> I had the following test script in c# 2.3b7 version
>
>       string TestIfStr = @"
> group Base ;
> TestStr(EmptyString) ::=<<
> $if(!EmptyString)$
>    String Passed is NULL
> $endif$
>
> $if(!EmptyString.Length )$
>    String Passed has a Zero Length
> $endif$
>
> $if( EmptyString )$
>    Test for non null String Passed is The value ""$EmptyString$""
> $endif$
>
> $if( EmptyString.Length )$
>    String Has a Non Zero Length and the value ""$EmptyString$""
> $endif$
>
>  >>
> ";
>             stg = new StringTemplateGroup(new StringReader(TestIfStr),
> typeof(DefaultTemplateLexer));
>             sta3 = stg.GetInstanceOf("TestStr");
>             sta3.SetAttribute("EmptyString", "I have set a Value");
>             System.Console.WriteLine("EmptyString Passing In Value");
>             System.Console.WriteLine(sta3.ToString());
>
>             sta3 = stg.GetInstanceOf("TestStr");
>             System.Console.WriteLine("EmptyString Set To Empty String");
>             sta3.SetAttribute("EmptyString", string.Empty);
>             System.Console.WriteLine(sta3.ToString());
>
>             sta3 = stg.GetInstanceOf("TestStr");
>             System.Console.WriteLine("EmptyString To the null value");
>             sta3.SetAttribute("EmptyString", null);
>             System.Console.WriteLine(sta3.ToString());
>
>
> -----
>
> The only test that worked was when the string being passed contained a
> Null reference ;

I ran the tests on a .NET 2.0 systems and this is the output I got:

<output>
EmptyString Passing In Value
   Test for non null String Passed is The value "I have set a Value"

   String Has a Non Zero Length and the value "I have set a Value"


EmptyString Set To Empty String
   Test for non null String Passed is The value ""

   String Has a Non Zero Length and the value ""


EmptyString To the null value
   String Passed is NULL
   String Passed has a Zero Length
</output>

Did you get the same?

The output confirms that ST# works as advertised. The $if()$
directive in ST/ST# is checks for attribute existence. If the
attribute exists and is of type 'bool', it also checks that the value is
"true".

Thank you.


Kunle
From kenny.cockburn at ntlworld.com  Fri Jun  2 09:12:47 2006
From: kenny.cockburn at ntlworld.com (Kenny Cockburn)
Date: Fri Jun  2 09:01:14 2006
Subject: [stringtemplate-interest] Problem with checking length of string
Message-ID: <4480637F.3080807@ntlworld.com>

.......

> Did you get the same?

yes 

>The output confirms that ST# works as advertised. The $if()$
>directive in ST/ST# is checks for attribute existence. If the
>attribute exists and is of type 'bool', it also checks that the value is
>"true".


If this is correct behavior there are already special cases for ICollection,IDictionary and IEnumerator that break the above rule

i guess I can get round the problem by using my own strategy object in my code 


From kenny.cockburn at ntlworld.com  Fri Jun  2 09:21:55 2006
From: kenny.cockburn at ntlworld.com (Kenny Cockburn)
Date: Fri Jun  2 09:10:20 2006
Subject: [stringtemplate-interest] Problem with IEnumerator collections (c#
	2.3b7 )
Message-ID: <448065A3.9010508@ntlworld.com>


I create a simple class that only implements the IEnumerator interface ;

I have a template that test if the collection has rows then prints the 
collections values

In the case where we have an array everything works as expected  in the 
case of the IEnumerator the rest() method is not called in the $if$ test 
so the list starts on the second element also after the list has been 
consumed the Rest() method is not called so subsequent  use of the list 
results in an empty list

see the code that follows



---------
        class myIEnum : IEnumerator
        {
            int[] myIntArray = new int[5] { 1, 2, 3, 4, 5 };
            IEnumerator itor;
            public myIEnum()
            {
                itor = myIntArray.GetEnumerator();                   
            }
            #region IEnumerator Members       
            public object Current
            {
                get
                {
                    return itor.Current;
                }
            }
            public bool MoveNext()
            {
                return itor.MoveNext();           
            }
            public void Reset()
            {
                itor.Reset();
            }
            #endregion
        }

        static void Main()
        {
  
            string simpleIfTest = @"
group TestIEnum ;

Action(Arg) ::=<<
$if( Arg )$
   $Arg:{X=$it$ # }$
$endif$
----                                                    /
Without If Test
$Arg:{X=$it$ # }$
----
 >>
";
            StringTemplateGroup stg = new StringTemplateGroup(new 
StringReader(simpleIfTest), typeof(DefaultTemplateLexer));
            StringTemplate sta3 = stg.GetInstanceOf("Action");
            int[] myIntArray = new int[5] { 1, 2, 3, 4, 5 };
           
            System.Console.WriteLine("Run Test with simple Array");
            sta3.SetAttribute("Arg", myIntArray );
            System.Console.WriteLine(sta3.ToString());

            System.Console.WriteLine("Run Test with type only supporting 
IEnumerator");        
            myIEnum Inum = new myIEnum();
            sta3 = stg.GetInstanceOf("Action");
            sta3.SetAttribute("Arg", Inum);
            System.Console.WriteLine(sta3.ToString());

            // Re-create object so no side effect from previous calls
            Inum = new myIEnum();
            System.Console.WriteLine("Prove IEnumerator Class");
            IEnumerator itor = (IEnumerator)Inum;
            while ( itor.MoveNext() )
            {
                System.Console.WriteLine("Num = " + (int)itor.Current );
            }
            itor.Reset();

            System.Console.WriteLine("Run Loop for second time Prove 
IEnumerator Class");
            while (itor.MoveNext())
            {
                System.Console.WriteLine("Num = " + (int)itor.Current);
            }
            itor.Reset();
    }



From Kunle_Odutola at hotmail.com  Fri Jun  2 10:07:05 2006
From: Kunle_Odutola at hotmail.com (Kunle Odutola)
Date: Fri Jun  2 10:29:45 2006
Subject: [stringtemplate-interest] Problem with checking length of string
References: <4480637F.3080807@ntlworld.com>
Message-ID: <BAY101-DAV934B6A9CBF03E9917ACEB81910@phx.gbl>

Kenny,

> >The output confirms that ST# works as advertised. The $if()$
> >directive in ST/ST# is checks for attribute existence. If the
> >attribute exists and is of type 'bool', it also checks that the value is
> >"true".
>
> If this is correct behavior there are already special cases for
ICollection,IDictionary and IEnumerator that break the above rule

Yeah. I just gave the essential gist of the rule. ;-)

> i guess I can get round the problem by using my own strategy object in my
code

Absolutely. Luis Leal's IAttributeStrategy abstraction in ST# enables and
supports that option.


Kunle
From Kunle_Odutola at hotmail.com  Fri Jun  2 10:47:19 2006
From: Kunle_Odutola at hotmail.com (Kunle Odutola)
Date: Fri Jun  2 10:30:02 2006
Subject: [stringtemplate-interest] Problem with IEnumerator collections
	(c#2.3b7 )
References: <448065A3.9010508@ntlworld.com>
Message-ID: <BAY101-DAV87E9F95437364B2FACA5B81910@phx.gbl>

Hi Kenny,

> I create a simple class that only implements the IEnumerator interface ;
>
> I have a template that test if the collection has rows then prints the
> collections values
>
> In the case where we have an array everything works as expected  in the
> case of the IEnumerator the rest() method is not called in the $if$ test
> so the list starts on the second element also after the list has been
> consumed the Rest() method is not called so subsequent  use of the list
> results in an empty list

Thanks. This is indeed an issue with ST#. Specifically with my attempt to
support testing of non-empty enumerators in $if(..)$. You didn't need a
custom IEnumerator implementation. This will have triggered the issue as
well:

    System.Console.WriteLine("Run Test with simple Array's Enumerator");

    sta3 = stg.GetInstanceOf("Action");

    sta3.SetAttribute("Arg", myIntArray.GetEnumerator());

    System.Console.WriteLine(sta3.ToString());

Some options:
a) Obvious fix: Reset() the enumerator after testing. This will still behave
incorrectly if the current position in the iterator is significant.
b) Ugly fix: Wrap *all* enumerator attributes to ensure consistent
behaviour.
c) Simplest fix: Restrict $if(enumerator)$ to testing object existense (i.e.
non-null) for enumerators.

I'm firmly in the (c) camp. What do you think?


Kunle

From kenny.cockburn at ntlworld.com  Fri Jun  2 16:53:54 2006
From: kenny.cockburn at ntlworld.com (Kenny Cockburn)
Date: Fri Jun  2 16:42:21 2006
Subject: [stringtemplate-interest] Problem with IEnumerator collections
	(c#2.3b7 )
Message-ID: <4480CF92.2010301@ntlworld.com>

.......

a) Obvious fix: Reset() the enumerator after testing. This will still behave
incorrectly if the current position in the iterator is significant.
b) Ugly fix: Wrap *all* enumerator attributes to ensure consistent
behaviour.
c) Simplest fix: Restrict $if(enumerator)$ to testing object existense (i.e.
non-null) for enumerators.

I'm firmly in the (c) camp. What do you think?

I have an other alternative that should solve the problem

// the following code would result in no change of the Enumerator  
try 
{
    ((IEnumerator)a).current ;
    // We must have a members in the list 
    return true ;
}
catch ( InvalidOperationException e )
{
    // can only be at start of list ;
    Boolean res  = ((IEnumerator)a).MatchNext() ;
    if ( res ) 
    {
        // put it back to start of list 
       ((IEnumerator)a).Rest() ;
    }
}



From Kunle_Odutola at hotmail.com  Fri Jun  2 17:11:17 2006
From: Kunle_Odutola at hotmail.com (Kunle Odutola)
Date: Fri Jun  2 16:53:37 2006
Subject: [stringtemplate-interest] Problem with IEnumerator
	collections(c#2.3b7 )
References: <4480CF92.2010301@ntlworld.com>
Message-ID: <BAY101-DAV11E12FE0DA613FD4B2B49B81910@phx.gbl>

Hi Kenny,

> I have an other alternative that should solve the problem
>
> // the following code would result in no change of the Enumerator
> try
> {
>     ((IEnumerator)a).current ;
>     // We must have a members in the list
>     return true ;
> }
> catch ( InvalidOperationException e )
> {
>     // can only be at start of list ;

// MatchNext() would only throw too until we Reset()
((IEnumerator)a).Reset() ;

>     Boolean res  = ((IEnumerator)a).MatchNext() ;
>     if ( res )
>     {
>         // put it back to start of list
>        ((IEnumerator)a).Rest() ;
>     }
> }

That's a nice variant of (a). There's a cost to setting up the exception
context but, I'll pop it into ST#. The enumerator testing isn't a
performance hotspot. I think you missed a Reset() call above though.

Thanks


Kunle
From Kunle_Odutola at hotmail.com  Fri Jun  2 17:47:27 2006
From: Kunle_Odutola at hotmail.com (Kunle Odutola)
Date: Fri Jun  2 17:29:56 2006
Subject: [stringtemplate-interest] Problem with
	IEnumeratorcollections(c#2.3b7 )
References: <4480CF92.2010301@ntlworld.com>
	<BAY101-DAV11E12FE0DA613FD4B2B49B81910@phx.gbl>
Message-ID: <BAY101-DAV814EC651F9E02F15978E581960@phx.gbl>

Hi,

Just correcting a few brainfarts:

// the following code would result in no change of the Enumerator
try
{
     ((IEnumerator)a).current ;
     // We must have a members in the list
     return true ;
 }
 catch ( InvalidOperationException e )
 {
     // We are at start of list (or lumbered with an invalid enumerator)
    try
    {
        if ( ((IEnumerator)a).MoveNext() )
        {
            // put it back to start of list
            ((IEnumerator)a).Reset() ;
            return true;
    }
    catch (InvalidOperationException)
    {
        // lumbered with a dead duck
    }
 }

Kunle
From kenny.cockburn at ntlworld.com  Sat Jun  3 09:46:19 2006
From: kenny.cockburn at ntlworld.com (Kenny Cockburn)
Date: Sat Jun  3 09:34:51 2006
Subject: [stringtemplate-interest] More Issues with Collections
Message-ID: <4481BCDB.9080101@ntlworld.com>

Hi,

I thave found what I think are problems with IEnumerator

1. IEnumerator does not call rest() after the collection has finished 
the iteration
2.IEnumerator First() works but rest() call misses a row in the collection


here is the code to show both problems :

        static void Main()
        {

            string simpleIfTest = @"
group TestIEnum ;

Action(Arg) ::=<<
iterate 1
$Arg:{X=$it$ # }$
----                                                    /
iterate 2
$Arg:{X=$it$ # }$
----
 >>
ActionFirstRest(Arg) ::=<<

First Rest Tests
iterate 1
First
$first(Arg):{X=$it$ # }$
Rest
$rest(Arg):{X=$it$ # }$
----                                                    /
iterate 2
First
$first(Arg):{X=$it$ # }$
Rest
$rest(Arg):{X=$it$ # }$
----

 >>
";
            StringTemplateGroup stg = new StringTemplateGroup(new 
StringReader(simpleIfTest), typeof(DefaultTemplateLexer));
            int[] myIntArray = new int[5] { 1, 2, 3, 4, 5 };
           
            System.Console.WriteLine("Run Test with simple Array");
            StringTemplate sta3 = stg.GetInstanceOf("Action");
            sta3.SetAttribute("Arg", myIntArray);
            System.Console.WriteLine(sta3.ToString());


            System.Console.WriteLine("Run Test with type only supporting 
IEnumerator");
            sta3 = stg.GetInstanceOf("Action");
            sta3.SetAttribute("Arg", myIntArray.GetEnumerator() );
            System.Console.WriteLine(sta3.ToString());

            System.Console.WriteLine("Run First Rest Test with simple 
Array");
            sta3 = stg.GetInstanceOf("ActionFirstRest");
            sta3.SetAttribute("Arg", myIntArray);
            System.Console.WriteLine(sta3.ToString());


            System.Console.WriteLine("Run First Rest Test with type only 
supporting IEnumerator");
            sta3 = stg.GetInstanceOf("ActionFirstRest");
            sta3.SetAttribute("Arg", myIntArray.GetEnumerator());
            System.Console.WriteLine(sta3.ToString());

        
        }

From parrt at cs.usfca.edu  Sat Jun  3 15:17:16 2006
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sat Jun  3 15:17:54 2006
Subject: [stringtemplate-interest] dealing with empty list values
Message-ID: <8393F343-3E6E-4A21-A207-631733A0065C@cs.usfca.edu>

Howdy,

Imagine a list of strings.  Some are null.  You are generating code  
and you want

String[] a = {
   "abc",
   "",
   "def",
   "",
   "",
};

where the "" values are there when the list element is null.   
Currently ST skips these values and you have no chance to insert "".   
You must alter the data to have "".  This is not so bad UNLESS you  
have a List<List<int>>, for example, and the strings are built by ST  
not by the model.

Any ideas how we can alter the semantics of ST to allow both skpping  
and not skipping of null values in an iteration?  Another option on  
the <data; noskip> expression?

Ter
From kenny.cockburn at ntlworld.com  Sun Jun  4 09:54:06 2006
From: kenny.cockburn at ntlworld.com (Kenny Cockburn)
Date: Sun Jun  4 09:42:38 2006
Subject: [stringtemplate-interest] dealing with empty list values
Message-ID: <4483102E.4060308@ntlworld.com>

Hi,

Here are my thoughts

as a newbie to ST I would have assumed that I would have got ALL members 
of the list and it was my responsibility to check for a null member

 I like the 'noskip' option on a list iterator  but would like to add a 
( Global or Instance )  property  to a StringTemplateGroup to indicate 
wither it was to skip or not to skip null members of a list this makes 
it  the responsibility of the invoker to decide the default behavior but 
it would require  both a 'nopskip' and 'skip' option on the iterator.


From parrt at cs.usfca.edu  Mon Jun  5 11:57:24 2006
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon Jun  5 11:57:55 2006
Subject: [stringtemplate-interest] dealing with empty list values
In-Reply-To: <4483102E.4060308@ntlworld.com>
References: <4483102E.4060308@ntlworld.com>
Message-ID: <D4EDEF38-86AD-42C2-B382-020CF073676D@cs.usfca.edu>


On Jun 4, 2006, at 9:54 AM, Kenny Cockburn wrote:

> Hi,
>
> Here are my thoughts
>
> as a newbie to ST I would have assumed that I would have got ALL  
> members of the list and it was my responsibility to check for a  
> null member

Hi Kenny,

Well, that is not the ST way I think.  For example,

$data$

prints nothing instead of null when it's missing.  No need to test  
for null.  Further, the following prints nothing upon null list

$names:{n| <i>$n$</i>}$

It works if there are 0, 1, or n values.

> I like the 'noskip' option on a list iterator  but would like to  
> add a ( Global or Instance )  property  to a StringTemplateGroup to  
> indicate wither it was to skip or not to skip null members of a  
> list this makes it  the responsibility of the invoker to decide the  
> default behavior but it would require  both a 'nopskip' and 'skip'  
> option on the iterator.

Yep, i'll have to think about this.
Ter
From Ulf.Dreyer at de.bosch.com  Tue Jun  6 04:06:01 2006
From: Ulf.Dreyer at de.bosch.com (Dreyer Ulf (CR/APA3))
Date: Tue Jun  6 04:06:10 2006
Subject: [stringtemplate-interest] Template-Operator []
Message-ID: <19D19E1AA3C5154D85A43D38808E48AB7116B6@fe-mail29.de.bosch.com>

Hi!

    The [] operator in a template concatenates 2 lists (enumerables).
    so that  
    A = [1,2,3]
    B = [a,b,c]
    $[A,B]$  = [1,2,3,a,b,c]

    is there a way to get the following list out of A and B?
    [ [1,2,3] , [a,b,c] ]


Thanks,

Ulf

    

-- 
Dipl. Inf. Ulf Dreyer
Robert Bosch GmbH
Zentralbereich Forschung und Vorausentwicklung
Software und Systemengineering in der Fertigungsautomatisierung CR/APA3
Postfach 30 02 40  D-70442 Stuttgart
Tel.: 0711/811- 34365
Fax:  0711/811-518 34365
eMail: ulf.dreyer@de.bosch.com

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org:8080/pipermail/stringtemplate-interest/attachments/20060606/d290001c/attachment.html
From parrt at cs.usfca.edu  Tue Jun  6 11:32:47 2006
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue Jun  6 11:33:17 2006
Subject: [stringtemplate-interest] Template-Operator []
In-Reply-To: <19D19E1AA3C5154D85A43D38808E48AB7116B6@fe-mail29.de.bosch.com>
References: <19D19E1AA3C5154D85A43D38808E48AB7116B6@fe-mail29.de.bosch.com>
Message-ID: <AFEFAC1D-F0DB-489B-AAFC-76D0C25F0301@cs.usfca.edu>


On Jun 6, 2006, at 4:06 AM, Dreyer Ulf (CR/APA3) wrote:

> Hi!
>
>     The [] operator in a template concatenates 2 lists (enumerables).
>     so that
>     A = [1,2,3]
>     B = [a,b,c]
>     $[A,B]$  = [1,2,3,a,b,c]
>
>     is there a way to get the following list out of A and B?
>     [ [1,2,3] , [a,b,c] ]
Hi.  good question.  Hmmm...not sure.  That operator really needs to  
flatten the lists.  Can you give an example usage?

Ter
From anton.tagunov at umail.ru  Wed Jun  7 00:17:01 2006
From: anton.tagunov at umail.ru (Anton Tagunov)
Date: Wed Jun  7 00:17:05 2006
Subject: [stringtemplate-interest] [java] Padding again
Message-ID: <web-680112007@umail.ru>

Hello

multivalued attribute, need to pad each value with spaces
so that all become equal length on output.

Where to do this: on java or ST side?

thanx in advance
Anton Tagunov
From Ulf.Dreyer at de.bosch.com  Wed Jun  7 00:31:24 2006
From: Ulf.Dreyer at de.bosch.com (Dreyer Ulf (CR/APA3))
Date: Wed Jun  7 00:31:28 2006
Subject: AW: [stringtemplate-interest] Template-Operator []
In-Reply-To: <AFEFAC1D-F0DB-489B-AAFC-76D0C25F0301@cs.usfca.edu>
Message-ID: <19D19E1AA3C5154D85A43D38808E48AB7116B7@fe-mail29.de.bosch.com>

Hi Terence!
 
> >     The [] operator in a template concatenates 2 lists 
> (enumerables).
> >     so that
> >     A = [1,2,3]
> >     B = [a,b,c]
> >     $[A,B]$  = [1,2,3,a,b,c]
> >
> >     is there a way to get the following list out of A and B?
> >     [ [1,2,3] , [a,b,c] ]

> Hi.  good question.  Hmmm...not sure.  
> That operator really needs to  flatten the lists.  
> Can you give an example usage?

Ok, You got me.
I can think of examples but they all can be solved in a 
different way. 
One example would be as follows :

NumberedList(List) ::=<<
List $i$: $List;separator=(";")$ $\n$
>>

[...]
$[listA,listB]:NumberedList()$
[...]
The above "enumerates" lists one level below of what I would
think.

This would be ok though, if [[listA],[listB]] would work that
way. But it can not because the []-Operator has to dereference all 
elements within.

But as I can avoid all of those instances at the moment it is
not that important.

Another thing I noticed is that first() and rest() functions
can not be combined. (as in  first(rest(someList)))
Is this intentional?


Thanks,

Ulf
From anton.tagunov at umail.ru  Wed Jun  7 00:35:11 2006
From: anton.tagunov at umail.ru (Anton Tagunov)
Date: Wed Jun  7 00:35:14 2006
Subject: [stringtemplate-interest] :html(), :url(),
	applying Java function from template
Message-ID: <web-680123401@umail.ru>

Hello gentlemen, makes sense?

    link(href) ::= "<a href='$href:url()$'>$href:html()</a>"

1) is it possible to write html() and url() encoding functions in pure ST at all?
2) would be grand to write html() and url() in Java and hook into ST!

     C'on, we've already got a functional language.
     Now we need to hook Java functions into it.
     Granted, side effects would be forbidden.

Anton Tagunov

P.S. Example adapted from http://etl.i-want-a-pony.com/doc/etl.html



From Andrew.Goodnough at wicourts.gov  Wed Jun  7 05:39:40 2006
From: Andrew.Goodnough at wicourts.gov (Andrew Goodnough)
Date: Wed Jun  7 05:39:59 2006
Subject: [stringtemplate-interest] :html(), :url(), applying Java
	function from template
In-Reply-To: <web-680123401@umail.ru>
References: <web-680123401@umail.ru>
Message-ID: <448682BC.954F.0081.0@wicourts.gov>

1) Not possible in pure ST (not desirable, either).
2) Already possible.  If you change the colon to a dot you can call a
method on the JavaBean.

link(href) ::= "<a href='$href.url()$'>$href.html()</a>"

In your example you set the "href" parameter to your Href bean, which
has methods getUrl() and getHtml() which return an encoded string.

Andy

>>> On Wed, Jun 7, 2006 at  2:35 am, in message
<web-680123401@umail.ru>, "Anton
Tagunov" <anton.tagunov@umail.ru> wrote: 
> Hello gentlemen, makes sense?
> 
>     link(href) ::= "<a href='$href:url()$'>$href:html()</a>"
> 
> 1) is it possible to write html() and url() encoding functions in
pure ST at 
> all?
> 2) would be grand to write html() and url() in Java and hook into
ST!
> 
>      C'on, we've already got a functional language.
>      Now we need to hook Java functions into it.
>      Granted, side effects would be forbidden.
> 
> Anton Tagunov
> 
> P.S. Example adapted from http://etl.i- want- a-
pony.com/doc/etl.html
> 
> 
> 
> _______________________________________________
> stringtemplate- interest mailing list
> stringtemplate- interest@antlr.org
> http://www.antlr.org:8080/mailman/listinfo/stringtemplate- interest

From parrt at cs.usfca.edu  Wed Jun  7 10:56:54 2006
From: parrt at cs.usfca.edu (Terence Parr)
Date: Wed Jun  7 10:57:17 2006
Subject: [stringtemplate-interest] [java] Padding again
In-Reply-To: <web-680112007@umail.ru>
References: <web-680112007@umail.ru>
Message-ID: <B6266161-E523-479F-A2D4-5F5AA8C131FA@cs.usfca.edu>


On Jun 7, 2006, at 12:17 AM, Anton Tagunov wrote:

> Hello
>
> multivalued attribute, need to pad each value with spaces
> so that all become equal length on output.
>
> Where to do this: on java or ST side?

For now, you'd have to do on the Java side.

We could use a <fill()> built-in function that would fill until the  
end of line.

Ter

From parrt at cs.usfca.edu  Wed Jun  7 10:57:45 2006
From: parrt at cs.usfca.edu (Terence Parr)
Date: Wed Jun  7 10:58:07 2006
Subject: AW: [stringtemplate-interest] Template-Operator []
In-Reply-To: <19D19E1AA3C5154D85A43D38808E48AB7116B7@fe-mail29.de.bosch.com>
References: <19D19E1AA3C5154D85A43D38808E48AB7116B7@fe-mail29.de.bosch.com>
Message-ID: <E4101E81-4EA0-4B5C-8517-B4CC6DBFA000@cs.usfca.edu>


On Jun 7, 2006, at 12:31 AM, Dreyer Ulf (CR/APA3) wrote:
> Another thing I noticed is that first() and rest() functions
> can not be combined. (as in  first(rest(someList)))
> Is this intentional?

That should work.  If not it is a bug.  You sure?

Ter

From parrt at cs.usfca.edu  Wed Jun  7 10:59:40 2006
From: parrt at cs.usfca.edu (Terence Parr)
Date: Wed Jun  7 11:00:06 2006
Subject: [stringtemplate-interest] :html(), :url(),
	applying Java function from template
In-Reply-To: <web-680123401@umail.ru>
References: <web-680123401@umail.ru>
Message-ID: <6F2D5989-C350-496A-9050-D40689F978D9@cs.usfca.edu>


On Jun 7, 2006, at 12:35 AM, Anton Tagunov wrote:

> Hello gentlemen, makes sense?
>
>     link(href) ::= "<a href='$href:url()$'>$href:html()</a>"
>
> 1) is it possible to write html() and url() encoding functions in  
> pure ST at all?
> 2) would be grand to write html() and url() in Java and hook into ST!
>
>      C'on, we've already got a functional language.
>      Now we need to hook Java functions into it.
>      Granted, side effects would be forbidden.

Hi.  Actually the philosophy of ST is "impossible" is better than  
"forbidden".  Otherwise, it would be just another template engine.

Ter
From parrt at cs.usfca.edu  Wed Jun  7 13:20:49 2006
From: parrt at cs.usfca.edu (Terence Parr)
Date: Wed Jun  7 14:35:16 2006
Subject: [stringtemplate-interest] PyStringTemplate-2.1.1 released
Message-ID: <815303D5-73A1-4D4C-B264-34FE524C9FB8@cs.usfca.edu>

Hi, Marq Kole has released an update to PyStringTemplate, 2.1.1 that  
fixes a number of goodies.

http://www.antlr.org/download/PyStringTemplate-2.1.1.tar.gz

Ter
From Ulf.Dreyer at de.bosch.com  Wed Jun  7 22:38:58 2006
From: Ulf.Dreyer at de.bosch.com (Dreyer Ulf (CR/APA3))
Date: Wed Jun  7 22:39:05 2006
Subject: AW: AW: [stringtemplate-interest] Template-Operator []
In-Reply-To: <E4101E81-4EA0-4B5C-8517-B4CC6DBFA000@cs.usfca.edu>
Message-ID: <19D19E1AA3C5154D85A43D38808E48AB7116BB@fe-mail29.de.bosch.com>

Hi Terence
 
> On Jun 7, 2006, at 12:31 AM, Dreyer Ulf (CR/APA3) wrote:
> > Another thing I noticed is that first() and rest() functions
> > can not be combined. (as in  first(rest(someList)))
> > Is this intentional?
> 
> That should work.  If not it is a bug.  You sure?


Yep - it was a bug.
The all too common "think before you post"-bug (or maybe DEBUG before
you post)

I tried the above construct in the following context
[first(rest(someList))] and expected a list of one element (related to
my last post)
therefore my other check  [rest(someList)] DID work  *ARGGHHHHHH*

How about an enhancement so that maybe (a) withing []
prevents enumeretion of a.  
i.e. [(a),(b),a] yields  [a,b,a.1,a.2,a.3...]
(for some very distant future release...)

I will now go to sit in a corner and  try not to bother you for 
some time ;)


Bye,

Ulf
From anton.tagunov at umail.ru  Thu Jun  8 02:03:06 2006
From: anton.tagunov at umail.ru (Anton Tagunov)
Date: Thu Jun  8 02:34:06 2006
Subject: [stringtemplate-interest] native (java) templates
Message-ID: <web-680688097@umail.ru>

Guys, not a committer, still..

Anton Tagunov>          link(href) ::= "<a href='$href.url()$'>$href.html()</a>"

Andrew Goodnough>  In your example you set the "href" parameter to your
Andrew Goodnough>  Href bean, which has methods getUrl() and getHtml() which return an encoded string.

Sure. But we need dozen string .html() encoded.

Terence Parr> We could use a <fill()> built-in function that would fill until the end of line.

Nice. But desperate to forsee every need like this.

atagunov>      we've got a functional language.
atagunov>      we need to hook Java functions
atagunov>      side effects would be forbidden.

Terence Parr> "impossible" is better than "forbidden"

Granted. But XYZ() methods are already "possible".
Why not go for java transformation functions?

Regards, Anton Tagunov
From anton.tagunov at umail.ru  Thu Jun  8 03:02:20 2006
From: anton.tagunov at umail.ru (Anton Tagunov)
Date: Thu Jun  8 03:33:25 2006
Subject: [stringtemplate-interest] followup: native (java) templates
Message-ID: <web-680717179@umail.ru>

typo, wanted to write:

getXYZ() methods are already "possible".
Why not go for java transformation functions?
From jgray at siberra.com  Thu Jun  8 09:51:25 2006
From: jgray at siberra.com (Jeremy Gray)
Date: Thu Jun  8 09:51:32 2006
Subject: [stringtemplate-interest] followup: native (java) templates
Message-ID: <9E60A7FA5322F841856BE6E670F3E7B615641BCB@CPREXN020-EVS.itdmis02.futureshop.com>

I'm only familiar with the C# version of ST, but, unless I'm mistaken,
the Java version of ST should have the same support for attribute
renderers. My company has found this functionality to be great to work
with, and I think you'd find that the renderer approach works quite
nicely for the example that you've provided (and more).

Jeremy Gray

-----Original Message-----
From: stringtemplate-interest-bounces@antlr.org
[mailto:stringtemplate-interest-bounces@antlr.org] On Behalf Of Anton
Tagunov
Sent: Thursday, June 08, 2006 3:02 AM
To: stringtemplate-interest@antlr.org
Subject: [stringtemplate-interest] followup: native (java) templates

typo, wanted to write:

getXYZ() methods are already "possible".
Why not go for java transformation functions?
_______________________________________________
stringtemplate-interest mailing list
stringtemplate-interest@antlr.org
http://www.antlr.org:8080/mailman/listinfo/stringtemplate-interest


From parrt at cs.usfca.edu  Thu Jun  8 11:29:51 2006
From: parrt at cs.usfca.edu (Terence Parr)
Date: Thu Jun  8 11:30:13 2006
Subject: [stringtemplate-interest] followup: native (java) templates
In-Reply-To: <web-680717179@umail.ru>
References: <web-680717179@umail.ru>
Message-ID: <2223B209-225E-4AC6-A342-ABAA42038B49@cs.usfca.edu>


On Jun 8, 2006, at 3:02 AM, Anton Tagunov wrote:

> typo, wanted to write:
>
> getXYZ() methods are already "possible".
> Why not go for java transformation functions?

I am *strictly* enforcing this separation (with a few transgressions  
for practical purposes).  I will not   merely encourage separation  
like other engines...sorry.  Perhaps a few more interesting functions  
that are built-in, but no random java code.  Then you'll ask for  
multiple parameters, then if-conditionals...slippery slope as they  
say. ;)

I mean no disrespect, but when every other engine does what you want,  
why are you bothering with ST?

Ter
From parrt at cs.usfca.edu  Tue Jun 13 10:48:24 2006
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue Jun 13 10:48:24 2006
Subject: [stringtemplate-interest] ST output start/stop tags
Message-ID: <D174DB9E-4F3F-4099-9840-D29430B07050@cs.usfca.edu>

Hi,

Per a previous discussion, when trying to answer "which template  
generated that text" it would be nice to have each template spit out  
a start/stop tag (user-defined).  It works great...built it  
yesterday...you get:

<method><type>void</type> foo(<args>...</args>) { <body>...</body> }</ 
method>

or close...

I decided that each group would have

	public void emitTemplateStartDebugString(StringTemplate st,
											 StringTemplateWriter out)
		throws IOException
	{
		out.write("<"+st.getName()+">");
	}

	public void emitTemplateStopDebugString(StringTemplate st,
										    StringTemplateWriter out)
		throws IOException
	{
		out.write("</"+st.getName()+">");
	}

and each group would have a boolean

	public boolean debugTemplateOutput = false;

or sometihng that you could set per group.  For example, errors in  
antlr I don't want wrapped but the codegen i do want wrapped.

Does this make sense?  Only problem I have is that I ask for the file  
extension such as .java or .cpp from the code gen templates and it  
gives t.<fileExt>java</fileExt> when it tries to build a filename,  
but that is my special case.

Any comments on desired functionality?

Ter
From jimi at intersystems.com  Wed Jun 14 00:25:49 2006
From: jimi at intersystems.com (Jim Idle)
Date: Wed Jun 14 00:26:10 2006
Subject: [stringtemplate-interest] Re: [antlr-dev] ST output start/stop tags
In-Reply-To: <D174DB9E-4F3F-4099-9840-D29430B07050@cs.usfca.edu>
Message-ID: <C0B5869D.6D36%jimi@intersystems.com>

That would pretty much do it for me as I found that once I knew which
template had spat out which piece of code, the rest was easy from there.

On another note, there will be a need to spit out more than one header file
and perhaps extra C code (or other targets) for additionally features I
would like to add (such as perhaps auto generating a COM interface or .Net
or indeed anything at all really.

Do you have any strong preferences for the way to do this. My thought is
that the codegen target .java file could just call any additional templates
it wants when it is called to generate the header file and the target file.
However, what method do you wish to adopt (as it should be orthogonal across
all codegens if possible) for signifying that 'extras' are requested from
codegen. I think that it should be some construct in the grammar, and it
probably isn't options. There could be new @ sections etc.

Before just making something up though, how about you suggest something and
unless I can find something wrong with it, I will just use it. So, let's say
that the C codegen has an option to produce an additional .c and .h file for
some option, such as foobar. What do you think?

Jim


On 6/13/06 7:48 PM, "Terence Parr" <parrt@cs.usfca.edu> wrote:

> Hi,
> 
> Per a previous discussion, when trying to answer "which template
> generated that text" it would be nice to have each template spit out
> a start/stop tag (user-defined).  It works great...built it
> yesterday...you get:
> 
> <method><type>void</type> foo(<args>...</args>) { <body>...</body> }</
> method>
> 
> or close...
> 
> I decided that each group would have
> 
> public void emitTemplateStartDebugString(StringTemplate st,
> StringTemplateWriter out)
> throws IOException
> {
> out.write("<"+st.getName()+">");
> }
> 
> public void emitTemplateStopDebugString(StringTemplate st,
>    StringTemplateWriter out)
> throws IOException
> {
> out.write("</"+st.getName()+">");
> }
> 
> and each group would have a boolean
> 
> public boolean debugTemplateOutput = false;
> 
> or sometihng that you could set per group.  For example, errors in
> antlr I don't want wrapped but the codegen i do want wrapped.
> 
> Does this make sense?  Only problem I have is that I ask for the file
> extension such as .java or .cpp from the code gen templates and it
> gives t.<fileExt>java</fileExt> when it tries to build a filename,
> but that is my special case.
> 
> Any comments on desired functionality?
> 
> Ter
> _______________________________________________
> antlr-dev mailing list
> antlr-dev@antlr.org
> http://www.antlr.org:8080/mailman/listinfo/antlr-dev
> 


From parrt at cs.usfca.edu  Wed Jun 14 09:44:26 2006
From: parrt at cs.usfca.edu (Terence Parr)
Date: Wed Jun 14 09:44:23 2006
Subject: [stringtemplate-interest] Re: [antlr-dev] ST output start/stop tags
In-Reply-To: <C0B5869D.6D36%jimi@intersystems.com>
References: <C0B5869D.6D36%jimi@intersystems.com>
Message-ID: <F3CF82E9-045D-4AAA-BCDB-E5FE9CB9E83D@cs.usfca.edu>


On Jun 14, 2006, at 12:25 AM, Jim Idle wrote:

> That would pretty much do it for me as I found that once I knew which
> template had spat out which piece of code, the rest was easy from  
> there.

Yeah, it works pretty well.

> On another note, there will be a need to spit out more than one  
> header file
> and perhaps extra C code (or other targets) for additionally  
> features I
> would like to add (such as perhaps auto generating a COM interface  
> or .Net
> or indeed anything at all really.

Crap...not sure how to handle that...i special case the .hpp file at  
this point.

> Do you have any strong preferences for the way to do this. My  
> thought is
> that the codegen target .java file could just call any additional  
> templates
> it wants when it is called to generate the header file and the  
> target file.

As long as we can agree on the data they need, and which template  
names, it should work fine.

> However, what method do you wish to adopt (as it should be  
> orthogonal across
> all codegens if possible) for signifying that 'extras' are  
> requested from
> codegen. I think that it should be some construct in the grammar,  
> and it
> probably isn't options. There could be new @ sections etc.

I like using the optional keyword:

optional
headerFile(LEXER, PARSER, TREE_PARSER, actionScope, actions, docComment,
            recognizer, name, tokens, tokenNames, scopes, rules,
	   cyclicDFADescriptors,
            bitsets, buildTemplate, profile, backtracking, synpreds,
            memoize, numRules, fileName, ANTLRVersion,  
generatedTimestamp);

Your Target.java file can ask if headerFile is there

> Before just making something up though, how about you suggest  
> something and
> unless I can find something wrong with it, I will just use it. So,  
> let's say
> that the C codegen has an option to produce an additional .c and .h  
> file for
> some option, such as foobar. What do you think?

Seems ok to me...Currently Target superclass has:

	protected void genRecognizerFile(Tool tool,
									CodeGenerator generator,
									Grammar grammar,
									StringTemplate outputFileST)
		throws IOException
	{
		String fileName = generator.getRecognizerFileName();
		generator.write(outputFileST, fileName);
	}

	protected void genRecognizerHeaderFile(Tool tool,
										   CodeGenerator generator,
										   Grammar grammar,
										   StringTemplate headerFileST)
		throws IOException
	{
		// no header file by default
	}

Perhaps we should call that 2nd one: genAncillaryFiles() or something.

Ter
From jimi at intersystems.com  Wed Jun 14 23:21:10 2006
From: jimi at intersystems.com (Jim Idle)
Date: Wed Jun 14 23:21:30 2006
Subject: [stringtemplate-interest] Re: [antlr-dev] ST output start/stop tags
In-Reply-To: <F3CF82E9-045D-4AAA-BCDB-E5FE9CB9E83D@cs.usfca.edu>
Message-ID: <C0B6C8F6.6E5C%jimi@intersystems.com>




On 6/14/06 6:44 PM, "Terence Parr" <parrt@cs.usfca.edu> wrote:

> 
> On Jun 14, 2006, at 12:25 AM, Jim Idle wrote:
> 
> Your Target.java file can ask if headerFile is there
> 
>> Before just making something up though, how about you suggest
>> something and
>> unless I can find something wrong with it, I will just use it. So,
>> let's say
>> that the C codegen has an option to produce an additional .c and .h
>> file for
>> some option, such as foobar. What do you think?
> 
> Seems ok to me...Currently Target superclass has:
> 
> protected void genRecognizerFile(Tool tool,
> CodeGenerator generator,
> Grammar grammar,
> StringTemplate outputFileST)
> throws IOException
> {
> String fileName = generator.getRecognizerFileName();
> generator.write(outputFileST, fileName);
> }
> 
> protected void genRecognizerHeaderFile(Tool tool,
>   CodeGenerator generator,
>   Grammar grammar,
>   StringTemplate headerFileST)
> throws IOException
> {
> // no header file by default
> }
> 
> Perhaps we should call that 2nd one: genAncillaryFiles() or something.
> 

Might make more sense as I suppose it isn't always header files in every
target and so on, though it is of course not exactly top of the list of
things to do ;-)

Jim


From parrt at cs.usfca.edu  Thu Jun 15 09:14:15 2006
From: parrt at cs.usfca.edu (Terence Parr)
Date: Thu Jun 15 09:14:22 2006
Subject: [stringtemplate-interest] out of email contact til Monday AM
Message-ID: <94B0EEF2-42C9-411E-A55C-E66C0D954FF0@cs.usfca.edu>

Hi,

I'm off for the weekend in a few hours with no email contact...should  
be back in the saddle on Monday AM.

Terence
From sean.stquentin at gmail.com  Thu Jun 15 19:55:14 2006
From: sean.stquentin at gmail.com (Sean St. Quentin)
Date: Thu Jun 15 19:55:18 2006
Subject: [stringtemplate-interest] Renderer "modes"
Message-ID: <139cf3ed0606151955y34421f6do73932fd80e5d75@mail.gmail.com>

Firstly, thanks everybody for ST, I love it.

I have a suggestion/question about the renderers. I'm currently facing a
situation where I need to have an attribute in both HTML formatting and
Javascript formatting, eg:

<a onclick="DoSomething('$it.Name.FullName$')>$it.Name.LastName$,
$it.Name.FirstName$</a>

And its encountering problems when the name contains a single quote, eg:
Adrian O'Conner.

Without knowing of an easy way to fix this (by easy I mean not having two
arrays of preformatted information being sent to the view, which seems kinda
wrong), I was thinking about having rendering modes for an
AttributeRenderer.

So I would be able to do something like this (ignoring the syntax I've
used):

<a onclick="DoSomething('$it.Name.FullName;
format="js"$'>$it.Name.LastName$, $it.Name.FirstName$</a>

with the attribute renderer for a string being (C#):

class StringRenderer : IAttributeRenderer
{
    public string ToString(object data) { return
HtmlTools.EncodeHtml((string)data);
}

    [Format("js")]
    public string AsJs (object data) { return HtmlTools.EncodeJs((string)data);
}
}

Is there something like this already available in ST?

If not, is it possible? It doesn't seem (to me) to breach the MVCR
principals, as we're not executing arbitary code, rather making the
renderers a little more flexable.

Any thoughts?
Cheers, Sean.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org:8080/pipermail/stringtemplate-interest/attachments/20060616/e4c54b28/attachment.html
From jgray at siberra.com  Fri Jun 16 09:10:08 2006
From: jgray at siberra.com (Jeremy Gray)
Date: Fri Jun 16 09:10:18 2006
Subject: [stringtemplate-interest] Renderer "modes"
Message-ID: <9E60A7FA5322F841856BE6E670F3E7B615AA0461@CPREXN020-EVS.itdmis02.futureshop.com>

This kind of functionality sounds pretty good to me, and I wouldn't be
opposed to the syntax and attribute you're suggesting. This would prove
especially useful in cases where, by example, we need to format various
DateTime instances in different ways in a single template run (or
percentages different from other fractional numbers, etc.)

 

Now, I could easily see someone then suggesting that ST support
something akin to:

 

$order.OrderDate; format="D"$

 

where:

 

class DateTimeRenderer : IAttributeRenderer
{
    public string ToString(object data, string format) { return
((DateTime)data).ToString(format); }
}

 

but, to be clear, I only raise this example in order to cut it off at
the pass, as it would start us down a slippery slope that Terrence would
surely want to avoid and that I, as much as I like the possibilities it
would present as a programmer geek, also would want to avoid.

 

Jeremy

________________________________

From: stringtemplate-interest-bounces@antlr.org
[mailto:stringtemplate-interest-bounces@antlr.org] On Behalf Of Sean St.
Quentin
Sent: Thursday, June 15, 2006 7:55 PM
To: stringtemplate-interest@antlr.org
Subject: [stringtemplate-interest] Renderer "modes"

 

Firstly, thanks everybody for ST, I love it. 

I have a suggestion/question about the renderers. I'm currently facing a
situation where I need to have an attribute in both HTML formatting and
Javascript formatting, eg: 

<a onclick="DoSomething('$it.Name.FullName$')>$it.Name.LastName$,
$it.Name.FirstName$</a>

And its encountering problems when the name contains a single quote, eg:
Adrian O'Conner.

Without knowing of an easy way to fix this (by easy I mean not having
two arrays of preformatted information being sent to the view, which
seems kinda wrong), I was thinking about having rendering modes for an
AttributeRenderer. 

So I would be able to do something like this (ignoring the syntax I've
used):

<a onclick="DoSomething('$it.Name.FullName;
format="js"$'>$it.Name.LastName$, $it.Name.FirstName$</a> 

with the attribute renderer for a string being (C#):

class StringRenderer : IAttributeRenderer
{
    public string ToString(object data) { return
HtmlTools.EncodeHtml((string)data); }

    [Format("js")] 
    public string AsJs (object data) { return
HtmlTools.EncodeJs((string)data); }
}

Is there something like this already available in ST? 

If not, is it possible? It doesn't seem (to me) to breach the MVCR
principals, as we're not executing arbitary code, rather making the
renderers a little more flexable. 

Any thoughts?
Cheers, Sean.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org:8080/pipermail/stringtemplate-interest/attachments/20060616/a1ec5fbb/attachment.html
From sean.stquentin at gmail.com  Mon Jun 19 04:32:13 2006
From: sean.stquentin at gmail.com (Sean St. Quentin)
Date: Mon Jun 19 04:32:16 2006
Subject: [stringtemplate-interest] Renderer "modes"
In-Reply-To: <9E60A7FA5322F841856BE6E670F3E7B615AA0461@CPREXN020-EVS.itdmis02.futureshop.com>
References: <9E60A7FA5322F841856BE6E670F3E7B615AA0461@CPREXN020-EVS.itdmis02.futureshop.com>
Message-ID: <139cf3ed0606190432o16810ff0h74653dd7b36f1029@mail.gmail.com>

Cheers Jeremy, I agree.

My idea was not to have the format as an argument for ToString, as this
seems to encourage all sorts of potential bad things, even passing a basic
script to the renderer, eg $value;format="references++"$ or whatever.

I would prefer to have the format as a method, as I like the idea of ST
being in control of how to call the renderer - in the process making the
renderers more simple. ST also then knows what formats the renderer can
support, and if the format is not supported by the renderer, ST can call the
default ToString method, or even print an error message that the format is
not supported.

It also makes Renderer inheritance a bit more logical, and its not a
breaking change.

Sean.


On 17/06/06, Jeremy Gray <jgray@siberra.com > wrote:
>
>  This kind of functionality sounds pretty good to me, and I wouldn't be
> opposed to the syntax and attribute you're suggesting. This would prove
> especially useful in cases where, by example, we need to format various
> DateTime instances in different ways in a single template run (or
> percentages different from other fractional numbers, etc.)
>
>
>
> Now, I could easily see someone then suggesting that ST support something
> akin to:
>
>
>
> $order.OrderDate; format="D"$
>
>
>
> where:
>
>
>
> class DateTimeRenderer : IAttributeRenderer
> {
>     public string ToString(object data, string format) { return
> ((DateTime)data).ToString(format); }
> }
>
>
>
> but, to be clear, *I only raise this example in order to cut it off at the
> pass*, as it would start us down a slippery slope that Terrence would
> surely want to avoid and that I, as much as I like the possibilities it
> would present as a programmer geek, also would want to avoid.
>
>
>
> Jeremy
>  ------------------------------
>
> *From:* stringtemplate-interest-bounces@antlr.org [mailto:
> stringtemplate-interest-bounces@antlr.org] * On Behalf Of *Sean St.
> Quentin
> *Sent:* Thursday, June 15, 2006 7:55 PM
> *To:* stringtemplate-interest@antlr.org
> *Subject:* [stringtemplate-interest] Renderer "modes"
>
>
>
> Firstly, thanks everybody for ST, I love it.
>
> I have a suggestion/question about the renderers. I'm currently facing a
> situation where I need to have an attribute in both HTML formatting and
> Javascript formatting, eg:
>
> <a onclick="DoSomething('$it.Name.FullName$')>$it.Name.LastName$,
> $it.Name.FirstName$</a>
>
> And its encountering problems when the name contains a single quote, eg:
> Adrian O'Conner.
>
> Without knowing of an easy way to fix this (by easy I mean not having two
> arrays of preformatted information being sent to the view, which seems kinda
> wrong), I was thinking about having rendering modes for an
> AttributeRenderer.
>
> So I would be able to do something like this (ignoring the syntax I've
> used):
>
> <a onclick="DoSomething('$it.Name.FullName;
> format="js"$'>$it.Name.LastName$, $it.Name.FirstName$</a>
>
> with the attribute renderer for a string being (C#):
>
> class StringRenderer : IAttributeRenderer
> {
>     public string ToString(object data) { return HtmlTools.EncodeHtml((string)data);
> }
>
>     [Format("js")]
>     public string AsJs (object data) { return HtmlTools.EncodeJs((string)data);
> }
> }
>
> Is there something like this already available in ST?
>
> If not, is it possible? It doesn't seem (to me) to breach the MVCR
> principals, as we're not executing arbitary code, rather making the
> renderers a little more flexable.
>
> Any thoughts?
> Cheers, Sean.
>
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest@antlr.org
> http://www.antlr.org:8080/mailman/listinfo/stringtemplate-interest
>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org:8080/pipermail/stringtemplate-interest/attachments/20060619/7c0b924d/attachment.html
From jgray at siberra.com  Mon Jun 19 09:09:12 2006
From: jgray at siberra.com (Jeremy Gray)
Date: Mon Jun 19 09:09:20 2006
Subject: [stringtemplate-interest] Renderer "modes"
Message-ID: <9E60A7FA5322F841856BE6E670F3E7B615BD96E0@CPREXN020-EVS.itdmis02.futureshop.com>

Exactly my thinking.

 

________________________________

From: stringtemplate-interest-bounces@antlr.org
[mailto:stringtemplate-interest-bounces@antlr.org] On Behalf Of Sean St.
Quentin
Sent: Monday, June 19, 2006 4:32 AM
To: stringtemplate-interest@antlr.org
Subject: Re: [stringtemplate-interest] Renderer "modes"

 

Cheers Jeremy, I agree.

My idea was not to have the format as an argument for ToString, as this
seems to encourage all sorts of potential bad things, even passing a
basic script to the renderer, eg $value;format="references++"$ or
whatever. 

I would prefer to have the format as a method, as I like the idea of ST
being in control of how to call the renderer - in the process making the
renderers more simple. ST also then knows what formats the renderer can
support, and if the format is not supported by the renderer, ST can call
the default ToString method, or even print an error message that the
format is not supported. 

It also makes Renderer inheritance a bit more logical, and its not a
breaking change.

Sean.



On 17/06/06, Jeremy Gray < jgray@siberra.com <mailto:jgray@siberra.com>
> wrote:

This kind of functionality sounds pretty good to me, and I wouldn't be
opposed to the syntax and attribute you're suggesting. This would prove
especially useful in cases where, by example, we need to format various
DateTime instances in different ways in a single template run (or
percentages different from other fractional numbers, etc.)

 

Now, I could easily see someone then suggesting that ST support
something akin to:

 

$order.OrderDate; format="D"$

 

where:

 

class DateTimeRenderer : IAttributeRenderer
{
    public string ToString(object data, string format) { return
((DateTime)data).ToString(format); }
}

 

but, to be clear, I only raise this example in order to cut it off at
the pass, as it would start us down a slippery slope that Terrence would
surely want to avoid and that I, as much as I like the possibilities it
would present as a programmer geek, also would want to avoid.

 

Jeremy

________________________________

From: stringtemplate-interest-bounces@antlr.org
[mailto:stringtemplate-interest-bounces@antlr.org] On Behalf Of Sean St.
Quentin
Sent: Thursday, June 15, 2006 7:55 PM
To: stringtemplate-interest@antlr.org
Subject: [stringtemplate-interest] Renderer "modes"

 

Firstly, thanks everybody for ST, I love it. 

I have a suggestion/question about the renderers. I'm currently facing a
situation where I need to have an attribute in both HTML formatting and
Javascript formatting, eg: 

<a onclick="DoSomething('$it.Name.FullName$')>$it.Name.LastName$,
$it.Name.FirstName$</a>

And its encountering problems when the name contains a single quote, eg:
Adrian O'Conner.

Without knowing of an easy way to fix this (by easy I mean not having
two arrays of preformatted information being sent to the view, which
seems kinda wrong), I was thinking about having rendering modes for an
AttributeRenderer. 

So I would be able to do something like this (ignoring the syntax I've
used):

<a onclick="DoSomething('$it.Name.FullName;
format="js"$'>$it.Name.LastName$, $it.Name.FirstName$</a> 

with the attribute renderer for a string being (C#):

class StringRenderer : IAttributeRenderer
{
    public string ToString(object data) { return
HtmlTools.EncodeHtml((string)data); }

    [Format("js")] 
    public string AsJs (object data) { return
HtmlTools.EncodeJs((string)data); }
}

Is there something like this already available in ST? 

If not, is it possible? It doesn't seem (to me) to breach the MVCR
principals, as we're not executing arbitary code, rather making the
renderers a little more flexable. 

Any thoughts?
Cheers, Sean.


_______________________________________________
stringtemplate-interest mailing list
stringtemplate-interest@antlr.org 
http://www.antlr.org:8080/mailman/listinfo/stringtemplate-interest 



 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org:8080/pipermail/stringtemplate-interest/attachments/20060619/77837e75/attachment-0001.html
From Kunle_Odutola at hotmail.com  Mon Jun 19 10:18:01 2006
From: Kunle_Odutola at hotmail.com (Kunle Odutola)
Date: Mon Jun 19 10:00:14 2006
Subject: [stringtemplate-interest] Renderer "modes"
References: <139cf3ed0606151955y34421f6do73932fd80e5d75@mail.gmail.com>
Message-ID: <BAY101-DAV3D416CA66FAD27B5F271C81860@phx.gbl>

Hi Sean,

> Without knowing of an easy way to fix this (by easy I mean not having two
> arrays of preformatted information being sent to the view, which seems
kinda
> wrong), I was thinking about having rendering modes for an
> AttributeRenderer.

Formatter ojects are currently the prescribed way. See the types in the
"Antlr.StringTemplate.Utils" namespace. You wrap each entry in your array.

> So I would be able to do something like this (ignoring the syntax I've
> used):
>
> <a onclick="DoSomething('$it.Name.FullName;
> format="js"$'>$it.Name.LastName$, $it.Name.FirstName$</a>
>
> with the attribute renderer for a string being (C#):
>
> class StringRenderer : IAttributeRenderer
> {
>     public string ToString(object data) { return
> HtmlTools.EncodeHtml((string)data);
> }
>
>     [Format("js")]
>     public string AsJs (object data) { return
HtmlTools.EncodeJs((string)data);
> }
> }
>
> Is there something like this already available in ST?

No. Am I right ti suspect you already have a patch?  ;-)

> If not, is it possible? It doesn't seem (to me) to breach the MVCR
> principals, as we're not executing arbitary code, rather making the
> renderers a little more flexable.

Perhaps. I wonder if formalizing the concept of Formatters would be a better
approach. Formatters expose arbitrary properties that ST templates can
already access directly. All that is needed is a way to compose a renderer
and a formatter before registering with ST. This would remove the
formatter-per-attribute association as well.

Simply combining the concepts (i.e. renderers exposing formatter-like
properties in addition to ToString) seems a little brittle. Can't articulate
why it feels brittle yet.


Kunle
From parrt at cs.usfca.edu  Mon Jun 19 10:14:36 2006
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon Jun 19 10:25:43 2006
Subject: [stringtemplate-interest] Renderer "modes"
In-Reply-To: <9E60A7FA5322F841856BE6E670F3E7B615AA0461@CPREXN020-EVS.itdmis02.futureshop.com>
References: <9E60A7FA5322F841856BE6E670F3E7B615AA0461@CPREXN020-EVS.itdmis02.futureshop.com>
Message-ID: <F0143500-E383-4546-8670-84A5E0D3B63E@cs.usfca.edu>

On Jun 16, 2006, at 9:10 AM, Jeremy Gray wrote:
> $order.OrderDate; format=?D?$
>
>
>
> where:
>
>
>
> class DateTimeRenderer : IAttributeRenderer
> {
>     public string ToString(object data, string format) { return  
> ((DateTime)data).ToString(format); }
> }
>
>
>
> but, to be clear, I only raise this example in order to cut it off  
> at the pass, as it would start us down a slippery slope that  
> Terrence would surely want to avoid and that I, as much as I like  
> the possibilities it would present as a programmer geek, also would  
> want to avoid.

Yup.  There are better ways to do this.  Please see my i18 and l18n  
paper at st.org :)

Ter
From jgray at siberra.com  Mon Jun 19 11:15:58 2006
From: jgray at siberra.com (Jeremy Gray)
Date: Mon Jun 19 11:16:04 2006
Subject: [stringtemplate-interest] Renderer "modes"
Message-ID: <9E60A7FA5322F841856BE6E670F3E7B615BD99C0@CPREXN020-EVS.itdmis02.futureshop.com>

I've read the paper (I think I've read through all of the ST paper
versions, presentation versions I can find, and its been quite an
experience watching them evolve over time :) but unless I missed
something it doesn't address the example brought up in my reply (that of
needing to, for example, format DateTime instances differently within
the same template). Can you point me in the right direction?

Jeremy

-----Original Message-----
From: stringtemplate-interest-bounces@antlr.org
[mailto:stringtemplate-interest-bounces@antlr.org] On Behalf Of Terence
Parr
Sent: Monday, June 19, 2006 10:15 AM
To: stringtemplate-interest
Subject: Re: [stringtemplate-interest] Renderer "modes"

--snip--
> but, to be clear, I only raise this example in order to cut it off  
> at the pass, as it would start us down a slippery slope that  
> Terrence would surely want to avoid and that I, as much as I like  
> the possibilities it would present as a programmer geek, also would  
> want to avoid.

Yup.  There are better ways to do this.  Please see my i18 and l18n  
paper at st.org :)



From parrt at cs.usfca.edu  Mon Jun 19 11:20:53 2006
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon Jun 19 11:20:29 2006
Subject: [stringtemplate-interest] Renderer "modes"
In-Reply-To: <9E60A7FA5322F841856BE6E670F3E7B615BD99C0@CPREXN020-EVS.itdmis02.futureshop.com>
References: <9E60A7FA5322F841856BE6E670F3E7B615BD99C0@CPREXN020-EVS.itdmis02.futureshop.com>
Message-ID: <9FF06051-D778-4A66-8003-4A97A062C32C@cs.usfca.edu>


On Jun 19, 2006, at 11:15 AM, Jeremy Gray wrote:

> I've read the paper (I think I've read through all of the ST paper
> versions, presentation versions I can find, and its been quite an
> experience watching them evolve over time :)

Yeah, it's been a long road to formalize all this stuff given that I  
have been cranking on ANTLR v3 at same time ;)

> but unless I missed
> something it doesn't address the example brought up in my reply  
> (that of
> needing to, for example, format DateTime instances differently within
> the same template). Can you point me in the right direction?

Sure.  Check section 4 at the end:

What happens when the designer needs dates to be some-
times long and sometimes short format? This case is also
easily handled without resorting to unrestricted code in the
template and without burdening the programmer with the
extra code needed to wrap all date attributes. The Date
class can be subclassed to provide property methods such
as getMedium() so that templates may reference $myDate$
to get the default rendering and $myDate.medium$ to get
a medium format. For any given type, the developer may
automatically provide augmented properties without hav-
ing to manually create instances of a Date subclass. The
setAttribute() method of the ST class can be overridden
to trap and automatically wrap ob jects of a particular type
to provide new properties...

Ter
From jgray at siberra.com  Mon Jun 19 11:34:53 2006
From: jgray at siberra.com (Jeremy Gray)
Date: Mon Jun 19 11:35:06 2006
Subject: [stringtemplate-interest] Renderer "modes"
Message-ID: <9E60A7FA5322F841856BE6E670F3E7B615BD9A22@CPREXN020-EVS.itdmis02.futureshop.com>

Ack. Sorry, we're not in a position to be subclassing dates to provide
for alternate formatting. In some cases, it is even the exact same
DateTime instance being rendered two different ways. In any case, I
can't/won't change the model. Is this not precisely the kind of usage
that the renderer approach should be allowing us to address in a manner
transparent to the model?

Jeremy

-----Original Message-----
From: stringtemplate-interest-bounces@antlr.org
[mailto:stringtemplate-interest-bounces@antlr.org] On Behalf Of Terence
Parr
Sent: Monday, June 19, 2006 11:21 AM
To: stringtemplate-interest
Subject: Re: [stringtemplate-interest] Renderer "modes"


On Jun 19, 2006, at 11:15 AM, Jeremy Gray wrote:

> I've read the paper (I think I've read through all of the ST paper
> versions, presentation versions I can find, and its been quite an
> experience watching them evolve over time :)

Yeah, it's been a long road to formalize all this stuff given that I  
have been cranking on ANTLR v3 at same time ;)

> but unless I missed
> something it doesn't address the example brought up in my reply  
> (that of
> needing to, for example, format DateTime instances differently within
> the same template). Can you point me in the right direction?

Sure.  Check section 4 at the end:

What happens when the designer needs dates to be some-
times long and sometimes short format? This case is also
easily handled without resorting to unrestricted code in the
template and without burdening the programmer with the
extra code needed to wrap all date attributes. The Date
class can be subclassed to provide property methods such
as getMedium() so that templates may reference $myDate$
to get the default rendering and $myDate.medium$ to get
a medium format. For any given type, the developer may
automatically provide augmented properties without hav-
ing to manually create instances of a Date subclass. The
setAttribute() method of the ST class can be overridden
to trap and automatically wrap ob jects of a particular type
to provide new properties...

Ter
_______________________________________________
stringtemplate-interest mailing list
stringtemplate-interest@antlr.org
http://www.antlr.org:8080/mailman/listinfo/stringtemplate-interest


From parrt at cs.usfca.edu  Mon Jun 19 11:44:43 2006
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon Jun 19 11:44:19 2006
Subject: [stringtemplate-interest] Renderer "modes"
In-Reply-To: <9E60A7FA5322F841856BE6E670F3E7B615BD9A22@CPREXN020-EVS.itdmis02.futureshop.com>
References: <9E60A7FA5322F841856BE6E670F3E7B615BD9A22@CPREXN020-EVS.itdmis02.futureshop.com>
Message-ID: <4F8B896E-293B-4D73-B537-BBAA9BAF544C@cs.usfca.edu>


On Jun 19, 2006, at 11:34 AM, Jeremy Gray wrote:

> Ack. Sorry, we're not in a position to be subclassing dates to provide
> for alternate formatting.

Just wrap the dates in an object that delegates.  getMedium() would  
call the formatted on the wrapped object. :)

> In some cases, it is even the exact same
> DateTime instance being rendered two different ways. In any case, I
> can't/won't change the model. Is this not precisely the kind of usage
> that the renderer approach should be allowing us to address in a  
> manner
> transparent to the model?

No need for a renderer really...just wrap automatically by  
subclassing StringTemplate and having it auto-wrap all Dates. :)   
Works great.

Ter
From jgray at siberra.com  Mon Jun 19 12:25:45 2006
From: jgray at siberra.com (Jeremy Gray)
Date: Mon Jun 19 12:25:53 2006
Subject: [stringtemplate-interest] Renderer "modes"
Message-ID: <9E60A7FA5322F841856BE6E670F3E7B615BD9B24@CPREXN020-EVS.itdmis02.futureshop.com>

Hmm. I hadn't realized that subclassing ST was an option, and admittedly
didn't gather that impression from your papers. Still, I am not having
an easy time imagining how auto-wrapping all dates would allow for the
conditional behaviour I was describing where a date might be formatted
one way once in a template and another way elsewhere. Perhaps something
just hasn't clicked in my mind yet. I'll have to think about it for a
bit.

Jeremy

-----Original Message-----
From: stringtemplate-interest-bounces@antlr.org
[mailto:stringtemplate-interest-bounces@antlr.org] On Behalf Of Terence
Parr
Sent: Monday, June 19, 2006 11:45 AM
To: stringtemplate-interest
Subject: Re: [stringtemplate-interest] Renderer "modes"


On Jun 19, 2006, at 11:34 AM, Jeremy Gray wrote:

> Ack. Sorry, we're not in a position to be subclassing dates to provide
> for alternate formatting.

Just wrap the dates in an object that delegates.  getMedium() would  
call the formatted on the wrapped object. :)

> In some cases, it is even the exact same
> DateTime instance being rendered two different ways. In any case, I
> can't/won't change the model. Is this not precisely the kind of usage
> that the renderer approach should be allowing us to address in a  
> manner
> transparent to the model?

No need for a renderer really...just wrap automatically by  
subclassing StringTemplate and having it auto-wrap all Dates. :)   
Works great.

Ter
_______________________________________________
stringtemplate-interest mailing list
stringtemplate-interest@antlr.org
http://www.antlr.org:8080/mailman/listinfo/stringtemplate-interest


From parrt at cs.usfca.edu  Mon Jun 19 12:31:31 2006
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon Jun 19 12:31:06 2006
Subject: [stringtemplate-interest] Renderer "modes"
In-Reply-To: <9E60A7FA5322F841856BE6E670F3E7B615BD9B24@CPREXN020-EVS.itdmis02.futureshop.com>
References: <9E60A7FA5322F841856BE6E670F3E7B615BD9B24@CPREXN020-EVS.itdmis02.futureshop.com>
Message-ID: <AC035803-1F4D-4D2D-B2FD-AEEC7955CBBA@cs.usfca.edu>


On Jun 19, 2006, at 12:25 PM, Jeremy Gray wrote:

> Hmm. I hadn't realized that subclassing ST was an option, and  
> admittedly
> didn't gather that impression from your papers.

I'm pretty sure that that same section shows subclassing to override  
setAttribute.  My cutpaste stopped at the spot.

> Still, I am not having
> an easy time imagining how auto-wrapping all dates would allow for the
> conditional behaviour I was describing where a date might be formatted
> one way once in a template and another way elsewhere. Perhaps  
> something
> just hasn't clicked in my mind yet. I'll have to think about it for a
> bit.

If the wrapper has two methods, getMedium and getVerbose, then you  
can have templates say:

$mydate.medium$
$mydate.verbose$

The first calls getMedium() on the wrapper which formats the data  
held in that object.

Does that help?

Ter

From jgray at siberra.com  Mon Jun 19 13:00:23 2006
From: jgray at siberra.com (Jeremy Gray)
Date: Mon Jun 19 13:00:26 2006
Subject: [stringtemplate-interest] Renderer "modes"
Message-ID: <9E60A7FA5322F841856BE6E670F3E7B615BD9BB4@CPREXN020-EVS.itdmis02.futureshop.com>

I think I'm starting to see where you're heading with this. I haven't
had a chance to look into the behaviour of overriding the method you
mention, but if you're talking about the SetAttribute I think you're
talking about then I'm not sure whether or not it will do the trick.
That said, I'd best just take this issue away and play with it for a
while rather than ramble to the mailing list about things I haven't yet
tried. :)

Jeremy

-----Original Message-----
From: stringtemplate-interest-bounces@antlr.org
[mailto:stringtemplate-interest-bounces@antlr.org] On Behalf Of Terence
Parr
Sent: Monday, June 19, 2006 12:32 PM
To: stringtemplate-interest
Subject: Re: [stringtemplate-interest] Renderer "modes"


On Jun 19, 2006, at 12:25 PM, Jeremy Gray wrote:

> Hmm. I hadn't realized that subclassing ST was an option, and  
> admittedly
> didn't gather that impression from your papers.

I'm pretty sure that that same section shows subclassing to override  
setAttribute.  My cutpaste stopped at the spot.

> Still, I am not having
> an easy time imagining how auto-wrapping all dates would allow for the
> conditional behaviour I was describing where a date might be formatted
> one way once in a template and another way elsewhere. Perhaps  
> something
> just hasn't clicked in my mind yet. I'll have to think about it for a
> bit.

If the wrapper has two methods, getMedium and getVerbose, then you  
can have templates say:

$mydate.medium$
$mydate.verbose$

The first calls getMedium() on the wrapper which formats the data  
held in that object.

Does that help?

Ter

_______________________________________________
stringtemplate-interest mailing list
stringtemplate-interest@antlr.org
http://www.antlr.org:8080/mailman/listinfo/stringtemplate-interest


From sean.stquentin at gmail.com  Mon Jun 19 20:06:13 2006
From: sean.stquentin at gmail.com (Sean St. Quentin)
Date: Mon Jun 19 20:06:16 2006
Subject: [stringtemplate-interest] Renderer "modes"
In-Reply-To: <BAY101-DAV3D416CA66FAD27B5F271C81860@phx.gbl>
References: <139cf3ed0606151955y34421f6do73932fd80e5d75@mail.gmail.com>
	<BAY101-DAV3D416CA66FAD27B5F271C81860@phx.gbl>
Message-ID: <139cf3ed0606192006k3a377fe1y36b80efaabd42dd5@mail.gmail.com>

On 20/06/06, Kunle Odutola <Kunle_Odutola@hotmail.com> wrote:
>
> Hi Sean,
>
> > Without knowing of an easy way to fix this (by easy I mean not having
> two
> > arrays of preformatted information being sent to the view, which seems
> kinda
> > wrong), I was thinking about having rendering modes for an
> > AttributeRenderer.
>
> Formatter ojects are currently the prescribed way. See the types in the
> "Antlr.StringTemplate.Utils" namespace. You wrap each entry in your array.


Hey Kunle,
Yeah, I considered that option, but it seems to me a little awkward.

For instance, formatter/renderer combination makes this easy:

$people:{
<h2>$it.Name$</h2>

$it.Relations:{<a onclick="registerRelation('$it.Value;
format="js"$');">$it.Value$</a> }$

}$

Without using formatters on renderers, it would be possible, but the
controller would be overly complex with several wrapper classes.



> No. Am I right ti suspect you already have a patch?  ;-)


Haha, thats not like me at all :) I actually started just to see how it
would work but didn't get very far into it - problem is that I dont know
ANTLR (yet). Perhaps I'll dedicate some time over the weekend which will
make the girlfriend happy :)


> Perhaps. I wonder if formalizing the concept of Formatters would be a
> better
> approach. Formatters expose arbitrary properties that ST templates can
> already access directly. All that is needed is a way to compose a renderer
> and a formatter before registering with ST. This would remove the
> formatter-per-attribute association as well.


Simply combining the concepts (i.e. renderers exposing formatter-like
> properties in addition to ToString) seems a little brittle. Can't
> articulate
> why it feels brittle yet.


Combining the concepts seems like a logical step to me. Renderers convert
information into an easily readable format and output a string, they're
already formatters that are hardcoded to a single format.

Using formatters to format information before its sent to the view implies
that the controller knows exactly what the view is going to do with the
data... does that blur the lines in MVCR?

Thanks,
Sean.

Kunle
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest@antlr.org
> http://www.antlr.org:8080/mailman/listinfo/stringtemplate-interest
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org:8080/pipermail/stringtemplate-interest/attachments/20060620/1b013640/attachment.html
From Kunle_Odutola at hotmail.com  Tue Jun 20 05:38:57 2006
From: Kunle_Odutola at hotmail.com (Kunle Odutola)
Date: Tue Jun 20 05:21:05 2006
Subject: [stringtemplate-interest] Renderer "modes"
References: <9E60A7FA5322F841856BE6E670F3E7B615AA0461@CPREXN020-EVS.itdmis02.futureshop.com>
	<F0143500-E383-4546-8670-84A5E0D3B63E@cs.usfca.edu>
Message-ID: <BAY101-DAV107BD5FF25340E2279DD5681870@phx.gbl>

Ter,

> > but, to be clear, I only raise this example in order to cut it off  
> > at the pass, as it would start us down a slippery slope that  
> > Terrence would surely want to avoid and that I, as much as I like  
> > the possibilities it would present as a programmer geek, also would  
> > want to avoid.
> 
> Yup.  There are better ways to do this.  Please see my i18 and l18n  
> paper at st.org :)
> 
> Ter

I'd like to hear your thoughts on Sean's original idea.

Kunle
From parrt at cs.usfca.edu  Tue Jun 20 10:45:50 2006
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue Jun 20 10:45:23 2006
Subject: [stringtemplate-interest] Renderer "modes"
In-Reply-To: <139cf3ed0606192006k3a377fe1y36b80efaabd42dd5@mail.gmail.com>
References: <139cf3ed0606151955y34421f6do73932fd80e5d75@mail.gmail.com>
	<BAY101-DAV3D416CA66FAD27B5F271C81860@phx.gbl>
	<139cf3ed0606192006k3a377fe1y36b80efaabd42dd5@mail.gmail.com>
Message-ID: <DFC57FAD-82AE-422B-967D-1F99EC84AF7E@cs.usfca.edu>


On Jun 19, 2006, at 8:06 PM, Sean St. Quentin wrote:

> On 20/06/06, Kunle Odutola <Kunle_Odutola@hotmail.com> wrote:
> Hi Sean,
>
> > Without knowing of an easy way to fix this (by easy I mean not  
> having two
> > arrays of preformatted information being sent to the view, which  
> seems
> kinda
> > wrong), I was thinking about having rendering modes for an
> > AttributeRenderer.
>
> Formatter ojects are currently the prescribed way. See the types in  
> the
> "Antlr.StringTemplate.Utils" namespace. You wrap each entry in your  
> array.
>
> Hey Kunle,
> Yeah, I considered that option, but it seems to me a little awkward.

It is a pain to manually wrap each object before you inject.  Using  
types is a crude instrument for rendering as you might have two Lists  
of strings that each need to be dealt with differently.   
Hmm....interesting...

> For instance, formatter/renderer combination makes this easy:
>
> $people:{
> <h2>$it.Name$</h2>
>
> $it.Relations:{<a onclick="registerRelation('$it.Value;  
> format="js"$');">$it.Value$</a> }$
>
> }$
>
> Without using formatters on renderers, it would be possible, but  
> the controller would be overly complex with several wrapper classes.

Well, you'd need one for javascript but what others would you need?

> Perhaps. I wonder if formalizing the concept of Formatters would be  
> a better
> approach. Formatters expose arbitrary properties that ST templates can
> already access directly. All that is needed is a way to compose a  
> renderer
> and a formatter before registering with ST. This would remove the
> formatter-per-attribute association as well.

So you'd only have a singleton renderer as before but that accepted  
an Object *and* a formatter String:

class StringRenderer implements AttributeRenderer {
   toString(Object data) {...}
   toString(Object data, String format) {...}
}

Is that what you mean?  If you registered a StringRenderer to deal  
with all Strings then $name$ would call the first method toString 
(name).  If you did $name; format="js"$ then it would call toString 
(name, "js").  Interesting...

> Simply combining the concepts ( i.e. renderers exposing formatter-like
> properties in addition to ToString) seems a little brittle. Can't  
> articulate
> why it feels brittle yet.

Well, properties are already there like $name.js$ except you'd need  
to have wrapped name in an appropriate wrapper object.  This can be  
done automatically but is very expensive: new object for every string  
going in! :(

> Combining the concepts seems like a logical step to me. Renderers  
> convert information into an easily readable format and output a  
> string, they're already formatters that are hardcoded to a single  
> format.
>
> Using formatters to format information before its sent to the view  
> implies that the controller knows exactly what the view is going to  
> do with the data... does that blur the lines in MVCR?

Well, in general that is proper.  For example, only the controller  
knows the client's language and encoding...the view cannot know this  
so it can't say "use language Swahili".  Dealing with URL encoding  
and uppercasing and all that rot is possible using renderers in some  
cases and resorting to wrappers (formatter objects) in the worst  
case.  This keeps it all nice and separated.  However, sometimes you  
really want to just do some quick formatting on a string like padding  
it to 80char or uppercasing it: $name.toUpper$ etc...

I'm uncomfortable with the ability to pass a string back to the  
controller.  Clearly you can then call f(x):

$sqldb; format="SELECT * FROM USER"$

yikes!  Boy that is a slippery slope, eh?  This is why I am so  
ruthless with this infernal separation ;)

Instead, let's follow what I think you originally posted: registering  
formatter objects as renderers but we expose some properties.  The  
key efficiency thing here is that the wrapper/formatter can be a  
singleton now--you don't have to wrap every string in an formatter  
object.  $name.toUpper$ would be converted to

r = renderer.get("String");
r.toUpper(name);

So, in the controller you register String->SeansHTMLRendererThingie  
and then call $name.seansMethodForManipulatingStringsInACoolWay$.

This prevents the user from passing arbitrary data; the format string  
must be a valid method name, preventing methods called "SELECT * FROM  
USER", though for a few cases, you could actually do this.  This hole  
already exists though.

In summary, the syntax is identical but we'd have to modify

ASTExpr:

	protected Object rawGetObjectProperty(StringTemplate self, Object o,  
String propertyName) {...}

so that it checked for a renderer for o's type before doing anything  
else.  A renderer registered for o's type would take precedence over  
anything else even if o is a Map or StringTemplate.  This way we can  
automatically add properties essentially to any type of object.

How does this sound?  I like it.

Ter
From jgray at siberra.com  Tue Jun 20 14:15:23 2006
From: jgray at siberra.com (Jeremy Gray)
Date: Tue Jun 20 14:15:30 2006
Subject: [stringtemplate-interest] Renderer "modes"
Message-ID: <9E60A7FA5322F841856BE6E670F3E7B615CB1A4B@CPREXN020-EVS.itdmis02.futureshop.com>

A few comments...

"Well, you'd need one for javascript but what others would you need?"

Long versus short forms for dates and times, percentages versus standard
fractional values, escaped versus unescaped string data (eg.
system-controlled string values unescaped, user-supplied values escaped,
SQL-escaped, XML-escaped, URL-encoded), and the list goes on. :)


"$sqldb; format="SELECT * FROM USER"$

yikes!  Boy that is a slippery slope, eh?  This is why I am so  
ruthless with this infernal separation ;)"

Yup, scary stuff, hence my post about heading that one off at the pass
to avoid falling off the edge. :)


"So, in the controller you register String->SeansHTMLRendererThingie  
and then call $name.seansMethodForManipulatingStringsInACoolWay$.

This prevents the user from passing arbitrary data;"

Precisely. This is why Sean's recommendation works so nicely. The view
still has control over which of a limited set of alternate rendering
forms it wishes to use, but without exposing the slippery slope.


"This way we can automatically add properties essentially to any type of
object."

That reminds me of some work that MSFT is doing on C# 3, but that's
probably best saved for a different thread. Or maybe it isn't. :)

(For those not following it, they are baking "expando"-like extension
methods and properties into the language and IDE.)


"How does this sound?  I like it."

+1

Jeremy

From Kunle_Odutola at hotmail.com  Tue Jun 20 16:33:41 2006
From: Kunle_Odutola at hotmail.com (Kunle Odutola)
Date: Tue Jun 20 16:15:57 2006
Subject: [stringtemplate-interest] Renderer "modes"
References: <139cf3ed0606151955y34421f6do73932fd80e5d75@mail.gmail.com><BAY101-DAV3D416CA66FAD27B5F271C81860@phx.gbl><139cf3ed0606192006k3a377fe1y36b80efaabd42dd5@mail.gmail.com>
	<DFC57FAD-82AE-422B-967D-1F99EC84AF7E@cs.usfca.edu>
Message-ID: <BAY101-DAV22874F2578423D6F7600581870@phx.gbl>

Ter,

> > Formatter ojects are currently the prescribed way. See the types in
> > the
> > "Antlr.StringTemplate.Utils" namespace. You wrap each entry in your
> > array.
> >
> > Hey Kunle,
> > Yeah, I considered that option, but it seems to me a little awkward.
>
> It is a pain to manually wrap each object before you inject.

Yep.

> > For instance, formatter/renderer combination makes this easy:
> >
> > $people:{
> > <h2>$it.Name$</h2>
> >
> > $it.Relations:{<a onclick="registerRelation('$it.Value;
> > format="js"$');">$it.Value$</a> }$
> >
> > }$
> >
> > Without using formatters on renderers, it would be possible, but
> > the controller would be overly complex with several wrapper classes.
>
> Well, you'd need one for javascript but what others would you need?

I think he means several instances of the wrapper class. One per item in
list.

> > Perhaps. I wonder if formalizing the concept of Formatters would be
> > a better
> > approach. Formatters expose arbitrary properties that ST templates can
> > already access directly. All that is needed is a way to compose a
> > renderer
> > and a formatter before registering with ST. This would remove the
> > formatter-per-attribute association as well.
>
> So you'd only have a singleton renderer as before but that accepted
> an Object *and* a formatter String:
>
> class StringRenderer implements AttributeRenderer {
>    toString(Object data) {...}
>    toString(Object data, String format) {...}
> }
>
> Is that what you mean?  If you registered a StringRenderer to deal
> with all Strings then $name$ would call the first method toString
> (name).  If you did $name; format="js"$ then it would call toString
> (name, "js").  Interesting...

Not quite. I thought we could just alter the following method:
    rawGetObjectProperty(StringTemplate self, Object o, String propertyName)

It would need to understand that an AttributeRender may also have a
formatter that exposes additional properties.

interface AttributeRenderer {
    AttributeFormatter getFormatter();
    string toString(Object data);
}

interface AttributeFormatter {
    string toString(Object data, String propertyName);
}

class StringRenderer implements AttributeRenderer {
    public StringRenderer() {}
    public StringRenderer(AttributeFormatter formatter) {...}
    AttributeFormatter getFormatter() { return formatter; }
    toString(Object data) {...}
}

class JsAndHtmlStringRenderer implements AttributeFormatter {

    toString(Object data, String propertyName) {
        if ( propertyName.equals("js") )
            return this.JsEncode(data);
        else if ( propertyName.equals("url") )
            return this.UrlEncode(data);
        ...
    }
}

1. The rawGetObjectProperty() method can check if renderer has a formatter
(via AttributeRenderer's getFormatter() accessor) and if so, use it
directly.
2.  Not sure that the formatter needs to implement a specific interface or
indeed be a separate object from the renderer.
3. Perhaps we can mandate that the "format string" is actually an exposed
property on the formatter, ST already has the machinery to query
properties/methods on arbitary object instances.

Haven't thought about any other options yet. Sean's idea is neat but it's
use of attributes will require Java 1.5+. It doesn't quite equate to
allowing passing arbitary strings to be passed from templates to controller
though.

> Instead, let's follow what I think you originally posted: registering
> formatter objects as renderers but we expose some properties.  The
> key efficiency thing here is that the wrapper/formatter can be a
> singleton now--you don't have to wrap every string in an formatter
> object.  $name.toUpper$ would be converted to
>
> r = renderer.get("String");
> r.toUpper(name);
>
> So, in the controller you register String->SeansHTMLRendererThingie
> and then call $name.seansMethodForManipulatingStringsInACoolWay$.
>
> This prevents the user from passing arbitrary data; the format string
> must be a valid method name, preventing methods called "SELECT * FROM
> USER", though for a few cases, you could actually do this.  This hole
> already exists though.
>
> In summary, the syntax is identical but we'd have to modify
>
> ASTExpr:
>
> protected Object rawGetObjectProperty(StringTemplate self, Object o,
> String propertyName) {...}
>
> so that it checked for a renderer for o's type before doing anything
> else.  A renderer registered for o's type would take precedence over
> anything else even if o is a Map or StringTemplate.  This way we can
> automatically add properties essentially to any type of object.
>
> How does this sound?  I like it.

Sounds like you're saying the AtributeRenderer exposes the additional
properties (i.e. renderer and formatter combined).


Kunle
From sean.stquentin at gmail.com  Tue Jun 20 18:09:17 2006
From: sean.stquentin at gmail.com (Sean St. Quentin)
Date: Tue Jun 20 18:09:20 2006
Subject: [stringtemplate-interest] Renderer "modes"
In-Reply-To: <DFC57FAD-82AE-422B-967D-1F99EC84AF7E@cs.usfca.edu>
References: <139cf3ed0606151955y34421f6do73932fd80e5d75@mail.gmail.com>
	<BAY101-DAV3D416CA66FAD27B5F271C81860@phx.gbl>
	<139cf3ed0606192006k3a377fe1y36b80efaabd42dd5@mail.gmail.com>
	<DFC57FAD-82AE-422B-967D-1F99EC84AF7E@cs.usfca.edu>
Message-ID: <139cf3ed0606201809qf60bdafvf9c081839a38c10e@mail.gmail.com>

On 21/06/06, Terence Parr <parrt@cs.usfca.edu> wrote:
>
>
> On Jun 19, 2006, at 8:06 PM, Sean St. Quentin wrote:
>
> > On 20/06/06, Kunle Odutola <Kunle_Odutola@hotmail.com> wrote:
> > Hi Sean,
> >
> > > Without knowing of an easy way to fix this (by easy I mean not
> > having two
> > > arrays of preformatted information being sent to the view, which
> > seems
> > kinda
> > > wrong), I was thinking about having rendering modes for an
> > > AttributeRenderer.
> >
> > Formatter ojects are currently the prescribed way. See the types in
> > the
> > "Antlr.StringTemplate.Utils" namespace. You wrap each entry in your
> > array.
> >
> > Hey Kunle,
> > Yeah, I considered that option, but it seems to me a little awkward.
>
> It is a pain to manually wrap each object before you inject.  Using
> types is a crude instrument for rendering as you might have two Lists
> of strings that each need to be dealt with differently.
> Hmm....interesting...
>
> > For instance, formatter/renderer combination makes this easy:
> >
> > $people:{
> > <h2>$it.Name$</h2>
> >
> > $it.Relations:{<a onclick="registerRelation('$it.Value;
> > format="js"$');">$it.Value$</a> }$
> >
> > }$
> >
> > Without using formatters on renderers, it would be possible, but
> > the controller would be overly complex with several wrapper classes.
>
> Well, you'd need one for javascript but what others would you need?



The problem is that the view is displaying children of an object, so to wrap
them you need to un-nessesarily wrap the parent object too.

Say you have an array, Person[] people;
And Person itself contains Relation[] relations;

Then you're going to need class PersonWrapper { RelationWrapper[] relations;
}

You end up with something like:
foreach (Person p in people)
{
    foreach(Relation r in p.Relations)
    {
       // wrap relation
    }

    // wrap person
}

Its a lot of iterations and instances, and seems a tad excessive.

ASTExpr:
>
>         protected Object rawGetObjectProperty(StringTemplate self, Object
> o,
> String propertyName) {...}
>
> so that it checked for a renderer for o's type before doing anything
> else.  A renderer registered for o's type would take precedence over
> anything else even if o is a Map or StringTemplate.  This way we can
> automatically add properties essentially to any type of object.
>
> How does this sound?  I like it.


Brilliant! The only reason I suggested the $obj;format="js"$ was so that you
dont get any conflicts between renderer methods and properties on the object
being rendered. Behind the scenes it'd still work as $obj.js$, so no
slippery slope... (afaik).

Sean.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org:8080/pipermail/stringtemplate-interest/attachments/20060621/d0caaa26/attachment.html
From sean.stquentin at gmail.com  Tue Jun 20 18:42:45 2006
From: sean.stquentin at gmail.com (Sean St. Quentin)
Date: Tue Jun 20 18:42:49 2006
Subject: [stringtemplate-interest] Renderer "modes"
In-Reply-To: <BAY101-DAV22874F2578423D6F7600581870@phx.gbl>
References: <139cf3ed0606151955y34421f6do73932fd80e5d75@mail.gmail.com>
	<BAY101-DAV3D416CA66FAD27B5F271C81860@phx.gbl>
	<139cf3ed0606192006k3a377fe1y36b80efaabd42dd5@mail.gmail.com>
	<DFC57FAD-82AE-422B-967D-1F99EC84AF7E@cs.usfca.edu>
	<BAY101-DAV22874F2578423D6F7600581870@phx.gbl>
Message-ID: <139cf3ed0606201842r2fd68aecic9f9c26e5692a621@mail.gmail.com>

>
> Not quite. I thought we could just alter the following method:
>     rawGetObjectProperty(StringTemplate self, Object o, String
> propertyName)
>
> It would need to understand that an AttributeRender may also have a
> formatter that exposes additional properties.
>
> interface AttributeRenderer {
>     AttributeFormatter getFormatter();
>     string toString(Object data);
> }
>
> interface AttributeFormatter {
>     string toString(Object data, String propertyName);
> }
>
> class StringRenderer implements AttributeRenderer {
>     public StringRenderer() {}
>     public StringRenderer(AttributeFormatter formatter) {...}
>     AttributeFormatter getFormatter() { return formatter; }
>     toString(Object data) {...}
> }
>
> class JsAndHtmlStringRenderer implements AttributeFormatter {
>
>     toString(Object data, String propertyName) {
>         if ( propertyName.equals("js") )
>             return this.JsEncode(data);
>         else if ( propertyName.equals("url") )
>             return this.UrlEncode(data);
>         ...
>     }
> }
>
> 1. The rawGetObjectProperty() method can check if renderer has a formatter
> (via AttributeRenderer's getFormatter() accessor) and if so, use it
> directly.
> 2.  Not sure that the formatter needs to implement a specific interface or
> indeed be a separate object from the renderer.
> 3. Perhaps we can mandate that the "format string" is actually an exposed
> property on the formatter, ST already has the machinery to query
> properties/methods on arbitary object instances.


Ahh, I see what you mean... how about:

class StringRenderer : AttributeRenderer
{
    string toString(Object data) { return (string)data; }
    string asJs(Object data) { return JsFormatter.format((string)data); }

    // etc...
}

So we're not imposing interfaces on the formatters...

Agreed with #3, as I can see this:

$sqldb.select_star_from_users$ or $sqldb;format="select_star_from_users"$

All you need to do on the renderer or formatter is propertyName.Replace("_",
" ").Replace("star", "*") and you have a valid SQL string.

Haven't thought about any other options yet. Sean's idea is neat but it's
> use of attributes will require Java 1.5+. It doesn't quite equate to
> allowing passing arbitary strings to be passed from templates to
> controller
> though.


How about some sort of convention instead, so for example if your format
string is "js" then you'd need a method "string AsJs(object)" on the
renderer or formatter.  Much like how ST searches for "get" prefixes on
attributes -> $obj.value$ calls "string getValue()".

Then you could modify the convention by using attributes, so you could have
"[Format("js"), Format("js2")] string FormatToJs(object)". Its a similar
approach to how NUnit operates, by using [Test] or prefixing a method name
with Test.


Cheers,
Sean.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org:8080/pipermail/stringtemplate-interest/attachments/20060621/7ffa5df4/attachment.html
From open.zone at virgin.net  Tue Jun 20 19:03:57 2006
From: open.zone at virgin.net (Micheal J)
Date: Tue Jun 20 18:46:05 2006
Subject: [stringtemplate-interest] Renderer "modes"
In-Reply-To: <DFC57FAD-82AE-422B-967D-1F99EC84AF7E@cs.usfca.edu>
Message-ID: <005401c694d6$f62240f0$c704a8c0@hercules>

Hi,

> Instead, let's follow what I think you originally posted:
> registering  
> formatter objects as renderers but we expose some properties.  The  
> key efficiency thing here is that the wrapper/formatter can be a  
> singleton now--you don't have to wrap every string in an formatter  
> object.  $name.toUpper$ would be converted to
> 
> r = renderer.get("String");
> r.toUpper(name);

....

> In summary, the syntax is identical but we'd have to modify
> 
> ASTExpr:
> 
> 	protected Object rawGetObjectProperty(StringTemplate
> self, Object o,  
> String propertyName) {...}
> 
> so that it checked for a renderer for o's type before doing anything
> else.  A renderer registered for o's type would take precedence over  
> anything else even if o is a Map or StringTemplate.  This way we can  
> automatically add properties essentially to any type of object.
> 
> How does this sound?  I like it.

+1


This seems like a way out of the long-standing
single-renderer/multiple-formats issue. I remember discussing this issue
last year and favouring attribute-specific renderers. ;-)

Is there likely to be a noticeable cost associated with always having to
check if the 'propertyName' parameter really is a valid (i.e. exisiting)
property on the registered attribute renderer?


Micheal

-----------------------
The best way to contact me is via the list/forum. My time is very limited.

From robertdavidrowland at gmail.com  Tue Jun 27 04:37:19 2006
From: robertdavidrowland at gmail.com (Robert Rowland)
Date: Tue Jun 27 04:37:22 2006
Subject: [stringtemplate-interest] Presenting relationships between two lists
Message-ID: <5e4a82840606270437r2957a856ic350ce48b79f7ad5@mail.gmail.com>

Hi All,

Before I go on too much further can I just say that I'm not after
reopening the old argument about conditionals . . . I can understand
quite clearly why they are a "bad thing".

However I've got a problem here that with other template systems I
would have used conditionals, and can't seem to get my head round how
to get this to work with StringTemplate.

I have two lists of objects, with a one to one relationship between
the items in the lists.  Lets say they are reports and users.  I want
to produce a list of reports and against each report is a list of all
the users.  For each report one of those users is marked as selected.

So here goes:

$reports:{r|
    $r.reportName$
    $users:{u|$u.userName$ $if(u.userName==r.userName)$Yes Selected!$endif$
    }$
}$

Obviously the $if(u.userName==r.userName)$ doesn't work in
StringTemplate, but I can't for the life of me work out how to get the
same behaviour without the conditional.

Hopefully I'm making sense . .

Cheers Rob.

p.s. in case your wondering, and in case it makes things clearer, what
I'm actually trying to achieve is HTML select boxes, so . . .

$reports:{r|
    $r.reportName$
    <select name="$r.id$>
    $users:{u|<option
value="$r.id$-$u.id$">$if(u.userName==r.userName)$
selected$endif$>$u.userName$</option>
    }$
    </select>
}$

Which may produce something like the following . . .

My Report 1
<select name="r1">
<option value="r1-u1" selected>Rob</option>
<option value="r1-u2">Fred</option>
<option value="r1-u3">George</option>
</select>

My Report2
<select name="r2">
<option value="r2-u1">Rob</option>
<option value="r2-u2">Fred</option>
<option value="r2-u3" selected>George</option>
</select>
From parrt at cs.usfca.edu  Tue Jun 27 10:28:32 2006
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue Jun 27 10:27:36 2006
Subject: [stringtemplate-interest] Presenting relationships between two
	lists
In-Reply-To: <5e4a82840606270437r2957a856ic350ce48b79f7ad5@mail.gmail.com>
References: <5e4a82840606270437r2957a856ic350ce48b79f7ad5@mail.gmail.com>
Message-ID: <0D9CB124-2B61-4E26-BE50-6B6BF3DC9B52@cs.usfca.edu>

Hi, as you can tell from my silence, i'm super busy at the moment,  
but what I did for this was to send in parallel areas or arrays of  
objects.

for each user:
	st.setAttribute("users.{name, selected}", user.getName(),  
shouldBeSelected(user));

Ter

On Jun 27, 2006, at 4:37 AM, Robert Rowland wrote:

> Hi All,
>
> Before I go on too much further can I just say that I'm not after
> reopening the old argument about conditionals . . . I can understand
> quite clearly why they are a "bad thing".
>
> However I've got a problem here that with other template systems I
> would have used conditionals, and can't seem to get my head round how
> to get this to work with StringTemplate.
>
> I have two lists of objects, with a one to one relationship between
> the items in the lists.  Lets say they are reports and users.  I want
> to produce a list of reports and against each report is a list of all
> the users.  For each report one of those users is marked as selected.
>
> So here goes:
>
> $reports:{r|
>    $r.reportName$
>    $users:{u|$u.userName$ $if(u.userName==r.userName)$Yes Selected! 
> $endif$
>    }$
> }$
>
> Obviously the $if(u.userName==r.userName)$ doesn't work in
> StringTemplate, but I can't for the life of me work out how to get the
> same behaviour without the conditional.
>
> Hopefully I'm making sense . .
>
> Cheers Rob.
>
> p.s. in case your wondering, and in case it makes things clearer, what
> I'm actually trying to achieve is HTML select boxes, so . . .
>
> $reports:{r|
>    $r.reportName$
>    <select name="$r.id$>
>    $users:{u|<option
> value="$r.id$-$u.id$">$if(u.userName==r.userName)$
> selected$endif$>$u.userName$</option>
>    }$
>    </select>
> }$
>
> Which may produce something like the following . . .
>
> My Report 1
> <select name="r1">
> <option value="r1-u1" selected>Rob</option>
> <option value="r1-u2">Fred</option>
> <option value="r1-u3">George</option>
> </select>
>
> My Report2
> <select name="r2">
> <option value="r2-u1">Rob</option>
> <option value="r2-u2">Fred</option>
> <option value="r2-u3" selected>George</option>
> </select>
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest@antlr.org
> http://www.antlr.org:8080/mailman/listinfo/stringtemplate-interest

From robertdavidrowland at gmail.com  Tue Jun 27 23:20:53 2006
From: robertdavidrowland at gmail.com (Robert Rowland)
Date: Tue Jun 27 23:20:58 2006
Subject: [stringtemplate-interest] Presenting relationships between two
	lists
In-Reply-To: <0D9CB124-2B61-4E26-BE50-6B6BF3DC9B52@cs.usfca.edu>
References: <5e4a82840606270437r2957a856ic350ce48b79f7ad5@mail.gmail.com>
	<0D9CB124-2B61-4E26-BE50-6B6BF3DC9B52@cs.usfca.edu>
Message-ID: <5e4a82840606272320u1b44d28en84872a396e311544@mail.gmail.com>

> Hi, as you can tell from my silence, i'm super busy at the moment,

No worries Terrence, thanks for getting back to me!

> what I did for this was to send in parallel areas or arrays of
> objects.
>
> for each user:
>        st.setAttribute("users.{name, selected}", user.getName(),
> shouldBeSelected(user));
>

This isn't really what my problem is (although useful, I was creating
data aggregates as java objects).  The problem I have is all users
will be displayed against all reports, but a different user will be
selected in the list against each report.

I've managed to get this working in the end, but in a rather clunky
way.  What I'm doing is creating a StringTemplate instance for each
report and then pushing all these parsed templates into another
template . . .

    IUser[] users = regionGroup.getUsers();
	Arrays.sort(users, new UserComparator());

    /* get analyses in this country */
IItem[] analyses = analysisCountryItem.getBoundBranches();
	Arrays.sort(analyses, new AnalysisComparator());


> Ter
>
> On Jun 27, 2006, at 4:37 AM, Robert Rowland wrote:
>
> > Hi All,
> >
> > Before I go on too much further can I just say that I'm not after
> > reopening the old argument about conditionals . . . I can understand
> > quite clearly why they are a "bad thing".
> >
> > However I've got a problem here that with other template systems I
> > would have used conditionals, and can't seem to get my head round how
> > to get this to work with StringTemplate.
> >
> > I have two lists of objects, with a one to one relationship between
> > the items in the lists.  Lets say they are reports and users.  I want
> > to produce a list of reports and against each report is a list of all
> > the users.  For each report one of those users is marked as selected.
> >
> > So here goes:
> >
> > $reports:{r|
> >    $r.reportName$
> >    $users:{u|$u.userName$ $if(u.userName==r.userName)$Yes Selected!
> > $endif$
> >    }$
> > }$
> >
> > Obviously the $if(u.userName==r.userName)$ doesn't work in
> > StringTemplate, but I can't for the life of me work out how to get the
> > same behaviour without the conditional.
> >
> > Hopefully I'm making sense . .
> >
> > Cheers Rob.
> >
> > p.s. in case your wondering, and in case it makes things clearer, what
> > I'm actually trying to achieve is HTML select boxes, so . . .
> >
> > $reports:{r|
> >    $r.reportName$
> >    <select name="$r.id$>
> >    $users:{u|<option
> > value="$r.id$-$u.id$">$if(u.userName==r.userName)$
> > selected$endif$>$u.userName$</option>
> >    }$
> >    </select>
> > }$
> >
> > Which may produce something like the following . . .
> >
> > My Report 1
> > <select name="r1">
> > <option value="r1-u1" selected>Rob</option>
> > <option value="r1-u2">Fred</option>
> > <option value="r1-u3">George</option>
> > </select>
> >
> > My Report2
> > <select name="r2">
> > <option value="r2-u1">Rob</option>
> > <option value="r2-u2">Fred</option>
> > <option value="r2-u3" selected>George</option>
> > </select>
> > _______________________________________________
> > stringtemplate-interest mailing list
> > stringtemplate-interest@antlr.org
> > http://www.antlr.org:8080/mailman/listinfo/stringtemplate-interest
>
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest@antlr.org
> http://www.antlr.org:8080/mailman/listinfo/stringtemplate-interest
>
From robertdavidrowland at gmail.com  Tue Jun 27 23:27:33 2006
From: robertdavidrowland at gmail.com (Robert Rowland)
Date: Tue Jun 27 23:27:36 2006
Subject: [stringtemplate-interest] Presenting relationships between two
	lists
In-Reply-To: <5e4a82840606272320u1b44d28en84872a396e311544@mail.gmail.com>
References: <5e4a82840606270437r2957a856ic350ce48b79f7ad5@mail.gmail.com>
	<0D9CB124-2B61-4E26-BE50-6B6BF3DC9B52@cs.usfca.edu>
	<5e4a82840606272320u1b44d28en84872a396e311544@mail.gmail.com>
Message-ID: <5e4a82840606272327n60c38f53p75ea54dbbb61707@mail.gmail.com>

Sorry sent that last mail too early.

Here's my sample code.  As you can see I'm actually pulling in two
templates and pushing the result of one into the other once for each
report (or analysis as they are reffered to in the code).  This just
feels wrong . . . .

    StringTemplateGroup tabledefs = new StringTemplateGroup("myGroup");
    StringTemplate template = tabledefs.getInstanceOf("all_analyses");

    /* get analyses */
    IItem[] analyses = someGetAllUserAnalysesFunc();

    /* get all users */
    IUser[] users = someGetAllUserFunc();
    Arrays.sort(users, new UserComparator());

    /* for each analysis, build a template with that analysis and all
users, with the correct user set as selected */
    for (int i=0;i<analyses.length;i++) {
        IItem analysisItem = analyses[i];
        Analysis analysis = new Analysis(analysisItem.getFullName(),
analysisItem);
        analysis.setMediasuface(ms);
        analysis.setContext(ctx);

        StringTemplate fragment = tabledefs.getInstanceOf("analysis_item");
		   	
        fragment.setAttribute("analysis.{name,authorname}",
analysisItem.getName(), analysisItem.getAuthorName());

        for (int j=0;j<users.length;j++) {
            IUser user = users[j];
            fragment.setAttribute("users.{key,name,selected}",
user.getKey(), user.getFullName(),
analysis.isAuthorUserName(user.getUserName()));
        }
		
        template.setAttribute("fragments", fragment.toString());	
    }

    out.print(template.toString());
