From nodcosta at in.ibm.com  Fri Jun  1 04:43:26 2012
From: nodcosta at in.ibm.com (Noel Dcosta)
Date: Fri, 1 Jun 2012 17:13:26 +0530
Subject: [stringtemplate-interest] ANTLR - antlr3StringStreamNew unhandled
	exception with ANTLR3_ENC_UTF32
In-Reply-To: <OF2E5B59CF.8318DD74-ON65257A10.003F2164-65257A10.003F57CB@LocalDomain>
References: <OF2E5B59CF.8318DD74-ON65257A10.003F2164-65257A10.003F57CB@LocalDomain>
Message-ID: <OF731247FA.84447101-ON65257A10.004055E3-65257A10.00406868@in.ibm.com>

Hello

I am facing some issues with ANTLR 3.4 C Runtime and ANTLRWorks 1.4.3 when 
using UTF-32 encoding (on Unix/Linux where size of wide char is 4). 

I have a parameter string "pro=ccn" and create an ANTLR input stream using 
antlr3StringStreamNew and select ANTLR3_ENC_UTF32 as encoding. On Unix I 
get a segmentation fault at antlr3StringStreamNew 

I tried the same on Windows by converting from UTF-16 to UTF-32 as shown 
below and got an unhandled exception.





Any help on this will be greatly appreciated.

Thanks & Regards,
Noel

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20120601/7c301ac8/attachment-0001.html 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: image/gif
Size: 37541 bytes
Desc: not available
Url : http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20120601/7c301ac8/attachment-0002.gif 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: image/gif
Size: 29534 bytes
Desc: not available
Url : http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20120601/7c301ac8/attachment-0003.gif 

From parrt at cs.usfca.edu  Wed Jun  6 11:03:11 2012
From: parrt at cs.usfca.edu (Terence Parr)
Date: Wed, 6 Jun 2012 11:03:11 -0700
Subject: [stringtemplate-interest] ST 4.0.5 - Recursively access
	properties of model objects
In-Reply-To: <CAHgJDVpWeMDtuk=GCB9Mr-_y0oPwaXAooHeE1DypCtDAtKNq3A@mail.gmail.com>
References: <CAHgJDVr_f=7-aTzY_52C8uKprtP9y2nU1ReVvnNFG_EDkCc3mg@mail.gmail.com>
	<CAHgJDVpWeMDtuk=GCB9Mr-_y0oPwaXAooHeE1DypCtDAtKNq3A@mail.gmail.com>
Message-ID: <6A0425E6-2EF9-47DF-B99E-2683A83BA81A@cs.usfca.edu>


On May 24, 2012, at 6:21 PM, Mason Meier wrote:

> I am experimenting with String Template v4.0.5 to create some HTML pages, but I've run into an issue that I can't seem to find the answer to.  If I am injecting an object into a template and that object contains other objects, is there a way to access those other objects' properties?

Hi. you should be able to do $a.b.c$ where 'a' is an object and b is a field of that and c is a field of b.
Ter
> For example, if I am injecting a User object which has a property Address which is an object that contains the properties Street, Zip Code, City, and State, is there any way that I can use User.address.zipCode to access the Zip Code information? My Address.toString() is called and it inserts all of the information, but if I want only one property, is there any way to get it?
> 
> Thanks,
> Mason
> 
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest


From parrt at cs.usfca.edu  Wed Jun  6 11:06:01 2012
From: parrt at cs.usfca.edu (Terence Parr)
Date: Wed, 6 Jun 2012 11:06:01 -0700
Subject: [stringtemplate-interest] joining attributes with a separator
	when some are optional
In-Reply-To: <1C448C478A6B4743AF19DBC3C3DCE1320391C3E4B61D@HMS.hm.local>
References: <1C448C478A6B4743AF19DBC3C3DCE1320391C3E4B61D@HMS.hm.local>
Message-ID: <1DD5DC9C-E190-4B6E-BEC0-168D41CFA582@cs.usfca.edu>

Hi Henno,  It seems like we would need a way to add those values into a list and then use the separator option. Failing that, I think you could do something that used conditionals because conditionals on same line throw out the \nif nothing evaluates.

<if(address)><address><endif>
<if(zipCode)<zipCode><endif>
?

Ter

On May 29, 2012, at 5:51 AM, Henno Vermeulen wrote:

> Hello,
>  
> What would be the simplest syntax with StringTemplate to join multiple attributes with a separator without getting too many separators when an attribute is empty/absent/null? This is a use case I encounter very often! I normally solve it in Java using a utility method ?joinNonBlank(separator, String? strings)? which only concats the non-blank Strings with the given separator.
>  
> For example when formatting a person?s name or address and certain attributes (e.g. surname prefix, country of address) are optional.
>  
> A complete address could be formatted as "<address>\n<zipCode> <city>\n<country>". However, I don?t want the separating ?\n? in case the country is absent and I don?t want the space between zipCode and city if either of them are absent. Similarly a person?s name may be formatted as "<firstName> <surNamePrefix> <surName>", but I don?t want a separating space in case a field is empty/absent/null.
>  
> Below you can find a failing unit test (because of extra spaces) where I would like the personTemplate changed so that it satisfies the test. (Will the solution make a difference if the attributes are part of a Person object as in "<person.firstName> < person.surNamePrefix> < person.surName>"?)
>  
> Thank you,
> Henno Vermeulen
> Huize Molenaar
>  
>      @Test
>      public void firstNamePrefixSurNameJoinedNonEmpty() {
>          // TODO how do we join multiple attributes with a separator?
>          String personTemplate = "<firstName> <surNamePrefix> <surName>";
>  
>          assertEquals(
>                    "Max Planck",
>                    new ST(personTemplate).add("firstName", "Max")
>                             .add("surName", "Planck").render());
>          assertEquals("Einstein",
>                    new ST(personTemplate).add("surName","Einstein").render());
>          assertEquals("Albert", new ST(personTemplate)
>                    .add("firstName", "Albert").render());
>          assertEquals("Johannes Diderik van der Waals",
>                    new ST(personTemplate).add("firstName", "Johannes Diderik")
>                             .add("surNamePrefix", "van der")
>                             .add("surName", "Waals"), vanDerWaals);
>      }
>  
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest


From parrt at cs.usfca.edu  Wed Jun  6 11:06:58 2012
From: parrt at cs.usfca.edu (Terence Parr)
Date: Wed, 6 Jun 2012 11:06:58 -0700
Subject: [stringtemplate-interest] joining attributes with a separator
	when	some are optional
In-Reply-To: <1C448C478A6B4743AF19DBC3C3DCE1320391C3E4B636@HMS.hm.local>
References: <1C448C478A6B4743AF19DBC3C3DCE1320391C3E4B61D@HMS.hm.local>
	<1C448C478A6B4743AF19DBC3C3DCE1320391C3E4B636@HMS.hm.local>
Message-ID: <C006ABE2-80C0-448A-AF26-300896DFB902@cs.usfca.edu>


On May 29, 2012, at 6:54 AM, Henno Vermeulen wrote:

> There is a problem in my unit test, the last ?, vanDerWaals? should be replaced by ?.render()?.
>  
> I found that "<[firstName, surNamePrefix, surName]; separator=\" \">" seems to work well,

oh right! doh.

> however with errors printed to the console for my unit test because they are missing. This can be solved by explicitly setting these to null.

Or define them as attributes of the template and that message should go away. I believe that there is a constructor for that.

Ter
> So when working with a Person JavaBean we could do something like the following. Unfortunately we still need to explicitly pass nulls instead of empty strings. Perhaps I can create a subtemplate for this and as a bonus also make the separator a parameter of the subtemplate to clean up the syntax a bit.
>  
>      static class Person {
>          public String firstName;
>          public String surNamePrefix;
>          public String surName;
>  
>          public Person(String firstName, String surNameSurNamePrefix,
>                    String surName) {
>               this.firstName = firstName;
>               this.surNamePrefix = surNameSurNamePrefix;
>               this.surName = surName;
>          }
>      }
>  
>      @Test
>      public void personFirstNamePrefixSurNameJoinedNonEmpty() {
>          String personTemplate =
>                    "<[person.firstName, person.surNamePrefix, person.surName]; separator=\" \">";
>  
>          assertEquals(
>                    "Max Planck",
>                    new ST(personTemplate).add("person",
>                             new Person("Max", null, "Planck")).render());
>          assertEquals(
>                    "Einstein",
>                    new ST(personTemplate).add("person",
>                             new Person(null, null, "Einstein")).render());
>          assertEquals(
>                    "Albert",
>                    new ST(personTemplate).add("person",
>                             new Person("Albert", null, null)).render());
>          assertEquals(
>                    "Johannes Diderik van der Waals",
>                    new ST(personTemplate).add("person",
>                             new Person("Johannes Diderik", "van der", "Waals"))
>                             .render());
>      }
>  
> Henno
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest


From henno at huizemolenaar.nl  Mon Jun 11 02:16:16 2012
From: henno at huizemolenaar.nl (Henno Vermeulen)
Date: Mon, 11 Jun 2012 11:16:16 +0200
Subject: [stringtemplate-interest] joining attributes with a separator
 when	some are optional
In-Reply-To: <C006ABE2-80C0-448A-AF26-300896DFB902@cs.usfca.edu>
References: <1C448C478A6B4743AF19DBC3C3DCE1320391C3E4B61D@HMS.hm.local>
	<1C448C478A6B4743AF19DBC3C3DCE1320391C3E4B636@HMS.hm.local>
	<C006ABE2-80C0-448A-AF26-300896DFB902@cs.usfca.edu>
Message-ID: <1C448C478A6B4743AF19DBC3C3DCE1320394A652C8C7@HMS.hm.local>

Thank you for the response. In my original example explicitly passing null solves the problem of undefined attributes.
 
Rephrasing my actual goal: I would like that empty Strings don't get joined with an extra separator. My template already does this when they are null.

So for example I would like that the template <[person.firstName, person.surNamePrefix, person.surName]; separator=" "> applied to new Person("Max", "", "Planck")
Renders "Max Planck" with only one space, not two.

Hopefully the template can be change with a minimal amount of extra syntax. It would be even better if whitespaces are ignored too but it is arguable that it's the responsibility of the code that uses the template that these are trimmed to an empty String before passing in the Person to the template. But it would be ugly to set the surNamePrefix to null in the model just to please the template.

Henno

-----Oorspronkelijk bericht-----
Van: Terence Parr [mailto:parrt at cs.usfca.edu] 
Verzonden: woensdag 6 juni 2012 20:07
Aan: Henno Vermeulen
CC: 'stringtemplate-interest at antlr.org'
Onderwerp: Re: [stringtemplate-interest] joining attributes with a separator when some are optional


On May 29, 2012, at 6:54 AM, Henno Vermeulen wrote:

> There is a problem in my unit test, the last ", vanDerWaals" should be replaced by ".render()".
>  
> I found that "<[firstName, surNamePrefix, surName]; separator=\" \">" seems to work well,

oh right! doh.

> however with errors printed to the console for my unit test because they are missing. This can be solved by explicitly setting these to null.

Or define them as attributes of the template and that message should go away. I believe that there is a constructor for that.

Ter
> So when working with a Person JavaBean we could do something like the following. Unfortunately we still need to explicitly pass nulls instead of empty strings. Perhaps I can create a subtemplate for this and as a bonus also make the separator a parameter of the subtemplate to clean up the syntax a bit.
>  
>      static class Person {
>          public String firstName;
>          public String surNamePrefix;
>          public String surName;
>  
>          public Person(String firstName, String surNameSurNamePrefix,
>                    String surName) {
>               this.firstName = firstName;
>               this.surNamePrefix = surNameSurNamePrefix;
>               this.surName = surName;
>          }
>      }
>  
>      @Test
>      public void personFirstNamePrefixSurNameJoinedNonEmpty() {
>          String personTemplate =
>                    "<[person.firstName, person.surNamePrefix, person.surName]; separator=\" \">";
>  
>          assertEquals(
>                    "Max Planck",
>                    new ST(personTemplate).add("person",
>                             new Person("Max", null, "Planck")).render());
>          assertEquals(
>                    "Einstein",
>                    new ST(personTemplate).add("person",
>                             new Person(null, null, "Einstein")).render());
>          assertEquals(
>                    "Albert",
>                    new ST(personTemplate).add("person",
>                             new Person("Albert", null, null)).render());
>          assertEquals(
>                    "Johannes Diderik van der Waals",
>                    new ST(personTemplate).add("person",
>                             new Person("Johannes Diderik", "van der", "Waals"))
>                             .render());
>      }
>  
> Henno
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest



From edward.coffey at gmail.com  Sun Jun 17 17:00:04 2012
From: edward.coffey at gmail.com (Edward Coffey)
Date: Mon, 18 Jun 2012 10:00:04 +1000
Subject: [stringtemplate-interest] Web template caching
Message-ID: <CALTvmmL_TDaOapFR3=jcEbOoSEL7K2O6yeDrBy6J3FM5LVVAHw@mail.gmail.com>

Hi,

I'm attempting to use ST4 to do fairly simple web templating using raw
templates. STRawGroupDir and the getInstanceOf method seems to be the
recommended approach according to the documentation I've read. This method
checks STGroup's templates map to see if there's already a CompiledST
instance there, never stores anything in the map, so every request attempts
to load the template as a .stg file, fails, then actually loads the correct
.st file. Even without the first attempted load, opening a file for every
hit on the web server is far too many opens.

In a sleep-deprived state last night I reimplemented STRawGroupDir's load
method, having it store any CompiledST it produces in a cache (not
STGroup's templates map, but an independent EHCache instance). It works,
increases performance, and gets rid of the occasional "too many open files"
error I was getting under high load.

In the cold light of day, that seems like a brave (foolish) approach, given
how little I know of the internals of ST4 (in general, and specifically in
regard to the thread safety of CompiledST instances). It seems like I'm
probably missing something pretty fundamental here - like "is getInstanceOf
even the right method to call, or is there an alternative method if I want
to avoid the file-open hit each time?" or similar questions. Can someone
point me in the right direction?

Regards,
Ed.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20120618/745c052b/attachment.html 

From jimi at temporal-wave.com  Wed Jun 20 04:05:04 2012
From: jimi at temporal-wave.com (Jim Idle)
Date: Wed, 20 Jun 2012 19:05:04 +0800
Subject: [stringtemplate-interest] [antlr-interest] Antlr3 in Eclipse
	and Maven?
In-Reply-To: <CAH2etF5MhfzMVfxY0+ngtmTfJBKfz0kz4fhetLAb263UEYuvWA@mail.gmail.com>
References: <CAH2etF5MhfzMVfxY0+ngtmTfJBKfz0kz4fhetLAb263UEYuvWA@mail.gmail.com>
Message-ID: <5fad0d88143479e6ddd6b55683ff75d9@mail.gmail.com>

You are probably using the wrong Maven plugin. Find the docs in the wiki
and it will tell you the correct name,

JIm

-----Original Message-----
From: antlr-interest-bounces at antlr.org
[mailto:antlr-interest-bounces at antlr.org] On Behalf Of Brad Cox
Sent: Wednesday, June 20, 2012 6:48 PM
To: Terence Parr; ANTLR interest; stringtemplate-interest at antlr.org List
Subject: [antlr-interest] Antlr3 in Eclipse and Maven?

I've an antlr3 grammar that compiles fine in AntlrWorks. I'm trying to
load it into Eclipse with Maven to start work on the non-grammar bits.

Problem is it won't compile in either. Error flags are on the first line,
grammar ...;, and nothing I've tried will remove them. Somehow antlr2 is
getting involved in the compile step.

The dependency list shows antlr-runtime-3.2.jar and stringtemplate-3.2.jar
now. Previously there was an antlr2 jar that I've explicitly excluded.
Didn't make a difference.

My best guess is that the antlr3 maven plugin is launching antlr2, not
antlr3, but I have no visibility into what that plugin is doing.

<groupId>org.antlr</groupId>
<artifactId>antlr3-maven-plugin</artifactId>
<version>3.1.3-1</version

There's also likely confusion over which eclipse plugin I should be using.
After some searching I removed everything but the one from certiv, but no
joy.

Could someone point me to a known-to-work reference? Thanks!

List: http://www.antlr.org/mailman/listinfo/antlr-interest
Unsubscribe:
http://www.antlr.org/mailman/options/antlr-interest/your-email-address

From baerrach at gmail.com  Wed Jun 20 15:48:54 2012
From: baerrach at gmail.com (Barrie Treloar)
Date: Thu, 21 Jun 2012 08:18:54 +0930
Subject: [stringtemplate-interest] Fwd: [antlr-interest] Antlr3 in Eclipse
	and Maven?
In-Reply-To: <CADVp3v8AV2UArqMb7kMyhAePoOzTi1ZUquYGKc-5w_FZJbSMhw@mail.gmail.com>
References: <CAH2etF5MhfzMVfxY0+ngtmTfJBKfz0kz4fhetLAb263UEYuvWA@mail.gmail.com>
	<5fad0d88143479e6ddd6b55683ff75d9@mail.gmail.com>
	<CADVp3v8AV2UArqMb7kMyhAePoOzTi1ZUquYGKc-5w_FZJbSMhw@mail.gmail.com>
Message-ID: <CADVp3v_mvdZ-QN3y36U70PwCftCwY9iowW2QzBpGoSdzkZuk3Q@mail.gmail.com>

(Apologies Jim, reply doesn't do the expected thing, needed reply all).

---------- Forwarded message ----------
From: Barrie Treloar <baerrach at gmail.com>
Date: Thu, Jun 21, 2012 at 8:17 AM
Subject: Re: [stringtemplate-interest] [antlr-interest] Antlr3 in
Eclipse and Maven?
To: Jim Idle <jimi at temporal-wave.com>


On Wed, Jun 20, 2012 at 8:35 PM, Jim Idle <jimi at temporal-wave.com> wrote:
[del]
> The dependency list shows antlr-runtime-3.2.jar and stringtemplate-3.2.jar
> now. Previously there was an antlr2 jar that I've explicitly excluded.
> Didn't make a difference.
>
> My best guess is that the antlr3 maven plugin is launching antlr2, not
> antlr3, but I have no visibility into what that plugin is doing.
>
> <groupId>org.antlr</groupId>
> <artifactId>antlr3-maven-plugin</artifactId>
> <version>3.1.3-1</version
>
> There's also likely confusion over which eclipse plugin I should be using.
> After some searching I removed everything but the one from certiv, but no
> joy.

Run mvn -X and read the output carefully.
I'd save it to a file for inspection.

You should be able to clearly see the incorrect versions being used
and who are the culprits.

Either fix your pom because you have specified the wrong ones,
or you need to use dependencyManagement to exclude the incorrect
dependency from the offending plugin/artifact and then re-provide the
version you want.

I can't help with the eclipse plugin stuff.
I've only looked for an eclipse plugin for StringTemplate, ANTLR
grammar was sufficiently simple an Eclipse text editor was fine.

From scott at houchin.us  Mon Jun 25 10:54:12 2012
From: scott at houchin.us (Scott Houchin)
Date: Mon, 25 Jun 2012 13:54:12 -0400
Subject: [stringtemplate-interest] Formatting vs. Escaping in an
	AttributeRenderer
Message-ID: <CAHnygtGMuN9a1ntNxQUAfn6Evh5yQWBQkLpZkgkC8yyE9Xodcw@mail.gmail.com>

Hi all,

I have been using StringTemplate on a project and have run into two of
the same issues Tobias posted about last September. In reviewing the
email chain, it appears that the discussion died with some of Udo's
questions left unanswered, specifically looking for a concrete
example. Here's a shot at that example: MIME multipart-alternate
e-mail, plaintext and HTML.

I want to create a set of text values ONCE, say in a hash, that I can
then add to the two templates without modification, and get the
correct escaping in each case. For example:

plain-alternate(data) ::= <<
Send me email at $data.email$
>>

html-alternate(data) ::= <<
<html><body><p>Send me email at $data.email; format="encode"$</p></body></html>
>>

STGroupDir plainGroup = new STGroupDir("/path/to/plain/templates");
STGroupDir htmlGroup = new STGroupDir("/path/to/html/templates");
htmlGroup.registerRenderer(String.class, new HtmlEncoder());

LinkedHashMap<String, String> data = new LinkedHashMap<String, String>();
data.put("email", "John Doe <john at doe.com>");

ST plain = plainGroup.getInstanceOf("plain-alternate");
plain.add("data", data);
message.addPart("text/plain", plain.render());

ST html = htmlGroup.getInstanceOf("html-alternate");
html.add("data", data);
message.addPart("text/html", html.render());

For the plaintext template, I don't need the encoder, but for the HTML
template, I need the <> characters encoded. Of course, I still have to
create two separate template groups, I have to remember to attach the
format to every single variable in the template, and I've got to
create multiple template groups.


What I really want is to be able to set renderers on a per-template
basis, with the ability for my code to give sets of renders based on
file type, with the STGroup automatically determining the file type.
Assuming the core STGroup capability was added for different
templates, it seems reasonable to extend STRawGroupDir to look at the
file extension for the file type, using that to associate renderers
with that specific template:

STImprovedRawGroupDir group = new STImprovedRawGroupDir("/path/to/templates");
group.registerRenderer("html", String.class, new HtmlEncoder());

LinkedHashMap<String, String> data = new LinkedHashMap<String, String>();
data.put("email", "John Doe <john at doe.com>");

ST plain = group.getInstanceOf("sendmeanemail.txt");
plain.add("data", data);
message.addPart(plain.getContentType(), plain.render());

ST html = htmlGroup.getInstanceOf("sendmeanemail.html");
html.add("data", data);
message.addPart(html.getContentType(), html.render());


But also to echo another of Tobias' comments, I don't want to have to
put format="encode" in each variable in the template; as he said,
that's the fastest way to ensure that an important field somewhere
will not get encoded.


Regards,
Scott Houchin


>It looks like I still don't understand the context of your questions. Can you give a full "real life" example explaining your issues?
>
>Udo
>
>On 12.09.2011, at 04:28, Tobias G?ntner wrote:
>
>> Am 11.09.2011 23:17, schrieb Udo Borkowski:
>>>> * It interferes with "normal" renderer usage, i.e., I can either escape
>>>> or format, but not both.
>>>
>>> There are several ways to solve this. Some time ago Colin Fagan
>>> suggested a "MultiFormatStringRenderer" that allows specify multiple
>>> "formats" in one "format" string.
>>
>> Well, yes. But I am looking for a cleaner solution (even if this means I
>> have to wait for ST5). I don't want to end up with a Swiss army
>> knife^wrenderer which can handle dates, numbers, 19 custom model
>> objects, which knows 57 vital string transformations ("upper" plus 56
>> others) and 21 different escape modes, and which can make tea in 30
>> different locales - all controlled by a single format string which
>> requires a grammar to parse. ;)
>>
>>>> * I have to remember to specify the correct format everywhere.
>>> Seems like a good idea to me.
>>>
>>> But maybe I don't get your point. Can you give a concrete example to
>>> make it clearer?
>>
>> It is not a good idea. If I have to remember doing something again and
>> again and again, I am bound to forget it now and then. If ST does it by
>> default, I cannot forget it. Consequence: I create less bugs.
>>
>>> In your AttributeRenderer you need to check for the formatString.
>> [...]
>>> If you don't do this check you will get strange results, like the
>>> [start]?[end] you saw.
>>
>> What I don't understand: Why are string literals fed into an
>> AttributeRenderer? After all, it's an AttributeRenderer, not a
>> StringLiteralRenderer or TemplateOutputASecondTimeRenderer. ;)
>> This just does not make sense to me.
>>
>> Regards,
>> Tobias

From parrt at cs.usfca.edu  Sat Jun 30 12:14:30 2012
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sat, 30 Jun 2012 12:14:30 -0700
Subject: [stringtemplate-interest] joining attributes with a separator
	when	some are optional
In-Reply-To: <1C448C478A6B4743AF19DBC3C3DCE1320394A652C8C7@HMS.hm.local>
References: <1C448C478A6B4743AF19DBC3C3DCE1320391C3E4B61D@HMS.hm.local>
	<1C448C478A6B4743AF19DBC3C3DCE1320391C3E4B636@HMS.hm.local>
	<C006ABE2-80C0-448A-AF26-300896DFB902@cs.usfca.edu>
	<1C448C478A6B4743AF19DBC3C3DCE1320394A652C8C7@HMS.hm.local>
Message-ID: <1FC4D8D0-6874-449D-A411-9BE496FDE90B@cs.usfca.edu>


On Jun 11, 2012, at 2:16 AM, Henno Vermeulen wrote:

> Thank you for the response. In my original example explicitly passing null solves the problem of undefined attributes.
> 
> Rephrasing my actual goal: I would like that empty Strings don't get joined with an extra separator. My template already does this when they are null.

Hmm?well, ST differentiate between "not there" and "there but invisibly thin" :)

> So for example I would like that the template <[person.firstName, person.surNamePrefix, person.surName]; separator=" "> applied to new Person("Max", "", "Planck")
> Renders "Max Planck" with only one space, not two.

I think that this is really an issue for the model.   You could always make a quick change to the library so it accepted another option called empty="?" or whatever.

T


From parrt at cs.usfca.edu  Sat Jun 30 12:16:09 2012
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sat, 30 Jun 2012 12:16:09 -0700
Subject: [stringtemplate-interest] Web template caching
In-Reply-To: <CALTvmmL_TDaOapFR3=jcEbOoSEL7K2O6yeDrBy6J3FM5LVVAHw@mail.gmail.com>
References: <CALTvmmL_TDaOapFR3=jcEbOoSEL7K2O6yeDrBy6J3FM5LVVAHw@mail.gmail.com>
Message-ID: <2F55860E-E1C2-486B-A126-15556A10AE2A@cs.usfca.edu>

Hi Ed,Sorry for the delay?I'm completely overwhelms doing 2 jobs and work until probably September or October. ugh!

yeah, I can't remember what my philosophy was a few years ago concerning caching but I likely decided that it was an easy fix for someone to create a subclass of STGroup to handle.

 Unfortunately, I don't have time at the moment to go dig into the software to try to remember what I intended? as anybody else tried to do some caching?
Ter
On Jun 17, 2012, at 5:00 PM, Edward Coffey wrote:

> Hi,
> 
> I'm attempting to use ST4 to do fairly simple web templating using raw templates. STRawGroupDir and the getInstanceOf method seems to be the recommended approach according to the documentation I've read. This method checks STGroup's templates map to see if there's already a CompiledST instance there, never stores anything in the map, so every request attempts to load the template as a .stg file, fails, then actually loads the correct .st file. Even without the first attempted load, opening a file for every hit on the web server is far too many opens.
> 
> In a sleep-deprived state last night I reimplemented STRawGroupDir's load method, having it store any CompiledST it produces in a cache (not STGroup's templates map, but an independent EHCache instance). It works, increases performance, and gets rid of the occasional "too many open files" error I was getting under high load.
> 
> In the cold light of day, that seems like a brave (foolish) approach, given how little I know of the internals of ST4 (in general, and specifically in regard to the thread safety of CompiledST instances). It seems like I'm probably missing something pretty fundamental here - like "is getInstanceOf even the right method to call, or is there an alternative method if I want to avoid the file-open hit each time?" or similar questions. Can someone point me in the right direction?
> 
> Regards, 
> Ed.
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest


From parrt at cs.usfca.edu  Sat Jun 30 12:19:05 2012
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sat, 30 Jun 2012 12:19:05 -0700
Subject: [stringtemplate-interest] Formatting vs. Escaping in an
	AttributeRenderer
In-Reply-To: <CAHnygtGMuN9a1ntNxQUAfn6Evh5yQWBQkLpZkgkC8yyE9Xodcw@mail.gmail.com>
References: <CAHnygtGMuN9a1ntNxQUAfn6Evh5yQWBQkLpZkgkC8yyE9Xodcw@mail.gmail.com>
Message-ID: <F37EEFA0-9B91-47E0-9B94-1B535EFCB318@cs.usfca.edu>

Hi Scott, can't you just set up a renderer for String.class per group?   you would register one for the plain group and one for HTML? I admit to reading this quickly, but don't the registers do precisely what you're asking for now and you don't want it on a per template basis?

Ter
On Jun 25, 2012, at 10:54 AM, Scott Houchin wrote:

> Hi all,
> 
> I have been using StringTemplate on a project and have run into two of
> the same issues Tobias posted about last September. In reviewing the
> email chain, it appears that the discussion died with some of Udo's
> questions left unanswered, specifically looking for a concrete
> example. Here's a shot at that example: MIME multipart-alternate
> e-mail, plaintext and HTML.
> 
> I want to create a set of text values ONCE, say in a hash, that I can
> then add to the two templates without modification, and get the
> correct escaping in each case. For example:
> 
> plain-alternate(data) ::= <<
> Send me email at $data.email$
>>> 
> 
> html-alternate(data) ::= <<
> <html><body><p>Send me email at $data.email; format="encode"$</p></body></html>
>>> 
> 
> STGroupDir plainGroup = new STGroupDir("/path/to/plain/templates");
> STGroupDir htmlGroup = new STGroupDir("/path/to/html/templates");
> htmlGroup.registerRenderer(String.class, new HtmlEncoder());
> 
> LinkedHashMap<String, String> data = new LinkedHashMap<String, String>();
> data.put("email", "John Doe <john at doe.com>");
> 
> ST plain = plainGroup.getInstanceOf("plain-alternate");
> plain.add("data", data);
> message.addPart("text/plain", plain.render());
> 
> ST html = htmlGroup.getInstanceOf("html-alternate");
> html.add("data", data);
> message.addPart("text/html", html.render());
> 
> For the plaintext template, I don't need the encoder, but for the HTML
> template, I need the <> characters encoded. Of course, I still have to
> create two separate template groups, I have to remember to attach the
> format to every single variable in the template, and I've got to
> create multiple template groups.
> 
> 
> What I really want is to be able to set renderers on a per-template
> basis, with the ability for my code to give sets of renders based on
> file type, with the STGroup automatically determining the file type.
> Assuming the core STGroup capability was added for different
> templates, it seems reasonable to extend STRawGroupDir to look at the
> file extension for the file type, using that to associate renderers
> with that specific template:
> 
> STImprovedRawGroupDir group = new STImprovedRawGroupDir("/path/to/templates");
> group.registerRenderer("html", String.class, new HtmlEncoder());
> 
> LinkedHashMap<String, String> data = new LinkedHashMap<String, String>();
> data.put("email", "John Doe <john at doe.com>");
> 
> ST plain = group.getInstanceOf("sendmeanemail.txt");
> plain.add("data", data);
> message.addPart(plain.getContentType(), plain.render());
> 
> ST html = htmlGroup.getInstanceOf("sendmeanemail.html");
> html.add("data", data);
> message.addPart(html.getContentType(), html.render());
> 
> 
> But also to echo another of Tobias' comments, I don't want to have to
> put format="encode" in each variable in the template; as he said,
> that's the fastest way to ensure that an important field somewhere
> will not get encoded.
> 
> 
> Regards,
> Scott Houchin
> 
> 
>> It looks like I still don't understand the context of your questions. Can you give a full "real life" example explaining your issues?
>> 
>> Udo
>> 
>> On 12.09.2011, at 04:28, Tobias G?ntner wrote:
>> 
>>> Am 11.09.2011 23:17, schrieb Udo Borkowski:
>>>>> * It interferes with "normal" renderer usage, i.e., I can either escape
>>>>> or format, but not both.
>>>> 
>>>> There are several ways to solve this. Some time ago Colin Fagan
>>>> suggested a "MultiFormatStringRenderer" that allows specify multiple
>>>> "formats" in one "format" string.
>>> 
>>> Well, yes. But I am looking for a cleaner solution (even if this means I
>>> have to wait for ST5). I don't want to end up with a Swiss army
>>> knife^wrenderer which can handle dates, numbers, 19 custom model
>>> objects, which knows 57 vital string transformations ("upper" plus 56
>>> others) and 21 different escape modes, and which can make tea in 30
>>> different locales - all controlled by a single format string which
>>> requires a grammar to parse. ;)
>>> 
>>>>> * I have to remember to specify the correct format everywhere.
>>>> Seems like a good idea to me.
>>>> 
>>>> But maybe I don't get your point. Can you give a concrete example to
>>>> make it clearer?
>>> 
>>> It is not a good idea. If I have to remember doing something again and
>>> again and again, I am bound to forget it now and then. If ST does it by
>>> default, I cannot forget it. Consequence: I create less bugs.
>>> 
>>>> In your AttributeRenderer you need to check for the formatString.
>>> [...]
>>>> If you don't do this check you will get strange results, like the
>>>> [start]?[end] you saw.
>>> 
>>> What I don't understand: Why are string literals fed into an
>>> AttributeRenderer? After all, it's an AttributeRenderer, not a
>>> StringLiteralRenderer or TemplateOutputASecondTimeRenderer. ;)
>>> This just does not make sense to me.
>>> 
>>> Regards,
>>> Tobias
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest


From scott at houchin.us  Sat Jun 30 22:02:39 2012
From: scott at houchin.us (Scott Houchin)
Date: Sun, 1 Jul 2012 01:02:39 -0400
Subject: [stringtemplate-interest] Formatting vs. Escaping in an
	AttributeRenderer
In-Reply-To: <F37EEFA0-9B91-47E0-9B94-1B535EFCB318@cs.usfca.edu>
References: <CAHnygtGMuN9a1ntNxQUAfn6Evh5yQWBQkLpZkgkC8yyE9Xodcw@mail.gmail.com>
	<F37EEFA0-9B91-47E0-9B94-1B535EFCB318@cs.usfca.edu>
Message-ID: <CAHnygtGQR3xnJzGaG2aO8trZg5ZnSfs=ATvqsBdW6wEVXgpv6A@mail.gmail.com>

Hi Ter,

It may not have been clear from my original note, but I don't want to
have to have multiple template groups, thus placing the burden on the
application specific Java code and on the application specific
template "code" to properly determine how to encode data inserted into
that template; it seems better from a reuse perspective if the logic
to properly encode data inserted into an HTML-producing template was
in the template engine.

>From the testing I did, the renderer could not be used to default
everything to HTML encoding because all text from the template, even
the literal text like "<html><body>..." gets put through the renderer,
and thus encodes the real HTML element markers.

I'm not sure if an ObjectModelAdapter would work, but I haven't gotten
to try that yet.

Regards,
Scott Houchin

On Sat, Jun 30, 2012 at 3:19 PM, Terence Parr <parrt at cs.usfca.edu> wrote:
> Hi Scott, can't you just set up a renderer for String.class per group? ? you would register one for the plain group and one for HTML? I admit to reading this quickly, but don't the registers do precisely what you're asking for now and you don't want it on a per template basis?
>
> Ter
> On Jun 25, 2012, at 10:54 AM, Scott Houchin wrote:
>
>> Hi all,
>>
>> I have been using StringTemplate on a project and have run into two of
>> the same issues Tobias posted about last September. In reviewing the
>> email chain, it appears that the discussion died with some of Udo's
>> questions left unanswered, specifically looking for a concrete
>> example. Here's a shot at that example: MIME multipart-alternate
>> e-mail, plaintext and HTML.
>>
>> I want to create a set of text values ONCE, say in a hash, that I can
>> then add to the two templates without modification, and get the
>> correct escaping in each case. For example:
>>
>> plain-alternate(data) ::= <<
>> Send me email at $data.email$
>>>>
>>
>> html-alternate(data) ::= <<
>> <html><body><p>Send me email at $data.email; format="encode"$</p></body></html>
>>>>
>>
>> STGroupDir plainGroup = new STGroupDir("/path/to/plain/templates");
>> STGroupDir htmlGroup = new STGroupDir("/path/to/html/templates");
>> htmlGroup.registerRenderer(String.class, new HtmlEncoder());
>>
>> LinkedHashMap<String, String> data = new LinkedHashMap<String, String>();
>> data.put("email", "John Doe <john at doe.com>");
>>
>> ST plain = plainGroup.getInstanceOf("plain-alternate");
>> plain.add("data", data);
>> message.addPart("text/plain", plain.render());
>>
>> ST html = htmlGroup.getInstanceOf("html-alternate");
>> html.add("data", data);
>> message.addPart("text/html", html.render());
>>
>> For the plaintext template, I don't need the encoder, but for the HTML
>> template, I need the <> characters encoded. Of course, I still have to
>> create two separate template groups, I have to remember to attach the
>> format to every single variable in the template, and I've got to
>> create multiple template groups.
>>
>>
>> What I really want is to be able to set renderers on a per-template
>> basis, with the ability for my code to give sets of renders based on
>> file type, with the STGroup automatically determining the file type.
>> Assuming the core STGroup capability was added for different
>> templates, it seems reasonable to extend STRawGroupDir to look at the
>> file extension for the file type, using that to associate renderers
>> with that specific template:
>>
>> STImprovedRawGroupDir group = new STImprovedRawGroupDir("/path/to/templates");
>> group.registerRenderer("html", String.class, new HtmlEncoder());
>>
>> LinkedHashMap<String, String> data = new LinkedHashMap<String, String>();
>> data.put("email", "John Doe <john at doe.com>");
>>
>> ST plain = group.getInstanceOf("sendmeanemail.txt");
>> plain.add("data", data);
>> message.addPart(plain.getContentType(), plain.render());
>>
>> ST html = htmlGroup.getInstanceOf("sendmeanemail.html");
>> html.add("data", data);
>> message.addPart(html.getContentType(), html.render());
>>
>>
>> But also to echo another of Tobias' comments, I don't want to have to
>> put format="encode" in each variable in the template; as he said,
>> that's the fastest way to ensure that an important field somewhere
>> will not get encoded.
>>
>>
>> Regards,
>> Scott Houchin
>>
>>
>>> It looks like I still don't understand the context of your questions. Can you give a full "real life" example explaining your issues?
>>>
>>> Udo
>>>
>>> On 12.09.2011, at 04:28, Tobias G?ntner wrote:
>>>
>>>> Am 11.09.2011 23:17, schrieb Udo Borkowski:
>>>>>> * It interferes with "normal" renderer usage, i.e., I can either escape
>>>>>> or format, but not both.
>>>>>
>>>>> There are several ways to solve this. Some time ago Colin Fagan
>>>>> suggested a "MultiFormatStringRenderer" that allows specify multiple
>>>>> "formats" in one "format" string.
>>>>
>>>> Well, yes. But I am looking for a cleaner solution (even if this means I
>>>> have to wait for ST5). I don't want to end up with a Swiss army
>>>> knife^wrenderer which can handle dates, numbers, 19 custom model
>>>> objects, which knows 57 vital string transformations ("upper" plus 56
>>>> others) and 21 different escape modes, and which can make tea in 30
>>>> different locales - all controlled by a single format string which
>>>> requires a grammar to parse. ;)
>>>>
>>>>>> * I have to remember to specify the correct format everywhere.
>>>>> Seems like a good idea to me.
>>>>>
>>>>> But maybe I don't get your point. Can you give a concrete example to
>>>>> make it clearer?
>>>>
>>>> It is not a good idea. If I have to remember doing something again and
>>>> again and again, I am bound to forget it now and then. If ST does it by
>>>> default, I cannot forget it. Consequence: I create less bugs.
>>>>
>>>>> In your AttributeRenderer you need to check for the formatString.
>>>> [...]
>>>>> If you don't do this check you will get strange results, like the
>>>>> [start]?[end] you saw.
>>>>
>>>> What I don't understand: Why are string literals fed into an
>>>> AttributeRenderer? After all, it's an AttributeRenderer, not a
>>>> StringLiteralRenderer or TemplateOutputASecondTimeRenderer. ;)
>>>> This just does not make sense to me.
>>>>
>>>> Regards,
>>>> Tobias
>> _______________________________________________
>> stringtemplate-interest mailing list
>> stringtemplate-interest at antlr.org
>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>

