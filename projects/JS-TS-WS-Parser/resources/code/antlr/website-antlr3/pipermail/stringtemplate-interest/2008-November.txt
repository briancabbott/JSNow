From sharwell at pixelminegames.com  Fri Nov  7 15:21:28 2008
From: sharwell at pixelminegames.com (Sam Harwell)
Date: Fri, 7 Nov 2008 17:21:28 -0600
Subject: [stringtemplate-interest] Updated Visual Studio language service,
	includes a C# port of the ANTLR tool
Message-ID: <86403CA0939415448BCCB83855EFE09A64E7ED@Bloodymary.ironwillgames.com>

I posted another preview release of our ANTLR dev tool suite that's in
development.

 

http://wiki.pixelminegames.com/index.php?title=Tools:nFringe:Antlr:Relea
ses

 

Major new items:

*         StringTemplate syntax highlighting

*         C# port of the Antlr tool itself (Antlr3.exe), up-to-date on
the 3.2 development work as of 11/7/08

 

Eventually the source code for the new C# ports of StringTemplate, Antlr
tool, and the new CSharp3 Antlr runtime will be available under the BSD
license. However, I'm still working things out in it for now. This copy
of the ANTLR tool is built using entirely V3 grammars for both the Tool
and the StringTemplate library.

 

Sam Harwell

 

 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org:8080/pipermail/stringtemplate-interest/attachments/20081107/d245dd34/attachment.html 

From roma at qwertty.com  Sun Nov  9 07:17:27 2008
From: roma at qwertty.com (Roman Odaisky)
Date: Sun, 9 Nov 2008 17:17:27 +0200
Subject: [stringtemplate-interest] Multimethods
Message-ID: <200811091717.32654.roma@qwertty.com>

Greetings,

I?m developing a site using Django and StringTemplate. It has so far been 
wonderful.

However, a question has arisen which I seem unable to solve using the current 
framework.

Following Django conventions, I add ?get_absolute_url? methods to model 
classes. Then I use <a href="$something.absolute_url$"> to create links. That 
allows me to change the URL layout of the site however I like, and links stay 
correct. (The site is still under construction, so I don?t have to worry 
about dangling references.) A typical construct is:

<p>You have the following gadgets and widgets:
<ul>
$user.allof_gadget:{g|
  <li><p>$g.title$</p>
  <ol>$g.allof_widget:{w|
    <li><a href="$w.absolute_url$">$w$</a></li>
}$
  </li>
}$
</ul></p>

However, some pages need URLs that refer to more than one item, neither of 
which is deducible from the other. This one is similar to my needs:

https://bugs.launchpad.net/ubuntu/+source/linux-source-2.6.20/+bug/42160

So, what I need is to call a Python function that would determine a URL for 
two items. How is it possible to invoke such a multimethod from within 
StringTemplate? Can ST create templates that would call user-defined 
functions, like this:

stg.defineTemplate("foo", foo)

def foo(**kwargs):
    ...do something
    return something

and $foo(x=1, y=2)$ would call the function with the required keyword 
arguments?

-- 
TIA
Roman.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/pkcs7-signature
Size: 2286 bytes
Desc: not available
Url : http://www.antlr.org:8080/pipermail/stringtemplate-interest/attachments/20081109/7641bd9e/attachment.bin 

From parrt at cs.usfca.edu  Mon Nov 10 09:34:33 2008
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon, 10 Nov 2008 09:34:33 -0800
Subject: [stringtemplate-interest] Multimethods
In-Reply-To: <200811091717.32654.roma@qwertty.com>
References: <200811091717.32654.roma@qwertty.com>
Message-ID: <61EAB936-2614-4445-99EB-59BF9B19DBDE@cs.usfca.edu>

Hi. STdoesn't allow you to pass information from the template to the  
model. however, you can register a renderer for a particular Model  
class (even String) or template or group. Then it uses that renderer's  
toString(o) method to convert to text. It allows you to pass a format  
option. For example with dates you could past terse or verbose as a  
format option.

Is there a string you can pass to a renderer that can be broken apart  
to compute the proper URL? If the URL is truly computation, then it  
must be a part of the controller; the controller does the mapping of  
URL to executable code. This is case, then it would violate MVC  
separation to compute URLs in the view.

Ter

On Nov 9, 2008, at 7:17 AM, Roman Odaisky wrote:

> Greetings,
>
> I?m developing a site using Django and StringTemplate. It has so far  
> been
> wonderful.
>
> However, a question has arisen which I seem unable to solve using  
> the current
> framework.
>
> Following Django conventions, I add ?get_absolute_url? methods to  
> model
> classes. Then I use <a href="$something.absolute_url$"> to create  
> links. That
> allows me to change the URL layout of the site however I like, and  
> links stay
> correct. (The site is still under construction, so I don?t have to  
> worry
> about dangling references.) A typical construct is:
>
> <p>You have the following gadgets and widgets:
> <ul>
> $user.allof_gadget:{g|
>  <li><p>$g.title$</p>
>  <ol>$g.allof_widget:{w|
>    <li><a href="$w.absolute_url$">$w$</a></li>
> }$
>  </li>
> }$
> </ul></p>
>
> However, some pages need URLs that refer to more than one item,  
> neither of
> which is deducible from the other. This one is similar to my needs:
>
> https://bugs.launchpad.net/ubuntu/+source/linux-source-2.6.20/+bug/42160
>
> So, what I need is to call a Python function that would determine a  
> URL for
> two items. How is it possible to invoke such a multimethod from within
> StringTemplate? Can ST create templates that would call user-defined
> functions, like this:
>
> stg.defineTemplate("foo", foo)
>
> def foo(**kwargs):
>    ...do something
>    return something
>
> and $foo(x=1, y=2)$ would call the function with the required keyword
> arguments?
>
> -- 
> TIA
> Roman.
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org:8080/mailman/listinfo/stringtemplate-interest


From roma at qwertty.com  Mon Nov 10 22:46:23 2008
From: roma at qwertty.com (Roman Odaisky)
Date: Tue, 11 Nov 2008 08:46:23 +0200
Subject: [stringtemplate-interest] Multimethods
In-Reply-To: <61EAB936-2614-4445-99EB-59BF9B19DBDE@cs.usfca.edu>
References: <200811091717.32654.roma@qwertty.com>
	<61EAB936-2614-4445-99EB-59BF9B19DBDE@cs.usfca.edu>
Message-ID: <200811110846.28084.roma@qwertty.com>

On Monday, 10.11.2008 19:34:33 Terence Parr wrote:

> Is there a string you can pass to a renderer that can be broken apart
> to compute the proper URL? If the URL is truly computation, then it
> must be a part of the controller; the controller does the mapping of
> URL to executable code. This is case, then it would violate MVC
> separation to compute URLs in the view.

I need a way to say, ?Here I need a link to a page that would refer to X and 
Y?. Something like <a href="$blog_posts(y=2008, m=2, d=8)$"> that would 
result in .../2008/02/08/... or .../2008-02-08/... or something else 
depending on configuration.

To me this looks very declarative and not violating anything.

A hackish alternative would be to overload the [] operator of a class:
$URL.(y).(m).(d)$.

I could also precompute the URLs and pass them along the actual objects, but 
the amount of URLs required seems to grow too fast.

What?s wrong with the first solution?

-- 
TIA
Roman.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/pkcs7-signature
Size: 2286 bytes
Desc: not available
Url : http://www.antlr.org:8080/pipermail/stringtemplate-interest/attachments/20081111/cc04df53/attachment.bin 

From roma at qwertty.com  Tue Nov 11 03:53:32 2008
From: roma at qwertty.com (Roman Odaisky)
Date: Tue, 11 Nov 2008 13:53:32 +0200
Subject: [stringtemplate-interest] Bug in PyST 3.1: $x.(y)$ when y=0
Message-ID: <200811111353.36300.roma@qwertty.com>

Hi,

>>> st = StringTemplate("$x.(y)$")
>>> st["x"] = { "0": "zero", "1": "one" }
>>> st["y"] = 1
>>> print unicode(st)
one
>>> st = StringTemplate("$x.(y)$")
>>> st["x"] = { "0": "zero", "1": "one" }
>>> st["y"] = 0
>>> print unicode(st)

>>>

Expected: ?zero?.

Maybe it?s an ?if something:? in a place where ?if something is not None:? 
should have been used. The documentation is explicit in treating only "" and 
None as null values.

P. S. Any chance of a final PyST 3.2?

-- 
WBR
Roman
-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/pkcs7-signature
Size: 2286 bytes
Desc: not available
Url : http://www.antlr.org:8080/pipermail/stringtemplate-interest/attachments/20081111/3b300a71/attachment.bin 

From roma at qwertty.com  Tue Nov 11 06:59:32 2008
From: roma at qwertty.com (Roman Odaisky)
Date: Tue, 11 Nov 2008 16:59:32 +0200
Subject: [stringtemplate-interest] patch
In-Reply-To: <200811111353.36300.roma@qwertty.com>
References: <200811111353.36300.roma@qwertty.com>
Message-ID: <200811111659.38089.roma@qwertty.com>

> Maybe it?s an ?if something:? in a place where ?if something is not None:?
> should have been used.

Attached patch fixes it.

In getObjectProperty I have replaced ?not propertyName? with an explicit 
comparison against "" and None. In ActionEvaluator.attribute I only check for 
None, because str(None) is equal to an undesirable "None", and "" will be 
handled by subsequent getObjectProperty invocation.

-- 
HTH
Roman.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: zero.diff
Type: text/x-diff
Size: 1069 bytes
Desc: Patch that treats 0 as non-null
Url : http://www.antlr.org:8080/pipermail/stringtemplate-interest/attachments/20081111/30cc1199/attachment.bin 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/pkcs7-signature
Size: 2286 bytes
Desc: not available
Url : http://www.antlr.org:8080/pipermail/stringtemplate-interest/attachments/20081111/30cc1199/attachment-0001.bin 

From parrt at cs.usfca.edu  Tue Nov 11 09:39:07 2008
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue, 11 Nov 2008 09:39:07 -0800
Subject: [stringtemplate-interest] Multimethods
In-Reply-To: <200811110846.28084.roma@qwertty.com>
References: <200811091717.32654.roma@qwertty.com>
	<61EAB936-2614-4445-99EB-59BF9B19DBDE@cs.usfca.edu>
	<200811110846.28084.roma@qwertty.com>
Message-ID: <6857A206-DB76-44B8-A435-D21459A05ECF@cs.usfca.edu>


On Nov 10, 2008, at 10:46 PM, Roman Odaisky wrote:

> On Monday, 10.11.2008 19:34:33 Terence Parr wrote:
>
>> Is there a string you can pass to a renderer that can be broken apart
>> to compute the proper URL? If the URL is truly computation, then it
>> must be a part of the controller; the controller does the mapping of
>> URL to executable code. This is case, then it would violate MVC
>> separation to compute URLs in the view.
>
> I need a way to say, ?Here I need a link to a page that would refer  
> to X and
> Y?. Something like <a href="$blog_posts(y=2008, m=2, d=8)$"> that  
> would
> result in .../2008/02/08/... or .../2008-02-08/... or something else
> depending on configuration.
>
>
> To me this looks very declarative and not violating anything.

Yep, unless you compute.  That should work if blog_posts can just  
paste things together.  if it computes or has logic, must be in  
controller.

Ter

From harry.karadimas at hmn.aphp.fr  Wed Nov 12 06:24:28 2008
From: harry.karadimas at hmn.aphp.fr (Harry Karadimas)
Date: Wed, 12 Nov 2008 15:24:28 +0100
Subject: [stringtemplate-interest] Multimethods
In-Reply-To: <mailman.5.1226433602.31185.stringtemplate-interest@antlr.org>
Message-ID: <0KA800LSI5CYD950@mta-7.aphp.fr>

Yes, except for one little nasty requirement of Java Servlets : session
encoding
as a path parameter. If a user turns cookies off (which happens in our
hospital, rather by mistake, but our mission - critical sites must
continue to function), the Servlet container must append an url
path parameter (which is different from a request parameter) named
jsession_id. The requirement for java servlets is that every URL
must be coded using response.encodeURL(String url). 

(see
http://java.sun.com/products/servlet/2.2/javadoc/javax/servlet/http/HttpServlet
Response.html#encodeURL(java.lang.String)
)

That, unfortunately, is computation. And by design it gets very difficult
to do in st. And coding every link in the controller makes things really
too tedious for the programmers, and too restrictive for the view authors.
For the moment I cheat, by putting
the response object in a thread-local variable, and using it with a special
"url" format for strings. In this manner I can use 
<a href="$mylink;format="url"$">my link</a> but having a mechanism 
(operator or other) in st do this would be beneficial for the correct 
(= recommended by Sun) use of st in java servlets.

Best regards,

______________________________________________________________________
Dr Harry Karadimas,  Medecin Ingenieur
resp. Recherche et Developpement, Administration Wintel
Departement d'Information Hospitalier (DIH)
C.H.U. Albert Chenevier - Henri Mondor 
51, av. du Marechal de Lattre de Tassigny               94010  CRETEIL
tel : (00 33 1) 49 81 21 79                fax : (00 33 1) 49 81 27 08
secr.: (00 33 1) 49 81 23 82         m.el.:harry.karadimas at hmn.aphp.fr

Date: Tue, 11 Nov 2008 09:39:07 -0800
From: Terence Parr <parrt at cs.usfca.edu>
Subject: Re: [stringtemplate-interest] Multimethods
To: Roman Odaisky <roma at qwertty.com>
Cc: stringtemplate-interest at antlr.org
Message-ID: <6857A206-DB76-44B8-A435-D21459A05ECF at cs.usfca.edu>
Content-Type: text/plain; charset=WINDOWS-1252; format=flowed;
	delsp=yes


On Nov 10, 2008, at 10:46 PM, Roman Odaisky wrote:

> On Monday, 10.11.2008 19:34:33 Terence Parr wrote:
>
>> Is there a string you can pass to a renderer that can be broken apart 
>> to compute the proper URL? If the URL is truly computation, then it 
>> must be a part of the controller; the controller does the mapping of 
>> URL to executable code. This is case, then it would violate MVC 
>> separation to compute URLs in the view.
>
> I need a way to say, ?Here I need a link to a page that would refer to 
> X and Y?. Something like <a href="$blog_posts(y=2008, m=2, d=8)$"> 
> that would result in .../2008/02/08/... or .../2008-02-08/... or 
> something else depending on configuration.
>
>
> To me this looks very declarative and not violating anything.

Yep, unless you compute.  That should work if blog_posts can just paste things
together.  if it computes or has logic, must be in controller.

Ter

------------------------------

_______________________________________________
stringtemplate-interest mailing list
stringtemplate-interest at antlr.org
http://www.antlr.org:8080/mailman/listinfo/stringtemplate-interest


End of stringtemplate-interest Digest, Vol 44, Issue 2
******************************************************


From nward at resqsoft.com  Thu Nov 13 09:32:34 2008
From: nward at resqsoft.com (Nathan Ward)
Date: Thu, 13 Nov 2008 12:32:34 -0500
Subject: [stringtemplate-interest] Managing template parameters
Message-ID: <8DCBF4EF78C745CAB10D94682F173D8F@nwardlt>

Hello,
 
Is the only mechanism to pass information to templates is via formal
parameters when using template group files? I seem to be passing around a
couple of parameters all over the place just so a nested template a couple
of levels down can use the parameter. I know that templates can access
parameters of the enclosing template when one template calls/includes
another template even if they aren't specified as formal parameters. This
might make sense in this scenario where the alternative is to pass data
around in case some other template down the road needs it. However, I don't
know of a way to pass these values to templates via the Java API for testing
my templates using JUnit bases tests. 
 
   Nathan
 
Nathan Ward
ResQSoft, Inc.
703.861.9103
www.resqsoft.com
 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org:8080/pipermail/stringtemplate-interest/attachments/20081113/c69d96d3/attachment.html 

From parrt at cs.usfca.edu  Thu Nov 13 10:31:35 2008
From: parrt at cs.usfca.edu (Terence Parr)
Date: Thu, 13 Nov 2008 10:31:35 -0800
Subject: [stringtemplate-interest] Multimethods
In-Reply-To: <0KA800LSI5CYD950@mta-7.aphp.fr>
References: <0KA800LSI5CYD950@mta-7.aphp.fr>
Message-ID: <0BB4E989-9AD0-40F5-BF96-2CE236CE7BE1@cs.usfca.edu>


On Nov 12, 2008, at 6:24 AM, Harry Karadimas wrote:

> Yes, except for one little nasty requirement of Java Servlets :  
> session
> encoding
> as a path parameter. If a user turns cookies off (which happens in our
> hospital, rather by mistake, but our mission - critical sites must
> continue to function), the Servlet container must append an url
> path parameter (which is different from a request parameter) named
> jsession_id. The requirement for java servlets is that every URL
> must be coded using response.encodeURL(String url).

Ah.  Perhaps then you simply need to pass in the session object to the  
template and then the link template can encode that in the URL.

> (see
> http://java.sun.com/products/servlet/2.2/javadoc/javax/servlet/http/HttpServlet
> Response.html#encodeURL(java.lang.String)
> )
>
> That, unfortunately, is computation.

And definitely related to the controller not the view.

> And by design it gets very difficult
> to do in st. And coding every link in the controller makes things  
> really
> too tedious for the programmers, and too restrictive for the view  
> authors.

If you pass in session as an attribute than any template enclosed in  
your page can see that attribute through dynamic scoping. your  
template could be

blog_post(m,d,y) ::= "/y/m/d&sessionid=<session.ID>"

or whatever the field of the session is. would that work?

Ter

From parrt at cs.usfca.edu  Thu Nov 13 10:32:23 2008
From: parrt at cs.usfca.edu (Terence Parr)
Date: Thu, 13 Nov 2008 10:32:23 -0800
Subject: [stringtemplate-interest] Managing template parameters
In-Reply-To: <8DCBF4EF78C745CAB10D94682F173D8F@nwardlt>
References: <8DCBF4EF78C745CAB10D94682F173D8F@nwardlt>
Message-ID: <A1AE6F3D-F51F-4E5E-8E91-E2E4298025D1@cs.usfca.edu>


On Nov 13, 2008, at 9:32 AM, Nathan Ward wrote:

> Hello,
>
> Is the only mechanism to pass information to templates is via formal  
> parameters when using template group files?

They can see any attribute of any template enclosing. For example, if  
you set the page name in the overall page template, any template  
embedded in that page, no matter how deeply nested, can reference that  
attribute.
Ter

From nward at resqsoft.com  Thu Nov 13 11:50:41 2008
From: nward at resqsoft.com (Nathan Ward)
Date: Thu, 13 Nov 2008 14:50:41 -0500
Subject: [stringtemplate-interest] Managing template parameters
In-Reply-To: <A1AE6F3D-F51F-4E5E-8E91-E2E4298025D1@cs.usfca.edu>
References: <8DCBF4EF78C745CAB10D94682F173D8F@nwardlt>
	<A1AE6F3D-F51F-4E5E-8E91-E2E4298025D1@cs.usfca.edu>
Message-ID: <D070D14AD5664B16966B15441B736FA6@nwardlt>

I'm aware of that, but how can I make a JUnit test for the subtemplate if it
uses an attribute that is not passed as a formal parameter? Hmmm, I guess I
can create a template inline in my test code that uses the template that I'm
testing, which is a string group template file. I'll try that. Thanks!

   Nathan 

-----Original Message-----
From: Terence Parr [mailto:parrt at cs.usfca.edu] 
Sent: Thursday, November 13, 2008 1:32 PM
To: Nathan Ward
Cc: stringtemplate-interest at antlr.org
Subject: Re: [stringtemplate-interest] Managing template parameters


On Nov 13, 2008, at 9:32 AM, Nathan Ward wrote:

> Hello,
>
> Is the only mechanism to pass information to templates is via formal 
> parameters when using template group files?

They can see any attribute of any template enclosing. For example, if you
set the page name in the overall page template, any template embedded in
that page, no matter how deeply nested, can reference that attribute.
Ter



From parrt at cs.usfca.edu  Thu Nov 13 14:57:38 2008
From: parrt at cs.usfca.edu (Terence Parr)
Date: Thu, 13 Nov 2008 14:57:38 -0800
Subject: [stringtemplate-interest] Managing template parameters
In-Reply-To: <D070D14AD5664B16966B15441B736FA6@nwardlt>
References: <8DCBF4EF78C745CAB10D94682F173D8F@nwardlt>
	<A1AE6F3D-F51F-4E5E-8E91-E2E4298025D1@cs.usfca.edu>
	<D070D14AD5664B16966B15441B736FA6@nwardlt>
Message-ID: <BC9EFF92-B311-46DA-9831-09AC98194773@cs.usfca.edu>


On Nov 13, 2008, at 11:50 AM, Nathan Ward wrote:

> I'm aware of that, but how can I make a JUnit test for the  
> subtemplate if it
> uses an attribute that is not passed as a formal parameter? Hmmm, I  
> guess I
> can create a template inline in my test code that uses the template  
> that I'm
> testing, which is a string group template file. I'll try that. Thanks!

That'll work. :)
Ter

From roma at qwertty.com  Fri Nov 14 06:17:21 2008
From: roma at qwertty.com (Roman Odaisky)
Date: Fri, 14 Nov 2008 16:17:21 +0200
Subject: [stringtemplate-interest] Multimethods
In-Reply-To: <0BB4E989-9AD0-40F5-BF96-2CE236CE7BE1@cs.usfca.edu>
References: <0KA800LSI5CYD950@mta-7.aphp.fr>
	<0BB4E989-9AD0-40F5-BF96-2CE236CE7BE1@cs.usfca.edu>
Message-ID: <200811141617.25431.roma@qwertty.com>

Hi,

> your template could be
>
> blog_post(m,d,y) ::= "/y/m/d&sessionid=<session.ID>"
> or whatever the field of the session is. would that work?

That would work. But that would cause unnecessary duplication.

Django has a thing called URLconf[1] which allows one to bind URLs to 
functions by means of regular expressions. Moreover, it allows one to 
determine a URL that would cause a given function to get called with given 
arguments.

For example, if a URLconf entry looks like this:

(r"^/(?P<year>\d+)/(?P<month>\d+)/(?P<day>\d+)$", posts_by_date)

then Django would call posts_by_date(request, year=2008, month=11, day=14). 
And when one calls reverse(posts_by_date, year=2008, month=11, day=14), one 
gets "/2008/11/14". So one line in a configuration file works both ways. If I 
were to create a template like the one you suggested above, it would 
duplicate the information that is already known to the application.

I need to have an option to use that system. Adding a get_absolute_url method 
to objects works as long as the URL depends only on one object, but recently 
I?ve encountered URLs that need more than one. At the moment I?m using hacks 
like $o1.url_for_o2.(o2.id)$ where get_url_for_o2() returns an object with 
operator [] overloaded.

Do you have anything against explicit adding of templates that call functions 
like I proposed in the first message?

References:
[1] http://docs.djangoproject.com/en/dev/intro/tutorial03/#design-your-urls

-- 
WBR
Roman.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/pkcs7-signature
Size: 2286 bytes
Desc: not available
Url : http://www.antlr.org:8080/pipermail/stringtemplate-interest/attachments/20081114/50c51cbd/attachment.bin 

From harry.karadimas at hmn.aphp.fr  Fri Nov 14 06:59:11 2008
From: harry.karadimas at hmn.aphp.fr (Harry Karadimas)
Date: Fri, 14 Nov 2008 15:59:11 +0100
Subject: [stringtemplate-interest] Multimethods
In-Reply-To: <0BB4E989-9AD0-40F5-BF96-2CE236CE7BE1@cs.usfca.edu>
Message-ID: <0KAB002OWWAT9FB0@mta-5.aphp.fr>

Well, it WOULD work on tomcat, where you could somehow extract
the session id and append it to the url, BEFORE the "?" (it's a
path parameter). However this is not the recommended way to do
it, as it is the web application server who decides if the link
is part of the site or not (links to 1 of several machines in a cluster,
with session attributes in a database, for example). If the machine
does not take part to the session, it does not need an jsessionid.

My approach does the job; the programmer does not have to guess & run
every possible url through the response.encodeURL method, and the view author
just has to say " ;format="url" ". What I was just suggesting
is that you could have some sort of "filters" or "handlers" that
transform something into something else, using an operator, and
parameters outside the view.
If I could write $url("http://myserver/foo/bar?next="+i)$
it would feel more natural than 
${http://myserver/foo/bar?next=$i$};format="url"$
In both approaches I would have to set the Response object before
the call to the template, so that encodeURL can be called during
rendering.

It's computation indeed; but the view author has no control over
it except that he calls it. Just as you declare a "format" or
a "renderer", you can declare an "operator handler", you can pass
parameters to before calling the template.
I understand if you consider that a bit risky; I just raised the
question because I thought it could be interesting. I don't feel
it breaks MVC separation; except if you consider that there should
be no control of the moment you use a particular template (i.e. arbitrary
template caching & reuse).

Harry

______________________________________________________________________
Dr Harry Karadimas,  Medecin Ingenieur
resp. Recherche et Developpement, Administration Wintel
Departement d'Information Hospitalier (DIH)
C.H.U. Albert Chenevier - Henri Mondor 
51, av. du Marechal de Lattre de Tassigny               94010  CRETEIL
tel : (00 33 1) 49 81 21 79                fax : (00 33 1) 49 81 27 08
secr.: (00 33 1) 49 81 23 82         m.el.:harry.karadimas at hmn.aphp.fr

-----Message d'origine-----
De : Terence Parr [mailto:parrt at cs.usfca.edu] 
Envoy? : jeudi 13 novembre 2008 19:32
? : Harry Karadimas
Cc : stringtemplate-interest at antlr.org
Objet : Re: [stringtemplate-interest] Multimethods


On Nov 12, 2008, at 6:24 AM, Harry Karadimas wrote:

> Yes, except for one little nasty requirement of Java Servlets :  
> session
> encoding
> as a path parameter. If a user turns cookies off (which happens in our 
> hospital, rather by mistake, but our mission - critical sites must 
> continue to function), the Servlet container must append an url path 
> parameter (which is different from a request parameter) named 
> jsession_id. The requirement for java servlets is that every URL must 
> be coded using response.encodeURL(String url).

Ah.  Perhaps then you simply need to pass in the session object to the template
and then the link template can encode that in the URL.

> (see
> http://java.sun.com/products/servlet/2.2/javadoc/javax/servlet/http/Ht
> tpServlet
> Response.html#encodeURL(java.lang.String)
> )
>
> That, unfortunately, is computation.

And definitely related to the controller not the view.

> And by design it gets very difficult
> to do in st. And coding every link in the controller makes things 
> really too tedious for the programmers, and too restrictive for the 
> view authors.

If you pass in session as an attribute than any template enclosed in your page
can see that attribute through dynamic scoping. your template could be

blog_post(m,d,y) ::= "/y/m/d&sessionid=<session.ID>"

or whatever the field of the session is. would that work?

Ter


From roma at qwertty.com  Fri Nov 14 09:29:40 2008
From: roma at qwertty.com (Roman Odaisky)
Date: Fri, 14 Nov 2008 19:29:40 +0200
Subject: [stringtemplate-interest] Multimethods
In-Reply-To: <0KAB002OWWAT9FB0@mta-5.aphp.fr>
References: <0KAB002OWWAT9FB0@mta-5.aphp.fr>
Message-ID: <200811141929.45559.roma@qwertty.com>

On Friday, 14.11.2008 16:59:11 Harry Karadimas wrote:
> If I could write $url("http://myserver/foo/bar?next="+i)$
> it would feel more natural than
> ${http://myserver/foo/bar?next=$i$};format="url"$

Doesn?t $it; format="url"$ in a url.st work?

-- 
HTH
Roman.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/pkcs7-signature
Size: 2286 bytes
Desc: not available
Url : http://www.antlr.org:8080/pipermail/stringtemplate-interest/attachments/20081114/47751e55/attachment.bin 

From nward at resqsoft.com  Fri Nov 14 10:10:50 2008
From: nward at resqsoft.com (Nathan Ward)
Date: Fri, 14 Nov 2008 13:10:50 -0500
Subject: [stringtemplate-interest] Managing template parameters
In-Reply-To: <BC9EFF92-B311-46DA-9831-09AC98194773@cs.usfca.edu>
References: <8DCBF4EF78C745CAB10D94682F173D8F@nwardlt>
	<A1AE6F3D-F51F-4E5E-8E91-E2E4298025D1@cs.usfca.edu>
	<D070D14AD5664B16966B15441B736FA6@nwardlt>
	<BC9EFF92-B311-46DA-9831-09AC98194773@cs.usfca.edu>
Message-ID: <341F547D07194AECAC7F1509F02F3D03@nwardlt>

Terence,

I got this working. My code is included below in case it would be of use to
someone else. I would think this would be a common problem because I would
think it is pretty common for template parameters to become "tramp data" as
Meiler Page-Jones defined in the book Structured Systems Design many years
ago (i.e. passing parameters around for use in code that is called later
down the line. 

I also think there is an interesting StringTemplate design issue here... The
solution described in the Meiler Page-Jones book was to use "Information
Hiding" is similar to using object-oriented design but was before OOD. I had
done this kind of thing when programming in C where I would group data and
processing (i.e. C functions) in the same file. The variables defined at the
top of the file where like object attributes. Not exactly OO, but not bad
when programming in C. 

Given that StringTemplate is designed with a syntax that encourages good
template design, I would think that implicit access to variables like I am
now doing should not be allowed, but an alternative should be provided by
allowing template groups to accept parameters. This would be similar to an
object having instance member variables. This makes the intension to share
data across templates more explicit and help the template designer think
about if the data really should be shared this way or should be treated as
formal parameters. This would also eliminate the need for me to create this
temporary template and template group for testing purposes. 

Shared.stg:

// Implicit variable references: screen
screenElementResourceBundleKey(screenElement, screenElementType) ::= <<
<formClassName(screen)>.<screenElementType>.<screenElement.text>.Text
>>


SharedTemplateTestCase.java:

    public void testScreenElementResourceBundleKey() {

        Screen screen = new Screen();
        screen.setName("MY_SCREEN");
        
        Button button = new Button();
        button.setText("MyButtonText");
        
        super.setTemplateAttribute("screen", screen);
        super.setTemplateAttribute("screenElement", button);
        super.setTemplateAttribute("screenElementType", "Button");
        String templateString = super.executeTemplateWithImplicitVariables(
                templateGroup, templateGroup,
"screenElementResourceBundleKey");
        super.logTemplateOutput(templateString);
        TestCase.assertEquals("MyScreenForm.Button.MyButtonText.Text",
templateString);
        
    }

BaseTemplateTestCase.java:

    /**
     * Use this method to test templates that use one or more <i>implicit
variables</i> 
     * rather than using only formal parameters. Implicit variables should
be used only
     * in cases where the immediate template doesn't need the parameter
other than to 
     * pass it to other templates d several levels down in the template
calling chain. 
     * 
     * This method execute the template given by the templateName parameter
from a temporary 
     * template that this method creates in the template group so that the
parameters 
     * previously added by calling setTemplateAttribute() method will be
accessible to 
     * the template under test. 
     * 
     * If the template under test does not use implicit variables,
     * (i.e. only uses formal parameters), then the StringTemplate API can
be used directly
     * rather than using this method. 
     * 
     * @param rootTemplateGroup The rootTemplateGroup in the template group
inheritance hierarchy
     * for the template group that the template under test is in. If the
target template group
     * does not inherit from another template group, then just pass the
target template group
     * as this parameter and also pass the same template group as the
targetTemplateGroup parameter.
     * @param targetTemplateGroup The template group in which the template
under test is defined.
     * @param templateName The name of the template under test.
     * @return
     */
    public String executeTemplateWithImplicitVariables(StringTemplateGroup
rootTemplateGroup,
            StringTemplateGroup targetTemplateGroup, String templateName) {

        StringBuilder temporaryTemplateGroup = new StringBuilder();
        temporaryTemplateGroup.append("group temp;");
        temporaryTemplateGroup.append(newline);
        temporaryTemplateGroup.append("aTemplate(");
        boolean notFirst = false;
        for (final String parmName : parms.keySet()) {
            if (notFirst) {
                temporaryTemplateGroup.append(", ");
            }
            else {
                notFirst = true;
            }
            temporaryTemplateGroup.append(parmName);
        }
        temporaryTemplateGroup.append(") ::= <<");
        temporaryTemplateGroup.append(newline);
        temporaryTemplateGroup.append("<");
        temporaryTemplateGroup.append(templateName);
        temporaryTemplateGroup.append("(...) >");
        temporaryTemplateGroup.append(newline);
        temporaryTemplateGroup.append(">>");
        
        String temporaryTemplateGroupString =
temporaryTemplateGroup.toString();
        
        StringTemplateGroup newParentGroup = new StringTemplateGroup(new
StringReader(
                temporaryTemplateGroupString));
        
        // Make the rootTemplateGroup inherit from the newParentGroup that
we created
        // from temporaryTemplateGroupString
        rootTemplateGroup.setSuperGroup(newParentGroup);
        
        // Get an instance of the temporary template that we have created
named aTemplate
        // from the targetTemplateGroup. Important that we get the instance
from the targetTemplateGroup
        // rather than directly from the newParentGroup template so that the
template has access to
        // all other templates in the template group inheritance hierarchy.
        StringTemplate template =
targetTemplateGroup.getInstanceOf("aTemplate");
        
        for (final Map.Entry<String, Object> entry : parms.entrySet()) {
            template.setAttribute(entry.getKey(), entry.getValue());
        }
        String templateString = template.toString();
        return templateString;
    }
    
    public void setTemplateAttribute(String parmName, Object value) {

        this.parms.put(parmName, value);
    } 

-----Original Message-----
From: Terence Parr [mailto:parrt at cs.usfca.edu] 
Sent: Thursday, November 13, 2008 5:58 PM
To: Nathan Ward
Cc: stringtemplate-interest at antlr.org
Subject: Re: [stringtemplate-interest] Managing template parameters


On Nov 13, 2008, at 11:50 AM, Nathan Ward wrote:

> I'm aware of that, but how can I make a JUnit test for the subtemplate 
> if it uses an attribute that is not passed as a formal parameter? 
> Hmmm, I guess I can create a template inline in my test code that uses 
> the template that I'm testing, which is a string group template file. 
> I'll try that. Thanks!

That'll work. :)
Ter



From harry.karadimas at hmn.aphp.fr  Sat Nov 15 07:23:43 2008
From: harry.karadimas at hmn.aphp.fr (karadimas harry)
Date: Sat, 15 Nov 2008 16:23:43 +0100
Subject: [stringtemplate-interest] Multimethods
In-Reply-To: <mailman.3.1226692802.5116.stringtemplate-interest@antlr.org>
References: <mailman.3.1226692802.5116.stringtemplate-interest@antlr.org>
Message-ID: <f5f2643617c63.491ef78f@aphp.fr>

Well, actually, YES ! 
I thought about that on the way home after I posted this reply.
However it only works with having the "response" object in a Thread-Local
parameter, used by the renderer that handles the "url" format.
More generally what I proposed was either :
  - An hardcoded mechanism to just encode URLs the way the spec wants it
  - A more general mechanism to set parameters in the template before calling it; then the format/renderers can use them (for example, setting the desired locale explicitly can help enforce the user's desired locale in the generated text). This parameter could be passed to the renderer (just like the "format" String), without any other information related to the template. Of course I understand this could be misused, so there
should be a balance here between how strict we want things to be and what facilities we want to offer to the programmers. Anyway it is quite hard for the view author to misuse st; for the "model" programmer it is not
that hard. I like the st language/syntax very much, and except for the multiplication of files I find it quite handy; however, I find myself programming a lot just for the view, having to forsee a lot of possible cases, constructing intermediate objects just for st, and I think we should think a bit about that. I think
if programmers misuse the model and make non-decidable calls during template execution, it's their fault,
they didn't catch the whole idea of the thing. Or maybe they take some risk into account, having been warned,
and they can't complain about that. 

> Message: 4
> Date: Fri, 14 Nov 2008 19:29:40 +0200
> From: Roman Odaisky <roma at qwertty.com>
> Subject: Re: [stringtemplate-interest] Multimethods
> To: stringtemplate-interest at antlr.org
> Message-ID: <200811141929.45559.roma at qwertty.com>
> Content-Type: text/plain; charset="utf-8"
> 
> On Friday, 14.11.2008 16:59:11 Harry Karadimas wrote:
> > If I could write $url("http://myserver/foo/bar?next="+i)$
> > it would feel more natural than
> > ${http://myserver/foo/bar?next=$i$};format="url"$
> 
> Doesn?t $it; format="url"$ in a url.st work?
> 
> -- 
> HTH
> Roman.
> -------------- next part --------------
> A non-text attachment was scrubbed...
> Name: smime.p7s
> Type: application/pkcs7-signature
> Size: 2286 bytes
> Desc: not available
> Url : http://www.antlr.org:8080/pipermail/stringtemplate-
> interest/attachments/20081114/47751e55/attachment-0001.bin 
> 

Harry

From tamcly at gmail.com  Sat Nov 15 16:18:21 2008
From: tamcly at gmail.com (Tam Ly)
Date: Sat, 15 Nov 2008 16:18:21 -0800
Subject: [stringtemplate-interest] Merge email using StringTemplate.NET
	through multiple passes
Message-ID: <29717810811151618m90c6cfdi7bf4a3920fdd37d3@mail.gmail.com>

I am new to StringTemplate.NET and appreciate your help. I am trying to use
StringTemplate.NET (antlr.runtime.dll 2.7.7.1 & StringTemplate.dll
3.0.1.21733) to generate html emails to be sent from my web site. I am using
a database to store my content as followed:

ResourceName            ResourceValue
-----------------       ----------------------------------
EmailHeader             <center>If you have trouble viewing this email, <a
href='
https://www.chaseidprotect.com/displayEmail.aspx?mid=$MemberId$&eid=$EmailDocumentId$'>click
here</a></center><br />
                       <img src='
https://www.chaseidprotect.com/images/companylogo.jpg' alt='Chase' />
EmailWelcome            $EmailHeader$<br />
                       Dear $FirstName$ $LastName$,
                       Hello world! This is a test of StringTemplate!
There is another table that tells me that EmailWelcome resource uses
EmailHeader resource. For performance reasons, I want to cache my resource
so I have to merge data in 2 passes:
1st pass: Merge the value of EmailHeader to EmailWelcome
2nd pass: Merge my member and email template data to EmailWelcome
Here's the sample code:
      private void button2_Click(object sender, EventArgs e)
      {
          string emailHeader = "<center>If you have trouble viewing this
email, <a href='
https://www.chaseidprotect.com/displayEmail.aspx?mid=$MemberId$&eid=$EmailDocumentId$'>click
here</a></center><br /><img src='
https://www.chaseidprotect.com/images/companylogo.jpg/companylogo.jpg'
alt='Chase' />";
          string emailWelcome = "$EmailHeader$<br />Dear $FirstName$
$LastName$, <br />Hello world! This is a test of StringTemplate!";
          // 1st pass, merge resource only because we do not have member or
email template data yet
          StringTemplate emailContent = new StringTemplate(emailWelcome,
typeof(DefaultTemplateLexer));
          emailContent.SetAttribute("EmailHeader", emailHeader);
          Debug.WriteLine(emailContent.ToString());
          // 2nd pass, merge member and email template data when an email is
queued
          StringTemplate emailMerged = new
StringTemplate(emailContent.ToString(), typeof(DefaultTemplateLexer));
          emailMerged.SetAttribute("MemberId", 241);
          emailMerged.SetAttribute("EmailDocumentId", 1);
          emailMerged.SetAttribute("FirstName", "Tam");
          emailMerged.SetAttribute("LastName", "Ly");
          Debug.WriteLine(emailMerged.ToString());
      }

Because I do not have my member's and email template data: MemberId,
FirstName, LastName and EmailDocumentId at the 1st pass, I have to merge my
member and email template data at the 2nd pass.
Unfortunately, my member's attributes: $FirstName$ and $LastName no longer
exist in the EmailWelcome after my 1st pass of merging.
It looks like StringTemplate evaluates the attribute to emptry string if I
don't pass in the value the first time. Is there a way to tell
StringTemplate to pass through an attribute if a value is not
passed in instead of evaluating to empty string?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org:8080/pipermail/stringtemplate-interest/attachments/20081115/323717bb/attachment.html 

From roma at qwertty.com  Thu Nov 20 10:18:31 2008
From: roma at qwertty.com (Roman Odaisky)
Date: Thu, 20 Nov 2008 20:18:31 +0200
Subject: [stringtemplate-interest] defineTemplate thrown away by
	checkRefreshInterval
Message-ID: <200811202018.36426.roma@qwertty.com>

Greetings,

I observe strange behavior of directory-bound StringTemplateGroups. Namely, if 
they have additional templates defined by defineTemplate, those get removed 
when the refreshInterval expires. Is it by design?

PyST 3.1.

-- 
WBR
Roman.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/pkcs7-signature
Size: 2286 bytes
Desc: not available
Url : http://www.antlr.org:8080/pipermail/stringtemplate-interest/attachments/20081120/10e46fd9/attachment.bin 

From parrt at cs.usfca.edu  Thu Nov 20 13:39:43 2008
From: parrt at cs.usfca.edu (Terence Parr)
Date: Thu, 20 Nov 2008 13:39:43 -0800
Subject: [stringtemplate-interest] defineTemplate thrown away by
	checkRefreshInterval
In-Reply-To: <200811202018.36426.roma@qwertty.com>
References: <200811202018.36426.roma@qwertty.com>
Message-ID: <AB0B2788-6F42-49D6-946F-173A010874C7@cs.usfca.edu>

Howdy.  yikes. yeah, it probably just blasts the template map to  
refresh.  not by design but...

not sure if it's "correct" to do that or not...seems like refresh  
should make it look like disk.
T
On Nov 20, 2008, at 10:18 AM, Roman Odaisky wrote:

> Greetings,
>
> I observe strange behavior of directory-bound StringTemplateGroups.  
> Namely, if
> they have additional templates defined by defineTemplate, those get  
> removed
> when the refreshInterval expires. Is it by design?
>
> PyST 3.1.
>
> -- 
> WBR
> Roman.
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org:8080/mailman/listinfo/stringtemplate-interest


From mikaeln at acm.org  Fri Nov 21 04:05:37 2008
From: mikaeln at acm.org (Mikael Nyberg)
Date: Fri, 21 Nov 2008 13:05:37 +0100
Subject: [stringtemplate-interest] List-making problem
Message-ID: <60d409690811210405k2832fdacv502028768270c1b2@mail.gmail.com>

I really like the ideas behind StringTemplate, MVC separation,
avoiding ad hoc processing in the view etc  It's a real shift of
thinking after working with increasingly powerful view engines. But
now I'm stuck with something I think I should be able to do but after
a bit of effort still can't - help would be greatly appreciated. I
need to create "advanced search"-type queries of the form

and( where:"oslo" , what:"diving equipment" ) based on attributes
where and what, both of which may not be present (and there's more of
them, just using these two as an example). if $if(where)$ evaluates to
false/empty, I would like the list

and( what:"diving equipment" )

I keep the templates in a group file, so there would be a parameterless template

advancedSearch() ::= <<
>>

that would create the query, probably using subtemplates. Problem is:
I cannot find a way to handle creating the comma separator. My initial
idea was to use the list-making construct $[a,b,c] ;separator=","$,
but that construct does not help creating where:"oslo" from the
attribute where with value "oslo". I.e.
$[where:{where:$it$},what:{what:$it$}];separator=","$] is not legal.
I've tried lots of other things as well, most of them also too
embarassing to reproduce here.

Is there a violation of principles here, or am I just missing
something in the language?

Thanks,

-Mikael

-- 
Mikael Nyberg
mikaeln at acm.org

From roma at qwertty.com  Fri Nov 21 05:59:44 2008
From: roma at qwertty.com (Roman Odaisky)
Date: Fri, 21 Nov 2008 15:59:44 +0200
Subject: [stringtemplate-interest] List-making problem
In-Reply-To: <60d409690811210405k2832fdacv502028768270c1b2@mail.gmail.com>
References: <60d409690811210405k2832fdacv502028768270c1b2@mail.gmail.com>
Message-ID: <200811211559.54755.roma@qwertty.com>

On Friday, 21.11.2008 14:05:37 Mikael Nyberg wrote:

> $[where:{where:$it$},what:{what:$it$}];separator=","$] is not legal.

Legal since ST 3.2.1. http://www.antlr.org:8888/browse/ST-41

-- 
HTH
Roman.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/pkcs7-signature
Size: 2286 bytes
Desc: not available
Url : http://www.antlr.org:8080/pipermail/stringtemplate-interest/attachments/20081121/e5250edb/attachment.bin 

From parrt at cs.usfca.edu  Fri Nov 21 10:49:24 2008
From: parrt at cs.usfca.edu (Terence Parr)
Date: Fri, 21 Nov 2008 10:49:24 -0800
Subject: [stringtemplate-interest] Multimethods
In-Reply-To: <200811141617.25431.roma@qwertty.com>
References: <0KA800LSI5CYD950@mta-7.aphp.fr>
	<0BB4E989-9AD0-40F5-BF96-2CE236CE7BE1@cs.usfca.edu>
	<200811141617.25431.roma@qwertty.com>
Message-ID: <AB18953B-C17A-4E73-8B4F-0CACCC9A2B65@cs.usfca.edu>


On Nov 14, 2008, at 6:17 AM, Roman Odaisky wrote:

> Hi,
>
>> your template could be
>>
>> blog_post(m,d,y) ::= "/y/m/d&sessionid=<session.ID>"
>> or whatever the field of the session is. would that work?
>
> That would work. But that would cause unnecessary duplication.

  duplication of what?

> Django has a thing called URLconf[1] which allows one to bind URLs to
> functions by means of regular expressions. Moreover, it allows one to
> determine a URL that would cause a given function to get called with  
> given
> arguments.
>
> For example, if a URLconf entry looks like this:
>
> (r"^/(?P<year>\d+)/(?P<month>\d+)/(?P<day>\d+)$", posts_by_date)
>
> then Django would call posts_by_date(request, year=2008, month=11,  
> day=14).
> And when one calls reverse(posts_by_date, year=2008, month=11,  
> day=14), one
> gets "/2008/11/14". So one line in a configuration file works both  
> ways. If I
> were to create a template like the one you suggested above, it would
> duplicate the information that is already known to the application.

Well, this is really a controller issue. Technically URLs must be  
computed by the controller and sent in as data to the view. However we  
want to fudge this to make it convenient is fine.

> I need to have an option to use that system. Adding a  
> get_absolute_url method
> to objects works as long as the URL depends only on one object, but  
> recently
> I?ve encountered URLs that need more than one. At the moment I?m  
> using hacks
> like $o1.url_for_o2.(o2.id)$ where get_url_for_o2() returns an  
> object with
> operator [] overloaded.

Add a renderer for that object and then use a format option to select?

> Do you have anything against explicit adding of templates that call  
> functions
> like I proposed in the first message?

Yes, I'm afraid, because then $f()$ can call it arbitrary function.

T
>
>
> References:
> [1] http://docs.djangoproject.com/en/dev/intro/tutorial03/#design-your-urls
>
> -- 
> WBR
> Roman.
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org:8080/mailman/listinfo/stringtemplate-interest


From parrt at cs.usfca.edu  Fri Nov 21 10:46:28 2008
From: parrt at cs.usfca.edu (Terence Parr)
Date: Fri, 21 Nov 2008 10:46:28 -0800
Subject: [stringtemplate-interest] Merge email using StringTemplate.NET
	through multiple passes
In-Reply-To: <29717810811151618m90c6cfdi7bf4a3920fdd37d3@mail.gmail.com>
References: <29717810811151618m90c6cfdi7bf4a3920fdd37d3@mail.gmail.com>
Message-ID: <9D522811-B088-4179-A90D-7584A40C0F61@cs.usfca.edu>

Hi, when you call toString() you are destroying all possible attribute  
information and getting a string. why are you evaluating twice? just  
set the attributes that you want and then do a single toString.
Ter
On Nov 15, 2008, at 4:18 PM, Tam Ly wrote:

> I am new to StringTemplate.NET and appreciate your help. I am trying  
> to use StringTemplate.NET (antlr.runtime.dll 2.7.7.1 &  
> StringTemplate.dll 3.0.1.21733) to generate html emails to be sent  
> from my web site. I am using a database to store my content as  
> followed:
>
> ResourceName            ResourceValue
> -----------------       ----------------------------------
> EmailHeader             <center>If you have trouble viewing this  
> email, <a href='https://www.chaseidprotect.com/displayEmail.aspx?mid=$MemberId$&eid=$EmailDocumentId$' 
> >click here</a></center><br />
>                        <img src='https://www.chaseidprotect.com/images/companylogo.jpg' 
>  alt='Chase' />
> EmailWelcome            $EmailHeader$<br />
>                        Dear $FirstName$ $LastName$,
>                        Hello world! This is a test of StringTemplate!
> There is another table that tells me that EmailWelcome resource uses  
> EmailHeader resource. For performance reasons, I want to cache my  
> resource so I have to merge data in 2 passes:
> 1st pass: Merge the value of EmailHeader to EmailWelcome
> 2nd pass: Merge my member and email template data to EmailWelcome
> Here's the sample code:
>       private void button2_Click(object sender, EventArgs e)
>       {
>           string emailHeader = "<center>If you have trouble viewing  
> this email, <a href='https://www.chaseidprotect.com/displayEmail.aspx?mid=$MemberId$&eid=$EmailDocumentId$' 
> >click here</a></center><br /><img src='https://www.chaseidprotect.com/images/companylogo.jpg/companylogo.jpg' 
>  alt='Chase' />";
>           string emailWelcome = "$EmailHeader$<br />Dear $FirstName$  
> $LastName$, <br />Hello world! This is a test of StringTemplate!";
>           // 1st pass, merge resource only because we do not have  
> member or email template data yet
>           StringTemplate emailContent = new  
> StringTemplate(emailWelcome, typeof(DefaultTemplateLexer));
>           emailContent.SetAttribute("EmailHeader", emailHeader);
>           Debug.WriteLine(emailContent.ToString());
>           // 2nd pass, merge member and email template data when an  
> email is queued
>           StringTemplate emailMerged = new  
> StringTemplate(emailContent.ToString(), typeof(DefaultTemplateLexer));
>           emailMerged.SetAttribute("MemberId", 241);
>           emailMerged.SetAttribute("EmailDocumentId", 1);
>           emailMerged.SetAttribute("FirstName", "Tam");
>           emailMerged.SetAttribute("LastName", "Ly");
>           Debug.WriteLine(emailMerged.ToString());
>       }
>
> Because I do not have my member's and email template data: MemberId,  
> FirstName, LastName and EmailDocumentId at the 1st pass, I have to  
> merge my member and email template data at the 2nd pass.
> Unfortunately, my member's attributes: $FirstName$ and $LastName no  
> longer exist in the EmailWelcome after my 1st pass of merging.
> It looks like StringTemplate evaluates the attribute to emptry  
> string if I don't pass in the value the first time. Is there a way  
> to tell StringTemplate to pass through an attribute if a value is not
> passed in instead of evaluating to empty string?
>
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org:8080/mailman/listinfo/stringtemplate-interest


From parrt at cs.usfca.edu  Fri Nov 21 10:52:44 2008
From: parrt at cs.usfca.edu (Terence Parr)
Date: Fri, 21 Nov 2008 10:52:44 -0800
Subject: [stringtemplate-interest] Managing template parameters
In-Reply-To: <341F547D07194AECAC7F1509F02F3D03@nwardlt>
References: <8DCBF4EF78C745CAB10D94682F173D8F@nwardlt>
	<A1AE6F3D-F51F-4E5E-8E91-E2E4298025D1@cs.usfca.edu>
	<D070D14AD5664B16966B15441B736FA6@nwardlt>
	<BC9EFF92-B311-46DA-9831-09AC98194773@cs.usfca.edu>
	<341F547D07194AECAC7F1509F02F3D03@nwardlt>
Message-ID: <B15B8672-4F81-4BFB-81DC-AF75073FCC50@cs.usfca.edu>

Hi  Nathan,

Yes, in general I am very much opposed to dynamic scoping. In the   
template world, it makes a huge amount of sense. Templates are very  
dynamic creatures and our combined willy-nilly into large, nested  
trees of sub templates. I agree, however, that like we do with  
parameters, it could be useful to say "heh,I'm going to reference this  
dynamically scoped variable... if it does not exist when I'm  
evaluated, throw an exception". sort of like

foo(a,b) uses title ::= "<a> <b> are parameters, <title> is from above"

Is that what you're talking about?

Ter

On Nov 14, 2008, at 10:10 AM, Nathan Ward wrote:

> Terence,
>
> I got this working. My code is included below in case it would be of  
> use to
> someone else. I would think this would be a common problem because I  
> would
> think it is pretty common for template parameters to become "tramp  
> data" as
> Meiler Page-Jones defined in the book Structured Systems Design many  
> years
> ago (i.e. passing parameters around for use in code that is called  
> later
> down the line.
>
> I also think there is an interesting StringTemplate design issue  
> here... The
> solution described in the Meiler Page-Jones book was to use  
> "Information
> Hiding" is similar to using object-oriented design but was before  
> OOD. I had
> done this kind of thing when programming in C where I would group  
> data and
> processing (i.e. C functions) in the same file. The variables  
> defined at the
> top of the file where like object attributes. Not exactly OO, but  
> not bad
> when programming in C.
>
> Given that StringTemplate is designed with a syntax that encourages  
> good
> template design, I would think that implicit access to variables  
> like I am
> now doing should not be allowed, but an alternative should be  
> provided by
> allowing template groups to accept parameters. This would be similar  
> to an
> object having instance member variables. This makes the intension to  
> share
> data across templates more explicit and help the template designer  
> think
> about if the data really should be shared this way or should be  
> treated as
> formal parameters. This would also eliminate the need for me to  
> create this
> temporary template and template group for testing purposes.
>
> Shared.stg:
>
> // Implicit variable references: screen
> screenElementResourceBundleKey(screenElement, screenElementType) ::=  
> <<
> <formClassName(screen)>.<screenElementType>.<screenElement.text>.Text
>>>
>
>
> SharedTemplateTestCase.java:
>
>    public void testScreenElementResourceBundleKey() {
>
>        Screen screen = new Screen();
>        screen.setName("MY_SCREEN");
>
>        Button button = new Button();
>        button.setText("MyButtonText");
>
>        super.setTemplateAttribute("screen", screen);
>        super.setTemplateAttribute("screenElement", button);
>        super.setTemplateAttribute("screenElementType", "Button");
>        String templateString =  
> super.executeTemplateWithImplicitVariables(
>                templateGroup, templateGroup,
> "screenElementResourceBundleKey");
>        super.logTemplateOutput(templateString);
>        TestCase.assertEquals("MyScreenForm.Button.MyButtonText.Text",
> templateString);
>
>    }
>
> BaseTemplateTestCase.java:
>
>    /**
>     * Use this method to test templates that use one or more  
> <i>implicit
> variables</i>
>     * rather than using only formal parameters. Implicit variables  
> should
> be used only
>     * in cases where the immediate template doesn't need the parameter
> other than to
>     * pass it to other templates d several levels down in the template
> calling chain.
>     *
>     * This method execute the template given by the templateName  
> parameter
> from a temporary
>     * template that this method creates in the template group so  
> that the
> parameters
>     * previously added by calling setTemplateAttribute() method will  
> be
> accessible to
>     * the template under test.
>     *
>     * If the template under test does not use implicit variables,
>     * (i.e. only uses formal parameters), then the StringTemplate  
> API can
> be used directly
>     * rather than using this method.
>     *
>     * @param rootTemplateGroup The rootTemplateGroup in the template  
> group
> inheritance hierarchy
>     * for the template group that the template under test is in. If  
> the
> target template group
>     * does not inherit from another template group, then just pass the
> target template group
>     * as this parameter and also pass the same template group as the
> targetTemplateGroup parameter.
>     * @param targetTemplateGroup The template group in which the  
> template
> under test is defined.
>     * @param templateName The name of the template under test.
>     * @return
>     */
>    public String  
> executeTemplateWithImplicitVariables(StringTemplateGroup
> rootTemplateGroup,
>            StringTemplateGroup targetTemplateGroup, String  
> templateName) {
>
>        StringBuilder temporaryTemplateGroup = new StringBuilder();
>        temporaryTemplateGroup.append("group temp;");
>        temporaryTemplateGroup.append(newline);
>        temporaryTemplateGroup.append("aTemplate(");
>        boolean notFirst = false;
>        for (final String parmName : parms.keySet()) {
>            if (notFirst) {
>                temporaryTemplateGroup.append(", ");
>            }
>            else {
>                notFirst = true;
>            }
>            temporaryTemplateGroup.append(parmName);
>        }
>        temporaryTemplateGroup.append(") ::= <<");
>        temporaryTemplateGroup.append(newline);
>        temporaryTemplateGroup.append("<");
>        temporaryTemplateGroup.append(templateName);
>        temporaryTemplateGroup.append("(...) >");
>        temporaryTemplateGroup.append(newline);
>        temporaryTemplateGroup.append(">>");
>
>        String temporaryTemplateGroupString =
> temporaryTemplateGroup.toString();
>
>        StringTemplateGroup newParentGroup = new  
> StringTemplateGroup(new
> StringReader(
>                temporaryTemplateGroupString));
>
>        // Make the rootTemplateGroup inherit from the newParentGroup  
> that
> we created
>        // from temporaryTemplateGroupString
>        rootTemplateGroup.setSuperGroup(newParentGroup);
>
>        // Get an instance of the temporary template that we have  
> created
> named aTemplate
>        // from the targetTemplateGroup. Important that we get the  
> instance
> from the targetTemplateGroup
>        // rather than directly from the newParentGroup template so  
> that the
> template has access to
>        // all other templates in the template group inheritance  
> hierarchy.
>        StringTemplate template =
> targetTemplateGroup.getInstanceOf("aTemplate");
>
>        for (final Map.Entry<String, Object> entry :  
> parms.entrySet()) {
>            template.setAttribute(entry.getKey(), entry.getValue());
>        }
>        String templateString = template.toString();
>        return templateString;
>    }
>
>    public void setTemplateAttribute(String parmName, Object value) {
>
>        this.parms.put(parmName, value);
>    }
>
> -----Original Message-----
> From: Terence Parr [mailto:parrt at cs.usfca.edu]
> Sent: Thursday, November 13, 2008 5:58 PM
> To: Nathan Ward
> Cc: stringtemplate-interest at antlr.org
> Subject: Re: [stringtemplate-interest] Managing template parameters
>
>
> On Nov 13, 2008, at 11:50 AM, Nathan Ward wrote:
>
>> I'm aware of that, but how can I make a JUnit test for the  
>> subtemplate
>> if it uses an attribute that is not passed as a formal parameter?
>> Hmmm, I guess I can create a template inline in my test code that  
>> uses
>> the template that I'm testing, which is a string group template file.
>> I'll try that. Thanks!
>
> That'll work. :)
> Ter
>
>


From roma at qwertty.com  Fri Nov 21 08:15:42 2008
From: roma at qwertty.com (Roman Odaisky)
Date: Fri, 21 Nov 2008 18:15:42 +0200
Subject: [stringtemplate-interest] Another: $x:{}$ when x=0
In-Reply-To: <200811111353.36300.roma@qwertty.com>
References: <200811111353.36300.roma@qwertty.com>
Message-ID: <200811211815.46294.roma@qwertty.com>

Likewise, this is obviously erroneous:

>>> st = StringTemplate("$x:{yes};null={no}$")
>>> st["x"] = 0
>>> print unicode(st)
no

Again those dynamic languages that don?t distinguish null, zero and ""...

-- 
WBR
Roman.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/pkcs7-signature
Size: 2286 bytes
Desc: not available
Url : http://www.antlr.org:8080/pipermail/stringtemplate-interest/attachments/20081121/a9ed7e76/attachment.bin 

From parrt at cs.usfca.edu  Fri Nov 21 12:04:50 2008
From: parrt at cs.usfca.edu (Terence Parr)
Date: Fri, 21 Nov 2008 12:04:50 -0800
Subject: [stringtemplate-interest] Another: $x:{}$ when x=0
In-Reply-To: <200811211815.46294.roma@qwertty.com>
References: <200811111353.36300.roma@qwertty.com>
	<200811211815.46294.roma@qwertty.com>
Message-ID: <244223BB-CA9B-49E8-B684-D80053C71B2F@cs.usfca.edu>


On Nov 21, 2008, at 8:15 AM, Roman Odaisky wrote:

> Likewise, this is obviously erroneous:
>
>>>> st = StringTemplate("$x:{yes};null={no}$")
>>>> st["x"] = 0
>>>> print unicode(st)
> no
>
> Again those dynamic languages that don?t distinguish null, zero and  
> ""...

yep, should be yes since x is not null.

Ter

From nward at resqsoft.com  Sun Nov 23 16:38:39 2008
From: nward at resqsoft.com (Nathan Ward)
Date: Sun, 23 Nov 2008 19:38:39 -0500
Subject: [stringtemplate-interest] Managing template parameters
In-Reply-To: <B15B8672-4F81-4BFB-81DC-AF75073FCC50@cs.usfca.edu>
References: <8DCBF4EF78C745CAB10D94682F173D8F@nwardlt>
	<A1AE6F3D-F51F-4E5E-8E91-E2E4298025D1@cs.usfca.edu>
	<D070D14AD5664B16966B15441B736FA6@nwardlt>
	<BC9EFF92-B311-46DA-9831-09AC98194773@cs.usfca.edu>
	<341F547D07194AECAC7F1509F02F3D03@nwardlt>
	<B15B8672-4F81-4BFB-81DC-AF75073FCC50@cs.usfca.edu>
Message-ID: <10F14506DE42495391D71CD519C2C2AD@nwardlt>

That's more than I was suggesting.

I just wanted to be able do something like:

     myTemplateGroup.setAttribute("project", myProject);

Many of my templates don't need this object, but some low-level templates,
such as the msgKeyTag template shown below do need the project object. In
order to test msgKeyTag template with a JUnit based test, I had to make a
base template group and a temporary template that takes the project object
as a formal parameter so that the object would be available when the
msgKeyTag template was invoked. 

I would think that this situation is not uncommon. So, either other people
don't test small templates like this or other people also have to come up
with similar solutions to unit test these kinds of templates. So, I thought
this concept and API might make sense. 

// Implicit variable references: project
// Calls different template based on project.properties.msgFormatName
property,
// e.g. jstlMsgFormat() template if msgFormatName is "jstl"
msgKeyTag(msgKey) ::= <<
$(msgFormatTemplateNameMap.(project.projectOptions.msgTagType))(...)$
>>

jstlMsgFormat(msgKey) ::= <<
<fmt:message key="$msgKey$">
>>

strutsMsgFormat(msgKey) ::= <<
<bean:message key="$msgKey$">
>>

springMsgFormat(msgKey) ::= <<
<spring:message code="$msgKey$">
>>

// Maps msg format name to msg format template
// e.g. "jstl" maps to jstlMsgFormat template to produce <fmt:message ...
tag
// Used by msgKeyTag template
msgFormatTemplateNameMap ::= [
        "jstl":"jstlMsgFormat",
        "struts":"strutsMsgFormat",
        "spring":"springMsgFormat"
]


-----Original Message-----
From: Terence Parr [mailto:parrt at cs.usfca.edu] 
Sent: Friday, November 21, 2008 1:53 PM
To: Nathan Ward
Cc: stringtemplate-interest at antlr.org
Subject: Re: [stringtemplate-interest] Managing template parameters

Hi  Nathan,

Yes, in general I am very much opposed to dynamic scoping. In the   
template world, it makes a huge amount of sense. Templates are very dynamic
creatures and our combined willy-nilly into large, nested trees of sub
templates. I agree, however, that like we do with parameters, it could be
useful to say "heh,I'm going to reference this dynamically scoped
variable... if it does not exist when I'm evaluated, throw an exception".
sort of like

foo(a,b) uses title ::= "<a> <b> are parameters, <title> is from above"

Is that what you're talking about?

Ter

On Nov 14, 2008, at 10:10 AM, Nathan Ward wrote:

> Terence,
>
> I got this working. My code is included below in case it would be of 
> use to someone else. I would think this would be a common problem 
> because I would think it is pretty common for template parameters to 
> become "tramp data" as Meiler Page-Jones defined in the book 
> Structured Systems Design many years ago (i.e. passing parameters 
> around for use in code that is called later down the line.
>
> I also think there is an interesting StringTemplate design issue 
> here... The solution described in the Meiler Page-Jones book was to 
> use "Information Hiding" is similar to using object-oriented design 
> but was before OOD. I had done this kind of thing when programming in 
> C where I would group data and processing (i.e. C functions) in the 
> same file. The variables defined at the top of the file where like 
> object attributes. Not exactly OO, but not bad when programming in C.
>
> Given that StringTemplate is designed with a syntax that encourages 
> good template design, I would think that implicit access to variables 
> like I am now doing should not be allowed, but an alternative should 
> be provided by allowing template groups to accept parameters. This 
> would be similar to an object having instance member variables. This 
> makes the intension to share data across templates more explicit and 
> help the template designer think about if the data really should be 
> shared this way or should be treated as formal parameters. This would 
> also eliminate the need for me to create this temporary template and 
> template group for testing purposes.
>
> Shared.stg:
>
> // Implicit variable references: screen 
> screenElementResourceBundleKey(screenElement, screenElementType) ::= 
> << 
> <formClassName(screen)>.<screenElementType>.<screenElement.text>.Text
>>>
>
>
> SharedTemplateTestCase.java:
>
>    public void testScreenElementResourceBundleKey() {
>
>        Screen screen = new Screen();
>        screen.setName("MY_SCREEN");
>
>        Button button = new Button();
>        button.setText("MyButtonText");
>
>        super.setTemplateAttribute("screen", screen);
>        super.setTemplateAttribute("screenElement", button);
>        super.setTemplateAttribute("screenElementType", "Button");
>        String templateString =
> super.executeTemplateWithImplicitVariables(
>                templateGroup, templateGroup, 
> "screenElementResourceBundleKey");
>        super.logTemplateOutput(templateString);
>        TestCase.assertEquals("MyScreenForm.Button.MyButtonText.Text",
> templateString);
>
>    }
>
> BaseTemplateTestCase.java:
>
>    /**
>     * Use this method to test templates that use one or more 
> <i>implicit variables</i>
>     * rather than using only formal parameters. Implicit variables 
> should be used only
>     * in cases where the immediate template doesn't need the parameter 
> other than to
>     * pass it to other templates d several levels down in the template 
> calling chain.
>     *
>     * This method execute the template given by the templateName 
> parameter from a temporary
>     * template that this method creates in the template group so that 
> the parameters
>     * previously added by calling setTemplateAttribute() method will 
> be accessible to
>     * the template under test.
>     *
>     * If the template under test does not use implicit variables,
>     * (i.e. only uses formal parameters), then the StringTemplate API 
> can be used directly
>     * rather than using this method.
>     *
>     * @param rootTemplateGroup The rootTemplateGroup in the template 
> group inheritance hierarchy
>     * for the template group that the template under test is in. If 
> the target template group
>     * does not inherit from another template group, then just pass the 
> target template group
>     * as this parameter and also pass the same template group as the 
> targetTemplateGroup parameter.
>     * @param targetTemplateGroup The template group in which the 
> template under test is defined.
>     * @param templateName The name of the template under test.
>     * @return
>     */
>    public String
> executeTemplateWithImplicitVariables(StringTemplateGroup
> rootTemplateGroup,
>            StringTemplateGroup targetTemplateGroup, String
> templateName) {
>
>        StringBuilder temporaryTemplateGroup = new StringBuilder();
>        temporaryTemplateGroup.append("group temp;");
>        temporaryTemplateGroup.append(newline);
>        temporaryTemplateGroup.append("aTemplate(");
>        boolean notFirst = false;
>        for (final String parmName : parms.keySet()) {
>            if (notFirst) {
>                temporaryTemplateGroup.append(", ");
>            }
>            else {
>                notFirst = true;
>            }
>            temporaryTemplateGroup.append(parmName);
>        }
>        temporaryTemplateGroup.append(") ::= <<");
>        temporaryTemplateGroup.append(newline);
>        temporaryTemplateGroup.append("<");
>        temporaryTemplateGroup.append(templateName);
>        temporaryTemplateGroup.append("(...) >");
>        temporaryTemplateGroup.append(newline);
>        temporaryTemplateGroup.append(">>");
>
>        String temporaryTemplateGroupString = 
> temporaryTemplateGroup.toString();
>
>        StringTemplateGroup newParentGroup = new 
> StringTemplateGroup(new StringReader(
>                temporaryTemplateGroupString));
>
>        // Make the rootTemplateGroup inherit from the newParentGroup 
> that we created
>        // from temporaryTemplateGroupString
>        rootTemplateGroup.setSuperGroup(newParentGroup);
>
>        // Get an instance of the temporary template that we have 
> created named aTemplate
>        // from the targetTemplateGroup. Important that we get the 
> instance from the targetTemplateGroup
>        // rather than directly from the newParentGroup template so 
> that the template has access to
>        // all other templates in the template group inheritance 
> hierarchy.
>        StringTemplate template =
> targetTemplateGroup.getInstanceOf("aTemplate");
>
>        for (final Map.Entry<String, Object> entry :  
> parms.entrySet()) {
>            template.setAttribute(entry.getKey(), entry.getValue());
>        }
>        String templateString = template.toString();
>        return templateString;
>    }
>
>    public void setTemplateAttribute(String parmName, Object value) {
>
>        this.parms.put(parmName, value);
>    }
>
> -----Original Message-----
> From: Terence Parr [mailto:parrt at cs.usfca.edu]
> Sent: Thursday, November 13, 2008 5:58 PM
> To: Nathan Ward
> Cc: stringtemplate-interest at antlr.org
> Subject: Re: [stringtemplate-interest] Managing template parameters
>
>
> On Nov 13, 2008, at 11:50 AM, Nathan Ward wrote:
>
>> I'm aware of that, but how can I make a JUnit test for the 
>> subtemplate if it uses an attribute that is not passed as a formal 
>> parameter?
>> Hmmm, I guess I can create a template inline in my test code that 
>> uses the template that I'm testing, which is a string group template 
>> file.
>> I'll try that. Thanks!
>
> That'll work. :)
> Ter
>
>




From nward at resqsoft.com  Tue Nov 25 11:52:27 2008
From: nward at resqsoft.com (Nathan Ward)
Date: Tue, 25 Nov 2008 14:52:27 -0500
Subject: [stringtemplate-interest] Utility to show "template hierarchy"?
Message-ID: <821F37C6338A4198A502B1622D064F7D@nwardlt>

I thought I saw a utility on the StringTemplate or ANTLR websites a couple
of weeks ago that would show dependencies between StringTemplates. However,
I was just now looking for it, but I can't seem to find it. Anyone recall
anything like this?
 
   Nathan
 
Nathan Ward
ResQSoft, Inc.
703.861.9103
www.resqsoft.com
 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org:8080/pipermail/stringtemplate-interest/attachments/20081125/1a14f913/attachment.html 

From jasper_roel at yahoo.com  Wed Nov 26 11:57:00 2008
From: jasper_roel at yahoo.com (Jasper Roel)
Date: Wed, 26 Nov 2008 11:57:00 -0800 (PST)
Subject: [stringtemplate-interest] suggestion for a new option 'empty='
Message-ID: <290958.38002.qm@web33908.mail.mud.yahoo.com>

After a small discussion with Terence about this, here is a (new?) idea for StringTemplate;

In addition to the 'null=""' option for any given variable, it might be (is) useful to have a 'empty=' parameter.

Currently we can use lazy eval for this, as the following example:
$if( (msg.subject) )$
    $msg.subject$
$else$
    [no subject]
$endif$

OR (if it's just a null check):

$msg.subject;null="[no subject]"$

It would be nice to have a way to say:

$msg.subject;null="[null value]";empty="[empty value]"$

It's debatable if the 'empty=' parameter should also check for null pointers. If it does, we can skip the 'null=' part,
and end up with $msg.subject;empty="[empty value]"$ (but keep the 'null=' part if we want to.

Some basic ideas for what is actually empty:
String empty = "";
int empty = 0;
Map/List(Collection) with .length()/.size() == 0


- Jasper


      
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org:8080/pipermail/stringtemplate-interest/attachments/20081126/2af24794/attachment.html 

