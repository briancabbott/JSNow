From christophe at soletis.be  Mon Feb  1 02:19:10 2010
From: christophe at soletis.be (Christophe Vanderhaeghen)
Date: Mon, 1 Feb 2010 11:19:10 +0100
Subject: [stringtemplate-interest] filling a field ($...$) with data that
	also contains a (part of) a field ($...$test)
Message-ID: <001701caa328$005a55e0$010f01a0$@be>

Hi all,

I have a template (myTemplate.st) which is filled with data from the
database.
In the database, the fields might also contain stringtemplate-fields
($...$), thus allowing in the database some dynamics as well.

What I do now is loop twice through the text where the second wave uses the
string-result from the first wave. Like this:
StringTemplateGroup group = new StringTemplateGroup("Templates",
Application.StartupPath + "/Templates/");

StringTemplate template = group.GetInstanceOf("/Module");

template.SetAttribute(GetData().GetType().Name, GetData()); //Get the data
from the database

string firstWave = template.ToString(); //Fill the fields with the data that
came from the database

 

//Now do it for a second time so that the dynamic items from the database
are formatted also:

StringTemplate secondWave = new StringTemplate(firstWave);

secondWave.SetAttribute(GetData().GetType().Name, GetData());

string x = secondWave.ToString();

Question: Is there an alternative way to get all fields filled at once so
that I don't have to StringTemplate twice?

Thanks in advance,

Christophe

 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20100201/e52ea0c8/attachment.html 

From parrt at cs.usfca.edu  Mon Feb  1 10:36:49 2010
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon, 1 Feb 2010 10:36:49 -0800
Subject: [stringtemplate-interest] filling a field ($...$) with data
	that also contains a (part of) a field ($...$test)
In-Reply-To: <001701caa328$005a55e0$010f01a0$@be>
References: <001701caa328$005a55e0$010f01a0$@be>
Message-ID: <0EF89CE9-1D53-4732-B4E0-8D58D831996D@cs.usfca.edu>

Seems like doing it twice is the right way because you actually have to templates: one that contains the template pulled in from a database. Unless the outer template is simply a single hole like $thedata$, it seems like you really do need to templates, which means you need to render twice. Of course, you could patch the templates together into one and then call toString once if you want.
T
On Feb 1, 2010, at 2:19 AM, Christophe Vanderhaeghen wrote:

> Hi all,
> 
> I have a template (myTemplate.st) which is filled with data from the database.
> In the database, the fields might also contain stringtemplate-fields ($...$), thus allowing in the database some dynamics as well.
> 
> What I do now is loop twice through the text where the second wave uses the string-result from the first wave. Like this:
> StringTemplateGroup group = new StringTemplateGroup("Templates", Application.StartupPath +"/Templates/");
> StringTemplate template = group.GetInstanceOf("/Module");
> template.SetAttribute(GetData().GetType().Name, GetData()); //Get the data from the database
> string firstWave = template.ToString(); //Fill the fields with the data that came from the database
>  
> //Now do it for a second time so that the dynamic items from the database are formatted also:
> StringTemplate secondWave = new StringTemplate(firstWave);
> secondWave.SetAttribute(GetData().GetType().Name, GetData());
> string x = secondWave.ToString();
> Question: Is there an alternative way to get all fields filled at once so that I don?t have to StringTemplate twice?
> 
> Thanks in advance,
> 
> Christophe
> 
>  
> 
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest


From ronald.k.muller at gmail.com  Mon Feb  1 11:50:05 2010
From: ronald.k.muller at gmail.com (Ronald Muller)
Date: Mon, 1 Feb 2010 20:50:05 +0100
Subject: [stringtemplate-interest] Extra ST constructor (ST 4.0)
Message-ID: <7966702f1002011150h6e00780fsb3a7a0847b60554f@mail.gmail.com>

I use templates from a database, in thus use case this constructor is very
helpful:

public ST(final STGroup group, final String template) {
    ....
}

Regards,

Ronald
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20100201/23dd048e/attachment.html 

From parrt at cs.usfca.edu  Mon Feb  1 11:59:47 2010
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon, 1 Feb 2010 11:59:47 -0800
Subject: [stringtemplate-interest] Extra ST constructor (ST 4.0)
In-Reply-To: <7966702f1002011150h6e00780fsb3a7a0847b60554f@mail.gmail.com>
References: <7966702f1002011150h6e00780fsb3a7a0847b60554f@mail.gmail.com>
Message-ID: <E05C0EE9-CC17-4BF3-938C-1313DD78EDFA@cs.usfca.edu>

sure. added, pushed trunk to web.
Ter
On Feb 1, 2010, at 11:50 AM, Ronald Muller wrote:

> I use templates from a database, in thus use case this constructor is very helpful:
> 
> public ST(final STGroup group, final String template) {
>     ....
> }
> 
> Regards,
> 
> Ronald
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest


From jonathan at buhacoff.net  Mon Feb  1 22:05:29 2010
From: jonathan at buhacoff.net (Jonathan Buhacoff)
Date: Mon, 1 Feb 2010 22:05:29 -0800
Subject: [stringtemplate-interest] filling a field ($...$) with data
	that also contains a (part of) a field ($...$test)
In-Reply-To: <0EF89CE9-1D53-4732-B4E0-8D58D831996D@cs.usfca.edu>
References: <001701caa328$005a55e0$010f01a0$@be>
	<0EF89CE9-1D53-4732-B4E0-8D58D831996D@cs.usfca.edu>
Message-ID: <1A50EB35-DDF1-44B6-907A-E49C04E18CE3@buhacoff.net>

I worked on a project where I had a similar setup.

I was able to render in just one pass by wrapping each value from the  
database with an ST object before adding it to the primary template's  
attributes.

Try  setAttribute(name, new StringTemplate(GetData());  ... as long as  
the return value of GetData() is actually valid template text.  If  
it's something else you'll have to recurse.

In my project I wrote a custom STG that wraps my values in ST on the  
fly.

Jonathan

On Feb 1, 2010, at 10:36 AM, Terence Parr wrote:

> Seems like doing it twice is the right way because you actually have  
> to templates: one that contains the template pulled in from a  
> database. Unless the outer template is simply a single hole like  
> $thedata$, it seems like you really do need to templates, which  
> means you need to render twice. Of course, you could patch the  
> templates together into one and then call toString once if you want.
> T
> On Feb 1, 2010, at 2:19 AM, Christophe Vanderhaeghen wrote:
>
>> Hi all,
>>
>> I have a template (myTemplate.st) which is filled with data from  
>> the database.
>> In the database, the fields might also contain stringtemplate- 
>> fields ($...$), thus allowing in the database some dynamics as well.
>>
>> What I do now is loop twice through the text where the second wave  
>> uses the string-result from the first wave. Like this:
>> StringTemplateGroup group = new StringTemplateGroup("Templates",  
>> Application.StartupPath +"/Templates/");
>> StringTemplate template = group.GetInstanceOf("/Module");
>> template.SetAttribute(GetData().GetType().Name, GetData()); //Get  
>> the data from the database
>> string firstWave = template.ToString(); //Fill the fields with the  
>> data that came from the database
>>
>> //Now do it for a second time so that the dynamic items from the  
>> database are formatted also:
>> StringTemplate secondWave = new StringTemplate(firstWave);
>> secondWave.SetAttribute(GetData().GetType().Name, GetData());
>> string x = secondWave.ToString();
>> Question: Is there an alternative way to get all fields filled at  
>> once so that I don?t have to StringTemplate twice?
>>
>> Thanks in advance,
>>
>> Christophe
>>
>>
>>
>> _______________________________________________
>> stringtemplate-interest mailing list
>> stringtemplate-interest at antlr.org
>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest


From ronald.k.muller at gmail.com  Wed Feb  3 02:05:14 2010
From: ronald.k.muller at gmail.com (Ronald Muller)
Date: Wed, 3 Feb 2010 11:05:14 +0100
Subject: [stringtemplate-interest] Use case supported by ST?
Message-ID: <7966702f1002030205j2ef763f3u741c6bcf1f63b9cd@mail.gmail.com>

Hi,

I have the following use case:

I have to list items and display "Yes" or "No" if they are present in a set
(Checklist items in my case, modeled as enums), So:

Task1: Yes
Task2: No
Task3: No
...

My domain class has:

public Set getChecklist() { .. }

The only solution I see is to add an extra method in my domain class:

public Map<String, Boolean> getChecklistItems() { ... }

and do:

$object.checklistItems.keys:{k|
$k$: $object.checklistItems.(k)$\n
}$

Is there a simpler solution without modifying my domain class?

Regards,

Ronald
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20100203/b7c65b6b/attachment.html 

From parrt at cs.usfca.edu  Wed Feb  3 10:58:46 2010
From: parrt at cs.usfca.edu (Terence Parr)
Date: Wed, 3 Feb 2010 10:58:46 -0800
Subject: [stringtemplate-interest] Use case supported by ST?
In-Reply-To: <7966702f1002030205j2ef763f3u741c6bcf1f63b9cd@mail.gmail.com>
References: <7966702f1002030205j2ef763f3u741c6bcf1f63b9cd@mail.gmail.com>
Message-ID: <BC9348D4-E319-49C2-8D6F-4E592BF94AF3@cs.usfca.edu>


On Feb 3, 2010, at 2:05 AM, Ronald Muller wrote:

> Hi,
> 
> I have the following use case:
> 
> I have to list items and display "Yes" or "No" if they are present in a set (Checklist items in my case, modeled as enums), So:
> 
> Task1: Yes
> Task2: No
> Task3: No
> ...

Hi.  What's in the set? must be an object with string/boolean?  wouldn't this work then

$yourdomainobject.checkList:{o | $o.str$: $o.bool$}$

Ter


From ronald.k.muller at gmail.com  Fri Feb  5 00:27:13 2010
From: ronald.k.muller at gmail.com (Ronald Muller)
Date: Fri, 5 Feb 2010 09:27:13 +0100
Subject: [stringtemplate-interest] Use case supported by ST?
In-Reply-To: <BC9348D4-E319-49C2-8D6F-4E592BF94AF3@cs.usfca.edu>
References: <7966702f1002030205j2ef763f3u741c6bcf1f63b9cd@mail.gmail.com>
	<BC9348D4-E319-49C2-8D6F-4E592BF94AF3@cs.usfca.edu>
Message-ID: <7966702f1002050027y450949cel17e497f35aa0a655@mail.gmail.com>

In the set are enums. I have to print "yes" if the set contains the value,
"No" otherwise. So in java code:

final EnumSet<ChecklistItem> checklist = ....
for (ChecklistItem item : ChecklistItem.values()) {
      println(item.getTitle() + ": " + checklist.contains(item) ? "Yes" :
"No");
}

Regards,

Ronald

2010/2/3 Terence Parr <parrt at cs.usfca.edu>

>
> On Feb 3, 2010, at 2:05 AM, Ronald Muller wrote:
>
> > Hi,
> >
> > I have the following use case:
> >
> > I have to list items and display "Yes" or "No" if they are present in a
> set (Checklist items in my case, modeled as enums), So:
> >
> > Task1: Yes
> > Task2: No
> > Task3: No
> > ...
>
> Hi.  What's in the set? must be an object with string/boolean?  wouldn't
> this work then
>
> $yourdomainobject.checkList:{o | $o.str$: $o.bool$}$
>
> Ter
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20100205/b43cc027/attachment.html 

From royalpeasantry at gmail.com  Fri Feb  5 10:40:43 2010
From: royalpeasantry at gmail.com (Joshua Royalty)
Date: Fri, 5 Feb 2010 10:40:43 -0800
Subject: [stringtemplate-interest] Use case supported by ST?
In-Reply-To: <7966702f1002050027y450949cel17e497f35aa0a655@mail.gmail.com>
References: <7966702f1002030205j2ef763f3u741c6bcf1f63b9cd@mail.gmail.com>
	<BC9348D4-E319-49C2-8D6F-4E592BF94AF3@cs.usfca.edu>
	<7966702f1002050027y450949cel17e497f35aa0a655@mail.gmail.com>
Message-ID: <97da28b11002051040s79b5841ch20bc1445b185d6ee@mail.gmail.com>

I'm new, but given that ST only allows you to check for not null/null or
true/false I don't believe you can generate it from the EnumSet.  I believe
you need to do some preprocessing and build a map from CheckListItem to
Boolean for the contains part.

I'm pretty sure this was a deliberate design decision to enforce strict
model-view separation.

EX:
public class App {
    public enum ChecklistItem {
        Test1, Test2, Test3, Test4, Test5;

        public String getTitle() {
            return name();
        }
    }

    public static void main(String[] args) throws Exception {
        final EnumSet<ChecklistItem> checklist =
EnumSet.of(ChecklistItem.Test1, ChecklistItem.Test3);
        final EnumMap<ChecklistItem, Boolean> checklistContents = new
EnumMap<ChecklistItem, Boolean>(ChecklistItem.class);
        for (ChecklistItem item : ChecklistItem.values()) {
            checklistContents.put(item, checklist.contains(item));
        }
        StringTemplate checks = new StringTemplate("<checklist.keys:{ k |
<k.title>: <if(checklist.(k))>Yes<else>No<endif>\n}>",
AngleBracketTemplateLexer.class);
        checks.setAttribute("checklist", checklistContents);
        System.out.println(checks.toString());
    }
}

A slightly more compact form of synax, ST will create the map for you but I
think it is slightly less efficient because I think this ends up being a
List<Map<String, Object>> instead of an EnumMap<CheckListItem, Boolean>, so
it takes up alot more space plus it takes computation time when parsing the
attribute.

public class App {
    public enum ChecklistItem {
        Test1, Test2, Test3, Test4, Test5;

        public String getTitle() {
            return name();
        }
    }

    public static void main(String[] args) throws Exception {
        final EnumSet<ChecklistItem> checklist =
EnumSet.of(ChecklistItem.Test1, ChecklistItem.Test3);
        StringTemplate checks = new StringTemplate("<checklist:{ v |
<v.item.title>: <if(v.contains)>Yes<else>No<endif>\n}>",
AngleBracketTemplateLexer.class);
        for (ChecklistItem item : ChecklistItem.values()) {
            checks.setAttribute("checklist.{item, contains}", item,
checklist.contains(item));
        }
        System.out.println(checks.toString());
    }
}

Look at http://www.antlr.org/wiki/display/ST/Expressions for more
information.
-Josh

On Fri, Feb 5, 2010 at 12:27 AM, Ronald Muller <ronald.k.muller at gmail.com>wrote:

> In the set are enums. I have to print "yes" if the set contains the value,
> "No" otherwise. So in java code:
>
> final EnumSet<ChecklistItem> checklist = ....
> for (ChecklistItem item : ChecklistItem.values()) {
>       println(item.getTitle() + ": " + checklist.contains(item) ? "Yes" :
> "No");
> }
>
> Regards,
>
> Ronald
>
> 2010/2/3 Terence Parr <parrt at cs.usfca.edu>
>
>>
>> On Feb 3, 2010, at 2:05 AM, Ronald Muller wrote:
>>
>> > Hi,
>> >
>> > I have the following use case:
>> >
>> > I have to list items and display "Yes" or "No" if they are present in a
>> set (Checklist items in my case, modeled as enums), So:
>> >
>> > Task1: Yes
>> > Task2: No
>> > Task3: No
>> > ...
>>
>> Hi.  What's in the set? must be an object with string/boolean?  wouldn't
>> this work then
>>
>> $yourdomainobject.checkList:{o | $o.str$: $o.bool$}$
>>
>> Ter
>>
>>
>
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20100205/cba999a8/attachment.html 

From joshua.royalty at gmail.com  Sat Feb  6 02:52:50 2010
From: joshua.royalty at gmail.com (Joshua Royalty)
Date: Sat, 6 Feb 2010 02:52:50 -0800
Subject: [stringtemplate-interest] dealing with empty list values
Message-ID: <97da28b11002060252i2b356a29q713dc1e545fbd70c@mail.gmail.com>

Hi, I ran into a bit of a stumbling block with a list containing null
values.  It seems that ST automatically skips over null values when
iterating over a list.

I searched the archives and found this thread
http://markmail.org/search/?q=list%3Astringtemplate+dealing+with+empty+list+values#query:list%3Astringtemplate%20dealing%20with%20empty%20list%20values+page:1+mid:fvkxdehqyuyu4jxp+state:results

Was a solution ever implemented?

Personally I would find it most intuitive to have the default be to not skip
nulls.  Such that "$values:{ v | $if(v)$$v$$else$-1$endif$" would be
identical to "$values; separator=\", \", null=\"-1\"$"

Instead, if you sent values to {test1, null, test2} you get
test1, test2
test1, -1, test2

"$values:{ v | $if(v)$$v$$else$-1$endif$}; separator=\", \", null=\"-1\"$"
also prints 'test1, -1, test2'

Its not logically consistent to skip nulls when iterating over a list and
treat them as "" (Empty String) everywhere else.  (A case could also be made
that it is not logically consistent to treat them as false in the if
statement as well)

If someone wants to clean nulls out of the list they can use the strip()
function, though strictly speaking that should have been handled by the
model.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20100206/66eec9fb/attachment.html 

From ronald.k.muller at gmail.com  Sun Feb  7 04:02:18 2010
From: ronald.k.muller at gmail.com (Ronald Muller)
Date: Sun, 7 Feb 2010 13:02:18 +0100
Subject: [stringtemplate-interest] Use case supported by ST?
In-Reply-To: <97da28b11002051040s79b5841ch20bc1445b185d6ee@mail.gmail.com>
References: <7966702f1002030205j2ef763f3u741c6bcf1f63b9cd@mail.gmail.com>
	<BC9348D4-E319-49C2-8D6F-4E592BF94AF3@cs.usfca.edu>
	<7966702f1002050027y450949cel17e497f35aa0a655@mail.gmail.com>
	<97da28b11002051040s79b5841ch20bc1445b185d6ee@mail.gmail.com>
Message-ID: <7966702f1002070402v18c34d80q50a417066cd74ce0@mail.gmail.com>

Thanks Joshua.

I also came to the conclusion I have to modify my domain class. I was
looking for something more simple. Calling Collection#contains() has no side
effects, so i expected it to be available in ST.

Regards,

Ronald

2010/2/5 Joshua Royalty <royalpeasantry at gmail.com>

> I'm new, but given that ST only allows you to check for not null/null or
> true/false I don't believe you can generate it from the EnumSet.  I believe
> you need to do some preprocessing and build a map from CheckListItem to
> Boolean for the contains part.
>
> I'm pretty sure this was a deliberate design decision to enforce strict
> model-view separation.
>
> EX:
> public class App {
>     public enum ChecklistItem {
>         Test1, Test2, Test3, Test4, Test5;
>
>         public String getTitle() {
>             return name();
>         }
>     }
>
>     public static void main(String[] args) throws Exception {
>         final EnumSet<ChecklistItem> checklist =
> EnumSet.of(ChecklistItem.Test1, ChecklistItem.Test3);
>         final EnumMap<ChecklistItem, Boolean> checklistContents = new
> EnumMap<ChecklistItem, Boolean>(ChecklistItem.class);
>
>         for (ChecklistItem item : ChecklistItem.values()) {
>             checklistContents.put(item, checklist.contains(item));
>         }
>         StringTemplate checks = new StringTemplate("<checklist.keys:{ k |
> <k.title>: <if(checklist.(k))>Yes<else>No<endif>\n}>",
> AngleBracketTemplateLexer.class);
>         checks.setAttribute("checklist", checklistContents);
>         System.out.println(checks.toString());
>     }
> }
>
> A slightly more compact form of synax, ST will create the map for you but I
> think it is slightly less efficient because I think this ends up being a
> List<Map<String, Object>> instead of an EnumMap<CheckListItem, Boolean>, so
> it takes up alot more space plus it takes computation time when parsing the
> attribute.
>
> public class App {
>     public enum ChecklistItem {
>         Test1, Test2, Test3, Test4, Test5;
>
>         public String getTitle() {
>             return name();
>         }
>     }
>
>     public static void main(String[] args) throws Exception {
>         final EnumSet<ChecklistItem> checklist =
> EnumSet.of(ChecklistItem.Test1, ChecklistItem.Test3);
>         StringTemplate checks = new StringTemplate("<checklist:{ v |
> <v.item.title>: <if(v.contains)>Yes<else>No<endif>\n}>",
> AngleBracketTemplateLexer.class);
>
>         for (ChecklistItem item : ChecklistItem.values()) {
>             checks.setAttribute("checklist.{item, contains}", item,
> checklist.contains(item));
>         }
>         System.out.println(checks.toString());
>     }
> }
>
> Look at http://www.antlr.org/wiki/display/ST/Expressions for more
> information.
> -Josh
>
> On Fri, Feb 5, 2010 at 12:27 AM, Ronald Muller <ronald.k.muller at gmail.com>wrote:
>
>> In the set are enums. I have to print "yes" if the set contains the value,
>> "No" otherwise. So in java code:
>>
>> final EnumSet<ChecklistItem> checklist = ....
>> for (ChecklistItem item : ChecklistItem.values()) {
>>       println(item.getTitle() + ": " + checklist.contains(item) ? "Yes" :
>> "No");
>> }
>>
>> Regards,
>>
>> Ronald
>>
>> 2010/2/3 Terence Parr <parrt at cs.usfca.edu>
>>
>>>
>>> On Feb 3, 2010, at 2:05 AM, Ronald Muller wrote:
>>>
>>> > Hi,
>>> >
>>> > I have the following use case:
>>> >
>>> > I have to list items and display "Yes" or "No" if they are present in a
>>> set (Checklist items in my case, modeled as enums), So:
>>> >
>>> > Task1: Yes
>>> > Task2: No
>>> > Task3: No
>>> > ...
>>>
>>> Hi.  What's in the set? must be an object with string/boolean?  wouldn't
>>> this work then
>>>
>>> $yourdomainobject.checkList:{o | $o.str$: $o.bool$}$
>>>
>>> Ter
>>>
>>>
>>
>> _______________________________________________
>> stringtemplate-interest mailing list
>> stringtemplate-interest at antlr.org
>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>>
>>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20100207/74eca625/attachment.html 

From parrt at cs.usfca.edu  Sun Feb  7 11:59:27 2010
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sun, 7 Feb 2010 11:59:27 -0800
Subject: [stringtemplate-interest] Use case supported by ST?
In-Reply-To: <7966702f1002070402v18c34d80q50a417066cd74ce0@mail.gmail.com>
References: <7966702f1002030205j2ef763f3u741c6bcf1f63b9cd@mail.gmail.com>
	<BC9348D4-E319-49C2-8D6F-4E592BF94AF3@cs.usfca.edu>
	<7966702f1002050027y450949cel17e497f35aa0a655@mail.gmail.com>
	<97da28b11002051040s79b5841ch20bc1445b185d6ee@mail.gmail.com>
	<7966702f1002070402v18c34d80q50a417066cd74ce0@mail.gmail.com>
Message-ID: <CAD5F3F3-3573-492F-970B-767C044BEDDD@cs.usfca.edu>


On Feb 7, 2010, at 4:02 AM, Ronald Muller wrote:

> Thanks Joshua.
> 
> I also came to the conclusion I have to modify my domain class. I was looking for something more simple. Calling Collection#contains() has no side effects, so i expected it to be available in ST.

Well, ST requires no side effects but that doesn't mean that every side effect free function is okay. In particular, I decided that being able to send an arbitrary parameter to the model entangles the model and view. for example, you could say $db.sql("drop table Users")$

Ter

From parrt at cs.usfca.edu  Sun Feb  7 12:01:22 2010
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sun, 7 Feb 2010 12:01:22 -0800
Subject: [stringtemplate-interest] dealing with empty list values
In-Reply-To: <97da28b11002060252i2b356a29q713dc1e545fbd70c@mail.gmail.com>
References: <97da28b11002060252i2b356a29q713dc1e545fbd70c@mail.gmail.com>
Message-ID: <2CE3E8E5-04B0-45D4-81E2-6F25E8AFCF08@cs.usfca.edu>

Hi Joshua, I wrestled with this concept for quite a while about null values in a list. First, let me remind you that a missing parameter $foo$ is not the empty string--it's actually missing. to be consistent, I decided that null values in a list are missing not empty or blank.

So, my solution to that posting you mentioned is to allow the null option.

Ter
On Feb 6, 2010, at 2:52 AM, Joshua Royalty wrote:

> Hi, I ran into a bit of a stumbling block with a list containing null values.  It seems that ST automatically skips over null values when iterating over a list.
> 
> I searched the archives and found this thread
> http://markmail.org/search/?q=list%3Astringtemplate+dealing+with+empty+list+values#query:list%3Astringtemplate%20dealing%20with%20empty%20list%20values+page:1+mid:fvkxdehqyuyu4jxp+state:results
> 
> Was a solution ever implemented?
> 
> Personally I would find it most intuitive to have the default be to not skip nulls.  Such that "$values:{ v | $if(v)$$v$$else$-1$endif$" would be identical to "$values; separator=\", \", null=\"-1\"$"
> 
> Instead, if you sent values to {test1, null, test2} you get
> test1, test2
> test1, -1, test2
> 
> "$values:{ v | $if(v)$$v$$else$-1$endif$}; separator=\", \", null=\"-1\"$" also prints 'test1, -1, test2'
> 
> Its not logically consistent to skip nulls when iterating over a list and treat them as "" (Empty String) everywhere else.  (A case could also be made that it is not logically consistent to treat them as false in the if statement as well)
> 
> If someone wants to clean nulls out of the list they can use the strip() function, though strictly speaking that should have been handled by the model.
> 
> 
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest


From joshua.royalty at gmail.com  Sun Feb  7 17:02:26 2010
From: joshua.royalty at gmail.com (Joshua Royalty)
Date: Sun, 7 Feb 2010 17:02:26 -0800
Subject: [stringtemplate-interest] dealing with empty list values
In-Reply-To: <2CE3E8E5-04B0-45D4-81E2-6F25E8AFCF08@cs.usfca.edu>
References: <97da28b11002060252i2b356a29q713dc1e545fbd70c@mail.gmail.com>
	<2CE3E8E5-04B0-45D4-81E2-6F25E8AFCF08@cs.usfca.edu>
Message-ID: <97da28b11002071702q2751b19bjb849f3657be1fbf8@mail.gmail.com>

Hi Terence,

You're right, I was mistaken to say that it treated them as the empty string
and thus I worded things badly.  The main logical inconsistency I am seeing
is less in how the value is treated than in how the iterator works as
compared to iterators in other languages.

If $foo$ is 'missing', then
'<tr>$if(foo)<b>$foo$</b>$else$MISSING$endif$</tr>' will still print
'<tr>MISSING</tr>', but $values:{ v |
<tr>$if(v)<b>$v$</b>$else$MISSING$endif$</tr>}$ will not print
'<tr>MISSING</tr>' if one of the values is 'missing'.  Obviously in the
first case ST does not know what text it should skip and the user obviously
intended it to print <tr>MISSING</tr>, and I contend that ST also cannot
know if it should skip in the second case and that the user obviously
intended it to print <tr>MISSING</tr> for values that were 'missing'.  When
I use a list iterator I intuitively expect it to iterate over every value in
the list, it should be the same as repeating the code inside the template
for every value in the list, even if that value is 'missing'.

Also, length(values) return the length of the list with the nulls included,
and in order to get the length without them you need to call
length(strip(values)).  To be consistent with the current ST list iterator
length(values) should automatically strip nulls...  However, another fix
would be to not automatically skip nulls in the list iterator.  This would
fix both of the inconsistencies and be much more intuitive.  If people want
to skip the nulls entirely when iterating they can use strip as a shortcut,
$strip(values):{ v | <tr><b>$v$</b></tr>}$.  For backwards compatibility /
convienience you can add a global 'AutoStripLists' option if you think its
necessary.

Given that the thread is from 2006 I think it may have been before the 'if'
statement was added.  As such the null option would have been a perfect fix
since this problem only exists when the if statement is used..  I did find a
hack using the null option that works ($values:{ v |
<tr>$if(v)<b>$v$</b>$else$MISSING$endif$</tr>}; null=false$), but I really
don't like using it and it doesn't fix the inconsistency issues.

-Josh

PS: I also decided to try '$values:{ v | $if(v)$$v$$else$-1$endif$};
separator=\", \", null=null$' and that makes it not skip the null values
(which it really shouldn't...).  However, it also prints 'test1, , test2'
instead of 'test1, -1, test2'...  I then tried null=blah and that did the
same thing so I'm pretty sure this should be a syntax error if null=foo
where foo is not a string and is not true/false


On Sun, Feb 7, 2010 at 12:01 PM, Terence Parr <parrt at cs.usfca.edu> wrote:

> Hi Joshua, I wrestled with this concept for quite a while about null values
> in a list. First, let me remind you that a missing parameter $foo$ is not
> the empty string--it's actually missing. to be consistent, I decided that
> null values in a list are missing not empty or blank.
>
> So, my solution to that posting you mentioned is to allow the null option.
>
> Ter
> On Feb 6, 2010, at 2:52 AM, Joshua Royalty wrote:
>
> > Hi, I ran into a bit of a stumbling block with a list containing null
> values.  It seems that ST automatically skips over null values when
> iterating over a list.
> >
> > I searched the archives and found this thread
> >
> http://markmail.org/search/?q=list%3Astringtemplate+dealing+with+empty+list+values#query:list%3Astringtemplate%20dealing%20with%20empty%20list%20values+page:1+mid:fvkxdehqyuyu4jxp+state:results
> >
> > Was a solution ever implemented?
> >
> > Personally I would find it most intuitive to have the default be to not
> skip nulls.  Such that "$values:{ v | $if(v)$$v$$else$-1$endif$" would be
> identical to "$values; separator=\", \", null=\"-1\"$"
> >
> > Instead, if you sent values to {test1, null, test2} you get
> > test1, test2
> > test1, -1, test2
> >
> > "$values:{ v | $if(v)$$v$$else$-1$endif$}; separator=\", \",
> null=\"-1\"$" also prints 'test1, -1, test2'
> >
> > Its not logically consistent to skip nulls when iterating over a list and
> treat them as "" (Empty String) everywhere else.  (A case could also be made
> that it is not logically consistent to treat them as false in the if
> statement as well)
> >
> > If someone wants to clean nulls out of the list they can use the strip()
> function, though strictly speaking that should have been handled by the
> model.
> >
> >
> > _______________________________________________
> > stringtemplate-interest mailing list
> > stringtemplate-interest at antlr.org
> > http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20100207/7bd9c045/attachment.html 

From ronald.k.muller at gmail.com  Mon Feb  8 00:20:36 2010
From: ronald.k.muller at gmail.com (Ronald Muller)
Date: Mon, 8 Feb 2010 09:20:36 +0100
Subject: [stringtemplate-interest] Use case supported by ST?
In-Reply-To: <CAD5F3F3-3573-492F-970B-767C044BEDDD@cs.usfca.edu>
References: <7966702f1002030205j2ef763f3u741c6bcf1f63b9cd@mail.gmail.com>
	<BC9348D4-E319-49C2-8D6F-4E592BF94AF3@cs.usfca.edu>
	<7966702f1002050027y450949cel17e497f35aa0a655@mail.gmail.com>
	<97da28b11002051040s79b5841ch20bc1445b185d6ee@mail.gmail.com>
	<7966702f1002070402v18c34d80q50a417066cd74ce0@mail.gmail.com>
	<CAD5F3F3-3573-492F-970B-767C044BEDDD@cs.usfca.edu>
Message-ID: <7966702f1002080020j1e3574e8mbb89818579ad1d35@mail.gmail.com>

Thanks and I understand the background of this decision.

Ronald

2010/2/7 Terence Parr <parrt at cs.usfca.edu>

>
> On Feb 7, 2010, at 4:02 AM, Ronald Muller wrote:
>
> > Thanks Joshua.
> >
> > I also came to the conclusion I have to modify my domain class. I was
> looking for something more simple. Calling Collection#contains() has no side
> effects, so i expected it to be available in ST.
>
> Well, ST requires no side effects but that doesn't mean that every side
> effect free function is okay. In particular, I decided that being able to
> send an arbitrary parameter to the model entangles the model and view. for
> example, you could say $db.sql("drop table Users")$
>
> Ter
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20100208/a6a2b946/attachment.html 

From parrt at cs.usfca.edu  Mon Feb  8 13:51:20 2010
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon, 8 Feb 2010 13:51:20 -0800
Subject: [stringtemplate-interest] dealing with empty list values
In-Reply-To: <97da28b11002071702q2751b19bjb849f3657be1fbf8@mail.gmail.com>
References: <97da28b11002060252i2b356a29q713dc1e545fbd70c@mail.gmail.com>
	<2CE3E8E5-04B0-45D4-81E2-6F25E8AFCF08@cs.usfca.edu>
	<97da28b11002071702q2751b19bjb849f3657be1fbf8@mail.gmail.com>
Message-ID: <443ECF75-E2E2-47E4-9A89-C9EFEA4029A0@cs.usfca.edu>

On Feb 7, 2010, at 5:02 PM, Joshua Royalty wrote:
Hi Terence,
> If $foo$ is 'missing', then '<tr>$if(foo)<b>$foo$</b>$else$MISSING$endif$</tr>' will still print '<tr>MISSING</tr>', but $values:{ v | <tr>$if(v)<b>$v$</b>$else$MISSING$endif$</tr>}$ will not print '<tr>MISSING</tr>' if one of the values is 'missing'.

unless you use the null option, right?

>  Obviously in the first case ST does not know what text it should skip and the user obviously intended it to print <tr>MISSING</tr>, and I contend that ST also cannot know if it should skip in the second case and that the user obviously intended it to print <tr>MISSING</tr> for values that were 'missing'.  When I use a list iterator I intuitively expect it to iterate over every value in the list, it should be the same as repeating the code inside the template for every value in the list, even if that value is 'missing'.

Well, if foo is missing then $foo:blort()$ should not evaluate blort() and it doesn't. Therefore when foo his multi-valued, it should skip any empty values to be consistent, right?

> Also, length(values) return the length of the list with the nulls included, and in order to get the length without them you need to call length(strip(values)).  

You're right.  that is inconsistent. on the other hand, given that you might be using the null option, there has to be a way to figure out how many total elements you're going to have.

> To be consistent with the current ST list iterator length(values) should automatically strip nulls...  However, another fix would be to not automatically skip nulls in the list iterator.  This would fix both of the inconsistencies and be much more intuitive.  If people want to skip the nulls entirely when iterating they can use strip as a shortcut, $strip(values):{ v | <tr><b>$v$</b></tr>}$.  For backwards compatibility / convienience you can add a global 'AutoStripLists' option if you think its necessary.

I understand what you're saying, but what about the case when foo a single value that I have above? should it invoke blort()?

> Given that the thread is from 2006 I think it may have been before the 'if' statement was added.  As such the null option would have been a perfect fix since this problem only exists when the if statement is used..  I did find a hack using the null option that works ($values:{ v | <tr>$if(v)<b>$v$</b>$else$MISSING$endif$</tr>}; null=false$), but I really don't like using it and it doesn't fix the inconsistency issues.  

using null in this way is its intended function, so doesn't really seem like a hack for my perspective ;)

Ter

From joshua.royalty at gmail.com  Mon Feb  8 19:11:51 2010
From: joshua.royalty at gmail.com (Joshua Royalty)
Date: Mon, 8 Feb 2010 19:11:51 -0800
Subject: [stringtemplate-interest] dealing with empty list values
In-Reply-To: <443ECF75-E2E2-47E4-9A89-C9EFEA4029A0@cs.usfca.edu>
References: <97da28b11002060252i2b356a29q713dc1e545fbd70c@mail.gmail.com>
	<2CE3E8E5-04B0-45D4-81E2-6F25E8AFCF08@cs.usfca.edu>
	<97da28b11002071702q2751b19bjb849f3657be1fbf8@mail.gmail.com>
	<443ECF75-E2E2-47E4-9A89-C9EFEA4029A0@cs.usfca.edu>
Message-ID: <97da28b11002081911w4523f719w4d0e5af407051090@mail.gmail.com>

On Mon, Feb 8, 2010 at 1:51 PM, Terence Parr <parrt at cs.usfca.edu> wrote:

> On Feb 7, 2010, at 5:02 PM, Joshua Royalty wrote:
> Hi Terence,
> > If $foo$ is 'missing', then
> '<tr>$if(foo)<b>$foo$</b>$else$MISSING$endif$</tr>' will still print
> '<tr>MISSING</tr>', but $values:{ v |
> <tr>$if(v)<b>$v$</b>$else$MISSING$endif$</tr>}$ will not print
> '<tr>MISSING</tr>' if one of the values is 'missing'.
>
> unless you use the null option, right?
>

is null=false the intended way to do this?  If so it.. works, but it doesn't
seem like a clean solution.  First you end up with lists with multiple types
of values..  which is just generally not a good idea.  Second.. it is nice
that it preserves backwards compatibility, and its relatively easy to
implement.. but it really seems like a solution tacked on at the last minute
and its not intuitive at all to a programmer.


>
> >  Obviously in the first case ST does not know what text it should skip
> and the user obviously intended it to print <tr>MISSING</tr>, and I contend
> that ST also cannot know if it should skip in the second case and that the
> user obviously intended it to print <tr>MISSING</tr> for values that were
> 'missing'.  When I use a list iterator I intuitively expect it to iterate
> over every value in the list, it should be the same as repeating the code
> inside the template for every value in the list, even if that value is
> 'missing'.
>
> Well, if foo is missing then $foo:blort()$ should not evaluate blort() and
> it doesn't. Therefore when foo his multi-valued, it should skip any empty
> values to be consistent, right?
>

Depends on how you think about it..  See below


>
> > Also, length(values) return the length of the list with the nulls
> included, and in order to get the length without them you need to call
> length(strip(values)).
>
> You're right.  that is inconsistent. on the other hand, given that you
> might be using the null option, there has to be a way to figure out how many
> total elements you're going to have.
>

Again, the inconsistencies make it seem like this was tacked on instead of
integrated into the framework..  And that makes it harder to remember and
use.


>
> > To be consistent with the current ST list iterator length(values) should
> automatically strip nulls...  However, another fix would be to not
> automatically skip nulls in the list iterator.  This would fix both of the
> inconsistencies and be much more intuitive.  If people want to skip the
> nulls entirely when iterating they can use strip as a shortcut,
> $strip(values):{ v | <tr><b>$v$</b></tr>}$.  For backwards compatibility /
> convienience you can add a global 'AutoStripLists' option if you think its
> necessary.
>
> I understand what you're saying, but what about the case when foo a single
> value that I have above? should it invoke blort()?
>

I think I may have found the communications disconnect.  I've been treating
':' as the 'list iterator' operator... you seem to be treating it as the
'apply template'/'expand list and apply template' operator..

If you think of ':' as the 'list iterator' operator (which is how the cheat
sheet describes it..), then actually, no, blort should not be invoked
because by using the 'list iterator' operator (instead of the 'invoke
template' ($<template>(<attr>)$) operator) you are implying that it is a
multi-valued attribute.  (so $<attr>:<template>$ is a shortcut for
$if(<attr>)$$<template>(<attr>)$$endif$ when <attr> is single valued...
(though personally I would spell it out the second way..))



I guess the real question it comes down to is what is more important..
convienience in the case that you want to not want to apply the template to
null items in a list or having a consistent (and thereby intuitive)
framework.  Needing to skip null elements in a list seems like a pretty
uncommon case to me.. (I could be wrong), and its the only piece that would
not be backwards compatible.  If people really need to skip nulls, they
could simply use 'strip'.. or there could be a global 'UseStripIterator'
setting..
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20100208/230b7778/attachment.html 

From jonathan at buhacoff.net  Wed Feb 10 07:05:13 2010
From: jonathan at buhacoff.net (Jonathan Buhacoff)
Date: Wed, 10 Feb 2010 07:05:13 -0800
Subject: [stringtemplate-interest] dealing with empty list values
In-Reply-To: <97da28b11002081911w4523f719w4d0e5af407051090@mail.gmail.com>
References: <97da28b11002060252i2b356a29q713dc1e545fbd70c@mail.gmail.com>
	<2CE3E8E5-04B0-45D4-81E2-6F25E8AFCF08@cs.usfca.edu>
	<97da28b11002071702q2751b19bjb849f3657be1fbf8@mail.gmail.com>
	<443ECF75-E2E2-47E4-9A89-C9EFEA4029A0@cs.usfca.edu>
	<97da28b11002081911w4523f719w4d0e5af407051090@mail.gmail.com>
Message-ID: <413F38CB-D34C-420E-A019-F28AF9AB901C@buhacoff.net>

Is it right that the null=false option should mean something like

$strip(values):{ v | $if(v)$ v $else$ missing $endif$ }$

?



On Feb 8, 2010, at 7:11 PM, Joshua Royalty wrote:

>
>
> On Mon, Feb 8, 2010 at 1:51 PM, Terence Parr <parrt at cs.usfca.edu>  
> wrote:
> On Feb 7, 2010, at 5:02 PM, Joshua Royalty wrote:
> Hi Terence,
> > If $foo$ is 'missing', then '<tr>$if(foo)<b>$foo$</b>$else$MISSING 
> $endif$</tr>' will still print '<tr>MISSING</tr>', but $values:{ v |  
> <tr>$if(v)<b>$v$</b>$else$MISSING$endif$</tr>}$ will not print  
> '<tr>MISSING</tr>' if one of the values is 'missing'.
>
> unless you use the null option, right?
>
> is null=false the intended way to do this?  If so it.. works, but it  
> doesn't seem like a clean solution.  First you end up with lists  
> with multiple types of values..  which is just generally not a good  
> idea.  Second.. it is nice that it preserves backwards  
> compatibility, and its relatively easy to implement.. but it really  
> seems like a solution tacked on at the last minute and its not  
> intuitive at all to a programmer.
>
>
> >  Obviously in the first case ST does not know what text it should  
> skip and the user obviously intended it to print <tr>MISSING</tr>,  
> and I contend that ST also cannot know if it should skip in the  
> second case and that the user obviously intended it to print  
> <tr>MISSING</tr> for values that were 'missing'.  When I use a list  
> iterator I intuitively expect it to iterate over every value in the  
> list, it should be the same as repeating the code inside the  
> template for every value in the list, even if that value is 'missing'.
>
> Well, if foo is missing then $foo:blort()$ should not evaluate  
> blort() and it doesn't. Therefore when foo his multi-valued, it  
> should skip any empty values to be consistent, right?
>
> Depends on how you think about it..  See below
>
>
> > Also, length(values) return the length of the list with the nulls  
> included, and in order to get the length without them you need to  
> call length(strip(values)).
>
> You're right.  that is inconsistent. on the other hand, given that  
> you might be using the null option, there has to be a way to figure  
> out how many total elements you're going to have.
>
> Again, the inconsistencies make it seem like this was tacked on  
> instead of integrated into the framework..  And that makes it harder  
> to remember and use.
>
>
> > To be consistent with the current ST list iterator length(values)  
> should automatically strip nulls...  However, another fix would be  
> to not automatically skip nulls in the list iterator.  This would  
> fix both of the inconsistencies and be much more intuitive.  If  
> people want to skip the nulls entirely when iterating they can use  
> strip as a shortcut, $strip(values):{ v | <tr><b>$v$</b></tr>}$.   
> For backwards compatibility / convienience you can add a global  
> 'AutoStripLists' option if you think its necessary.
>
> I understand what you're saying, but what about the case when foo a  
> single value that I have above? should it invoke blort()?
>
> I think I may have found the communications disconnect.  I've been  
> treating ':' as the 'list iterator' operator... you seem to be  
> treating it as the 'apply template'/'expand list and apply template'  
> operator..
>
> If you think of ':' as the 'list iterator' operator (which is how  
> the cheat sheet describes it..), then actually, no, blort should not  
> be invoked because by using the 'list iterator' operator (instead of  
> the 'invoke template' ($<template>(<attr>)$) operator) you are  
> implying that it is a multi-valued attribute.  (so $<attr>:<template> 
> $ is a shortcut for $if(<attr>)$$<template>(<attr>)$$endif$ when  
> <attr> is single valued... (though personally I would spell it out  
> the second way..))
>
>
>
> I guess the real question it comes down to is what is more  
> important..  convienience in the case that you want to not want to  
> apply the template to null items in a list or having a consistent  
> (and thereby intuitive) framework.  Needing to skip null elements in  
> a list seems like a pretty uncommon case to me.. (I could be wrong),  
> and its the only piece that would not be backwards compatible.  If  
> people really need to skip nulls, they could simply use 'strip'.. or  
> there could be a global 'UseStripIterator' setting..
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20100210/fbc48707/attachment.html 

From jonathan at buhacoff.net  Wed Feb 10 07:06:55 2010
From: jonathan at buhacoff.net (Jonathan Buhacoff)
Date: Wed, 10 Feb 2010 07:06:55 -0800
Subject: [stringtemplate-interest] dealing with empty list values
In-Reply-To: <97da28b11002081911w4523f719w4d0e5af407051090@mail.gmail.com>
References: <97da28b11002060252i2b356a29q713dc1e545fbd70c@mail.gmail.com>
	<2CE3E8E5-04B0-45D4-81E2-6F25E8AFCF08@cs.usfca.edu>
	<97da28b11002071702q2751b19bjb849f3657be1fbf8@mail.gmail.com>
	<443ECF75-E2E2-47E4-9A89-C9EFEA4029A0@cs.usfca.edu>
	<97da28b11002081911w4523f719w4d0e5af407051090@mail.gmail.com>
Message-ID: <0C092956-9389-41AF-9609-5F4FA1D9C346@buhacoff.net>

Oops I got it backwards.

The default mode is like $strip(values):{ ... }$  and with null=false   
it's what Joshua expects when he writes $values:{ ... }$

Right?

On Feb 8, 2010, at 7:11 PM, Joshua Royalty wrote:

>
>
> On Mon, Feb 8, 2010 at 1:51 PM, Terence Parr <parrt at cs.usfca.edu>  
> wrote:
> On Feb 7, 2010, at 5:02 PM, Joshua Royalty wrote:
> Hi Terence,
> > If $foo$ is 'missing', then '<tr>$if(foo)<b>$foo$</b>$else$MISSING 
> $endif$</tr>' will still print '<tr>MISSING</tr>', but $values:{ v |  
> <tr>$if(v)<b>$v$</b>$else$MISSING$endif$</tr>}$ will not print  
> '<tr>MISSING</tr>' if one of the values is 'missing'.
>
> unless you use the null option, right?
>
> is null=false the intended way to do this?  If so it.. works, but it  
> doesn't seem like a clean solution.  First you end up with lists  
> with multiple types of values..  which is just generally not a good  
> idea.  Second.. it is nice that it preserves backwards  
> compatibility, and its relatively easy to implement.. but it really  
> seems like a solution tacked on at the last minute and its not  
> intuitive at all to a programmer.
>
>
> >  Obviously in the first case ST does not know what text it should  
> skip and the user obviously intended it to print <tr>MISSING</tr>,  
> and I contend that ST also cannot know if it should skip in the  
> second case and that the user obviously intended it to print  
> <tr>MISSING</tr> for values that were 'missing'.  When I use a list  
> iterator I intuitively expect it to iterate over every value in the  
> list, it should be the same as repeating the code inside the  
> template for every value in the list, even if that value is 'missing'.
>
> Well, if foo is missing then $foo:blort()$ should not evaluate  
> blort() and it doesn't. Therefore when foo his multi-valued, it  
> should skip any empty values to be consistent, right?
>
> Depends on how you think about it..  See below
>
>
> > Also, length(values) return the length of the list with the nulls  
> included, and in order to get the length without them you need to  
> call length(strip(values)).
>
> You're right.  that is inconsistent. on the other hand, given that  
> you might be using the null option, there has to be a way to figure  
> out how many total elements you're going to have.
>
> Again, the inconsistencies make it seem like this was tacked on  
> instead of integrated into the framework..  And that makes it harder  
> to remember and use.
>
>
> > To be consistent with the current ST list iterator length(values)  
> should automatically strip nulls...  However, another fix would be  
> to not automatically skip nulls in the list iterator.  This would  
> fix both of the inconsistencies and be much more intuitive.  If  
> people want to skip the nulls entirely when iterating they can use  
> strip as a shortcut, $strip(values):{ v | <tr><b>$v$</b></tr>}$.   
> For backwards compatibility / convienience you can add a global  
> 'AutoStripLists' option if you think its necessary.
>
> I understand what you're saying, but what about the case when foo a  
> single value that I have above? should it invoke blort()?
>
> I think I may have found the communications disconnect.  I've been  
> treating ':' as the 'list iterator' operator... you seem to be  
> treating it as the 'apply template'/'expand list and apply template'  
> operator..
>
> If you think of ':' as the 'list iterator' operator (which is how  
> the cheat sheet describes it..), then actually, no, blort should not  
> be invoked because by using the 'list iterator' operator (instead of  
> the 'invoke template' ($<template>(<attr>)$) operator) you are  
> implying that it is a multi-valued attribute.  (so $<attr>:<template> 
> $ is a shortcut for $if(<attr>)$$<template>(<attr>)$$endif$ when  
> <attr> is single valued... (though personally I would spell it out  
> the second way..))
>
>
>
> I guess the real question it comes down to is what is more  
> important..  convienience in the case that you want to not want to  
> apply the template to null items in a list or having a consistent  
> (and thereby intuitive) framework.  Needing to skip null elements in  
> a list seems like a pretty uncommon case to me.. (I could be wrong),  
> and its the only piece that would not be backwards compatible.  If  
> people really need to skip nulls, they could simply use 'strip'.. or  
> there could be a global 'UseStripIterator' setting..
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20100210/def03764/attachment.html 

From royalpeasantry at gmail.com  Wed Feb 10 12:38:36 2010
From: royalpeasantry at gmail.com (Joshua Royalty)
Date: Wed, 10 Feb 2010 12:38:36 -0800
Subject: [stringtemplate-interest] dealing with empty list values
In-Reply-To: <0C092956-9389-41AF-9609-5F4FA1D9C346@buhacoff.net>
References: <97da28b11002060252i2b356a29q713dc1e545fbd70c@mail.gmail.com>
	<2CE3E8E5-04B0-45D4-81E2-6F25E8AFCF08@cs.usfca.edu>
	<97da28b11002071702q2751b19bjb849f3657be1fbf8@mail.gmail.com>
	<443ECF75-E2E2-47E4-9A89-C9EFEA4029A0@cs.usfca.edu>
	<97da28b11002081911w4523f719w4d0e5af407051090@mail.gmail.com>
	<0C092956-9389-41AF-9609-5F4FA1D9C346@buhacoff.net>
Message-ID: <97da28b11002101238j47643824see5d2ba7be732da1@mail.gmail.com>

Yeah, its because $if(bool)$ is $ifTrue()$ but is $ifNotNull(object)$ when
object is not a boolean.  Thus null and false are 'identical' to the $if$
statement, but the iterator doesn't strip out booleans.

I don't mind nulls being stripped automatically, it makes a lot of sense for
a template language (especially for smaller querys, like 'SELECT $columns;
separator= ", "$ from TABLE'), but null=false is not intuitive (or
consistent) whereas $strip(values)$ is, and I will take consistency over
convenience every day.  Not to mention automatically stripping nulls
encourages writing sloppy code and can hide actual problems...  How easy
would it be to debug code that uses the above statement if one of the
elements in columns was null and should not have been?  The SQL query would
be functionally correct so it would execute correctly and most frameworks
would simply return null when the field was asked for..  as long as the
field wasn't required to be non-null its entirely likely that the problem
would never be noticed.  Whereas if the null wasn't skipped the code would
blow up immediately when the SQL query was made, and even if the error
wasn't 'Invalid Syntax' the first thing I would do is print out the query..

Plus.. what if you have a list of booleans and you want to do something if
they are true, something else if they are false, and yet something else if
they are null?  This currently isn't possible with the current 'if'
statement anyway, but if it ever was made possible null=false doesn't
work..  false != null even if the if statement currently treats them that
way.  One example that is possible with the current framework.. $false$
isn't the same as $null$, nor are $template(false)$ and $template(null)$.

On Wed, Feb 10, 2010 at 7:06 AM, Jonathan Buhacoff <jonathan at buhacoff.net>wrote:

> Oops I got it backwards.
>
> The default mode is like $strip(values):{ ... }$  and with null=false  it's
> what Joshua expects when he writes $values:{ ... }$
>
> Right?
>
> On Feb 8, 2010, at 7:11 PM, Joshua Royalty wrote:
>
>
>
> On Mon, Feb 8, 2010 at 1:51 PM, Terence Parr <parrt at cs.usfca.edu> wrote:
>
>> On Feb 7, 2010, at 5:02 PM, Joshua Royalty wrote:
>> Hi Terence,
>> > If $foo$ is 'missing', then
>> '<tr>$if(foo)<b>$foo$</b>$else$MISSING$endif$</tr>' will still print
>> '<tr>MISSING</tr>', but $values:{ v |
>> <tr>$if(v)<b>$v$</b>$else$MISSING$endif$</tr>}$ will not print
>> '<tr>MISSING</tr>' if one of the values is 'missing'.
>>
>> unless you use the null option, right?
>>
>
> is null=false the intended way to do this?  If so it.. works, but it
> doesn't seem like a clean solution.  First you end up with lists with
> multiple types of values..  which is just generally not a good idea.
> Second.. it is nice that it preserves backwards compatibility, and its
> relatively easy to implement.. but it really seems like a solution tacked on
> at the last minute and its not intuitive at all to a programmer.
>
>
>>
>> >  Obviously in the first case ST does not know what text it should skip
>> and the user obviously intended it to print <tr>MISSING</tr>, and I contend
>> that ST also cannot know if it should skip in the second case and that the
>> user obviously intended it to print <tr>MISSING</tr> for values that were
>> 'missing'.  When I use a list iterator I intuitively expect it to iterate
>> over every value in the list, it should be the same as repeating the code
>> inside the template for every value in the list, even if that value is
>> 'missing'.
>>
>> Well, if foo is missing then $foo:blort()$ should not evaluate blort() and
>> it doesn't. Therefore when foo his multi-valued, it should skip any empty
>> values to be consistent, right?
>>
>
> Depends on how you think about it..  See below
>
>
>>
>> > Also, length(values) return the length of the list with the nulls
>> included, and in order to get the length without them you need to call
>> length(strip(values)).
>>
>> You're right.  that is inconsistent. on the other hand, given that you
>> might be using the null option, there has to be a way to figure out how many
>> total elements you're going to have.
>>
>
> Again, the inconsistencies make it seem like this was tacked on instead of
> integrated into the framework..  And that makes it harder to remember and
> use.
>
>
>>
>> > To be consistent with the current ST list iterator length(values) should
>> automatically strip nulls...  However, another fix would be to not
>> automatically skip nulls in the list iterator.  This would fix both of the
>> inconsistencies and be much more intuitive.  If people want to skip the
>> nulls entirely when iterating they can use strip as a shortcut,
>> $strip(values):{ v | <tr><b>$v$</b></tr>}$.  For backwards compatibility /
>> convienience you can add a global 'AutoStripLists' option if you think its
>> necessary.
>>
>> I understand what you're saying, but what about the case when foo a single
>> value that I have above? should it invoke blort()?
>>
>
> I think I may have found the communications disconnect.  I've been treating
> ':' as the 'list iterator' operator... you seem to be treating it as the
> 'apply template'/'expand list and apply template' operator..
>
> If you think of ':' as the 'list iterator' operator (which is how the cheat
> sheet describes it..), then actually, no, blort should not be invoked
> because by using the 'list iterator' operator (instead of the 'invoke
> template' ($<template>(<attr>)$) operator) you are implying that it is a
> multi-valued attribute.  (so $<attr>:<template>$ is a shortcut for
> $if(<attr>)$$<template>(<attr>)$$endif$ when <attr> is single valued...
> (though personally I would spell it out the second way..))
>
>
>
> I guess the real question it comes down to is what is more important..
> convienience in the case that you want to not want to apply the template to
> null items in a list or having a consistent (and thereby intuitive)
> framework.  Needing to skip null elements in a list seems like a pretty
> uncommon case to me.. (I could be wrong), and its the only piece that would
> not be backwards compatible.  If people really need to skip nulls, they
> could simply use 'strip'.. or there could be a global 'UseStripIterator'
> setting..
>  _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>
>
>
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20100210/85b16aa5/attachment.html 

From Paul.Wray at det.nsw.edu.au  Wed Feb 10 18:59:50 2010
From: Paul.Wray at det.nsw.edu.au (Wray, Paul)
Date: Thu, 11 Feb 2010 13:59:50 +1100
Subject: [stringtemplate-interest] Python StringTemplate: defining __len__
	for class rendered by subtemplate gives empty result
Message-ID: <03426FC7F879734CA8026B6814131E05059AF72D@otfexchange1.western_sydney.det.win>

Hello
I've started to use Python StringTemplate (very nice, thank you!), and I
ran into a surprise that took me a while to track down. Maybe it
deserves a note in the documentation or perhaps even a rework of part of
the code? In any case this note may help others.
The essence of the problem is shown in the code below. Class B defines
an instance (a) of Class A, and renders it in a (named or anonymous)
subtemplate, passing (a) either implicitly or explicitly to the
subtemplate.

The code works fine unless Class A defines a __len__ function for its
own purposes, which happens to return 0. Then, depending on which form
of call is used, either the subtemplate is not rendered at all, or the
attribute reference within the subtemplate gives an empty result.

import stringtemplate3 as st3
from stringtemplate3.language import DefaultTemplateLexer
import StringIO

groupStr = '''
    group testGroup;
    Atemplate(it) ::= <<
        $it.value$
    >>

    Btemplate(object) ::= <<
        $object.a.value$
        $object.a:{ $it.value$ }$
        $object.a: { itm | $itm.value$ }$
        $object.a:Atemplate()$
        $Atemplate(it=object.a)$
    >>
'''

class A(object):
    def __init__(self):
        self.value = 'value'
    
    # if subtemplate-rendered class defines __len__, templates are
empty.
    #def __len__(self):
    #    return 0
        
class B(object):

    def __init__(self):
        self.a = A()

    def render(self, group):
        template = group.getInstanceOf('Btemplate')
        template['object'] = self
        return template.toString()

if __name__ == '__main__':
    group = st3.StringTemplateGroup(file=StringIO.StringIO(groupStr),
lexer=DefaultTemplateLexer.Lexer)    
    b = B()
    print b.render(group)
**********************************************************************
This message is intended for the addressee named and may contain
privileged information or confidential information or both. If you
are not the intended recipient please delete it and notify the sender.
**********************************************************************

From gerald at certiv.net  Mon Feb 15 10:40:15 2010
From: gerald at certiv.net (Gerald Rosenberg)
Date: Mon, 15 Feb 2010 10:40:15 -0800
Subject: [stringtemplate-interest] How best to do recursive hetero template
	calls?
Message-ID: <4B79950F.9000709@certiv.net>

Looking for the best/proper way to do a recursive heterogeneous template 
expansion.

The initial attribute is effectively defined as:

public class Element {
     public String type; // can be "TypeA" or "TypeB"
     public Element[ ] children;
     . . .
}

The actual implementation is a fair bit more complex, so before I go too 
far down the wrong path, can anyone please comment on this as being a 
workable approach.  Something better?  Alternates?  Gotchas(how to 
handle first == rest)?

Thanks...

/////////////////////////////////////////////////////////////////////////////
Main(rootElement) ::= <<
<(rootElement.type)(first(rootElement.children), 
rest(rootElement.children))>
}
 >>

TypeA(element, remainder) ::= <<
BEGIN-A
<(first(remainder.children).type)(first(remainder.children), 
rest(remainder.children))>
END-A
 >>

TypeB(element, remainder) ::= <<
BEGIN-B
<(first(remainder.children).type)(first(remainder.children), 
rest(remainder.children))>
END-B
 >>
/////////////////////////////////////////////////////////////////////////////




From parrt at cs.usfca.edu  Tue Feb 16 09:56:39 2010
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue, 16 Feb 2010 09:56:39 -0800
Subject: [stringtemplate-interest] dealing with empty list values
In-Reply-To: <97da28b11002081911w4523f719w4d0e5af407051090@mail.gmail.com>
References: <97da28b11002060252i2b356a29q713dc1e545fbd70c@mail.gmail.com>
	<2CE3E8E5-04B0-45D4-81E2-6F25E8AFCF08@cs.usfca.edu>
	<97da28b11002071702q2751b19bjb849f3657be1fbf8@mail.gmail.com>
	<443ECF75-E2E2-47E4-9A89-C9EFEA4029A0@cs.usfca.edu>
	<97da28b11002081911w4523f719w4d0e5af407051090@mail.gmail.com>
Message-ID: <8AF0321E-D568-429E-9661-F2F20A47A3CD@cs.usfca.edu>


On Feb 8, 2010, at 7:11 PM, Joshua Royalty wrote:

> 
> 
> On Mon, Feb 8, 2010 at 1:51 PM, Terence Parr <parrt at cs.usfca.edu> wrote:
> On Feb 7, 2010, at 5:02 PM, Joshua Royalty wrote:
> Hi Terence,
> > If $foo$ is 'missing', then '<tr>$if(foo)<b>$foo$</b>$else$MISSING$endif$</tr>' will still print '<tr>MISSING</tr>', but $values:{ v | <tr>$if(v)<b>$v$</b>$else$MISSING$endif$</tr>}$ will not print '<tr>MISSING</tr>' if one of the values is 'missing'.
> 
> unless you use the null option, right?
> 
> is null=false the intended way to do this?  If so it.. works, but it doesn't seem like a clean solution.  First you end up with lists with multiple types of values..  which is just generally not a good idea.  Second.. it is nice that it preserves backwards compatibility, and its relatively easy to implement.. but it really seems like a solution tacked on at the last minute and its not intuitive at all to a programmer.

Well, the world was ok before I implemented that and it simply gives you a way to deal with missing values in a list. normally we want to ignore missing stuff. Rather than totally screw up the semantics of "missing" and iteration, this was a good solution.

> > Also, length(values) return the length of the list with the nulls included, and in order to get the length without them you need to call length(strip(values)).
> 
> You're right.  that is inconsistent. on the other hand, given that you might be using the null option, there has to be a way to figure out how many total elements you're going to have.
> 
> Again, the inconsistencies make it seem like this was tacked on instead of integrated into the framework..  And that makes it harder to remember and use.

Well, as I say, it hasn't really been an issue based upon the feedback I get.

> > To be consistent with the current ST list iterator length(values) should automatically strip nulls...  However, another fix would be to not automatically skip nulls in the list iterator.  This would fix both of the inconsistencies and be much more intuitive.  If people want to skip the nulls entirely when iterating they can use strip as a shortcut, $strip(values):{ v | <tr><b>$v$</b></tr>}$.  For backwards compatibility / convienience you can add a global 'AutoStripLists' option if you think its necessary.
> 
> I understand what you're saying, but what about the case when foo a single value that I have above? should it invoke blort()?
> 
> I think I may have found the communications disconnect.  I've been treating ':' as the 'list iterator' operator... you seem to be treating it as the 'apply template'/'expand list and apply template' operator..

Yes, I believe I call it "apply template" in the documentation. remember this is a functional language. there is no concept of for-loop. x:f() applies function f to x more or less

> If you think of ':' as the 'list iterator' operator (which is how the cheat sheet describes it..),

oops ;)

> then actually, no, blort should not be invoked because by using the 'list iterator' operator (instead of the 'invoke template' ($<template>(<attr>)$) operator) you are implying that it is a multi-valued attribute.  (so $<attr>:<template>$ is a shortcut for $if(<attr>)$$<template>(<attr>)$$endif$ when <attr> is single valued... (though personally I would spell it out the second way..))

I tried to design ST so a single valued attribute and a multi-valued attribute only differ in cardinality.  you can imagine an implementation that little used a list for everything including single valued attribute. the list notion is an artifact of implementation.

> I guess the real question it comes down to is what is more important..  convienience in the case that you want to not want to apply the template to null items in a list or having a consistent (and thereby intuitive) framework.

Well, you're the first person is brought this up ;)

>  Needing to skip null elements in a list seems like a pretty uncommon case to me.. (I could be wrong), and its the only piece that would not be backwards compatible.  If people really need to skip nulls, they could simply use 'strip'.. or there could be a global 'UseStripIterator' setting..

I would have to make a fundamental change in that x:f() would have to invoke f even when x it is null.

Ter


From parrt at cs.usfca.edu  Tue Feb 16 09:58:26 2010
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue, 16 Feb 2010 09:58:26 -0800
Subject: [stringtemplate-interest] Python StringTemplate: defining
	__len__ for class rendered by subtemplate gives empty result
In-Reply-To: <03426FC7F879734CA8026B6814131E05059AF72D@otfexchange1.western_sydney.det.win>
References: <03426FC7F879734CA8026B6814131E05059AF72D@otfexchange1.western_sydney.det.win>
Message-ID: <A0D77CFC-CE1D-4768-BAED-114BCC7535A4@cs.usfca.edu>

Hi. I'm CC'ing Benjamin, the python guy.
T
On Feb 10, 2010, at 6:59 PM, Wray, Paul wrote:

> Hello
> I've started to use Python StringTemplate (very nice, thank you!), and I
> ran into a surprise that took me a while to track down. Maybe it
> deserves a note in the documentation or perhaps even a rework of part of
> the code? In any case this note may help others.
> The essence of the problem is shown in the code below. Class B defines
> an instance (a) of Class A, and renders it in a (named or anonymous)
> subtemplate, passing (a) either implicitly or explicitly to the
> subtemplate.
> 
> The code works fine unless Class A defines a __len__ function for its
> own purposes, which happens to return 0. Then, depending on which form
> of call is used, either the subtemplate is not rendered at all, or the
> attribute reference within the subtemplate gives an empty result.
> 
> import stringtemplate3 as st3
> from stringtemplate3.language import DefaultTemplateLexer
> import StringIO
> 
> groupStr = '''
>    group testGroup;
>    Atemplate(it) ::= <<
>        $it.value$
>>> 
> 
>    Btemplate(object) ::= <<
>        $object.a.value$
>        $object.a:{ $it.value$ }$
>        $object.a: { itm | $itm.value$ }$
>        $object.a:Atemplate()$
>        $Atemplate(it=object.a)$
>>> 
> '''
> 
> class A(object):
>    def __init__(self):
>        self.value = 'value'
> 
>    # if subtemplate-rendered class defines __len__, templates are
> empty.
>    #def __len__(self):
>    #    return 0
> 
> class B(object):
> 
>    def __init__(self):
>        self.a = A()
> 
>    def render(self, group):
>        template = group.getInstanceOf('Btemplate')
>        template['object'] = self
>        return template.toString()
> 
> if __name__ == '__main__':
>    group = st3.StringTemplateGroup(file=StringIO.StringIO(groupStr),
> lexer=DefaultTemplateLexer.Lexer)    
>    b = B()
>    print b.render(group)
> **********************************************************************
> This message is intended for the addressee named and may contain
> privileged information or confidential information or both. If you
> are not the intended recipient please delete it and notify the sender.
> **********************************************************************
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest


From parrt at cs.usfca.edu  Tue Feb 16 10:02:47 2010
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue, 16 Feb 2010 10:02:47 -0800
Subject: [stringtemplate-interest] How best to do recursive hetero
	template calls?
In-Reply-To: <4B79950F.9000709@certiv.net>
References: <4B79950F.9000709@certiv.net>
Message-ID: <77CFEBE8-D06E-4AB0-B058-F7BFDF5CD8B5@cs.usfca.edu>

hi Gerald,

this brings up an important conclusion that I've come to. While we can get ST to do some fancy data structure iteration/walking using recursion and first/rest, I've decided that such walking really belongs in the model. In this case, I fear that the model and view have been entangled. While it's not always possible to completely isolate the view from the data structure, I try to limit it to access to properties of a single object rather than forcing ST to do the walking.

So, translation is really about walking your input model in creating an output model. In this case, you have some kind of Walker for Element and have it request templates for various kinds of elements. Then, you stitch them together into an overall output model. In this case, you get a hierarchy of templates. then, just render it to text and you have your output.

I believe I went into this a little bit in the translation section of the new language implementation patterns book. you might take a peek back at that chapter; it's probably been a while since you reviewed it
Ter
On Feb 15, 2010, at 10:40 AM, Gerald Rosenberg wrote:

> Looking for the best/proper way to do a recursive heterogeneous template 
> expansion.
> 
> The initial attribute is effectively defined as:
> 
> public class Element {
>     public String type; // can be "TypeA" or "TypeB"
>     public Element[ ] children;
>     . . .
> }
> 
> The actual implementation is a fair bit more complex, so before I go too 
> far down the wrong path, can anyone please comment on this as being a 
> workable approach.  Something better?  Alternates?  Gotchas(how to 
> handle first == rest)?
> 
> Thanks...
> 
> /////////////////////////////////////////////////////////////////////////////
> Main(rootElement) ::= <<
> <(rootElement.type)(first(rootElement.children), 
> rest(rootElement.children))>
> }
>>> 
> 
> TypeA(element, remainder) ::= <<
> BEGIN-A
> <(first(remainder.children).type)(first(remainder.children), 
> rest(remainder.children))>
> END-A
>>> 
> 
> TypeB(element, remainder) ::= <<
> BEGIN-B
> <(first(remainder.children).type)(first(remainder.children), 
> rest(remainder.children))>
> END-B
>>> 
> /////////////////////////////////////////////////////////////////////////////
> 
> 
> 
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest


From gerald at certiv.net  Tue Feb 16 14:49:16 2010
From: gerald at certiv.net (Gerald Rosenberg)
Date: Tue, 16 Feb 2010 14:49:16 -0800
Subject: [stringtemplate-interest] How best to do recursive hetero
 template calls?
In-Reply-To: <77CFEBE8-D06E-4AB0-B058-F7BFDF5CD8B5@cs.usfca.edu>
References: <4B79950F.9000709@certiv.net>
	<77CFEBE8-D06E-4AB0-B058-F7BFDF5CD8B5@cs.usfca.edu>
Message-ID: <4B7B20EC.1080406@certiv.net>

Hi Ter,

Yes, slippery slope and all that.  Quite agree with the argument against 
model view entanglement -- actually the argument is mostly against 
putting combinatorial logic in the view to evaluate model aspects.

To explain a bit, the attribute being provided to the view is not some 
fancy data structure, but a simple, literal representation of the view 
to be generated.  Nested templates are a direct map to the view - each 
node's type field is the literal name of the template to be applied to 
the node.  A two-dimensional walk in ST (no exceptions, no conditionals) 
should be functionally little different from a one-dimensional ST list 
iteration. So, this narrow use of recursion should not be too much of an 
entanglement violation, right?

Given the view representation is heavily nested, if I instead use 
external walker I wind up having to not just choose node templates, but 
also have to provide the decision logic to stitch together parent entry 
and exit templates for each node.  And, manage the correspondence 
between the walker logic and the model and all of the view templates.  
Doable, but seems clumsy.

Anyway, I have started to experiment using ST4 and, so far, looks 
promising.

Purely functional hetero template calls work nicely! 
<(first(element.children).type)(...)>

Only issue found is that STGroup#getInstanceOf(String name) needs a null 
check on name - the rest operator can return a null list and that can 
result in an NPE when rest is used to provide an attribute to another 
template.

Thanks,
Gerald



On 2/16/2010 10:02 AM, Terence Parr wrote:
> hi Gerald,
>
> this brings up an important conclusion that I've come to. While we can get ST to do some fancy data structure iteration/walking using recursion and first/rest, I've decided that such walking really belongs in the model. In this case, I fear that the model and view have been entangled. While it's not always possible to completely isolate the view from the data structure, I try to limit it to access to properties of a single object rather than forcing ST to do the walking.
>
> So, translation is really about walking your input model in creating an output model. In this case, you have some kind of Walker for Element and have it request templates for various kinds of elements. Then, you stitch them together into an overall output model. In this case, you get a hierarchy of templates. then, just render it to text and you have your output.
>
> I believe I went into this a little bit in the translation section of the new language implementation patterns book. you might take a peek back at that chapter; it's probably been a while since you reviewed it
> Ter
> On Feb 15, 2010, at 10:40 AM, Gerald Rosenberg wrote:
>
>    
>> Looking for the best/proper way to do a recursive heterogeneous template
>> expansion.
>>
>> The initial attribute is effectively defined as:
>>
>> public class Element {
>>      public String type; // can be "TypeA" or "TypeB"
>>      public Element[ ] children;
>>      . . .
>> }
>>
>> The actual implementation is a fair bit more complex, so before I go too
>> far down the wrong path, can anyone please comment on this as being a
>> workable approach.  Something better?  Alternates?  Gotchas(how to
>> handle first == rest)?
>>
>> Thanks...
>>
>> /////////////////////////////////////////////////////////////////////////////
>> Main(rootElement) ::=<<
>> <(rootElement.type)(first(rootElement.children),
>> rest(rootElement.children))>
>> }
>>      
>>>>          
>> TypeA(element, remainder) ::=<<
>> BEGIN-A
>> <(first(remainder.children).type)(first(remainder.children),
>> rest(remainder.children))>
>> END-A
>>      
>>>>          
>> TypeB(element, remainder) ::=<<
>> BEGIN-B
>> <(first(remainder.children).type)(first(remainder.children),
>> rest(remainder.children))>
>> END-B
>>      
>>>>          
>> /////////////////////////////////////////////////////////////////////////////
>>
>>
>>
>> _______________________________________________
>> stringtemplate-interest mailing list
>> stringtemplate-interest at antlr.org
>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>>      
>
>    

From gerald at certiv.net  Thu Feb 18 09:09:56 2010
From: gerald at certiv.net (Gerald Rosenberg)
Date: Thu, 18 Feb 2010 09:09:56 -0800
Subject: [stringtemplate-interest] Fwd: How best to do recursive hetero
 template calls?
Message-ID: <4B7D7464.8080807@certiv.net>

Hi Ter,

Recursive hetero template calls (given /node.type/ is the literal name 
of a template):

TypeA(node) ::= <<
     // Prefix code for <node.type>
     ...
<node.children:{ node | <(node.type)(node)> }>
     // Suffix code for <node.type>
     ...
 >>

While it works well, turns out practical use is somewhat limited in that 
it renders as just one big blob of code|text.

Wonder if any thought has been given to allowing ST to render to a 
string array, maybe using some template level flag to mark when to 
switch to generating to a new array slot?  Would add flexibility in the 
subsequent stitching together of the content.

Best,
Gerald




On 2/16/2010 2:49 PM, Gerald Rosenberg wrote:
> Hi Ter,
>
> Yes, slippery slope and all that.  Quite agree with the argument against
> model view entanglement -- actually the argument is mostly against
> putting combinatorial logic in the view to evaluate model aspects.
>    

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20100218/0810342c/attachment.html 

From jab.antlr at species.org  Fri Feb 19 11:41:42 2010
From: jab.antlr at species.org (James Briant)
Date: Fri, 19 Feb 2010 11:41:42 -0800
Subject: [stringtemplate-interest] Grid Problems
In-Reply-To: <699CEBAF-0657-4BBD-9F41-5E4DBD2E0150@cs.usfca.edu>
References: <1209841451.11032.19.camel@localhost.localdomain>
	<699CEBAF-0657-4BBD-9F41-5E4DBD2E0150@cs.usfca.edu>
Message-ID: <e063fb511002191141u4664c707q9a8598b4470edced@mail.gmail.com>

I have this same problem. Specifically,

class  {
  public String name;
  public List<Number> phones;
}
class Number {
  public String number;
}

Person person = new ....

Will work with <person.phones:writephone()>

Using a HashMap will not:

HashMap person = new HashMap()
HashMap phone1 = new HashMap()
person.put("phones",phone1);

But if you hack StringTemplate.Aggregate to make it public,

Aggregate person = new Aggregate()
Aggregate phone1 = new Aggregate()
person.put("phones",phone1)

This works.


This is because (in 3.2) in ASTExpr.java convertAnythingIteratableToIterator
and convertAnythingToIterator will BOTH convert a HashMap to a list, but not
a class, and not StringTemplate.Aggregate.

I request that Aggregate, or an object like Aggregate is implemented so that
during rapid prototyping I can create aggregate objects without having to
create specific classes.

Thanks!



On Tue, May 6, 2008 at 9:27 AM, Terence Parr <parrt at cs.usfca.edu> wrote:

> Hi Bob, i'm racing to get ANTLR v3.1 out the door...I'll get to this
> as soon as i can.
> T
> On May 3, 2008, at 12:04 PM, Bob wrote:
>
> > I have a system that produces data in 2-D grids (rows-and-columns).
> > Each column has a name.  This seemed like a perfect match for
> > StringTemplate.
> >
> > I've included at the end of this email a template that I wish to use
> > to
> > generate a report from my 2-D grids.  In particular, I wish to:
> >
> > 1. Create a 1-row grid (person) containing one person record.
> > 2. Create a multi-row grid (phones) containing phone numbers for the
> > person.
> > 3. Format it all together as shown in the template at the end of this
> > message.
> >
> > The basic operation here is to set a StringTemplate attribute to one
> > of
> > my grids (StringTableModel).  I want to make a function like:
> >
> > public static void setAttribute(StringTemplate st, String var,
> > StringTableModel val)
> >       { ... }
> >
> > Then I use code as follows to generate my report:
> >
> >       StringTemplate st = ....;
> >
> >       StringTableModel sperson = new StringTableModel(dmod.getPersonSb(),
> > sfmap);
> >       setAttribute(st, "person", sperson);
> >
> >       StringTableModel sphones = new StringTableModel(dmod.getPhonesSb(),
> > sfmap);
> >       setAttribute(st, "phones", sphones);
> >
> >       return st.toString();
> >
> > Unfortunately, I came up against several difficulties in figuring out
> > what to place in the body of the setAttribute(StringTemplate, String,
> > StringTableModel) function:
> >
> > 1. I first tried setting multi-valued attributes as follows.  The
> > parser
> > complained that I couldn't have "." in an attribute name:
> >       for (int col=0; col<val.getColumnCount(); ++col) {
> >               String colName = var + "." + val.getColumnName(col) + "";
> >               for (int row=0; row<val.getRowCount(); ++row) {
> >                       st.setAttribute(colName, val.getValueAt(row, col));
> >               }
> >       }
> >
> > 2. Then I tried the syntax shown in the docs for 2-5 column multi-
> > valued
> > attributes, as follows.  The parser also did not understand this,
> > since
> > I'm only setting one column at a time:
> >       for (int col=0; col<val.getColumnCount(); ++col) {
> >               String colName = var + ".{" + val.getColumnName(col) + "}";
> >               for (int row=0; row<val.getRowCount(); ++row) {
> >                       st.setAttribute(colName, val.getValueAt(row, col));
> >               }
> >       }
> >
> >
> > 3. Then I tried creating a HashMap for each row, and setting the value
> > once per row.  This ALMOST worked.  It worked as long as you have 2 or
> > more phone numbers.  But if you had just one phone number (and in my
> > case 2 columns), the system interpreted the data as two single-valued
> > attributes, as opposed to one aggregate attribute.  Thus, it worked
> > if I
> > had 2 phone numbers, but threw an exception if I had just one.  Is
> > this
> > a bug, or is that the intended behavior?
> >       for (int row=0; row<val.getRowCount(); ++row) {
> >               HashMap map = new HashMap();
> >               for (int col=0; col<val.getColumnCount(); ++col) {
> >                       map.put(val.getColumnName(col), val.getValueAt(row,
> col));
> >               }
> >               st.setAttribute(var, map);
> >       }
> >
> > 4. I figured maybe if I make each column as a list of attributes, this
> > would work.  No such luck...
> >       HashMap map = new HashMap();
> >       for (int col=0; col<val.getColumnCount(); ++col) {
> >               List list = new ArrayList(val.getRowCount());
> >               for (int row=0; row<val.getRowCount(); ++row) {
> >                       list.add(val.getValueAt(row, col));
> >               }
> >               map.put(val.getColumnName(col), list);
> >       }
> >       st.setAttribute(var, map);
> >
> > 5. Finally, I hacked the source code, making StringTemplate.Aggregate
> > public, to allow the following.  Since StringTemplate.Aggregate is
> > basically a wrapper around HashMap, I'm surprised that behaved
> > differently from the HashMap example above.  But it did: this worked,
> > whereas the example above did not:
> >
> >
> >       for (int row=0; row<val.getRowCount(); ++row) {
> >               StringTemplate.Aggregate map = new
> StringTemplate.Aggregate();
> >               for (int col=0; col<val.getColumnCount(); ++col) {
> >                       map.put(val.getColumnName(col), val.getValueAt(row,
> col));
> >               }
> >               st.setAttribute(var, map);
> >       }
> >
> > ---------------------
> > Current status: at this point, I know of no way to do what I want
> > without hacking the source code.  Any suggestions on a solution to
> > this
> > problem?
> >
> > Thanks,
> > -- Bob
> >
> >
> > // ===================================================
> > // summary.st
> >
> > <ul>
> > <li>Name: $person.firstname$ $person.lastname$</li>
> > <li>Email: $person.email$</li>
> > </ul>
> >
> >
> > <h3>Phones</h3>
> > <table border=1>
> > $phones:{it |
> >  <tr>
> >    <td>$it.groupid$</td><td>$it.phone$</td>
> >  </tr>
> > }$
> > </table>
> >
> >
> > _______________________________________________
> > stringtemplate-interest mailing list
> > stringtemplate-interest at antlr.org
> > http://www.antlr.org:8080/mailman/listinfo/stringtemplate-interest
>
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org:8080/mailman/listinfo/stringtemplate-interest
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20100219/ff793523/attachment.html 

From parrt at cs.usfca.edu  Fri Feb 19 13:00:26 2010
From: parrt at cs.usfca.edu (Terence Parr)
Date: Fri, 19 Feb 2010 13:00:26 -0800
Subject: [stringtemplate-interest] Grid Problems
In-Reply-To: <e063fb511002191141u4664c707q9a8598b4470edced@mail.gmail.com>
References: <1209841451.11032.19.camel@localhost.localdomain>
	<699CEBAF-0657-4BBD-9F41-5E4DBD2E0150@cs.usfca.edu>
	<e063fb511002191141u4664c707q9a8598b4470edced@mail.gmail.com>
Message-ID: <FDFEB9EB-5D0D-4F8D-87C1-C4B5BB1B80E8@cs.usfca.edu>

Hi James, I'm very surprised that the map example doesn't work for you. I use it all the time and specifically designed ST to do that. what doesn't work? Oh, is this C# with an anonymous class?

> class  {
>   public String name;
>   public List<Number> phones;
> }

perhaps make that class public
T
On Feb 19, 2010, at 11:41 AM, James Briant wrote:

> I have this same problem. Specifically, 
> 
> class  {
>   public String name;
>   public List<Number> phones;
> }
> class Number {
>   public String number;
> }
> 
> Person person = new ....
> 
> Will work with <person.phones:writephone()>
> 
> Using a HashMap will not:
> 
> HashMap person = new HashMap()
> HashMap phone1 = new HashMap()
> person.put("phones",phone1);
> 
> But if you hack StringTemplate.Aggregate to make it public, 
> 
> Aggregate person = new Aggregate()
> Aggregate phone1 = new Aggregate()
> person.put("phones",phone1)
> 
> This works.
> 
> 
> This is because (in 3.2) in ASTExpr.java convertAnythingIteratableToIterator and convertAnythingToIterator will BOTH convert a HashMap to a list, but not a class, and not StringTemplate.Aggregate.
> 
> I request that Aggregate, or an object like Aggregate is implemented so that during rapid prototyping I can create aggregate objects without having to create specific classes.
> 
> Thanks!
> 
> 
> 
> On Tue, May 6, 2008 at 9:27 AM, Terence Parr <parrt at cs.usfca.edu> wrote:
> Hi Bob, i'm racing to get ANTLR v3.1 out the door...I'll get to this
> as soon as i can.
> T
> On May 3, 2008, at 12:04 PM, Bob wrote:
> 
> > I have a system that produces data in 2-D grids (rows-and-columns).
> > Each column has a name.  This seemed like a perfect match for
> > StringTemplate.
> >
> > I've included at the end of this email a template that I wish to use
> > to
> > generate a report from my 2-D grids.  In particular, I wish to:
> >
> > 1. Create a 1-row grid (person) containing one person record.
> > 2. Create a multi-row grid (phones) containing phone numbers for the
> > person.
> > 3. Format it all together as shown in the template at the end of this
> > message.
> >
> > The basic operation here is to set a StringTemplate attribute to one
> > of
> > my grids (StringTableModel).  I want to make a function like:
> >
> > public static void setAttribute(StringTemplate st, String var,
> > StringTableModel val)
> >       { ... }
> >
> > Then I use code as follows to generate my report:
> >
> >       StringTemplate st = ....;
> >
> >       StringTableModel sperson = new StringTableModel(dmod.getPersonSb(),
> > sfmap);
> >       setAttribute(st, "person", sperson);
> >
> >       StringTableModel sphones = new StringTableModel(dmod.getPhonesSb(),
> > sfmap);
> >       setAttribute(st, "phones", sphones);
> >
> >       return st.toString();
> >
> > Unfortunately, I came up against several difficulties in figuring out
> > what to place in the body of the setAttribute(StringTemplate, String,
> > StringTableModel) function:
> >
> > 1. I first tried setting multi-valued attributes as follows.  The
> > parser
> > complained that I couldn't have "." in an attribute name:
> >       for (int col=0; col<val.getColumnCount(); ++col) {
> >               String colName = var + "." + val.getColumnName(col) + "";
> >               for (int row=0; row<val.getRowCount(); ++row) {
> >                       st.setAttribute(colName, val.getValueAt(row, col));
> >               }
> >       }
> >
> > 2. Then I tried the syntax shown in the docs for 2-5 column multi-
> > valued
> > attributes, as follows.  The parser also did not understand this,
> > since
> > I'm only setting one column at a time:
> >       for (int col=0; col<val.getColumnCount(); ++col) {
> >               String colName = var + ".{" + val.getColumnName(col) + "}";
> >               for (int row=0; row<val.getRowCount(); ++row) {
> >                       st.setAttribute(colName, val.getValueAt(row, col));
> >               }
> >       }
> >
> >
> > 3. Then I tried creating a HashMap for each row, and setting the value
> > once per row.  This ALMOST worked.  It worked as long as you have 2 or
> > more phone numbers.  But if you had just one phone number (and in my
> > case 2 columns), the system interpreted the data as two single-valued
> > attributes, as opposed to one aggregate attribute.  Thus, it worked
> > if I
> > had 2 phone numbers, but threw an exception if I had just one.  Is
> > this
> > a bug, or is that the intended behavior?
> >       for (int row=0; row<val.getRowCount(); ++row) {
> >               HashMap map = new HashMap();
> >               for (int col=0; col<val.getColumnCount(); ++col) {
> >                       map.put(val.getColumnName(col), val.getValueAt(row, col));
> >               }
> >               st.setAttribute(var, map);
> >       }
> >
> > 4. I figured maybe if I make each column as a list of attributes, this
> > would work.  No such luck...
> >       HashMap map = new HashMap();
> >       for (int col=0; col<val.getColumnCount(); ++col) {
> >               List list = new ArrayList(val.getRowCount());
> >               for (int row=0; row<val.getRowCount(); ++row) {
> >                       list.add(val.getValueAt(row, col));
> >               }
> >               map.put(val.getColumnName(col), list);
> >       }
> >       st.setAttribute(var, map);
> >
> > 5. Finally, I hacked the source code, making StringTemplate.Aggregate
> > public, to allow the following.  Since StringTemplate.Aggregate is
> > basically a wrapper around HashMap, I'm surprised that behaved
> > differently from the HashMap example above.  But it did: this worked,
> > whereas the example above did not:
> >
> >
> >       for (int row=0; row<val.getRowCount(); ++row) {
> >               StringTemplate.Aggregate map = new StringTemplate.Aggregate();
> >               for (int col=0; col<val.getColumnCount(); ++col) {
> >                       map.put(val.getColumnName(col), val.getValueAt(row, col));
> >               }
> >               st.setAttribute(var, map);
> >       }
> >
> > ---------------------
> > Current status: at this point, I know of no way to do what I want
> > without hacking the source code.  Any suggestions on a solution to
> > this
> > problem?
> >
> > Thanks,
> > -- Bob
> >
> >
> > // ===================================================
> > // summary.st
> >
> > <ul>
> > <li>Name: $person.firstname$ $person.lastname$</li>
> > <li>Email: $person.email$</li>
> > </ul>
> >
> >
> > <h3>Phones</h3>
> > <table border=1>
> > $phones:{it |
> >  <tr>
> >    <td>$it.groupid$</td><td>$it.phone$</td>
> >  </tr>
> > }$
> > </table>
> >
> >
> > _______________________________________________
> > stringtemplate-interest mailing list
> > stringtemplate-interest at antlr.org
> > http://www.antlr.org:8080/mailman/listinfo/stringtemplate-interest
> 
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org:8080/mailman/listinfo/stringtemplate-interest
> 


From parrt at cs.usfca.edu  Fri Feb 19 13:39:52 2010
From: parrt at cs.usfca.edu (Terence Parr)
Date: Fri, 19 Feb 2010 13:39:52 -0800
Subject: [stringtemplate-interest] How best to do recursive hetero
	template calls?
In-Reply-To: <4B7B20EC.1080406@certiv.net>
References: <4B79950F.9000709@certiv.net>
	<77CFEBE8-D06E-4AB0-B058-F7BFDF5CD8B5@cs.usfca.edu>
	<4B7B20EC.1080406@certiv.net>
Message-ID: <7907798B-A0E0-4A34-946E-8356B1F0B8A9@cs.usfca.edu>

On Feb 16, 2010, at 2:49 PM, Gerald Rosenberg wrote:
> Hi Ter,
> 
> Yes, slippery slope and all that.  Quite agree with the argument against 
> model view entanglement -- actually the argument is mostly against 
> putting combinatorial logic in the view to evaluate model aspects.

Yup.

> To explain a bit, the attribute being provided to the view is not some 
> fancy data structure, but a simple, literal representation of the view 
> to be generated.  Nested templates are a direct map to the view - each 
> node's type field is the literal name of the template to be applied to 
> the node.

ah. ok, if there is no logic, then I think it is okay to use recursion to walk the tree to spit out XML or whatever.

>  A two-dimensional walk in ST (no exceptions, no conditionals) 
> should be functionally little different from a one-dimensional ST list 
> iteration. So, this narrow use of recursion should not be too much of an 
> entanglement violation, right?

 should be okay; after all, that's how ST v3 he evaluates trees of templates ;)

> Given the view representation is heavily nested, if I instead use 
> external walker I wind up having to not just choose node templates, but 
> also have to provide the decision logic to stitch together parent entry 
> and exit templates for each node.  And, manage the correspondence 
> between the walker logic and the model and all of the view templates.  
> Doable, but seems clumsy.
> 
> Anyway, I have started to experiment using ST4 and, so far, looks 
> promising.
> 
> Purely functional hetero template calls work nicely! 
> <(first(element.children).type)(...)>

sweet...

> Only issue found is that STGroup#getInstanceOf(String name) needs a null 
> check on name - the rest operator can return a null list and that can 
> result in an NPE when rest is used to provide an attribute to another 
> template.

Fixed.

Ter

From parrt at cs.usfca.edu  Fri Feb 19 13:41:28 2010
From: parrt at cs.usfca.edu (Terence Parr)
Date: Fri, 19 Feb 2010 13:41:28 -0800
Subject: [stringtemplate-interest] Fwd: How best to do recursive hetero
	template calls?
In-Reply-To: <4B7D7464.8080807@certiv.net>
References: <4B7D7464.8080807@certiv.net>
Message-ID: <7D1A74AD-1D33-4478-9E74-B248E899B729@cs.usfca.edu>

Hiya. Can you be more specific? ST converts <list:{...}> to a list of STs, not a string.
T
On Feb 18, 2010, at 9:09 AM, Gerald Rosenberg wrote:

> Hi Ter,
> 
> Recursive hetero template calls (given node.type is the literal name of a template):
> 
> TypeA(node) ::= <<
>     // Prefix code for <node.type>
>     ...
>     <node.children:{ node | <(node.type)(node)> }>
>     // Suffix code for  <node.type>
>     ...
> >>
> 
> While it works well, turns out practical use is somewhat limited in that it renders as just one big blob of code|text.  
> 
> Wonder if any thought has been given to allowing ST to render to a string array, maybe using some template level flag to mark when to switch to generating to a new array slot?  Would add flexibility in the subsequent stitching together of the content.
> 
> Best,
> Gerald
> 
> 
> 
> 
> On 2/16/2010 2:49 PM, Gerald Rosenberg wrote:
>> Hi Ter,
>> 
>> Yes, slippery slope and all that.  Quite agree with the argument against 
>> model view entanglement -- actually the argument is mostly against 
>> putting combinatorial logic in the view to evaluate model aspects.
>>   
>> 
> 
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest


From parrt at cs.usfca.edu  Fri Feb 19 14:12:50 2010
From: parrt at cs.usfca.edu (Terence Parr)
Date: Fri, 19 Feb 2010 14:12:50 -0800
Subject: [stringtemplate-interest] Grid Problems
In-Reply-To: <e063fb511002191401n5a8e6ffeya53914a3e9287cf6@mail.gmail.com>
References: <1209841451.11032.19.camel@localhost.localdomain>
	<699CEBAF-0657-4BBD-9F41-5E4DBD2E0150@cs.usfca.edu>
	<e063fb511002191141u4664c707q9a8598b4470edced@mail.gmail.com>
	<FDFEB9EB-5D0D-4F8D-87C1-C4B5BB1B80E8@cs.usfca.edu>
	<e063fb511002191401n5a8e6ffeya53914a3e9287cf6@mail.gmail.com>
Message-ID: <79DB1919-BF33-424E-AEFA-1D51C961C4E8@cs.usfca.edu>

Oh!  Well, any multi-valued attr should iterate. Can you make your own Aggregate?
Ter
On Feb 19, 2010, at 2:01 PM, James Briant wrote:

> Its Java 1.6 on OSX, using st 3.2. The problem is that a HashMap is treated as iterable. So when you do
> 
> <something.property:template()>
> 
> where .property evaluates to a HashMap, the HashMap is converted to a list of its values and then each entry is passed to template. Instead, it should pass the HashMap itself to the template, as happens with an Aggregate. Now since I imagine a lot of people use HashMap and expect to get a list of its values in this case, I suggest making Aggregate public, so that it can be used in place of a real class.
> 
> 	protected static Object convertAnythingIteratableToIterator(Object o) {
> 		Iterator iter = null;
> 		if ( o instanceof Collection ) {
> 			iter = ((Collection)o).iterator();
> 		}
> 		else if ( o instanceof Map ) {
> 			iter = ((Map)o).values().iterator();
> 		}
> 		else if ( o instanceof Iterator ) {
> 			iter = (Iterator)o;
> 		}
> 		if ( iter==null ) {
> 			return o;
> 		}
> 		return iter;
> 	}
> 
> Jamie
> 
> On Fri, Feb 19, 2010 at 1:00 PM, Terence Parr <parrt at cs.usfca.edu> wrote:
> Hi James, I'm very surprised that the map example doesn't work for you. I use it all the time and specifically designed ST to do that. what doesn't work? Oh, is this C# with an anonymous class?
> 
> > class  {
> >   public String name;
> >   public List<Number> phones;
> > }
> 
> perhaps make that class public
> T
> On Feb 19, 2010, at 11:41 AM, James Briant wrote:
> 
> > I have this same problem. Specifically,
> >
> > class  {
> >   public String name;
> >   public List<Number> phones;
> > }
> > class Number {
> >   public String number;
> > }
> >
> > Person person = new ....
> >
> > Will work with <person.phones:writephone()>
> >
> > Using a HashMap will not:
> >
> > HashMap person = new HashMap()
> > HashMap phone1 = new HashMap()
> > person.put("phones",phone1);
> >
> > But if you hack StringTemplate.Aggregate to make it public,
> >
> > Aggregate person = new Aggregate()
> > Aggregate phone1 = new Aggregate()
> > person.put("phones",phone1)
> >
> > This works.
> >
> >
> > This is because (in 3.2) in ASTExpr.java convertAnythingIteratableToIterator and convertAnythingToIterator will BOTH convert a HashMap to a list, but not a class, and not StringTemplate.Aggregate.
> >
> > I request that Aggregate, or an object like Aggregate is implemented so that during rapid prototyping I can create aggregate objects without having to create specific classes.
> >
> > Thanks!
> >
> >
> >
> > On Tue, May 6, 2008 at 9:27 AM, Terence Parr <parrt at cs.usfca.edu> wrote:
> > Hi Bob, i'm racing to get ANTLR v3.1 out the door...I'll get to this
> > as soon as i can.
> > T
> > On May 3, 2008, at 12:04 PM, Bob wrote:
> >
> > > I have a system that produces data in 2-D grids (rows-and-columns).
> > > Each column has a name.  This seemed like a perfect match for
> > > StringTemplate.
> > >
> > > I've included at the end of this email a template that I wish to use
> > > to
> > > generate a report from my 2-D grids.  In particular, I wish to:
> > >
> > > 1. Create a 1-row grid (person) containing one person record.
> > > 2. Create a multi-row grid (phones) containing phone numbers for the
> > > person.
> > > 3. Format it all together as shown in the template at the end of this
> > > message.
> > >
> > > The basic operation here is to set a StringTemplate attribute to one
> > > of
> > > my grids (StringTableModel).  I want to make a function like:
> > >
> > > public static void setAttribute(StringTemplate st, String var,
> > > StringTableModel val)
> > >       { ... }
> > >
> > > Then I use code as follows to generate my report:
> > >
> > >       StringTemplate st = ....;
> > >
> > >       StringTableModel sperson = new StringTableModel(dmod.getPersonSb(),
> > > sfmap);
> > >       setAttribute(st, "person", sperson);
> > >
> > >       StringTableModel sphones = new StringTableModel(dmod.getPhonesSb(),
> > > sfmap);
> > >       setAttribute(st, "phones", sphones);
> > >
> > >       return st.toString();
> > >
> > > Unfortunately, I came up against several difficulties in figuring out
> > > what to place in the body of the setAttribute(StringTemplate, String,
> > > StringTableModel) function:
> > >
> > > 1. I first tried setting multi-valued attributes as follows.  The
> > > parser
> > > complained that I couldn't have "." in an attribute name:
> > >       for (int col=0; col<val.getColumnCount(); ++col) {
> > >               String colName = var + "." + val.getColumnName(col) + "";
> > >               for (int row=0; row<val.getRowCount(); ++row) {
> > >                       st.setAttribute(colName, val.getValueAt(row, col));
> > >               }
> > >       }
> > >
> > > 2. Then I tried the syntax shown in the docs for 2-5 column multi-
> > > valued
> > > attributes, as follows.  The parser also did not understand this,
> > > since
> > > I'm only setting one column at a time:
> > >       for (int col=0; col<val.getColumnCount(); ++col) {
> > >               String colName = var + ".{" + val.getColumnName(col) + "}";
> > >               for (int row=0; row<val.getRowCount(); ++row) {
> > >                       st.setAttribute(colName, val.getValueAt(row, col));
> > >               }
> > >       }
> > >
> > >
> > > 3. Then I tried creating a HashMap for each row, and setting the value
> > > once per row.  This ALMOST worked.  It worked as long as you have 2 or
> > > more phone numbers.  But if you had just one phone number (and in my
> > > case 2 columns), the system interpreted the data as two single-valued
> > > attributes, as opposed to one aggregate attribute.  Thus, it worked
> > > if I
> > > had 2 phone numbers, but threw an exception if I had just one.  Is
> > > this
> > > a bug, or is that the intended behavior?
> > >       for (int row=0; row<val.getRowCount(); ++row) {
> > >               HashMap map = new HashMap();
> > >               for (int col=0; col<val.getColumnCount(); ++col) {
> > >                       map.put(val.getColumnName(col), val.getValueAt(row, col));
> > >               }
> > >               st.setAttribute(var, map);
> > >       }
> > >
> > > 4. I figured maybe if I make each column as a list of attributes, this
> > > would work.  No such luck...
> > >       HashMap map = new HashMap();
> > >       for (int col=0; col<val.getColumnCount(); ++col) {
> > >               List list = new ArrayList(val.getRowCount());
> > >               for (int row=0; row<val.getRowCount(); ++row) {
> > >                       list.add(val.getValueAt(row, col));
> > >               }
> > >               map.put(val.getColumnName(col), list);
> > >       }
> > >       st.setAttribute(var, map);
> > >
> > > 5. Finally, I hacked the source code, making StringTemplate.Aggregate
> > > public, to allow the following.  Since StringTemplate.Aggregate is
> > > basically a wrapper around HashMap, I'm surprised that behaved
> > > differently from the HashMap example above.  But it did: this worked,
> > > whereas the example above did not:
> > >
> > >
> > >       for (int row=0; row<val.getRowCount(); ++row) {
> > >               StringTemplate.Aggregate map = new StringTemplate.Aggregate();
> > >               for (int col=0; col<val.getColumnCount(); ++col) {
> > >                       map.put(val.getColumnName(col), val.getValueAt(row, col));
> > >               }
> > >               st.setAttribute(var, map);
> > >       }
> > >
> > > ---------------------
> > > Current status: at this point, I know of no way to do what I want
> > > without hacking the source code.  Any suggestions on a solution to
> > > this
> > > problem?
> > >
> > > Thanks,
> > > -- Bob
> > >
> > >
> > > // ===================================================
> > > // summary.st
> > >
> > > <ul>
> > > <li>Name: $person.firstname$ $person.lastname$</li>
> > > <li>Email: $person.email$</li>
> > > </ul>
> > >
> > >
> > > <h3>Phones</h3>
> > > <table border=1>
> > > $phones:{it |
> > >  <tr>
> > >    <td>$it.groupid$</td><td>$it.phone$</td>
> > >  </tr>
> > > }$
> > > </table>
> > >
> > >
> > > _______________________________________________
> > > stringtemplate-interest mailing list
> > > stringtemplate-interest at antlr.org
> > > http://www.antlr.org:8080/mailman/listinfo/stringtemplate-interest
> >
> > _______________________________________________
> > stringtemplate-interest mailing list
> > stringtemplate-interest at antlr.org
> > http://www.antlr.org:8080/mailman/listinfo/stringtemplate-interest
> >
> 
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
> 


From gerald at certiv.net  Fri Feb 19 15:27:02 2010
From: gerald at certiv.net (Gerald Rosenberg)
Date: Fri, 19 Feb 2010 15:27:02 -0800
Subject: [stringtemplate-interest] How best to do recursive hetero
 template calls?
In-Reply-To: <7D1A74AD-1D33-4478-9E74-B248E899B729@cs.usfca.edu>
References: <4B7D7464.8080807@certiv.net>
	<7D1A74AD-1D33-4478-9E74-B248E899B729@cs.usfca.edu>
Message-ID: <4B7F1E46.6000100@certiv.net>

Just to be clear, the ST enhancement request is to support:

     String[] contents = someTemplate.render();

(or some reasonable equivalent).

A simple use case involves generating a standard class file instead of 
an inner class.  As is, generating an inner class is purely in-line, so 
no problem.  But, to instead generate an "outer" standalone class 
requires the content to be separated somehow.

methodSpec(...) ::= <<

         public void myMethod() {
<a.type> varNameA = new <a.type>();
<outer(a.type, ...) >
<b.type> varNameB = new <b.type>();
<outer(b.type, ...) >
<c.type> varNameC = new <c.type>();
<outer(c.type, ...) >
         }
 >>

The content from each template <outer(a.type, ...) > instance needs to 
be returned in a separate string so it can be saved into its own 
separate file.  Certainly, you could do another walk in the controller 
logic to gather together all of the attributes again and generate each 
outer class in in a separate loop, but that just hurts.  All of the 
necessary attributes are all right there, right now in the template.

So, maybe some syntax like <^outer(...)>  means: push the current 
content array string slot, allocate a new string array slot and generate 
the outer template content into that slot, and pop the array slot at the 
end of the template.

And here is the tie in to the tree walk.  My case is a root container 
that can contain any mix of containers and controls, repeating.  The 
tree walk works perfectly but results in one massive string.  Everything 
would have to be realized using inner classes.  In practice, each 
container needs to be generated to a separate string that could then be 
saved as a separate class file.

Don't think that this would break the functional only requirement of ST.

Best,
Gerald



On 2/19/2010 1:41 PM, Terence Parr wrote:
> Hiya. Can you be more specific? ST converts<list:{...}>  to a list of STs, not a string.
> T
> On Feb 18, 2010, at 9:09 AM, Gerald Rosenberg wrote:
>    
>> While it works well, turns out practical use is somewhat limited in that it renders as just one big blob of code|text.
>>
>> Wonder if any thought has been given to allowing ST to render to a string array, maybe using some template level flag to mark when to switch to generating to a new array slot?  Would add flexibility in the subsequent stitching together of the content.
>>      
>

From parrt at cs.usfca.edu  Sat Feb 20 11:43:58 2010
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sat, 20 Feb 2010 11:43:58 -0800
Subject: [stringtemplate-interest] How best to do recursive hetero
	template calls?
In-Reply-To: <4B7F1E46.6000100@certiv.net>
References: <4B7D7464.8080807@certiv.net>
	<7D1A74AD-1D33-4478-9E74-B248E899B729@cs.usfca.edu>
	<4B7F1E46.6000100@certiv.net>
Message-ID: <90F454F9-4322-4427-82E9-8115BEF38C49@cs.usfca.edu>

To me,  it's not the job of ST to manage a list of your output templates. There to many kinds of data structures you might want and I'm not sure introducing new syntax is the right approach. In my tools, I use the same template to generate multiple output files with no problem. For example, my root grammar returns a list of template:

options { output=template; }
file returns [List templates]
	:	d+=decl+ {templates=$d;}
	;

decl : stuff -> decltemplate(...) ;

> And here is the tie in to the tree walk.  My case is a root container 
> that can contain any mix of containers and controls, repeating.  The 
> tree walk works perfectly but results in one massive string.  Everything 
> would have to be realized using inner classes.  In practice, each 
> container needs to be generated to a separate string that could then be 
> saved as a separate class file.

personally, I would simply remove the top level of the template if it's just saying "make a list". If there's no text, why would you use a template. If there is text, how could you get away with a list? how do you break up the template? by lines?

Ter

From gerald at certiv.net  Sat Feb 20 15:03:53 2010
From: gerald at certiv.net (Gerald Rosenberg)
Date: Sat, 20 Feb 2010 15:03:53 -0800
Subject: [stringtemplate-interest] How best to do recursive hetero
 template calls?
In-Reply-To: <90F454F9-4322-4427-82E9-8115BEF38C49@cs.usfca.edu>
References: <4B7D7464.8080807@certiv.net>
	<7D1A74AD-1D33-4478-9E74-B248E899B729@cs.usfca.edu>
	<4B7F1E46.6000100@certiv.net>
	<90F454F9-4322-4427-82E9-8115BEF38C49@cs.usfca.edu>
Message-ID: <4B806A59.7050607@certiv.net>

On 2/20/2010 11:43 AM, Terence Parr wrote:

Seems I borked the explanation.
> To me,  it's not the job of ST to manage a list of your output templates.
To be clear, the enhancement is to allow a single template invocation to 
output multiple content fragments.  A mark on a template will flag when 
to switch to a new content buffer and the end of that template defines 
the switch back.  The *only* management ST does is to blindly push and 
pop output content buffers based on some static mark.
> There to many kinds of data structures you might want
The specific data structure is really a don't care. Did not intend to 
suggest that it was tied to or needed any particular data structure.
> and I'm not sure introducing new syntax is the right approach. In my tools, I use the same template to generate multiple output files with no problem.
Yes, existing behavior is one content string output per invocation of a 
template. But, like inheritance, it is somewhat of a blunt instrument.

ST supports regions so you can override deep details in a parent 
template.  Well, suppose rather than changing what text is generated 
deep in a template invocation, you just want to capture that bit of text 
as an independent content fragment.  One basic use case is a parent 
template that generates the text that includes an inner class 
definition.  If you can generate the text of the inner class, then you 
have all that you need to generate a stand-alone class right there, 
right then.   *Except* you need to capture the text of that stand-alone 
class in an independent string so you can save it to a separate file.  
Like regions, it is a matter of conceptual clarity and convenience.  
Likely less control code to write and maintain, also.

So, for

/String[] contents = parentTemplate.renders();/

where /parentTempate/ invokes /subTemplateA/ invokes /*^*subTemplateB/ 
invokes /subTemplateC/

/    contents[0]/ is the ordinary generated text of /parentTempate/ and 
/subTemplateA/ as though /subTemplateB/ and /subTemplateC/ where not 
specified.
/contents[1]/ is the generated text of /subTemplateB/ and /subTemplateC/ 
dependent on whatever attributes existed when the instance of 
/subTemplateB/ was first invoked
     ...
/contents[n]/ is the generated text of /subTemplateB/ and /subTemplateC/ 
dependent on whatever attributes existed when the instance of 
/subTemplateB/ was invoked the nth time.

The order of the fragments 1..n really doesn't matter since they are 
independent of one another.  (If knowing which template resulted in 
which content fragment is needed, /renders()/ could instead return an 
ordered map of content fragment/^template name.)

The result is clean, minimal, functional, etc, etc.

Best,
Gerald

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20100220/33734d31/attachment.html 

From gerald at certiv.net  Sat Feb 20 16:38:47 2010
From: gerald at certiv.net (Gerald Rosenberg)
Date: Sat, 20 Feb 2010 16:38:47 -0800
Subject: [stringtemplate-interest] ST4 inheritance without a group header?
Message-ID: <4B808097.2020509@certiv.net>

Need a hint on how to specify template inheritance from a .stg file in 
ST4 now that the group statement is gone.

Thanks...


From parrt at cs.usfca.edu  Sat Feb 20 16:40:32 2010
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sat, 20 Feb 2010 16:40:32 -0800
Subject: [stringtemplate-interest] ST4 inheritance without a group
	header?
In-Reply-To: <4B808097.2020509@certiv.net>
References: <4B808097.2020509@certiv.net>
Message-ID: <8341E1C4-93A7-4D70-A18E-C44AE5647724@cs.usfca.edu>

hiya.  no need for "group ...;" An STG file is literally a concat of multiple templates, just like a dir.
So, we use dynamic inheritance.  I believe there is a set super method on STG.
Ter
On Feb 20, 2010, at 4:38 PM, Gerald Rosenberg wrote:

> Need a hint on how to specify template inheritance from a .stg file in 
> ST4 now that the group statement is gone.
> 
> Thanks...
> 
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest


From parrt at cs.usfca.edu  Sat Feb 20 17:32:39 2010
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sat, 20 Feb 2010 17:32:39 -0800
Subject: [stringtemplate-interest] How best to do recursive hetero
	template calls?
In-Reply-To: <4B806A59.7050607@certiv.net>
References: <4B7D7464.8080807@certiv.net>
	<7D1A74AD-1D33-4478-9E74-B248E899B729@cs.usfca.edu>
	<4B7F1E46.6000100@certiv.net>
	<90F454F9-4322-4427-82E9-8115BEF38C49@cs.usfca.edu>
	<4B806A59.7050607@certiv.net>
Message-ID: <DD1C05EB-4DF0-452D-9AE7-68F1E3A5C601@cs.usfca.edu>


On Feb 20, 2010, at 3:03 PM, Gerald Rosenberg wrote:

> On 2/20/2010 11:43 AM, Terence Parr wrote:
> 
> Seems I borked the explanation.
>> To me,  it's not the job of ST to manage a list of your output templates. 
> To be clear, the enhancement is to allow a single template invocation to output multiple content fragments.  A mark on a template will flag when to switch to a new content buffer and the end of that template defines the switch back.  The *only* management ST does is to blindly push and pop output content buffers based on some static mark.

Hmm...not sure why ST should do splitting. user should split on ST granularity.  Also, what if "mark" isn't just "do it now"?  What if you need a predicate? ;)

>> There to many kinds of data structures you might want 
> The specific data structure is really a don't care. Did not intend to suggest that it was tied to or needed any particular data structure.

well, has to be a list of some sort.

>> and I'm not sure introducing new syntax is the right approach. In my tools, I use the same template to generate multiple output files with no problem. 
> Yes, existing behavior is one content string output per invocation of a template. But, like inheritance, it is somewhat of a blunt instrument.  
> 
> ST supports regions so you can override deep details in a parent template.

I see the analogy with regions, but not the compelling use case yet. 

>  Well, suppose rather than changing what text is generated deep in a template invocation, you just want to capture that bit of text as an independent content fragment.  One basic use case is a parent template that generates the text that includes an inner class definition.  If you can generate the text of the inner class, then you have all that you need to generate a stand-alone class right there, right then.   *Except* you need to capture the text of that stand-alone class in an independent string so you can save it to a separate file.  Like regions, it is a matter of conceptual clarity and convenience.  Likely less control code to write and maintain, also.

To me the logic controls whether to create a subclass template; templates don't think. they display. logic will ask for template and write to a file.

I typically create a large hierarchy of templates and so it's no problem to have my logic create a list of ST to shove into other files.

T

From gerald at certiv.net  Sat Feb 20 18:00:18 2010
From: gerald at certiv.net (Gerald Rosenberg)
Date: Sat, 20 Feb 2010 18:00:18 -0800
Subject: [stringtemplate-interest] ST4 inheritance without a group
	header?
In-Reply-To: <8341E1C4-93A7-4D70-A18E-C44AE5647724@cs.usfca.edu>
References: <4B808097.2020509@certiv.net>
	<8341E1C4-93A7-4D70-A18E-C44AE5647724@cs.usfca.edu>
Message-ID: <4B8093B2.7080302@certiv.net>

On 2/20/2010 4:40 PM, Terence Parr wrote:
> hiya.  no need for "group ...;" An STG file is literally a concat of multiple templates, just like a dir.
>    
Obviously.
> So, we use dynamic inheritance.  I believe there is a set super method on STG.
>    
None that I can find.
> Ter
> On Feb 20, 2010, at 4:38 PM, Gerald Rosenberg wrote:
>
>    
>> Need a hint on how to specify template inheritance from a .stg file in
>> ST4 now that the group statement is gone.
>>
>> Thanks...
>>
>> _______________________________________________
>> stringtemplate-interest mailing list
>> stringtemplate-interest at antlr.org
>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>>      
>
>    



From gerald at certiv.net  Sat Feb 20 18:20:43 2010
From: gerald at certiv.net (Gerald Rosenberg)
Date: Sat, 20 Feb 2010 18:20:43 -0800
Subject: [stringtemplate-interest] How best to do recursive hetero
 template calls?
In-Reply-To: <DD1C05EB-4DF0-452D-9AE7-68F1E3A5C601@cs.usfca.edu>
References: <4B7D7464.8080807@certiv.net>
	<7D1A74AD-1D33-4478-9E74-B248E899B729@cs.usfca.edu>
	<4B7F1E46.6000100@certiv.net>
	<90F454F9-4322-4427-82E9-8115BEF38C49@cs.usfca.edu>
	<4B806A59.7050607@certiv.net>
	<DD1C05EB-4DF0-452D-9AE7-68F1E3A5C601@cs.usfca.edu>
Message-ID: <4B80987B.7060904@certiv.net>

On 2/20/2010 5:32 PM, Terence Parr wrote:
> On Feb 20, 2010, at 3:03 PM, Gerald Rosenberg wrote:
>
>    
>> On 2/20/2010 11:43 AM, Terence Parr wrote:
>>
>> Seems I borked the explanation.
>>      
>>> To me,  it's not the job of ST to manage a list of your output templates.
>>>        
>> To be clear, the enhancement is to allow a single template invocation to output multiple content fragments.  A mark on a template will flag when to switch to a new content buffer and the end of that template defines the switch back.  The *only* management ST does is to blindly push and pop output content buffers based on some static mark.
>>      
> Hmm...not sure why ST should do splitting. user should split on ST granularity.  Also, what if "mark" isn't just "do it now"?  What if you need a predicate? ;)
>    
Yep, you got me ;)




From kbhdk1976 at gmail.com  Sat Feb 20 23:44:12 2010
From: kbhdk1976 at gmail.com (Kasper Hansen)
Date: Sun, 21 Feb 2010 08:44:12 +0100
Subject: [stringtemplate-interest] eval tree parse error <AST>:0:0:
	unexpected end of subtree
Message-ID: <c600a4701002202344y42d57feai9750790591caaff3@mail.gmail.com>

Hi all,

I'm trying ST out as a JSP replacement, but have some problems;

I load my StringTemplate;

StringTemplateGroup stringTemplateGroup = new
StringTemplateGroup("com.mentalobe.templates");
this.stringTemplate = stringTemplateGroup.getInstanceOf("articlelist");

Here are the templates;

articlelist.st:
$listfield.segments : { segmentInstance |

$segmentfield(segment=segmentInstance)$

}$

segmentfield.st:
$if (segment != null)$
<h3>$segment.name$</h3>
$else$
<h3>segment does not have a name</h3>
$endif$

When i run it, i get the following stacktrace;

action parse error in group com.mentalobe.templates line 0; template
context is [segmentfield]
line 1:4: unexpected token: segment
	at org.antlr.stringtemplate.language.ActionParser.templatesExpr(ActionParser.java:261)
	at org.antlr.stringtemplate.language.ActionParser.ifAtom(ActionParser.java:664)
	at org.antlr.stringtemplate.language.ActionParser.ifCondition(ActionParser.java:335)
	at org.antlr.stringtemplate.language.ActionParser.action(ActionParser.java:157)
	at org.antlr.stringtemplate.StringTemplate.parseAction(StringTemplate.java:876)
	at org.antlr.stringtemplate.language.TemplateParser.action(TemplateParser.java:173)
	at org.antlr.stringtemplate.language.TemplateParser.template(TemplateParser.java:127)
	at org.antlr.stringtemplate.StringTemplate.breakTemplateIntoChunks(StringTemplate.java:850)
	at org.antlr.stringtemplate.StringTemplate.setTemplate(StringTemplate.java:441)
	at org.antlr.stringtemplate.StringTemplateGroup.defineTemplate(StringTemplateGroup.java:679)
	at org.antlr.stringtemplate.StringTemplateGroup.loadTemplate(StringTemplateGroup.java:553)
	at org.antlr.stringtemplate.StringTemplateGroup.loadTemplateFromBeneathRootDirOrCLASSPATH(StringTemplateGroup.java:579)
	at org.antlr.stringtemplate.StringTemplateGroup.lookupTemplate(StringTemplateGroup.java:480)
	at org.antlr.stringtemplate.StringTemplateGroup.getInstanceOf(StringTemplateGroup.java:392)
	at org.antlr.stringtemplate.StringTemplateGroup.getEmbeddedInstanceOf(StringTemplateGroup.java:436)
	at org.antlr.stringtemplate.language.ASTExpr.getTemplateInclude(ASTExpr.java:638)
	at org.antlr.stringtemplate.language.ActionEvaluator.templateInclude(ActionEvaluator.java:470)
	at org.antlr.stringtemplate.language.ActionEvaluator.expr(ActionEvaluator.java:142)
	at org.antlr.stringtemplate.language.ActionEvaluator.action(ActionEvaluator.java:84)
	at org.antlr.stringtemplate.language.ASTExpr.write(ASTExpr.java:149)
	at org.antlr.stringtemplate.StringTemplate.write(StringTemplate.java:705)
	at org.antlr.stringtemplate.language.ASTExpr.writeTemplate(ASTExpr.java:750)
	at org.antlr.stringtemplate.language.ASTExpr.write(ASTExpr.java:680)
	at org.antlr.stringtemplate.language.ASTExpr.writeIterableValue(ASTExpr.java:772)
	at org.antlr.stringtemplate.language.ASTExpr.write(ASTExpr.java:682)
	at org.antlr.stringtemplate.language.ASTExpr.writeAttribute(ASTExpr.java:660)
	at org.antlr.stringtemplate.language.ActionEvaluator.action(ActionEvaluator.java:86)
	at org.antlr.stringtemplate.language.ASTExpr.write(ASTExpr.java:149)
	at org.antlr.stringtemplate.StringTemplate.write(StringTemplate.java:705)
	at org.antlr.stringtemplate.StringTemplate.toString(StringTemplate.java:1670)
	at org.antlr.stringtemplate.StringTemplate.toString(StringTemplate.java:1661)
	at com.mentalobe.www.article.ArticleListAction.handle(ArticleListAction.java:37)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at com.google.appengine.tools.development.agent.runtime.Runtime.invoke(Runtime.java:100)
	at com.mentalobe.www.core.MentalobeServlet.handleEventType(MentalobeServlet.java:360)
	at com.mentalobe.www.core.MentalobeServlet.handleRequest(MentalobeServlet.java:108)
	at com.mentalobe.www.core.MentalobeServlet.doGet(MentalobeServlet.java:81)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:693)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:806)
	at org.mortbay.jetty.servlet.ServletHolder.handle(ServletHolder.java:487)
	at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1093)
	at com.google.appengine.api.blobstore.dev.ServeBlobFilter.doFilter(ServeBlobFilter.java:51)
	at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1084)
	at com.google.apphosting.utils.servlet.TransactionCleanupFilter.doFilter(TransactionCleanupFilter.java:43)
	at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1084)
	at com.google.appengine.tools.development.StaticFileFilter.doFilter(StaticFileFilter.java:121)
	at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1084)
	at org.mortbay.jetty.servlet.ServletHandler.handle(ServletHandler.java:360)
	at org.mortbay.jetty.security.SecurityHandler.handle(SecurityHandler.java:216)
	at org.mortbay.jetty.servlet.SessionHandler.handle(SessionHandler.java:181)
	at org.mortbay.jetty.handler.ContextHandler.handle(ContextHandler.java:712)
	at org.mortbay.jetty.webapp.WebAppContext.handle(WebAppContext.java:405)
	at com.google.apphosting.utils.jetty.DevAppEngineWebAppContext.handle(DevAppEngineWebAppContext.java:70)
	at org.mortbay.jetty.handler.HandlerWrapper.handle(HandlerWrapper.java:139)
	at com.google.appengine.tools.development.JettyContainerService$ApiProxyHandler.handle(JettyContainerService.java:352)
	at org.mortbay.jetty.handler.HandlerWrapper.handle(HandlerWrapper.java:139)
	at org.mortbay.jetty.Server.handle(Server.java:313)
	at org.mortbay.jetty.HttpConnection.handleRequest(HttpConnection.java:506)
	at org.mortbay.jetty.HttpConnection$RequestHandler.headerComplete(HttpConnection.java:830)
	at org.mortbay.jetty.HttpParser.parseNext(HttpParser.java:514)
	at org.mortbay.jetty.HttpParser.parseAvailable(HttpParser.java:211)
	at org.mortbay.jetty.HttpConnection.handle(HttpConnection.java:381)
	at org.mortbay.io.nio.SelectChannelEndPoint.run(SelectChannelEndPoint.java:396)
	at org.mortbay.thread.BoundedThreadPool$PoolThread.run(BoundedThreadPool.java:442)
eval tree parse error
<AST>:0:0: unexpected end of subtree
	at org.antlr.stringtemplate.language.ActionEvaluator.ifCondition(ActionEvaluator.java:814)
	at org.antlr.stringtemplate.language.ConditionalExpr.write(ConditionalExpr.java:99)
	at org.antlr.stringtemplate.StringTemplate.write(StringTemplate.java:705)
	at org.antlr.stringtemplate.language.ASTExpr.writeTemplate(ASTExpr.java:750)
	at org.antlr.stringtemplate.language.ASTExpr.write(ASTExpr.java:680)
	at org.antlr.stringtemplate.language.ASTExpr.writeAttribute(ASTExpr.java:660)
	at org.antlr.stringtemplate.language.ActionEvaluator.action(ActionEvaluator.java:86)
	at org.antlr.stringtemplate.language.ASTExpr.write(ASTExpr.java:149)
	at org.antlr.stringtemplate.StringTemplate.write(StringTemplate.java:705)
	at org.antlr.stringtemplate.language.ASTExpr.writeTemplate(ASTExpr.java:750)
	at org.antlr.stringtemplate.language.ASTExpr.write(ASTExpr.java:680)
	at org.antlr.stringtemplate.language.ASTExpr.writeIterableValue(ASTExpr.java:772)
	at org.antlr.stringtemplate.language.ASTExpr.write(ASTExpr.java:682)
	at org.antlr.stringtemplate.language.ASTExpr.writeAttribute(ASTExpr.java:660)
	at org.antlr.stringtemplate.language.ActionEvaluator.action(ActionEvaluator.java:86)
	at org.antlr.stringtemplate.language.ASTExpr.write(ASTExpr.java:149)
	at org.antlr.stringtemplate.StringTemplate.write(StringTemplate.java:705)
	at org.antlr.stringtemplate.StringTemplate.toString(StringTemplate.java:1670)
	at org.antlr.stringtemplate.StringTemplate.toString(StringTemplate.java:1661)
	at com.mentalobe.www.article.ArticleListAction.handle(ArticleListAction.java:37)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at com.google.appengine.tools.development.agent.runtime.Runtime.invoke(Runtime.java:100)
	at com.mentalobe.www.core.MentalobeServlet.handleEventType(MentalobeServlet.java:360)
	at com.mentalobe.www.core.MentalobeServlet.handleRequest(MentalobeServlet.java:108)
	at com.mentalobe.www.core.MentalobeServlet.doGet(MentalobeServlet.java:81)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:693)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:806)
	at org.mortbay.jetty.servlet.ServletHolder.handle(ServletHolder.java:487)
	at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1093)
	at com.google.appengine.api.blobstore.dev.ServeBlobFilter.doFilter(ServeBlobFilter.java:51)
	at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1084)
	at com.google.apphosting.utils.servlet.TransactionCleanupFilter.doFilter(TransactionCleanupFilter.java:43)
	at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1084)
	at com.google.appengine.tools.development.StaticFileFilter.doFilter(StaticFileFilter.java:121)
	at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1084)
	at org.mortbay.jetty.servlet.ServletHandler.handle(ServletHandler.java:360)
	at org.mortbay.jetty.security.SecurityHandler.handle(SecurityHandler.java:216)
	at org.mortbay.jetty.servlet.SessionHandler.handle(SessionHandler.java:181)
	at org.mortbay.jetty.handler.ContextHandler.handle(ContextHandler.java:712)
	at org.mortbay.jetty.webapp.WebAppContext.handle(WebAppContext.java:405)
	at com.google.apphosting.utils.jetty.DevAppEngineWebAppContext.handle(DevAppEngineWebAppContext.java:70)
	at org.mortbay.jetty.handler.HandlerWrapper.handle(HandlerWrapper.java:139)
	at com.google.appengine.tools.development.JettyContainerService$ApiProxyHandler.handle(JettyContainerService.java:352)
	at org.mortbay.jetty.handler.HandlerWrapper.handle(HandlerWrapper.java:139)
	at org.mortbay.jetty.Server.handle(Server.java:313)
	at org.mortbay.jetty.HttpConnection.handleRequest(HttpConnection.java:506)
	at org.mortbay.jetty.HttpConnection$RequestHandler.headerComplete(HttpConnection.java:830)
	at org.mortbay.jetty.HttpParser.parseNext(HttpParser.java:514)
	at org.mortbay.jetty.HttpParser.parseAvailable(HttpParser.java:211)
	at org.mortbay.jetty.HttpConnection.handle(HttpConnection.java:381)
	at org.mortbay.io.nio.SelectChannelEndPoint.run(SelectChannelEndPoint.java:396)
	at org.mortbay.thread.BoundedThreadPool$PoolThread.run(BoundedThreadPool.java:442)

A little help, anyone ?

Cheers,

:-) Kasper

From parrt at cs.usfca.edu  Sun Feb 21 08:42:07 2010
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sun, 21 Feb 2010 08:42:07 -0800
Subject: [stringtemplate-interest] ST4 inheritance without a group
	header?
In-Reply-To: <4B8093B2.7080302@certiv.net>
References: <4B808097.2020509@certiv.net>
	<8341E1C4-93A7-4D70-A18E-C44AE5647724@cs.usfca.edu>
	<4B8093B2.7080302@certiv.net>
Message-ID: <DC9D305B-2F27-41DC-9E7B-575ABB3B944B@cs.usfca.edu>


On Feb 20, 2010, at 6:00 PM, Gerald Rosenberg wrote:

> On 2/20/2010 4:40 PM, Terence Parr wrote:
>> hiya.  no need for "group ...;" An STG file is literally a concat  
>> of multiple templates, just like a dir.
>>
> Obviously.
>> So, we use dynamic inheritance.  I believe there is a set super  
>> method on STG.
>>
> None that I can find.
>>

crap. i'm pretty sure i have unit tests...anything obvious in there?  
oh sorry! found it:

     /** Make this group import templates/dictionaries from g. */
     public void importTemplates(STGroup g) {}

I renamed it to import rather inheritance; easier concept.

Ter

From parrt at cs.usfca.edu  Sun Feb 21 08:43:04 2010
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sun, 21 Feb 2010 08:43:04 -0800
Subject: [stringtemplate-interest] eval tree parse error <AST>:0:0:
	unexpected end of subtree
In-Reply-To: <c600a4701002202344y42d57feai9750790591caaff3@mail.gmail.com>
References: <c600a4701002202344y42d57feai9750790591caaff3@mail.gmail.com>
Message-ID: <BFD0E53A-9239-4262-AC07-37A51A1198B3@cs.usfca.edu>


On Feb 20, 2010, at 11:44 PM, Kasper Hansen wrote:

> $if (segment != null)$

Hi Kasper, ST doesn't allow expressions that test logic.  Try:

$if (!segment)$

which says same thing in this case. "segment not present"

Ter


From gerald at certiv.net  Tue Feb 23 09:00:00 2010
From: gerald at certiv.net (Gerald Rosenberg)
Date: Tue, 23 Feb 2010 09:00:00 -0800
Subject: [stringtemplate-interest] ST4 inheritance without a
	group	header?
In-Reply-To: <DC9D305B-2F27-41DC-9E7B-575ABB3B944B@cs.usfca.edu>
References: <4B808097.2020509@certiv.net>	<8341E1C4-93A7-4D70-A18E-C44AE5647724@cs.usfca.edu>	<4B8093B2.7080302@certiv.net>
	<DC9D305B-2F27-41DC-9E7B-575ABB3B944B@cs.usfca.edu>
Message-ID: <4B840990.1020102@certiv.net>

On 2/21/2010 8:42 AM, Terence Parr wrote:
>
> crap. i'm pretty sure i have unit tests...anything obvious in there?
> oh sorry! found it:
>
>       /** Make this group import templates/dictionaries from g. */
>       public void importTemplates(STGroup g) {}
>
> I renamed it to import rather inheritance; easier concept.
>    

OK, works as intended.  Nice!

Dropping the group statement creates an interesting conundrum.  Since 
STv3 and v4 both use .stg files, no way for a tool to know whether to 
mark existence or absence of the group statement as an error.

Perhaps more significant, static analysis of ST4 template files becomes 
problematic since there is no way to automatically evaluate inheritance 
- no way for a tool to know what the chain of dynamic imports will be 
for a particular template.  Are you aware of any other languages with 
this type of dynamic inheritance?  Would be interesting to see how their 
tools handle the issue.

Wonder if makes sense to require, or at least allow, an ST4 template to 
statically inherit an .sti interface?  Cannot make this change just in 
the tool - the templates would not be portable.


From parrt at cs.usfca.edu  Tue Feb 23 10:48:59 2010
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue, 23 Feb 2010 10:48:59 -0800
Subject: [stringtemplate-interest] ST4 inheritance without a
	group	header?
In-Reply-To: <4B840990.1020102@certiv.net>
References: <4B808097.2020509@certiv.net>	<8341E1C4-93A7-4D70-A18E-C44AE5647724@cs.usfca.edu>	<4B8093B2.7080302@certiv.net>
	<DC9D305B-2F27-41DC-9E7B-575ABB3B944B@cs.usfca.edu>
	<4B840990.1020102@certiv.net>
Message-ID: <16FF07F8-10DE-4268-A806-DD0B5291A990@cs.usfca.edu>


On Feb 23, 2010, at 9:00 AM, Gerald Rosenberg wrote:
> Dropping the group statement creates an interesting conundrum.  Since 
> STv3 and v4 both use .stg files, no way for a tool to know whether to 
> mark existence or absence of the group statement as an error.

a very interesting problem. shoot.

> Perhaps more significant, static analysis of ST4 template files becomes 
> problematic since there is no way to automatically evaluate inheritance 
> - no way for a tool to know what the chain of dynamic imports will be 
> for a particular template.

That was also true with the previous version because you could do dynamic inheritance.

>  Are you aware of any other languages with 
> this type of dynamic inheritance?

 no doubt Ruby and Python can do that ;)

>  Would be interesting to see how their 
> tools handle the issue.

True.  Yeah, I was wondering about the static inheritance feature. First issue is the problem that we have to create group loaders because it has to know how to find the supergroup. With dynamic inheritance the programmer simply finds it themselves. The other issue is that a directory of templates really should be the same as a file of templates. I really like the consistency.

as for static analysis, I'm not sure what to do. It would be annoying to highlight template references that don't exist simply because they are from an inherited group. :(

> Wonder if makes sense to require, or at least allow, an ST4 template to 
> statically inherit an .sti interface?  Cannot make this change just in 
> the tool - the templates would not be portable.

Interesting. perhaps making the group header optional...or introduce an option? It still brings up the question of how do you know where the supergroup lives on the disk.

Ter

From gerald at certiv.net  Tue Feb 23 13:07:20 2010
From: gerald at certiv.net (Gerald Rosenberg)
Date: Tue, 23 Feb 2010 13:07:20 -0800
Subject: [stringtemplate-interest] ST4 inheritance without
	a	group	header?
In-Reply-To: <16FF07F8-10DE-4268-A806-DD0B5291A990@cs.usfca.edu>
References: <4B808097.2020509@certiv.net>	<8341E1C4-93A7-4D70-A18E-C44AE5647724@cs.usfca.edu>	<4B8093B2.7080302@certiv.net>	<DC9D305B-2F27-41DC-9E7B-575ABB3B944B@cs.usfca.edu>	<4B840990.1020102@certiv.net>
	<16FF07F8-10DE-4268-A806-DD0B5291A990@cs.usfca.edu>
Message-ID: <4B844388.20401@certiv.net>

On 2/23/2010 10:48 AM, Terence Parr wrote:
>> Are you aware of any other languages with
>> this type of dynamic inheritance?
>>      
>   no doubt Ruby and Python can do that ;)
>    

Don't Ruby and Python use source statements to specify the import.  
Thus, the import statement is in the file being parsed.  No problem then 
for static analysis to actually trace it.

For ST4, the import statement is in the controller's glue and invisible 
to any parse of a template.

>> Wonder if makes sense to require, or at least allow, an ST4 template to
>> statically inherit an .sti interface?  Cannot make this change just in
>> the tool - the templates would not be portable.
>>      
> Interesting. perhaps making the group header optional...or introduce an option?

You mean a grammar file option?  Won't that make templates dependent on 
being driven from Antlr?  What about standalone use of ST?

> It still brings up the question of how do you know where the supergroup lives on the disk.
>    
Not sure the problem.  You already impose a directory structure - could 
just pass the template root path as a parameter to STGroupFile and 
STGroupDir and support relative paths in the templates, right?


From parrt at cs.usfca.edu  Tue Feb 23 16:37:32 2010
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue, 23 Feb 2010 16:37:32 -0800
Subject: [stringtemplate-interest] ST4 inheritance without
	a	group	header?
In-Reply-To: <4B844388.20401@certiv.net>
References: <4B808097.2020509@certiv.net>	<8341E1C4-93A7-4D70-A18E-C44AE5647724@cs.usfca.edu>	<4B8093B2.7080302@certiv.net>	<DC9D305B-2F27-41DC-9E7B-575ABB3B944B@cs.usfca.edu>	<4B840990.1020102@certiv.net>
	<16FF07F8-10DE-4268-A806-DD0B5291A990@cs.usfca.edu>
	<4B844388.20401@certiv.net>
Message-ID: <E48006E7-7D2E-451F-919F-2E476A28EDA0@cs.usfca.edu>


On Feb 23, 2010, at 1:07 PM, Gerald Rosenberg wrote:

> On 2/23/2010 10:48 AM, Terence Parr wrote:
>>> Are you aware of any other languages with
>>> this type of dynamic inheritance?
>>> 
>>  no doubt Ruby and Python can do that ;)
>> 
> 
> Don't Ruby and Python use source statements to specify the import.  

well,For both import and superclass they do, but I'm under the impression you can monkey with the inheritance at runtime.

> Thus, the import statement is in the file being parsed.  No problem then 
> for static analysis to actually trace it.
> 
> For ST4, the import statement is in the controller's glue and invisible 
> to any parse of a template.

yup :(

>>> Wonder if makes sense to require, or at least allow, an ST4 template to
>>> statically inherit an .sti interface?  Cannot make this change just in
>>> the tool - the templates would not be portable.
>>> 
>> Interesting. perhaps making the group header optional...or introduce an option?
> 
> You mean a grammar file option?

nope. something inside the stg file:

options {super="another.stg"}

foo() ::= "..."

>> It still brings up the question of how do you know where the supergroup lives on the disk.
>> 
> Not sure the problem.  You already impose a directory structure - could 
> just pass the template root path as a parameter to STGroupFile and 
> STGroupDir and support relative paths in the templates, right?

 well, I was able to rip out all of that STGroupLoader crap from v3 because I didn't have to allow people to give me some kind of a classpath=like mechanism defined supergroups. the supergroup could be from a socket a database another directory etc.

T

From gerald at certiv.net  Tue Feb 23 17:34:12 2010
From: gerald at certiv.net (Gerald Rosenberg)
Date: Tue, 23 Feb 2010 17:34:12 -0800
Subject: [stringtemplate-interest] ST4 inheritance without
	a	group	header?
In-Reply-To: <E48006E7-7D2E-451F-919F-2E476A28EDA0@cs.usfca.edu>
References: <4B808097.2020509@certiv.net>	<8341E1C4-93A7-4D70-A18E-C44AE5647724@cs.usfca.edu>	<4B8093B2.7080302@certiv.net>	<DC9D305B-2F27-41DC-9E7B-575ABB3B944B@cs.usfca.edu>	<4B840990.1020102@certiv.net>
	<16FF07F8-10DE-4268-A806-DD0B5291A990@cs.usfca.edu>
	<4B844388.20401@certiv.net>
	<E48006E7-7D2E-451F-919F-2E476A28EDA0@cs.usfca.edu>
Message-ID: <4B848214.7070003@certiv.net>

On 2/23/2010 4:37 PM, Terence Parr wrote:
> On Feb 23, 2010, at 1:07 PM, Gerald Rosenberg wrote:
>    
>> Don't Ruby and Python use source statements to specify the import.
>>      
> well,For both import and superclass they do, but I'm under the impression you can monkey with the inheritance at runtime.
>    

I don't think their tools don't handle those circumstances statically; 
only under debug.

>
>> You mean a grammar file option?
> nope. something inside the stg file:
>
> options {super="another.stg"}
>    

FWIW, my preference would be for the old group statement syntax.  Not 
sure that the options syntax is clearer, and it does not address the 
ambiguity of whether a group statement is proper or not (and now whether 
an options statement is proper or not).  Would have to somehow grep into 
the template to infer whether it is ST3 or 4 and dynamically switch 
parsers, though that still would not be entirely unambiguous - yuk.

>>> It still brings up the question of how do you know where the supergroup lives on the disk.
>> Not sure the problem.  You already impose a directory structure - could
>> just pass the template root path as a parameter to STGroupFile and
>> STGroupDir and support relative paths in the templates, right?
> well, I was able to rip out all of that STGroupLoader crap from v3 because I didn't have to allow people to give me some kind of a classpath=like mechanism defined supergroups. the supergroup could be from a socket a database another directory etc.
>    

I would think that anything that looks like a file store must support 
URI access by now.  Oracle even supports simple URI access (not 
JDBC-based) to its repository, which can be mapped onto a standard 
table.  Anyone who insists on a raw socket should be required to provide 
a URI wrapper, etc.


From parrt at cs.usfca.edu  Wed Feb 24 10:50:48 2010
From: parrt at cs.usfca.edu (Terence Parr)
Date: Wed, 24 Feb 2010 10:50:48 -0800
Subject: [stringtemplate-interest] ST4 inheritance without
	a	group	header?
In-Reply-To: <4B848214.7070003@certiv.net>
References: <4B808097.2020509@certiv.net>	<8341E1C4-93A7-4D70-A18E-C44AE5647724@cs.usfca.edu>	<4B8093B2.7080302@certiv.net>	<DC9D305B-2F27-41DC-9E7B-575ABB3B944B@cs.usfca.edu>	<4B840990.1020102@certiv.net>
	<16FF07F8-10DE-4268-A806-DD0B5291A990@cs.usfca.edu>
	<4B844388.20401@certiv.net>
	<E48006E7-7D2E-451F-919F-2E476A28EDA0@cs.usfca.edu>
	<4B848214.7070003@certiv.net>
Message-ID: <C5C3D59A-8873-4A6B-A4F7-50F8A332B356@cs.usfca.edu>

> FWIW, my preference would be for the old group statement syntax.  Not 

agreed the group syntax is better.

> sure that the options syntax is clearer, and it does not address the 
> ambiguity of whether a group statement is proper or not (and now whether 
> an options statement is proper or not).  Would have to somehow grep into 
> the template to infer whether it is ST3 or 4 and dynamically switch 
> parsers, though that still would not be entirely unambiguous - yuk.

Right. I didn't really consider tools that want to handle both. The syntax is identical except for the possibility that we make the group header optional. In that case, a tool wouldn't know. on the other hand, does the tool really care if the syntax is identical except for that first line? If you plan on executing templates or something like that you need to know, but otherwise I think we can do syntax highlighting without it.

> 
>>>> It still brings up the question of how do you know where the supergroup lives on the disk.
>>> Not sure the problem.  You already impose a directory structure - could
>>> just pass the template root path as a parameter to STGroupFile and
>>> STGroupDir and support relative paths in the templates, right?
>> well, I was able to rip out all of that STGroupLoader crap from v3 because I didn't have to allow people to give me some kind of a classpath=like mechanism defined supergroups. the supergroup could be from a socket a database another directory etc.
>> 
> 
> I would think that anything that looks like a file store must support 
> URI access by now.  Oracle even supports simple URI access (not 
> JDBC-based) to its repository, which can be mapped onto a standard 
> table.  Anyone who insists on a raw socket should be required to provide 
> a URI wrapper, etc.

Right. but we need a class path or something so that people can specify the directories to look in. A single file spec is insufficient and we have no place to specify anyway unless you plan on changing the syntax of the group header to specify a file name instead of a simple supergroup name.
Ter

From gerald at certiv.net  Wed Feb 24 12:48:55 2010
From: gerald at certiv.net (Gerald Rosenberg)
Date: Wed, 24 Feb 2010 12:48:55 -0800
Subject: [stringtemplate-interest] ST4 inheritance without
	a	group	header?
In-Reply-To: <C5C3D59A-8873-4A6B-A4F7-50F8A332B356@cs.usfca.edu>
References: <4B808097.2020509@certiv.net>	<8341E1C4-93A7-4D70-A18E-C44AE5647724@cs.usfca.edu>	<4B8093B2.7080302@certiv.net>	<DC9D305B-2F27-41DC-9E7B-575ABB3B944B@cs.usfca.edu>	<4B840990.1020102@certiv.net>
	<16FF07F8-10DE-4268-A806-DD0B5291A990@cs.usfca.edu>
	<4B844388.20401@certiv.net>
	<E48006E7-7D2E-451F-919F-2E476A28EDA0@cs.usfca.edu>
	<4B848214.7070003@certiv.net>
	<C5C3D59A-8873-4A6B-A4F7-50F8A332B356@cs.usfca.edu>
Message-ID: <4B8590B7.8070204@certiv.net>

On 2/24/2010 10:50 AM, Terence Parr wrote:
>
> Right. I didn't really consider tools that want to handle both. The 
> syntax is identical except for the possibility that we make the group 
> header optional. In that case, a tool wouldn't know. on the other 
> hand, does the tool really care if the syntax is identical except for 
> that first line? If you plan on executing templates or something like 
> that you need to know, but otherwise I think we can do syntax 
> highlighting without it.

What I do - and would prefer to continue doing - is use an unaltered 
STParser.g, etc. as the basis for the tool's analysis.  As long as I can 
get a valid AST and error messages from the parse, I can handle all of 
the highlighting, etc. variants with no problem.

> Right. but we need a class path or something so that people can specify the directories to look in.
Templates are always related as families (at least in good practice), so 
a path name, relative to a spec'd template root dir should be all that 
is required.

         STGroup#temlatetRoot(URL templateFamilyRootDir)

Best of both worlds: the root is dynamic - yet can be sufficiently 
inferred by the tool to allow static analysis!  And, as long as the user 
specifies interfaces (which are otherwise optional), the existing 
dynamic imports present no problem for static analysis.
> A single file spec is insufficient and we have no place to specify anyway unless you plan on changing the syntax of the group header to specify a file name instead of a simple supergroup name.
>    

Don't you already have a requirement that a supergroup or interface name 
must match the file name+extension?  Won't allowing a relative path 
prefix to the supergroup or interface name in the template be all that 
is required?



From bortuzar at gmail.com  Thu Feb 25 02:28:21 2010
From: bortuzar at gmail.com (Benjamin Ortuzar Seconde)
Date: Thu, 25 Feb 2010 10:28:21 +0000
Subject: [stringtemplate-interest] nested loop
In-Reply-To: <3a0cf5161002250227l7201304i2132dbb0f9f5725a@mail.gmail.com>
References: <3a0cf5161002250227l7201304i2132dbb0f9f5725a@mail.gmail.com>
Message-ID: <3a0cf5161002250228h48267872s66f162e0b65c1365@mail.gmail.com>

Hi Guys,

Im interested in writting something similar to a nested loop using
StringTemplate template engine. In C# have a HashTable of which each Key's
Value contains List of Document objects, each Document has a title and
source. I would like to list at the begining of an email, a summary of the
document titles per source.

h1>Summary</h1><h2>Source A</h2><ul>
  <li>title 1</li>
  <li>title 2</li> </ul><h2>Source B</h2><ul>
  <li>title 3</li>
  <li>title 4</li> </ul>

 What is the best way to accomplish this with StringTemplate? Do you have
any sample code for something like this. thanks,

ben


-- 
Benjamin Ortuzar
bortuzar at gmail.com
Sent from London, Greater London, United Kingdom



-- 
Benjamin Ortuzar
bortuzar at gmail.com
Sent from London, Greater London, United Kingdom
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20100225/b9208044/attachment.html 

From parrt at cs.usfca.edu  Thu Feb 25 10:23:02 2010
From: parrt at cs.usfca.edu (Terence Parr)
Date: Thu, 25 Feb 2010 10:23:02 -0800
Subject: [stringtemplate-interest] nested loop
In-Reply-To: <3a0cf5161002250228h48267872s66f162e0b65c1365@mail.gmail.com>
References: <3a0cf5161002250227l7201304i2132dbb0f9f5725a@mail.gmail.com>
	<3a0cf5161002250228h48267872s66f162e0b65c1365@mail.gmail.com>
Message-ID: <0EEDBE02-3F71-4CAA-B12E-84A7F50D6FEE@cs.usfca.edu>

$yourmap:{docs:{d | $d:doctemplate()$}}$
or something like that. docs is the lists (values of map), d is doc within list.
Ter

