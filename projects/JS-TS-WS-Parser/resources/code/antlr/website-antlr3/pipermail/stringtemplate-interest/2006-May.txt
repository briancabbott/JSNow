From Kunle_Odutola at hotmail.com  Mon May  1 16:22:46 2006
From: Kunle_Odutola at hotmail.com (Kunle Odutola)
Date: Mon May  1 16:05:26 2006
Subject: [stringtemplate-interest] StringTemplate extension ideas
References: <BAY101-DAV14B432EECEB6824CB74BC281B30@phx.gbl><4AE07C86-99B2-4723-805F-A446A00AC451@cs.usfca.edu><BAY101-DAV117036669CA2BFF838580281B00@phx.gbl>
	<96765C61-74AE-4D7A-BE7D-AC33529435F3@cs.usfca.edu>
Message-ID: <BAY101-DAV1259C82BD7F8174664004E81B10@phx.gbl>

Ter,

> > Arrrrrggh!. Now you tell me (just spent a few hours working on
> > same) ;-)
>
> [chuckle] Been in there since 2.2; from release notes:
>
> template arguments can be anonymous templates now or simple strings.
>  From the bug list:
> Template inclusion expressions won't accept a nested template
> as an argument.  I'd like to be able to write <foo(bar={...})>, which
> would mean the same thing as <foo(bar="":{...})>.
> Now you can do <foo(bar={<firstName> <lastName>)>}.

Oh, that. Nevermind, just had a brainfreeze.

Only thing missing is the double eval-context. No pressing use-case for that
as I mentioned.

> > I was going with the context of the template making the foo() call
> > (like
> > caller2.st in my original mesg).
>
> Actually you'd have to bind early to do that somehow...you'd be
> forced to convert to text early; should avoid until toString() is
> called.  The arg={template} is not an evaluation per se, but the
> definition of a template.  Only tostring() can do the eval, which
> will happen only on the $arg$ ref.

Yeah. I was in a passing-a-big-text-block (i.e. long, literal string arg)
frame of mind. Was happy to relax
the usual lazy eval rules.

> > Anyway, an example.
> >
> > $target(t={This is an $innerAttrib$}, innerAttrib=outer.Attrib)$
> >
> > This evaluates 'outer.Attrib' in the caller's context and places it
> > in the
> > target()'s (and the anon-template's) context as 'innerAttrib'.
>
> innerAttrib=Attrib

Not really, "outer" is an attrib itself. Anyway, my point was that I wanted
to avoid having to declare the intermediate "InnerAttrib". But the following
ST idiom resolves that particular concern nicely.....

> can you do t=blort:{b | Hi, $b$} as an argument?  Should be able to.

Yep. Allowing my example to be re-written as:

   $target(t=outer.Attrib:{outerAtrribute | This is an $outerAtrribute$})$


Kunle
From Kunle_Odutola at hotmail.com  Mon May  1 17:25:24 2006
From: Kunle_Odutola at hotmail.com (Kunle Odutola)
Date: Mon May  1 17:08:07 2006
Subject: [stringtemplate-interest] StringTemplate extension ideas
References: <BAY101-DAV14B432EECEB6824CB74BC281B30@phx.gbl><4AE07C86-99B2-4723-805F-A446A00AC451@cs.usfca.edu><BAY101-DAV117036669CA2BFF838580281B00@phx.gbl><96765C61-74AE-4D7A-BE7D-AC33529435F3@cs.usfca.edu>
	<BAY101-DAV1259C82BD7F8174664004E81B10@phx.gbl>
Message-ID: <BAY101-DAV170AEE94F028B72684057E81B60@phx.gbl>

> Yep. Allowing my example to be re-written as:
>
>    $target(t=outer.Attrib:{outerAtrribute | This is an $outerAtrribute$})$

Unfortunately, this doesn't seem to extend to multiple attributes.

$target(t=A, B:{a, b | These are  outer atrribute $a$ and $b$})$


Unit test (currently fails with a parse error):

[Test] public void testApplyingMultipleAttributesToAnonTemplateArgument()
{
    string templates = ""
    + "group test;" + NL
    + "caller(blort, mort) ::= <<$target(item=blort,mort:{b,m |Hi, $b$ and
$m$.})$>>" + NL
    + "target(item) ::= << <b>$item$</b> >>" + NL;

    StringTemplateGroup group = new StringTemplateGroup(new
StringReader(templates));
    StringTemplate caller = group.GetInstanceOf("caller");
    caller.SetAttribute("blort", "Blort");
    caller.SetAttribute("mort", "Mort");
    string expecting = "Hi, Blort and Mort.";
    Assert.AreEqual(expecting, caller.ToString());
}


Kunle
From parrt at cs.usfca.edu  Mon May  1 19:38:25 2006
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon May  1 19:38:28 2006
Subject: [stringtemplate-interest] StringTemplate extension ideas
In-Reply-To: <BAY101-DAV170AEE94F028B72684057E81B60@phx.gbl>
References: <BAY101-DAV14B432EECEB6824CB74BC281B30@phx.gbl><4AE07C86-99B2-4723-805F-A446A00AC451@cs.usfca.edu><BAY101-DAV117036669CA2BFF838580281B00@phx.gbl><96765C61-74AE-4D7A-BE7D-AC33529435F3@cs.usfca.edu>
	<BAY101-DAV1259C82BD7F8174664004E81B10@phx.gbl>
	<BAY101-DAV170AEE94F028B72684057E81B60@phx.gbl>
Message-ID: <9FADA001-038E-4CFC-87C2-5A4006E8CFE1@cs.usfca.edu>


On May 1, 2006, at 5:25 PM, Kunle Odutola wrote:

>> Yep. Allowing my example to be re-written as:
>>
>>    $target(t=outer.Attrib:{outerAtrribute | This is an  
>> $outerAtrribute$})$
>
> Unfortunately, this doesn't seem to extend to multiple attributes.
>
> $target(t=A, B:{a, b | These are  outer atrribute $a$ and $b$})$

Yes, that would be ambiguous syntactically.  Does the ',' after the A  
mean start a new parameter?  Perhaps

$target(t={$A, B:{a, b | These are  outer atrribute $a$ and $b$}$})$

:)

Ter

From Kunle_Odutola at hotmail.com  Mon May  1 23:29:05 2006
From: Kunle_Odutola at hotmail.com (Kunle Odutola)
Date: Mon May  1 23:11:43 2006
Subject: [stringtemplate-interest] StringTemplate extension ideas
References: <BAY101-DAV14B432EECEB6824CB74BC281B30@phx.gbl><4AE07C86-99B2-4723-805F-A446A00AC451@cs.usfca.edu><BAY101-DAV117036669CA2BFF838580281B00@phx.gbl><96765C61-74AE-4D7A-BE7D-AC33529435F3@cs.usfca.edu><BAY101-DAV1259C82BD7F8174664004E81B10@phx.gbl><BAY101-DAV170AEE94F028B72684057E81B60@phx.gbl>
	<9FADA001-038E-4CFC-87C2-5A4006E8CFE1@cs.usfca.edu>
Message-ID: <BAY101-DAV116B98376FE242E7922B7181B60@phx.gbl>

> Perhaps
>
> $target(t={$A, B:{a, b | These are outer atrribute $a$ and $b$}$})$
>
> :)

I'm already using this. It creates an extra ST instance if memory serves but
that's not an issue yet.

Kunle
From galendunkleberger at gmail.com  Fri May  5 06:01:47 2006
From: galendunkleberger at gmail.com (Galen Dunkleberger)
Date: Fri May  5 05:59:34 2006
Subject: [stringtemplate-interest] Conditional statements
In-Reply-To: <BAY101-DAV116B98376FE242E7922B7181B60@phx.gbl>
References: <BAY101-DAV14B432EECEB6824CB74BC281B30@phx.gbl>
	<4AE07C86-99B2-4723-805F-A446A00AC451@cs.usfca.edu>
	<BAY101-DAV117036669CA2BFF838580281B00@phx.gbl>
	<96765C61-74AE-4D7A-BE7D-AC33529435F3@cs.usfca.edu>
	<BAY101-DAV1259C82BD7F8174664004E81B10@phx.gbl>
	<BAY101-DAV170AEE94F028B72684057E81B60@phx.gbl>
	<9FADA001-038E-4CFC-87C2-5A4006E8CFE1@cs.usfca.edu>
	<BAY101-DAV116B98376FE242E7922B7181B60@phx.gbl>
Message-ID: <1146834107.2870.6.camel@solo>

Is it possible to somehow have multiple arguments for a conditional
statement other than using nested ifs. For instance something like... 

			$if(a.x && b.z)$
				show something
			$else$
				show something else
			$endif$

If this is not currently possible could I make a feature request?
				Thanks,
				 Galen

From dmoshal at gmail.com  Fri May  5 07:03:47 2006
From: dmoshal at gmail.com (David Moshal)
Date: Fri May  5 07:03:50 2006
Subject: [stringtemplate-interest] Conditional statements
In-Reply-To: <1146834107.2870.6.camel@solo>
References: <BAY101-DAV14B432EECEB6824CB74BC281B30@phx.gbl>
	<4AE07C86-99B2-4723-805F-A446A00AC451@cs.usfca.edu>
	<BAY101-DAV117036669CA2BFF838580281B00@phx.gbl>
	<96765C61-74AE-4D7A-BE7D-AC33529435F3@cs.usfca.edu>
	<BAY101-DAV1259C82BD7F8174664004E81B10@phx.gbl>
	<BAY101-DAV170AEE94F028B72684057E81B60@phx.gbl>
	<9FADA001-038E-4CFC-87C2-5A4006E8CFE1@cs.usfca.edu>
	<BAY101-DAV116B98376FE242E7922B7181B60@phx.gbl>
	<1146834107.2870.6.camel@solo>
Message-ID: <537739b70605050703x50b7b182jf459bfc78ec40b6b@mail.gmail.com>

Galen,

I second that feature request, or alternatively, if that feature is
supported, if
someone could shed a bit more light on the subject of ST's evaluation
capabilities that would be appreciated. I find that I'm currently creating
many more temporary objects in my java code, in order to provide ST with
simple conditionals, than I suspect are needed.

Additionally, is there a way to find the current count of a collection,
ie, if one has the following code:

$items:{

    can one get the current iteration number here?
    can one change the current iteration to be 1-based rather than
zero-based?
}



Dave


On 5/5/06, Galen Dunkleberger <galendunkleberger@gmail.com> wrote:
>
> Is it possible to somehow have multiple arguments for a conditional
> statement other than using nested ifs. For instance something like...
>
>                         $if(a.x && b.z)$
>                                 show something
>                         $else$
>                                 show something else
>                         $endif$
>
> If this is not currently possible could I make a feature request?
>                                 Thanks,
>                                  Galen
>
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest@antlr.org
> http://www.antlr.org:8080/mailman/listinfo/stringtemplate-interest
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org:8080/pipermail/stringtemplate-interest/attachments/20060505/b5664afb/attachment.html
From glw at iosemantics.com  Fri May  5 07:09:47 2006
From: glw at iosemantics.com (Glenn Williams)
Date: Fri May  5 07:09:52 2006
Subject: [stringtemplate-interest] Output error?
Message-ID: <001901c6704d$91206590$0300a8c0@GLENNHOME>

The following code from the String Template Documentation page is returning "<type> <name>" when it should be returning "int foo".  If I load this from a single file the output is "vardef(type,name) ::= <type> <name>;". What am I doing wrong?

/// template
group simple;

vardef(type,name) ::= "<type> <name>;"

method(type,name,args) ::= <<
<type> <name>(<args; separator=",">) {
  <statements; separator="\n">
}
>>


/// code  

StringTemplateGroup groupf;
  try
  {
   groupf = new StringTemplateGroup( new FileReader(
     "simple.st" ) );
   StringTemplate t = groupf.getInstanceOf( "vardef" );
   t.setAttribute( "type", "int" );
   t.setAttribute( "name", "foo" );
   System.out.println( t );
  }
  catch ( FileNotFoundException e )
  {
   e.printStackTrace();
  }
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org:8080/pipermail/stringtemplate-interest/attachments/20060505/e9b2c4b0/attachment.html
From galendunkleberger at gmail.com  Fri May  5 07:29:18 2006
From: galendunkleberger at gmail.com (Galen Dunkleberger)
Date: Fri May  5 07:27:05 2006
Subject: [stringtemplate-interest] Conditional statements
In-Reply-To: <537739b70605050703x50b7b182jf459bfc78ec40b6b@mail.gmail.com>
References: <BAY101-DAV14B432EECEB6824CB74BC281B30@phx.gbl>
	<4AE07C86-99B2-4723-805F-A446A00AC451@cs.usfca.edu>
	<BAY101-DAV117036669CA2BFF838580281B00@phx.gbl>
	<96765C61-74AE-4D7A-BE7D-AC33529435F3@cs.usfca.edu>
	<BAY101-DAV1259C82BD7F8174664004E81B10@phx.gbl>
	<BAY101-DAV170AEE94F028B72684057E81B60@phx.gbl>
	<9FADA001-038E-4CFC-87C2-5A4006E8CFE1@cs.usfca.edu>
	<BAY101-DAV116B98376FE242E7922B7181B60@phx.gbl>
	<1146834107.2870.6.camel@solo>
	<537739b70605050703x50b7b182jf459bfc78ec40b6b@mail.gmail.com>
Message-ID: <1146839358.2870.8.camel@solo>

You can get the 1 based iteration number by calling $i$

On Fri, 2006-05-05 at 07:03 -0700, David Moshal wrote:
> Galen,
> 
> I second that feature request, or alternatively, if that feature is
> supported, if 
> someone could shed a bit more light on the subject of ST's evaluation
> capabilities that would be appreciated. I find that I'm currently
> creating 
> many more temporary objects in my java code, in order to provide ST
> with
> simple conditionals, than I suspect are needed.
> 
> Additionally, is there a way to find the current count of a
> collection,
> ie, if one has the following code: 
> 
> $items:{
>   
>     can one get the current iteration number here?
>     can one change the current iteration to be 1-based rather than
> zero-based?
> }
> 
> 
> 
> Dave
> 
> 
> On 5/5/06, Galen Dunkleberger <galendunkleberger@gmail.com> wrote:
>         Is it possible to somehow have multiple arguments for a
>         conditional
>         statement other than using nested ifs. For instance something
>         like...
>         
>                                 $if(a.x && b.z)$
>                                         show something 
>                                 $else$
>                                         show something else
>                                 $endif$
>         
>         If this is not currently possible could I make a feature
>         request?
>                                         Thanks, 
>                                          Galen
>         
>         _______________________________________________
>         stringtemplate-interest mailing list
>         stringtemplate-interest@antlr.org
>         http://www.antlr.org:8080/mailman/listinfo/stringtemplate-interest
> 
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest@antlr.org
> http://www.antlr.org:8080/mailman/listinfo/stringtemplate-interest

From dmoshal at gmail.com  Fri May  5 07:39:19 2006
From: dmoshal at gmail.com (David Moshal)
Date: Fri May  5 07:39:21 2006
Subject: [stringtemplate-interest] Conditional statements
In-Reply-To: <1146839358.2870.8.camel@solo>
References: <BAY101-DAV14B432EECEB6824CB74BC281B30@phx.gbl>
	<BAY101-DAV117036669CA2BFF838580281B00@phx.gbl>
	<96765C61-74AE-4D7A-BE7D-AC33529435F3@cs.usfca.edu>
	<BAY101-DAV1259C82BD7F8174664004E81B10@phx.gbl>
	<BAY101-DAV170AEE94F028B72684057E81B60@phx.gbl>
	<9FADA001-038E-4CFC-87C2-5A4006E8CFE1@cs.usfca.edu>
	<BAY101-DAV116B98376FE242E7922B7181B60@phx.gbl>
	<1146834107.2870.6.camel@solo>
	<537739b70605050703x50b7b182jf459bfc78ec40b6b@mail.gmail.com>
	<1146839358.2870.8.camel@solo>
Message-ID: <537739b70605050739v604e98a4lb117868d43928a64@mail.gmail.com>

thanks - I'll try that
dave


On 5/5/06, Galen Dunkleberger <galendunkleberger@gmail.com> wrote:
>
> You can get the 1 based iteration number by calling $i$
>
> On Fri, 2006-05-05 at 07:03 -0700, David Moshal wrote:
> > Galen,
> >
> > I second that feature request, or alternatively, if that feature is
> > supported, if
> > someone could shed a bit more light on the subject of ST's evaluation
> > capabilities that would be appreciated. I find that I'm currently
> > creating
> > many more temporary objects in my java code, in order to provide ST
> > with
> > simple conditionals, than I suspect are needed.
> >
> > Additionally, is there a way to find the current count of a
> > collection,
> > ie, if one has the following code:
> >
> > $items:{
> >
> >     can one get the current iteration number here?
> >     can one change the current iteration to be 1-based rather than
> > zero-based?
> > }
> >
> >
> >
> > Dave
> >
> >
> > On 5/5/06, Galen Dunkleberger <galendunkleberger@gmail.com> wrote:
> >         Is it possible to somehow have multiple arguments for a
> >         conditional
> >         statement other than using nested ifs. For instance something
> >         like...
> >
> >                                 $if(a.x && b.z)$
> >                                         show something
> >                                 $else$
> >                                         show something else
> >                                 $endif$
> >
> >         If this is not currently possible could I make a feature
> >         request?
> >                                         Thanks,
> >                                          Galen
> >
> >         _______________________________________________
> >         stringtemplate-interest mailing list
> >         stringtemplate-interest@antlr.org
> >
> http://www.antlr.org:8080/mailman/listinfo/stringtemplate-interest
> >
> > _______________________________________________
> > stringtemplate-interest mailing list
> > stringtemplate-interest@antlr.org
> > http://www.antlr.org:8080/mailman/listinfo/stringtemplate-interest
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org:8080/pipermail/stringtemplate-interest/attachments/20060505/36c88daa/attachment.html
From open.zone at virgin.net  Fri May  5 08:03:48 2006
From: open.zone at virgin.net (Micheal J)
Date: Fri May  5 07:46:22 2006
Subject: [stringtemplate-interest] Output error?
In-Reply-To: <001901c6704d$91206590$0300a8c0@GLENNHOME>
Message-ID: <002501c67055$1e13c120$6502a8c0@hercules>

Ensure you're using the right lexer. You want the AngleBracketTemplateLexer.
Try setting it explicitly.

-----Original Message-----
From: stringtemplate-interest-bounces@antlr.org
[mailto:stringtemplate-interest-bounces@antlr.org] On Behalf Of Glenn
Williams
Sent: 05 May 2006 15:10
To: stringtemplate-interest@antlr.org
Subject: [stringtemplate-interest] Output error?


The following code from the String Template Documentation page is returning
"<type> <name>" when it should be returning "int foo".  If I load this from
a single file the output is "vardef(type,name) ::= <type> <name>;". What am
I doing wrong?
 
/// template
group simple;
 
vardef(type,name) ::= "<type> <name>;"
 
method(type,name,args) ::= <<
<type> <name>(<args; separator=",">) {
  <statements; separator="\n">
}
>>

 
/// code  
 
StringTemplateGroup groupf;
  try
  {
   groupf = new StringTemplateGroup( new FileReader(
     "simple.st" ) );
   StringTemplate t = groupf.getInstanceOf( "vardef" );
   t.setAttribute( "type", "int" );
   t.setAttribute( "name", "foo" );
   System.out.println( t );
  }
  catch ( FileNotFoundException e )
  {
   e.printStackTrace();
  }


-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org:8080/pipermail/stringtemplate-interest/attachments/20060505/d6be5576/attachment-0001.html
From glw at iosemantics.com  Fri May  5 08:01:45 2006
From: glw at iosemantics.com (Glenn Williams)
Date: Fri May  5 08:01:49 2006
Subject: [stringtemplate-interest] Output error?
References: <002501c67055$1e13c120$6502a8c0@hercules>
Message-ID: <005701c67054$d37594e0$0300a8c0@GLENNHOME>

MessageThanks. That did it.
  ----- Original Message ----- 
  From: Micheal J 
  To: stringtemplate-interest@antlr.org 
  Sent: Friday, May 05, 2006 9:03 AM
  Subject: RE: [stringtemplate-interest] Output error?


  Ensure you're using the right lexer. You want the AngleBracketTemplateLexer. Try setting it explicitly.
    -----Original Message-----
    From: stringtemplate-interest-bounces@antlr.org [mailto:stringtemplate-interest-bounces@antlr.org] On Behalf Of Glenn Williams
    Sent: 05 May 2006 15:10
    To: stringtemplate-interest@antlr.org
    Subject: [stringtemplate-interest] Output error?


    The following code from the String Template Documentation page is returning "<type> <name>" when it should be returning "int foo".  If I load this from a single file the output is "vardef(type,name) ::= <type> <name>;". What am I doing wrong?

    /// template
    group simple;

    vardef(type,name) ::= "<type> <name>;"

    method(type,name,args) ::= <<
    <type> <name>(<args; separator=",">) {
      <statements; separator="\n">
    }
    >>


    /// code  

    StringTemplateGroup groupf;
      try
      {
       groupf = new StringTemplateGroup( new FileReader(
         "simple.st" ) );
       StringTemplate t = groupf.getInstanceOf( "vardef" );
       t.setAttribute( "type", "int" );
       t.setAttribute( "name", "foo" );
       System.out.println( t );
      }
      catch ( FileNotFoundException e )
      {
       e.printStackTrace();
      }



------------------------------------------------------------------------------


  _______________________________________________
  stringtemplate-interest mailing list
  stringtemplate-interest@antlr.org
  http://www.antlr.org:8080/mailman/listinfo/stringtemplate-interest
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org:8080/pipermail/stringtemplate-interest/attachments/20060505/a26a12d2/attachment.html
From parrt at cs.usfca.edu  Fri May  5 15:05:24 2006
From: parrt at cs.usfca.edu (Terence Parr)
Date: Fri May  5 15:05:28 2006
Subject: [stringtemplate-interest] Conditional statements
In-Reply-To: <1146834107.2870.6.camel@solo>
References: <BAY101-DAV14B432EECEB6824CB74BC281B30@phx.gbl>
	<4AE07C86-99B2-4723-805F-A446A00AC451@cs.usfca.edu>
	<BAY101-DAV117036669CA2BFF838580281B00@phx.gbl>
	<96765C61-74AE-4D7A-BE7D-AC33529435F3@cs.usfca.edu>
	<BAY101-DAV1259C82BD7F8174664004E81B10@phx.gbl>
	<BAY101-DAV170AEE94F028B72684057E81B60@phx.gbl>
	<9FADA001-038E-4CFC-87C2-5A4006E8CFE1@cs.usfca.edu>
	<BAY101-DAV116B98376FE242E7922B7181B60@phx.gbl>
	<1146834107.2870.6.camel@solo>
Message-ID: <646E41F9-BA8F-4F8F-8302-864260A3A628@cs.usfca.edu>


On May 5, 2006, at 6:01 AM, Galen Dunkleberger wrote:

> Is it possible to somehow have multiple arguments for a conditional
> statement other than using nested ifs. For instance something like...
>
> 			$if(a.x && b.z)$
> 				show something
> 			$else$
> 				show something else
> 			$endif$
>
> If this is not currently possible could I make a feature request?

I've thought about it as it's the same as a nested IF statement right?

Ter

From parrt at cs.usfca.edu  Fri May  5 15:06:15 2006
From: parrt at cs.usfca.edu (Terence Parr)
Date: Fri May  5 15:06:18 2006
Subject: [stringtemplate-interest] Conditional statements
In-Reply-To: <1146839358.2870.8.camel@solo>
References: <BAY101-DAV14B432EECEB6824CB74BC281B30@phx.gbl>
	<4AE07C86-99B2-4723-805F-A446A00AC451@cs.usfca.edu>
	<BAY101-DAV117036669CA2BFF838580281B00@phx.gbl>
	<96765C61-74AE-4D7A-BE7D-AC33529435F3@cs.usfca.edu>
	<BAY101-DAV1259C82BD7F8174664004E81B10@phx.gbl>
	<BAY101-DAV170AEE94F028B72684057E81B60@phx.gbl>
	<9FADA001-038E-4CFC-87C2-5A4006E8CFE1@cs.usfca.edu>
	<BAY101-DAV116B98376FE242E7922B7181B60@phx.gbl>
	<1146834107.2870.6.camel@solo>
	<537739b70605050703x50b7b182jf459bfc78ec40b6b@mail.gmail.com>
	<1146839358.2870.8.camel@solo>
Message-ID: <407F0A70-13E2-4CEB-8F56-133AAA49F1E5@cs.usfca.edu>


On May 5, 2006, at 7:29 AM, Galen Dunkleberger wrote:

> You can get the 1 based iteration number by calling $i$

I've got i0 in next version for 0-based iteration.
Ter

From glw at iosemantics.com  Fri May  5 17:48:36 2006
From: glw at iosemantics.com (Glenn Williams)
Date: Fri May  5 17:48:41 2006
Subject: [stringtemplate-interest] Attribute iteration
References: <BAY101-DAV14B432EECEB6824CB74BC281B30@phx.gbl><4AE07C86-99B2-4723-805F-A446A00AC451@cs.usfca.edu><BAY101-DAV117036669CA2BFF838580281B00@phx.gbl><96765C61-74AE-4D7A-BE7D-AC33529435F3@cs.usfca.edu><BAY101-DAV1259C82BD7F8174664004E81B10@phx.gbl><BAY101-DAV170AEE94F028B72684057E81B60@phx.gbl><9FADA001-038E-4CFC-87C2-5A4006E8CFE1@cs.usfca.edu><BAY101-DAV116B98376FE242E7922B7181B60@phx.gbl><1146834107.2870.6.camel@solo><537739b70605050703x50b7b182jf459bfc78ec40b6b@mail.gmail.com>
	<1146839358.2870.8.camel@solo>
Message-ID: <004001c670a6$cf10bae0$0300a8c0@GLENNHOME>

I would like to iterate through the attributes in a template putting a comma 
after every attribute except for the last one. In that case I want to put a 
period. I've tried the first/rest/last interface but the last attribute is 
returned with the rest of that attributes from the "rest" call. Is there 
another approach? 

From parrt at cs.usfca.edu  Fri May  5 18:06:38 2006
From: parrt at cs.usfca.edu (Terence Parr)
Date: Fri May  5 18:06:41 2006
Subject: [stringtemplate-interest] Attribute iteration
In-Reply-To: <004001c670a6$cf10bae0$0300a8c0@GLENNHOME>
References: <BAY101-DAV14B432EECEB6824CB74BC281B30@phx.gbl><4AE07C86-99B2-4723-805F-A446A00AC451@cs.usfca.edu><BAY101-DAV117036669CA2BFF838580281B00@phx.gbl><96765C61-74AE-4D7A-BE7D-AC33529435F3@cs.usfca.edu><BAY101-DAV1259C82BD7F8174664004E81B10@phx.gbl><BAY101-DAV170AEE94F028B72684057E81B60@phx.gbl><9FADA001-038E-4CFC-87C2-5A4006E8CFE1@cs.usfca.edu><BAY101-DAV116B98376FE242E7922B7181B60@phx.gbl><1146834107.2870.6.camel@solo><537739b70605050703x50b7b182jf459bfc78ec40b6b@mail.gmail.com>
	<1146839358.2870.8.camel@solo>
	<004001c670a6$cf10bae0$0300a8c0@GLENNHOME>
Message-ID: <C151896B-E405-4FFC-93B6-E6912CD61CC8@cs.usfca.edu>


On May 5, 2006, at 5:48 PM, Glenn Williams wrote:

> I would like to iterate through the attributes in a template  
> putting a comma after every attribute except for the last one. In  
> that case I want to put a period. I've tried the first/rest/last  
> interface but the last attribute is returned with the rest of that  
> attributes from the "rest" call. Is there another approach?

Try

<names; separator=",">.

:)

Ter
From galendunkleberger at gmail.com  Fri May  5 18:46:01 2006
From: galendunkleberger at gmail.com (Galen Dunkleberger)
Date: Fri May  5 18:43:45 2006
Subject: [stringtemplate-interest] Conditional statements
In-Reply-To: <646E41F9-BA8F-4F8F-8302-864260A3A628@cs.usfca.edu>
References: <BAY101-DAV14B432EECEB6824CB74BC281B30@phx.gbl>
	<4AE07C86-99B2-4723-805F-A446A00AC451@cs.usfca.edu>
	<BAY101-DAV117036669CA2BFF838580281B00@phx.gbl>
	<96765C61-74AE-4D7A-BE7D-AC33529435F3@cs.usfca.edu>
	<BAY101-DAV1259C82BD7F8174664004E81B10@phx.gbl>
	<BAY101-DAV170AEE94F028B72684057E81B60@phx.gbl>
	<9FADA001-038E-4CFC-87C2-5A4006E8CFE1@cs.usfca.edu>
	<BAY101-DAV116B98376FE242E7922B7181B60@phx.gbl>
	<1146834107.2870.6.camel@solo>
	<646E41F9-BA8F-4F8F-8302-864260A3A628@cs.usfca.edu>
Message-ID: <1146879961.2660.12.camel@solo>

Well yes and no...let say for example i have two conditions that need to
be met to display something. If either condition fails i want to display
something else (the same something else).  With nested ifs i have to
have that "same something else" twice. So...
		
	$if(a.x)$
		$if(b.y)$
			display blah 1
		$else$
			display blah 2
		$endif$
	$else$
		display blah 2
	$endif$  

as opposed to

	$if(a.x && b.y)
		display blah 1
	$else$
		display blah 2
	$endif$


This can start to make a template rather complex if there are 'N'
multiple conditions that need to be met in order to "display blah 1".
Now I realize complicated conditional code should be wrapped in the
object in some simple shouldIDisplayBlah1() method. However I'm getting
into situations where there are conditions that need to be met between
multiple objects (which don't know anything about each other)....so i
could A) create a third wrapper object to process the conditional state
of the various object or B) work with nested ifs. However it's my
opinion that by allowing multiple conditions for an if statement you
simplify the template...and what I like about string template is it's
simplicity.
			My two cents,
				Galen



On Fri, 2006-05-05 at 15:05 -0700, Terence Parr wrote:
> On May 5, 2006, at 6:01 AM, Galen Dunkleberger wrote:
> 
> > Is it possible to somehow have multiple arguments for a conditional
> > statement other than using nested ifs. For instance something like...
> >
> > 			$if(a.x && b.z)$
> > 				show something
> > 			$else$
> > 				show something else
> > 			$endif$
> >
> > If this is not currently possible could I make a feature request?
> 
> I've thought about it as it's the same as a nested IF statement right?
> 
> Ter
> 
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest@antlr.org
> http://www.antlr.org:8080/mailman/listinfo/stringtemplate-interest

From kroepke at dolphin-services.de  Sat May  6 09:59:39 2006
From: kroepke at dolphin-services.de (Kay Roepke)
Date: Sat May  6 09:59:45 2006
Subject: [stringtemplate-interest] Conditional statements
In-Reply-To: <1146879961.2660.12.camel@solo>
References: <BAY101-DAV14B432EECEB6824CB74BC281B30@phx.gbl>
	<4AE07C86-99B2-4723-805F-A446A00AC451@cs.usfca.edu>
	<BAY101-DAV117036669CA2BFF838580281B00@phx.gbl>
	<96765C61-74AE-4D7A-BE7D-AC33529435F3@cs.usfca.edu>
	<BAY101-DAV1259C82BD7F8174664004E81B10@phx.gbl>
	<BAY101-DAV170AEE94F028B72684057E81B60@phx.gbl>
	<9FADA001-038E-4CFC-87C2-5A4006E8CFE1@cs.usfca.edu>
	<BAY101-DAV116B98376FE242E7922B7181B60@phx.gbl>
	<1146834107.2870.6.camel@solo>
	<646E41F9-BA8F-4F8F-8302-864260A3A628@cs.usfca.edu>
	<1146879961.2660.12.camel@solo>
Message-ID: <CDE15697-1184-4F8E-9C1A-CD1E17111C12@dolphin-services.de>


On 6. May 2006, at 3:46 Uhr, Galen Dunkleberger wrote:

> However it's my
> opinion that by allowing multiple conditions for an if statement you
> simplify the template...and what I like about string template is it's
> simplicity.

While I can understand your request and do support it (sorta ;)), I  
think
it should be well considered to add expressions, even if they are "just"
boolean. It might awake those sleeping wishes for full fledged  
arithmetics
and such beasts (aka The Bad Thing(tm)).

As a workaround you can always provide template variables which have the
value of those boolean expressions if that would make your life that  
much easier.
After all the controller is allowed to know about the logic of the  
view. It still
wouldn't compromise the MVC pattern of ST, as long as there isn't any  
actual text in
the controller.

This is the way I handle things at work (where we have a template  
system quite similar to
ST) and that works pretty well. Having boolean expressions naturally  
simplifies things when
the requirements change, but it would require some work in the  
grammar (which may or may not
be easy/quick to do, I don't know for sure).

My ?0.02

-k
From dmoshal at gmail.com  Sat May  6 12:51:32 2006
From: dmoshal at gmail.com (David Moshal)
Date: Sat May  6 12:51:35 2006
Subject: [stringtemplate-interest] Conditional statements
In-Reply-To: <CDE15697-1184-4F8E-9C1A-CD1E17111C12@dolphin-services.de>
References: <BAY101-DAV14B432EECEB6824CB74BC281B30@phx.gbl>
	<96765C61-74AE-4D7A-BE7D-AC33529435F3@cs.usfca.edu>
	<BAY101-DAV1259C82BD7F8174664004E81B10@phx.gbl>
	<BAY101-DAV170AEE94F028B72684057E81B60@phx.gbl>
	<9FADA001-038E-4CFC-87C2-5A4006E8CFE1@cs.usfca.edu>
	<BAY101-DAV116B98376FE242E7922B7181B60@phx.gbl>
	<1146834107.2870.6.camel@solo>
	<646E41F9-BA8F-4F8F-8302-864260A3A628@cs.usfca.edu>
	<1146879961.2660.12.camel@solo>
	<CDE15697-1184-4F8E-9C1A-CD1E17111C12@dolphin-services.de>
Message-ID: <537739b70605061251p9d59929ifd374a48c30c0079@mail.gmail.com>

I have to admit that I wouldn't mind expression and logic evaluation
capabilities in the view (template),
seems to me that this ought to be possible without risking the view:
- changing the model, or
- becoming a controller.

My problem with the current system is that if one is passing in a collection
of objects,
the lack of logic or expression evaluation in the view requires one to
either:
1. create custom view objects from the model (which reduces performance), or
2. alter the model, so that these objects fit the view (which breaks MVC
separation)

I've always thought that extreme MVC separation isn't the goal, but rather
that each element of the
M,V and C, should contain elements of all three, with particular emphasis on
one.

Indeed, this is currently the case with ST, which supports $if$ anyway (a
'C').
And the template itself is persistent, so it is a Model for the View.

My ZAR 0.02.

Dave



On 5/6/06, Kay Roepke <kroepke@dolphin-services.de> wrote:
>
>
> On 6. May 2006, at 3:46 Uhr, Galen Dunkleberger wrote:
>
> > However it's my
> > opinion that by allowing multiple conditions for an if statement you
> > simplify the template...and what I like about string template is it's
> > simplicity.
>
> While I can understand your request and do support it (sorta ;)), I
> think
> it should be well considered to add expressions, even if they are "just"
> boolean. It might awake those sleeping wishes for full fledged
> arithmetics
> and such beasts (aka The Bad Thing(tm)).
>
> As a workaround you can always provide template variables which have the
> value of those boolean expressions if that would make your life that
> much easier.
> After all the controller is allowed to know about the logic of the
> view. It still
> wouldn't compromise the MVC pattern of ST, as long as there isn't any
> actual text in
> the controller.
>
> This is the way I handle things at work (where we have a template
> system quite similar to
> ST) and that works pretty well. Having boolean expressions naturally
> simplifies things when
> the requirements change, but it would require some work in the
> grammar (which may or may not
> be easy/quick to do, I don't know for sure).
>
> My ?0.02
>
> -k_______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest@antlr.org
> http://www.antlr.org:8080/mailman/listinfo/stringtemplate-interest
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org:8080/pipermail/stringtemplate-interest/attachments/20060506/7ad5e941/attachment.html
From kroepke at dolphin-services.de  Sat May  6 12:58:43 2006
From: kroepke at dolphin-services.de (Kay Roepke)
Date: Sat May  6 12:58:48 2006
Subject: [stringtemplate-interest] Conditional statements
In-Reply-To: <537739b70605061251p9d59929ifd374a48c30c0079@mail.gmail.com>
References: <BAY101-DAV14B432EECEB6824CB74BC281B30@phx.gbl>
	<96765C61-74AE-4D7A-BE7D-AC33529435F3@cs.usfca.edu>
	<BAY101-DAV1259C82BD7F8174664004E81B10@phx.gbl>
	<BAY101-DAV170AEE94F028B72684057E81B60@phx.gbl>
	<9FADA001-038E-4CFC-87C2-5A4006E8CFE1@cs.usfca.edu>
	<BAY101-DAV116B98376FE242E7922B7181B60@phx.gbl>
	<1146834107.2870.6.camel@solo>
	<646E41F9-BA8F-4F8F-8302-864260A3A628@cs.usfca.edu>
	<1146879961.2660.12.camel@solo>
	<CDE15697-1184-4F8E-9C1A-CD1E17111C12@dolphin-services.de>
	<537739b70605061251p9d59929ifd374a48c30c0079@mail.gmail.com>
Message-ID: <9A37D263-8BD5-4E3A-97D0-CD06C1CE5ED1@dolphin-services.de>


On 6. May 2006, at 21:51 Uhr, David Moshal wrote:

> I've always thought that extreme MVC separation isn't the goal, but  
> rather
> that each element of the
> M,V and C, should contain elements of all three, with particular  
> emphasis on
> one.

I don't think so either, at least that was the impression I got from  
Ter's postings.
But the problem currently is to get expression handling into ST,  
mainly because of time issues,
even if it is "only" boolean expressions. (And at that it should  
stop, too, IMHO).

> Indeed, this is currently the case with ST, which supports $if$  
> anyway (a
> 'C').
> And the template itself is persistent, so it is a Model for the View.

Yeah, that happens to me all the time, too ;) Seeing MVC everwhere.  
It starts to get creepy once you
see colleagues that way...

> My ZAR 0.02.

:)

-k


From dmoshal at gmail.com  Sat May  6 13:15:02 2006
From: dmoshal at gmail.com (David Moshal)
Date: Sat May  6 13:15:04 2006
Subject: [stringtemplate-interest] Conditional statements
In-Reply-To: <9A37D263-8BD5-4E3A-97D0-CD06C1CE5ED1@dolphin-services.de>
References: <BAY101-DAV14B432EECEB6824CB74BC281B30@phx.gbl>
	<BAY101-DAV170AEE94F028B72684057E81B60@phx.gbl>
	<9FADA001-038E-4CFC-87C2-5A4006E8CFE1@cs.usfca.edu>
	<BAY101-DAV116B98376FE242E7922B7181B60@phx.gbl>
	<1146834107.2870.6.camel@solo>
	<646E41F9-BA8F-4F8F-8302-864260A3A628@cs.usfca.edu>
	<1146879961.2660.12.camel@solo>
	<CDE15697-1184-4F8E-9C1A-CD1E17111C12@dolphin-services.de>
	<537739b70605061251p9d59929ifd374a48c30c0079@mail.gmail.com>
	<9A37D263-8BD5-4E3A-97D0-CD06C1CE5ED1@dolphin-services.de>
Message-ID: <537739b70605061315h3447b783n44c6b2d1e21eed1a@mail.gmail.com>

Kay - let me play Devil's advocate here a bit.

Take the issue of Formatting of dates and numbers. This is a case of
applying
an expression to the model, to create a particular view of the data.

With ST currently if one wants to create, a table by iterating through a
collection of objects,
in which the cells need to be formatted in a particular way, those objects
need to provide the formatted
'view' of the model, so either one creates custom objects in the controller,
applying the formatting rules
to the model, or one alters the model object, so that it knows how to format
it's data for the view.

So, in the case of formatting, wouldn't it be helpful if the template had
some
evaluative capabilities that go beyond boolean evaluation??

Dave



On 5/6/06, Kay Roepke <kroepke@dolphin-services.de> wrote:
>
>
> On 6. May 2006, at 21:51 Uhr, David Moshal wrote:
>
> > I've always thought that extreme MVC separation isn't the goal, but
> > rather
> > that each element of the
> > M,V and C, should contain elements of all three, with particular
> > emphasis on
> > one.
>
> I don't think so either, at least that was the impression I got from
> Ter's postings.
> But the problem currently is to get expression handling into ST,
> mainly because of time issues,
> even if it is "only" boolean expressions. (And at that it should
> stop, too, IMHO).
>
> > Indeed, this is currently the case with ST, which supports $if$
> > anyway (a
> > 'C').
> > And the template itself is persistent, so it is a Model for the View.
>
> Yeah, that happens to me all the time, too ;) Seeing MVC everwhere.
> It starts to get creepy once you
> see colleagues that way...
>
> > My ZAR 0.02.
>
> :)
>
> -k
>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org:8080/pipermail/stringtemplate-interest/attachments/20060506/ef40d6e9/attachment.html
From kroepke at dolphin-services.de  Sat May  6 13:46:49 2006
From: kroepke at dolphin-services.de (Kay Roepke)
Date: Sat May  6 13:46:54 2006
Subject: [stringtemplate-interest] Conditional statements
In-Reply-To: <537739b70605061315h3447b783n44c6b2d1e21eed1a@mail.gmail.com>
References: <BAY101-DAV14B432EECEB6824CB74BC281B30@phx.gbl>
	<BAY101-DAV170AEE94F028B72684057E81B60@phx.gbl>
	<9FADA001-038E-4CFC-87C2-5A4006E8CFE1@cs.usfca.edu>
	<BAY101-DAV116B98376FE242E7922B7181B60@phx.gbl>
	<1146834107.2870.6.camel@solo>
	<646E41F9-BA8F-4F8F-8302-864260A3A628@cs.usfca.edu>
	<1146879961.2660.12.camel@solo>
	<CDE15697-1184-4F8E-9C1A-CD1E17111C12@dolphin-services.de>
	<537739b70605061251p9d59929ifd374a48c30c0079@mail.gmail.com>
	<9A37D263-8BD5-4E3A-97D0-CD06C1CE5ED1@dolphin-services.de>
	<537739b70605061315h3447b783n44c6b2d1e21eed1a@mail.gmail.com>
Message-ID: <90341FF3-68B3-4A98-8D20-2FE2EF5DC66B@dolphin-services.de>


On 6. May 2006, at 22:15 Uhr, David Moshal wrote:

> Take the issue of Formatting of dates and numbers. This is a case of
> applying
> an expression to the model, to create a particular view of the data.

Yes. I agree with that.

> With ST currently if one wants to create, a table by iterating  
> through a
> collection of objects,
> in which the cells need to be formatted in a particular way, those  
> objects
> need to provide the formatted
> 'view' of the model, so either one creates custom objects in the  
> controller,
> applying the formatting rules
> to the model, or one alters the model object, so that it knows how  
> to format
> it's data for the view.

When you want to separate the view and the model from each other,  
this is exactly the thing
you'd want the controller to do. (To that part I was agreeing above.)
In my experience you could do one of two things:
1) Push the pre-formatted objects/data into the view/template or
2) Pull the formatting from the model via the controller by way of  
directions you put
	in the template (in effect like method calls)

I have done both things in projects. Both have their advantages as  
well as disadvantages.
I don't know whether you are aware if this paper[1] which Ter wrote.  
He talks a bit about the
problems (2) poses to the MVC paradigm (section 7.1). Although you  
could still decouple your model from the
view in such a scenario in invariably means that you complicate you  
controller. You will have
a formatting layer into which you call from the template that  
automagically handles the data
formatting for you. You could even do that lazily and wouldn't even  
take a big performance hit.
Ter als wrote a paper[2] recently in which he talks about the  
challenges of i18n in templates.
That might help you to decide how to proceed, too.

> So, in the case of formatting, wouldn't it be helpful if the  
> template had
> some
> evaluative capabilities that go beyond boolean evaluation??

Although I'm often tempted to do something like that, too, I would  
disagree in this case.
Having a formatting layer really only makes sense, if it tightly  
integrated into the template
system. Which in turn would put the user of ST in a position of  
either using that, or push all
data into the template anyway (a proof is in [1] section 7.1, too).
When and if you have such a formatting layer, your life is good. If  
you don't, it ain't.
I'm currently using approach (1) at work and other projects (ANTLR  
for one thing), too and
can live with it. But (2) really puts a lot of the controller into  
the template, which may or
may not be a Good Thing. That really depends on the assumptions you  
can make about the environment
you work in.
For ST, I think we shouldn't make to strong assumptions. Boolean  
expression, yes. More than that, no.
IMHO.

Ter?

-k

[1] http://www.cs.usfca.edu/~parrt/papers/mvc.templates.pdf
[2] http://www.cs.usfca.edu/~parrt/papers/i18n.pdf
From kroepke at dolphin-services.de  Sat May  6 13:55:45 2006
From: kroepke at dolphin-services.de (Kay Roepke)
Date: Sat May  6 13:55:49 2006
Subject: [stringtemplate-interest] Conditional statements
In-Reply-To: <90341FF3-68B3-4A98-8D20-2FE2EF5DC66B@dolphin-services.de>
References: <BAY101-DAV14B432EECEB6824CB74BC281B30@phx.gbl>
	<BAY101-DAV170AEE94F028B72684057E81B60@phx.gbl>
	<9FADA001-038E-4CFC-87C2-5A4006E8CFE1@cs.usfca.edu>
	<BAY101-DAV116B98376FE242E7922B7181B60@phx.gbl>
	<1146834107.2870.6.camel@solo>
	<646E41F9-BA8F-4F8F-8302-864260A3A628@cs.usfca.edu>
	<1146879961.2660.12.camel@solo>
	<CDE15697-1184-4F8E-9C1A-CD1E17111C12@dolphin-services.de>
	<537739b70605061251p9d59929ifd374a48c30c0079@mail.gmail.com>
	<9A37D263-8BD5-4E3A-97D0-CD06C1CE5ED1@dolphin-services.de>
	<537739b70605061315h3447b783n44c6b2d1e21eed1a@mail.gmail.com>
	<90341FF3-68B3-4A98-8D20-2FE2EF5DC66B@dolphin-services.de>
Message-ID: <F5D7428C-53D6-4A7B-AF4C-259D90B17AB3@dolphin-services.de>


On 6. May 2006, at 22:46 Uhr, Kay Roepke wrote:

> But (2) really puts a lot of the controller into the template,  
> which may or
> may not be a Good Thing. That really depends on the assumptions you  
> can make about the environment
> you work in.

Sorry to follow up on myself, but I remembered one thing I wanted to  
add.

The separation of controller and view is a delicate thing. In one  
case it looks like the controller is getting
too much of the view responsibilities and in the other it seems the  
other way round.
I guess it really depends on which application you have in mind.
Generating HTML files or source code (like ANTLR v3 uses ST) it  
probably is ok for the controller (code generator)
to know a lot about the formatting stuff, what goes in which place  
(thinking of string encoding and numbers (hex/long/float etc.).
In a GUI system, on the other hand, it is not uncommon for the view  
to actually request data from the controller (and thus pulling)
and attaching formatters to text fields and such things.

So it all comes down to: Do I have a more passive view, or is it a  
dominant, bitchy one, that's yelling give me this, give me that,
all the time? And it even wants to decided how a date looks like  
these days...

-k
From parrt at cs.usfca.edu  Sat May  6 15:12:05 2006
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sat May  6 15:12:08 2006
Subject: [stringtemplate-interest] Conditional statements
In-Reply-To: <537739b70605061251p9d59929ifd374a48c30c0079@mail.gmail.com>
References: <BAY101-DAV14B432EECEB6824CB74BC281B30@phx.gbl>
	<96765C61-74AE-4D7A-BE7D-AC33529435F3@cs.usfca.edu>
	<BAY101-DAV1259C82BD7F8174664004E81B10@phx.gbl>
	<BAY101-DAV170AEE94F028B72684057E81B60@phx.gbl>
	<9FADA001-038E-4CFC-87C2-5A4006E8CFE1@cs.usfca.edu>
	<BAY101-DAV116B98376FE242E7922B7181B60@phx.gbl>
	<1146834107.2870.6.camel@solo>
	<646E41F9-BA8F-4F8F-8302-864260A3A628@cs.usfca.edu>
	<1146879961.2660.12.camel@solo>
	<CDE15697-1184-4F8E-9C1A-CD1E17111C12@dolphin-services.de>
	<537739b70605061251p9d59929ifd374a48c30c0079@mail.gmail.com>
Message-ID: <6422A1F1-1421-4259-821A-98E7709D6579@cs.usfca.edu>


On May 6, 2006, at 12:51 PM, David Moshal wrote:

> I have to admit that I wouldn't mind expression and logic  
> evaluation capabilities in the view (template),
> seems to me that this ought to be possible without risking the view:
> - changing the model, or
> - becoming a controller.

Well, technically no computation can be done so no && and not even  
nested IF should be allowed.  Technically that computation should be  
done in model and sent into template, but...that's inconvenient.  As  
long as they are boolean results, nested IF is ok.  As for &&, I'm  
thinking that might be *too* convenient... ;)

> My problem with the current system is that if one is passing in a  
> collection of objects,
> the lack of logic or expression evaluation in the view requires one  
> to either:
> 1. create custom view objects from the model (which reduces  
> performance), or

Are you familiar with the "name.{prop1, prop2}" notation inside  
setAttribute?  Creates custom aggregates.

> I've always thought that extreme MVC separation isn't the goal, but  
> rather that each element of the
> M,V and C, should contain elements of all three, with particular  
> emphasis on one.

My experience building large web and code gen systems is that the  
strict enforcement is a guarantee that you can re-skin your web site  
or retarget your codegenerator.  Otherwise, you cannot do so  
effectively.

Ter
From parrt at cs.usfca.edu  Sat May  6 15:14:44 2006
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sat May  6 15:14:46 2006
Subject: [stringtemplate-interest] Conditional statements
In-Reply-To: <537739b70605061315h3447b783n44c6b2d1e21eed1a@mail.gmail.com>
References: <BAY101-DAV14B432EECEB6824CB74BC281B30@phx.gbl>
	<BAY101-DAV170AEE94F028B72684057E81B60@phx.gbl>
	<9FADA001-038E-4CFC-87C2-5A4006E8CFE1@cs.usfca.edu>
	<BAY101-DAV116B98376FE242E7922B7181B60@phx.gbl>
	<1146834107.2870.6.camel@solo>
	<646E41F9-BA8F-4F8F-8302-864260A3A628@cs.usfca.edu>
	<1146879961.2660.12.camel@solo>
	<CDE15697-1184-4F8E-9C1A-CD1E17111C12@dolphin-services.de>
	<537739b70605061251p9d59929ifd374a48c30c0079@mail.gmail.com>
	<9A37D263-8BD5-4E3A-97D0-CD06C1CE5ED1@dolphin-services.de>
	<537739b70605061315h3447b783n44c6b2d1e21eed1a@mail.gmail.com>
Message-ID: <1F5A6E14-AF23-4DDC-8955-BCA64A58F427@cs.usfca.edu>


On May 6, 2006, at 1:15 PM, David Moshal wrote:

> Kay - let me play Devil's advocate here a bit.
>
> Take the issue of Formatting of dates and numbers. This is a case  
> of applying
> an expression to the model, to create a particular view of the data.
>
> With ST currently if one wants to create, a table by iterating  
> through a collection of objects,
> in which the cells need to be formatted in a particular way, those  
> objects need to provide the formatted
> 'view' of the model, so either one creates custom objects in the  
> controller, applying the formatting rules
> to the model, or one alters the model object, so that it knows how  
> to format it's data for the view.

please see my elegant solution to this problem w/o breaking the  
sanctity of MVC separation (better solution than turing complete  
templates I might add):

http://www.cs.usfca.edu/~parrt/papers/i18n.pdf

> So, in the case of formatting, wouldn't it be helpful if the  
> template had some
> evaluative capabilities that go beyond boolean evaluation??

I submit that it is unnecessary and worse just make ST an "me too"  
engine; nothing special.  ;)

Ter
From sohail at taggedtype.net  Sat May  6 16:31:58 2006
From: sohail at taggedtype.net (Sohail Somani)
Date: Sat May  6 16:32:09 2006
Subject: [stringtemplate-interest] Conditional statements
In-Reply-To: <1F5A6E14-AF23-4DDC-8955-BCA64A58F427@cs.usfca.edu>
References: <BAY101-DAV14B432EECEB6824CB74BC281B30@phx.gbl>
	<BAY101-DAV170AEE94F028B72684057E81B60@phx.gbl>
	<9FADA001-038E-4CFC-87C2-5A4006E8CFE1@cs.usfca.edu>
	<BAY101-DAV116B98376FE242E7922B7181B60@phx.gbl>
	<1146834107.2870.6.camel@solo>
	<646E41F9-BA8F-4F8F-8302-864260A3A628@cs.usfca.edu>
	<1146879961.2660.12.camel@solo>
	<CDE15697-1184-4F8E-9C1A-CD1E17111C12@dolphin-services.de>
	<537739b70605061251p9d59929ifd374a48c30c0079@mail.gmail.com>
	<9A37D263-8BD5-4E3A-97D0-CD06C1CE5ED1@dolphin-services.de>
	<537739b70605061315h3447b783n44c6b2d1e21eed1a@mail.gmail.com>
	<1F5A6E14-AF23-4DDC-8955-BCA64A58F427@cs.usfca.edu>
Message-ID: <1146958319.5577.2.camel@localhost.localdomain>

On Sat, 2006-05-06 at 15:14 -0700, Terence Parr wrote:
> > So, in the case of formatting, wouldn't it be helpful if the  
> > template had some
> > evaluative capabilities that go beyond boolean evaluation??
> 
> I submit that it is unnecessary and worse just make ST an "me too"  
> engine; nothing special.  ;)

I'm still unclear as to how ST allows the view to generate a table with
alternating row/column colours. Is there an example of this?

The obvious way would be something like:

if(($i0$ % |items|)==0) something
else something else

Thanks!

Sohail

From kroepke at dolphin-services.de  Sat May  6 16:53:26 2006
From: kroepke at dolphin-services.de (Kay Roepke)
Date: Sat May  6 16:53:32 2006
Subject: [stringtemplate-interest] Conditional statements
In-Reply-To: <1146958319.5577.2.camel@localhost.localdomain>
References: <BAY101-DAV14B432EECEB6824CB74BC281B30@phx.gbl>
	<BAY101-DAV170AEE94F028B72684057E81B60@phx.gbl>
	<9FADA001-038E-4CFC-87C2-5A4006E8CFE1@cs.usfca.edu>
	<BAY101-DAV116B98376FE242E7922B7181B60@phx.gbl>
	<1146834107.2870.6.camel@solo>
	<646E41F9-BA8F-4F8F-8302-864260A3A628@cs.usfca.edu>
	<1146879961.2660.12.camel@solo>
	<CDE15697-1184-4F8E-9C1A-CD1E17111C12@dolphin-services.de>
	<537739b70605061251p9d59929ifd374a48c30c0079@mail.gmail.com>
	<9A37D263-8BD5-4E3A-97D0-CD06C1CE5ED1@dolphin-services.de>
	<537739b70605061315h3447b783n44c6b2d1e21eed1a@mail.gmail.com>
	<1F5A6E14-AF23-4DDC-8955-BCA64A58F427@cs.usfca.edu>
	<1146958319.5577.2.camel@localhost.localdomain>
Message-ID: <6497C38D-3FD7-4B24-BF88-29E5AB193A36@dolphin-services.de>


On 7. May 2006, at 1:31 Uhr, Sohail Somani wrote:

> I'm still unclear as to how ST allows the view to generate a table  
> with
> alternating row/column colours. Is there an example of this?

It's right there in The Fine Manual:

[http://www.stringtemplate.org/doc/doc.tml] approx halfway through:
----------
Applying Alternating Templates To Multi-Valued Attributes

When generating lists of things, you often need to change the color  
or other formatting instructions depending on the list position. For  
example, you might want to alternate the color of the background for  
the elements of a list. The easiest and most natural way to specify  
this is with an alternating list of templates to apply to an  
expression of the form: $expr:t1(),t2(),...,tN()$. To make an  
alternating list of blue and green names, you might say:

$names:blueListItem(),greenListItem()$

where presumably blueListItem template is an HTML <table> or  
something that lets you change background color. names[0] would get  
blueListItem() applied to it, names[1] would get greenListItem(), and  
names[2] would get blueListItem(), etc...

If names is single-valued, then blueListItem() is applied and that's it.

------------


> The obvious way would be something like:
>
> if(($i0$ % |items|)==0) something
> else something else

That way dragons live! ;)

HTH,
-k
From parrt at cs.usfca.edu  Sat May  6 16:57:34 2006
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sat May  6 16:57:37 2006
Subject: [stringtemplate-interest] Conditional statements
In-Reply-To: <1146958319.5577.2.camel@localhost.localdomain>
References: <BAY101-DAV14B432EECEB6824CB74BC281B30@phx.gbl>
	<BAY101-DAV170AEE94F028B72684057E81B60@phx.gbl>
	<9FADA001-038E-4CFC-87C2-5A4006E8CFE1@cs.usfca.edu>
	<BAY101-DAV116B98376FE242E7922B7181B60@phx.gbl>
	<1146834107.2870.6.camel@solo>
	<646E41F9-BA8F-4F8F-8302-864260A3A628@cs.usfca.edu>
	<1146879961.2660.12.camel@solo>
	<CDE15697-1184-4F8E-9C1A-CD1E17111C12@dolphin-services.de>
	<537739b70605061251p9d59929ifd374a48c30c0079@mail.gmail.com>
	<9A37D263-8BD5-4E3A-97D0-CD06C1CE5ED1@dolphin-services.de>
	<537739b70605061315h3447b783n44c6b2d1e21eed1a@mail.gmail.com>
	<1F5A6E14-AF23-4DDC-8955-BCA64A58F427@cs.usfca.edu>
	<1146958319.5577.2.camel@localhost.localdomain>
Message-ID: <92E09071-3FBB-4F56-9E5F-60607D88C220@cs.usfca.edu>


On May 6, 2006, at 4:31 PM, Sohail Somani wrote:

> On Sat, 2006-05-06 at 15:14 -0700, Terence Parr wrote:
>>> So, in the case of formatting, wouldn't it be helpful if the
>>> template had some
>>> evaluative capabilities that go beyond boolean evaluation??
>>
>> I submit that it is unnecessary and worse just make ST an "me too"
>> engine; nothing special.  ;)
>
> I'm still unclear as to how ST allows the view to generate a table  
> with
> alternating row/column colours. Is there an example of this?

sure...here's a column example

<columnDataElements:red(), green()>

Ter
From galendunkleberger at gmail.com  Sat May  6 20:38:52 2006
From: galendunkleberger at gmail.com (Galen Dunkleberger)
Date: Sat May  6 20:36:37 2006
Subject: [stringtemplate-interest] Conditional statements
In-Reply-To: <92E09071-3FBB-4F56-9E5F-60607D88C220@cs.usfca.edu>
References: <BAY101-DAV14B432EECEB6824CB74BC281B30@phx.gbl>
	<BAY101-DAV170AEE94F028B72684057E81B60@phx.gbl>
	<9FADA001-038E-4CFC-87C2-5A4006E8CFE1@cs.usfca.edu>
	<BAY101-DAV116B98376FE242E7922B7181B60@phx.gbl>
	<1146834107.2870.6.camel@solo>
	<646E41F9-BA8F-4F8F-8302-864260A3A628@cs.usfca.edu>
	<1146879961.2660.12.camel@solo>
	<CDE15697-1184-4F8E-9C1A-CD1E17111C12@dolphin-services.de>
	<537739b70605061251p9d59929ifd374a48c30c0079@mail.gmail.com>
	<9A37D263-8BD5-4E3A-97D0-CD06C1CE5ED1@dolphin-services.de>
	<537739b70605061315h3447b783n44c6b2d1e21eed1a@mail.gmail.com>
	<1F5A6E14-AF23-4DDC-8955-BCA64A58F427@cs.usfca.edu>
	<1146958319.5577.2.camel@localhost.localdomain>
	<92E09071-3FBB-4F56-9E5F-60607D88C220@cs.usfca.edu>
Message-ID: <1146973132.2757.8.camel@solo>

Whoa, looks like I kind of opened Pandora's box here. In the end I just
decided to take the common parts of the template that could get rendered
and put them into a separate template that could be included in the
various outcomes of the nested ifs...helps keep the template looking
clean and it works fine.

...
"As for &&, I'm  
thinking that might be *too* convenient... ;)"
...

I like this answer (even though it was my request) too often a lot of
open source projects and frameworks try to be all things to all people
and they end up in chaos. ST works well now and I can deal with the lack
of &&. 

		Thanks,
			Galen
 

On Sat, 2006-05-06 at 16:57 -0700, Terence Parr wrote:
> On May 6, 2006, at 4:31 PM, Sohail Somani wrote:
> 
> > On Sat, 2006-05-06 at 15:14 -0700, Terence Parr wrote:
> >>> So, in the case of formatting, wouldn't it be helpful if the
> >>> template had some
> >>> evaluative capabilities that go beyond boolean evaluation??
> >>
> >> I submit that it is unnecessary and worse just make ST an "me too"
> >> engine; nothing special.  ;)
> >
> > I'm still unclear as to how ST allows the view to generate a table  
> > with
> > alternating row/column colours. Is there an example of this?
> 
> sure...here's a column example
> 
> <columnDataElements:red(), green()>
> 
> Ter
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest@antlr.org
> http://www.antlr.org:8080/mailman/listinfo/stringtemplate-interest

From sohail at taggedtype.net  Sat May  6 22:32:19 2006
From: sohail at taggedtype.net (Sohail Somani)
Date: Sat May  6 22:32:28 2006
Subject: [stringtemplate-interest] Conditional statements
In-Reply-To: <92E09071-3FBB-4F56-9E5F-60607D88C220@cs.usfca.edu>
References: <BAY101-DAV14B432EECEB6824CB74BC281B30@phx.gbl>
	<BAY101-DAV170AEE94F028B72684057E81B60@phx.gbl>
	<9FADA001-038E-4CFC-87C2-5A4006E8CFE1@cs.usfca.edu>
	<BAY101-DAV116B98376FE242E7922B7181B60@phx.gbl>
	<1146834107.2870.6.camel@solo>
	<646E41F9-BA8F-4F8F-8302-864260A3A628@cs.usfca.edu>
	<1146879961.2660.12.camel@solo>
	<CDE15697-1184-4F8E-9C1A-CD1E17111C12@dolphin-services.de>
	<537739b70605061251p9d59929ifd374a48c30c0079@mail.gmail.com>
	<9A37D263-8BD5-4E3A-97D0-CD06C1CE5ED1@dolphin-services.de>
	<537739b70605061315h3447b783n44c6b2d1e21eed1a@mail.gmail.com>
	<1F5A6E14-AF23-4DDC-8955-BCA64A58F427@cs.usfca.edu>
	<1146958319.5577.2.camel@localhost.localdomain>
	<92E09071-3FBB-4F56-9E5F-60607D88C220@cs.usfca.edu>
Message-ID: <1146979939.5620.1.camel@localhost.localdomain>

On Sat, 2006-05-06 at 16:57 -0700, Terence Parr wrote:
> On May 6, 2006, at 4:31 PM, Sohail Somani wrote:
> 
> > On Sat, 2006-05-06 at 15:14 -0700, Terence Parr wrote:
> >>> So, in the case of formatting, wouldn't it be helpful if the
> >>> template had some
> >>> evaluative capabilities that go beyond boolean evaluation??
> >>
> >> I submit that it is unnecessary and worse just make ST an "me too"
> >> engine; nothing special.  ;)
> >
> > I'm still unclear as to how ST allows the view to generate a table  
> > with
> > alternating row/column colours. Is there an example of this?
> 
> sure...here's a column example
> 
> <columnDataElements:red(), green()>

I'm glad I rely on smart people to do good work.

Its not that I used ST for HTML anyway (used it for code gen), but I was
always curious ;)

Sohail


From dmoshal at gmail.com  Sun May  7 09:49:41 2006
From: dmoshal at gmail.com (David Moshal)
Date: Sun May  7 09:49:47 2006
Subject: [stringtemplate-interest] Conditional statements
In-Reply-To: <90341FF3-68B3-4A98-8D20-2FE2EF5DC66B@dolphin-services.de>
References: <BAY101-DAV14B432EECEB6824CB74BC281B30@phx.gbl>
	<BAY101-DAV116B98376FE242E7922B7181B60@phx.gbl>
	<1146834107.2870.6.camel@solo>
	<646E41F9-BA8F-4F8F-8302-864260A3A628@cs.usfca.edu>
	<1146879961.2660.12.camel@solo>
	<CDE15697-1184-4F8E-9C1A-CD1E17111C12@dolphin-services.de>
	<537739b70605061251p9d59929ifd374a48c30c0079@mail.gmail.com>
	<9A37D263-8BD5-4E3A-97D0-CD06C1CE5ED1@dolphin-services.de>
	<537739b70605061315h3447b783n44c6b2d1e21eed1a@mail.gmail.com>
	<90341FF3-68B3-4A98-8D20-2FE2EF5DC66B@dolphin-services.de>
Message-ID: <537739b70605070949q3636483dv7e530ecd1af83b98@mail.gmail.com>

Kay - thanks for the references, I think I've read them before, but will
check.
I'm interested in Ter's take on all of this too.

Dave


On 5/6/06, Kay Roepke <kroepke@dolphin-services.de> wrote:
>
>
> On 6. May 2006, at 22:15 Uhr, David Moshal wrote:
>
> > Take the issue of Formatting of dates and numbers. This is a case of
> > applying
> > an expression to the model, to create a particular view of the data.
>
> Yes. I agree with that.
>
> > With ST currently if one wants to create, a table by iterating
> > through a
> > collection of objects,
> > in which the cells need to be formatted in a particular way, those
> > objects
> > need to provide the formatted
> > 'view' of the model, so either one creates custom objects in the
> > controller,
> > applying the formatting rules
> > to the model, or one alters the model object, so that it knows how
> > to format
> > it's data for the view.
>
> When you want to separate the view and the model from each other,
> this is exactly the thing
> you'd want the controller to do. (To that part I was agreeing above.)
> In my experience you could do one of two things:
> 1) Push the pre-formatted objects/data into the view/template or
> 2) Pull the formatting from the model via the controller by way of
> directions you put
>         in the template (in effect like method calls)
>
> I have done both things in projects. Both have their advantages as
> well as disadvantages.
> I don't know whether you are aware if this paper[1] which Ter wrote.
> He talks a bit about the
> problems (2) poses to the MVC paradigm (section 7.1). Although you
> could still decouple your model from the
> view in such a scenario in invariably means that you complicate you
> controller. You will have
> a formatting layer into which you call from the template that
> automagically handles the data
> formatting for you. You could even do that lazily and wouldn't even
> take a big performance hit.
> Ter als wrote a paper[2] recently in which he talks about the
> challenges of i18n in templates.
> That might help you to decide how to proceed, too.
>
> > So, in the case of formatting, wouldn't it be helpful if the
> > template had
> > some
> > evaluative capabilities that go beyond boolean evaluation??
>
> Although I'm often tempted to do something like that, too, I would
> disagree in this case.
> Having a formatting layer really only makes sense, if it tightly
> integrated into the template
> system. Which in turn would put the user of ST in a position of
> either using that, or push all
> data into the template anyway (a proof is in [1] section 7.1, too).
> When and if you have such a formatting layer, your life is good. If
> you don't, it ain't.
> I'm currently using approach (1) at work and other projects (ANTLR
> for one thing), too and
> can live with it. But (2) really puts a lot of the controller into
> the template, which may or
> may not be a Good Thing. That really depends on the assumptions you
> can make about the environment
> you work in.
> For ST, I think we shouldn't make to strong assumptions. Boolean
> expression, yes. More than that, no.
> IMHO.
>
> Ter?
>
> -k
>
> [1] http://www.cs.usfca.edu/~parrt/papers/mvc.templates.pdf
> [2] http://www.cs.usfca.edu/~parrt/papers/i18n.pdf
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org:8080/pipermail/stringtemplate-interest/attachments/20060507/f7454a99/attachment-0001.html
From dmoshal at gmail.com  Sun May  7 09:52:03 2006
From: dmoshal at gmail.com (David Moshal)
Date: Sun May  7 09:52:05 2006
Subject: [stringtemplate-interest] Conditional statements
In-Reply-To: <1F5A6E14-AF23-4DDC-8955-BCA64A58F427@cs.usfca.edu>
References: <BAY101-DAV14B432EECEB6824CB74BC281B30@phx.gbl>
	<BAY101-DAV116B98376FE242E7922B7181B60@phx.gbl>
	<1146834107.2870.6.camel@solo>
	<646E41F9-BA8F-4F8F-8302-864260A3A628@cs.usfca.edu>
	<1146879961.2660.12.camel@solo>
	<CDE15697-1184-4F8E-9C1A-CD1E17111C12@dolphin-services.de>
	<537739b70605061251p9d59929ifd374a48c30c0079@mail.gmail.com>
	<9A37D263-8BD5-4E3A-97D0-CD06C1CE5ED1@dolphin-services.de>
	<537739b70605061315h3447b783n44c6b2d1e21eed1a@mail.gmail.com>
	<1F5A6E14-AF23-4DDC-8955-BCA64A58F427@cs.usfca.edu>
Message-ID: <537739b70605070952x471baa34g92f459775e8e99d8@mail.gmail.com>

Thanks Ter - I'll take a look asap.
I totally accept that I'm currently not using the full capabilities of ST.

Dave


On 5/6/06, Terence Parr <parrt@cs.usfca.edu> wrote:
>
>
> On May 6, 2006, at 1:15 PM, David Moshal wrote:
>
> > Kay - let me play Devil's advocate here a bit.
> >
> > Take the issue of Formatting of dates and numbers. This is a case
> > of applying
> > an expression to the model, to create a particular view of the data.
> >
> > With ST currently if one wants to create, a table by iterating
> > through a collection of objects,
> > in which the cells need to be formatted in a particular way, those
> > objects need to provide the formatted
> > 'view' of the model, so either one creates custom objects in the
> > controller, applying the formatting rules
> > to the model, or one alters the model object, so that it knows how
> > to format it's data for the view.
>
> please see my elegant solution to this problem w/o breaking the
> sanctity of MVC separation (better solution than turing complete
> templates I might add):
>
> http://www.cs.usfca.edu/~parrt/papers/i18n.pdf
>
> > So, in the case of formatting, wouldn't it be helpful if the
> > template had some
> > evaluative capabilities that go beyond boolean evaluation??
>
> I submit that it is unnecessary and worse just make ST an "me too"
> engine; nothing special.  ;)
>
> Ter
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest@antlr.org
> http://www.antlr.org:8080/mailman/listinfo/stringtemplate-interest
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org:8080/pipermail/stringtemplate-interest/attachments/20060507/a982ba4a/attachment.html
From kroepke at dolphin-services.de  Sun May  7 09:53:50 2006
From: kroepke at dolphin-services.de (Kay Roepke)
Date: Sun May  7 09:53:55 2006
Subject: [stringtemplate-interest] Conditional statements
In-Reply-To: <537739b70605070949q3636483dv7e530ecd1af83b98@mail.gmail.com>
References: <BAY101-DAV14B432EECEB6824CB74BC281B30@phx.gbl>
	<BAY101-DAV116B98376FE242E7922B7181B60@phx.gbl>
	<1146834107.2870.6.camel@solo>
	<646E41F9-BA8F-4F8F-8302-864260A3A628@cs.usfca.edu>
	<1146879961.2660.12.camel@solo>
	<CDE15697-1184-4F8E-9C1A-CD1E17111C12@dolphin-services.de>
	<537739b70605061251p9d59929ifd374a48c30c0079@mail.gmail.com>
	<9A37D263-8BD5-4E3A-97D0-CD06C1CE5ED1@dolphin-services.de>
	<537739b70605061315h3447b783n44c6b2d1e21eed1a@mail.gmail.com>
	<90341FF3-68B3-4A98-8D20-2FE2EF5DC66B@dolphin-services.de>
	<537739b70605070949q3636483dv7e530ecd1af83b98@mail.gmail.com>
Message-ID: <E861663F-3B0B-4779-8BD0-DE9294F8DAC4@dolphin-services.de>


On 7. May 2006, at 18:49 Uhr, David Moshal wrote:

> I'm interested in Ter's take on all of this too.

It seems to me that Ter has already decided against conditionals...;)
From parrt at cs.usfca.edu  Sun May  7 14:05:02 2006
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sun May  7 14:05:05 2006
Subject: [stringtemplate-interest] Conditional statements
In-Reply-To: <1146973132.2757.8.camel@solo>
References: <BAY101-DAV14B432EECEB6824CB74BC281B30@phx.gbl>
	<BAY101-DAV170AEE94F028B72684057E81B60@phx.gbl>
	<9FADA001-038E-4CFC-87C2-5A4006E8CFE1@cs.usfca.edu>
	<BAY101-DAV116B98376FE242E7922B7181B60@phx.gbl>
	<1146834107.2870.6.camel@solo>
	<646E41F9-BA8F-4F8F-8302-864260A3A628@cs.usfca.edu>
	<1146879961.2660.12.camel@solo>
	<CDE15697-1184-4F8E-9C1A-CD1E17111C12@dolphin-services.de>
	<537739b70605061251p9d59929ifd374a48c30c0079@mail.gmail.com>
	<9A37D263-8BD5-4E3A-97D0-CD06C1CE5ED1@dolphin-services.de>
	<537739b70605061315h3447b783n44c6b2d1e21eed1a@mail.gmail.com>
	<1F5A6E14-AF23-4DDC-8955-BCA64A58F427@cs.usfca.edu>
	<1146958319.5577.2.camel@localhost.localdomain>
	<92E09071-3FBB-4F56-9E5F-60607D88C220@cs.usfca.edu>
	<1146973132.2757.8.camel@solo>
Message-ID: <C8618BEA-AF11-4346-AB2F-F926F5E14436@cs.usfca.edu>


On May 6, 2006, at 8:38 PM, Galen Dunkleberger wrote:

> Whoa, looks like I kind of opened Pandora's box here. In the end I  
> just
> decided to take the common parts of the template that could get  
> rendered
> and put them into a separate template that could be included in the
> various outcomes of the nested ifs...helps keep the template looking
> clean and it works fine.

Cool.  that is what I do often and I think it's the right answer.

> ...
> "As for &&, I'm
> thinking that might be *too* convenient... ;)"
> ...
>
> I like this answer (even though it was my request) too often a lot of
> open source projects and frameworks try to be all things to all people
> and they end up in chaos. ST works well now and I can deal with the  
> lack
> of &&.

I'm a dictator ;)  Rather, I'm a conductor that picks through the  
good ideas, looking for the ones that fit in my vision of ST.

Ter
From parrt at cs.usfca.edu  Sun May  7 14:05:50 2006
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sun May  7 14:05:52 2006
Subject: [stringtemplate-interest] Conditional statements
In-Reply-To: <1146979939.5620.1.camel@localhost.localdomain>
References: <BAY101-DAV14B432EECEB6824CB74BC281B30@phx.gbl>
	<BAY101-DAV170AEE94F028B72684057E81B60@phx.gbl>
	<9FADA001-038E-4CFC-87C2-5A4006E8CFE1@cs.usfca.edu>
	<BAY101-DAV116B98376FE242E7922B7181B60@phx.gbl>
	<1146834107.2870.6.camel@solo>
	<646E41F9-BA8F-4F8F-8302-864260A3A628@cs.usfca.edu>
	<1146879961.2660.12.camel@solo>
	<CDE15697-1184-4F8E-9C1A-CD1E17111C12@dolphin-services.de>
	<537739b70605061251p9d59929ifd374a48c30c0079@mail.gmail.com>
	<9A37D263-8BD5-4E3A-97D0-CD06C1CE5ED1@dolphin-services.de>
	<537739b70605061315h3447b783n44c6b2d1e21eed1a@mail.gmail.com>
	<1F5A6E14-AF23-4DDC-8955-BCA64A58F427@cs.usfca.edu>
	<1146958319.5577.2.camel@localhost.localdomain>
	<92E09071-3FBB-4F56-9E5F-60607D88C220@cs.usfca.edu>
	<1146979939.5620.1.camel@localhost.localdomain>
Message-ID: <2D594662-3D93-4989-A810-1A722E1B36A0@cs.usfca.edu>


On May 6, 2006, at 10:32 PM, Sohail Somani wrote:
>> <columnDataElements:red(), green()>
>
> I'm glad I rely on smart people to do good work.

:)  Thanks ;)

> Its not that I used ST for HTML anyway (used it for code gen), but  
> I was
> always curious ;)

ST can't generate everything, but it does most stuff well enough :)

Ter
From parrt at cs.usfca.edu  Sun May  7 14:06:27 2006
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sun May  7 14:06:30 2006
Subject: [stringtemplate-interest] Conditional statements
In-Reply-To: <E861663F-3B0B-4779-8BD0-DE9294F8DAC4@dolphin-services.de>
References: <BAY101-DAV14B432EECEB6824CB74BC281B30@phx.gbl>
	<BAY101-DAV116B98376FE242E7922B7181B60@phx.gbl>
	<1146834107.2870.6.camel@solo>
	<646E41F9-BA8F-4F8F-8302-864260A3A628@cs.usfca.edu>
	<1146879961.2660.12.camel@solo>
	<CDE15697-1184-4F8E-9C1A-CD1E17111C12@dolphin-services.de>
	<537739b70605061251p9d59929ifd374a48c30c0079@mail.gmail.com>
	<9A37D263-8BD5-4E3A-97D0-CD06C1CE5ED1@dolphin-services.de>
	<537739b70605061315h3447b783n44c6b2d1e21eed1a@mail.gmail.com>
	<90341FF3-68B3-4A98-8D20-2FE2EF5DC66B@dolphin-services.de>
	<537739b70605070949q3636483dv7e530ecd1af83b98@mail.gmail.com>
	<E861663F-3B0B-4779-8BD0-DE9294F8DAC4@dolphin-services.de>
Message-ID: <5CBF9B3B-377E-45CA-A774-73713A3D56A7@cs.usfca.edu>


On May 7, 2006, at 9:53 AM, Kay Roepke wrote:

>
> On 7. May 2006, at 18:49 Uhr, David Moshal wrote:
>
>> I'm interested in Ter's take on all of this too.
>
> It seems to me that Ter has already decided against conditionals...;)

Yeah, let's leave off for now...certainly only boolean could be allowed.

Ter

From dmoshal at gmail.com  Wed May 10 10:55:20 2006
From: dmoshal at gmail.com (David Moshal)
Date: Wed May 10 10:55:22 2006
Subject: [stringtemplate-interest] quick question
Message-ID: <537739b70605101055m66b7bacem329fd29c2637790a@mail.gmail.com>

Hi - I apologize in advance if this is a completely obvious question:

How does one iterate in ST?

ie, If I want to create a table with, say 10 rows, how is this done:

<Table>

$????$

<tr><td></td></tr>

$????$

<Table>


Thanks

Dave
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org:8080/pipermail/stringtemplate-interest/attachments/20060510/1a9afbe7/attachment.html
From kroepke at dolphin-services.de  Wed May 10 11:55:42 2006
From: kroepke at dolphin-services.de (Kay Roepke)
Date: Wed May 10 11:55:46 2006
Subject: [stringtemplate-interest] quick question
In-Reply-To: <537739b70605101055m66b7bacem329fd29c2637790a@mail.gmail.com>
References: <537739b70605101055m66b7bacem329fd29c2637790a@mail.gmail.com>
Message-ID: <F59657DF-D9F7-46B1-8B5B-1485F26FD87F@dolphin-services.de>


On 10. May 2006, at 19:55 Uhr, David Moshal wrote:

> Hi - I apologize in advance if this is a completely obvious question:
>
> How does one iterate in ST?
>
> ie, If I want to create a table with, say 10 rows, how is this done:

(using the AngleBracketTemplateLexer:)

<rows:{row|\<tr><row.datacells:{data|\<td>data.contents\</td>}>\</ 
tr>}; separator="\n">

See: http://www.stringtemplate.org/doc/doc.tml

HTH,

-k


From dmoshal at gmail.com  Wed May 10 12:56:23 2006
From: dmoshal at gmail.com (David Moshal)
Date: Wed May 10 12:56:26 2006
Subject: [stringtemplate-interest] quick question
In-Reply-To: <F59657DF-D9F7-46B1-8B5B-1485F26FD87F@dolphin-services.de>
References: <537739b70605101055m66b7bacem329fd29c2637790a@mail.gmail.com>
	<F59657DF-D9F7-46B1-8B5B-1485F26FD87F@dolphin-services.de>
Message-ID: <537739b70605101256p6efad069uc9fbad8a83d4e4bc@mail.gmail.com>

Kay - I'm not sure if I explained the problem - I want to create a fixed
number of rows, eg 3.
There is no model in this case.

BTW - thanks for the Ter's i18n article - I'm going to look into the
attribute renderer class, it
clearly is a superior way of solving my prior problem regarding formatting.
Do you know if
one can set an attribute renderer as a wrapper around a whole model object?

Dave



On 5/10/06, Kay Roepke <kroepke@dolphin-services.de> wrote:
>
>
> On 10. May 2006, at 19:55 Uhr, David Moshal wrote:
>
> > Hi - I apologize in advance if this is a completely obvious question:
> >
> > How does one iterate in ST?
> >
> > ie, If I want to create a table with, say 10 rows, how is this done:
>
> (using the AngleBracketTemplateLexer:)
>
> <rows:{row|\<tr><row.datacells:{data|\<td>data.contents\</td>}>\</
> tr>}; separator="\n">
>
> See: http://www.stringtemplate.org/doc/doc.tml
>
> HTH,
>
> -k
>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org:8080/pipermail/stringtemplate-interest/attachments/20060510/e32ddaa3/attachment.html
From jose.sanleandro at ventura24.es  Wed May 10 13:22:18 2006
From: jose.sanleandro at ventura24.es (Jose San Leandro)
Date: Wed May 10 13:23:06 2006
Subject: [stringtemplate-interest] quick question
In-Reply-To: <537739b70605101256p6efad069uc9fbad8a83d4e4bc@mail.gmail.com>
References: <537739b70605101055m66b7bacem329fd29c2637790a@mail.gmail.com>
	<F59657DF-D9F7-46B1-8B5B-1485F26FD87F@dolphin-services.de>
	<537739b70605101256p6efad069uc9fbad8a83d4e4bc@mail.gmail.com>
Message-ID: <200605102222.19310.jose.sanleandro@ventura24.es>

For the first question if I understood well you should be able to do something 
like

<["tr1", "tr2", "tr3"],["td1-1", "td2-1", "tr3-1"], ["td1-2", "td2-2"], 
["td1-3"]:{row, td1, td2, td3|\<tr 
id="<row>">\<td><td1>\</td>\<td><td2>\</td>\<td><td3>\<td>\<tr>}; 
separator="\n">

An array of arrays of strings would be better, but there's no method to 
retrieve an iterator on each row, so I guess it cannot be used. I mean the 
best would be to use as input something like

<[["td1-1", "td1-2", "td1-3"], ["td2-1", "td2-2"], ["td3-1"]]: {row|... }>


On Wednesday 10 May 2006 21:56, David Moshal wrote:
> Kay - I'm not sure if I explained the problem - I want to create a fixed
> number of rows, eg 3.
> There is no model in this case.
>
> BTW - thanks for the Ter's i18n article - I'm going to look into the
> attribute renderer class, it
> clearly is a superior way of solving my prior problem regarding formatting.
> Do you know if
> one can set an attribute renderer as a wrapper around a whole model object?
>
> Dave
>
> On 5/10/06, Kay Roepke <kroepke@dolphin-services.de> wrote:
> > On 10. May 2006, at 19:55 Uhr, David Moshal wrote:
> > > Hi - I apologize in advance if this is a completely obvious question:
> > >
> > > How does one iterate in ST?
> > >
> > > ie, If I want to create a table with, say 10 rows, how is this done:
> >
> > (using the AngleBracketTemplateLexer:)
> >
> > <rows:{row|\<tr><row.datacells:{data|\<td>data.contents\</td>}>\</
> > tr>}; separator="\n">
> >
> > See: http://www.stringtemplate.org/doc/doc.tml
> >
> > HTH,
> >
> > -k
From parrt at cs.usfca.edu  Wed May 10 13:28:36 2006
From: parrt at cs.usfca.edu (Terence Parr)
Date: Wed May 10 13:28:39 2006
Subject: [stringtemplate-interest] quick question
In-Reply-To: <200605102222.19310.jose.sanleandro@ventura24.es>
References: <537739b70605101055m66b7bacem329fd29c2637790a@mail.gmail.com>
	<F59657DF-D9F7-46B1-8B5B-1485F26FD87F@dolphin-services.de>
	<537739b70605101256p6efad069uc9fbad8a83d4e4bc@mail.gmail.com>
	<200605102222.19310.jose.sanleandro@ventura24.es>
Message-ID: <A211176A-F437-4844-9FD3-38717486AB8D@cs.usfca.edu>

Note that you can parallel iterate:

<names,phones : {n,p | ...}>

:)

naturally names can also be a list of lists etc...

Ter
On May 10, 2006, at 1:22 PM, Jose San Leandro wrote:

> For the first question if I understood well you should be able to  
> do something
> like
>
> <["tr1", "tr2", "tr3"],["td1-1", "td2-1", "tr3-1"], ["td1-2",  
> "td2-2"],
> ["td1-3"]:{row, td1, td2, td3|\<tr
> id="<row>">\<td><td1>\</td>\<td><td2>\</td>\<td><td3>\<td>\<tr>};
> separator="\n">
>
> An array of arrays of strings would be better, but there's no  
> method to
> retrieve an iterator on each row, so I guess it cannot be used. I  
> mean the
> best would be to use as input something like
>
> <[["td1-1", "td1-2", "td1-3"], ["td2-1", "td2-2"], ["td3-1"]]:  
> {row|... }>
>
>
> On Wednesday 10 May 2006 21:56, David Moshal wrote:
>> Kay - I'm not sure if I explained the problem - I want to create a  
>> fixed
>> number of rows, eg 3.
>> There is no model in this case.
>>
>> BTW - thanks for the Ter's i18n article - I'm going to look into the
>> attribute renderer class, it
>> clearly is a superior way of solving my prior problem regarding  
>> formatting.
>> Do you know if
>> one can set an attribute renderer as a wrapper around a whole  
>> model object?
>>
>> Dave
>>
>> On 5/10/06, Kay Roepke <kroepke@dolphin-services.de> wrote:
>>> On 10. May 2006, at 19:55 Uhr, David Moshal wrote:
>>>> Hi - I apologize in advance if this is a completely obvious  
>>>> question:
>>>>
>>>> How does one iterate in ST?
>>>>
>>>> ie, If I want to create a table with, say 10 rows, how is this  
>>>> done:
>>>
>>> (using the AngleBracketTemplateLexer:)
>>>
>>> <rows:{row|\<tr><row.datacells:{data|\<td>data.contents\</td>}>\</
>>> tr>}; separator="\n">
>>>
>>> See: http://www.stringtemplate.org/doc/doc.tml
>>>
>>> HTH,
>>>
>>> -k
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest@antlr.org
> http://www.antlr.org:8080/mailman/listinfo/stringtemplate-interest

From dmoshal at gmail.com  Wed May 10 13:34:23 2006
From: dmoshal at gmail.com (David Moshal)
Date: Wed May 10 13:34:24 2006
Subject: [stringtemplate-interest] quick question
In-Reply-To: <A211176A-F437-4844-9FD3-38717486AB8D@cs.usfca.edu>
References: <537739b70605101055m66b7bacem329fd29c2637790a@mail.gmail.com>
	<F59657DF-D9F7-46B1-8B5B-1485F26FD87F@dolphin-services.de>
	<537739b70605101256p6efad069uc9fbad8a83d4e4bc@mail.gmail.com>
	<200605102222.19310.jose.sanleandro@ventura24.es>
	<A211176A-F437-4844-9FD3-38717486AB8D@cs.usfca.edu>
Message-ID: <537739b70605101334j121c3c8bue173f242bd19d2d8@mail.gmail.com>

Thanks for the responses, I don't think I've presented the problem well
enough.
Let me give you the jsp code, and see how you'd do it in ST:

<% for (int i=0; i< 3: i++) { %>

  <tr> <td> <%=i%> </td></tr>

<% } %>

Thanks again
Dave


On 5/10/06, Terence Parr <parrt@cs.usfca.edu> wrote:
>
> Note that you can parallel iterate:
>
> <names,phones : {n,p | ...}>
>
> :)
>
> naturally names can also be a list of lists etc...
>
> Ter
> On May 10, 2006, at 1:22 PM, Jose San Leandro wrote:
>
> > For the first question if I understood well you should be able to
> > do something
> > like
> >
> > <["tr1", "tr2", "tr3"],["td1-1", "td2-1", "tr3-1"], ["td1-2",
> > "td2-2"],
> > ["td1-3"]:{row, td1, td2, td3|\<tr
> > id="<row>">\<td><td1>\</td>\<td><td2>\</td>\<td><td3>\<td>\<tr>};
> > separator="\n">
> >
> > An array of arrays of strings would be better, but there's no
> > method to
> > retrieve an iterator on each row, so I guess it cannot be used. I
> > mean the
> > best would be to use as input something like
> >
> > <[["td1-1", "td1-2", "td1-3"], ["td2-1", "td2-2"], ["td3-1"]]:
> > {row|... }>
> >
> >
> > On Wednesday 10 May 2006 21:56, David Moshal wrote:
> >> Kay - I'm not sure if I explained the problem - I want to create a
> >> fixed
> >> number of rows, eg 3.
> >> There is no model in this case.
> >>
> >> BTW - thanks for the Ter's i18n article - I'm going to look into the
> >> attribute renderer class, it
> >> clearly is a superior way of solving my prior problem regarding
> >> formatting.
> >> Do you know if
> >> one can set an attribute renderer as a wrapper around a whole
> >> model object?
> >>
> >> Dave
> >>
> >> On 5/10/06, Kay Roepke <kroepke@dolphin-services.de> wrote:
> >>> On 10. May 2006, at 19:55 Uhr, David Moshal wrote:
> >>>> Hi - I apologize in advance if this is a completely obvious
> >>>> question:
> >>>>
> >>>> How does one iterate in ST?
> >>>>
> >>>> ie, If I want to create a table with, say 10 rows, how is this
> >>>> done:
> >>>
> >>> (using the AngleBracketTemplateLexer:)
> >>>
> >>> <rows:{row|\<tr><row.datacells:{data|\<td>data.contents\</td>}>\</
> >>> tr>}; separator="\n">
> >>>
> >>> See: http://www.stringtemplate.org/doc/doc.tml
> >>>
> >>> HTH,
> >>>
> >>> -k
> > _______________________________________________
> > stringtemplate-interest mailing list
> > stringtemplate-interest@antlr.org
> > http://www.antlr.org:8080/mailman/listinfo/stringtemplate-interest
>
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest@antlr.org
> http://www.antlr.org:8080/mailman/listinfo/stringtemplate-interest
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org:8080/pipermail/stringtemplate-interest/attachments/20060510/f5e5fda3/attachment.html
From open.zone at virgin.net  Wed May 10 14:08:21 2006
From: open.zone at virgin.net (Micheal J)
Date: Wed May 10 13:50:56 2006
Subject: [stringtemplate-interest] quick question
In-Reply-To: <537739b70605101334j121c3c8bue173f242bd19d2d8@mail.gmail.com>
Message-ID: <00a301c67475$e06eef00$6502a8c0@hercules>

$["1", "2", "3"]:{index|
    <tr><td>$index$</td></tr>
}$
 
Just off the top of my head and may not work. ;-)
 
Micheal

-----Original Message-----
From: stringtemplate-interest-bounces@antlr.org
[mailto:stringtemplate-interest-bounces@antlr.org] On Behalf Of David Moshal
Sent: 10 May 2006 21:34
To: Terence Parr; stringtemplate-interest
Subject: Re: [stringtemplate-interest] quick question


Thanks for the responses, I don't think I've presented the problem well
enough.
Let me give you the jsp code, and see how you'd do it in ST:

<% for (int i=0; i< 3: i++) { %>

  <tr> <td> <%=i%> </td></tr> 

<% } %>

Thanks again
Dave



On 5/10/06, Terence Parr <parrt@cs.usfca.edu> wrote: 

Note that you can parallel iterate:

<names,phones : {n,p | ...}>

:)

naturally names can also be a list of lists etc...

Ter
On May 10, 2006, at 1:22 PM, Jose San Leandro wrote:

> For the first question if I understood well you should be able to
> do something 
> like
>
> <["tr1", "tr2", "tr3"],["td1-1", "td2-1", "tr3-1"], ["td1-2",
> "td2-2"],
> ["td1-3"]:{row, td1, td2, td3|\<tr 
> id="<row>">\<td><td1>\</td>\<td><td2>\</td>\<td><td3>\<td>\<tr>};
> separator="\n">
>
> An array of arrays of strings would be better, but there's no 
> method to
> retrieve an iterator on each row, so I guess it cannot be used. I
> mean the
> best would be to use as input something like
>
> <[["td1-1", "td1-2", "td1-3"], ["td2-1", "td2-2"], ["td3-1"]]: 
> {row|... }>
>
>
> On Wednesday 10 May 2006 21:56, David Moshal wrote:
>> Kay - I'm not sure if I explained the problem - I want to create a
>> fixed
>> number of rows, eg 3. 
>> There is no model in this case.
>>
>> BTW - thanks for the Ter's i18n article - I'm going to look into the
>> attribute renderer class, it
>> clearly is a superior way of solving my prior problem regarding 
>> formatting.
>> Do you know if
>> one can set an attribute renderer as a wrapper around a whole
>> model object?
>>
>> Dave
>>
>> On 5/10/06, Kay Roepke < kroepke@dolphin-services.de> wrote:
>>> On 10. May 2006, at 19:55 Uhr, David Moshal wrote:
>>>> Hi - I apologize in advance if this is a completely obvious 
>>>> question:
>>>>
>>>> How does one iterate in ST?
>>>>
>>>> ie, If I want to create a table with, say 10 rows, how is this
>>>> done: 
>>>
>>> (using the AngleBracketTemplateLexer:)
>>>
>>> <rows:{row|\<tr><row.datacells:{data|\<td>data.contents\</td>}>\</
>>> tr>}; separator="\n"> 
>>>
>>> See: http://www.stringtemplate.org/doc/doc.tml
>>>
>>> HTH,
>>>
>>> -k
> _______________________________________________ 
> stringtemplate-interest mailing list
> stringtemplate-interest@antlr.org
> http://www.antlr.org:8080/mailman/listinfo/stringtemplate-interest

_______________________________________________
stringtemplate-interest mailing list
stringtemplate-interest@antlr.org
<mailto:stringtemplate-interest@antlr.org> 
http://www.antlr.org:8080/mailman/listinfo/stringtemplate-interest



-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org:8080/pipermail/stringtemplate-interest/attachments/20060510/e01ef70c/attachment-0001.html
From parrt at cs.usfca.edu  Wed May 10 13:59:20 2006
From: parrt at cs.usfca.edu (Terence Parr)
Date: Wed May 10 13:59:23 2006
Subject: [stringtemplate-interest] quick question
In-Reply-To: <00a301c67475$e06eef00$6502a8c0@hercules>
References: <00a301c67475$e06eef00$6502a8c0@hercules>
Message-ID: <7815703A-1713-44BF-90AC-E10C723490D8@cs.usfca.edu>


On May 10, 2006, at 2:08 PM, Micheal J wrote:

> $["1", "2", "3"]:{index|
>     <tr><td>$index$</td></tr>
> }$
>
> Just off the top of my head and may not work. ;-)

Ah, you need something fixed.  Ok, well, the model says what to  
display and the view says how.  So, you should not be specifying  
thinks like "10 rows" in the view unless it's a paging thing.  That I  
handled by only sending a page's worth of data to the view, but I can  
see how truncating could be useful and not break rules:

<names:{n, i<10 | ...}>

we start to get dangerously close to generic expressions though ;)

Ter

From dmoshal at gmail.com  Wed May 10 14:18:22 2006
From: dmoshal at gmail.com (David Moshal)
Date: Wed May 10 14:18:24 2006
Subject: [stringtemplate-interest] quick question
In-Reply-To: <7815703A-1713-44BF-90AC-E10C723490D8@cs.usfca.edu>
References: <00a301c67475$e06eef00$6502a8c0@hercules>
	<7815703A-1713-44BF-90AC-E10C723490D8@cs.usfca.edu>
Message-ID: <537739b70605101418s586f365aifcedb320f76b501@mail.gmail.com>

thanks Ter, actually, it's not quite fixed (though in the example it is).
What I really need to do is for the model to tell the view how many rows to
create, ie:

<% for (int i=0; i< rowCount: i++) { %>

  <tr> <td> <%=i%> </td></tr>

<% } %>

where the model passes in "rowCount".

Regarding the "|" notation, I must confess that the documentation does leave
me confused
 - perhaps I just need to experiment a bit.

Thanks again,
Dave




On 5/10/06, Terence Parr <parrt@cs.usfca.edu> wrote:
>
>
> On May 10, 2006, at 2:08 PM, Micheal J wrote:
>
> > $["1", "2", "3"]:{index|
> >     <tr><td>$index$</td></tr>
> > }$
> >
> > Just off the top of my head and may not work. ;-)
>
> Ah, you need something fixed.  Ok, well, the model says what to
> display and the view says how.  So, you should not be specifying
> thinks like "10 rows" in the view unless it's a paging thing.  That I
> handled by only sending a page's worth of data to the view, but I can
> see how truncating could be useful and not break rules:
>
> <names:{n, i<10 | ...}>
>
> we start to get dangerously close to generic expressions though ;)
>
> Ter
>
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest@antlr.org
> http://www.antlr.org:8080/mailman/listinfo/stringtemplate-interest
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org:8080/pipermail/stringtemplate-interest/attachments/20060510/61b4e3de/attachment.html
From kroepke at dolphin-services.de  Wed May 10 16:40:38 2006
From: kroepke at dolphin-services.de (Kay Roepke)
Date: Wed May 10 16:40:45 2006
Subject: [stringtemplate-interest] quick question
In-Reply-To: <537739b70605101418s586f365aifcedb320f76b501@mail.gmail.com>
References: <00a301c67475$e06eef00$6502a8c0@hercules>
	<7815703A-1713-44BF-90AC-E10C723490D8@cs.usfca.edu>
	<537739b70605101418s586f365aifcedb320f76b501@mail.gmail.com>
Message-ID: <9C394E6A-BEBA-4585-A024-D6F330E6F907@dolphin-services.de>


On 10. May 2006, at 23:18 Uhr, David Moshal wrote:

> thanks Ter, actually, it's not quite fixed (though in the example  
> it is).
> What I really need to do is for the model to tell the view how many  
> rows to
> create, ie:
>
> <% for (int i=0; i< rowCount: i++) { %>
>
>  <tr> <td> <%=i%> </td></tr>
>
> <% } %>
>
> where the model passes in "rowCount".

Well, in my book I would make the controller(!) decide how the view  
should display things like paging and supply it with the necessary
datastructures.  It should be the model and the view that ideally are  
reusable - the controller mostly isn't. Thus to implement paging,
there shouldn't be a need for the view to know about it.
I'd have one template that says how to render a single element, a  
list of elements (say in a row), and the paging part of the list  
(current page,
total number of pages, etc.). They I'd have the controller to sort  
out pagination and the number of elements in a list/row and have it  
prepare
the necessary datastructures.
No need for any expressions in the view. Clean model, clean code,  
messy controller. That's what you mostly end up with in the MVC  
paradigm. Of course
there are ways to get a little structure into the controller part,  
but in my experience it will always stay glue code - it has to know  
about both the
model and the view.

Specifically for the example you gave above, I'd create a list of  
rowCount elements, with the elements being 0..rowCount-1. Then the  
template would be
straightforward:

<listOfNumbers:{i|\<tr>\<td><i>\</td>\</tr>}; separator="\n">

Keeps the template nice and clean and easy to understand. When you're  
using templates, you'll always have to read the code that feeds data  
into the templates
at the same time, otherwise you couldn't possibly know what the data  
structure is. That's one drawback of controller-view separation: You  
have to look
in two spots to get the picture. But it is so useful to keep your  
code cleaner. :)

> Regarding the "|" notation, I must confess that the documentation  
> does leave
> me confused
> - perhaps I just need to experiment a bit.

The syntax is sort of looks like Smalltalk to me (well, ok, just a  
tiny bit ;)). Consider

<list:{element|This is element number <element.cardinalNumber>.};  
separator="\n">

The expression between '<' and ':' is the list of values/objects. The  
stuff name between '{' and '|' is the name of the local variable used
to access the current element of that list. After the '|' comes the  
template contents (this maybe a another template reference and so on).
The separator part is what goes between the template expansions (but  
not after the last element).

(I don't want to sound lecturing, just hoping to make it clear :))

-k
From Andrew.Goodnough at wicourts.gov  Thu May 11 05:52:36 2006
From: Andrew.Goodnough at wicourts.gov (Andrew Goodnough)
Date: Thu May 11 05:52:59 2006
Subject: Design with JavaBeans or not (was Re:
	[stringtemplate-interest] quick question)
In-Reply-To: <9C394E6A-BEBA-4585-A024-D6F330E6F907@dolphin-services.de>
References: <00a301c67475$e06eef00$6502a8c0@hercules>
	<7815703A-1713-44BF-90AC-E10C723490D8@cs.usfca.edu>
	<537739b70605101418s586f365aifcedb320f76b501@mail.gmail.com>
	<9C394E6A-BEBA-4585-A024-D6F330E6F907@dolphin-services.de>
Message-ID: <4462ED44.954F.0081.0@wicourts.gov>


>>> On Wed, May 10, 2006 at  6:40 pm, in message
<9C394E6A-BEBA-4585-A024-D6F330E6F907@dolphin-services.de>, Kay Roepke
<kroepke@dolphin-services.de> wrote: 

> On 10. May 2006, at 23:18 Uhr, David Moshal wrote:
> 
>> thanks Ter, actually, it's not quite fixed (though in the example  
>> it is).
>> What I really need to do is for the model to tell the view how many 

>> rows to
>> create, ie:
>>
>> <% for (int i=0; i< rowCount: i++) { %>
>>
>>  <tr> <td> <%=i%> </td></tr>
>>
>> <% } %>
>>
>> where the model passes in "rowCount".
> 
> Well, in my book I would make the controller(!) decide how the view 

> should display things like paging and supply it with the necessary
> datastructures.  It should be the model and the view that ideally are
 
> reusable -  the controller mostly isn't. Thus to implement paging,
> there shouldn't be a need for the view to know about it.
> I'd have one template that says how to render a single element, a  
> list of elements (say in a row), and the paging part of the list  
> (current page,
> total number of pages, etc.). They I'd have the controller to sort  
> out pagination and the number of elements in a list/row and have it 

> prepare
> the necessary datastructures.
> No need for any expressions in the view. Clean model, clean code,  
> messy controller. That's what you mostly end up with in the MVC  
> paradigm. Of course
> there are ways to get a little structure into the controller part,  
> but in my experience it will always stay glue code -  it has to know 

> about both the
> model and the view.

Kay's nice explanation got me thinking again about whether I've built
too much into my template by using JavaBeans.  My Java controller builds
up a complex JavaBean with multiple lists, accessors, etc, a full object
hierarchy.  I pass this object into the main template and each
successive template call unravels the object to render it.  The problem
(if there is one) is that these templates only work with the JavaBean
that they're designed for.  For instance, a template which accepts an
Sample object assumes that the sample objects has certain attributes and
operations.  I can't reuse the template out of the context of having a
Sample object already created by the controller and ready to go.  Would
it be better to "unravel" the Sample object in the Java code, setting
string attributes into the template in order to make the template more
generic?  My argument against this so far has been that in order for
anyone to use the template, they need to provide to the template (in
some form) all the information that the Sample object provides to the
template now, so if they didn't use the Sample object and it's internal
logic/methods to build up the information, they would have to duplicate
what the Sample object does somehow - because the template won't work
without it.  All this is fine and works great, I just have a sneaking
suspicion from reading the posts that I'm using the JavaBean feature of
ST more than anyone else.  It could be just my application is different
(generating database-independent SQL to promote a database schema to
support a new software version).

Andy


From dmoshal at gmail.com  Thu May 11 09:24:37 2006
From: dmoshal at gmail.com (David Moshal)
Date: Thu May 11 09:24:39 2006
Subject: [stringtemplate-interest] quick question
In-Reply-To: <9C394E6A-BEBA-4585-A024-D6F330E6F907@dolphin-services.de>
References: <00a301c67475$e06eef00$6502a8c0@hercules>
	<7815703A-1713-44BF-90AC-E10C723490D8@cs.usfca.edu>
	<537739b70605101418s586f365aifcedb320f76b501@mail.gmail.com>
	<9C394E6A-BEBA-4585-A024-D6F330E6F907@dolphin-services.de>
Message-ID: <537739b70605110924j7fdc29dv7d07d8cf7cb1a518@mail.gmail.com>

Kay - thanks for the advice, I've implemented something similar.

I guess my concern is regarding performance (I have built a 'near-real-time'
system, so I'm always concerned about performance).
Creating a list structure merely to tell the view that it needs to replicate
a template seems an unnesseccary performance hit, especially as the list in
my case is several thousand rows long,
ie several thousand objects created.

Surely being able to specify:
"repeat the followng code block n times, where n is an attribute", wouldn't
break the paradigm?

Dave


On 5/10/06, Kay Roepke <kroepke@dolphin-services.de> wrote:
>
>
> On 10. May 2006, at 23:18 Uhr, David Moshal wrote:
>
> > thanks Ter, actually, it's not quite fixed (though in the example
> > it is).
> > What I really need to do is for the model to tell the view how many
> > rows to
> > create, ie:
> >
> > <% for (int i=0; i< rowCount: i++) { %>
> >
> >  <tr> <td> <%=i%> </td></tr>
> >
> > <% } %>
> >
> > where the model passes in "rowCount".
>
> Well, in my book I would make the controller(!) decide how the view
> should display things like paging and supply it with the necessary
> datastructures.  It should be the model and the view that ideally are
> reusable - the controller mostly isn't. Thus to implement paging,
> there shouldn't be a need for the view to know about it.
> I'd have one template that says how to render a single element, a
> list of elements (say in a row), and the paging part of the list
> (current page,
> total number of pages, etc.). They I'd have the controller to sort
> out pagination and the number of elements in a list/row and have it
> prepare
> the necessary datastructures.
> No need for any expressions in the view. Clean model, clean code,
> messy controller. That's what you mostly end up with in the MVC
> paradigm. Of course
> there are ways to get a little structure into the controller part,
> but in my experience it will always stay glue code - it has to know
> about both the
> model and the view.
>
> Specifically for the example you gave above, I'd create a list of
> rowCount elements, with the elements being 0..rowCount-1. Then the
> template would be
> straightforward:
>
> <listOfNumbers:{i|\<tr>\<td><i>\</td>\</tr>}; separator="\n">
>
> Keeps the template nice and clean and easy to understand. When you're
> using templates, you'll always have to read the code that feeds data
> into the templates
> at the same time, otherwise you couldn't possibly know what the data
> structure is. That's one drawback of controller-view separation: You
> have to look
> in two spots to get the picture. But it is so useful to keep your
> code cleaner. :)
>
> > Regarding the "|" notation, I must confess that the documentation
> > does leave
> > me confused
> > - perhaps I just need to experiment a bit.
>
> The syntax is sort of looks like Smalltalk to me (well, ok, just a
> tiny bit ;)). Consider
>
> <list:{element|This is element number <element.cardinalNumber>.};
> separator="\n">
>
> The expression between '<' and ':' is the list of values/objects. The
> stuff name between '{' and '|' is the name of the local variable used
> to access the current element of that list. After the '|' comes the
> template contents (this maybe a another template reference and so on).
> The separator part is what goes between the template expansions (but
> not after the last element).
>
> (I don't want to sound lecturing, just hoping to make it clear :))
>
> -k
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org:8080/pipermail/stringtemplate-interest/attachments/20060511/f8653365/attachment.html
From parrt at cs.usfca.edu  Thu May 11 10:24:16 2006
From: parrt at cs.usfca.edu (Terence Parr)
Date: Thu May 11 10:24:20 2006
Subject: Design with JavaBeans or not (was Re: [stringtemplate-interest]
	quick question)
In-Reply-To: <4462ED44.954F.0081.0@wicourts.gov>
References: <00a301c67475$e06eef00$6502a8c0@hercules>
	<7815703A-1713-44BF-90AC-E10C723490D8@cs.usfca.edu>
	<537739b70605101418s586f365aifcedb320f76b501@mail.gmail.com>
	<9C394E6A-BEBA-4585-A024-D6F330E6F907@dolphin-services.de>
	<4462ED44.954F.0081.0@wicourts.gov>
Message-ID: <47FA0D8F-4E5E-4650-8B52-9C0FEE202A6B@cs.usfca.edu>

Hi Andrew,

I think what you're doing is ok.  Check the new ST paper:

http://www.cs.usfca.edu/~parrt/papers/ST.pdf

It shows a DFA in memory that is completely traversed and dumped to  
GraphViz DOT format and a Java program using same controller and two  
different groups.

Ter
From parrt at cs.usfca.edu  Thu May 11 10:27:02 2006
From: parrt at cs.usfca.edu (Terence Parr)
Date: Thu May 11 10:27:06 2006
Subject: [stringtemplate-interest] Re: [antlr-dev] Re: FYI: lookahead
	decision vars in switches
In-Reply-To: <C088B27A.721%jimi@intersystems.com>
References: <C088B27A.721%jimi@intersystems.com>
Message-ID: <027BD081-2E38-4C81-B089-DB76D6744E85@cs.usfca.edu>


On May 11, 2006, at 12:20 AM, Jim Idle wrote:
> Yes - I think it would be reasonable to add it to ST somehow. Of  
> course you
> can't really decide what type of comment to spit out, but if there  
> was an
> attribute available with information about the rule you could have  
> something
> like: <if(STDebug)>//<ruleDebugINfo><endif>  (Syntax was straight  
> out my
> head so it probably isn't correct but you get what I mean ;-)
>
> Or perhaps there is a way to specify a "debug rule info line"  
> prefix and
> postfix attribute then ST could use it to spit out the info  
> automatically?

I'm thinking that we want a method like

emitTemplateBoundaryDebugStrings("<!-- start $name$", "-->");

where the args are templates and may reference name for the  
template...what else would be useful?  The stack context like <!--  
[outputfile class method statement ... --> ?

[For those just tuning in from ST list: we want to print out text at  
start/stop of each template dumped out so we can figure out where  
text is coming from.]

Ter
From dmoshal at gmail.com  Thu May 11 11:28:56 2006
From: dmoshal at gmail.com (David Moshal)
Date: Thu May 11 11:29:00 2006
Subject: [stringtemplate-interest] quick question
In-Reply-To: <537739b70605110924j7fdc29dv7d07d8cf7cb1a518@mail.gmail.com>
References: <00a301c67475$e06eef00$6502a8c0@hercules>
	<7815703A-1713-44BF-90AC-E10C723490D8@cs.usfca.edu>
	<537739b70605101418s586f365aifcedb320f76b501@mail.gmail.com>
	<9C394E6A-BEBA-4585-A024-D6F330E6F907@dolphin-services.de>
	<537739b70605110924j7fdc29dv7d07d8cf7cb1a518@mail.gmail.com>
Message-ID: <537739b70605111128w59931730p9f3f86668efaa684@mail.gmail.com>

Ok - I found a simple and inexpensive solution to the 'apply template n
times problem'
(formerly know as a 'for loop'):

--------------
template.setAttribute ("n", new int[1000]);

------
$n:{

<tr><td>$i$</td></tr>

}$
---------

ST accepts arrays, java initializes arrays automatically, no this seems a
relatively inexpensive solution.

Dave




On 5/11/06, David Moshal <dmoshal@gmail.com> wrote:
>
> Kay - thanks for the advice, I've implemented something similar.
>
> I guess my concern is regarding performance (I have built a
> 'near-real-time' system, so I'm always concerned about performance).
> Creating a list structure merely to tell the view that it needs to
> replicate a template seems an unnesseccary performance hit, especially as
> the list in my case is several thousand rows long,
> ie several thousand objects created.
>
> Surely being able to specify:
> "repeat the followng code block n times, where n is an attribute",
> wouldn't break the paradigm?
>
> Dave
>
>
> On 5/10/06, Kay Roepke <kroepke@dolphin-services.de> wrote:
>
> >
> > On 10. May 2006, at 23:18 Uhr, David Moshal wrote:
> >
> > > thanks Ter, actually, it's not quite fixed (though in the example
> > > it is).
> > > What I really need to do is for the model to tell the view how many
> > > rows to
> > > create, ie:
> > >
> > > <% for (int i=0; i< rowCount: i++) { %>
> > >
> > >  <tr> <td> <%=i%> </td></tr>
> > >
> > > <% } %>
> > >
> > > where the model passes in "rowCount".
> >
> > Well, in my book I would make the controller(!) decide how the view
> > should display things like paging and supply it with the necessary
> > datastructures.  It should be the model and the view that ideally are
> > reusable - the controller mostly isn't. Thus to implement paging,
> > there shouldn't be a need for the view to know about it.
> > I'd have one template that says how to render a single element, a
> > list of elements (say in a row), and the paging part of the list
> > (current page,
> > total number of pages, etc.). They I'd have the controller to sort
> > out pagination and the number of elements in a list/row and have it
> > prepare
> > the necessary datastructures.
> > No need for any expressions in the view. Clean model, clean code,
> > messy controller. That's what you mostly end up with in the MVC
> > paradigm. Of course
> > there are ways to get a little structure into the controller part,
> > but in my experience it will always stay glue code - it has to know
> > about both the
> > model and the view.
> >
> > Specifically for the example you gave above, I'd create a list of
> > rowCount elements, with the elements being 0..rowCount-1. Then the
> > template would be
> > straightforward:
> >
> > <listOfNumbers:{i|\<tr>\<td><i>\</td>\</tr>}; separator="\n">
> >
> > Keeps the template nice and clean and easy to understand. When you're
> > using templates, you'll always have to read the code that feeds data
> > into the templates
> > at the same time, otherwise you couldn't possibly know what the data
> > structure is. That's one drawback of controller-view separation: You
> > have to look
> > in two spots to get the picture. But it is so useful to keep your
> > code cleaner. :)
> >
> > > Regarding the "|" notation, I must confess that the documentation
> > > does leave
> > > me confused
> > > - perhaps I just need to experiment a bit.
> >
> > The syntax is sort of looks like Smalltalk to me (well, ok, just a
> > tiny bit ;)). Consider
> >
> > <list:{element|This is element number <element.cardinalNumber>.};
> > separator="\n">
> >
> > The expression between '<' and ':' is the list of values/objects. The
> > stuff name between '{' and '|' is the name of the local variable used
> > to access the current element of that list. After the '|' comes the
> > template contents (this maybe a another template reference and so on).
> > The separator part is what goes between the template expansions (but
> > not after the last element).
> >
> > (I don't want to sound lecturing, just hoping to make it clear :))
> >
> > -k
> >
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org:8080/pipermail/stringtemplate-interest/attachments/20060511/123e3fa1/attachment.html
From dmoshal at gmail.com  Thu May 11 23:14:17 2006
From: dmoshal at gmail.com (David Moshal)
Date: Thu May 11 23:14:19 2006
Subject: [stringtemplate-interest] New question
Message-ID: <537739b70605112314s35f2b133n45c5707d586274c9@mail.gmail.com>

Sorry to be such a pest, here's a new question:

If know that I can get an iterator in the following way:

$arr:{

  $i$

}$


but what if I want nested iterators?

ie: in java
for (int i=0; i<10; i++)
{
   for (int j=0; j <10; j++)
   {

   }
}

is there a way in ST to get nested iterators? (I know one can get the nested
values of the collection)

Dave
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org:8080/pipermail/stringtemplate-interest/attachments/20060511/92ae00a0/attachment.html
From parrt at cs.usfca.edu  Thu May 11 23:20:00 2006
From: parrt at cs.usfca.edu (Terence Parr)
Date: Thu May 11 23:20:02 2006
Subject: [stringtemplate-interest] New question
In-Reply-To: <537739b70605112314s35f2b133n45c5707d586274c9@mail.gmail.com>
References: <537739b70605112314s35f2b133n45c5707d586274c9@mail.gmail.com>
Message-ID: <32ABBFF8-B337-4485-890B-199D468AAB35@cs.usfca.edu>


On May 11, 2006, at 11:14 PM, David Moshal wrote:

> Sorry to be such a pest, here's a new question:

Not a problem...glad to help.

> If know that I can get an iterator in the following way:
>
> $arr:{
>
>   $i$
>
> }$
>
>
> but what if I want nested iterators?
>
> ie: in java
> for (int i=0; i<10; i++)
> {
>    for (int j=0; j <10; j++)
>    {
>
>    }
> }
>
> is there a way in ST to get nested iterators? (I know one can get  
> the nested values of the collection)

Sure.  I think ;)  Probably involves passing a parameter to a  
subtemplate:

$numbers:{n | subtemplate(outer=i)}$

Hmm...something is bugging me about that...i.e., perhaps the outer=i  
will be evaluated in the subtempalte context...anyway, try it! :)   
use $outer$ and $i$ inside subtemplate.

Ter
From Ulf.Dreyer at de.bosch.com  Tue May 16 08:02:23 2006
From: Ulf.Dreyer at de.bosch.com (Dreyer Ulf (CR/APA3))
Date: Tue May 16 08:02:28 2006
Subject: [stringtemplate-interest] Top-Down automatic attribute aggregation?
Message-ID: <19D19E1AA3C5154D85A43D38808E48AB711675@fe-mail29.de.bosch.com>

Hi! 

I would like to automate the process of filling templates 
with attributes. 
The scenario is as follows: 
I have one root-template which calls al other needed templates. 
The data is in tree-form analogous to the templates. 

I would like to parse a xml file with all the data into the topmost
template. 
With the automation provided by template.setAttribute I am only able to 
construct attributes bottom-up. 
Is there some easy way to construct a full tree of data (which does
nocht resolve 
to fixed classes with getAttribute methods) and feed it to the root
template? 

Regards, 
Ulf Dreyer 


-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org:8080/pipermail/stringtemplate-interest/attachments/20060516/c903ac71/attachment.html
From parrt at cs.usfca.edu  Tue May 16 09:45:45 2006
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue May 16 09:45:51 2006
Subject: [stringtemplate-interest] Top-Down automatic attribute
	aggregation?
In-Reply-To: <19D19E1AA3C5154D85A43D38808E48AB711675@fe-mail29.de.bosch.com>
References: <19D19E1AA3C5154D85A43D38808E48AB711675@fe-mail29.de.bosch.com>
Message-ID: <8FE7A398-AFE4-4210-A5F6-DECA3CD6F122@cs.usfca.edu>

On May 16, 2006, at 8:02 AM, Dreyer Ulf (CR/APA3) wrote:
> Hi!
Howdy! :)
> I would like to automate the process of filling templates
> with attributes.
> The scenario is as follows:
> I have one root-template which calls al other needed templates.
> The data is in tree-form analogous to the templates.

Great!  Easy for ST to deal with.
> I would like to parse a xml file with all the data into the topmost  
> template.
Exactly correct.
> With the automation provided by template.setAttribute I am only  
> able to
> construct attributes bottom-up.
Just pass the tree in and then walk.  From

http://www.cs.usfca.edu/~parrt/papers/ST.pdf

preorder(t) ::= "<t.text> <t.children:preorder()>"

ain't that sweeet! :)
> Is there some easy way to construct a full tree of data (which does  
> nocht resolve
> to fixed classes with getAttribute methods) and feed it to the root  
> template?
Sure.  as long as it has children or some other structure.
Ter
From sohail at taggedtype.net  Tue May 16 21:16:24 2006
From: sohail at taggedtype.net (Sohail Somani)
Date: Tue May 16 21:16:32 2006
Subject: [stringtemplate-interest] Thanks
Message-ID: <1147839384.12203.7.camel@localhost.localdomain>

Just wanted to send a note to say thanks for helping me make a
successful project. Any limitations I've come across have been mine own.

Thanks!

From Ulf.Dreyer at de.bosch.com  Tue May 16 23:23:57 2006
From: Ulf.Dreyer at de.bosch.com (Dreyer Ulf (CR/APA3))
Date: Tue May 16 23:24:02 2006
Subject: [stringtemplate-interest] Top-Down automatic attribute aggregation?
Message-ID: <19D19E1AA3C5154D85A43D38808E48AB711676@fe-mail29.de.bosch.com>

Hello Terence,

thank you for the quick answer but I fear that
either I just don't get it or I didn't state my problem correctly
or it is just to early in the morning for functional programming. ;)

I'll try for a more precise problem description - if that still matches
what you had in mind then please elaborate on it because it's a case
of "I don't get it".

The data from the xml-file is non-uniform 
(meaning no single template can traverse the tree)
and the feed-mechanism should be independent from the templates.

sample data:

a
|
----b
|   - c
|   - d
|
|---b
|   - c
|   - d
|
|---x
    - y

whith template calls along the lines of

//in ATemplate :
$a.b:BTemplate()$
$XTemplate(a.x)$

//in BTemplate 
 someOutPutText using $it.c$ and calling $d:Dtemplate()$

The actual classes to hold the XML-data have
to be generic with some kind of getAttributeByName(String: aName);
- This is my first problem. I'm not sure how these "adaptor"-class 
should look for StringTemplate to handle it as
Key-value lookups are only supportet by maps. (By the way I am using
the C#-implementation of Stringtemplate and antrl)

I think the solution you gave does not exactly apply to this problem,
does it?
Some more Info:
I'd like to write a system which provides some data in the proposed
way and have different users write their own (different) templates 
using that data. (AND make that process as simple as possible - hence
the "automatism" for putting xml into the topmost template )

Looking forward to your advice,

Ulf

P.S.: Thank you for this gread piece of software and
      most of all for antlr (looking forward to 3.0)

[old solution:]
> Just pass the tree in and then walk.  From

> http://www.cs.usfca.edu/~parrt/papers/ST.pdf

> preorder(t) ::= "<t.text> <t.children:preorder()>"

> ain't that sweeet! :)
> > Is there some easy way to construct a full tree of data (which does

> > not resolve
> > to fixed classes with getAttribute methods) and feed it to the root

> > template?
> Sure.  as long as it has children or some other structure.
> Ter
From parrt at cs.usfca.edu  Wed May 17 14:39:15 2006
From: parrt at cs.usfca.edu (Terence Parr)
Date: Wed May 17 14:39:17 2006
Subject: [stringtemplate-interest] Top-Down automatic attribute
	aggregation?
In-Reply-To: <19D19E1AA3C5154D85A43D38808E48AB711676@fe-mail29.de.bosch.com>
References: <19D19E1AA3C5154D85A43D38808E48AB711676@fe-mail29.de.bosch.com>
Message-ID: <30AC6BE6-88B0-4C5B-9F27-04D26D2CE237@cs.usfca.edu>


>
> a
> |
> ----b
> |   - c
> |   - d
> |
> |---b
> |   - c
> |   - d
> |
> |---x
>     - y
>
> whith template calls along the lines of
>
> //in ATemplate :
> $a.b:BTemplate()$
> $XTemplate(a.x)$
>
> //in BTemplate
>  someOutPutText using $it.c$ and calling $d:Dtemplate()$
>
> The actual classes to hold the XML-data have
> to be generic with some kind of getAttributeByName(String: aName);

You should probably structure it so that the children are in a map.   
You can then say: $node.child$ to get the child subtree.

> - This is my first problem. I'm not sure how these "adaptor"-class
> should look for StringTemplate to handle it as
> Key-value lookups are only supportet by maps. (By the way I am using
> the C#-implementation of Stringtemplate and antrl)

Yeah, i'd go with the map.  Might have to wrap those objects if you  
have no control over them to change their implementation.

> I think the solution you gave does not exactly apply to this problem,
> does it?

Yes, but my trees just have lists of children...i don't care about  
the XML schema in my case.  For you, you can make a template  
hierarchy that is equiv to an XML DTD no problem, but if that schema  
is diff each time, you'll need a new ST group for each possible tree  
structure.

> Some more Info:
> I'd like to write a system which provides some data in the proposed
> way and have different users write their own (different) templates
> using that data. (AND make that process as simple as possible - hence
> the "automatism" for putting xml into the topmost template )

This should work great with ST. :)

> P.S.: Thank you for this gread piece of software and
>       most of all for antlr (looking forward to 3.0)

You are very welcome :)

Ter

From Ulf.Dreyer at de.bosch.com  Wed May 17 23:45:08 2006
From: Ulf.Dreyer at de.bosch.com (Dreyer Ulf (CR/APA3))
Date: Wed May 17 23:45:13 2006
Subject: [stringtemplate-interest] Top-Down automatic attributeaggregation?
In-Reply-To: <30AC6BE6-88B0-4C5B-9F27-04D26D2CE237@cs.usfca.edu>
Message-ID: <19D19E1AA3C5154D85A43D38808E48AB711681@fe-mail29.de.bosch.com>

Hello Terence,

thank you again for another quick answer (minus several
hours of time difference).
One last (I hope) call to you if I got the idea right
or if I am violating ST in every possible way.
I've been looking into ST only the past few days and
don't want to end up on thedailywtf.com because of
my lack of understanding about it ;) 

[...] see old mails
> > The actual classes to hold the XML-data have
> > to be generic with some kind of getAttributeByName(String: aName);
> 
> You should probably structure it so that the children are in a map.   
> You can then say: $node.child$ to get the child subtree.
[...]
> 
> Yeah, i'd go with the map.  Might have to wrap those objects if you  
> have no control over them to change their implementation.

I think, I've worked it out. After looking closely at StringTemplate.cs
I now create a tree structure of alternating Hashtables and ArrayLists 
and put them into the root-templaty via rootTemplate.Attributes=XYZ
(this is a public r/w property in the c# implementation - I haven't 
testet in Java)

XYZ = Hashtable[AttributeA,AttributeB,AttributeC]
AttributeA = ArrayList[Hashtable[AttributeAA,AttributeAB...]
AttributeB = ArrayList[Hashtable[AttributeBA,AttributeBB...]

Here is the part where you scream "NOOOO! It wasn't meant that way!"
Or - better yet - say "That's what I meant"

Bye,

Ulf

P.S. I really hope I made less typos than I did yesterday even though
     it's just as early.
From Kunle_Odutola at hotmail.com  Thu May 18 06:42:10 2006
From: Kunle_Odutola at hotmail.com (Kunle Odutola)
Date: Thu May 18 06:24:51 2006
Subject: [stringtemplate-interest] Top-Down automatic attributeaggregation?
References: <19D19E1AA3C5154D85A43D38808E48AB711681@fe-mail29.de.bosch.com>
Message-ID: <BAY101-DAV11603E3D8EED220030D58D81A60@phx.gbl>

Hi Ulf,

> > Ter said:
> > Yeah, i'd go with the map.  Might have to wrap those objects if you
> > have no control over them to change their implementation.

> Ulf replied:
> I think, I've worked it out. After looking closely at StringTemplate.cs
> I now create a tree structure of alternating Hashtables and ArrayLists
> and put them into the root-templaty via rootTemplate.Attributes=XYZ
> (this is a public r/w property in the c# implementation - I haven't
> testet in Java)

You are right that Attributes is currently a part of the public ST API. I'm
not convinced that it should continue to do so however.
For your particular situation, why did you reject the more obvious
SetAttribute("root", XYZ) or similar?

> XYZ = Hashtable[AttributeA,AttributeB,AttributeC]
> AttributeA = ArrayList[Hashtable[AttributeAA,AttributeAB...]
> AttributeB = ArrayList[Hashtable[AttributeBA,AttributeBB...]
>
> Here is the part where you scream "NOOOO! It wasn't meant that way!"
> Or - better yet - say "That's what I meant"

I'd suggest the SetAttribute() option simply because SetAttribute() does
more than just hook up an attribute map.


Kunle

PS    The issue you reported has been fixed in the depot. Thanks. I'll try
and get something out to you.
From parrt at cs.usfca.edu  Thu May 18 15:11:46 2006
From: parrt at cs.usfca.edu (Terence Parr)
Date: Thu May 18 15:11:52 2006
Subject: [stringtemplate-interest] almost ready for ST 2.3eb7 :)
Message-ID: <7F843A1F-40C2-426C-99C8-983FD45EFF09@cs.usfca.edu>

Hi,

I have just finished a big list of bug fixes.  Kunle is almost caught  
up with the C# version.  We should be able to push in a matter of  
days.  This will be damn close to a 2.3 full release.  I want some  
more features, but I should get this version out and leave room for  
2.4 :)

Ter
From parrt at cs.usfca.edu  Thu May 18 15:12:50 2006
From: parrt at cs.usfca.edu (Terence Parr)
Date: Thu May 18 15:12:53 2006
Subject: [stringtemplate-interest] added build.xml ANT cruft to ST main dir
Message-ID: <12381647-140B-422D-807B-8D25E7089A14@cs.usfca.edu>

Hi, it seems to sort of work...got it from Dieter Wimberger and  
modified a bit...added antlr generation stuff...not quite  
right...but, it's there :)

Ter
From parrt at cs.usfca.edu  Sat May 20 11:49:08 2006
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sat May 20 11:49:15 2006
Subject: [stringtemplate-interest] ST 2.3b7 released
Message-ID: <A88AE9EE-60F2-4A1A-8030-332465F99AFD@cs.usfca.edu>

Howdy,

Pushed another beta of ST 2.3, very close to final.

Changes:

http://www.stringtemplate.org/bugs.tml

Download:

http://www.antlr.org/download/stringtemplate-2.3b7.tar.gz

A few backward compatibility issues: no dots in attr or template  
names, <..> are default delimiters for group files now.

Ter
From parrt at cs.usfca.edu  Sat May 20 13:14:47 2006
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sat May 20 13:14:51 2006
Subject: [stringtemplate-interest] released Mantra prototype 0.1 as ANTLR v3
	example
Message-ID: <8E9972AA-8896-449B-8AA6-C1350E0ED81D@cs.usfca.edu>

Hi,

To see a real example with v3 (4 pass translator incorporating  
StringTemplate for code generation), please see:

http://www.linguamantra.org

You'll see I've updated the page to have a real working example.   
Mantra looks really great if you ask me! ;)

Requires latest ST and ANTLR (released today).

Ter

From kroepke at dolphin-services.de  Sat May 20 20:52:29 2006
From: kroepke at dolphin-services.de (Kay Roepke)
Date: Sat May 20 20:52:33 2006
Subject: [stringtemplate-interest] ST/ANTLR debugging
Message-ID: <7F7B41E6-D5D4-43F2-B9B4-0C1C5C32C835@dolphin-services.de>

Cheers, folks!

I'm currently contemplating taking a step back from the iterative fix- 
and-run-and-fix-and-run v3 codegen development and began thinking
how the development process could be a bit less painful.

A couple of points that make trouble:
1) ActionTranslator.java of v3-fame uses a lot of templates from the  
codegen template group and fills it with some obscure values from the  
AST.
2) Stuff missing/buggy from the antlr.g grammar requires constant  
rebuilding and painful reading of serialized trees.
3) Deciding which templates need which additional information is hard  
to do, given the current layout of ActionTranslator (Ter wants to  
rewrite that
    beast anyway). Sometimes some I need information a points where  
it is either not available yet, or only part of the information is  
passed into the
    templates. (The latest being rule return values, which appear in  
a deeply nested scope, and thus aren't available in later actions,  
due to wrong scoping.)

All told it is a rather unpleasant hack and hunt experience.

To make development easier, it would be helpful to have a decent  
mechanism to write a debugger/analysis tool, which would allow me to see
1) the complete AST of the grammar as it is being parsed (and maybe  
even set breakpoints)
2) each and every template used and attribute set as it is happening  
(including callstacks from the Java files). This should include the  
template source and
    all attributes in a textual manner. Kinda hard for objects.
    With this it would be possible to assemble a complete tree of  
templates used and have all the attribue values available without  
doing printf debugging.

Ideally this implementation would allow for some kind of step/break  
mechanism and be platform agnostic. (Think sockets or so)

I already did a small proof-of-concept app for ST that is able to  
trace simple attribute setting (for text/booleans) but it is closely  
tied to the Mac. I wouldn't
propose to integrate this into ST but rather supply patch files and  
the monitor app (to interested parties|online).
If no one is really interested in this, I'll just dash forward, but  
it may appeal to some other folks, too.

v2 has some debugging capabilities (I think Scott Stanchfield did it)  
but it didn't work for me and is also missing tree parser stuff,  
AFAICS. This would be
extremely important, though.

Any ideas, comments?

-k
From kroepke at dolphin-services.de  Sun May 21 15:56:35 2006
From: kroepke at dolphin-services.de (Kay Roepke)
Date: Sun May 21 15:56:41 2006
Subject: [antlr-dev] Re: [stringtemplate-interest] ST/ANTLR debugging
In-Reply-To: <DD28B065-5C8D-4999-B0E0-3A2A6C360D06@dolphin-services.de>
References: <7F7B41E6-D5D4-43F2-B9B4-0C1C5C32C835@dolphin-services.de>
	<EB7D1C1C-924F-47F8-97CF-1E3E76E0F8B1@cs.usfca.edu>
	<DD28B065-5C8D-4999-B0E0-3A2A6C360D06@dolphin-services.de>
Message-ID: <C03C506D-F3F0-4B59-8BA6-C6E5F55E6321@dolphin-services.de>


On 21. May 2006, at 21:15 Uhr, Kay Roepke wrote:

> The basic idea is to provide a point where ST registers decisions  
> taken, templates instantiated, attributes set, and output written.  
> Add a couple of helper classes to serialize
> important objects like Rule from v3 and a separated application  
> that listens for these events and then puts them in the right  
> order. Do some analysis on the data and you can do
> a hell of lot for the poor guy figuring out where that dreaded  
> attribute is coming from. All in one place, even with templates  
> instantiated in the CodegenTreeWalker. Thanks to
> the included stacktraces in the events you know instantly where to  
> look. No find dialog and single stepping required, unless you need  
> to know exactly what happens.

Ok. Just FYI Ter and I have spoken earlier about this thing and came  
to the agreement that it would be a nice thing to integrate this into  
ST. As Jean Bovet is currently busy, we will
have to wait for him to integrate it into ANTLRWorks but both like to  
see it integrated.

I'm currently reading the code to identify the spots which need to  
emit tracing events. The goal is to integrate this into some future  
ST release.
The preliminary list is:
1) set attribute event - comes in different flavors depending on what  
the type of the value is
2) instantiate template event - also different flavors (call of anon  
template, call of name template, separate instantiate but set as an  
attribute)
3) boolean expression event - aka if condition
4) template write events - show the actual uses of attributes (#3 is  
a special case of this as I suddenly realize ;))

The list may not be complete or even may be obese at the moment, but  
I'm still reading.

My initial implementation will be Mac OS X only, but the relevant  
code will be separate and I will try to provide reasonable  
documentation for the protocol used, so that it shall be
easy for folks to implement a different client/transportation mode  
(sockets or whatever).
I'll also provide the separate Debug/Tracer application in source and  
binary, so people can play with it/enhance it/port it. I hope Jean  
comes back into the action soon, so he can integrate this
in ANTLRWorks.

Aah, and the serialized form of the attributes will be string-based  
for now, because it's pretty hard to do a general case mechanism for  
each and every object people can stuff into
ST. I'm thinking about providing such serialization classes to all  
important v3 classes that might be interesting, but first things  
first ;)

-k
From Ulf.Dreyer at de.bosch.com  Mon May 22 04:01:50 2006
From: Ulf.Dreyer at de.bosch.com (Dreyer Ulf (CR/APA3))
Date: Mon May 22 04:02:04 2006
Subject: AW: [stringtemplate-interest] Top-Down automatic attributeaggregation?
In-Reply-To: <BAY101-DAV11603E3D8EED220030D58D81A60@phx.gbl>
Message-ID: <19D19E1AA3C5154D85A43D38808E48AB711687@fe-mail29.de.bosch.com>

Hi!


I've encountered some more problems along the way.

First as always the facts:

> > Ulf replied:
> > I think, I've worked it out. After looking closely at 
> > StringTemplate.cs I now create a tree structure of 
> > alternating Hashtables and ArrayLists

Hashtable[Att-Name_1, Att-Name_2, Att-Name_3]

Att-Name_1 = ArrayList[1,2,3,4]

An Attribute can be:
   An ArrayList containing either more Hashtables(deeper nesting) 
                               or a single String 

> > and put them into the root-templaty via rootTemplate.Attributes=XYZ
> > (this is a public r/w property in the c# implementation - I haven't
> > testet in Java)
[...]
> I'd suggest the SetAttribute() option simply because 
> SetAttribute() does
> more than just hook up an attribute map.

Now I use SetAttribute() - I think somewhere during my futile tries 
it didn't work with SetAttribute - I tried with the r/w-Property (which
probably
didn't work either) and then left it that way.

WHAT WORKS:

   Calling strictly hirarchical templates does work with this structure.

   With a datastructure of    Foo.Bar
			               .FooBar

    TemplateA(Foo) ::= << $Foo:TemplateB$ >>
    TemplateB()    ::= << $it.Bar$ ; $it.FooBar$ >>

   evaluates correctly.

PROBLEM:
   
    I now can NOT access the deeper nestings of the structure.
    With above structure the following access

    TemplateA(Foo) ::= << $Foo.FooBar$ >>

    gives me a
    "Class System.Collections.ArrayList has no such attribute: 
     FooBar in template context [TemplateA]"
    
    When calling subtemplates with parameters ST seems to 
    'ignore' the additional ArrayList-layer (resolving it as expected)
    but when accessing Foo.FooBar the ArrayList gets in the way.
    A Call to Foo.attributeList.FooBar also fails 
    attributeList is my (for testing public) member which holds
    the ArrayList. (it involves wrapping ArrayList and giving it
    an accessor which (called with the string that designates
    the AL in the parent Hashtable) returns a reference to itself (the
AL).
    This would of course be extremely bad style and introduce cycles 
    into the graph.)

 My Ideas of solving this dilemma are all VERY messy and (due to
 time restrictions) only ideas at this point.

So I have to ask: Has anyone any experience with this problem?
 Or do you Terence or Kunle have an idea to how a suitable data
 structure has to look?

 I don't have enough understanding of how ST gets its attributes
 from a given datastructure to figure out something better.

I fear to ask how this would work out referencing PARENT attributes
from sub-templates.

Kunle wrote:
> PS    The issue you reported has been fixed in the depot. 
> Thanks. I'll try
> and get something out to you.
Thanks a lot!
From Kunle_Odutola at hotmail.com  Wed May 24 17:12:09 2006
From: Kunle_Odutola at hotmail.com (Kunle Odutola)
Date: Wed May 24 16:54:35 2006
Subject: [stringtemplate-interest] Top-Down automatic attributeaggregation?
References: <19D19E1AA3C5154D85A43D38808E48AB711687@fe-mail29.de.bosch.com>
Message-ID: <BAY101-DAV160CB3D2768DA18565092A81980@phx.gbl>

> Hi!

G'day Ulf,



> An Attribute can be:

> An ArrayList containing either more Hashtables(deeper nesting)

> or a single String



ST# treats attributes whose values are of types that implement IList
specially. They are considered to be multi-valued attributes.



> WHAT WORKS:

>

> Calling strictly hirarchical templates does work with this

> structure.

>

> With a datastructure of Foo.Bar

> .FooBar

>

> TemplateA(Foo) ::= << $Foo:TemplateB$ >>

> TemplateB() ::= << $it.Bar$ ; $it.FooBar$ >>

>

> evaluates correctly.

>

> PROBLEM:

>

> I now can NOT access the deeper nestings of the structure.

> With above structure the following access

>

> TemplateA(Foo) ::= << $Foo.FooBar$ >>

>

> gives me a

> "Class System.Collections.ArrayList has no such attribute:

> FooBar in template context [TemplateA]"

>

> When calling subtemplates with parameters ST seems to

> 'ignore' the additional ArrayList-layer (resolving it as expected)

> but when accessing Foo.FooBar the ArrayList gets in the way.

> A Call to Foo.attributeList.FooBar also fails

> attributeList is my (for testing public) member which holds

> the ArrayList. (it involves wrapping ArrayList and giving it

> an accessor which (called with the string that designates

> the AL in the parent Hashtable) returns a reference to

> itself (the AL).



I might be missing something here but, ArrayList instances don't have a
FooBar member.



> So I have to ask: Has anyone any experience with this

> problem? Or do you Terence or Kunle have an idea to how a

> suitable data structure has to look?



No specials requirements beyond keeping in mind that ILists (e.g. arrays,
arraylists etc) are treated specially. If you do use a list, remember that
you won't be able to access members by index. They are considered to be
multi-valued attributes and you can iterate over the contents as one would
expect.



> I don't have enough understanding of how ST gets its

> attributes from a given datastructure to figure out something better.

>

> I fear to ask how this would work out referencing PARENT

> attributes from sub-templates.



What are parent attributes?



Kunle


From rw1836 at yahoo.com  Thu May 25 13:13:39 2006
From: rw1836 at yahoo.com (John RW)
Date: Thu May 25 13:13:42 2006
Subject: [stringtemplate-interest] multivalue checking
Message-ID: <20060525201339.6547.qmail@web34413.mail.mud.yahoo.com>

I have a 'namespaces' attribute, which holds a set of namespaces, each having a 'prefix' and a 'uri', now in my template, I want to check if there is a default namespace (with prefix=null), if so I generate a tag with that uri, if there is not, I generate a tag with a default value.
   
  So it boils down to checking if any of the attributes has certain value. I don't know how to do that in stringtemplate. Thanks.
   
  John.

		
---------------------------------
Do you Yahoo!?
 Everyone is raving about the  all-new Yahoo! Mail Beta.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org:8080/pipermail/stringtemplate-interest/attachments/20060525/a071d5ab/attachment.html
From kroepke at dolphin-services.de  Thu May 25 13:25:44 2006
From: kroepke at dolphin-services.de (Kay Roepke)
Date: Thu May 25 13:25:49 2006
Subject: [stringtemplate-interest] multivalue checking
In-Reply-To: <20060525201339.6547.qmail@web34413.mail.mud.yahoo.com>
References: <20060525201339.6547.qmail@web34413.mail.mud.yahoo.com>
Message-ID: <15B4217C-BEC7-4FB8-9126-74D7EA84C483@dolphin-services.de>


On 25. May 2006, at 22:13 Uhr, John RW wrote:

> So it boils down to checking if any of the attributes has certain  
> value. I don't know how to do that in stringtemplate.

Depending on the template lexer you use (if you don't know, it's the  
one with the $-signs ;)) you can do this:

classDump:/tmp kroepke$ cat ST.java
import org.antlr.stringtemplate.*;

public class ST {
         public static void main(String[] args) throws Exception {
	        StringTemplate st = new StringTemplate("foo ::= \"$if(foo) 
$foo exists$else$foo is fubar$endif$\"");
	        st.setAttribute("foo", null);
	        System.out.println(st.toString());
	}
}


In other words: use $if(namespace)$namespace is not null$endif$ to  
check for a value.

HTH,

-k
From jgray at siberra.com  Thu May 25 14:13:20 2006
From: jgray at siberra.com (Jeremy Gray)
Date: Thu May 25 14:13:37 2006
Subject: [stringtemplate-interest] ST# - question regarding special casing
	of IList
Message-ID: <9E60A7FA5322F841856BE6E670F3E7B615038F78@CPREXN020-EVS.itdmis02.futureshop.com>

Following on from Kunle's recent post regarding special casing of IList,
I was wondering if Kunle or someone else could comment on why IList was
selected for special casing as a multi-valued attribute. The .net design
guidelines suggest that IList be targeted if the list is to be modified,
ICollection if they need counts of list members and/or access by index,
and IEnumerable if none of these are needed. Is there a particular
reason for ST# to target IList and/or to not target IEnumerable?

 

Thanks in advance,

 

Jeremy Gray

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org:8080/pipermail/stringtemplate-interest/attachments/20060525/65e50f5f/attachment.html
From rw1836 at yahoo.com  Thu May 25 14:14:36 2006
From: rw1836 at yahoo.com (John RW)
Date: Thu May 25 14:14:38 2006
Subject: [stringtemplate-interest] multivalue checking
In-Reply-To: <15B4217C-BEC7-4FB8-9126-74D7EA84C483@dolphin-services.de>
Message-ID: <20060525211436.44912.qmail@web34415.mail.mud.yahoo.com>

Well, I think this does not quite answer my question:
   
  You code is
    $if(foo)$  foo $else$ bar $endif$
   
  what I want is something like:
   
  $if there_is_one_true(foos)$ foo $else$ bar $endif$
   
  Please help.  

Kay Roepke <kroepke@dolphin-services.de> wrote:
  
On 25. May 2006, at 22:13 Uhr, John RW wrote:

> So it boils down to checking if any of the attributes has certain 
> value. I don't know how to do that in stringtemplate.

Depending on the template lexer you use (if you don't know, it's the 
one with the $-signs ;)) you can do this:

classDump:/tmp kroepke$ cat ST.java
import org.antlr.stringtemplate.*;

public class ST {
public static void main(String[] args) throws Exception {
StringTemplate st = new StringTemplate("foo ::= \"$if(foo) 
$foo exists$else$foo is fubar$endif$\"");
st.setAttribute("foo", null);
System.out.println(st.toString());
}
}


In other words: use $if(namespace)$namespace is not null$endif$ to 
check for a value.

HTH,

-k


		
---------------------------------
Ring'em or ping'em. Make  PC-to-phone calls as low as 1?/min with Yahoo! Messenger with Voice.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org:8080/pipermail/stringtemplate-interest/attachments/20060525/7228743c/attachment.html
From kroepke at dolphin-services.de  Thu May 25 14:23:59 2006
From: kroepke at dolphin-services.de (Kay Roepke)
Date: Thu May 25 14:24:04 2006
Subject: [stringtemplate-interest] multivalue checking
In-Reply-To: <20060525211436.44912.qmail@web34415.mail.mud.yahoo.com>
References: <20060525211436.44912.qmail@web34415.mail.mud.yahoo.com>
Message-ID: <C4224F35-0B49-4BA9-A055-9FF9F3CAC7B6@dolphin-services.de>


On 25. May 2006, at 23:14 Uhr, John RW wrote:

> Well, I think this does not quite answer my question:
>
>   You code is
>     $if(foo)$  foo $else$ bar $endif$
>
>   what I want is something like:
>
>   $if there_is_one_true(foos)$ foo $else$ bar $endif$

Oh, I'm sorry, misunderstood you there.

There is no way to do that in ST itself, as ST be design doesn't  
allow expressions in templates. You'll need to pass in some attribute
like hasMultipleFoos or singleFoo or whatever and test that with an if.
You can test for true/false, null/not null, empty list/non-empty list  
but not for list has n elements.

-k
From Kunle_Odutola at hotmail.com  Thu May 25 16:12:38 2006
From: Kunle_Odutola at hotmail.com (Kunle Odutola)
Date: Thu May 25 15:55:09 2006
Subject: [stringtemplate-interest] ST# - question regarding special casing
	of IList
References: <9E60A7FA5322F841856BE6E670F3E7B615038F78@CPREXN020-EVS.itdmis02.futureshop.com>
Message-ID: <BAY101-DAV13382F887671CE15CB104981990@phx.gbl>

Jeremy,

> Following on from Kunle's recent post regarding special casing of IList,
> I was wondering if Kunle or someone else could comment on why IList was
> selected for special casing as a multi-valued attribute. The .net design
> guidelines suggest that IList be targeted if the list is to be modified,
> ICollection if they need counts of list members and/or access by index,
> and IEnumerable if none of these are needed.

ICollection doesn't allow access by index iirc.

> Is there a particular
> reason for ST# to target IList and/or to not target IEnumerable?

Virtually all .NET collections (including ILists, IDictionaries etc) are
IEnumerable.


Kunle


From jgray at siberra.com  Thu May 25 16:39:10 2006
From: jgray at siberra.com (Jeremy Gray)
Date: Thu May 25 16:39:13 2006
Subject: [stringtemplate-interest] ST# - question regarding special
	casingof IList
Message-ID: <9E60A7FA5322F841856BE6E670F3E7B615039236@CPREXN020-EVS.itdmis02.futureshop.com>

Re: ICollection - correct, it is IList that adds access by index. Sorry
about the confusion on that. That said, I wasn't aware that ST# needed
access by index, or even to the count exposed by ICollection. Is there
something about ST# I'm not aware of?

Re: IEnumerable - correct, virtually all .net collections are
IEnumerable. My point was that there are classes out there that are
IEnumerable but not ICollection or IList, and since it would seem that
ST# doesn't need ICollection or IList, why restrict it so that it cannot
enumerate those objects that only implement IEnumerable.

Jeremy

-----Original Message-----
From: stringtemplate-interest-bounces@antlr.org
[mailto:stringtemplate-interest-bounces@antlr.org] On Behalf Of Kunle
Odutola
Sent: Thursday, May 25, 2006 4:13 PM
To: stringtemplate-interest@antlr.org
Subject: Re: [stringtemplate-interest] ST# - question regarding special
casingof IList

Jeremy,

> Following on from Kunle's recent post regarding special casing of
IList,
> I was wondering if Kunle or someone else could comment on why IList
was
> selected for special casing as a multi-valued attribute. The .net
design
> guidelines suggest that IList be targeted if the list is to be
modified,
> ICollection if they need counts of list members and/or access by
index,
> and IEnumerable if none of these are needed.

ICollection doesn't allow access by index iirc.

> Is there a particular
> reason for ST# to target IList and/or to not target IEnumerable?

Virtually all .NET collections (including ILists, IDictionaries etc) are
IEnumerable.


Kunle


_______________________________________________
stringtemplate-interest mailing list
stringtemplate-interest@antlr.org
http://www.antlr.org:8080/mailman/listinfo/stringtemplate-interest


From r.paterson at ioof.com.au  Thu May 25 16:44:05 2006
From: r.paterson at ioof.com.au (PATERSON, Robert)
Date: Thu May 25 16:44:09 2006
Subject: [stringtemplate-interest] ST# - question regarding
	specialcasingof IList
Message-ID: <FB120A6865FF7741A38A948247A91F12030C7013@MELSSRV007.ioof.com.au>

In the Java version of ST, I think specific collection types (HashMap)
were chosen in favour of the more generic Map interface to avoid people
breaking the ST 'view only' model by implementing the interface with
putters and getters that have side effects. IIRC.

Regards,

Rob Paterson


****************************************************************************
IMPORTANT - PLEASE READ
This communication is intended only for the use of the addressee and 
may contain personal information, confidential information or legally 
privileged information. If personal information is contained in this e-mail, 
then it is governed by the Privacy Act 1988 and must be treated in 
accordance with the Privacy Act 1988 by the recipient. The legal 
privilege and confidentiality attached to this e-mail is not waivered, 
lost or destroyed by reason of mistaken delivery to you. If you are not 
the intended recipient, we would appreciate immediate notification by 
return e-mail or telephoning +61-3-8614-4444 and ask that the message 
be permanently deleted from your system. If you are the intended 
recipient of this communication you should not copy, disclose or distribute this communication without the authority of IOOF or its related entities (the IOOF Group).
Any views expressed in this message are those of the individual sender, 
except where they are specifically stated to be the views of the IOOF 
Group.
This e-mail and any attachments have been scanned for computer viruses 
using anti-viral software, but you should also perform your own scan. We 
do not accept liability for any loss or damage, whether caused by our own negligence or not, that results from a computer virus or a defect in the transmission of the e-mail or any attached file.
****************************************************************************

From parrt at cs.usfca.edu  Thu May 25 16:49:20 2006
From: parrt at cs.usfca.edu (Terence Parr)
Date: Thu May 25 16:49:23 2006
Subject: [stringtemplate-interest] ST# - question regarding
	specialcasingof IList
In-Reply-To: <FB120A6865FF7741A38A948247A91F12030C7013@MELSSRV007.ioof.com.au>
References: <FB120A6865FF7741A38A948247A91F12030C7013@MELSSRV007.ioof.com.au>
Message-ID: <4814BF7F-FD2A-4851-8CF3-57560F5FB296@cs.usfca.edu>


On May 25, 2006, at 4:44 PM, PATERSON, Robert wrote:

> In the Java version of ST, I think specific collection types (HashMap)
> were chosen in favour of the more generic Map interface to avoid  
> people
> breaking the ST 'view only' model by implementing the interface with
> putters and getters that have side effects. IIRC.

Yep, but I was convinced to open it up even though it's a risk...it's  
just too useful.

Ter
From Kunle_Odutola at hotmail.com  Thu May 25 17:48:12 2006
From: Kunle_Odutola at hotmail.com (Kunle Odutola)
Date: Thu May 25 17:30:44 2006
Subject: [stringtemplate-interest] ST# - question regarding
	specialcasingof IList
References: <9E60A7FA5322F841856BE6E670F3E7B615039236@CPREXN020-EVS.itdmis02.futureshop.com>
Message-ID: <BAY101-DAV258EB8FA9ED0A1788DF61819E0@phx.gbl>

Jeremy,

> Re: IEnumerable - correct, virtually all .net collections are
> IEnumerable. My point was that there are classes out there
> that are IEnumerable but not ICollection or IList, and since
> it would seem that ST# doesn't need ICollection or IList, why
> restrict it so that it cannot enumerate those objects that
> only implement IEnumerable.

Are you asking why ST# doesn't treat all attributes whose value is of a type
that implement IEnumerable as multi-valued?

Kunle
From jgray at siberra.com  Thu May 25 17:43:51 2006
From: jgray at siberra.com (Jeremy Gray)
Date: Thu May 25 17:44:19 2006
Subject: [stringtemplate-interest] ST# - question regardingspecialcasingof
	IList
Message-ID: <9E60A7FA5322F841856BE6E670F3E7B6150392DD@CPREXN020-EVS.itdmis02.futureshop.com>

The short answer is yes. ST# could treat as multi-valued anything that
implements IEnumerable.

With that in mind, for those objects that support more than IEnumerable
there is also nothing to stop ST# from allowing both of the following,
the first of which I understand from a recent mailing list post is
currently not possible:

$list.Count$
$list:template()$

Jeremy 

-----Original Message-----
From: stringtemplate-interest-bounces@antlr.org
[mailto:stringtemplate-interest-bounces@antlr.org] On Behalf Of Kunle
Odutola
Sent: Thursday, May 25, 2006 5:48 PM
To: stringtemplate-interest@antlr.org
Subject: Re: [stringtemplate-interest] ST# - question
regardingspecialcasingof IList

Jeremy,

> Re: IEnumerable - correct, virtually all .net collections are
> IEnumerable. My point was that there are classes out there
> that are IEnumerable but not ICollection or IList, and since
> it would seem that ST# doesn't need ICollection or IList, why
> restrict it so that it cannot enumerate those objects that
> only implement IEnumerable.

Are you asking why ST# doesn't treat all attributes whose value is of a
type
that implement IEnumerable as multi-valued?

Kunle
_______________________________________________
stringtemplate-interest mailing list
stringtemplate-interest@antlr.org
http://www.antlr.org:8080/mailman/listinfo/stringtemplate-interest


From Kunle_Odutola at hotmail.com  Thu May 25 18:25:22 2006
From: Kunle_Odutola at hotmail.com (Kunle Odutola)
Date: Thu May 25 18:07:50 2006
Subject: [stringtemplate-interest] ST# - question
	regardingspecialcasingofIList
References: <9E60A7FA5322F841856BE6E670F3E7B6150392DD@CPREXN020-EVS.itdmis02.futureshop.com>
Message-ID: <BAY101-DAV67B89814939F0160FC984819E0@phx.gbl>

Jeremy,

> The short answer is yes. ST# could treat as multi-valued anything that
> implements IEnumerable.

True. I could have but, that creates other issues e.g. with attributes of
type Hashtable/IDictionary for instance.

> With that in mind, for those objects that support more than IEnumerable
> there is also nothing to stop ST# from allowing both of the following,
> the first of which I understand from a recent mailing list post is
> currently not possible:
>
> $list.Count$

Have you actually tried this with an ICollection?. And an IList.

> $list:template()$

Template application is applicable to all attributes.

Kunle
From jgray at siberra.com  Thu May 25 18:21:22 2006
From: jgray at siberra.com (Jeremy Gray)
Date: Thu May 25 18:21:25 2006
Subject: [stringtemplate-interest] ST# -
	questionregardingspecialcasingofIList
Message-ID: <9E60A7FA5322F841856BE6E670F3E7B615039314@CPREXN020-EVS.itdmis02.futureshop.com>

Re: "other issues e.g. with attributes of type Hashtable/IDictionary for
instance" - They too are special-cased, though at a higher level of
priority, so I'm not sure how that presents any more of an issue given
that they too already implement IList and it isn't a problem at the
moment.

Re: "Have you actually tried this with an ICollection?. And an IList." -
not as of yet, though I do recall reading a recent post on this mailing
list that stated that only item retrieval worked, not other properties.
If I've posted too quickly and in error from not having checked it
myself, I do apologize.

Re: "Template application is applicable to all attributes." - Yes, it
is, but has different semantics for those that are (at present) IList,
does it not?

I have to admit that unless I'm still missing something, the position on
using IList for multi-valued attributes instead of the most appropriate
interface, that being IEnumerable, is rather like hiding a pea (in that
anything that would count against IEnumerable already (and still would)
count against IList, except that targeting of IEnumerable would allow
multi-valued handling of objects that aren't IList)

By the way, at the end of the day I absolutely love ST#, so do bear in
mind that all this is just in the interest of curiosity and exploration.
:)

Jeremy

-----Original Message-----
From: stringtemplate-interest-bounces@antlr.org
[mailto:stringtemplate-interest-bounces@antlr.org] On Behalf Of Kunle
Odutola
Sent: Thursday, May 25, 2006 6:25 PM
To: stringtemplate-interest@antlr.org
Subject: Re: [stringtemplate-interest] ST# -
questionregardingspecialcasingofIList

Jeremy,

> The short answer is yes. ST# could treat as multi-valued anything that
> implements IEnumerable.

True. I could have but, that creates other issues e.g. with attributes
of
type Hashtable/IDictionary for instance.

> With that in mind, for those objects that support more than
IEnumerable
> there is also nothing to stop ST# from allowing both of the following,
> the first of which I understand from a recent mailing list post is
> currently not possible:
>
> $list.Count$

Have you actually tried this with an ICollection?. And an IList.

> $list:template()$

Template application is applicable to all attributes.

Kunle
_______________________________________________
stringtemplate-interest mailing list
stringtemplate-interest@antlr.org
http://www.antlr.org:8080/mailman/listinfo/stringtemplate-interest


From parrt at cs.usfca.edu  Thu May 25 18:38:51 2006
From: parrt at cs.usfca.edu (Terence Parr)
Date: Thu May 25 18:38:55 2006
Subject: [stringtemplate-interest] ST# -
	questionregardingspecialcasingofIList
In-Reply-To: <9E60A7FA5322F841856BE6E670F3E7B615039314@CPREXN020-EVS.itdmis02.futureshop.com>
References: <9E60A7FA5322F841856BE6E670F3E7B615039314@CPREXN020-EVS.itdmis02.futureshop.com>
Message-ID: <41BAFF4C-63B0-43B6-A26D-ED81F8E485F0@cs.usfca.edu>

Hi gang...i'll note in passing that I have a method called  
convertAnythingIteratableToIterator so everything that can be walked  
is converted to an interator regardless of original type.

Ter
From Kunle_Odutola at hotmail.com  Thu May 25 19:10:41 2006
From: Kunle_Odutola at hotmail.com (Kunle Odutola)
Date: Thu May 25 18:53:13 2006
Subject: [stringtemplate-interest] ST#
	-questionregardingspecialcasingofIList
References: <9E60A7FA5322F841856BE6E670F3E7B615039314@CPREXN020-EVS.itdmis02.futureshop.com>
Message-ID: <BAY101-DAV7E9397A2B5CFCFEE4A30C819E0@phx.gbl>

Jeremy,

> Re: "other issues e.g. with attributes of type Hashtable/IDictionary for
> instance" - They too are special-cased, though at a higher level of
> priority, so I'm not sure how that presents any more of an issue given
> that they too already implement IList and it isn't a problem at the
> moment.

They don't implement IList and they aren't special cased (not in the IList
sense in any case). They would need to be (along with many others) in an
IEnumerable-implies-multi-valued scenario.

> Re: "Template application is applicable to all attributes." - Yes, it
> is, but has different semantics for those that are (at present) IList,
> does it not?

Nope. It has different semantics for single-valued versus multi-valued
attributes. ILists are considered multi-valued.
Can't imagine that one would a different behaviour from applying a template
to a list of values in any case.

> I have to admit that unless I'm still missing something, the position on
> using IList for multi-valued attributes instead of the most appropriate
> interface, that being IEnumerable, is rather like hiding a pea (in that
> anything that would count against IEnumerable already (and still would)
> count against IList, except that targeting of IEnumerable would allow
> multi-valued handling of objects that aren't IList)

Considering virtually all collections to be multi-valued attributes is a
little too wide ranging methinks. There are far fewer ILists than
IEnumerables so that works for me in ST# currently. Had I used IEnumerable,
Ulf's recent post about issues with ArrayList would have also been about
issues with Hashtables (and practically any other collection type).

I did consider special casing IEnumerator instances instead of lists. That
had greater overheads. And the possibility that the enumeratee [ok, not a
real word;-)] could have been altered externally in the meantime rendering
the enumerator useless.

> By the way, at the end of the day I absolutely love ST#, so do bear in
> mind that all this is just in the interest of curiosity and exploration.
> :)

Understood. ;-)


Kunle
From Kunle_Odutola at hotmail.com  Fri May 26 07:37:06 2006
From: Kunle_Odutola at hotmail.com (Kunle Odutola)
Date: Fri May 26 07:19:44 2006
Subject: [stringtemplate-interest] ST#
	-questionregardingspecialcasingofIList
References: <9E60A7FA5322F841856BE6E670F3E7B615039314@CPREXN020-EVS.itdmis02.futureshop.com>
	<41BAFF4C-63B0-43B6-A26D-ED81F8E485F0@cs.usfca.edu>
Message-ID: <BAY101-DAV7C49A55746227632A3D7D819E0@phx.gbl>

> Hi gang...i'll note in passing that I have a method called
> convertAnythingIteratableToIterator so everything that can be walked
> is converted to an interator regardless of original type.

Perhaps I should have stressed that IList is special because it is *always*
treated as multi-valued.

Kunle
From jgray at siberra.com  Fri May 26 10:23:08 2006
From: jgray at siberra.com (Jeremy Gray)
Date: Fri May 26 10:23:18 2006
Subject: [stringtemplate-interest]
	ST#-questionregardingspecialcasingofIList
Message-ID: <9E60A7FA5322F841856BE6E670F3E7B6151014A0@CPREXN020-EVS.itdmis02.futureshop.com>

Re: not implementing IList - doh, brain-fart on my part. Still, you're
special-casing IDictionary at a higher priority so the overall point
still stands: you need only target IEnumerable.

At the end of the day, Kunle, you're a primary maintainer on this and
I'm just an interested user, so you can do whatever you want with it.
Just consider my posts to be a friendly reminder from the peanut
gallery.

Jeremy

-----Original Message-----
From: stringtemplate-interest-bounces@antlr.org
[mailto:stringtemplate-interest-bounces@antlr.org] On Behalf Of Kunle
Odutola
Sent: Thursday, May 25, 2006 7:11 PM
To: stringtemplate-interest@antlr.org
Subject: Re: [stringtemplate-interest]
ST#-questionregardingspecialcasingofIList

Jeremy,

> Re: "other issues e.g. with attributes of type Hashtable/IDictionary
for
> instance" - They too are special-cased, though at a higher level of
> priority, so I'm not sure how that presents any more of an issue given
> that they too already implement IList and it isn't a problem at the
> moment.

They don't implement IList and they aren't special cased (not in the
IList
sense in any case). They would need to be (along with many others) in an
IEnumerable-implies-multi-valued scenario.

> Re: "Template application is applicable to all attributes." - Yes, it
> is, but has different semantics for those that are (at present) IList,
> does it not?

Nope. It has different semantics for single-valued versus multi-valued
attributes. ILists are considered multi-valued.
Can't imagine that one would a different behaviour from applying a
template
to a list of values in any case.

> I have to admit that unless I'm still missing something, the position
on
> using IList for multi-valued attributes instead of the most
appropriate
> interface, that being IEnumerable, is rather like hiding a pea (in
that
> anything that would count against IEnumerable already (and still
would)
> count against IList, except that targeting of IEnumerable would allow
> multi-valued handling of objects that aren't IList)

Considering virtually all collections to be multi-valued attributes is a
little too wide ranging methinks. There are far fewer ILists than
IEnumerables so that works for me in ST# currently. Had I used
IEnumerable,
Ulf's recent post about issues with ArrayList would have also been about
issues with Hashtables (and practically any other collection type).

I did consider special casing IEnumerator instances instead of lists.
That
had greater overheads. And the possibility that the enumeratee [ok, not
a
real word;-)] could have been altered externally in the meantime
rendering
the enumerator useless.

> By the way, at the end of the day I absolutely love ST#, so do bear in
> mind that all this is just in the interest of curiosity and
exploration.
> :)

Understood. ;-)


Kunle
_______________________________________________
stringtemplate-interest mailing list
stringtemplate-interest@antlr.org
http://www.antlr.org:8080/mailman/listinfo/stringtemplate-interest


From Kunle_Odutola at hotmail.com  Fri May 26 12:16:20 2006
From: Kunle_Odutola at hotmail.com (Kunle Odutola)
Date: Fri May 26 11:58:48 2006
Subject: [stringtemplate-interest]ST#-questionregardingspecialcasingofIList
References: <9E60A7FA5322F841856BE6E670F3E7B6151014A0@CPREXN020-EVS.itdmis02.futureshop.com>
Message-ID: <BAY101-DAV2692DE4B6D1D6226CE089819E0@phx.gbl>

Jeremy,

> Re: not implementing IList - doh, brain-fart on my part. Still, you're
> special-casing IDictionary at a higher priority so the overall point
> still stands: you need only target IEnumerable.

IDictionary really isn't special cased as far as enumerability/multi-value
is concerned. It's constituent values can be enumerated.

If by "you need only target IEnumerable." you meant "all IEnumerable must
always be treated as ILists currently are", then I disagree. On the other
hand, IEnumerables can already be enumerated in ST#.

> At the end of the day, Kunle, you're a primary maintainer on this and
> I'm just an interested user, so you can do whatever you want with it.
> Just consider my posts to be a friendly reminder from the peanut
> gallery.

If you place assorted collection objects (i.e. ICollection/IList/IEnuerable
etc) as attributes into ST#, you should find that it behaves predictably.
Including the enumeration of IEnumerables behaviour you are interested in.


Kunle
From parrt at cs.usfca.edu  Sun May 28 11:45:24 2006
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sun May 28 11:45:27 2006
Subject: [stringtemplate-interest] wrapping long lines in ST expressions
Message-ID: <7613743C-DFA5-45F8-B2EC-264BB373F643@cs.usfca.edu>

Hi,

I'm in need of proper line wrapping as I'm generating some big static  
arrays of ints.  We need to come up with a nice mechanism that is  
easy and general.  The easiest thing would probably be a lineLength  
parameter to either toString() or as a property of STs or STGs.  ST  
would need to insert a \n before spitting out an expression if the  
prior output on that line is over the threshold.  You want the output  
to break in between expressions so that you avoid splitting output  
constructs unnecessarily, but the common case is probably a single  
attribute expression that has multiple things spit out like an array  
of ints.

Can people think of common uses for wrapping other than lists and such?

Do we need an indentation parameter also?

int[] a = { a, b,
             c, d };

Those spaces before the "c" (sizeof("int[] a = { ")) are what I'm  
talking about.  Here is the generating template:

int[] a = { <elements; indent="            ", separator=", "> };

Those option values can actually template expressions and here is a  
case where we need length() operator.  If the "int" is a variable

<type>[] a = { <elements; indent={<length(type+"            ")>},  
separator=", "> };

which would mean I would need to interpret numeric strings as how  
many spaces?  Hmm...not good.  Also length should be how many  
elements not length in char probably.  How do we deal with variable  
length indentation?  Perhaps we have indent and relativeIndent.   
relativeIndent indents from position of expression start on first line.

There is another issue:  Where do I store the current char count for  
current line?  Can't store in the ST objects as they can be contained  
in multiple other templates and may get examined multiple times to  
display different things.  Seems like the actual invocation of the  
toString() method needs to track the line count for that particular  
execution.  I'll have to create a mutable Integer I guess and pass  
that printing context around to the write() routines.  Perhaps that  
will be a useful thing in general.  I have trouble removing blank  
lines sometimes as I don't know the overall count of char for the  
current line.  Oh, doh!  I have AutoIndentWriter already that knows  
about newlines for indentation...I wonder if we can simply handle  
this with a parameter to the constructor.  Currently, toString() calls:

		StringTemplateWriter wr = group.getStringTemplateWriter(out);

which can be set with:

	/** Specify a StringTemplateWriter implementing class to use for
	 *  filtering output
	 */
	public void setStringTemplateWriter(Class c) {
		userSpecifiedWriter = c;
	}

Revisiting multiple expressions per line:

public void foo(<args; separator=", ">) throws <excepts; separator=", ">
{
	<body>
}

where should it break?  Presumably in between the expressions rather  
than in the middle of one of the expr.  That might be too hard.  The  
output writer sees "public void foo(" then each arg intermixed with  
write(", ") then ") throws " then the excepts elements intermixed  
with ", ".  The write doesn't know anything about literals, intra  
expression and inter expression locations.  Hmm...can't predict the  
future anyway...we don't know that the excepts are coming.

Ok, I think i've convinced myself that a simple char count and  
threshold will do the trick.  Hooray!

Wait, what if you want lines to wrap more tightly for some  
expressions?  Do we need an arg on expressions like

int[] a = { <elements; width=40, separator=", "> };

Hmm...I could store the option in the ASTExpr object like I do for  
indentation and separator.  Well, I don't need it now; agile mindset  
says leave til later ;)

Wow...did I *finally* find a need for more options thus validating my  
complicated <expr; option=value> notation? ;)

Ter
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org:8080/pipermail/stringtemplate-interest/attachments/20060528/2e699181/attachment.html
From parrt at cs.usfca.edu  Sun May 28 14:15:37 2006
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sun May 28 14:15:41 2006
Subject: [stringtemplate-interest] unit tests for line wrapping
Message-ID: <13359CF9-25AF-40B6-8844-A2B6A89696F0@cs.usfca.edu>

Howdy, the following line wrap unit tests "work".  Can all interested  
parties, please examine them to see if the functionality matches your  
expectations?

I line up wrapped lines derived from expressions to the start of the  
expression. For template literal chunks, they just wrap back to char  
position 0.

The last testLineWrapInNestedExpr test is hard to think about, but is  
pretty groovy.  It treats each array as a single attribute value so  
that the outer template doesn't do the indent.  This is proper I  
believe.  Once the first array is dumped, the column is 0 and so the  
second array has more elements per line.  Far out.

This implementation complicated StringTemplateWriter interface and  
auto-indent writer, but most people will never see this stuff.   
Should be no speed hit.  I also switched from a stack to an arraylist  
for the stack of indentation given my experience with Stack  
recently.  Might even go faster!

Ok, where was I?  Oh, right.  ANTLR v3 DFA state machine table  
generation for which I need auto-indent.  Gotta love parallel, demand- 
driven development.  Off to the pool to exercise...

I will wait to hear feedback before pushing all of this...

Thanks!
Ter
----------------
public void testLineWrap() throws Exception {
     String templates =
             "group test;" +newline+
             "array(values) ::= <<int[] a = { <values; separator=\", 
\"> };>>"+new
     StringTemplateGroup group =
             new StringTemplateGroup(new StringReader(templates));

     StringTemplate a = group.getInstanceOf("array");
     a.setAttribute("values",
                    new int[]  
{3,9,20,2,1,4,6,32,5,6,77,888,2,1,6,32,5,6,77,
                     4,9,20,2,1,4,63,9,20,2,1,4,6,32,5,6,77,6,32,5,6,77,
                     3,9,20,2,1,4,6,32,5,6,77,888,1,6,32,5});
     String expecting =
         "int[] a = { 3,9,20,2,1,4,6,32,5,6,77,888,\n" +
         "            2,1,6,32,5,6,77,4,9,20,2,1,4,\n" +
         "            63,9,20,2,1,4,6,32,5,6,77,6,\n" +
         "            32,5,6,77,3,9,20,2,1,4,6,32,\n" +
         "            5,6,77,888,1,6,32,5 };";
     assertEqual(a.toString(40), expecting);
}

public void testLineWrapEdgeCase() throws Exception {
     String templates =
             "group test;" +newline+
             "duh(chars) ::= \"<chars>\""+newline;
     StringTemplateGroup group =
             new StringTemplateGroup(new StringReader(templates));

     StringTemplate a = group.getInstanceOf("duh");
     a.setAttribute("chars", new String[] {"a","b","c","d","e"});
     // lineWidth==3 implies that we can have 3 characters at most
     String expecting =
         "abc\n"+
         "de";
     assertEqual(a.toString(3), expecting);
}

public void testLineWrapLastCharIsNewline() throws Exception {
     String templates =
             "group test;" +newline+
             "duh(chars) ::= \"<chars>\""+newline;
     StringTemplateGroup group =
             new StringTemplateGroup(new StringReader(templates));

     StringTemplate a = group.getInstanceOf("duh");
     a.setAttribute("chars", new String[] {"a","b","\n","d","e"});
     // don't do \n if it's last element anyway
     String expecting =
         "ab\n"+
         "de";
     assertEqual(a.toString(3), expecting);
}

public void testLineWrapCharAfterWrapIsNewline() throws Exception {
     String templates =
             "group test;" +newline+
             "duh(chars) ::= \"<chars>\""+newline;
     StringTemplateGroup group =
             new StringTemplateGroup(new StringReader(templates));

     StringTemplate a = group.getInstanceOf("duh");
     a.setAttribute("chars", new String[] {"a","b","c","\n","d","e"});
     // Once we wrap, we must dump chars as we see them.  A newline  
right
     // after a wrap is just an "unfortunate" event.  People will expect
     // a newline if it's in the data.
     String expecting =
         "abc\n" +
         "\n" +
         "de";
     assertEqual(a.toString(3), expecting);
}

public void testLineWrapDueToLiteral() throws Exception {
     String templates =
             "group test;" +newline+
             "m(args,body) ::= <<public void foo(<args; separator=\",  
\">) throws
     StringTemplateGroup group =
             new StringTemplateGroup(new StringReader(templates));

     StringTemplate a = group.getInstanceOf("m");
     a.setAttribute("args",
                    new String[] {"a", "b", "c"});
     a.setAttribute("body", "i=3;");
     // make it wrap because of ") throws Ick { " literal
     int n = "public void foo(a, b, c".length();
     String expecting =
         "public void foo(a, b, c\n" +
         ") throws Ick { i=3; }";
     assertEqual(a.toString(n), expecting);
}

public void testLineWrapInNestedExpr() throws Exception {
     String templates =
             "group test;" +newline+
             "top(arrays) ::= <<Arrays: <arrays>done>>"+newline+
             "array(values) ::= <<int[] a = { <values; separator=\", 
\"> };<\\n\\>
     StringTemplateGroup group =
             new StringTemplateGroup(new StringReader(templates));

     StringTemplate top = group.getInstanceOf("top");
     StringTemplate a = group.getInstanceOf("array");
     a.setAttribute("values",
                    new int[]  
{3,9,20,2,1,4,6,32,5,6,77,888,2,1,6,32,5,6,77,
                     4,9,20,2,1,4,63,9,20,2,1,4,6,32,5,6,77,6,32,5,6,77,
                     3,9,20,2,1,4,6,32,5,6,77,888,1,6,32,5});
     top.setAttribute("arrays", a);
     top.setAttribute("arrays", a); // add twice
     String expecting =
         "Arrays: int[] a = { 3,9,20,2,1,4,6,32,5,\n" +
         "                    6,77,888,2,1,6,32,5,\n" +
         "                    6,77,4,9,20,2,1,4,63,\n" +
         "                    9,20,2,1,4,6,32,5,6,\n" +
         "                    77,6,32,5,6,77,3,9,20,\n" +
         "                    2,1,4,6,32,5,6,77,888,\n" +
         "                    1,6,32,5 };\n" +
         "int[] a = { 3,9,20,2,1,4,6,32,5,6,77,888,\n" +
         "            2,1,6,32,5,6,77,4,9,20,2,1,4,\n" +
         "            63,9,20,2,1,4,6,32,5,6,77,6,\n" +
         "            32,5,6,77,3,9,20,2,1,4,6,32,\n" +
         "            5,6,77,888,1,6,32,5 };\n" +
         "done";
     assertEqual(top.toString(40), expecting);
}

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org:8080/pipermail/stringtemplate-interest/attachments/20060528/aaf5558b/attachment-0001.html
From sohail at taggedtype.net  Sun May 28 19:55:58 2006
From: sohail at taggedtype.net (Sohail Somani)
Date: Sun May 28 19:56:05 2006
Subject: [stringtemplate-interest] unit tests for line wrapping
In-Reply-To: <13359CF9-25AF-40B6-8844-A2B6A89696F0@cs.usfca.edu>
References: <13359CF9-25AF-40B6-8844-A2B6A89696F0@cs.usfca.edu>
Message-ID: <1148871358.8684.17.camel@localhost.localdomain>

Look good enough to me.

From Ulf.Dreyer at de.bosch.com  Mon May 29 06:55:46 2006
From: Ulf.Dreyer at de.bosch.com (Dreyer Ulf (CR/APA3))
Date: Mon May 29 06:55:51 2006
Subject: [stringtemplate-interest] Problems with List and Hashes revisited
Message-ID: <19D19E1AA3C5154D85A43D38808E48AB71169C@fe-mail29.de.bosch.com>

Hello all!

I hope, I'm not getting on your nerves yet but I'd like to
diskuss my issue with ST# some more.
First let me quote Jeremy (who put it so nicely)
"At the end of the day I absolutely love ST#"

But at times it is driving me up the wall!
(Or maybe it is my ignorance about some finer points
of ST#)

I am trying to read (more or less arbitrary) xml data
from disc and feed them to a 'root template' which
in turn calls other user-defined subtemplates.

As my mail is rather long (again) the problem in short:
I think (not entirely sure) ST# somtimes treats single
values (which are aggregates (hashmap)) as lists. 
(It enumerates my hash)
"Sometimes" meaning whenever I call a subtemplate
that is defined without formal parameters OR
I call a subtemplate (with or without formal parameters defined)
in the   <single value>:subtemplate() syntax.
??
What do I have to do so that ST# can deal with
<DataStruct>:subtemplate()
whether DataStruct is a single value (or aggregate)
or a List?
??
Putting another pair of brackets "()" around the argument
does'nt work because 
a) it is not universal (if the argument CAN be multi-valued)
b) it casts the argument to string (which is bad for aggregate values)


First some real code so you have a chance to 
understand, what I am talking about:
(sorry for the lengthy text but I hope it helps)

Sample xml-file:

<?xml version="1.0"?>
<root>
    <DataBlock1>
		<DataA>1_DataA</DataA>
		<DataB>1_DataB</DataB>
		<DataC>
			<SubC1>1_SubC1Content1</SubC1>
			<SubC1>1_SubC1Content2</SubC1>
			<SubC2>1_SubC2Content</SubC2>
		</DataC>
    </DataBlock1>
	<DataBlock1>
		<DataA>2_DataA</DataA>
		<DataB>2_DataB</DataB>
		<DataC>
			<SubC1>2_SubC1Content1</SubC1>
			<SubC1>2_SubC1Content2</SubC1>
			<SubC2>2_SubC2Content</SubC2>
		</DataC>
    </DataBlock1>
	<DataBlock2>
		<ItemB>ItemBContent</ItemB>
	</DataBlock2>
</root>
-------------------------------------------------------------
Sample TemplateGroup:

group behaviourDemo;

subsubTemplate(Data) ::= <<
	Input is : $Data$
	SubC1 is '$Data.SubC1$'
	SubC2 is '$Data.SubC2$'

>>

subsubTemplateB() ::= <<
	Input is : $it$
	SubC1 is '$it.SubC1$'
	SubC2 is '$it.SubC2$'

>>

subTemplate() ::= <<
------------------------------------------------------
A=$it.DataA$
B=$it.DataB$

// both blocks SHOULD return the same:

subsubTemplate(it.DataC):
$subsubTemplate(it.DataC)$
----------------------------
it.DataC:subsubTemplate():
$it.DataC:subsubTemplate()$
------------------------------------------------------

>>

rootTemplate(DataBlock1,DataBlock2) ::= <<
BEGIN (rootTemplate)
 Applying the subtemplate to DataBlock1:

$DataBlock1:subTemplate()$
======================================================
 Accessing part of DataBlock1 directly (multi-valued):
DataBlock1.DataA = $DataBlock1.DataA$

 Accessing part of DataBlock2 directly (single-valued):
DataBlock2.ItemB = $DataBlock2.ItemB$
END (rootTemplate)
>>

To archive my goal I have written a data-structure consisting
of ArrayLists and Hashmaps (alternating).
A hash being the root and containing Lists(of hashes) for multi-valued
attributes or attributes (Strings) for single-values.

DataBlock2.ItemB = $DataBlock2.ItemB$ from the rootTemplate always
works. (good!)

DataBlock1.DataA = $DataBlock1.DataA$ does not normally work because the
"answer" 
would be multi-valued.
I got this to work too by writing a List which implements a this[string]
accessor that
iterates over the list and constructs a new list from the matching
attributes of the
hashmaps in the list. (Essentially skipping one "layer" of the data
structure)
@Kunle: This is how I solved the last problem I mailed you about.
In the example my list implementation returns [1_DataA,2_DataA] if
called as
myList_DataBlock1["DataA"] (Not necessarily stings but whatever the
hashes contain at key "DataA").


One last problem which I feel is related to the " question regarding
specialcasingof IList"
previously on the mailinlist.
The call to the subsubTemplate!

As you see from the code I have given two implementations.
The one with the named parameter works IF (and only if) I call it
$subsubTemplate(it.DataC)$
My preferred version of
$it.DataC:subsubTemplate()$
does NOT work.
Neither does the subsubTemplateB in any version

>From the output below one can see that $it.DataC:subsubTemplate()$
gives a list to subsubTemplate() when it SHOULD be a Hash containing
a list (of 2 items) and a single value.
Any idea why this is the case?
My implementations of of List and Hash:

public class AttributeList : ArrayList,Iattribute
public class AttributeHash : IDictionary, IAttribute

(Iattribute defines  object this[object key] but it
does not work without this hack in AttributeList either)
------------------------------------------------------
BEGIN (rootTemplate)
 Applying the subtemplate to DataBlock1:

------------------------------------------------------
A=1_DataA
B=1_DataB

// both blocks SHOULD return the same:

subsubTemplate(it.DataC):
        Input is : 1_SubC1Content11_SubC1Content21_SubC2Content
        SubC1 is '1_SubC1Content11_SubC1Content2'
        SubC2 is '1_SubC2Content'

----------------------------
it.DataC:subsubTemplate():
        Input is : 1_SubC1Content11_SubC1Content2
        SubC1 is ''
        SubC2 is ''
        Input is : 1_SubC2Content
        SubC1 is ''
        SubC2 is ''

------------------------------------------------------
------------------------------------------------------
A=2_DataA
B=2_DataB

// both blocks SHOULD return the same:

subsubTemplate(it.DataC):
        Input is : 2_SubC1Content12_SubC1Content22_SubC2Content
        SubC1 is '2_SubC1Content12_SubC1Content2'
        SubC2 is '2_SubC2Content'

----------------------------
it.DataC:subsubTemplate():
        Input is : 2_SubC1Content12_SubC1Content2
        SubC1 is ''
        SubC2 is ''
        Input is : 2_SubC2Content
        SubC1 is ''
        SubC2 is ''

------------------------------------------------------

======================================================
 Accessing part of DataBlock1 directly (multi-valued):
DataBlock1.DataA = 1_DataA2_DataA

 Accessing part of DataBlock2 directly (single-valued):
DataBlock2.ItemB = ItemBContent
END (rootTemplate)
-------------------------------------------------------

Before that I get some errors along the lines of

Can't get property SubC1 via C# string indexer from
SomeNameSpace.AttributeList instance
[...]
Class System.String has no such attribute: SubC2 in template context
[rootTemplate subTemplate subsubTemplate]

Where SomeNameSpace.AttributeList is my Listimplementations which
supports attribute lookup from
the listed hashes.

I don't understand why ST# tries to get the attribute from a string.

Has anyone similar problems or any idea how I can get the expected
results from ST?
@ Terrence or Kunle: how does the Attribute-Lookup work exactly?


Thanks for reading this far!

Ulf


-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org:8080/pipermail/stringtemplate-interest/attachments/20060529/7cf6133d/attachment-0001.html
From Ulf.Dreyer at de.bosch.com  Mon May 29 07:02:23 2006
From: Ulf.Dreyer at de.bosch.com (Dreyer Ulf (CR/APA3))
Date: Mon May 29 07:02:26 2006
Subject: AW: [stringtemplate-interest] Problems with List and Hashes revisited
In-Reply-To: <19D19E1AA3C5154D85A43D38808E48AB71169C@fe-mail29.de.bosch.com>
Message-ID: <19D19E1AA3C5154D85A43D38808E48AB71169D@fe-mail29.de.bosch.com>

I just thought of a possible solution that I dismissed
somewhere during my debugging.
I have no time to test now if it STILL has ugly side-effects 
- but I will tomorrow.
 
The solution would be to put ALL Values (whether single or not)
into a List. So basically all values would be multi-values.
 
It seems a rather large overhead (putting even simple strings into
arraylists)?
Is this the price I have to pay for the flexibility?
 
Ulf
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org:8080/pipermail/stringtemplate-interest/attachments/20060529/b60f2e6c/attachment.html
From Kunle_Odutola at hotmail.com  Mon May 29 09:28:54 2006
From: Kunle_Odutola at hotmail.com (Kunle Odutola)
Date: Mon May 29 09:14:11 2006
Subject: [stringtemplate-interest] Problems with List and Hashes revisited
References: <19D19E1AA3C5154D85A43D38808E48AB71169C@fe-mail29.de.bosch.com>
Message-ID: <BAY101-DAV6598B1C7F59A0ECCEB6B5819D0@phx.gbl>

> Hello all!

Hi Ulf,

> I am trying to read (more or less arbitrary) xml data
> from disc and feed them to a 'root template' which
> in turn calls other user-defined subtemplates.
>
> As my mail is rather long (again) the problem in short:
> I think (not entirely sure) ST# somtimes treats single
> values (which are aggregates (hashmap)) as lists.

As Ter mentioned in Jeremy's thread on the list, ST# (and ST) enumerates any
enumerable attributes by default.

> (It enumerates my hash)
> "Sometimes" meaning whenever I call a subtemplate
> that is defined without formal parameters OR
> I call a subtemplate (with or without formal parameters defined)
> in the   <single value>:subtemplate() syntax.
> ??
> What do I have to do so that ST# can deal with
> <DataStruct>:subtemplate()
> whether DataStruct is a single value (or aggregate)
> or a List?

Nothing. If an attribute is enumerable it will be treated as such. Else it
won't be.

If you don't want an enumerable attribute to be treated as enumerable,
define a formal parameter and use the alternate syntax:
   subtemplate(<parameterName>=<DataStruct>)


Which leads me to a rather relevant point, "template application and
template include have different semantics:

1. Template include (single-parameter case)

$bold(paragraph)$  ==> includes (i.e. invokes) 'boot' template setting it's
only parameter to $paragraph$


2. Template aplication

$paragraph:bold()$ ==>
                                IF $paragraph$ IS enumerable
                                   FOREACH item in $paragraph$
                                      applies (i.e. invokes) 'bold' template
setting it's only parameter to $item$
                                ELSE
                                   applies (i.e. invokes) 'bold' template
setting it's only parameter to $paragraph$

> Sample xml-file:
>
> <?xml version="1.0"?>
> <root>
>     <DataBlock1>
>                 <DataA>1_DataA</DataA>
>                 <DataB>1_DataB</DataB>
>                 <DataC>
>                         <SubC1>1_SubC1Content1</SubC1>
>                         <SubC1>1_SubC1Content2</SubC1>
>                         <SubC2>1_SubC2Content</SubC2>
>                 </DataC>
>     </DataBlock1>
>         <DataBlock1>
>                 <DataA>2_DataA</DataA>
>                 <DataB>2_DataB</DataB>
>                 <DataC>
>                         <SubC1>2_SubC1Content1</SubC1>
>                         <SubC1>2_SubC1Content2</SubC1>
>                         <SubC2>2_SubC2Content</SubC2>
>                 </DataC>
>     </DataBlock1>
>         <DataBlock2>
>                 <ItemB>ItemBContent</ItemB>
>         </DataBlock2>
> </root>

So you have a toplevel Hashtable that contains ("key, [elem1,...elemN]"
means entry has key "key" and is a list of elem1...elemN):
   DataBlock1, [DataA, DataB, DataC]
   DataBlock2, ItemB                     where ItemB is not a list right?

{{
   I presume that the extra DataBlock1 entry is a typo right?. If not, then
DataBlock1 is as below:
      DataBlock1, [DataA, DataB, DataC, DataA, DataB, DataC]
}}

Looking at DataBlock1's value
DataA is [1_DataA]   (or [1_DataA, 2_DataA] if both DataBlock1 entries are
valid - same for others)
DataB is [1_DataB]
DataC is [SubC1, SubC1, SubC3]   where each SubC is a Hashtable right (or is
it *could be* a hashtable)?

> Sample TemplateGroup:
>
> group behaviourDemo;
>
> subsubTemplate(Data) ::= <<
>         Input is : $Data$
>         SubC1 is '$Data.SubC1$'
>         SubC2 is '$Data.SubC2$'
>
> >>
>
> subsubTemplateB() ::= <<
>         Input is : $it$
>         SubC1 is '$it.SubC1$'
>         SubC2 is '$it.SubC2$'
>
> >>
>
> subTemplate() ::= <<
> ------------------------------------------------------ 
> A=$it.DataA$
> B=$it.DataB$
>
> // both blocks SHOULD return the same:
>
> subsubTemplate(it.DataC):
> $subsubTemplate(it.DataC)$
> ---------------------------- 
> it.DataC:subsubTemplate():
> $it.DataC:subsubTemplate()$
> ------------------------------------------------------ 
>
> >>

Nope. As I mentioned above, they have different semantics.

$subsubTemplate(it.DataC)$  ==> invokes 'subsubTemplate' setting it's only
parameter to '$it.DataC$'

$it.DataC:subsubTemplate()$ ==>
                                IF '$it.DataC$' IS enumerable
                                   FOREACH element in '$it.DataC$'
                                      invokes 'subsubTemplate' setting it's
only parameter to '$element$'
                                ELSE
                                   invokes 'subsubTemplate' setting it's
only parameter to '$it.DataC$'

>
> rootTemplate(DataBlock1,DataBlock2) ::= <<
> BEGIN (rootTemplate)
>  Applying the subtemplate to DataBlock1:
>
> $DataBlock1:subTemplate()$
> ======================================================
>  Accessing part of DataBlock1 directly (multi-valued):
> DataBlock1.DataA = $DataBlock1.DataA$
>
>  Accessing part of DataBlock2 directly (single-valued):
> DataBlock2.ItemB = $DataBlock2.ItemB$
> END (rootTemplate)
> >>
>
> To archive my goal I have written a data-structure consisting
> of ArrayLists and Hashmaps (alternating).
> A hash being the root and containing Lists(of hashes) for multi-valued
> attributes or attributes (Strings) for single-values.
>
> DataBlock2.ItemB = $DataBlock2.ItemB$ from the rootTemplate always works.
(good!)
>
> DataBlock1.DataA = $DataBlock1.DataA$ does not normally work because the
"answer"
> would be multi-valued.
> I got this to work too by writing a List which implements a this[string]
accessor that
> iterates over the list and constructs a new list from the matching
attributes of the
> hashmaps in the list. (Essentially skipping one "layer" of the data
structure)
> @Kunle: This is how I solved the last problem I mailed you about.
> In the example my list implementation returns [1_DataA,2_DataA] if called
as
> myList_DataBlock1["DataA"] (Not necessarily stings but whatever the hashes
contain at key "DataA").

Since they are indexed by (and accessed by) a string key (not uniquely I now
understand), why not just use an IDictionary?. The separate entries for keys
like "DataA" can then held in a list.
If preserving insertion order is important, you can develop a specialized
IDictionary. ST#'s HashList may provide pointers there.

> One last problem which I feel is related to the " question regarding
specialcasingof IList"
> previously on the mailinlist.
> The call to the subsubTemplate!
>
> As you see from the code I have given two implementations.
> The one with the named parameter works IF (and only if) I call it
> $subsubTemplate(it.DataC)$
> My preferred version of
> $it.DataC:subsubTemplate()$
> does NOT work.

It does work as advertised. If the attribute is multi-valued (i.e.
enumerable), it will be treated as such. Using explicit formal parameters
affords you some control over the process. You may choose to never enumerate
by only accessing properties directly for instance.

Incidentally special-casing of IList simply means that IList is *always*
regarded as enumerable.

Given two IList instances list1 = {1,2,3} and list2 = {"a", "b", "c"}:

st.SetAttribute("data", list1);
st.SetAttribute("data", list2);

would result in:
  $data$ -> [1, 2, 3, "a", "b", "c"]

If list1 and list2 were not ILists, you would get:
  $data$ -> [list1, list2].


> Neither does the subsubTemplateB in any version

It can't. The template application logic controls the enumeration in this
case not the template.

> From the output below one can see that $it.DataC:subsubTemplate()$
> gives a list to subsubTemplate() when it SHOULD be a Hash containing
> a list (of 2 items) and a single value.
> Any idea why this is the case?

IDictionary objects are enumerable so that is the expected behaviour. You
should pass your hashtable as a formal parameter if you don't want it
enumerated by the template application logic.


Good luck.


Kunle
From Kunle_Odutola at hotmail.com  Mon May 29 09:31:40 2006
From: Kunle_Odutola at hotmail.com (Kunle Odutola)
Date: Mon May 29 09:14:13 2006
Subject: [stringtemplate-interest] Problems with List and Hashes revisited
References: <19D19E1AA3C5154D85A43D38808E48AB71169D@fe-mail29.de.bosch.com>
Message-ID: <BAY101-DAV119257289B17DED4EC78CD819D0@phx.gbl>

> I just thought of a possible solution that I dismissed
> somewhere during my debugging.
> I have no time to test now if it STILL has ugly side-effects 
> - but I will tomorrow.
>  
> The solution would be to put ALL Values (whether single or not)
> into a List. So basically all values would be multi-values.

Not neccessary. See my reply to your earlier post.


Kunle
From parrt at cs.usfca.edu  Mon May 29 11:00:02 2006
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon May 29 11:00:05 2006
Subject: [stringtemplate-interest] wrapping long lines in ST expressions
In-Reply-To: <1148871285.8684.15.camel@localhost.localdomain>
References: <7613743C-DFA5-45F8-B2EC-264BB373F643@cs.usfca.edu>
	<1148871285.8684.15.camel@localhost.localdomain>
Message-ID: <17CFAB1A-0E5A-40A5-96B6-FEA9490A9311@cs.usfca.edu>


On May 28, 2006, at 7:54 PM, Sohail Somani wrote:
>> where should it break?  Presumably in between the expressions rather
>> than in the middle of one of the expr.
>
> Can it break on the separators if the char threshold is met? That  
> would
> be nice...

I'd rather it didn't...i'm thinking of this as a soft limit really... :)

Ter
From parrt at cs.usfca.edu  Mon May 29 14:56:37 2006
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon May 29 14:56:39 2006
Subject: [stringtemplate-interest] line wrap results for antlr v3
Message-ID: <7652D55E-1345-45AA-9E49-01E0D49ACD14@cs.usfca.edu>

ok, so it doesn't work so well:

             else if ( LA1_0==-1||LA1_0==SEMI||LA1_0==107|| 
(LA1_0>=117 && LA
                                                                         
     1
             _0<=129)||LA1_0==131 ) {
                 alt1=2;

note that the LA1_0 var is LA<decision>_<k> and ST breaks it like  
mad.  Perhaps we should only allow it to break in the middle of a  
multi-valued attribute?  I don't want to have to group all the stuff  
that should not break.  Maybe we say what *can* be broken with multi- 
valued attributes being wrappable by default.  Maybe

<values; wrap=true>

to allow wrapping?

Damn!  Just when I thought I had it!
Ter
From parrt at cs.usfca.edu  Mon May 29 19:00:37 2006
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon May 29 19:00:39 2006
Subject: [stringtemplate-interest] Re: (follow up) line wrap results for
	antlr v3
In-Reply-To: <7652D55E-1345-45AA-9E49-01E0D49ACD14@cs.usfca.edu>
References: <7652D55E-1345-45AA-9E49-01E0D49ACD14@cs.usfca.edu>
Message-ID: <61E7626E-F7E8-4B87-AA34-DF15D04ECC54@cs.usfca.edu>

ack...it's even more complicated...will have to redo this stuff.   
some cool ideas...
Ter

From Ulf.Dreyer at de.bosch.com  Tue May 30 06:10:48 2006
From: Ulf.Dreyer at de.bosch.com (Dreyer Ulf (CR/APA3))
Date: Tue May 30 06:10:52 2006
Subject: AW: [stringtemplate-interest] Problems with List and Hashes revisited
In-Reply-To: <BAY101-DAV6598B1C7F59A0ECCEB6B5819D0@phx.gbl>
Message-ID: <19D19E1AA3C5154D85A43D38808E48AB7116A1@fe-mail29.de.bosch.com>

Hello Kunle 

> From: stringtemplate-interest-bounces@antlr.org 
> From: Kunle Odutola
> Betreff: Re: [stringtemplate-interest] Problems with List and 
> Hashes revisited
> 
> As Ter mentioned in Jeremy's thread on the list, ST# (and ST) 
> enumerates any
> enumerable attributes by default.

Yeah I read that - now I have made some tests to see what meets
my requirements.

Some simple Questions:

(1)
Am I right in thinking that templates without formal arguments

SomeTemplate() ::= << Output=$it.something$ >>
can only be invoked as  $SomeData:SomeTemplate()$
never as $SomeTemplate(SomeData)$
(I get: "template anotherOutput must have exactly one formal 
arg in template context [..Context..]")
 

(2) Should this template work? (It always crashes on me because
of stack-overflow)

RecursiveOut(Daten) ::= << $Daten:RecursiveOut();separator=","$ >>
As both classes in my data-structure (AttributeHash and AttributeList)
are IEnumerable it should strip away one layer at a time, shouldn't it?


> > What do I have to do so that ST# can deal with
> > <DataStruct>:subtemplate()
> > whether DataStruct is a single value (or aggregate)
> > or a List?
> 
> Nothing. If an attribute is enumerable it will be treated as 
> such. Else it
> won't be.

Ok I got it!
 
> If you don't want an enumerable attribute to be treated as enumerable,
> define a formal parameter and use the alternate syntax:
>    subtemplate(<parameterName>=<DataStruct>)

I can't do that because I don't necessarily know in advance if an
attribute will be single or multi-valued.
Therefore it has to be the Data:Template() Syntax.

[Very clear comparison application include/application
thank you very much Kunle!! ]

> > Sample xml-file:
> >
> > <?xml version="1.0"?>
> > <root>
> >     <DataBlock1>
> >                 <DataA>1_DataA</DataA>
> >                 <DataB>1_DataB</DataB>
> >                 <DataC>
> >                         <SubC1>1_SubC1Content1</SubC1>
> >                         <SubC1>1_SubC1Content2</SubC1>
> >                         <SubC2>1_SubC2Content</SubC2>
> >                 </DataC>
> >     </DataBlock1>
> >     <DataBlock1>
> >                 <DataA>2_DataA</DataA>
> >                 <DataB>2_DataB</DataB>
> >                 <DataC>
> >                         <SubC1>2_SubC1Content1</SubC1>
> >                         <SubC1>2_SubC1Content2</SubC1>
> >                         <SubC2>2_SubC2Content</SubC2>
> >                 </DataC>
> >     </DataBlock1>
> >     <DataBlock2>
> >                 <ItemB>ItemBContent</ItemB>
> >     </DataBlock2>
> > </root>
>
> So you have a toplevel Hashtable that contains ("key, 
> [elem1,...elemN]"
> means entry has key "key" and is a list of elem1...elemN):
>    DataBlock1, [DataA, DataB, DataC]
>    DataBlock2, ItemB     
> where ItemB is not a list right?


First: the  "Is ItemB a list (of one element) or not" changes
       very often during my experiments.
CURRENTLY: If (ItemB is a String) there is NO list
           If (ItemB is a Hash)   there is a list of one element


The above XML yields the following structure (not complete)
{} = empty hash, {(),()} Hash with two elements
("Key",ANYTHING) = Hash  key-value pair
[] = empty list

Top Level Hash (nameless) = 
{ ("DataBlock1",[ NamelessHash{ ("DataA", String:1_DataA ) 
					  ("DataB", String:1_DataB ) 
					  ("DataC", NamelessHash*SNIP
too long* )}, 
			
			NamelessHash{ ("DataA", String:2_DataA ) 
					  ("DataB", String:2_DataB ) 
					  ("DataC", NamelessHash*SNIP
too long* )}
 		    ])
  ("DataBlock2",[ NamelessHash{("ItemB",String:ItemBContent)} ]) 
}

> I presume that the extra DataBlock1 entry is a typo 
> right?. If not, then
> DataBlock1 is as below:
>       DataBlock1, [DataA, DataB, DataC, DataA, DataB, DataC]
> }}
> 
> Looking at DataBlock1's value
> DataA is [1_DataA]   (or [1_DataA, 2_DataA] if both 
> DataBlock1 entries are
> valid - same for others)
> DataB is [1_DataB]
> DataC is [SubC1, SubC1, SubC3]   where each SubC is a 
> Hashtable right (or is
> it *could be* a hashtable)?
> 
> > Sample TemplateGroup:
> >
> > group behaviourDemo;
> >
> > subsubTemplate(Data) ::= <<
> >         Input is : $Data$
> >         SubC1 is '$Data.SubC1$'
> >         SubC2 is '$Data.SubC2$'
> >
> > >>
> >
> > subsubTemplateB() ::= <<
> >         Input is : $it$
> >         SubC1 is '$it.SubC1$'
> >         SubC2 is '$it.SubC2$'
> >
> > >>
> >
> > subTemplate() ::= <<
> > ------------------------------------------------------ 
> > A=$it.DataA$
> > B=$it.DataB$
> >
> > // both blocks SHOULD return the same:
> >
> > subsubTemplate(it.DataC):
> > $subsubTemplate(it.DataC)$
> > ---------------------------- 
> > it.DataC:subsubTemplate():
> > $it.DataC:subsubTemplate()$
> > ------------------------------------------------------ 
> >
> > >>
> 
> Nope. As I mentioned above, they have different semantics.
> 
> $subsubTemplate(it.DataC)$  ==> invokes 'subsubTemplate' 
> setting it's only
> parameter to '$it.DataC$'
> 
> $it.DataC:subsubTemplate()$ ==>
>                                 IF '$it.DataC$' IS enumerable
>                                    FOREACH element in '$it.DataC$'
>                                       invokes 
> 'subsubTemplate' setting it's
> only parameter to '$element$'
>                                 ELSE
>                                    invokes 'subsubTemplate' 
> setting it's
> only parameter to '$it.DataC$'
> 
> >
> > rootTemplate(DataBlock1,DataBlock2) ::= <<
> > BEGIN (rootTemplate)
> >  Applying the subtemplate to DataBlock1:
> >
> > $DataBlock1:subTemplate()$
> > ======================================================
> >  Accessing part of DataBlock1 directly (multi-valued):
> > DataBlock1.DataA = $DataBlock1.DataA$
> >
> >  Accessing part of DataBlock2 directly (single-valued):
> > DataBlock2.ItemB = $DataBlock2.ItemB$
> > END (rootTemplate)
> > >>
> >
> > To archive my goal I have written a data-structure consisting
> > of ArrayLists and Hashmaps (alternating).
> > A hash being the root and containing Lists(of hashes) for 
> multi-valued
> > attributes or attributes (Strings) for single-values.
> >
> > DataBlock2.ItemB = $DataBlock2.ItemB$ from the rootTemplate 
> always works.
> (good!)
> >
> > DataBlock1.DataA = $DataBlock1.DataA$ does not normally 
> work because the
> "answer"
> > would be multi-valued.
> > I got this to work too by writing a List which implements a 
> this[string]
> accessor that
> > iterates over the list and constructs a new list from the matching
> attributes of the
> > hashmaps in the list. (Essentially skipping one "layer" of the data
> structure)
> > @Kunle: This is how I solved the last problem I mailed you about.
> > In the example my list implementation returns 
> [1_DataA,2_DataA] if called
> as
> > myList_DataBlock1["DataA"] (Not necessarily stings but 
> whatever the hashes
> contain at key "DataA").
> 
> Since they are indexed by (and accessed by) a string key (not 
> uniquely I now
> understand), why not just use an IDictionary?. The separate 
> entries for keys
> like "DataA" can then held in a list.
> If preserving insertion order is important, you can develop a 
> specialized
> IDictionary. ST#'s HashList may provide pointers there.
> 
> > One last problem which I feel is related to the " question regarding
> specialcasingof IList"
> > previously on the mailinlist.
> > The call to the subsubTemplate!
> >
> > As you see from the code I have given two implementations.
> > The one with the named parameter works IF (and only if) I call it
> > $subsubTemplate(it.DataC)$
> > My preferred version of
> > $it.DataC:subsubTemplate()$
> > does NOT work.
> 
> It does work as advertised. If the attribute is multi-valued (i.e.
> enumerable), it will be treated as such. Using explicit 
> formal parameters
> affords you some control over the process. You may choose to 
> never enumerate
> by only accessing properties directly for instance.
> 
> Incidentally special-casing of IList simply means that IList 
> is *always*
> regarded as enumerable.
> 
> Given two IList instances list1 = {1,2,3} and list2 = {"a", "b", "c"}:
> 
> st.SetAttribute("data", list1);
> st.SetAttribute("data", list2);
> 
> would result in:
>   $data$ -> [1, 2, 3, "a", "b", "c"]
> 
> If list1 and list2 were not ILists, you would get:
>   $data$ -> [list1, list2].
> 
> 
> > Neither does the subsubTemplateB in any version
> 
> It can't. The template application logic controls the 
> enumeration in this
> case not the template.
> 
> > From the output below one can see that $it.DataC:subsubTemplate()$
> > gives a list to subsubTemplate() when it SHOULD be a Hash containing
> > a list (of 2 items) and a single value.
> > Any idea why this is the case?
> 
> IDictionary objects are enumerable so that is the expected 
> behaviour. You
> should pass your hashtable as a formal parameter if you don't want it
> enumerated by the template application logic.
> 
> 
> Good luck.
> 
> 
> Kunle
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest@antlr.org
> http://www.antlr.org:8080/mailman/listinfo/stringtemplate-interest
> 
> 
From Ulf.Dreyer at de.bosch.com  Tue May 30 06:12:35 2006
From: Ulf.Dreyer at de.bosch.com (Dreyer Ulf (CR/APA3))
Date: Tue May 30 06:12:42 2006
Subject: AW: [stringtemplate-interest] Problems with List and Hashes revisited
	DO NOT READ THE LAST ONE
In-Reply-To: <19D19E1AA3C5154D85A43D38808E48AB7116A1@fe-mail29.de.bosch.com>
Message-ID: <19D19E1AA3C5154D85A43D38808E48AB7116A2@fe-mail29.de.bosch.com>

 
I was copy/pasting and hit ctrl-return
and thisn %$?&%$&?%%-Outlook sent a half finisheld Mail

Sorry @all!
From Ulf.Dreyer at de.bosch.com  Tue May 30 07:12:48 2006
From: Ulf.Dreyer at de.bosch.com (Dreyer Ulf (CR/APA3))
Date: Tue May 30 07:12:52 2006
Subject: AW: AW: AW: [stringtemplate-interest] Problems with List and Hashes
	revisited REAL MAIL
Message-ID: <19D19E1AA3C5154D85A43D38808E48AB7116A4@fe-mail29.de.bosch.com>

Sorry about the last one - this is the complete Mail

Hello Kunle,

thank you very much for this extensive answer!
I cut most of the citation but there where very clear
hints I needed ;)

(1) I think I've solved the problem to my satisfaction.
    But only time and more coding will show ;)
    Anything with children (in my tree) is put into a
    list (of one element). So a template application
    data:template() "unwraps" the list and leaves the
    hash(treenode) untouched.
    This is the behaviour I find natural because
    I can't find an application for enumerating a hash.
    
    I have cleared up a few points from the last mail
    if you are interested.

(2) I have still more questions :(
    Maybe the clarification below are needed.
    And maybe this are side effects of my strange data-structure.

a)
Am I right in thinking that templates without formal arguments

SomeTemplate() ::= << Output=$it.something$ >>
can only be invoked as  $SomeData:SomeTemplate()$
never as $SomeTemplate(SomeData)$
(I get: "template anotherOutput must have exactly one formal 
arg in template context [..Context..]")
 
b)
Should this template work? (It always crashes on me because
of stack-overflow)

RecursiveOut(Daten) ::= << $Daten:RecursiveOut();separator=","$ >>
As both classes in my data-structure (AttributeHash and AttributeList)
are IEnumerable it should strip away one layer at a time, shouldn't it?

------------------------------------------------------------------
         Clarification  for last mail's mess ;)
------------------------------------------------------------------
This is a little back to front:

I)   Your suggestion (and the strange similarities of my solution to it)
[...]
> Since they [my datastructure AttributeList and/or AttributeHash]
> are indexed by (and accessed by) a string key 
> (not uniquely I now understand), 
I am not sure if you mean what I think:
Within a Hash there are (naturally) no two keys alike.
If I try to add an existant key its value becomes a list of the old
value(s) and the new entry. If that is what you mean by "not uniquely"
we are on the same page ;) 

>why not just use an IDictionary?. 

That's what I DO! (Even prior to the last mail)

> The separate entries for keys like "DataA" can then held in a list.
> If preserving insertion order is important, you can develop a 
> specialized IDictionary. ST#'s HashList may provide pointers there.

Here our understanding differs a little. I hope I can clarify it
with the old xml-file:

------------------------------------------------------------------
II) Data-structure again
 
> > Sample xml-file:
> >
> > <?xml version="1.0"?>
> > <root>
> >     <DataBlock1>
> >                 <DataA>1_DataA</DataA>
> >                 <DataB>1_DataB</DataB>
> >                 <DataC>
> >                         <SubC1>1_SubC1Content1</SubC1>
> >                         <SubC1>1_SubC1Content2</SubC1>
> >                         <SubC2>1_SubC2Content</SubC2>
> >                 </DataC>
> >     </DataBlock1>
> >     <DataBlock1>
> >                 <DataA>2_DataA</DataA>
> >                 <DataB>2_DataB</DataB>
> >                 <DataC>
> >                         <SubC1>2_SubC1Content1</SubC1>
> >                         <SubC1>2_SubC1Content2</SubC1>
> >                         <SubC2>2_SubC2Content</SubC2>
> >                 </DataC>
> >     </DataBlock1>
> >     <DataBlock2>
> >                 <ItemB>ItemBContent</ItemB>
> >     </DataBlock2>
> > </root>
>
> So you have a toplevel Hashtable that contains ("key, 
> [elem1,...elemN]"
> means entry has key "key" and is a list of elem1...elemN):
>    DataBlock1, [DataA, DataB, DataC]
>    DataBlock2, ItemB     
> where ItemB is not a list right?

Close but not quite (I think)

First: the  "Is ItemB a list (of one element) or not?"-question
	 changes answers very often during my experiments.

CURRENTLY: If (ItemB is a String) there is NO list
           If (ItemB is a Hash)   there is a list of one element

One try to make it simple to understand my weird logic:
Anything named in the xml gets an entry into a hash (AttributeHash).
IF there are two (or more) equally named xml-nodes (on the same level)
they are put into a list which is entered into the hash.
With the Statement directly above (Currently...) this means
Every named xmlNode which is NOT a simple string is put into a List
which is put into a Hash.

The above XML yields the following structure (not complete)
{} = empty hash, {(),()} Hash with two elements
("Key",ANYTHING) = key-value pair within a hash
[] = empty list

Top Level Hash (nameless) = 
{ ("DataBlock1",[ NamelessHash{ ("DataA", String:1_DataA ) 
					  ("DataB", String:1_DataB ) 
					  ("DataC", NamelessHash*SNIP
too long* )}, 
			
			NamelessHash{ ("DataA", String:2_DataA ) 
					  ("DataB", String:2_DataB ) 
					  ("DataC", NamelessHash*SNIP
too long* )}
 		    ])
  ("DataBlock2",[ NamelessHash{("ItemB",String:ItemBContent)} ]) 
}

> I presume that the extra DataBlock1 entry is a typo 
> right?. If not, then
> DataBlock1 is as below:
>       DataBlock1, [DataA, DataB, DataC, DataA, DataB, DataC]

No the extra DataBlock1 is for real - 
thats where Attributes MAY be multi-valued without me knowing
in advance ;)

And it SHOULD look (simplified not entirely in above syntax)
 { ("DataBlock1", [{DataA, DataB, DataC}, {DataA, DataB, DataC}])
   ("DataBlock2", *SNIP*}

One unexpected behaviour I mentioned in earlier mails:
Normally one could only access something like
MyDataInstance["DataBlock1"][1]["DataA"]  (which would be "1_DataA")
because MyDataInstance["DataBlock1"] is of Type List.
My list supports another lookup so that the following is possible:
MyDataInstance["DataBlock1"]["DataA"] (which would return a List
 containing all elements named "DataA" in all elements of the list.
["1_DataA","2_DataA"]

------------------------------------------------------------------
III) a question of syntax:

> If you don't want an enumerable attribute to be treated as enumerable,
> define a formal parameter and use the alternate syntax:
>    subtemplate(<parameterName>=<DataStruct>)
 
> IDictionary objects are enumerable so that is the expected 
> behaviour. You
> should pass your hashtable as a formal parameter if you don't want it
> enumerated by the template application logic.

I can't do that because I don't necessarily know in advance if an
attribute will be single or multi-valued.
Therefore it has to be the Data:Template() Syntax.

I solved this (for the time being) by putting any AttributeHash 
(even single ones) into an AttributeList.
I hope this won't have any ugly side-effects

> Good luck.
Thanks for your time. Thanks a LOT.

Ulf
From Kunle_Odutola at hotmail.com  Tue May 30 12:11:48 2006
From: Kunle_Odutola at hotmail.com (Kunle Odutola)
Date: Tue May 30 11:54:14 2006
Subject: AW: AW: [stringtemplate-interest] Problems with List and
	Hashesrevisited REAL MAIL
References: <19D19E1AA3C5154D85A43D38808E48AB7116A4@fe-mail29.de.bosch.com>
Message-ID: <BAY101-DAV148F110CA270734CE6441D81920@phx.gbl>

> Hello Kunle,

Hi,

Quick reply. Quite busy currently:

> a)
> Am I right in thinking that templates without formal arguments
>
> SomeTemplate() ::= << Output=$it.something$ >>
> can only be invoked as  $SomeData:SomeTemplate()$
> never as $SomeTemplate(SomeData)$
> (I get: "template anotherOutput must have exactly one formal
> arg in template context [..Context..]")

Yes. The long-hand version is $SomeTemplate(parameterName=SomeData)$.

> b)
> Should this template work? (It always crashes on me because
> of stack-overflow)
>
> RecursiveOut(Daten) ::= << $Daten:RecursiveOut();separator=","$ >>
> As both classes in my data-structure (AttributeHash and AttributeList)
> are IEnumerable it should strip away one layer at a time, shouldn't it?

No. The recursion has no terminating condition.

> I can't do that because I don't necessarily know in advance if an
> attribute will be single or multi-valued.
> Therefore it has to be the Data:Template() Syntax.
>
> I solved this (for the time being) by putting any AttributeHash
> (even single ones) into an AttributeList.
> I hope this won't have any ugly side-effects

Quick thought, strings have a .Length while Lists have a .Count. If these
are the only options at this level:

$if(param.Length)
   $! it's a string !$
$else$
   $! else it's not !$
$endif$


Kunle
From parrt at cs.usfca.edu  Wed May 31 10:17:38 2006
From: parrt at cs.usfca.edu (Terence Parr)
Date: Wed May 31 10:17:44 2006
Subject: AW: [stringtemplate-interest] Problems with List and Hashes
	revisited
In-Reply-To: <19D19E1AA3C5154D85A43D38808E48AB7116A1@fe-mail29.de.bosch.com>
References: <19D19E1AA3C5154D85A43D38808E48AB7116A1@fe-mail29.de.bosch.com>
Message-ID: <00CDA233-6C81-4FC5-B0DF-DF35BC276B22@cs.usfca.edu>


On May 30, 2006, at 6:10 AM, Dreyer Ulf (CR/APA3) wrote:
> (2) Should this template work? (It always crashes on me because
> of stack-overflow)
>
> RecursiveOut(Daten) ::= << $Daten:RecursiveOut();separator=","$ >>
> As both classes in my data-structure (AttributeHash and AttributeList)
> are IEnumerable it should strip away one layer at a time, shouldn't  
> it?

You are saying

f(x) { f(x); }

here.

Ter
From kenny.cockburn at ntlworld.com  Wed May 31 15:34:06 2006
From: kenny.cockburn at ntlworld.com (Kenny Cockburn)
Date: Wed May 31 15:22:40 2006
Subject: [stringtemplate-interest] Newbie Some issues 
Message-ID: <447E19DE.90908@ntlworld.com>

Hi,


I have issue with calling Templates
I am using the c#  version 2.3b7 of string Templates  : I have not tried 
this in the Java version;
The following code segment raises the exception 'antlr.NoViableAltException'

string tmplt = @"
group DescDataSet ;
DescTable(tab) ::= <<
Hello There
 >>
DescDataSet( ds ) ::= <<$ds.Tables:DescTable(tab=it)$>>
";
            StringTemplateGroup stg = new StringTemplateGroup(new 
StringReader(tmplt), typeof(DefaultTemplateLexer));

------------------------------

if I change the template call from :DescTable(tab=it) to :DescTable(it) 
I do not get any exception is this expected behaviour ?

string tmplt = @"
group DescDataSet ;
DescTable(tab) ::= <<
Hello There
 >>
DescDataSet( ds ) ::= <<$ds.Tables:DescTable(it)$>>
";
            StringTemplateGroup stg = new StringTemplateGroup(new 
StringReader(tmplt), typeof(DefaultTemplateLexer));

---------------------------------------------



