From collin.fagan at gmail.com  Thu Sep  1 05:47:03 2011
From: collin.fagan at gmail.com (Collin Fagan)
Date: Thu, 1 Sep 2011 07:47:03 -0500
Subject: [stringtemplate-interest] AttributeProvider interface
Message-ID: <CANiekN4FHTovBnT0Kg3SSNmx=SWEDaPd6wrpw+gkZwEZM=v01A@mail.gmail.com>

Hi Everyone,

I'd like to be able to bridge a StringTemplate to a source of data without
explisitly calling add() for every object. As an example I would like to be
able to add every bean from a Spring application context to the scope of a
string template. I've built a model adapter that allows me to do this but I
still must push in the application context into the template. This also
forces me to do <context.beanIneed.property> instead or the much more
natural <beanINeed.property>. Would it be possible to get an something like
an "AttributeProvider" interface for an ST or STGroup that would allow me to
do this?

I'm thinking something like:

public interface AttributeProvider {

Object getAttribute(String name) throws NoSuchAttribute;

}

I know there have been discussions about formal parameters on templates and
the few use cases where you might not want them. If you didn't have formal
paramaters then injecting you template with it's dependencies with spring
might be a good alternative.

What do you think?

Collin
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20110901/93b47ea0/attachment.html 

From sharwell at pixelminegames.com  Thu Sep  1 06:35:28 2011
From: sharwell at pixelminegames.com (Sam Harwell)
Date: Thu, 1 Sep 2011 08:35:28 -0500
Subject: [stringtemplate-interest] AttributeProvider interface
In-Reply-To: <CANiekN4FHTovBnT0Kg3SSNmx=SWEDaPd6wrpw+gkZwEZM=v01A@mail.gmail.com>
References: <CANiekN4FHTovBnT0Kg3SSNmx=SWEDaPd6wrpw+gkZwEZM=v01A@mail.gmail.com>
Message-ID: <0eb001cc68ac$04285f00$0c791d00$@pixelminegames.com>

This was added in ST4 with the ModelAdaptor interface.

 

Sam

 

From: stringtemplate-interest-bounces at antlr.org
[mailto:stringtemplate-interest-bounces at antlr.org] On Behalf Of Collin Fagan
Sent: Thursday, September 01, 2011 7:47 AM
To: stringtemplate-interest List
Subject: [stringtemplate-interest] AttributeProvider interface

 

Hi Everyone,

I'd like to be able to bridge a StringTemplate to a source of data without
explisitly calling add() for every object. As an example I would like to be
able to add every bean from a Spring application context to the scope of a
string template. I've built a model adapter that allows me to do this but I
still must push in the application context into the template. This also
forces me to do <context.beanIneed.property> instead or the much more
natural <beanINeed.property>. Would it be possible to get an something like
an "AttributeProvider" interface for an ST or STGroup that would allow me to
do this?

I'm thinking something like: 

public interface AttributeProvider {

Object getAttribute(String name) throws NoSuchAttribute;

}

I know there have been discussions about formal parameters on templates and
the few use cases where you might not want them. If you didn't have formal
paramaters then injecting you template with it's dependencies with spring
might be a good alternative. 

What do you think?

Collin

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20110901/a77f3708/attachment-0001.html 

From collin.fagan at gmail.com  Thu Sep  1 06:44:16 2011
From: collin.fagan at gmail.com (Collin Fagan)
Date: Thu, 1 Sep 2011 08:44:16 -0500
Subject: [stringtemplate-interest] AttributeProvider interface
In-Reply-To: <0eb001cc68ac$04285f00$0c791d00$@pixelminegames.com>
References: <CANiekN4FHTovBnT0Kg3SSNmx=SWEDaPd6wrpw+gkZwEZM=v01A@mail.gmail.com>
	<0eb001cc68ac$04285f00$0c791d00$@pixelminegames.com>
Message-ID: <CANiekN7T9NroYCRbAq0Evk1vWnSECUjCTsdVypDsxaG+APuN0Q@mail.gmail.com>

Yes as I said I've implemented model adapters to get results very much like
what I'm asking for.

But a model adapter only controls what happens 'after the dot'. I want to
provide the actual variables.

<beanFromSpring.dataIneed>

instead of

<context.beanFromSpring.dataIneed>

Collin

On Thu, Sep 1, 2011 at 8:35 AM, Sam Harwell <sharwell at pixelminegames.com>wrote:

> This was added in ST4 with the ModelAdaptor interface.****
>
> ** **
>
> Sam****
>
> ** **
>
> *From:* stringtemplate-interest-bounces at antlr.org [mailto:
> stringtemplate-interest-bounces at antlr.org] *On Behalf Of *Collin Fagan
> *Sent:* Thursday, September 01, 2011 7:47 AM
> *To:* stringtemplate-interest List
> *Subject:* [stringtemplate-interest] AttributeProvider interface****
>
> ** **
>
> Hi Everyone,
>
> I'd like to be able to bridge a StringTemplate to a source of data without
> explisitly calling add() for every object. As an example I would like to be
> able to add every bean from a Spring application context to the scope of a
> string template. I've built a model adapter that allows me to do this but I
> still must push in the application context into the template. This also
> forces me to do <context.beanIneed.property> instead or the much more
> natural <beanINeed.property>. Would it be possible to get an something like
> an "AttributeProvider" interface for an ST or STGroup that would allow me to
> do this?
>
> I'm thinking something like:
>
> public interface AttributeProvider {
>
> Object getAttribute(String name) throws NoSuchAttribute;
>
> }
>
> I know there have been discussions about formal parameters on templates and
> the few use cases where you might not want them. If you didn't have formal
> paramaters then injecting you template with it's dependencies with spring
> might be a good alternative.
>
> What do you think?
>
> Collin****
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20110901/5aa78336/attachment.html 

From jiwon at stanford.edu  Thu Sep  1 15:35:46 2011
From: jiwon at stanford.edu (Jiwon Seo)
Date: Thu, 1 Sep 2011 15:35:46 -0700
Subject: [stringtemplate-interest] Conditionals
Message-ID: <CAGWbJj8f6cDD2G7qY-Yqm7UM3idtxC+OAp1HK3u9=BSeyemP3A@mail.gmail.com>

Hi,

I'm using stringtemplate for code generation.
One thing I need to do is to generate different code based on the type
of a variable, like following:

Foo(type, a, b) ::= <<
class Foo {
    <type> foo;

    <if (type=="int")>
       do some int thing
    <elseif (type=="String">
      do some string thing
    <endif>
}
>>

So far, I could somehow use the map (such as, EqMap ::= ["int": "==" ,
default: ".equals"] ) but this is something that cannot be done using
the map. So I ended up using a lot of variables like following:

Foo(type, intType, stringType, ... a, b) ::= <<
class Foo {
    <type> foo;

    <if (intType)>
       do some int thing
    <elseif (stringType)>
      do some string thing
    <endif>
}
>>

Is there any other ways of doing this?

-Jiwon

From ub at abego-software.de  Fri Sep  2 04:24:00 2011
From: ub at abego-software.de (Udo Borkowski)
Date: Fri, 2 Sep 2011 13:24:00 +0200
Subject: [stringtemplate-interest] Conditionals
In-Reply-To: <CAGWbJj8f6cDD2G7qY-Yqm7UM3idtxC+OAp1HK3u9=BSeyemP3A@mail.gmail.com>
References: <CAGWbJj8f6cDD2G7qY-Yqm7UM3idtxC+OAp1HK3u9=BSeyemP3A@mail.gmail.com>
Message-ID: <1E498F83-AA53-4F32-9BE3-24B13E64D4E5@abego-software.de>

Hi Jiwon,

> So far, I could somehow use the map (such as, EqMap ::= ["int": "==" ,
> default: ".equals"] ) but this is something that cannot be done using
> the map. 

Actually maps provide a way to do exactly what you are looking for.

For every value you want to check ("int", "String") just create a map like this:

	someName ::= ["TheValue":true]

Then you can check if a variable holds this value using 

	<if (someName.(variable))> ? <endif>

(Make sure to put (?) around the variable)


E.g. in your case you would define

	isInt ::= ["int":true]
and
	isString ::= ["String":true]


Your example would then look like this:

Foo(type, a, b) ::= <<
class Foo {
    <type> foo;

<if (isInt.(type))>
    foo = <a>+<b>; // int operation
<elseif (isString.(type))>
    foo = "<a>"+ " " +"<b>"; // string operation
<endif>
}
>>

When called by a template like this:

main() ::= <<
<Foo("int","x","2")>

<Foo("String","foo","bar")>
>>

the output is:

class Foo {
    int foo;

    foo = x+2; // int operation
}

class Foo {
    String foo;

    foo = "foo"+ " " +"bar"; // string operation
}


Udo


On 02.09.2011, at 00:35, Jiwon Seo wrote:

> Hi,
> 
> I'm using stringtemplate for code generation.
> One thing I need to do is to generate different code based on the type
> of a variable, like following:
> 
> Foo(type, a, b) ::= <<
> class Foo {
>    <type> foo;
> 
>    <if (type=="int")>
>       do some int thing
>    <elseif (type=="String">
>      do some string thing
>    <endif>
> }
>>> 
> 
> So far, I could somehow use the map (such as, EqMap ::= ["int": "==" ,
> default: ".equals"] ) but this is something that cannot be done using
> the map. So I ended up using a lot of variables like following:
> 
> Foo(type, intType, stringType, ... a, b) ::= <<
> class Foo {
>    <type> foo;
> 
>    <if (intType)>
>       do some int thing
>    <elseif (stringType)>
>      do some string thing
>    <endif>
> }
>>> 
> 
> Is there any other ways of doing this?
> 
> -Jiwon
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20110902/922b79b5/attachment.html 

From ben.corne at gmail.com  Sat Sep  3 03:06:02 2011
From: ben.corne at gmail.com (Ben Corne)
Date: Sat, 3 Sep 2011 12:06:02 +0200
Subject: [stringtemplate-interest] Set up template attributes with external
	method call
Message-ID: <CAGcyXXHRUyeJAtHJHRhEhD889fUY1zX_vZ3GtKU0tc_XPdfFsQ@mail.gmail.com>

Hi!

I'm rather new to StringTemplate but I'm wondering if there's a way to do
the following inside a template: call methods on an attribute value  with
arguments that are more attribute values.
I've read that allowing this is not promoting the strict separation of view
and model.

This is my context: I have the output of a programming language
documentation tool. It is a tree-like construction where objects, methods
(and more, left out for simplicity) can be nested in any level of the tree.
I start at the root, this is a template file called file.st.

file.st includes begin.st (a file is a statementlist)
begin.st has a set of objects and functions
an object is also a statementlist and needs to include begin aswell.
a function is a leave of the tree.

I know that for the initial StringTemplate you can set up attributes from
the pure java world. However, once inside the first template, you have to
initialize attributes for subtemplates in the StringTemplate world. I don't
want to put this burdon on template writers for my tool so I wanted to
provide an method that does this for them.
=> For each type of documented concept I have a StringTemplate file and a
method "run<File|Function|Object>(concept)" that sets up the attribute
values given that concept.

Is there any way to acchieve this that doesn't mean having to make separate
dataclasses to represent the tree in a way that stringtemplate can visit it?
Or am I missing the big picture?

Kind regards,
Ben Corne
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20110903/0e8e7054/attachment.html 

From collin.fagan at gmail.com  Sat Sep  3 05:18:46 2011
From: collin.fagan at gmail.com (Collin Fagan)
Date: Sat, 3 Sep 2011 07:18:46 -0500
Subject: [stringtemplate-interest] Set up template attributes with
 external method call
In-Reply-To: <CAGcyXXHRUyeJAtHJHRhEhD889fUY1zX_vZ3GtKU0tc_XPdfFsQ@mail.gmail.com>
References: <CAGcyXXHRUyeJAtHJHRhEhD889fUY1zX_vZ3GtKU0tc_XPdfFsQ@mail.gmail.com>
Message-ID: <CANiekN7PJ59_8gZt9Rs5ATHm1naFELopZJgA3h0MaaSPJnOA7w@mail.gmail.com>

Hi Ben,

You might want to look at writing model adapters to "add" the properties you
want to the object hierarchy you are stuck with.

I have some examples on the strum page.

http://sourceforge.net/apps/mediawiki/project-strum/index.php?title=Main_Page

The basic idea is "hey ST when you see this attribute on this class do *
this".
*
I hope this helps,

Collin


On Sat, Sep 3, 2011 at 5:06 AM, Ben Corne <ben.corne at gmail.com> wrote:

> Hi!
>
> I'm rather new to StringTemplate but I'm wondering if there's a way to do
> the following inside a template: call methods on an attribute value  with
> arguments that are more attribute values.
> I've read that allowing this is not promoting the strict separation of view
> and model.
>
> This is my context: I have the output of a programming language
> documentation tool. It is a tree-like construction where objects, methods
> (and more, left out for simplicity) can be nested in any level of the tree.
> I start at the root, this is a template file called file.st.
>
> file.st includes begin.st (a file is a statementlist)
> begin.st has a set of objects and functions
> an object is also a statementlist and needs to include begin aswell.
> a function is a leave of the tree.
>
> I know that for the initial StringTemplate you can set up attributes from
> the pure java world. However, once inside the first template, you have to
> initialize attributes for subtemplates in the StringTemplate world. I don't
> want to put this burdon on template writers for my tool so I wanted to
> provide an method that does this for them.
> => For each type of documented concept I have a StringTemplate file and a
> method "run<File|Function|Object>(concept)" that sets up the attribute
> values given that concept.
>
> Is there any way to acchieve this that doesn't mean having to make separate
> dataclasses to represent the tree in a way that stringtemplate can visit it?
> Or am I missing the big picture?
>
> Kind regards,
> Ben Corne
>
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20110903/a060b4f1/attachment.html 

From collin.fagan at gmail.com  Sat Sep  3 05:30:28 2011
From: collin.fagan at gmail.com (Collin Fagan)
Date: Sat, 3 Sep 2011 07:30:28 -0500
Subject: [stringtemplate-interest] What compiles to :
	Bytecode.INSTR_LOAD_ATTR ?
Message-ID: <CANiekN6paCauqrg7S5g1oSbqkh=1CNCwkzu9Qi2w+L-1KxvRgA@mail.gmail.com>

Hi Everyone,

In my (probably misguided) quest to inject attributes into the scope of a
template I've overridden the getAttribute method on Interpreter. This method
call gets invoked when the Interpreter runs into Bytecode.INSTR_LOAD_ATTR.
My problem is that my simple test never generates this bytecode. It only
generates Bytecode.INSTR_LOAD_LOCAL.

Does anyone know what I have to do to generate Bytecode.INSTR_LOAD_ATTR?


Thanks,

Collin


Here is my experimental code:

/**
 *
 * @author collin
 */
public class Exp {

    private class ExtInterpreter extends Interpreter {

        public ExtInterpreter(STGroup group, Locale locale,
                ErrorManager errMgr, boolean debug) {
            super(group, locale, errMgr, debug);
            // TODO Auto-generated constructor stub
        }

        @Override
        public Object getAttribute(ST self, String name) {
            System.out.println(name);
            return super.getAttribute(self, name);
        }
    }

    @Test
    public void testStaticMethodAddForString() {
        STGroup group = new STGroup();
        group.defineTemplate("main", "string", "{<string.q>}");
        ST mainTemplate = group.getInstanceOf("main");
//        mainTemplate.add("string", "this is my test string");

        Interpreter interp = new
ExtInterpreter(group,Locale.getDefault(),group.errMgr,false);
        StringWriter stringWriter = new StringWriter();
        STWriter wr = new AutoIndentWriter(stringWriter);
        wr.setLineWidth(STWriter.NO_WRAP);
        interp.exec(wr, mainTemplate);
        System.out.print(stringWriter.toString());
    }
}
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20110903/f47dbdb3/attachment.html 

From ub at abego-software.de  Sun Sep  4 02:53:25 2011
From: ub at abego-software.de (Udo Borkowski)
Date: Sun, 4 Sep 2011 11:53:25 +0200
Subject: [stringtemplate-interest] What compiles to :
	Bytecode.INSTR_LOAD_ATTR ?
In-Reply-To: <CANiekN6paCauqrg7S5g1oSbqkh=1CNCwkzu9Qi2w+L-1KxvRgA@mail.gmail.com>
References: <CANiekN6paCauqrg7S5g1oSbqkh=1CNCwkzu9Qi2w+L-1KxvRgA@mail.gmail.com>
Message-ID: <71CC24DF-6F6D-4E02-93DC-ED5B91B62B01@abego-software.de>

Hi Colin,

instead of 

>         group.defineTemplate("main", "string", "{<string.q>}");

just write 

>         group.defineTemplate("main", "{<string.q>}");


and it will generate an INSTR_LOAD_LOCAL

Udo


On 03.09.2011, at 14:30, Collin Fagan wrote:

> Hi Everyone,
> 
> In my (probably misguided) quest to inject attributes into the scope of a template I've overridden the getAttribute method on Interpreter. This method call gets invoked when the Interpreter runs into Bytecode.INSTR_LOAD_ATTR. My problem is that my simple test never generates this bytecode. It only generates Bytecode.INSTR_LOAD_LOCAL. 
> 
> Does anyone know what I have to do to generate Bytecode.INSTR_LOAD_ATTR?
> 
> 
> Thanks,
> 
> Collin
> 
> 
> Here is my experimental code:
> 
> /**
>  *
>  * @author collin
>  */
> public class Exp {
> 
>     private class ExtInterpreter extends Interpreter {
> 
>         public ExtInterpreter(STGroup group, Locale locale,
>                 ErrorManager errMgr, boolean debug) {
>             super(group, locale, errMgr, debug);
>             // TODO Auto-generated constructor stub
>         }
>         
>         @Override
>         public Object getAttribute(ST self, String name) {
>             System.out.println(name);
>             return super.getAttribute(self, name);
>         }
>     }
>     
>     @Test
>     public void testStaticMethodAddForString() {
>         STGroup group = new STGroup();
>         group.defineTemplate("main", "string", "{<string.q>}");
>         ST mainTemplate = group.getInstanceOf("main");
> //        mainTemplate.add("string", "this is my test string");
> 
>         Interpreter interp = new ExtInterpreter(group,Locale.getDefault(),group.errMgr,false);
>         StringWriter stringWriter = new StringWriter();
>         STWriter wr = new AutoIndentWriter(stringWriter);
>         wr.setLineWidth(STWriter.NO_WRAP);
>         interp.exec(wr, mainTemplate);
>         System.out.print(stringWriter.toString());
>     }
> }
> 
> 
> 
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20110904/ceb05f3a/attachment.html 

From collin.fagan at gmail.com  Sun Sep  4 04:38:52 2011
From: collin.fagan at gmail.com (Collin Fagan)
Date: Sun, 4 Sep 2011 06:38:52 -0500
Subject: [stringtemplate-interest] What compiles to :
 Bytecode.INSTR_LOAD_ATTR ?
In-Reply-To: <71CC24DF-6F6D-4E02-93DC-ED5B91B62B01@abego-software.de>
References: <CANiekN6paCauqrg7S5g1oSbqkh=1CNCwkzu9Qi2w+L-1KxvRgA@mail.gmail.com>
	<71CC24DF-6F6D-4E02-93DC-ED5B91B62B01@abego-software.de>
Message-ID: <CANiekN69=gd+Ld8v9Shjk=hxB16pNTYwYU1bzD3sc-TSZ7nGYw@mail.gmail.com>

Thanks Udo, that worked.

On Sun, Sep 4, 2011 at 4:53 AM, Udo Borkowski <ub at abego-software.de> wrote:

> Hi Colin,
>
> instead of
>
>         group.defineTemplate("main", "string", "{<string.q>}");
>
>
> just write
>
>         group.defineTemplate("main", "{<string.q>}");
>
>
>
> and it will generate an INSTR_LOAD_LOCAL
>
> Udo
>
>
> On 03.09.2011, at 14:30, Collin Fagan wrote:
>
> Hi Everyone,
>
> In my (probably misguided) quest to inject attributes into the scope of a
> template I've overridden the getAttribute method on Interpreter. This method
> call gets invoked when the Interpreter runs into Bytecode.INSTR_LOAD_ATTR.
> My problem is that my simple test never generates this bytecode. It only
> generates Bytecode.INSTR_LOAD_LOCAL.
>
> Does anyone know what I have to do to generate Bytecode.INSTR_LOAD_ATTR?
>
>
> Thanks,
>
> Collin
>
>
> Here is my experimental code:
>
> /**
>  *
>  * @author collin
>  */
> public class Exp {
>
>     private class ExtInterpreter extends Interpreter {
>
>         public ExtInterpreter(STGroup group, Locale locale,
>                 ErrorManager errMgr, boolean debug) {
>             super(group, locale, errMgr, debug);
>             // TODO Auto-generated constructor stub
>         }
>
>         @Override
>         public Object getAttribute(ST self, String name) {
>             System.out.println(name);
>             return super.getAttribute(self, name);
>         }
>     }
>
>     @Test
>     public void testStaticMethodAddForString() {
>         STGroup group = new STGroup();
>         group.defineTemplate("main", "string", "{<string.q>}");
>         ST mainTemplate = group.getInstanceOf("main");
> //        mainTemplate.add("string", "this is my test string");
>
>         Interpreter interp = new
> ExtInterpreter(group,Locale.getDefault(),group.errMgr,false);
>         StringWriter stringWriter = new StringWriter();
>         STWriter wr = new AutoIndentWriter(stringWriter);
>         wr.setLineWidth(STWriter.NO_WRAP);
>         interp.exec(wr, mainTemplate);
>         System.out.print(stringWriter.toString());
>     }
> }
>
>
>
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20110904/aeceab42/attachment.html 

From collin.fagan at gmail.com  Sun Sep  4 05:44:44 2011
From: collin.fagan at gmail.com (Collin Fagan)
Date: Sun, 4 Sep 2011 07:44:44 -0500
Subject: [stringtemplate-interest] What compiles to :
 Bytecode.INSTR_LOAD_ATTR ?
In-Reply-To: <272E22B7-D958-4B86-A5DA-312120E59B74@gmx.de>
References: <CANiekN6paCauqrg7S5g1oSbqkh=1CNCwkzu9Qi2w+L-1KxvRgA@mail.gmail.com>
	<71CC24DF-6F6D-4E02-93DC-ED5B91B62B01@abego-software.de>
	<272E22B7-D958-4B86-A5DA-312120E59B74@gmx.de>
Message-ID: <CANiekN4DWVZTRxBPEz6nf4q9a-frc5NPEwb6hjt4Yh6cMsJ77g@mail.gmail.com>

It got me on the right track. I now have a template that will get all it's
attributes from a Spring ApplicationContext.

So now I can do :

main() ::= <<

<springBean.value>

>>

Where springBean is the name of the bean in the ApplicationContext. So now I
can dependency inject a template attribute.

Next is jsr223 (scripting) support I think.

Collin

On Sun, Sep 4, 2011 at 5:05 AM, Udo Borkowski <Udo.Borkowski at gmx.de> wrote:

> Hi Colin,
> little typo:
>
>
>
> instead of
>
>         group.defineTemplate("main", "string", "{<string.q>}");
>
>
> just write
>
>         group.defineTemplate("main", "{<string.q>}");
>
>
>
> and it will generate an INSTR_LOAD_ATTR
>
> Udo
>
>
> P.S. The relevant ST4 code is located in
> public void refAttr(Token templateToken, CommonTree id)
>
>
>
> On 04.09.2011, at 11:53, Udo Borkowski wrote:
>
> Hi Colin,
>
> instead of
>
>         group.defineTemplate("main", "string", "{<string.q>}");
>
>
> just write
>
>         group.defineTemplate("main", "{<string.q>}");
>
>
>
> and it will generate an INSTR_LOAD_LOCAL
>
> Udo
>
>
> On 03.09.2011, at 14:30, Collin Fagan wrote:
>
> Hi Everyone,
>
> In my (probably misguided) quest to inject attributes into the scope of a
> template I've overridden the getAttribute method on Interpreter. This method
> call gets invoked when the Interpreter runs into Bytecode.INSTR_LOAD_ATTR.
> My problem is that my simple test never generates this bytecode. It only
> generates Bytecode.INSTR_LOAD_LOCAL.
>
> Does anyone know what I have to do to generate Bytecode.INSTR_LOAD_ATTR?
>
>
> Thanks,
>
> Collin
>
>
> Here is my experimental code:
>
> /**
>  *
>  * @author collin
>  */
> public class Exp {
>
>     private class ExtInterpreter extends Interpreter {
>
>         public ExtInterpreter(STGroup group, Locale locale,
>                 ErrorManager errMgr, boolean debug) {
>             super(group, locale, errMgr, debug);
>             // TODO Auto-generated constructor stub
>         }
>
>         @Override
>         public Object getAttribute(ST self, String name) {
>             System.out.println(name);
>             return super.getAttribute(self, name);
>         }
>     }
>
>     @Test
>     public void testStaticMethodAddForString() {
>         STGroup group = new STGroup();
>         group.defineTemplate("main", "string", "{<string.q>}");
>         ST mainTemplate = group.getInstanceOf("main");
> //        mainTemplate.add("string", "this is my test string");
>
>         Interpreter interp = new
> ExtInterpreter(group,Locale.getDefault(),group.errMgr,false);
>         StringWriter stringWriter = new StringWriter();
>         STWriter wr = new AutoIndentWriter(stringWriter);
>         wr.setLineWidth(STWriter.NO_WRAP);
>         interp.exec(wr, mainTemplate);
>         System.out.print(stringWriter.toString());
>     }
> }
>
>
>
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>
>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20110904/e48cf6fb/attachment-0001.html 

From collin.fagan at gmail.com  Sun Sep  4 10:09:29 2011
From: collin.fagan at gmail.com (Collin Fagan)
Date: Sun, 4 Sep 2011 12:09:29 -0500
Subject: [stringtemplate-interest] What compiles to :
 Bytecode.INSTR_LOAD_ATTR ?
In-Reply-To: <CANiekN4DWVZTRxBPEz6nf4q9a-frc5NPEwb6hjt4Yh6cMsJ77g@mail.gmail.com>
References: <CANiekN6paCauqrg7S5g1oSbqkh=1CNCwkzu9Qi2w+L-1KxvRgA@mail.gmail.com>
	<71CC24DF-6F6D-4E02-93DC-ED5B91B62B01@abego-software.de>
	<272E22B7-D958-4B86-A5DA-312120E59B74@gmx.de>
	<CANiekN4DWVZTRxBPEz6nf4q9a-frc5NPEwb6hjt4Yh6cMsJ77g@mail.gmail.com>
Message-ID: <CANiekN5cuO411EThSGq7GooeUdhweoe1LZ_9LtoRhBKbmG1Q6w@mail.gmail.com>

I have built some experimental code for setting what I call an
"AttributeProvider" on an STGroup.

ExtendedGroupFile group = new
ExtendedGroupFile("templates/SpringContextAttributeProviderTest.stg");
group.setAttributeProvider(new SpringContextAttributeProvider(context));
ST template = group.getInstanceOf("main");
System.out.println(template.render());

This code when combined with the following template.

main() ::= <<

First Name: <dataBean.firstName>
Last Name: <dataBean.lastName>

System Properties:
 java.runtime.name = <systemProperties.("java.runtime.name")>
 java.version = <systemProperties.("java.version")>

>>

Produces this output:

First Name: Peter
Last Name: Parker

System Properties:
 java.runtime.name = Java(TM) SE Runtime Environment
 java.version = 1.6.0_23

As you can see none of those attributes were declared in the template.
Everything used exists in the spring application context.

SpringContextAttributeProvider implements AttributeProvider

public interface AttributeProvider {

    public Object getAttribute(ST sourceTemplate, String attributeName);

}

This lets you expose objects from any source to a template. One might use
this as a way to build jsr223
(http://java.sun.com/developer/technicalArticles/J2SE/Desktop/scripting/
) bindings for ST. I've even been considering building one that understands
Apache Wicket models so I can build 1 model that binds to components or
generates text via ST.

Is there any chance something like this could be implemented directly into
ST? I think it's the next step beyond model adapters.

Collin

On Sun, Sep 4, 2011 at 7:44 AM, Collin Fagan <collin.fagan at gmail.com> wrote:

> It got me on the right track. I now have a template that will get all it's
> attributes from a Spring ApplicationContext.
>
> So now I can do :
>
> main() ::= <<
>
> <springBean.value>
>
> >>
>
> Where springBean is the name of the bean in the ApplicationContext. So now
> I can dependency inject a template attribute.
>
> Next is jsr223 (scripting) support I think.
>
> Collin
>
>
> On Sun, Sep 4, 2011 at 5:05 AM, Udo Borkowski <Udo.Borkowski at gmx.de>wrote:
>
>> Hi Colin,
>> little typo:
>>
>>
>>
>> instead of
>>
>>         group.defineTemplate("main", "string", "{<string.q>}");
>>
>>
>> just write
>>
>>         group.defineTemplate("main", "{<string.q>}");
>>
>>
>>
>> and it will generate an INSTR_LOAD_ATTR
>>
>> Udo
>>
>>
>> P.S. The relevant ST4 code is located in
>> public void refAttr(Token templateToken, CommonTree id)
>>
>>
>>
>> On 04.09.2011, at 11:53, Udo Borkowski wrote:
>>
>> Hi Colin,
>>
>> instead of
>>
>>         group.defineTemplate("main", "string", "{<string.q>}");
>>
>>
>> just write
>>
>>         group.defineTemplate("main", "{<string.q>}");
>>
>>
>>
>> and it will generate an INSTR_LOAD_LOCAL
>>
>> Udo
>>
>>
>> On 03.09.2011, at 14:30, Collin Fagan wrote:
>>
>> Hi Everyone,
>>
>> In my (probably misguided) quest to inject attributes into the scope of a
>> template I've overridden the getAttribute method on Interpreter. This method
>> call gets invoked when the Interpreter runs into Bytecode.INSTR_LOAD_ATTR.
>> My problem is that my simple test never generates this bytecode. It only
>> generates Bytecode.INSTR_LOAD_LOCAL.
>>
>> Does anyone know what I have to do to generate Bytecode.INSTR_LOAD_ATTR?
>>
>>
>> Thanks,
>>
>> Collin
>>
>>
>> Here is my experimental code:
>>
>> /**
>>  *
>>  * @author collin
>>  */
>> public class Exp {
>>
>>     private class ExtInterpreter extends Interpreter {
>>
>>         public ExtInterpreter(STGroup group, Locale locale,
>>                 ErrorManager errMgr, boolean debug) {
>>             super(group, locale, errMgr, debug);
>>             // TODO Auto-generated constructor stub
>>         }
>>
>>         @Override
>>         public Object getAttribute(ST self, String name) {
>>             System.out.println(name);
>>             return super.getAttribute(self, name);
>>         }
>>     }
>>
>>     @Test
>>     public void testStaticMethodAddForString() {
>>         STGroup group = new STGroup();
>>         group.defineTemplate("main", "string", "{<string.q>}");
>>         ST mainTemplate = group.getInstanceOf("main");
>> //        mainTemplate.add("string", "this is my test string");
>>
>>         Interpreter interp = new
>> ExtInterpreter(group,Locale.getDefault(),group.errMgr,false);
>>         StringWriter stringWriter = new StringWriter();
>>         STWriter wr = new AutoIndentWriter(stringWriter);
>>         wr.setLineWidth(STWriter.NO_WRAP);
>>         interp.exec(wr, mainTemplate);
>>         System.out.print(stringWriter.toString());
>>     }
>> }
>>
>>
>>
>> _______________________________________________
>> stringtemplate-interest mailing list
>> stringtemplate-interest at antlr.org
>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>>
>>
>>
>>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20110904/ee2368fe/attachment.html 

From fatbull at web.de  Sat Sep 10 07:36:24 2011
From: fatbull at web.de (=?ISO-8859-15?Q?Tobias_G=FCntner?=)
Date: Sat, 10 Sep 2011 16:36:24 +0200
Subject: [stringtemplate-interest] Formatting vs. Escaping in an
	AttributeRenderer
Message-ID: <4E6B75E8.9020708@web.de>

Hello!

I am new to StringTemplate and I am experimenting with string escaping.

The first advice I found was to register a custom attribute renderer and 
specify the escape mechanism in the "format" option. This works fine for 
the most part, but it has a few drawbacks:

* It interferes with "normal" renderer usage, i.e., I can either escape 
or format, but not both. To overcome this limitation, I would have to 
parse the format option and delegate calls to a second renderer which 
does the real formatting - for each type in a STGroup. Certainly doable, 
but it feels like a clumsy workaround.

* I have to remember to specify the correct format everywhere. I find 
this tedious and error-prone. So I figured I could instead escape by 
default and say format="do-not-escape-this-time" if I want something 
else. This did not work, however:

public class Test {
   private static class EscapeRenderer implements AttributeRenderer {
     public String toString(Object o, String format, Locale locale) {
       return '[' + String.valueOf(o) + ']';
     }
   }
   public static void main(String[] args) {
     STGroup g = new STGroup('$', '$');
     ST st = new ST(g, "start$test;separator=\"sep\"$end");
     st.add("test", "aaa").add("test", "bbb").add("test", "ccc");
     g.registerRenderer(Object.class, new EscapeRenderer());
     System.out.println(st.render());
   }
}

The result (using version 4.0.4) was:
	[start][aaa]sep[bbb]sep[ccc][end]
For some reason, literals are escaped as well. Shouldn't this print
	start[aaa]sep[bbb]sep[ccc]end
instead?

* I realize escaping and formatting are mostly orthogonal concepts. 
Formatting converts arbitrary objects into strings depending on the 
needs of the user, whereas escaping transforms strings depending on the 
context of the output. I suppose using an AttributeRenderer to escape 
strings is probably the wrong approach altogether.

Another advice I found was to automatically add properly escaped strings 
whenever new attributes are added to a string template. I do not like 
this either:

* The caller has to know exactly how a certain value is going to be used 
in the template. This dependency can be avoided if every attribute is 
escaped in every possible way, but that would probably be a waste of CPU 
and memory most of the time.

* Recursive escapes (e.g., an HTML fragment in a JS string literal in an 
HTML attribute) are cumbersome.

* Escaping is done before formatting. It should be done last, just 
before the output is concatenated.

A custom model adapter could be used to escape attributes on demand 
(i.e., whenever a magic property name is read), but that does not solve 
the other problems.

Are there other/better ways to escape strings in ST?

Regards,
Tobias

From s.barnett-cormack at lancaster.ac.uk  Sat Sep 10 09:12:33 2011
From: s.barnett-cormack at lancaster.ac.uk (Sam Barnett-Cormack)
Date: Sat, 10 Sep 2011 17:12:33 +0100
Subject: [stringtemplate-interest] Formatting vs. Escaping in an
	AttributeRenderer
In-Reply-To: <4E6B75E8.9020708@web.de>
References: <4E6B75E8.9020708@web.de>
Message-ID: <4E6B8C71.1060106@lancaster.ac.uk>

I suggested an orthogonal 'filter' API (as in separate from adapters and 
renderers) a while back, that would take what came out of adapters and 
renderers and 'filter' them in some way. There's lots of ways it could 
work in terms of default, non-default, when to apply which, etc etc. I 
still think it's a good idea, but there wasn't a lot of enthusiasm for it ;)

Sam

On 10/09/2011 15:36, Tobias G?ntner wrote:
> Hello!
>
> I am new to StringTemplate and I am experimenting with string escaping.
>
> The first advice I found was to register a custom attribute renderer and
> specify the escape mechanism in the "format" option. This works fine for
> the most part, but it has a few drawbacks:
>
> * It interferes with "normal" renderer usage, i.e., I can either escape
> or format, but not both. To overcome this limitation, I would have to
> parse the format option and delegate calls to a second renderer which
> does the real formatting - for each type in a STGroup. Certainly doable,
> but it feels like a clumsy workaround.
>
> * I have to remember to specify the correct format everywhere. I find
> this tedious and error-prone. So I figured I could instead escape by
> default and say format="do-not-escape-this-time" if I want something
> else. This did not work, however:
>
> public class Test {
>     private static class EscapeRenderer implements AttributeRenderer {
>       public String toString(Object o, String format, Locale locale) {
>         return '[' + String.valueOf(o) + ']';
>       }
>     }
>     public static void main(String[] args) {
>       STGroup g = new STGroup('$', '$');
>       ST st = new ST(g, "start$test;separator=\"sep\"$end");
>       st.add("test", "aaa").add("test", "bbb").add("test", "ccc");
>       g.registerRenderer(Object.class, new EscapeRenderer());
>       System.out.println(st.render());
>     }
> }
>
> The result (using version 4.0.4) was:
> 	[start][aaa]sep[bbb]sep[ccc][end]
> For some reason, literals are escaped as well. Shouldn't this print
> 	start[aaa]sep[bbb]sep[ccc]end
> instead?
>
> * I realize escaping and formatting are mostly orthogonal concepts.
> Formatting converts arbitrary objects into strings depending on the
> needs of the user, whereas escaping transforms strings depending on the
> context of the output. I suppose using an AttributeRenderer to escape
> strings is probably the wrong approach altogether.
>
> Another advice I found was to automatically add properly escaped strings
> whenever new attributes are added to a string template. I do not like
> this either:
>
> * The caller has to know exactly how a certain value is going to be used
> in the template. This dependency can be avoided if every attribute is
> escaped in every possible way, but that would probably be a waste of CPU
> and memory most of the time.
>
> * Recursive escapes (e.g., an HTML fragment in a JS string literal in an
> HTML attribute) are cumbersome.
>
> * Escaping is done before formatting. It should be done last, just
> before the output is concatenated.
>
> A custom model adapter could be used to escape attributes on demand
> (i.e., whenever a magic property name is read), but that does not solve
> the other problems.
>
> Are there other/better ways to escape strings in ST?
>
> Regards,
> Tobias
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest


From fatbull at web.de  Sun Sep 11 07:55:54 2011
From: fatbull at web.de (=?ISO-8859-15?Q?Tobias_G=FCntner?=)
Date: Sun, 11 Sep 2011 16:55:54 +0200
Subject: [stringtemplate-interest] Formatting vs. Escaping in an
	AttributeRenderer
In-Reply-To: <4E6B8C71.1060106@lancaster.ac.uk>
References: <4E6B75E8.9020708@web.de> <4E6B8C71.1060106@lancaster.ac.uk>
Message-ID: <4E6CCBFA.2010307@web.de>

Am 10.09.2011 18:12, schrieb Sam Barnett-Cormack:
> I suggested an orthogonal 'filter' API (as in separate from adapters
> and renderers) a while back,

In the "Group Syntax extension for ModelAdapter and Renderer" thread 
from July? That's the only reference I found.

> that would take what came out of adapters and renderers and 'filter'
> them in some way. There's lots of ways it could work in terms of
> default, non-default, when to apply which, etc etc.

Yes, a general "filter" option would work. I think a clear 
adapter->render->filter/escape/postprocessing pipeline would definitely 
be nice to have. I would prefer a more concise syntax, however, because 
escaping is needed more often than formatting (at least in my experience).

Since we're talking about language extensions anyway, let my mind wander 
for a while. Other features could be useful, especially with escaping in 
mind.

For example, an easy way to specify escape sequences. It would be nice 
if I could just write something like

xml-attribute:
     [\r\n\t ] -> copy      // copy character as-is
     [\0-\x1f] -> invalid   // throw exception
     '&' -> "&amp;"         // replace character as requested
     '<' -> "&lt;"
     '\"' -> "&quot;"
     ...

and have ST automatically generate the appropriate code.

Some sort of error checking would be useful as well. Perhaps typesafe 
templates are a little farfetched, but at least ST would complain when I 
embed unescaped JS in HTML.

For example, we could associate a type with every template. Templates of 
the same type can be combined freely, but different types require 
explicit conversion. Then, for every type, we could define several 
escape operations which transform plaintext into something usable in 
this context (like a type cast for strings). Perhaps a few examples will 
explain it (syntax is made up, but I think you'll get my point):

// default template type/context is "plaintext" (or null?)
// Attributes (or more precisely the output of an
// AttributeRenderer) have type "plaintext" as well.
greeting() ::= "\"Hello\",&nbsp;World!"

// context/return type is "js"
// escape greeting() for use as string literal (this also
// changes the type from "plaintext" to "js" in this case)
alert() -> js ::= "alert(\"$lit!greeting()$\")"

// escape alert() for use as attribute content
link() -> html ::= "<a href=\"...\" onclick=\"$attr!alert()$\">...</a>"

// OK: Use in "plaintext" context is always allowed to
// ensure backwards compatibility (no escaping done).
// (Perhaps the return type could be inferred automatically?)
test1() ::= "<p>$link()$</p>"

// Error: Cannot use greeting() (type "plaintext") in "html" context
// (Unless a default escape mode was specified for this context.)
test2() -> html ::= "<p>$greeting()$</p>"

// OK: Escape to use as element text content
test3() -> html ::= "<p>$cdata!greeting()$</p>"

// OK: I really mean it! Do not escape!
test4() -> html ::= "<p>$html!greeting()$</p>"

// Error: Cannot use alert() (type "js") in "html" context
test5() -> html ::= "<p onclick=\"$alert()$\">...</p>"

// OK: link() (type "html") can be embedded in other "html" template
test6() -> html ::= "<p>$link()$</p>"

// OK: Print the source code
test7() -> html ::= "<pre>$cdata!link()$</pre>"

// Error: "lit" escape mode is only valid in "js" context
test8() -> html ::= "<p>$lit!greeting()$</p>"

// OK: First escape as js string literal, then as url path,
// finally as attribute content for use in "html" context
test9() -> html ::= "<a 
href=\"javascript:$attr!url!lit!greeting()$\">...</a>"

// OK: Mistake not detected, but impact is limited
test10() -> html ::= "<p $link()$ >...</p>"

A template writer would still need to choose the correct escape 
function, but at least ST could detect one of the most dangerous 
mistakes, i.e., if no escaping is done at all.

Back to reality ...

> I still think it's a good idea, but there wasn't a lot of enthusiasm
> for it ;)

So ... When is it done? ;)

Regards,
Tobias

From ub at abego-software.de  Sun Sep 11 14:17:38 2011
From: ub at abego-software.de (Udo Borkowski)
Date: Sun, 11 Sep 2011 23:17:38 +0200
Subject: [stringtemplate-interest] Formatting vs. Escaping in an
	AttributeRenderer
In-Reply-To: <4E6B75E8.9020708@web.de>
References: <4E6B75E8.9020708@web.de>
Message-ID: <ACD4C490-3EAD-4E40-ACB0-563B691ABBF0@abego-software.de>

Hi,

> * It interferes with "normal" renderer usage, i.e., I can either escape 
> or format, but not both.

There are several ways to solve this. Some time ago Colin Fagan suggested a "MultiFormatStringRenderer" that allows specify multiple "formats" in one "format" string. 

However you can even apply multiple formats to a string without any change to ST4. 

E.g. assume you want some attribute to be formatted in UPPER case, but also make sure the result is escaped for xml. 

E.g. "Bonny & Clyde" should be rendered as "BONNY &amp; CLYDE"

Then you could write:

main(p) ::= <<
$(f(p));format="xml-encode"$
>>

f(p) ::= <<
$p;format="upper"$
>>

I.e. you pass the attribute to a template that does the "inner" formatting and then the outer formatter will "escape" the result of the template.



> * I have to remember to specify the correct format everywhere. 
Seems like a good idea to me.

But maybe I don't get your point. Can you give a concrete example to make it clearer?



>   private static class EscapeRenderer implements AttributeRenderer {
>     public String toString(Object o, String format, Locale locale) {
>       return '[' + String.valueOf(o) + ']';
>     }
>   }

In your AttributeRenderer you need to check for the formatString. It can be null. In that case you should return the "toString" result for the object. E.g. the StringRenderer starts like this:

    public String toString(Object o, String formatString, Locale locale) {
        String s = (String)o;
        if ( formatString==null ) return s;
        if ( formatString.equals("upper") ) return s.toUpperCase(locale);
        . . .

If you don't do this check you will get strange results, like the [start]?[end] you saw.



Udo


On 10.09.2011, at 16:36, Tobias G?ntner wrote:

> Hello!
> 
> I am new to StringTemplate and I am experimenting with string escaping.
> 
> The first advice I found was to register a custom attribute renderer and 
> specify the escape mechanism in the "format" option. This works fine for 
> the most part, but it has a few drawbacks:
> 
> * It interferes with "normal" renderer usage, i.e., I can either escape 
> or format, but not both. To overcome this limitation, I would have to 
> parse the format option and delegate calls to a second renderer which 
> does the real formatting - for each type in a STGroup. Certainly doable, 
> but it feels like a clumsy workaround.
> 
> * I have to remember to specify the correct format everywhere. I find 
> this tedious and error-prone. So I figured I could instead escape by 
> default and say format="do-not-escape-this-time" if I want something 
> else. This did not work, however:
> 
> public class Test {
>   private static class EscapeRenderer implements AttributeRenderer {
>     public String toString(Object o, String format, Locale locale) {
>       return '[' + String.valueOf(o) + ']';
>     }
>   }
>   public static void main(String[] args) {
>     STGroup g = new STGroup('$', '$');
>     ST st = new ST(g, "start$test;separator=\"sep\"$end");
>     st.add("test", "aaa").add("test", "bbb").add("test", "ccc");
>     g.registerRenderer(Object.class, new EscapeRenderer());
>     System.out.println(st.render());
>   }
> }
> 
> The result (using version 4.0.4) was:
> 	[start][aaa]sep[bbb]sep[ccc][end]
> For some reason, literals are escaped as well. Shouldn't this print
> 	start[aaa]sep[bbb]sep[ccc]end
> instead?
> 
> * I realize escaping and formatting are mostly orthogonal concepts. 
> Formatting converts arbitrary objects into strings depending on the 
> needs of the user, whereas escaping transforms strings depending on the 
> context of the output. I suppose using an AttributeRenderer to escape 
> strings is probably the wrong approach altogether.
> 
> Another advice I found was to automatically add properly escaped strings 
> whenever new attributes are added to a string template. I do not like 
> this either:
> 
> * The caller has to know exactly how a certain value is going to be used 
> in the template. This dependency can be avoided if every attribute is 
> escaped in every possible way, but that would probably be a waste of CPU 
> and memory most of the time.
> 
> * Recursive escapes (e.g., an HTML fragment in a JS string literal in an 
> HTML attribute) are cumbersome.
> 
> * Escaping is done before formatting. It should be done last, just 
> before the output is concatenated.
> 
> A custom model adapter could be used to escape attributes on demand 
> (i.e., whenever a magic property name is read), but that does not solve 
> the other problems.
> 
> Are there other/better ways to escape strings in ST?
> 
> Regards,
> Tobias
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20110911/186c9978/attachment.html 

From fatbull at web.de  Sun Sep 11 19:28:52 2011
From: fatbull at web.de (=?UTF-8?B?VG9iaWFzIEfDvG50bmVy?=)
Date: Mon, 12 Sep 2011 04:28:52 +0200
Subject: [stringtemplate-interest] Formatting vs. Escaping in an
	AttributeRenderer
In-Reply-To: <ACD4C490-3EAD-4E40-ACB0-563B691ABBF0@abego-software.de>
References: <4E6B75E8.9020708@web.de>
	<ACD4C490-3EAD-4E40-ACB0-563B691ABBF0@abego-software.de>
Message-ID: <4E6D6E64.6000604@web.de>

Am 11.09.2011 23:17, schrieb Udo Borkowski:
>> * It interferes with "normal" renderer usage, i.e., I can either escape
>> or format, but not both.
>
> There are several ways to solve this. Some time ago Colin Fagan
> suggested a "MultiFormatStringRenderer" that allows specify multiple
> "formats" in one "format" string.

Well, yes. But I am looking for a cleaner solution (even if this means I 
have to wait for ST5). I don't want to end up with a Swiss army 
knife^wrenderer which can handle dates, numbers, 19 custom model 
objects, which knows 57 vital string transformations ("upper" plus 56 
others) and 21 different escape modes, and which can make tea in 30 
different locales - all controlled by a single format string which 
requires a grammar to parse. ;)

>> * I have to remember to specify the correct format everywhere.
> Seems like a good idea to me.
>
> But maybe I don't get your point. Can you give a concrete example to
> make it clearer?

It is not a good idea. If I have to remember doing something again and 
again and again, I am bound to forget it now and then. If ST does it by 
default, I cannot forget it. Consequence: I create less bugs.

> In your AttributeRenderer you need to check for the formatString.
[...]
> If you don't do this check you will get strange results, like the
> [start]?[end] you saw.

What I don't understand: Why are string literals fed into an 
AttributeRenderer? After all, it's an AttributeRenderer, not a 
StringLiteralRenderer or TemplateOutputASecondTimeRenderer. ;)
This just does not make sense to me.

Regards,
Tobias


From ub at abego-software.de  Mon Sep 12 00:12:22 2011
From: ub at abego-software.de (Udo Borkowski)
Date: Mon, 12 Sep 2011 09:12:22 +0200
Subject: [stringtemplate-interest] Formatting vs. Escaping in an
	AttributeRenderer
In-Reply-To: <4E6D6E64.6000604@web.de>
References: <4E6B75E8.9020708@web.de>
	<ACD4C490-3EAD-4E40-ACB0-563B691ABBF0@abego-software.de>
	<4E6D6E64.6000604@web.de>
Message-ID: <06EA09C4-7F33-4F88-B944-DCAEA1556A37@abego-software.de>

It looks like I still don't understand the context of your questions. Can you give a full "real life" example explaining your issues?

Udo

On 12.09.2011, at 04:28, Tobias G?ntner wrote:

> Am 11.09.2011 23:17, schrieb Udo Borkowski:
>>> * It interferes with "normal" renderer usage, i.e., I can either escape
>>> or format, but not both.
>> 
>> There are several ways to solve this. Some time ago Colin Fagan
>> suggested a "MultiFormatStringRenderer" that allows specify multiple
>> "formats" in one "format" string.
> 
> Well, yes. But I am looking for a cleaner solution (even if this means I 
> have to wait for ST5). I don't want to end up with a Swiss army 
> knife^wrenderer which can handle dates, numbers, 19 custom model 
> objects, which knows 57 vital string transformations ("upper" plus 56 
> others) and 21 different escape modes, and which can make tea in 30 
> different locales - all controlled by a single format string which 
> requires a grammar to parse. ;)
> 
>>> * I have to remember to specify the correct format everywhere.
>> Seems like a good idea to me.
>> 
>> But maybe I don't get your point. Can you give a concrete example to
>> make it clearer?
> 
> It is not a good idea. If I have to remember doing something again and 
> again and again, I am bound to forget it now and then. If ST does it by 
> default, I cannot forget it. Consequence: I create less bugs.
> 
>> In your AttributeRenderer you need to check for the formatString.
> [...]
>> If you don't do this check you will get strange results, like the
>> [start]?[end] you saw.
> 
> What I don't understand: Why are string literals fed into an 
> AttributeRenderer? After all, it's an AttributeRenderer, not a 
> StringLiteralRenderer or TemplateOutputASecondTimeRenderer. ;)
> This just does not make sense to me.
> 
> Regards,
> Tobias
> 
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest


From lepilache at hotmail.com  Thu Sep 15 06:01:03 2011
From: lepilache at hotmail.com (Damien Urruty)
Date: Thu, 15 Sep 2011 13:01:03 +0000
Subject: [stringtemplate-interest] "Or" and "And" operators in conditionnal
 always evaluate both operands ?
Message-ID: <BLU154-W58721549B72590153A657BBC070@phx.gbl>


Hello,
I can see that if we use && and || operands in conditionnals, both operands are always evaluated, even if not necessary. For exemple, I have  : 
<if(a && b)>...<endif>
In my case, a is null, so it is not necessary to evaluate the second argument, right ? Shouldn't the evaluation stop when such a case is encountered ? It is the same for <if(a || b)> with a not null.
Maybe I miss something, thanks for your help. 		 	   		  
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20110915/b1cd9130/attachment.html 

From collin.fagan at gmail.com  Thu Sep 15 06:04:14 2011
From: collin.fagan at gmail.com (Collin Fagan)
Date: Thu, 15 Sep 2011 08:04:14 -0500
Subject: [stringtemplate-interest] AttributeProvider Proof of concept code
Message-ID: <CANiekN5Q_TUqWk0NYRu56g8CDONAC1Qag6i-N5tUvd5Ym0KfBg@mail.gmail.com>

Hi Everyone,

I've checked in some code into the strum trunk that implements my
"AttributeProvider" idea.

I had to override some methods in Interpreter. Here is a link to the code
for that.

https://project-strum.svn.sourceforge.net/svnroot/project-strum/trunk/strum-project/strum/src/main/java/com/collinfagan/strum/interpreters/DynamicAttributeInterpreter.java

After that it was just a matter of extending some classes to allow one to
set an attribute provider. Extended versions of ST and all the standard
STGroup implementations are here:

https://project-strum.svn.sourceforge.net/svnroot/project-strum/trunk/strum-project/strum/src/main/java/com/collinfagan/strum/template/


In the strum-spring project I have a test that shows how one might use this
to pull beans out of a spring context.

https://project-strum.svn.sourceforge.net/svnroot/project-strum/trunk/strum-project/strum-spring/src/test/java/com/collinfagan/strum/spring/

Now that this is done I'm thinking of building some some of STGroup that can
load "Raw Templates".

So instead of this:

main() ::= <<

First Name: <dataBean.firstName>
Last Name: <dataBean.lastName>

System Properties:
 java.runtime.name = <systemProperties.("java.runtime.name")>
 java.version = <systemProperties.("java.version")>

>>
All you need is this:

First Name: <dataBean.firstName>
Last Name: <dataBean.lastName>

System Properties:
 java.runtime.name = <systemProperties.("java.runtime.name")>
 java.version = <systemProperties.("java.version")>


And the file can end in whatever extension you like. What do people think?
Does this sound useful or am I crossing some line?

Thanks,
Collin
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20110915/b0a518e6/attachment.html 

From sharwell at pixelminegames.com  Thu Sep 15 06:43:29 2011
From: sharwell at pixelminegames.com (Sam Harwell)
Date: Thu, 15 Sep 2011 08:43:29 -0500
Subject: [stringtemplate-interest] "Or" and "And" operators in
	conditionnal always evaluate both operands ?
In-Reply-To: <BLU154-W58721549B72590153A657BBC070@phx.gbl>
References: <BLU154-W58721549B72590153A657BBC070@phx.gbl>
Message-ID: <004501cc73ad$7489dbf0$5d9d93d0$@pixelminegames.com>

Hi Damien,

 

Since the attributes referenced from a StringTemplate should always be pure
(no side effects), then there is no semantic difference between evaluating
or not evaluating the second argument. Are you facing a significant
performance problem due to the second evaluation?

 

Sam

 

From: stringtemplate-interest-bounces at antlr.org
[mailto:stringtemplate-interest-bounces at antlr.org] On Behalf Of Damien
Urruty
Sent: Thursday, September 15, 2011 8:01 AM
To: stringtemplate-interest at antlr.org
Subject: [stringtemplate-interest] "Or" and "And" operators in conditionnal
always evaluate both operands ?

 

Hello,

 

I can see that if we use && and || operands in conditionnals, both operands
are always evaluated, even if not necessary. For exemple, I have  : 

 

<if(a && b)>

...

<endif>

 

In my case, a is null, so it is not necessary to evaluate the second
argument, right ? Shouldn't the evaluation stop when such a case is
encountered ? It is the same for <if(a || b)> with a not null.

 

Maybe I miss something, thanks for your help.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20110915/4930c6bb/attachment.html 

From lepilache at hotmail.com  Thu Sep 15 06:54:01 2011
From: lepilache at hotmail.com (Damien Urruty)
Date: Thu, 15 Sep 2011 13:54:01 +0000
Subject: [stringtemplate-interest] "Or" and "And" operators in
 conditionnal always evaluate both operands ?
In-Reply-To: <004501cc73ad$7489dbf0$5d9d93d0$@pixelminegames.com>
References: <BLU154-W58721549B72590153A657BBC070@phx.gbl>,
	<004501cc73ad$7489dbf0$5d9d93d0$@pixelminegames.com>
Message-ID: <BLU154-W10E21B86EE78ADC5B458B4BC070@phx.gbl>


Hi,
The problem I am facing is that my conditional is something like : 
<if(a && a.b)>
Which raises an error in the case a is null (a.b is still evaluated). 
By the way, the error is not very explicit : "templateName : no such property or can't access: null attribute". I spent some time finding where the error came from.
It is not a question of performance, I was just wondering if this behaviour was normal, I mean if this is by design, or if it was a bug.
In my case, I can easily break the if in two separate ifs, so it doesn't really matter. But as in Java the && does not evaluate all the operands if not necessary (the & operator do evaluate each operand), i wanted to know if this behaviour was wanted or not.
Maybe this should be discussed, I know it is not very important, or at least it should be mentionned somewhere in the doc ?
Thanks for your response Sam, have a nice day

From: sharwell at pixelminegames.com
To: lepilache at hotmail.com; stringtemplate-interest at antlr.org
Subject: RE: [stringtemplate-interest] "Or" and "And" operators in conditionnal always evaluate both operands ?
Date: Thu, 15 Sep 2011 08:43:29 -0500



Hi Damien, Since the attributes referenced from a StringTemplate should always be pure (no side effects), then there is no semantic difference between evaluating or not evaluating the second argument. Are you facing a significant performance problem due to the second evaluation? Sam From: stringtemplate-interest-bounces at antlr.org [mailto:stringtemplate-interest-bounces at antlr.org] On Behalf Of Damien Urruty
Sent: Thursday, September 15, 2011 8:01 AM
To: stringtemplate-interest at antlr.org
Subject: [stringtemplate-interest] "Or" and "And" operators in conditionnal always evaluate both operands ? Hello, I can see that if we use && and || operands in conditionnals, both operands are always evaluated, even if not necessary. For exemple, I have  :  <if(a && b)>...<endif> In my case, a is null, so it is not necessary to evaluate the second argument, right ? Shouldn't the evaluation stop when such a case is encountered ? It is the same for <if(a || b)> with a not null. Maybe I miss something, thanks for your help. 		 	   		  
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20110915/26f1ef9c/attachment-0001.html 

From s.barnett-cormack at lancaster.ac.uk  Thu Sep 15 07:01:55 2011
From: s.barnett-cormack at lancaster.ac.uk (Sam Barnett-Cormack)
Date: Thu, 15 Sep 2011 15:01:55 +0100
Subject: [stringtemplate-interest] "Or" and "And" operators in
 conditionnal always evaluate both operands ?
In-Reply-To: <BLU154-W10E21B86EE78ADC5B458B4BC070@phx.gbl>
References: <BLU154-W58721549B72590153A657BBC070@phx.gbl>,
	<004501cc73ad$7489dbf0$5d9d93d0$@pixelminegames.com>
	<BLU154-W10E21B86EE78ADC5B458B4BC070@phx.gbl>
Message-ID: <4E720553.8050602@lancaster.ac.uk>

The usual pattern in most languages I've experiences is to 'short 
circuit' conditionals in this way - for &&, don't bother with the second 
if the first is false, for ||, don't bother if it's true. This has great 
behavioural effects widely used in languages like perl, but those don't 
really apply to ST that I can see.

However, the specific case you identify is a good one. If you're in a 
situation where it's not a 'bad usage' of your template to have 'a' 
unset, you definitely want to be able to test members of a for truth or 
existence at the very least, without syntactic merry-go-rounds or 
risking very strange errors.

Then again, maybe short-circuit isn't the way to deal with this case. 
Maybe there's some better way of handling cases that would seem to lead 
to such functionality being disireable. Who knows?

Sam (not the usual Sam)

On 15/09/2011 14:54, Damien Urruty wrote:
> Hi,
>
> The problem I am facing is that my conditional is something like :
>
> <if(a && a.b)>
>
> Which raises an error in the case a is null (a.b is still evaluated).
>
> By the way, the error is not very explicit : "templateName : no such
> property or can't access: null attribute". I spent some time finding
> where the error came from.
>
> It is not a question of performance, I was just wondering if this
> behaviour was normal, I mean if this is by design, or if it was a bug.
>
> In my case, I can easily break the if in two separate ifs, so it doesn't
> really matter. But as in Java the && does not evaluate all the operands
> if not necessary (the & operator do evaluate each operand), i wanted to
> know if this behaviour was wanted or not.
>
> Maybe this should be discussed, I know it is not very important, or at
> least it should be mentionned somewhere in the doc ?
>
> Thanks for your response Sam, have a nice day
>
> ------------------------------------------------------------------------
> From: sharwell at pixelminegames.com
> To: lepilache at hotmail.com; stringtemplate-interest at antlr.org
> Subject: RE: [stringtemplate-interest] "Or" and "And" operators in
> conditionnal always evaluate both operands ?
> Date: Thu, 15 Sep 2011 08:43:29 -0500
>
> Hi Damien,
>
> Since the attributes referenced from a StringTemplate should always be
> pure (no side effects), then there is no semantic difference between
> evaluating or not evaluating the second argument. Are you facing a
> significant performance problem due to the second evaluation?
>
> Sam
>
> *From:*stringtemplate-interest-bounces at antlr.org
> [mailto:stringtemplate-interest-bounces at antlr.org] *On Behalf Of *Damien
> Urruty
> *Sent:* Thursday, September 15, 2011 8:01 AM
> *To:* stringtemplate-interest at antlr.org
> *Subject:* [stringtemplate-interest] "Or" and "And" operators in
> conditionnal always evaluate both operands ?
>
> Hello,
>
> I can see that if we use && and || operands in conditionnals, both
> operands are always evaluated, even if not necessary. For exemple, I have :
>
> <if(a && b)>
>
> ...
>
> <endif>
>
> In my case, a is null, so it is not necessary to evaluate the second
> argument, right ? Shouldn't the evaluation stop when such a case is
> encountered ? It is the same for <if(a || b)> with a not null.
>
> Maybe I miss something, thanks for your help.
>
>
>
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest


From sharwell at pixelminegames.com  Thu Sep 15 07:02:17 2011
From: sharwell at pixelminegames.com (Sam Harwell)
Date: Thu, 15 Sep 2011 09:02:17 -0500
Subject: [stringtemplate-interest] "Or" and "And" operators in
	conditionnal always evaluate both operands ?
In-Reply-To: <BLU154-W10E21B86EE78ADC5B458B4BC070@phx.gbl>
References: <BLU154-W58721549B72590153A657BBC070@phx.gbl>,
	<004501cc73ad$7489dbf0$5d9d93d0$@pixelminegames.com>
	<BLU154-W10E21B86EE78ADC5B458B4BC070@phx.gbl>
Message-ID: <005901cc73b0$14b33930$3e19ab90$@pixelminegames.com>

A condition like "a.b" should always evaluate to false if "a" is null. In
StringTemplate, there's no need to condition it on "a" as well. You should
definitely just use this, and if an error is occurring then we should work
it out. :) Can you post the exact condition you're using?

 

<if(a.b)>

 

Sam

 

From: Damien Urruty [mailto:lepilache at hotmail.com] 
Sent: Thursday, September 15, 2011 8:54 AM
To: sharwell at pixelminegames.com; stringtemplate-interest at antlr.org
Subject: RE: [stringtemplate-interest] "Or" and "And" operators in
conditionnal always evaluate both operands ?

 

Hi,

 

The problem I am facing is that my conditional is something like : 

 

<if(a && a.b)>

 

Which raises an error in the case a is null (a.b is still evaluated). 

 

By the way, the error is not very explicit : "templateName : no such
property or can't access: null attribute". I spent some time finding where
the error came from.

 

It is not a question of performance, I was just wondering if this behaviour
was normal, I mean if this is by design, or if it was a bug.

 

In my case, I can easily break the if in two separate ifs, so it doesn't
really matter. But as in Java the && does not evaluate all the operands if
not necessary (the & operator do evaluate each operand), i wanted to know if
this behaviour was wanted or not.

 

Maybe this should be discussed, I know it is not very important, or at least
it should be mentionned somewhere in the doc ?

 

Thanks for your response Sam, have a nice day

  _____  

From: sharwell at pixelminegames.com
To: lepilache at hotmail.com; stringtemplate-interest at antlr.org
Subject: RE: [stringtemplate-interest] "Or" and "And" operators in
conditionnal always evaluate both operands ?
Date: Thu, 15 Sep 2011 08:43:29 -0500

Hi Damien,

 

Since the attributes referenced from a StringTemplate should always be pure
(no side effects), then there is no semantic difference between evaluating
or not evaluating the second argument. Are you facing a significant
performance problem due to the second evaluation?

 

Sam

 

From: stringtemplate-interest-bounces at antlr.org
[mailto:stringtemplate-interest-bounces at antlr.org] On Behalf Of Damien
Urruty
Sent: Thursday, September 15, 2011 8:01 AM
To: stringtemplate-interest at antlr.org
Subject: [stringtemplate-interest] "Or" and "And" operators in conditionnal
always evaluate both operands ?

 

Hello,

 

I can see that if we use && and || operands in conditionnals, both operands
are always evaluated, even if not necessary. For exemple, I have  : 

 

<if(a && b)>

...

<endif>

 

In my case, a is null, so it is not necessary to evaluate the second
argument, right ? Shouldn't the evaluation stop when such a case is
encountered ? It is the same for <if(a || b)> with a not null.

 

Maybe I miss something, thanks for your help.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20110915/8ed9f100/attachment.html 

From lepilache at hotmail.com  Thu Sep 15 07:19:11 2011
From: lepilache at hotmail.com (Damien Urruty)
Date: Thu, 15 Sep 2011 14:19:11 +0000
Subject: [stringtemplate-interest] "Or" and "And" operators in
 conditionnal always evaluate both operands ?
In-Reply-To: <005901cc73b0$14b33930$3e19ab90$@pixelminegames.com>
References: <BLU154-W58721549B72590153A657BBC070@phx.gbl>,
	<004501cc73ad$7489dbf0$5d9d93d0$@pixelminegames.com>
	<BLU154-W10E21B86EE78ADC5B458B4BC070@phx.gbl>,
	<005901cc73b0$14b33930$3e19ab90$@pixelminegames.com>
Message-ID: <BLU154-W292B137E2A64340C5680D9BC070@phx.gbl>


The case I use is the following : 
<if(type.defaultConstructor && type.defaultConstructor.exceptions)>
with the first operand calling the getDefaultConstructor() method on my type object, and the second operand calling getExceptions() on my constructor object, returning a list of types raised byt eh constructor.

If there is no default constructor declared in my type, then the second chunk is still evaluated, and gives me the error given in the previous mail : 

"templateName : no such property or can't access: null attribute"
So what you are saying Sam, is that I could use this conditional (even with the two operand), and this should not raise any error ?

From: sharwell at pixelminegames.com
To: lepilache at hotmail.com; stringtemplate-interest at antlr.org
Subject: RE: [stringtemplate-interest] "Or" and "And" operators in conditionnal always evaluate both operands ?
Date: Thu, 15 Sep 2011 09:02:17 -0500



A condition like ?a.b? should always evaluate to false if ?a? is null. In StringTemplate, there?s no need to condition it on ?a? as well. You should definitely just use this, and if an error is occurring then we should work it out. :) Can you post the exact condition you?re using? <if(a.b)> Sam From: Damien Urruty [mailto:lepilache at hotmail.com] 
Sent: Thursday, September 15, 2011 8:54 AM
To: sharwell at pixelminegames.com; stringtemplate-interest at antlr.org
Subject: RE: [stringtemplate-interest] "Or" and "And" operators in conditionnal always evaluate both operands ? Hi, The problem I am facing is that my conditional is something like :  <if(a && a.b)> Which raises an error in the case a is null (a.b is still evaluated).  By the way, the error is not very explicit : "templateName : no such property or can't access: null attribute". I spent some time finding where the error came from. It is not a question of performance, I was just wondering if this behaviour was normal, I mean if this is by design, or if it was a bug. In my case, I can easily break the if in two separate ifs, so it doesn't really matter. But as in Java the && does not evaluate all the operands if not necessary (the & operator do evaluate each operand), i wanted to know if this behaviour was wanted or not. Maybe this should be discussed, I know it is not very important, or at least it should be mentionned somewhere in the doc ? Thanks for your response Sam, have a nice dayFrom: sharwell at pixelminegames.com
To: lepilache at hotmail.com; stringtemplate-interest at antlr.org
Subject: RE: [stringtemplate-interest] "Or" and "And" operators in conditionnal always evaluate both operands ?
Date: Thu, 15 Sep 2011 08:43:29 -0500Hi Damien, Since the attributes referenced from a StringTemplate should always be pure (no side effects), then there is no semantic difference between evaluating or not evaluating the second argument. Are you facing a significant performance problem due to the second evaluation? Sam From: stringtemplate-interest-bounces at antlr.org [mailto:stringtemplate-interest-bounces at antlr.org] On Behalf Of Damien Urruty
Sent: Thursday, September 15, 2011 8:01 AM
To: stringtemplate-interest at antlr.org
Subject: [stringtemplate-interest] "Or" and "And" operators in conditionnal always evaluate both operands ? Hello, I can see that if we use && and || operands in conditionnals, both operands are always evaluated, even if not necessary. For exemple, I have  :  <if(a && b)>...<endif> In my case, a is null, so it is not necessary to evaluate the second argument, right ? Shouldn't the evaluation stop when such a case is encountered ? It is the same for <if(a || b)> with a not null. Maybe I miss something, thanks for your help. 		 	   		  
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20110915/3d0d0726/attachment-0001.html 

From sharwell at pixelminegames.com  Thu Sep 15 07:50:33 2011
From: sharwell at pixelminegames.com (Sam Harwell)
Date: Thu, 15 Sep 2011 09:50:33 -0500
Subject: [stringtemplate-interest] "Or" and "And" operators in
	conditionnal always evaluate both operands ?
In-Reply-To: <BLU154-W292B137E2A64340C5680D9BC070@phx.gbl>
References: <BLU154-W58721549B72590153A657BBC070@phx.gbl>,
	<004501cc73ad$7489dbf0$5d9d93d0$@pixelminegames.com>
	<BLU154-W10E21B86EE78ADC5B458B4BC070@phx.gbl>,
	<005901cc73b0$14b33930$3e19ab90$@pixelminegames.com>
	<BLU154-W292B137E2A64340C5680D9BC070@phx.gbl>
Message-ID: <006701cc73b6$d28f4ab0$77ade010$@pixelminegames.com>

It's important to realize that the dynamic attribute lookup uses reflection.
In the case of the expression "type.defaultConstructor.exceptions", if
"type.defaultConstructor" evaluates to null then it's impossible to resolve
or evaluate the property "exceptions", so the conditional is simply false.
The only way "type.defaultConstructor.exceptions" should produce an error
instead of false is if getDefaultConstructor() or getExceptions() is
throwing an exception.

 

Your condition should read <if(type.defaultConstructor.exceptions)>.

 

The message you are seeing is due to a current inability for ST4 to
distinguish between the following two expressions:

 

<if(type.defaultConstructor.exceptions)>

<type.defaultConstructor.exceptions>

 

I believe 2 new bytecodes (marked with *) need to be added and used as
follows. Note that the semantics would change for the existing opcodes.

 

.         INSTR_LOAD_PROP, used for <if(...)>: Returns null if the source
object is null.

.         *INSTR_LOAD_PROP_CHECKED, used for <...>: Results in a runtime
error if the source object is null.

.         INSTR_LOAD_PROP_IND, used for <if(a.(...))>: Returns null if
either the source object is null or the property name is null/empty.

.         *INSTR_LOAD_PROP_IND_CHECKED, used for <a.(...)>: Runtime error if
source object is null or property name is null/empty.

 

Sam

 

From: Damien Urruty [mailto:lepilache at hotmail.com] 
Sent: Thursday, September 15, 2011 9:19 AM
To: sharwell at pixelminegames.com; stringtemplate-interest at antlr.org
Subject: RE: [stringtemplate-interest] "Or" and "And" operators in
conditionnal always evaluate both operands ?

 

The case I use is the following : 

 

<if(type.defaultConstructor && type.defaultConstructor.exceptions)>

 

with the first operand calling the getDefaultConstructor() method on my type
object, and the second operand calling getExceptions() on my constructor
object, returning a list of types raised byt eh constructor.

 

If there is no default constructor declared in my type, then the second
chunk is still evaluated, and gives me the error given in the previous mail
: 


"templateName : no such property or can't access: null attribute"

 

So what you are saying Sam, is that I could use this conditional (even with
the two operand), and this should not raise any error ?

 

  _____  

From: sharwell at pixelminegames.com
To: lepilache at hotmail.com; stringtemplate-interest at antlr.org
Subject: RE: [stringtemplate-interest] "Or" and "And" operators in
conditionnal always evaluate both operands ?
Date: Thu, 15 Sep 2011 09:02:17 -0500

A condition like "a.b" should always evaluate to false if "a" is null. In
StringTemplate, there's no need to condition it on "a" as well. You should
definitely just use this, and if an error is occurring then we should work
it out. :) Can you post the exact condition you're using?

 

<if(a.b)>

 

Sam

 

From: Damien Urruty [mailto:lepilache at hotmail.com] 
Sent: Thursday, September 15, 2011 8:54 AM
To: sharwell at pixelminegames.com; stringtemplate-interest at antlr.org
Subject: RE: [stringtemplate-interest] "Or" and "And" operators in
conditionnal always evaluate both operands ?

 

Hi,

 

The problem I am facing is that my conditional is something like : 

 

<if(a && a.b)>

 

Which raises an error in the case a is null (a.b is still evaluated). 

 

By the way, the error is not very explicit : "templateName : no such
property or can't access: null attribute". I spent some time finding where
the error came from.

 

It is not a question of performance, I was just wondering if this behaviour
was normal, I mean if this is by design, or if it was a bug.

 

In my case, I can easily break the if in two separate ifs, so it doesn't
really matter. But as in Java the && does not evaluate all the operands if
not necessary (the & operator do evaluate each operand), i wanted to know if
this behaviour was wanted or not.

 

Maybe this should be discussed, I know it is not very important, or at least
it should be mentionned somewhere in the doc ?

 

Thanks for your response Sam, have a nice day

  _____  

From: sharwell at pixelminegames.com
To: lepilache at hotmail.com; stringtemplate-interest at antlr.org
Subject: RE: [stringtemplate-interest] "Or" and "And" operators in
conditionnal always evaluate both operands ?
Date: Thu, 15 Sep 2011 08:43:29 -0500

Hi Damien,

 

Since the attributes referenced from a StringTemplate should always be pure
(no side effects), then there is no semantic difference between evaluating
or not evaluating the second argument. Are you facing a significant
performance problem due to the second evaluation?

 

Sam

 

From: stringtemplate-interest-bounces at antlr.org
[mailto:stringtemplate-interest-bounces at antlr.org] On Behalf Of Damien
Urruty
Sent: Thursday, September 15, 2011 8:01 AM
To: stringtemplate-interest at antlr.org
Subject: [stringtemplate-interest] "Or" and "And" operators in conditionnal
always evaluate both operands ?

 

Hello,

 

I can see that if we use && and || operands in conditionnals, both operands
are always evaluated, even if not necessary. For exemple, I have  : 

 

<if(a && b)>

...

<endif>

 

In my case, a is null, so it is not necessary to evaluate the second
argument, right ? Shouldn't the evaluation stop when such a case is
encountered ? It is the same for <if(a || b)> with a not null.

 

Maybe I miss something, thanks for your help.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20110915/39ad14de/attachment-0001.html 

From ub at abego-software.de  Thu Sep 15 08:02:10 2011
From: ub at abego-software.de (Udo Borkowski)
Date: Thu, 15 Sep 2011 17:02:10 +0200
Subject: [stringtemplate-interest] "Or" and "And" operators in
	conditionnal always evaluate both operands ?
In-Reply-To: <4E720553.8050602@lancaster.ac.uk>
References: <BLU154-W58721549B72590153A657BBC070@phx.gbl>,
	<004501cc73ad$7489dbf0$5d9d93d0$@pixelminegames.com>
	<BLU154-W10E21B86EE78ADC5B458B4BC070@phx.gbl>
	<4E720553.8050602@lancaster.ac.uk>
Message-ID: <8CDEF18A-60A4-4B41-B9C8-9C76EC118C07@abego-software.de>

> The usual pattern in most languages I've experiences is to 'short 
> circuit' conditionals in this way - for &&, don't bother with the second 
> if the first is false, for ||, don't bother if it's true. This has great 
> behavioural effects widely used in languages like perl, but those don't 
> really apply to ST that I can see.

Because ST has no side effects I would argue it is very reasonable to assume && and || are implemented in the "short circuit" way. Why should ST execute code that does not have any effect? 

If there is no strong argument against an "short circuit" implementation I suggest to change it to the "lazy" style. 

This will have no effect on the output but just run (a little bit) faster in some cases. So it should be a safe and compatible change.

Udo


On 15.09.2011, at 16:01, Sam Barnett-Cormack wrote:

> The usual pattern in most languages I've experiences is to 'short 
> circuit' conditionals in this way - for &&, don't bother with the second 
> if the first is false, for ||, don't bother if it's true. This has great 
> behavioural effects widely used in languages like perl, but those don't 
> really apply to ST that I can see.
> 
> However, the specific case you identify is a good one. If you're in a 
> situation where it's not a 'bad usage' of your template to have 'a' 
> unset, you definitely want to be able to test members of a for truth or 
> existence at the very least, without syntactic merry-go-rounds or 
> risking very strange errors.
> 
> Then again, maybe short-circuit isn't the way to deal with this case. 
> Maybe there's some better way of handling cases that would seem to lead 
> to such functionality being disireable. Who knows?
> 
> Sam (not the usual Sam)
> 
> On 15/09/2011 14:54, Damien Urruty wrote:
>> Hi,
>> 
>> The problem I am facing is that my conditional is something like :
>> 
>> <if(a && a.b)>
>> 
>> Which raises an error in the case a is null (a.b is still evaluated).
>> 
>> By the way, the error is not very explicit : "templateName : no such
>> property or can't access: null attribute". I spent some time finding
>> where the error came from.
>> 
>> It is not a question of performance, I was just wondering if this
>> behaviour was normal, I mean if this is by design, or if it was a bug.
>> 
>> In my case, I can easily break the if in two separate ifs, so it doesn't
>> really matter. But as in Java the && does not evaluate all the operands
>> if not necessary (the & operator do evaluate each operand), i wanted to
>> know if this behaviour was wanted or not.
>> 
>> Maybe this should be discussed, I know it is not very important, or at
>> least it should be mentionned somewhere in the doc ?
>> 
>> Thanks for your response Sam, have a nice day
>> 
>> ------------------------------------------------------------------------
>> From: sharwell at pixelminegames.com
>> To: lepilache at hotmail.com; stringtemplate-interest at antlr.org
>> Subject: RE: [stringtemplate-interest] "Or" and "And" operators in
>> conditionnal always evaluate both operands ?
>> Date: Thu, 15 Sep 2011 08:43:29 -0500
>> 
>> Hi Damien,
>> 
>> Since the attributes referenced from a StringTemplate should always be
>> pure (no side effects), then there is no semantic difference between
>> evaluating or not evaluating the second argument. Are you facing a
>> significant performance problem due to the second evaluation?
>> 
>> Sam
>> 
>> *From:*stringtemplate-interest-bounces at antlr.org
>> [mailto:stringtemplate-interest-bounces at antlr.org] *On Behalf Of *Damien
>> Urruty
>> *Sent:* Thursday, September 15, 2011 8:01 AM
>> *To:* stringtemplate-interest at antlr.org
>> *Subject:* [stringtemplate-interest] "Or" and "And" operators in
>> conditionnal always evaluate both operands ?
>> 
>> Hello,
>> 
>> I can see that if we use && and || operands in conditionnals, both
>> operands are always evaluated, even if not necessary. For exemple, I have :
>> 
>> <if(a && b)>
>> 
>> ...
>> 
>> <endif>
>> 
>> In my case, a is null, so it is not necessary to evaluate the second
>> argument, right ? Shouldn't the evaluation stop when such a case is
>> encountered ? It is the same for <if(a || b)> with a not null.
>> 
>> Maybe I miss something, thanks for your help.
>> 
>> 
>> 
>> _______________________________________________
>> stringtemplate-interest mailing list
>> stringtemplate-interest at antlr.org
>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
> 
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest


From sharwell at pixelminegames.com  Thu Sep 15 09:33:41 2011
From: sharwell at pixelminegames.com (Sam Harwell)
Date: Thu, 15 Sep 2011 11:33:41 -0500
Subject: [stringtemplate-interest] "Or" and "And" operators
	in	conditionnal always evaluate both operands ?
In-Reply-To: <8CDEF18A-60A4-4B41-B9C8-9C76EC118C07@abego-software.de>
References: <BLU154-W58721549B72590153A657BBC070@phx.gbl>,
	<004501cc73ad$7489dbf0$5d9d93d0$@pixelminegames.com>	<BLU154-W10E21B86EE78ADC5B458B4BC070@phx.gbl>	<4E720553.8050602@lancaster.ac.uk>
	<8CDEF18A-60A4-4B41-B9C8-9C76EC118C07@abego-software.de>
Message-ID: <007501cc73c5$3b33e4f0$b19baed0$@pixelminegames.com>

The point is this is entirely an implementation detail. There's no benefit
to documenting the semantics in a short circuit manner because that behavior
is only semantically relevant in a language where expression evaluation can
have side effects and/or null references can occur, neither of which applies
to StringTemplate.

Sam

-----Original Message-----
From: stringtemplate-interest-bounces at antlr.org
[mailto:stringtemplate-interest-bounces at antlr.org] On Behalf Of Udo
Borkowski
Sent: Thursday, September 15, 2011 10:02 AM
To: Sam Barnett-Cormack
Cc: stringtemplate-interest List; Damien Urruty
Subject: Re: [stringtemplate-interest] "Or" and "And" operators in
conditionnal always evaluate both operands ?

> The usual pattern in most languages I've experiences is to 'short 
> circuit' conditionals in this way - for &&, don't bother with the 
> second if the first is false, for ||, don't bother if it's true. This 
> has great behavioural effects widely used in languages like perl, but 
> those don't really apply to ST that I can see.

Because ST has no side effects I would argue it is very reasonable to assume
&& and || are implemented in the "short circuit" way. Why should ST execute
code that does not have any effect? 

If there is no strong argument against an "short circuit" implementation I
suggest to change it to the "lazy" style. 

This will have no effect on the output but just run (a little bit) faster in
some cases. So it should be a safe and compatible change.

Udo


On 15.09.2011, at 16:01, Sam Barnett-Cormack wrote:

> The usual pattern in most languages I've experiences is to 'short 
> circuit' conditionals in this way - for &&, don't bother with the 
> second if the first is false, for ||, don't bother if it's true. This 
> has great behavioural effects widely used in languages like perl, but 
> those don't really apply to ST that I can see.
> 
> However, the specific case you identify is a good one. If you're in a 
> situation where it's not a 'bad usage' of your template to have 'a'
> unset, you definitely want to be able to test members of a for truth 
> or existence at the very least, without syntactic merry-go-rounds or 
> risking very strange errors.
> 
> Then again, maybe short-circuit isn't the way to deal with this case. 
> Maybe there's some better way of handling cases that would seem to 
> lead to such functionality being disireable. Who knows?
> 
> Sam (not the usual Sam)
> 
> On 15/09/2011 14:54, Damien Urruty wrote:
>> Hi,
>> 
>> The problem I am facing is that my conditional is something like :
>> 
>> <if(a && a.b)>
>> 
>> Which raises an error in the case a is null (a.b is still evaluated).
>> 
>> By the way, the error is not very explicit : "templateName : no such 
>> property or can't access: null attribute". I spent some time finding 
>> where the error came from.
>> 
>> It is not a question of performance, I was just wondering if this 
>> behaviour was normal, I mean if this is by design, or if it was a bug.
>> 
>> In my case, I can easily break the if in two separate ifs, so it 
>> doesn't really matter. But as in Java the && does not evaluate all 
>> the operands if not necessary (the & operator do evaluate each 
>> operand), i wanted to know if this behaviour was wanted or not.
>> 
>> Maybe this should be discussed, I know it is not very important, or 
>> at least it should be mentionned somewhere in the doc ?
>> 
>> Thanks for your response Sam, have a nice day
>> 
>> ---------------------------------------------------------------------
>> ---
>> From: sharwell at pixelminegames.com
>> To: lepilache at hotmail.com; stringtemplate-interest at antlr.org
>> Subject: RE: [stringtemplate-interest] "Or" and "And" operators in 
>> conditionnal always evaluate both operands ?
>> Date: Thu, 15 Sep 2011 08:43:29 -0500
>> 
>> Hi Damien,
>> 
>> Since the attributes referenced from a StringTemplate should always 
>> be pure (no side effects), then there is no semantic difference 
>> between evaluating or not evaluating the second argument. Are you 
>> facing a significant performance problem due to the second evaluation?
>> 
>> Sam
>> 
>> *From:*stringtemplate-interest-bounces at antlr.org
>> [mailto:stringtemplate-interest-bounces at antlr.org] *On Behalf Of 
>> *Damien Urruty
>> *Sent:* Thursday, September 15, 2011 8:01 AM
>> *To:* stringtemplate-interest at antlr.org
>> *Subject:* [stringtemplate-interest] "Or" and "And" operators in 
>> conditionnal always evaluate both operands ?
>> 
>> Hello,
>> 
>> I can see that if we use && and || operands in conditionnals, both 
>> operands are always evaluated, even if not necessary. For exemple, I have
:
>> 
>> <if(a && b)>
>> 
>> ...
>> 
>> <endif>
>> 
>> In my case, a is null, so it is not necessary to evaluate the second 
>> argument, right ? Shouldn't the evaluation stop when such a case is 
>> encountered ? It is the same for <if(a || b)> with a not null.
>> 
>> Maybe I miss something, thanks for your help.
>> 
>> 
>> 
>> _______________________________________________
>> stringtemplate-interest mailing list
>> stringtemplate-interest at antlr.org
>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
> 
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest

_______________________________________________
stringtemplate-interest mailing list
stringtemplate-interest at antlr.org
http://www.antlr.org/mailman/listinfo/stringtemplate-interest


From ub at abego-software.de  Thu Sep 15 10:11:10 2011
From: ub at abego-software.de (Udo Borkowski)
Date: Thu, 15 Sep 2011 19:11:10 +0200
Subject: [stringtemplate-interest] "Or" and "And" operators
	in	conditionnal always evaluate both operands ?
In-Reply-To: <007501cc73c5$3b33e4f0$b19baed0$@pixelminegames.com>
References: <BLU154-W58721549B72590153A657BBC070@phx.gbl>,
	<004501cc73ad$7489dbf0$5d9d93d0$@pixelminegames.com>	<BLU154-W10E21B86EE78ADC5B458B4BC070@phx.gbl>	<4E720553.8050602@lancaster.ac.uk>
	<8CDEF18A-60A4-4B41-B9C8-9C76EC118C07@abego-software.de>
	<007501cc73c5$3b33e4f0$b19baed0$@pixelminegames.com>
Message-ID: <CFD0A1DC-7937-4E79-BFC0-3316D675263E@abego-software.de>

> The point is this is entirely an implementation detail. There's no benefit
> to documenting the semantics in a short circuit manner ...

Right. I was talking about the implementation. I don't care, if this is externally documented. I was just surprised to read the current implementation does not use a short circuit implementation. 

Udo

On 15.09.2011, at 18:33, Sam Harwell wrote:

> The point is this is entirely an implementation detail. There's no benefit
> to documenting the semantics in a short circuit manner because that behavior
> is only semantically relevant in a language where expression evaluation can
> have side effects and/or null references can occur, neither of which applies
> to StringTemplate.
> 
> Sam
> 
> -----Original Message-----
> From: stringtemplate-interest-bounces at antlr.org
> [mailto:stringtemplate-interest-bounces at antlr.org] On Behalf Of Udo
> Borkowski
> Sent: Thursday, September 15, 2011 10:02 AM
> To: Sam Barnett-Cormack
> Cc: stringtemplate-interest List; Damien Urruty
> Subject: Re: [stringtemplate-interest] "Or" and "And" operators in
> conditionnal always evaluate both operands ?
> 
>> The usual pattern in most languages I've experiences is to 'short 
>> circuit' conditionals in this way - for &&, don't bother with the 
>> second if the first is false, for ||, don't bother if it's true. This 
>> has great behavioural effects widely used in languages like perl, but 
>> those don't really apply to ST that I can see.
> 
> Because ST has no side effects I would argue it is very reasonable to assume
> && and || are implemented in the "short circuit" way. Why should ST execute
> code that does not have any effect? 
> 
> If there is no strong argument against an "short circuit" implementation I
> suggest to change it to the "lazy" style. 
> 
> This will have no effect on the output but just run (a little bit) faster in
> some cases. So it should be a safe and compatible change.
> 
> Udo
> 
> 
> On 15.09.2011, at 16:01, Sam Barnett-Cormack wrote:
> 
>> The usual pattern in most languages I've experiences is to 'short 
>> circuit' conditionals in this way - for &&, don't bother with the 
>> second if the first is false, for ||, don't bother if it's true. This 
>> has great behavioural effects widely used in languages like perl, but 
>> those don't really apply to ST that I can see.
>> 
>> However, the specific case you identify is a good one. If you're in a 
>> situation where it's not a 'bad usage' of your template to have 'a'
>> unset, you definitely want to be able to test members of a for truth 
>> or existence at the very least, without syntactic merry-go-rounds or 
>> risking very strange errors.
>> 
>> Then again, maybe short-circuit isn't the way to deal with this case. 
>> Maybe there's some better way of handling cases that would seem to 
>> lead to such functionality being disireable. Who knows?
>> 
>> Sam (not the usual Sam)
>> 
>> On 15/09/2011 14:54, Damien Urruty wrote:
>>> Hi,
>>> 
>>> The problem I am facing is that my conditional is something like :
>>> 
>>> <if(a && a.b)>
>>> 
>>> Which raises an error in the case a is null (a.b is still evaluated).
>>> 
>>> By the way, the error is not very explicit : "templateName : no such 
>>> property or can't access: null attribute". I spent some time finding 
>>> where the error came from.
>>> 
>>> It is not a question of performance, I was just wondering if this 
>>> behaviour was normal, I mean if this is by design, or if it was a bug.
>>> 
>>> In my case, I can easily break the if in two separate ifs, so it 
>>> doesn't really matter. But as in Java the && does not evaluate all 
>>> the operands if not necessary (the & operator do evaluate each 
>>> operand), i wanted to know if this behaviour was wanted or not.
>>> 
>>> Maybe this should be discussed, I know it is not very important, or 
>>> at least it should be mentionned somewhere in the doc ?
>>> 
>>> Thanks for your response Sam, have a nice day
>>> 
>>> ---------------------------------------------------------------------
>>> ---
>>> From: sharwell at pixelminegames.com
>>> To: lepilache at hotmail.com; stringtemplate-interest at antlr.org
>>> Subject: RE: [stringtemplate-interest] "Or" and "And" operators in 
>>> conditionnal always evaluate both operands ?
>>> Date: Thu, 15 Sep 2011 08:43:29 -0500
>>> 
>>> Hi Damien,
>>> 
>>> Since the attributes referenced from a StringTemplate should always 
>>> be pure (no side effects), then there is no semantic difference 
>>> between evaluating or not evaluating the second argument. Are you 
>>> facing a significant performance problem due to the second evaluation?
>>> 
>>> Sam
>>> 
>>> *From:*stringtemplate-interest-bounces at antlr.org
>>> [mailto:stringtemplate-interest-bounces at antlr.org] *On Behalf Of 
>>> *Damien Urruty
>>> *Sent:* Thursday, September 15, 2011 8:01 AM
>>> *To:* stringtemplate-interest at antlr.org
>>> *Subject:* [stringtemplate-interest] "Or" and "And" operators in 
>>> conditionnal always evaluate both operands ?
>>> 
>>> Hello,
>>> 
>>> I can see that if we use && and || operands in conditionnals, both 
>>> operands are always evaluated, even if not necessary. For exemple, I have
> :
>>> 
>>> <if(a && b)>
>>> 
>>> ...
>>> 
>>> <endif>
>>> 
>>> In my case, a is null, so it is not necessary to evaluate the second 
>>> argument, right ? Shouldn't the evaluation stop when such a case is 
>>> encountered ? It is the same for <if(a || b)> with a not null.
>>> 
>>> Maybe I miss something, thanks for your help.
>>> 
>>> 
>>> 
>>> _______________________________________________
>>> stringtemplate-interest mailing list
>>> stringtemplate-interest at antlr.org
>>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>> 
>> _______________________________________________
>> stringtemplate-interest mailing list
>> stringtemplate-interest at antlr.org
>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
> 
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
> 


From ub at abego-software.de  Thu Sep 15 11:38:39 2011
From: ub at abego-software.de (Udo Borkowski)
Date: Thu, 15 Sep 2011 20:38:39 +0200
Subject: [stringtemplate-interest] AttributeProvider Proof of concept
	code
In-Reply-To: <CANiekN5Q_TUqWk0NYRu56g8CDONAC1Qag6i-N5tUvd5Ym0KfBg@mail.gmail.com>
References: <CANiekN5Q_TUqWk0NYRu56g8CDONAC1Qag6i-N5tUvd5Ym0KfBg@mail.gmail.com>
Message-ID: <72DB2FE8-6FCC-4660-817F-99D991A94210@abego-software.de>

> Now that this is done I'm thinking of building some some of STGroup that can load "Raw Templates".
...
> And the file can end in whatever extension you like. What do people think?  Does this sound useful or am I crossing some line?

I like the idea. If I recall correctly something similar was suggested recently. E.g. use the ".html" extension to edit an html template and still use a "classic" HTML editor.


Not sure how to handle the parameters for such templates.

In addition (or alternatively) I could imagine to extend ST4 with an "include" function. E.g.

main(firstName, lastName, age="unknown") ::= <<
<includeFile("sample.html")>
>>

The "sample.html" is a plain file (with any extension) and the parser will textually include it.


Udo


On 15.09.2011, at 15:04, Collin Fagan wrote:

> Hi Everyone,
> 
> I've checked in some code into the strum trunk that implements my "AttributeProvider" idea.
> 
> I had to override some methods in Interpreter. Here is a link to the code for that. 
> 
> https://project-strum.svn.sourceforge.net/svnroot/project-strum/trunk/strum-project/strum/src/main/java/com/collinfagan/strum/interpreters/DynamicAttributeInterpreter.java
> 
> After that it was just a matter of extending some classes to allow one to set an attribute provider. Extended versions of ST and all the standard STGroup implementations are here: 
> 
> https://project-strum.svn.sourceforge.net/svnroot/project-strum/trunk/strum-project/strum/src/main/java/com/collinfagan/strum/template/
> 
> 
> In the strum-spring project I have a test that shows how one might use this to pull beans out of a spring context.
> 
> https://project-strum.svn.sourceforge.net/svnroot/project-strum/trunk/strum-project/strum-spring/src/test/java/com/collinfagan/strum/spring/
> 
> Now that this is done I'm thinking of building some some of STGroup that can load "Raw Templates".
> So instead of this:
> 
> main() ::= <<
> 
> First Name: <dataBean.firstName>
> 
> Last Name: <dataBean.lastName>
> 
> System Properties:
>  java.runtime.name = <systemProperties.("java.runtime.name")>
> 
>  java.version = <systemProperties.("java.version")>
>  
> >>
> All you need is this:
> 
> First Name: <dataBean.firstName>
> Last Name: <dataBean.lastName>
> 
> System Properties:
> 
>  java.runtime.name = <systemProperties.("java.runtime.name")>
>  java.version = <systemProperties.("java.version")>
> 
> 
> And the file can end in whatever extension you like. What do people think?  Does this sound useful or am I crossing some line?
> 
> Thanks,
> Collin 
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20110915/348fe5a8/attachment-0001.html 

From collin.fagan at gmail.com  Thu Sep 15 12:02:57 2011
From: collin.fagan at gmail.com (Collin Fagan)
Date: Thu, 15 Sep 2011 14:02:57 -0500
Subject: [stringtemplate-interest] AttributeProvider Proof of concept
	code
In-Reply-To: <3B73AB43-3B4D-4E7E-B26E-56C6F06481D5@gmx.de>
References: <CANiekN5Q_TUqWk0NYRu56g8CDONAC1Qag6i-N5tUvd5Ym0KfBg@mail.gmail.com>
	<3B73AB43-3B4D-4E7E-B26E-56C6F06481D5@gmx.de>
Message-ID: <CANiekN5FbFDS_3WjpSbEkmQWucYYTB+NaP45iPZJqVNQncgNyA@mail.gmail.com>

*Not sure how to handle the parameters for such templates.*

Well see thats why you need an AttributeProvider. That way you don't have to
declare *any* parameters.

Collin

On Thu, Sep 15, 2011 at 1:37 PM, Udo Borkowski <Udo.Borkowski at gmx.de> wrote:

> Now that this is done I'm thinking of building some some of STGroup that
> can load "Raw Templates".
>
> ...
>
> And the file can end in whatever extension you like. What do people think?
> Does this sound useful or am I crossing some line?
>
>
> I like the idea. If I recall correctly something similar was suggested
> recently. E.g. use the ".html" extension to edit an html template and still
> use a "classic" HTML editor.
>
>
> Not sure how to handle the parameters for such templates.
>
> In addition (or alternatively) I could imagine to extend ST4 with an
> "include" function. E.g.
>
> main(firstName, lastName, age="unknown") ::= <<
> <includeFile("sample.html")>
> >>
>
> The "sample.html" is a plain file (with any extension) and the parser will
> textually include it.
>
>
> Udo
>
> On 15.09.2011, at 15:04, Collin Fagan wrote:
>
> Hi Everyone,
>
> I've checked in some code into the strum trunk that implements my
> "AttributeProvider" idea.
>
> I had to override some methods in Interpreter. Here is a link to the code
> for that.
>
>
> https://project-strum.svn.sourceforge.net/svnroot/project-strum/trunk/strum-project/strum/src/main/java/com/collinfagan/strum/interpreters/DynamicAttributeInterpreter.java
>
> After that it was just a matter of extending some classes to allow one to
> set an attribute provider. Extended versions of ST and all the standard
> STGroup implementations are here:
>
>
> https://project-strum.svn.sourceforge.net/svnroot/project-strum/trunk/strum-project/strum/src/main/java/com/collinfagan/strum/template/
>
>
> In the strum-spring project I have a test that shows how one might use this
> to pull beans out of a spring context.
>
>
> https://project-strum.svn.sourceforge.net/svnroot/project-strum/trunk/strum-project/strum-spring/src/test/java/com/collinfagan/strum/spring/
>
> Now that this is done I'm thinking of building some some of STGroup that
> can load "Raw Templates".
>
> So instead of this:
>
> main() ::= <<
>
> First Name: <dataBean.firstName>
>
> Last Name: <dataBean.lastName>
>
> System Properties:
>  java.runtime.name = <systemProperties.("java.runtime.name")>
>
>  java.version = <systemProperties.("java.version")>
>
> >>
> All you need is this:
>
> First Name: <dataBean.firstName>
> Last Name: <dataBean.lastName>
>
> System Properties:
>
>  java.runtime.name = <systemProperties.("java.runtime.name")>
>  java.version = <systemProperties.("java.version")>
>
>
> And the file can end in whatever extension you like. What do people think?
> Does this sound useful or am I crossing some line?
>
> Thanks,
> Collin
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20110915/38111a4f/attachment.html 

From afins_2004 at yahoo.de  Fri Sep 16 02:07:48 2011
From: afins_2004 at yahoo.de (AuFinNS)
Date: Fri, 16 Sep 2011 10:07:48 +0100 (BST)
Subject: [stringtemplate-interest] feature request: attribute name as enum
In-Reply-To: <1316163678.24144.YahooMailNeo@web27706.mail.ukl.yahoo.com>
References: <1316163678.24144.YahooMailNeo@web27706.mail.ukl.yahoo.com>
Message-ID: <1316164068.25225.YahooMailNeo@web27706.mail.ukl.yahoo.com>

Hello,?



is it suitable to have an stringtemplate add method with signature

public ST add(Enum<?> name, ?java.lang.Object value) {
return add(name.name(), value);
}

for easy work with enums?

Many thanks!
Best Regards, Max
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20110916/54b58126/attachment.html 

From parrt at cs.usfca.edu  Fri Sep 16 10:28:07 2011
From: parrt at cs.usfca.edu (Terence Parr)
Date: Fri, 16 Sep 2011 10:28:07 -0700
Subject: [stringtemplate-interest] "Or" and "And" operators
	in	conditionnal always evaluate both operands ?
In-Reply-To: <CFD0A1DC-7937-4E79-BFC0-3316D675263E@abego-software.de>
References: <BLU154-W58721549B72590153A657BBC070@phx.gbl>,
	<004501cc73ad$7489dbf0$5d9d93d0$@pixelminegames.com>	<BLU154-W10E21B86EE78ADC5B458B4BC070@phx.gbl>	<4E720553.8050602@lancaster.ac.uk>
	<8CDEF18A-60A4-4B41-B9C8-9C76EC118C07@abego-software.de>
	<007501cc73c5$3b33e4f0$b19baed0$@pixelminegames.com>
	<CFD0A1DC-7937-4E79-BFC0-3316D675263E@abego-software.de>
Message-ID: <38781D6F-7AD7-44AC-8398-C018FA9E3ADE@cs.usfca.edu>

Hi. Since  I'm very uncomfortable with the notion of allowing these operators in the first place, I saw no point in adding extra bytecodes and add complexity for no real value.

 should not be throwing an exception in v4. It should simply be notifying the listener; if these errors bother you then have the listener ignore them. I believe that is a design choice we made: a.b for a missing b property simply notifies the listener.

Ter
On Sep 15, 2011, at 10:11 AM, Udo Borkowski wrote:

>> The point is this is entirely an implementation detail. There's no benefit
>> to documenting the semantics in a short circuit manner ...
> 
> Right. I was talking about the implementation. I don't care, if this is externally documented. I was just surprised to read the current implementation does not use a short circuit implementation. 
> 
> Udo


From parrt at cs.usfca.edu  Fri Sep 16 10:31:41 2011
From: parrt at cs.usfca.edu (Terence Parr)
Date: Fri, 16 Sep 2011 10:31:41 -0700
Subject: [stringtemplate-interest] Conditionals
In-Reply-To: <CAGWbJj8f6cDD2G7qY-Yqm7UM3idtxC+OAp1HK3u9=BSeyemP3A@mail.gmail.com>
References: <CAGWbJj8f6cDD2G7qY-Yqm7UM3idtxC+OAp1HK3u9=BSeyemP3A@mail.gmail.com>
Message-ID: <0897CD8E-3A1F-4D2A-AAD8-915DA541D0E5@cs.usfca.edu>

hi. My new rule of thumb is to avoid conditionals if possible. The way to do that is to define "do some int thing" and the others as separate templates. then, your code generator (the controller/model) then informs Foo it has another element to add:

Foo(type, a, b) ::= <<
class Foo {
   <type> foo;
    <statements>
}
>>
 much cleaner
Ter
On Sep 1, 2011, at 3:35 PM, Jiwon Seo wrote:

Hi,

I'm using stringtemplate for code generation.
One thing I need to do is to generate different code based on the type
of a variable, like following:

Foo(type, a, b) ::= <<
class Foo {
   <type> foo;

   <if (type=="int")>
      do some int thing
   <elseif (type=="String">
     do some string thing
   <endif>
}
>> 

So far, I could somehow use the map (such as, EqMap ::= ["int": "==" ,
default: ".equals"] ) but this is something that cannot be done using
the map. So I ended up using a lot of variables like following:

Foo(type, intType, stringType, ... a, b) ::= <<
class Foo {
   <type> foo;

   <if (intType)>
      do some int thing
   <elseif (stringType)>
     do some string thing
   <endif>
}
>> 

Is there any other ways of doing this?

-Jiwon
_______________________________________________
stringtemplate-interest mailing list
stringtemplate-interest at antlr.org
http://www.antlr.org/mailman/listinfo/stringtemplate-interest


From collin.fagan at gmail.com  Sat Sep 17 06:36:06 2011
From: collin.fagan at gmail.com (Collin Fagan)
Date: Sat, 17 Sep 2011 08:36:06 -0500
Subject: [stringtemplate-interest] STGroupXML - to configure templates in
	raw formats
Message-ID: <CANiekN4bqtwH-qwNNSRb8XnTmW58Ns-ZFfz=AQuKCp-pLMCe-Q@mail.gmail.com>

Hi All,

There has been some expressed desire to have a template be just a .html file
(or any other plain file for that matter) and not have to surround every
template with "TEMPLATE_NAME() ::= <<>>". To facilitate this use case I've
created some proof of concept code that uses XML to specify a group of
thease "raw template files".

Here is an example of the XML behind an STGroupXML:

<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<group>
    <template name="method">
        <arg>name</arg>
        <arg>body</arg>
        <arg>cleanup</arg>
        <location>templates/method.txt</location>
    </template>
    <template name="useMethod">
        <location>templates/useMethod.txt</location>
    </template>
</group>

Method.txt contains the following text:

void <name>() {
  <body>
  <cleanup>
}

Notice there is no template def at the beginning.

Also the useMethod template similarly has no template definition at the top.


<method("getName","return firstName","")>

Like int other groups these templates can call each other.

The code create an STGroupXML object if very similar to other STGroups.

STGroupXML group = new STGroupXML(new File("test.xml"));
ST template = group.getInstanceOf("useMethod");
System.out.println(template.render());

I think this would be one way to allow files to be of any extension and
allow HTML editors to work better whit ST templates.

I will be cleaning up the code and checking into strum soon.

What do people think?

Collin
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20110917/799e1cb8/attachment.html 

From parrt at cs.usfca.edu  Sun Sep 25 07:59:06 2011
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sun, 25 Sep 2011 07:59:06 -0700
Subject: [stringtemplate-interest] a logo design? branding.
Message-ID: <D1F910C8-F547-4B3C-97F6-B048CECE9F5A@cs.usfca.edu>

hi.  Sam Harwell had the great idea that I should commission a logo or logos for the ANTLR project. Perhaps there is a similar and consistent logo design for the individual tools. I'm also considering a new layout and design for the website. Basically v4 will have major new functionality and I want to do some nice branding for it. Sam also recommend someone that seems very good for doing the logo design. Questionnaire I have to fill out for this designer, however, asks questions that I don't really know how to answer exactly. I thought that I should appeal to you folks in the community so that we can  hone the answers for the designer to get something nice. Here are some questions that you might know the answer to or have opinions on:

1. what existing logos do we like and why

2.  what logos do we dislike and why

3. Preferred typography (heavy, light, modern, classic, handwritten etc.)  maybe we don't want text in the logo at all, but it seems like .g and .st could work in the individual tool logos. Microsoft logos for example:


Here is the logo portfolio of the guy:

http://www.logoholik.com/logo_portfolio/logo_portfolio.html

 any and all thoughts about branding are welcome.

Ter
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20110925/094f1169/attachment-0001.html 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: IMG_24092011_170105.png
Type: image/png
Size: 20734 bytes
Desc: not available
Url : http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20110925/094f1169/attachment-0001.png 

From michael.bedward at gmail.com  Sun Sep 25 22:12:26 2011
From: michael.bedward at gmail.com (Michael Bedward)
Date: Mon, 26 Sep 2011 15:12:26 +1000
Subject: [stringtemplate-interest] [antlr-interest] a logo design?
	branding.
In-Reply-To: <D1F910C8-F547-4B3C-97F6-B048CECE9F5A@cs.usfca.edu>
References: <D1F910C8-F547-4B3C-97F6-B048CECE9F5A@cs.usfca.edu>
Message-ID: <CACJVtdOnyWSS_7k3zLdmZnqaTf83w2CTDnKw7=K2WRMFwf9+kQ@mail.gmail.com>

The correct answer is "you're the designer - you tell me".

My fall back answers are:

> 1. what existing logos do we like and why

GeoTools: compass / spanner logo (http://geotools.org/) because it's a
simple and informative pun

TED: big red letters (http://www.ted.com/) because it's obvious and memorable

ScapeToad: toad logo (http://scapetoad.choros.ch/) because it's
ridiculous with a certain elegance

R (http://www.r-project.org/) because you just say Rrrr...

> 2. ?what logos do we dislike and why

Sonatype: horizontal bars and thin font (http://www.sonatype.com/)
because it looks corporate and boring

ESRI globe in grid (http://www.esri.com/) because it looks like they
want to take the world prisoner

Old Sun logo (as seen at:
http://java.sun.com/products/java-media/jai/forDevelopers/jai1_0_1guide-unc/JAITOC.fm.html)
because it's on the wrong side of the line between clever and wanky

NetBeans: box figure and name (http://netbeans.org/) because what are
you supposed to do with an empty box ?

> 3. Preferred typography

Either elegant or in your face, but not script (usually lacks
immediacy) or very angular / geometric (e.g. the font used for the
Oracle logo which looks fascist - though perhaps that's just my
prejudice shining through).

Michael


On 26 September 2011 00:59, Terence Parr <parrt at cs.usfca.edu> wrote:
> hi. ?Sam Harwell had the great idea that I should commission a logo or logos for the ANTLR project. Perhaps there is a similar and consistent logo design for the individual tools. I'm also considering a new layout and design for the website. Basically v4 will have major new functionality and I want to do some nice branding for it. Sam also recommend someone that seems very good for doing the logo design. Questionnaire I have to fill out for this designer, however, asks questions that I don't really know how to answer exactly. I thought that I should appeal to you folks in the community so that we can ?hone the answers for the designer to get something nice. Here are some questions that you might know the answer to or have opinions on:
>
> 1. what existing logos do we like and why
>
> 2. ?what logos do we dislike and why
>
> 3. Preferred typography (heavy, light, modern, classic, handwritten etc.) ?maybe we don't want text in the logo at all, but it seems like .g and .st could work in the individual tool logos. Microsoft logos for example:
>
>
> Here is the logo portfolio of the guy:
>
> http://www.logoholik.com/logo_portfolio/logo_portfolio.html
>
> ?any and all thoughts about branding are welcome.
>
> Ter
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>

From parrt at cs.usfca.edu  Mon Sep 26 15:50:11 2011
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon, 26 Sep 2011 15:50:11 -0700
Subject: [stringtemplate-interest] [antlr-interest] a logo design?
	branding.
In-Reply-To: <CACJVtdOnyWSS_7k3zLdmZnqaTf83w2CTDnKw7=K2WRMFwf9+kQ@mail.gmail.com>
References: <D1F910C8-F547-4B3C-97F6-B048CECE9F5A@cs.usfca.edu>
	<CACJVtdOnyWSS_7k3zLdmZnqaTf83w2CTDnKw7=K2WRMFwf9+kQ@mail.gmail.com>
Message-ID: <93E1364E-AF32-4CF2-8E44-358BF9DB743B@cs.usfca.edu>

Thanks for the feedback!
Ter
On Sep 25, 2011, at 10:12 PM, Michael Bedward wrote:

> The correct answer is "you're the designer - you tell me".
> 
> My fall back answers are:
> 
>> 1. what existing logos do we like and why
> 
> GeoTools: compass / spanner logo (http://geotools.org/) because it's a
> simple and informative pun
> 
> TED: big red letters (http://www.ted.com/) because it's obvious and memorable
> 
> ScapeToad: toad logo (http://scapetoad.choros.ch/) because it's
> ridiculous with a certain elegance
> 
> R (http://www.r-project.org/) because you just say Rrrr...
> 
>> 2.  what logos do we dislike and why
> 
> Sonatype: horizontal bars and thin font (http://www.sonatype.com/)
> because it looks corporate and boring
> 
> ESRI globe in grid (http://www.esri.com/) because it looks like they
> want to take the world prisoner
> 
> Old Sun logo (as seen at:
> http://java.sun.com/products/java-media/jai/forDevelopers/jai1_0_1guide-unc/JAITOC.fm.html)
> because it's on the wrong side of the line between clever and wanky
> 
> NetBeans: box figure and name (http://netbeans.org/) because what are
> you supposed to do with an empty box ?
> 
>> 3. Preferred typography
> 
> Either elegant or in your face, but not script (usually lacks
> immediacy) or very angular / geometric (e.g. the font used for the
> Oracle logo which looks fascist - though perhaps that's just my
> prejudice shining through).
> 
> Michael
> 
> 
> On 26 September 2011 00:59, Terence Parr <parrt at cs.usfca.edu> wrote:
>> hi.  Sam Harwell had the great idea that I should commission a logo or logos for the ANTLR project. Perhaps there is a similar and consistent logo design for the individual tools. I'm also considering a new layout and design for the website. Basically v4 will have major new functionality and I want to do some nice branding for it. Sam also recommend someone that seems very good for doing the logo design. Questionnaire I have to fill out for this designer, however, asks questions that I don't really know how to answer exactly. I thought that I should appeal to you folks in the community so that we can  hone the answers for the designer to get something nice. Here are some questions that you might know the answer to or have opinions on:
>> 
>> 1. what existing logos do we like and why
>> 
>> 2.  what logos do we dislike and why
>> 
>> 3. Preferred typography (heavy, light, modern, classic, handwritten etc.)  maybe we don't want text in the logo at all, but it seems like .g and .st could work in the individual tool logos. Microsoft logos for example:
>> 
>> 
>> Here is the logo portfolio of the guy:
>> 
>> http://www.logoholik.com/logo_portfolio/logo_portfolio.html
>> 
>>  any and all thoughts about branding are welcome.
>> 
>> Ter
>> 
>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>> 
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest


