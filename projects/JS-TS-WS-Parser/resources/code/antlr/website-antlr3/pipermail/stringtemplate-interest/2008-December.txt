From mikaeln at acm.org  Mon Dec  1 01:44:55 2008
From: mikaeln at acm.org (Mikael Nyberg)
Date: Mon, 1 Dec 2008 10:44:55 +0100
Subject: [stringtemplate-interest] List-making problem
In-Reply-To: <200811211559.54755.roma@qwertty.com>
References: <60d409690811210405k2832fdacv502028768270c1b2@mail.gmail.com>
	<200811211559.54755.roma@qwertty.com>
Message-ID: <60d409690812010144j6086173dv49e5ca975bfc809b@mail.gmail.com>

I've been using the new version and it works fine, thanks again. But
now I am in need of further nesting, and the problem returns, since it
seems that the list-making syntax does not accept all expressions.

For instance, I would like to be able to create list elements
consisting of conditionally added subtemplates ($if()$...$endif$),
lists with separators ($attr:{something:$it$}; separator=","$) etc.
When I try to add expressions like these to a list using the
$[...,...];separator=","$ list-making syntax, I get errors.

Is there some syntactic element I'm overlooking here, or is the
list-making syntax not meant to support arbitrary expressions as list
elements?

Regards,

-Mikael


On Fri, Nov 21, 2008 at 2:59 PM, Roman Odaisky <roma at qwertty.com> wrote:
> On Friday, 21.11.2008 14:05:37 Mikael Nyberg wrote:
>
>> $[where:{where:$it$},what:{what:$it$}];separator=","$] is not legal.
>
> Legal since ST 3.2.1. http://www.antlr.org:8888/browse/ST-41
>
> --
> HTH
> Roman.
>
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org:8080/mailman/listinfo/stringtemplate-interest
>
>



-- 
Mikael Nyberg
mikaeln at acm.org
tel: 91830360

From roma at qwertty.com  Mon Dec  1 02:29:44 2008
From: roma at qwertty.com (Roman Odaisky)
Date: Mon, 1 Dec 2008 12:29:44 +0200
Subject: [stringtemplate-interest] List-making problem
In-Reply-To: <60d409690812010144j6086173dv49e5ca975bfc809b@mail.gmail.com>
References: <60d409690811210405k2832fdacv502028768270c1b2@mail.gmail.com>
	<200811211559.54755.roma@qwertty.com>
	<60d409690812010144j6086173dv49e5ca975bfc809b@mail.gmail.com>
Message-ID: <200812011229.49845.roma@qwertty.com>

On Monday, 01.12.2008 11:44:55 Mikael Nyberg wrote:

> For instance, I would like to be able to create list elements
> consisting of conditionally added subtemplates ($if()$...$endif$),
> lists with separators ($attr:{something:$it$}; separator=","$) etc.
> When I try to add expressions like these to a list using the
> $[...,...];separator=","$ list-making syntax, I get errors.
>
> Is there some syntactic element I'm overlooking here, or is the
> list-making syntax not meant to support arbitrary expressions as list
> elements?

There has been some discussion about replacements for $if$ in the thread 
starting from <200808101759.19093.roma at qwertty.com>.

In short, you can replace $if(condition)$template$endif$ with $condition:
{template}$. If  condition can be a list, use $first(condition):{template}$ 
to avoid expanding the template more than once. Instead of elseif you can use 
the null=... clause.

Also you can use any expressions in [] lists, for example, [attr, "literal", 
{template $something$}, "argument":template()]. This might solve your problem 
if I understand it correctly:

$[a, b, c, {$list; separator=", "$}, x, y, z]; separator="; "$

Or you could maybe define a standalone template like this:

(separated.st)
$it; separator=s$

and then invoke it as

$[a, b, c, list:separated(s=", "), x, y, z]; separator="; "$

(doesn?t seem to work, however :-).

-- 
HTH
Roman.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/pkcs7-signature
Size: 2286 bytes
Desc: not available
Url : http://www.antlr.org:8080/pipermail/stringtemplate-interest/attachments/20081201/72743ba0/attachment.bin 

From mikaeln at acm.org  Mon Dec  1 03:19:38 2008
From: mikaeln at acm.org (Mikael Nyberg)
Date: Mon, 1 Dec 2008 12:19:38 +0100
Subject: [stringtemplate-interest] List-making problem
In-Reply-To: <200812011229.49845.roma@qwertty.com>
References: <60d409690811210405k2832fdacv502028768270c1b2@mail.gmail.com>
	<200811211559.54755.roma@qwertty.com>
	<60d409690812010144j6086173dv49e5ca975bfc809b@mail.gmail.com>
	<200812011229.49845.roma@qwertty.com>
Message-ID: <60d409690812010319m779768ddga9cb92f42cbca032@mail.gmail.com>

>
> There has been some discussion about replacements for $if$ in the thread
> starting from <200808101759.19093.roma at qwertty.com>.

Nice, makes a lot of sense.

> In short, you can replace $if(condition)$template$endif$ with $condition:
> {template}$. If  condition can be a list, use $first(condition):{template}$
> to avoid expanding the template more than once. Instead of elseif you can use
> the null=... clause.

Well, the replacement above works fine, but it is not always
exchangeable in the context of lists when using templates in groups.
At the top level (in the "main", no arguments) template in the group
file I'm allowed to test for existence of any attribute: The test
$if(attr)$...$endif$ is legal even if attr does not exist. But if
write the condition as $attr:{template}$ and put it in a list
$[{$attr:{template}$}]$ I may get a "no such attribute: attr in
template context" error. I admit I have not really understood this
part of StringTemplate; i.e. when it is legal to test for attributes
that may not have been set (or why it should ever be illegal). Maybe
what happens in the list construction when using braces to embed an
expression is the same as "calling" a subtemplate with an argument?

> Also you can use any expressions in [] lists, for example, [attr, "literal",
> {template $something$}, "argument":template()]. This might solve your problem
> if I understand it correctly:
>
> $[a, b, c, {$list; separator=", "$}, x, y, z]; separator="; "$

Yes, I see now that if I embed the expression i braces, any
expressions can be used. That leaves me with the problem described
above with non-existing attributes.

> Or you could maybe define a standalone template like this:
>
> (separated.st)
> $it; separator=s$
>
> and then invoke it as
>
> $[a, b, c, list:separated(s=", "), x, y, z]; separator="; "$
>
> (doesn't seem to work, however :-).

No this is what I tried first, seems that the expression must be put
within braces.
-- 
Mikael Nyberg
mikaeln at acm.org
tel: 91830360

From mikaeln at acm.org  Mon Dec  1 10:02:48 2008
From: mikaeln at acm.org (Mikael Nyberg)
Date: Mon, 1 Dec 2008 19:02:48 +0100
Subject: [stringtemplate-interest] List-making problem
In-Reply-To: <60d409690812010319m779768ddga9cb92f42cbca032@mail.gmail.com>
References: <60d409690811210405k2832fdacv502028768270c1b2@mail.gmail.com>
	<200811211559.54755.roma@qwertty.com>
	<60d409690812010144j6086173dv49e5ca975bfc809b@mail.gmail.com>
	<200812011229.49845.roma@qwertty.com>
	<60d409690812010319m779768ddga9cb92f42cbca032@mail.gmail.com>
Message-ID: <60d409690812011002r311ff73fs32a70cec2a194ffc@mail.gmail.com>

Oops, I apologize for omitting some crucial information regarding my
question above, the "top level" template I mentioned is of course not
a StringTemplate feature but simply an implementation detail in the
framework from which I use StringTemplate, where the attributes are
set using setAttributes(Map attrMap), and named templates with no
formal parameters are called.

So when attributes are set using a Map, and a parameterless template
test() is called, the following applies:

$if(name)$...$endif$ is legal, whether "name" is in the map or not
$[name:{whatever$it$}]$ is also legal. Yields empty list if "name" is
not in map.
$[{$name:{whatever$it$}$}]$ is not legal if name is not in the map.

Again, apologize for the confusion. What I'm trying to create is
pretty simple, just expressions like "and( someCrit, someOtherCrit,
filter( filterExpression) )", where "someCrit", "someOtherCrit" and
"filter(...)" are created by subtemplates, but only if certain
attributes exist in the parameter map. I.e. the expression may
collapse to "and(someCrit)" or even "and(filter(...))" or ideally just
"filter(...)".

From nward at resqsoft.com  Mon Dec  1 12:45:25 2008
From: nward at resqsoft.com (Nathan Ward)
Date: Mon, 1 Dec 2008 15:45:25 -0500
Subject: [stringtemplate-interest] Managing "type specific" subtemplates
Message-ID: <66B10DFC5BF749E38631FE9169B5956E@nwardlt>

Any suggestions for how to handle case where a different subtemplate should
be used depending on the type of a given model object? Is it reasonable to
use a Map to determine the subtemplate to use for this type of situation? 
 
For example, I'm generating JSPs and I have a Screen object that has a list
of ScreenElement objects. There is an inheritance hierarchy of
ScreenElements. So, there is a Textbox class that inherits from
ScreenElement as well as a DropDownList, Checkbox, etc. So, my jsp template
needs to use a different subtemplate based on the type of the ScreenElement.
My current solution (which is working) is use a map to specify the
subtemplate to be used and to define a ScreenElementType attribute on each
ScreenElement subclass so that I can lookup the subtemplate by
ScreenElementType. 
 
  e.g. jsp(screen) ::= <<
            $screen.screenElements: {screenElement|
$screenElementTypeMap.(screenElement.type.name)$}$$
  >>
 
textboxTag ::= << 
   <html-el:text...
>>
 
screenElementTypeMap :: [
    "textbox" : "textboxTag",
    "checkbox" : "checkboxTag"
]
 
This is not exactly my actual template code and there are several other
cases like this. In some cases, I only one ScreenElement type has a
subtemplate. I use a map in that case, but just specify a subtemplate for
only the type that I'm interested in. In other words, I'm using a map to
filter the list of ScreenElements in this case.
 
Nathan Ward
ResQSoft, Inc.
703.861.9103
www.resqsoft.com
that 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org:8080/pipermail/stringtemplate-interest/attachments/20081201/63000ff9/attachment.html 

From nward at resqsoft.com  Mon Dec  1 15:39:18 2008
From: nward at resqsoft.com (Nathan Ward)
Date: Mon, 1 Dec 2008 18:39:18 -0500
Subject: [stringtemplate-interest] Managing "type specific" subtemplates
In-Reply-To: <66B10DFC5BF749E38631FE9169B5956E@nwardlt>
References: <66B10DFC5BF749E38631FE9169B5956E@nwardlt>
Message-ID: <17E0B0622FA64180BCBE6F6836764CEA@nwardlt>

Actually, the indirect subtemplate references should be: 
 
  $(screenElementTypeMap.(screenElement.type.name))(...)$
 
The parenthesis around the results of the map reference were missing as well
as the formal parameter list.

  _____  

From: stringtemplate-interest-bounces at antlr.org
[mailto:stringtemplate-interest-bounces at antlr.org] On Behalf Of Nathan Ward
Sent: Monday, December 01, 2008 3:45 PM
To: stringtemplate-interest at antlr.org
Subject: [stringtemplate-interest] Managing "type specific" subtemplates


Any suggestions for how to handle case where a different subtemplate should
be used depending on the type of a given model object? Is it reasonable to
use a Map to determine the subtemplate to use for this type of situation? 
 
For example, I'm generating JSPs and I have a Screen object that has a list
of ScreenElement objects. There is an inheritance hierarchy of
ScreenElements. So, there is a Textbox class that inherits from
ScreenElement as well as a DropDownList, Checkbox, etc. So, my jsp template
needs to use a different subtemplate based on the type of the ScreenElement.
My current solution (which is working) is use a map to specify the
subtemplate to be used and to define a ScreenElementType attribute on each
ScreenElement subclass so that I can lookup the subtemplate by
ScreenElementType. 
 
  e.g. jsp(screen) ::= <<
            $screen.screenElements: {screenElement|
$screenElementTypeMap.(screenElement.type.name)$}$$
  >>
 
textboxTag ::= << 
   <html-el:text...
>>
 
screenElementTypeMap :: [
    "textbox" : "textboxTag",
    "checkbox" : "checkboxTag"
]
 
This is not exactly my actual template code and there are several other
cases like this. In some cases, I only one ScreenElement type has a
subtemplate. I use a map in that case, but just specify a subtemplate for
only the type that I'm interested in. In other words, I'm using a map to
filter the list of ScreenElements in this case.
 
Nathan Ward
ResQSoft, Inc.
703.861.9103
www.resqsoft.com
that 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org:8080/pipermail/stringtemplate-interest/attachments/20081201/216c776a/attachment.html 

From jonathan at buhacoff.net  Tue Dec  2 07:52:38 2008
From: jonathan at buhacoff.net (Jonathan Buhacoff)
Date: Tue, 2 Dec 2008 07:52:38 -0800
Subject: [stringtemplate-interest] Does a Perl port exist? Anyone interested?
Message-ID: <5060DDDB-FB3B-4FB5-8970-2A21AE5B69DD@buhacoff.net>

I did a quick search for a perl port on Google and CPAN and did not  
find one.

If it doesn't exist yet I'd like to make it.

I think the procedure would be to take the string template grammar,  
generate a perl target, then write the perl API and engine to use it,  
probably by translating Terrence's Java code for StringTemplate.

Or maybe I can use StringTemplate and ANTLR to make a Java-to-perl  
source translation and then just apply it to the StringTemplate  
sources?  I guess I'd have to de-compile any libraries that it uses so  
I can use the translation on those sources as well.

Jonathan
(part time comp sci student and perl fan looking for fun project!)


From parrt at cs.usfca.edu  Tue Dec  2 10:51:11 2008
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue, 2 Dec 2008 10:51:11 -0800
Subject: [stringtemplate-interest] Does a Perl port exist? Anyone
	interested?
In-Reply-To: <5060DDDB-FB3B-4FB5-8970-2A21AE5B69DD@buhacoff.net>
References: <5060DDDB-FB3B-4FB5-8970-2A21AE5B69DD@buhacoff.net>
Message-ID: <F09DC866-A2B4-440D-93D8-FA896113AD56@cs.usfca.edu>


On Dec 2, 2008, at 7:52 AM, Jonathan Buhacoff wrote:

> I did a quick search for a perl port on Google and CPAN and did not
> find one.
>
> If it doesn't exist yet I'd like to make it.

You're on :)

> I think the procedure would be to take the string template grammar,
> generate a perl target, then write the perl API and engine to use it,
> probably by translating Terrence's Java code for StringTemplate.

I'm not sure that the Perl target is up to snuff. Further, the  
grammars in ST have to be updated to v3; they are in v2 at the moment,  
which does not even have a Perl target. As part of my sabbatical next  
year I will be rebuilding ST.

> Or maybe I can use StringTemplate and ANTLR to make a Java-to-perl
> source translation and then just apply it to the StringTemplate
> sources?  I guess I'd have to de-compile any libraries that it uses so
> I can use the translation on those sources as well.
>
> Jonathan
> (part time comp sci student and perl fan looking for fun project!)

I'd first take a look at the Perl target and see if it works ;) If so,  
then perhaps build a Perl native version of ST that mimics the Java  
version.
Ter

From sharwell at pixelminegames.com  Tue Dec  2 11:31:43 2008
From: sharwell at pixelminegames.com (Sam Harwell)
Date: Tue, 2 Dec 2008 13:31:43 -0600
Subject: [stringtemplate-interest] Does a Perl port exist?
	Anyoneinterested?
In-Reply-To: <F09DC866-A2B4-440D-93D8-FA896113AD56@cs.usfca.edu>
References: <5060DDDB-FB3B-4FB5-8970-2A21AE5B69DD@buhacoff.net>
	<F09DC866-A2B4-440D-93D8-FA896113AD56@cs.usfca.edu>
Message-ID: <86403CA0939415448BCCB83855EFE09A64E9B7@Bloodymary.ironwillgames.com>

V3/C# ST grammars attached.

7-zip format: http://www.7-zip.org

Sam

-----Original Message-----
From: stringtemplate-interest-bounces at antlr.org
[mailto:stringtemplate-interest-bounces at antlr.org] On Behalf Of Terence
Parr
Sent: Tuesday, December 02, 2008 12:51 PM
To: Jonathan Buhacoff
Cc: stringtemplate-interest at antlr.org
Subject: Re: [stringtemplate-interest] Does a Perl port exist?
Anyoneinterested?


On Dec 2, 2008, at 7:52 AM, Jonathan Buhacoff wrote:

> I did a quick search for a perl port on Google and CPAN and did not
> find one.
>
> If it doesn't exist yet I'd like to make it.

You're on :)

> I think the procedure would be to take the string template grammar,
> generate a perl target, then write the perl API and engine to use it,
> probably by translating Terrence's Java code for StringTemplate.

I'm not sure that the Perl target is up to snuff. Further, the  
grammars in ST have to be updated to v3; they are in v2 at the moment,  
which does not even have a Perl target. As part of my sabbatical next  
year I will be rebuilding ST.

> Or maybe I can use StringTemplate and ANTLR to make a Java-to-perl
> source translation and then just apply it to the StringTemplate
> sources?  I guess I'd have to de-compile any libraries that it uses so
> I can use the translation on those sources as well.
>
> Jonathan
> (part time comp sci student and perl fan looking for fun project!)

I'd first take a look at the Perl target and see if it works ;) If so,  
then perhaps build a Perl native version of ST that mimics the Java  
version.
Ter
_______________________________________________
stringtemplate-interest mailing list
stringtemplate-interest at antlr.org
http://www.antlr.org:8080/mailman/listinfo/stringtemplate-interest
-------------- next part --------------
A non-text attachment was scrubbed...
Name: STGrammars.7z
Type: application/octet-stream
Size: 12626 bytes
Desc: STGrammars.7z
Url : http://www.antlr.org:8080/pipermail/stringtemplate-interest/attachments/20081202/bc58b27d/attachment-0001.obj 

From parrt at cs.usfca.edu  Tue Dec  2 11:38:35 2008
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue, 2 Dec 2008 11:38:35 -0800
Subject: [stringtemplate-interest] Does a Perl port exist?
	Anyoneinterested?
In-Reply-To: <86403CA0939415448BCCB83855EFE09A64E9B7@Bloodymary.ironwillgames.com>
References: <5060DDDB-FB3B-4FB5-8970-2A21AE5B69DD@buhacoff.net>
	<F09DC866-A2B4-440D-93D8-FA896113AD56@cs.usfca.edu>
	<86403CA0939415448BCCB83855EFE09A64E9B7@Bloodymary.ironwillgames.com>
Message-ID: <2C005A90-0DD0-4375-886E-569AF15B4099@cs.usfca.edu>

Oh, right!  thanks, Sam.
Ter

From nward at resqsoft.com  Fri Dec  5 06:09:05 2008
From: nward at resqsoft.com (Nathan Ward)
Date: Fri, 5 Dec 2008 09:09:05 -0500
Subject: [stringtemplate-interest] Template Group Organization
Message-ID: <0BD142D39229495A864B5115FF14BEF2@nwardlt>

Are there any typical usage patterns or best practices for "template group
organization?" I haven't seen much said about this.
 
I believe the options supported by the StringTemplate API is to either treat
a set of directories as a template group in which case each file within that
directory or in a subdirectory as a template. Template Group Files are not
allowed in this case. The other option is to treat a single .stg file as a
template group. In this case, a file can contain multiple templates. 
 
I'm working on generating files for a Java web application including JSPs,
Struts Action classes, form classes, resource bundle files, etc. What I've
done so far is to use Template Group Files with a template group file for
each target file, e.g. JSP.stg, ActionClass.stg,
ApplicationResourcesProperties.stg. Each of these template groups have a
number of templates specific to a particular target output file. However,
there are several small templates that each of these template groups need to
share. What I've done so far is to make a Common.stg and use the
StringTemplate Java API to configure the output file specific template
groups inherit from this template group, e.g. the JSP string template group
inherits from Common string template group. 
 
I'm wondering if there is a better way to share templates between template
groups, but still be able to use template group files so that I can group
closely related templates into a file. Inheritance doesn't seem to be the
best approach to this issue, but currently it looks like it is the only
choice. This also reduces the clarity of the templates in some cases. For
example, if a template named resetButtonAction(button) refers to a template
named msgKeyTag(msgKey=button.name) where the msgKeyTag template is
inherited from Common.stg it isn't clear in the code that this template is
not defined in JSP.stg. A developer working on these templates in the future
will have to search JSP.stg to find that it is not defined in that file,
then figure out that the JSP template group inherits from the Common
template group and search it. If my template group inheritance grows (which
it probably will due to the way that I'm using it), then the developer will
have to repeat this process or just search all .stg files in a given
directory. Seems kind of clunky. 
 
Part of the problem is that I'm setting up the template group inheritance
via the Java API rather than using the syntax at the top of a template group
file (e.g. group JSP : Common). However, I would like to separate my
templates into separate directories by various criteria mainly so that I can
find and replace all templates specific to a certain technology (Struts,
Hibernate, etc.). So, I have the Common.stg template in a different
directory from JSP.stg. The string template group syntax doesn't support
specifying a path in the super group name. 
 
I'd love to hear how other people organize templates into template groups
and how you organize the template group files. As it stands, it seems to me
that StringTemplate should allow nested template groups so that I could
specify a top-level directory as a template group and then use template
group files in subdirectories under that base directory. I'd also like to be
able to refer to a template in a different template group with a syntax like
$Shared/OtherTemplateGroup::otherTemplate(...)$ where "Shared" is a
directory relative to some base directory and therefore could be thought of
as another template group and OtherTemplateGroup a template group file in
the Shared directory. And, I would like to be able to specify a relative
path when specifying the super template group in a template group file, e.g.
JSP : Shared/BaseJsp.stg where Shared is relative to the base directory.
 
Nathan Ward
ResQSoft, Inc.
703.861.9103
www.resqsoft.com
 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org:8080/pipermail/stringtemplate-interest/attachments/20081205/77de000d/attachment.html 

From parrt at cs.usfca.edu  Fri Dec  5 10:34:33 2008
From: parrt at cs.usfca.edu (Terence Parr)
Date: Fri, 5 Dec 2008 10:34:33 -0800
Subject: [stringtemplate-interest] sorry for my delay...
Message-ID: <A2D24C30-4338-451F-A6B2-AAC735ED48D8@cs.usfca.edu>

I'm frantically working on book at the moment. i'll try to go thru  
list and answer questoins this weekend.
T

From parrt at cs.usfca.edu  Fri Dec  5 12:33:42 2008
From: parrt at cs.usfca.edu (Terence Parr)
Date: Fri, 5 Dec 2008 12:33:42 -0800
Subject: [stringtemplate-interest] [antlr-interest] Generating text from
	models
In-Reply-To: <49398D3D.9060701@mpagel.de>
References: <493712E4.1000505@mpagel.de>
	<20081204182421.FDCV29018.viefep15-int.chello.at@edge02.upc.biz>
	<9da4f4520812041032p636cad0fgbcead43c33804706@mail.gmail.com>
	<49384529.7000601@mpagel.de> <49392520.6010000@mpagel.de>
	<9da4f4520812050500u2a6f7757x4c8798985ce51792@mail.gmail.com>
	<306DA0B3-B8B2-4B2D-928F-0099D938DAFC@cs.usfca.edu>
	<49398D3D.9060701@mpagel.de>
Message-ID: <1E6E5680-962E-4633-A946-CB67A7E93F50@cs.usfca.edu>

ha!  I knew I have done this:

http://www.codegeneration.net/tiki-read_article.php?articleId=65

IGenerate Java and XML code from the reflection API.

>
> thanks a lot. For a full model-to-text transformation you can then  
> merge the model's object tree and the corresponding template at the  
> top of the hierarchy, and the latter then pulls in further more fine- 
> grained templates as it is proceeds. And this is exactly what XPAND  
> or much rather oAW does, where you also (in their workflow XML)  
> associate model root and template root. I know (or better I have  
> read a bit) that oAW can do a lot of very advanced things, but I  
> currently feel that ST is much easier to get to. Needless to say  
> that I am living in .NET country most of the time... :-) So thanks  
> for this tool.

my pleasure

> Still have an issue left though: on a different project I am using  
> Microsoft's T4 code generator from their DSL tools. If you don't  
> know anything about it just think of ASP/JSP generators or JET in  
> Eclipse, templates look like "<% code %> literal text <%= value %>"  
> and so forth. The ability to put in code does allow for bad style,  
> but:
>
> In addition to just querying attributes from the context, you can  
> also pass parameters to (query) functions. And this is mandatory in  
> our case. Our input data is XML and the templates emit portions from  
> the XML by referring to XML nodes through XPATH. So in a template  
> you might find something like
>
> DoIt() first parameter: <%= Value( "//Method[@name='DoIt']/ 
> Parameters[0]" ) %>.
>
> Where Value( string xpathExpr ) is such a query operation to get the  
> referenced data from the XML. The problem is that we have a lot of  
> templates that all need different data portions so hardcoding those  
> queries in form of getters is not an option.
>
> Can ST do this as well?

Well, it depends on what the arguments are.  if it's an attribute or  
string of some kind, you can use the format option and a renderer.

Any time I need to pass an argument back into the model from the  
template, I ask myself whether I am allowing the model to leak into  
the template. If it looks the program, it probably is. That is not  
something you want to happen to your template. In your case, It's hard  
to tell. But, xpath stuff to pull specific nodes from a data structure  
makes me a bit nervous unless you are just descending through the  
various nodes. One could argue that the template should simply be  
displaying data, not encoding how to jump around and ask about tree.  
One test is to ask whether or not you could use that template with  
another data structure. just something to think about.

Ter

From jdmitchell at gmail.com  Fri Dec  5 16:34:41 2008
From: jdmitchell at gmail.com (John D. Mitchell)
Date: Fri, 5 Dec 2008 16:34:41 -0800
Subject: [stringtemplate-interest] [antlr-interest] Generating text from
	models
In-Reply-To: <1E6E5680-962E-4633-A946-CB67A7E93F50@cs.usfca.edu>
References: <493712E4.1000505@mpagel.de>
	<20081204182421.FDCV29018.viefep15-int.chello.at@edge02.upc.biz>
	<9da4f4520812041032p636cad0fgbcead43c33804706@mail.gmail.com>
	<49384529.7000601@mpagel.de> <49392520.6010000@mpagel.de>
	<9da4f4520812050500u2a6f7757x4c8798985ce51792@mail.gmail.com>
	<306DA0B3-B8B2-4B2D-928F-0099D938DAFC@cs.usfca.edu>
	<49398D3D.9060701@mpagel.de>
	<1E6E5680-962E-4633-A946-CB67A7E93F50@cs.usfca.edu>
Message-ID: <E67837D7-2D8D-4002-840F-20B304304E54@gmail.com>

On Friday 2008.12.05, at 12:33 , Terence Parr wrote:
[...]
>> In addition to just querying attributes from the context, you can
>> also pass parameters to (query) functions. And this is mandatory in
>> our case. Our input data is XML and the templates emit portions from
>> the XML by referring to XML nodes through XPATH. So in a template
>> you might find something like
>>
>> DoIt() first parameter: <%= Value( "//Method[@name='DoIt']/
>> Parameters[0]" ) %>.
>>
>> Where Value( string xpathExpr ) is such a query operation to get the
>> referenced data from the XML. The problem is that we have a lot of
>> templates that all need different data portions so hardcoding those
>> queries in form of getters is not an option.
>>
>> Can ST do this as well?
>
> Well, it depends on what the arguments are.  if it's an attribute or
> string of some kind, you can use the format option and a renderer.
>
> Any time I need to pass an argument back into the model from the
> template, I ask myself whether I am allowing the model to leak into
> the template. If it looks the program, it probably is. That is not
> something you want to happen to your template. In your case, It's hard
> to tell. But, xpath stuff to pull specific nodes from a data structure
> makes me a bit nervous unless you are just descending through the
> various nodes. One could argue that the template should simply be
> displaying data, not encoding how to jump around and ask about tree.
> One test is to ask whether or not you could use that template with
> another data structure. just something to think about.

In addition to Ter's very good points, I can add that in terms of the  
XML'ish nature of this question that switching from a hacked template  
approach to using XQuery is a very good option.

I.e., processing XML and generating X(HT)ML is much more "natural" and  
easier using XQuery than trying to deal with the latest (weirdo :-)  
JSP/ASP/etc. abomination.

To be clear, I still like the enforced separation of the ST approach  
in general but for a lot of XML hacking, XQuery allows for the  
relatively controlled intermingling of processing, structure, and  
hacking that seems to be very prevalent in XML processing (think:  
multi-stage pipelines that aren't clearly thought of as pipelines).   
We use XQuery on the backend of http://markmail.org/ and it generates  
XHTML, JSON, RSS, etc. for the various types of data streams.

Hope this helps,
John


From parrt at cs.usfca.edu  Mon Dec  8 10:54:37 2008
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon, 8 Dec 2008 10:54:37 -0800
Subject: [stringtemplate-interest] Managing template parameters
In-Reply-To: <10F14506DE42495391D71CD519C2C2AD@nwardlt>
References: <8DCBF4EF78C745CAB10D94682F173D8F@nwardlt>
	<A1AE6F3D-F51F-4E5E-8E91-E2E4298025D1@cs.usfca.edu>
	<D070D14AD5664B16966B15441B736FA6@nwardlt>
	<BC9EFF92-B311-46DA-9831-09AC98194773@cs.usfca.edu>
	<341F547D07194AECAC7F1509F02F3D03@nwardlt>
	<B15B8672-4F81-4BFB-81DC-AF75073FCC50@cs.usfca.edu>
	<10F14506DE42495391D71CD519C2C2AD@nwardlt>
Message-ID: <25F9E4E7-052A-4FED-BE62-3E473AAFB2F5@cs.usfca.edu>


On Nov 23, 2008, at 4:38 PM, Nathan Ward wrote:

> That's more than I was suggesting.

Added feature request anyway. Sounds like a good idea:

http://www.antlr.org:8888/browse/ST-46

> I just wanted to be able do something like:
>
>     myTemplateGroup.setAttribute("project", myProject);
>
> Many of my templates don't need this object, but some low-level  
> templates,
> such as the msgKeyTag template shown below do need the project  
> object. In

Interesting...sort of a global attribute?

> order to test msgKeyTag template with a JUnit based test, I had to  
> make a
> base template group and a temporary template that takes the project  
> object
> as a formal parameter so that the object would be available when the
> msgKeyTag template was invoked.

Can't you use setUp or whatever with junit to set default parameters?  
Why not just have a method/factory create templates and set the  
default parameters?

Ter
>
>
> I would think that this situation is not uncommon. So, either other  
> people
> don't test small templates like this or other people also have to  
> come up
> with similar solutions to unit test these kinds of templates. So, I  
> thought
> this concept and API might make sense.
>
> // Implicit variable references: project
> // Calls different template based on project.properties.msgFormatName
> property,
> // e.g. jstlMsgFormat() template if msgFormatName is "jstl"
> msgKeyTag(msgKey) ::= <<
> $(msgFormatTemplateNameMap.(project.projectOptions.msgTagType))(...)$
>>>
>
> jstlMsgFormat(msgKey) ::= <<
> <fmt:message key="$msgKey$">
>>>
>
> strutsMsgFormat(msgKey) ::= <<
> <bean:message key="$msgKey$">
>>>
>
> springMsgFormat(msgKey) ::= <<
> <spring:message code="$msgKey$">
>>>
>
> // Maps msg format name to msg format template
> // e.g. "jstl" maps to jstlMsgFormat template to produce  
> <fmt:message ...
> tag
> // Used by msgKeyTag template
> msgFormatTemplateNameMap ::= [
>        "jstl":"jstlMsgFormat",
>        "struts":"strutsMsgFormat",
>        "spring":"springMsgFormat"
> ]
>
>
> -----Original Message-----
> From: Terence Parr [mailto:parrt at cs.usfca.edu]
> Sent: Friday, November 21, 2008 1:53 PM
> To: Nathan Ward
> Cc: stringtemplate-interest at antlr.org
> Subject: Re: [stringtemplate-interest] Managing template parameters
>
> Hi  Nathan,
>
> Yes, in general I am very much opposed to dynamic scoping. In the
> template world, it makes a huge amount of sense. Templates are very  
> dynamic
> creatures and our combined willy-nilly into large, nested trees of sub
> templates. I agree, however, that like we do with parameters, it  
> could be
> useful to say "heh,I'm going to reference this dynamically scoped
> variable... if it does not exist when I'm evaluated, throw an  
> exception".
> sort of like
>
> foo(a,b) uses title ::= "<a> <b> are parameters, <title> is from  
> above"
>
> Is that what you're talking about?
>
> Ter
>
> On Nov 14, 2008, at 10:10 AM, Nathan Ward wrote:
>
>> Terence,
>>
>> I got this working. My code is included below in case it would be of
>> use to someone else. I would think this would be a common problem
>> because I would think it is pretty common for template parameters to
>> become "tramp data" as Meiler Page-Jones defined in the book
>> Structured Systems Design many years ago (i.e. passing parameters
>> around for use in code that is called later down the line.
>>
>> I also think there is an interesting StringTemplate design issue
>> here... The solution described in the Meiler Page-Jones book was to
>> use "Information Hiding" is similar to using object-oriented design
>> but was before OOD. I had done this kind of thing when programming in
>> C where I would group data and processing (i.e. C functions) in the
>> same file. The variables defined at the top of the file where like
>> object attributes. Not exactly OO, but not bad when programming in C.
>>
>> Given that StringTemplate is designed with a syntax that encourages
>> good template design, I would think that implicit access to variables
>> like I am now doing should not be allowed, but an alternative should
>> be provided by allowing template groups to accept parameters. This
>> would be similar to an object having instance member variables. This
>> makes the intension to share data across templates more explicit and
>> help the template designer think about if the data really should be
>> shared this way or should be treated as formal parameters. This would
>> also eliminate the need for me to create this temporary template and
>> template group for testing purposes.
>>
>> Shared.stg:
>>
>> // Implicit variable references: screen
>> screenElementResourceBundleKey(screenElement, screenElementType) ::=
>> <<
>> <formClassName(screen)>.<screenElementType>.<screenElement.text>.Text
>>>>
>>
>>
>> SharedTemplateTestCase.java:
>>
>>   public void testScreenElementResourceBundleKey() {
>>
>>       Screen screen = new Screen();
>>       screen.setName("MY_SCREEN");
>>
>>       Button button = new Button();
>>       button.setText("MyButtonText");
>>
>>       super.setTemplateAttribute("screen", screen);
>>       super.setTemplateAttribute("screenElement", button);
>>       super.setTemplateAttribute("screenElementType", "Button");
>>       String templateString =
>> super.executeTemplateWithImplicitVariables(
>>               templateGroup, templateGroup,
>> "screenElementResourceBundleKey");
>>       super.logTemplateOutput(templateString);
>>       TestCase.assertEquals("MyScreenForm.Button.MyButtonText.Text",
>> templateString);
>>
>>   }
>>
>> BaseTemplateTestCase.java:
>>
>>   /**
>>    * Use this method to test templates that use one or more
>> <i>implicit variables</i>
>>    * rather than using only formal parameters. Implicit variables
>> should be used only
>>    * in cases where the immediate template doesn't need the parameter
>> other than to
>>    * pass it to other templates d several levels down in the template
>> calling chain.
>>    *
>>    * This method execute the template given by the templateName
>> parameter from a temporary
>>    * template that this method creates in the template group so that
>> the parameters
>>    * previously added by calling setTemplateAttribute() method will
>> be accessible to
>>    * the template under test.
>>    *
>>    * If the template under test does not use implicit variables,
>>    * (i.e. only uses formal parameters), then the StringTemplate API
>> can be used directly
>>    * rather than using this method.
>>    *
>>    * @param rootTemplateGroup The rootTemplateGroup in the template
>> group inheritance hierarchy
>>    * for the template group that the template under test is in. If
>> the target template group
>>    * does not inherit from another template group, then just pass the
>> target template group
>>    * as this parameter and also pass the same template group as the
>> targetTemplateGroup parameter.
>>    * @param targetTemplateGroup The template group in which the
>> template under test is defined.
>>    * @param templateName The name of the template under test.
>>    * @return
>>    */
>>   public String
>> executeTemplateWithImplicitVariables(StringTemplateGroup
>> rootTemplateGroup,
>>           StringTemplateGroup targetTemplateGroup, String
>> templateName) {
>>
>>       StringBuilder temporaryTemplateGroup = new StringBuilder();
>>       temporaryTemplateGroup.append("group temp;");
>>       temporaryTemplateGroup.append(newline);
>>       temporaryTemplateGroup.append("aTemplate(");
>>       boolean notFirst = false;
>>       for (final String parmName : parms.keySet()) {
>>           if (notFirst) {
>>               temporaryTemplateGroup.append(", ");
>>           }
>>           else {
>>               notFirst = true;
>>           }
>>           temporaryTemplateGroup.append(parmName);
>>       }
>>       temporaryTemplateGroup.append(") ::= <<");
>>       temporaryTemplateGroup.append(newline);
>>       temporaryTemplateGroup.append("<");
>>       temporaryTemplateGroup.append(templateName);
>>       temporaryTemplateGroup.append("(...) >");
>>       temporaryTemplateGroup.append(newline);
>>       temporaryTemplateGroup.append(">>");
>>
>>       String temporaryTemplateGroupString =
>> temporaryTemplateGroup.toString();
>>
>>       StringTemplateGroup newParentGroup = new
>> StringTemplateGroup(new StringReader(
>>               temporaryTemplateGroupString));
>>
>>       // Make the rootTemplateGroup inherit from the newParentGroup
>> that we created
>>       // from temporaryTemplateGroupString
>>       rootTemplateGroup.setSuperGroup(newParentGroup);
>>
>>       // Get an instance of the temporary template that we have
>> created named aTemplate
>>       // from the targetTemplateGroup. Important that we get the
>> instance from the targetTemplateGroup
>>       // rather than directly from the newParentGroup template so
>> that the template has access to
>>       // all other templates in the template group inheritance
>> hierarchy.
>>       StringTemplate template =
>> targetTemplateGroup.getInstanceOf("aTemplate");
>>
>>       for (final Map.Entry<String, Object> entry :
>> parms.entrySet()) {
>>           template.setAttribute(entry.getKey(), entry.getValue());
>>       }
>>       String templateString = template.toString();
>>       return templateString;
>>   }
>>
>>   public void setTemplateAttribute(String parmName, Object value) {
>>
>>       this.parms.put(parmName, value);
>>   }
>>
>> -----Original Message-----
>> From: Terence Parr [mailto:parrt at cs.usfca.edu]
>> Sent: Thursday, November 13, 2008 5:58 PM
>> To: Nathan Ward
>> Cc: stringtemplate-interest at antlr.org
>> Subject: Re: [stringtemplate-interest] Managing template parameters
>>
>>
>> On Nov 13, 2008, at 11:50 AM, Nathan Ward wrote:
>>
>>> I'm aware of that, but how can I make a JUnit test for the
>>> subtemplate if it uses an attribute that is not passed as a formal
>>> parameter?
>>> Hmmm, I guess I can create a template inline in my test code that
>>> uses the template that I'm testing, which is a string group template
>>> file.
>>> I'll try that. Thanks!
>>
>> That'll work. :)
>> Ter
>>
>>
>
>
>
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org:8080/mailman/listinfo/stringtemplate-interest


From parrt at cs.usfca.edu  Mon Dec  8 10:55:27 2008
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon, 8 Dec 2008 10:55:27 -0800
Subject: [stringtemplate-interest] Utility to show "template hierarchy"?
In-Reply-To: <821F37C6338A4198A502B1622D064F7D@nwardlt>
References: <821F37C6338A4198A502B1622D064F7D@nwardlt>
Message-ID: <766D2C07-D65D-4C7B-97F9-77384A2A968F@cs.usfca.edu>


On Nov 25, 2008, at 11:52 AM, Nathan Ward wrote:

> I thought I saw a utility on the StringTemplate or ANTLR websites a  
> couple of weeks ago that would show dependencies between  
> StringTemplates. However, I was just now looking for it, but I can't  
> seem to find it. Anyone recall anything like this?

Not sure what exactly you are talking about, but ST has some debug  
string methods that try to print interesting data out. There is also  
that graphic widget that displays the template hierarchy.

Ter

From parrt at cs.usfca.edu  Mon Dec  8 10:56:24 2008
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon, 8 Dec 2008 10:56:24 -0800
Subject: [stringtemplate-interest] suggestion for a new option 'empty='
In-Reply-To: <290958.38002.qm@web33908.mail.mud.yahoo.com>
References: <290958.38002.qm@web33908.mail.mud.yahoo.com>
Message-ID: <6BDDC970-CC28-47BC-BA98-E55A92E4BA46@cs.usfca.edu>

added

http://www.antlr.org:8888/browse/ST-47

Thanks,
ter

On Nov 26, 2008, at 11:57 AM, Jasper Roel wrote:

> After a small discussion with Terence about this, here is a (new?)  
> idea for StringTemplate;
>
> In addition to the 'null=""' option for any given variable, it might  
> be (is) useful to have a 'empty=' parameter.
>
> Currently we can use lazy eval for this, as the following example:
> $if( (msg.subject) )$
>     $msg.subject$
> $else$
>     [no subject]
> $endif$
>
> OR (if it's just a null check):
>
> $msg.subject;null="[no subject]"$
>
> It would be nice to have a way to say:
>
> $msg.subject;null="[null value]";empty="[empty value]"$
>
> It's debatable if the 'empty=' parameter should also check for null  
> pointers. If it does, we can skip the 'null=' part,
> and end up with $msg.subject;empty="[empty value]"$ (but keep the  
> 'null=' part if we want to.
>
> Some basic ideas for what is actually empty:
> String empty = "";
> int empty = 0;
> Map/List(Collection) with .length()/.size() == 0
>
>
> - Jasper
>
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org:8080/mailman/listinfo/stringtemplate-interest


From parrt at cs.usfca.edu  Mon Dec  8 10:58:11 2008
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon, 8 Dec 2008 10:58:11 -0800
Subject: [stringtemplate-interest] Managing "type specific" subtemplates
In-Reply-To: <66B10DFC5BF749E38631FE9169B5956E@nwardlt>
References: <66B10DFC5BF749E38631FE9169B5956E@nwardlt>
Message-ID: <E3DA826D-6DF0-437C-93E3-3676E6381491@cs.usfca.edu>


On Dec 1, 2008, at 12:45 PM, Nathan Ward wrote:

> Any suggestions for how to handle case where a different subtemplate  
> should be used depending on the type of a given model object? Is it  
> reasonable to use a Map to determine the subtemplate to use for this  
> type of situation?

Sure. or even just set an attribute to the template name and then use  
(name)().

Ter

From parrt at cs.usfca.edu  Mon Dec  8 11:01:27 2008
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon, 8 Dec 2008 11:01:27 -0800
Subject: [stringtemplate-interest] Template Group Organization
In-Reply-To: <0BD142D39229495A864B5115FF14BEF2@nwardlt>
References: <0BD142D39229495A864B5115FF14BEF2@nwardlt>
Message-ID: <9B1DC9A6-DFE2-4D37-8F45-37A3FFBFA71E@cs.usfca.edu>


On Dec 5, 2008, at 6:09 AM, Nathan Ward wrote:

> Are there any typical usage patterns or best practices for "template  
> group organization?" I haven't seen much said about this.
>
> I believe the options supported by the StringTemplate API is to  
> either treat a set of directories as a template group in which case  
> each file within that directory or in a subdirectory as a template.  
> Template Group Files are not allowed in this case. The other option  
> is to treat a single .stg file as a template group. In this case, a  
> file can contain multiple templates.

When I rebuild ST, I'm going to fix this artifact of how ST grew.  
Directories full of templates and .stg files will be uniform. A group  
file will look like a directory of templates.

> I'm working on generating files for a Java web application including  
> JSPs, Struts Action classes, form classes, resource bundle files,  
> etc. What I've done so far is to use Template Group Files with a  
> template group file for each target file, e.g. JSP.stg,  
> ActionClass.stg, ApplicationResourcesProperties.stg. Each of these  
> template groups have a number of templates specific to a particular  
> target output file. However, there are several small templates that  
> each of these template groups need to share. What I've done so far  
> is to make a Common.stg and use the StringTemplate Java API to  
> configure the output file specific template groups inherit from this  
> template group, e.g. the JSP string template group inherits from  
> Common string template group.
>
> I'm wondering if there is a better way to share templates between  
> template groups, but still be able to use template group files so  
> that I can group closely related templates into a file.

My guess is that you could use a group loader to look in one directory  
or group first and then another, simulating inheritance.

> Inheritance doesn't seem to be the best approach to this issue, but  
> currently it looks like it is the only choice. This also reduces the  
> clarity of the templates in some cases. For example, if a template  
> named resetButtonAction(button) refers to a template named  
> msgKeyTag(msgKey=button.name) where the msgKeyTag template is  
> inherited from Common.stg it isn't clear in the code that this  
> template is not defined in JSP.stg. A developer

Yes, but isn't that true in programming languages with classes? If you  
call foo(), you know that it might be from a superclass.

> I'd love to hear how other people organize templates into template  
> groups and how you organize the template group files. As it stands,  
> it seems to me that StringTemplate should allow nested template  
> groups so that I could specify a top-level directory as a template  
> group and then use template group files in subdirectories under that  
> base directory. I'd also like to be able to refer to a template in a  
> different template group with a syntax like

Yep, I would like to make this more consistent.

THanks for the thought and good ideas.
Ter

From nward at resqsoft.com  Tue Dec  9 10:55:50 2008
From: nward at resqsoft.com (Nathan Ward)
Date: Tue, 9 Dec 2008 13:55:50 -0500
Subject: [stringtemplate-interest] Managing "type specific" subtemplates
In-Reply-To: <E3DA826D-6DF0-437C-93E3-3676E6381491@cs.usfca.edu>
References: <66B10DFC5BF749E38631FE9169B5956E@nwardlt>
	<E3DA826D-6DF0-437C-93E3-3676E6381491@cs.usfca.edu>
Message-ID: <A5FAC9B666C84A4CB40025F40A059214@nwardlt>


> Sure. or even just set an attribute to the template name and then use  
(name)().

That only works if there is only one case in the templates where there are
type specific subtemplates. I am ending up with several templates that type
specific and are referenced in various other templates. Hence, looks like
the way to go is a simple template map. There doesn't seem to be much other
choice with in StringTemplate, but I think this is fine. I'm basically using
a template map to implement a "case/switch" construct, but I very much
appreciate that StringTemplate enforces separation between model and view.
So, this is a small price to pay.

   Nathan

-----Original Message-----
From: Terence Parr [mailto:parrt at cs.usfca.edu] 
Sent: Monday, December 08, 2008 1:58 PM
To: Nathan Ward
Cc: stringtemplate-interest at antlr.org
Subject: Re: [stringtemplate-interest] Managing "type specific" subtemplates


On Dec 1, 2008, at 12:45 PM, Nathan Ward wrote:

> Any suggestions for how to handle case where a different subtemplate  
> should be used depending on the type of a given model object? Is it  
> reasonable to use a Map to determine the subtemplate to use for this  
> type of situation?

Sure. or even just set an attribute to the template name and then use  
(name)().

Ter



From parrt at cs.usfca.edu  Tue Dec  9 13:48:05 2008
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue, 9 Dec 2008 13:48:05 -0800
Subject: [stringtemplate-interest] Managing "type specific" subtemplates
In-Reply-To: <A5FAC9B666C84A4CB40025F40A059214@nwardlt>
References: <66B10DFC5BF749E38631FE9169B5956E@nwardlt>
	<E3DA826D-6DF0-437C-93E3-3676E6381491@cs.usfca.edu>
	<A5FAC9B666C84A4CB40025F40A059214@nwardlt>
Message-ID: <F1C190EA-EF73-4958-A23C-BDA9F10869F4@cs.usfca.edu>


On Dec 9, 2008, at 10:55 AM, Nathan Ward wrote:

>
>> Sure. or even just set an attribute to the template name and then use
> (name)().
>
> That only works if there is only one case in the templates where  
> there are
> type specific subtemplates. I am ending up with several templates  
> that type
> specific and are referenced in various other templates. Hence, looks  
> like
> the way to go is a simple template map.

yep, that works well then.

> There doesn't seem to be much other
> choice with in StringTemplate, but I think this is fine. I'm  
> basically using
> a template map to implement a "case/switch" construct, but I very much
> appreciate that StringTemplate enforces separation between model and  
> view.
> So, this is a small price to pay.

Yep, ST is occasionally annoying but is the price we pay for strict  
separation. :)

Ter

From Igor.Stolbov at kaspersky.com  Thu Dec 11 04:54:05 2008
From: Igor.Stolbov at kaspersky.com (Igor Stolbov)
Date: Thu, 11 Dec 2008 15:54:05 +0300
Subject: [stringtemplate-interest] How to strip() elements from an attribute
 by a condition, not just null values
Message-ID: <6201B34852B8BF4EB1C73547F327EB3D3A68349F03@KLMAIL-CCR.avp.ru>

Hi!

Would anyone kindly help me out with the following problem:

I have a multi-valued attribute. I want to delete all values from that attribute that do not meet certain condition. How can I do that with String Templates?

For example, let's say I have an array of KeyValuePair<int, bool>. The Key is a number and the Value is true for all odd Keys. I want to write a template that, being applied to the attribute with multiple values of KeyValuePair<int, bool>, would produce a comma-separated list of only odd Keys.

Here's a simple program:

using System;
using Antlr.StringTemplate;

using KVP = System.Collections.Generic.KeyValuePair<int, bool>;

namespace ConsoleApplication3
{
    class Program
    {
        static void Main(string[] args)
        {
            var numbers = new KVP[] {
                new KVP(1, true),
                new KVP(2, false),
                new KVP(3, true),
                new KVP(4, false),
                new KVP(5, true)
            };

            var template = "$numbers:{$if(it.Value)$$it.Key$$endif$}; separator=\",\"$";
            var onlyEvenNumbers = new StringTemplate(template);
            onlyEvenNumbers.SetAttribute("numbers", numbers);
            Console.Out.WriteLine(onlyEvenNumbers.ToString());
        }
    }
}


Na?ve approach would be to use

                                {$if(it.Value)$$it.Key$$endif$}

template, so that only odd keys would get propagated. Good enough, but there would still remain all extra commas that separate even keys, even though the keys themselves get stripped by the template.  So, the output of the program above would be

1,,3,,5

while I need to get

1,3,5


Another approach would be to transform the initial multi-value attribute to another multi-value attribute so that all even values would become null in that new attribute, and then use strip() to filter out all those nulls from it. The problem is that I do not know how to express such transformation in terms of String Templates.

Any suggestions?

Thanks!
Igor Stolbov
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org:8080/pipermail/stringtemplate-interest/attachments/20081211/6724e4e2/attachment.html 

From parrt at cs.usfca.edu  Thu Dec 11 10:21:34 2008
From: parrt at cs.usfca.edu (Terence Parr)
Date: Thu, 11 Dec 2008 10:21:34 -0800
Subject: [stringtemplate-interest] How to strip() elements from an
	attribute by a condition, not just null values
In-Reply-To: <6201B34852B8BF4EB1C73547F327EB3D3A68349F03@KLMAIL-CCR.avp.ru>
References: <6201B34852B8BF4EB1C73547F327EB3D3A68349F03@KLMAIL-CCR.avp.ru>
Message-ID: <7AF6343D-4B6E-41F2-9CE1-C057A5EEEC10@cs.usfca.edu>


On Dec 11, 2008, at 4:54 AM, Igor Stolbov wrote:
>             var template = "$numbers:{$if(it.Value)$$it.Key$$endif 
> $}; separator=\",\"$";
>             var onlyEvenNumbers = new StringTemplate(template);
>             onlyEvenNumbers.SetAttribute("numbers", numbers);
>             Console.Out.WriteLine(onlyEvenNumbers.ToString());
>         }
>     }
> }
>
>
> Na?ve approach would be to use
>
>                                 {$if(it.Value)$$it.Key$$endif$}
>
> template, so that only odd keys would get propagated. Good enough,  
> but there would still remain all extra commas that separate even  
> keys, even though the keys themselves get stripped by the template.   
> So, the output of the program above would be
>
> 1,,3,,5
>
> while I need to get
>
> 1,3,5

I'm surprised that doesn't work!  Hmm...try $else$$endif$ also to see  
if that makes the value go away.

Also try $strip(numbers:{$if(it.Value)$$it.Key$$endif$})$ to see if  
that works.

> Another approach would be to transform the initial multi-value  
> attribute to another multi-value attribute so that all even values  
> would become null in that new attribute, and then use strip() to  
> filter out all those nulls from it. The problem is that I do not  
> know how to express such transformation in terms of String Templates.
>

I hope the above does that.

Ter


From parrt at antlr.org  Thu Dec 18 11:23:39 2008
From: parrt at antlr.org (Terence Parr)
Date: Thu, 18 Dec 2008 11:23:39 -0800
Subject: [stringtemplate-interest] antlr.org going down for a few days
Message-ID: <CD261428-1620-45D3-AFA9-0335BDB0BFE4@antlr.org>

going to be rebuilding it with latest software and consolidating  
server software.

Ter

From parrt at cs.usfca.edu  Fri Dec 19 20:00:40 2008
From: parrt at cs.usfca.edu (Terence Parr)
Date: Fri, 19 Dec 2008 20:00:40 -0800
Subject: [stringtemplate-interest] will fix tomorrow
Message-ID: <76C20580-80B8-4FD2-975C-8D5E9908E064@cs.usfca.edu>

howdy. ALMOST got it working but not quite. must go home. left it down  
to avoid corruption.  will get it back tomorrow for sure.
Ter

From parrt at antlr.org  Sat Dec 20 15:29:11 2008
From: parrt at antlr.org (Terence Parr)
Date: Sat, 20 Dec 2008 15:29:11 -0800
Subject: [stringtemplate-interest] ok, leaving site up for now
Message-ID: <CBC9675C-8D4A-410B-91A1-17C1E1B96A4B@antlr.org>

ST and antlr2.org are messed up and parr.us is too.

heh, added favicon.ico too. :)

Will fix rest tomorrow. non v3 downloads are hosed at moment for  
example.

please report other weird behavior.

Ter

From parrt at cs.usfca.edu  Sun Dec 21 14:45:25 2008
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sun, 21 Dec 2008 14:45:25 -0800
Subject: [stringtemplate-interest] antlr.org, stringtemplate.org
Message-ID: <60FC4377-4483-47B2-B26C-01164A809A73@cs.usfca.edu>

Should be back to normal now. Let me know if you have trouble.
Ter

From mike at mpagel.de  Mon Dec 22 14:18:25 2008
From: mike at mpagel.de (Mike Pagel)
Date: Mon, 22 Dec 2008 23:18:25 +0100
Subject: [stringtemplate-interest] Meaning of @ syntax for templates?
Message-ID: <49501231.4090008@mpagel.de>

An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20081222/d8d9af7c/attachment.html 

From parrt at cs.usfca.edu  Mon Dec 22 16:32:01 2008
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon, 22 Dec 2008 16:32:01 -0800
Subject: [stringtemplate-interest] ok, sites should all be back to normal
Message-ID: <8948769B-5FEE-4B10-941C-965936E5242F@cs.usfca.edu>

major surgery done inside but should all be working properly now. :)  
sites, wiki, etc... should be ok. please let me know if not.

Ter

From parrt at cs.usfca.edu  Mon Dec 22 16:37:12 2008
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon, 22 Dec 2008 16:37:12 -0800
Subject: [stringtemplate-interest] Meaning of @ syntax for templates?
In-Reply-To: <49501231.4090008@mpagel.de>
References: <49501231.4090008@mpagel.de>
Message-ID: <07A5FA73-20B4-4845-9878-A8C6A74D3FF0@cs.usfca.edu>


On Dec 22, 2008, at 2:18 PM, Mike Pagel wrote:

> What exactly is the meaning of this style of defining a template in  
> a group:
>
> @outputFile.imports() ::= <<
> ...
> >>
>
> I've seen this in the group file grammar and used in ANTLR templates  
> but I don't think it is explained where I looked... :-) Is this just  
> syntactic sugar to simulate a namespace? I am trying to understand  
> not to criticize...

Hi. these are super great "region" definitions, a finer-grained  
alternative to template inheritance. See

http://www.antlr.org/wiki/display/ST/Template+regions

you will dig it.

Ter

