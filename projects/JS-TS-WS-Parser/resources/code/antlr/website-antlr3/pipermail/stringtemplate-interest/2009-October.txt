From invite+zj4oos42f699 at facebookmail.com  Fri Oct  2 21:52:26 2009
From: invite+zj4oos42f699 at facebookmail.com (Viuha Sundararajan)
Date: Fri, 2 Oct 2009 21:52:26 -0700
Subject: [stringtemplate-interest] Check out my photos on Facebook
Message-ID: <cda8547db165dec2cb9c48222d85ced0@10.16.160.193>

Hi stringtemplate-interest at antlr.org,

I set up a Facebook profile where I can post my pictures, videos and events and I want to add you as a friend so you can see it. First, you need to join Facebook! Once you join, you can also create your own profile.

Thanks,
Viuha

To sign up for Facebook, follow the link below:
http://www.facebook.com/p.php?i=1841533038&k=ZWA434T2VVTF6BD1QAY6XSPU2QIB4X2APPERB&r


stringtemplate-interest at antlr.org was invited to join Facebook by Viuha Sundararajan. If you do not wish to receive this type of email from Facebook in the future, please click on the link below to unsubscribe.
http://www.facebook.com/o.php?k=1396eb&u=100000363971684&mid=130d5b8G5af3262c0464G0G8
Facebook's offices are located at 1601 S. California Ave., Palo Alto, CA 94304.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20091002/fea55d4b/attachment.html 

From parrt at cs.usfca.edu  Tue Oct  6 16:38:57 2009
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue, 6 Oct 2009 16:38:57 -0700
Subject: [stringtemplate-interest] v4 ST
Message-ID: <9EB02BCA-0553-4D6D-98CA-9F50A4B57036@cs.usfca.edu>

heh, to distinguish between v4 and v3, I'm thinkingof using ST not  
StringTemplate for main class. Also using inject (or add) instead of  
setAttribute:

         ST st = new ST("hi, <name>.");
         st.inject("name", "Ter");

Is that ok with people?
Ter

From gwlist at grahamwideman.com  Tue Oct  6 16:55:32 2009
From: gwlist at grahamwideman.com (Graham Wideman)
Date: Tue, 06 Oct 2009 16:55:32 -0700
Subject: [stringtemplate-interest] v4 ST
In-Reply-To: <9EB02BCA-0553-4D6D-98CA-9F50A4B57036@cs.usfca.edu>
Message-ID: <4.1.20091006164913.02c73f08@grahamwideman.com>

Hi Ter,

At 10/6/2009 04:38 PM, Terence Parr wrote:
>heh, to distinguish between v4 and v3, I'm thinkingof using ST not  
>StringTemplate for main class. 

Sounds fine to me, but what happens at v5?  :-)

> Also using inject (or add) instead of setAttribute:

I think "add" or "addAttribute" is a definite improvement over "setAttribute".  I think "inject" is a step in a less-clear direction, because:

a) It fails to leverage what a user understands "add" to mean from other common classes.

b) It suggests that the calling of this method actively causes the info in the args to be "injected" into the finished template's output, when actually all it does is make the information accessible to the template during its later assembly (toString), and might actually have no ultimate effect if the template doesn't refer to it.

-- Graham

From parrt at cs.usfca.edu  Tue Oct  6 16:56:42 2009
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue, 6 Oct 2009 16:56:42 -0700
Subject: [stringtemplate-interest] v4 ST
In-Reply-To: <4.1.20091006164913.02c73f08@grahamwideman.com>
References: <4.1.20091006164913.02c73f08@grahamwideman.com>
Message-ID: <4099293F-0F22-4D4B-8013-265898EB49C3@cs.usfca.edu>


On Oct 6, 2009, at 4:55 PM, Graham Wideman wrote:

> Hi Ter,
>
> At 10/6/2009 04:38 PM, Terence Parr wrote:
>> heh, to distinguish between v4 and v3, I'm thinkingof using ST not
>> StringTemplate for main class.
>
> Sounds fine to me, but what happens at v5?  :-)

ha! still ST :)

>
>> Also using inject (or add) instead of setAttribute:
>
> I think "add" or "addAttribute" is a definite improvement over  
> "setAttribute".  I think "inject" is a step in a less-clear  
> direction, because:
>
> a) It fails to leverage what a user understands "add" to mean from  
> other common classes.
>
> b) It suggests that the calling of this method actively causes the  
> info in the args to be "injected" into the finished template's  
> output, when actually all it does is make the information accessible  
> to the template during its later assembly (toString), and might  
> actually have no ultimate effect if the template doesn't refer to it.

excellent arguments. ok, i'll make it add()

Thanks
Ter

From parrt at cs.usfca.edu  Tue Oct  6 16:58:18 2009
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue, 6 Oct 2009 16:58:18 -0700
Subject: [stringtemplate-interest] v4 ST
In-Reply-To: <4099293F-0F22-4D4B-8013-265898EB49C3@cs.usfca.edu>
References: <4.1.20091006164913.02c73f08@grahamwideman.com>
	<4099293F-0F22-4D4B-8013-265898EB49C3@cs.usfca.edu>
Message-ID: <05D9CA06-CC9D-47CD-A048-3BD40FA3B4B2@cs.usfca.edu>

Actually

st.add("name, "parrt");

might not be as clear as

st.put("name, "parrt");

but will people think it means "replace" instead of add?  I kind of  
like put

what about

st.attr("name, "parrt");


Ter

On Oct 6, 2009, at 4:56 PM, Terence Parr wrote:

>
> On Oct 6, 2009, at 4:55 PM, Graham Wideman wrote:
>
>> Hi Ter,
>>
>> At 10/6/2009 04:38 PM, Terence Parr wrote:
>>> heh, to distinguish between v4 and v3, I'm thinkingof using ST not
>>> StringTemplate for main class.
>>
>> Sounds fine to me, but what happens at v5?  :-)
>
> ha! still ST :)
>
>>
>>> Also using inject (or add) instead of setAttribute:
>>
>> I think "add" or "addAttribute" is a definite improvement over
>> "setAttribute".  I think "inject" is a step in a less-clear
>> direction, because:
>>
>> a) It fails to leverage what a user understands "add" to mean from
>> other common classes.
>>
>> b) It suggests that the calling of this method actively causes the
>> info in the args to be "injected" into the finished template's
>> output, when actually all it does is make the information accessible
>> to the template during its later assembly (toString), and might
>> actually have no ultimate effect if the template doesn't refer to it.
>
> excellent arguments. ok, i'll make it add()
>
> Thanks
> Ter
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest


From zen at freedbms.net  Tue Oct  6 16:58:24 2009
From: zen at freedbms.net (Zenaan Harkness)
Date: Wed, 7 Oct 2009 10:58:24 +1100
Subject: [stringtemplate-interest] v4 ST
In-Reply-To: <9EB02BCA-0553-4D6D-98CA-9F50A4B57036@cs.usfca.edu>
References: <9EB02BCA-0553-4D6D-98CA-9F50A4B57036@cs.usfca.edu>
Message-ID: <20091006235824.GE6516@ip61>

On Tue, Oct 06, 2009 at 04:38:57PM -0700, Terence Parr wrote:
> heh, to distinguish between v4 and v3, I'm thinkingof using ST not  

Ack! I've thought this many times. Nice to see.

> StringTemplate for main class. Also using inject (or add) instead of  
> setAttribute:
> 
>          ST st = new ST("hi, <name>.");
>          st.inject("name", "Ter");

injext is annoying to type, add much easier. My vote for .add

cheers
zenaan

-- 
Homepage: www.SoulSound.net -- Free Australia: www.UPMART.org
Please respect the confidentiality of this email as sensibly warranted.

From jdmitchell at gmail.com  Tue Oct  6 17:22:56 2009
From: jdmitchell at gmail.com (John D. Mitchell)
Date: Tue, 6 Oct 2009 17:22:56 -0700
Subject: [stringtemplate-interest] v4 ST
In-Reply-To: <05D9CA06-CC9D-47CD-A048-3BD40FA3B4B2@cs.usfca.edu>
References: <4.1.20091006164913.02c73f08@grahamwideman.com>
	<4099293F-0F22-4D4B-8013-265898EB49C3@cs.usfca.edu>
	<05D9CA06-CC9D-47CD-A048-3BD40FA3B4B2@cs.usfca.edu>
Message-ID: <50848BAE-EAEF-419B-971F-9D1C99B74F82@gmail.com>

++add()

John

On Oct 6, 2009, at 16:58 , Terence Parr wrote:

> Actually
>
> st.add("name, "parrt");
>
> might not be as clear as
>
> st.put("name, "parrt");
>
> but will people think it means "replace" instead of add?  I kind of
> like put
>
> what about
>
> st.attr("name, "parrt");

From gerald at certiv.net  Tue Oct  6 17:51:12 2009
From: gerald at certiv.net (Gerald Rosenberg)
Date: Tue, 06 Oct 2009 17:51:12 -0700
Subject: [stringtemplate-interest] v4 ST
In-Reply-To: <05D9CA06-CC9D-47CD-A048-3BD40FA3B4B2@cs.usfca.edu>
References: <4.1.20091006164913.02c73f08@grahamwideman.com>
	<4099293F-0F22-4D4B-8013-265898EB49C3@cs.usfca.edu>
	<05D9CA06-CC9D-47CD-A048-3BD40FA3B4B2@cs.usfca.edu>
Message-ID: <200910070051.n970pMNl031156@zinc.newtechlaw.com>

At 04:58 PM 10/6/2009, Terence Parr wrote:
>Actually
>
>st.add("name, "parrt");
>
>might not be as clear as
>
>st.put("name, "parrt");
>
>but will people think it means "replace" instead of add?  I kind of
>like put
>
>what about
>
>st.attr("name, "parrt");

Have to say that I liked "inject" on first impression.  Add, set and 
put all suggest that the data is potentially still accessible, as if 
the template is just a list or map in the model.  Inject reflects the 
conceptual separation: once injected, the template has control.

The term "associate" might be more accurate, but it is weak and 
long.  The term "attr" is less accurate, as the parameters are 
attribute and value. Tuple?


From parrt at cs.usfca.edu  Tue Oct  6 17:54:37 2009
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue, 6 Oct 2009 17:54:37 -0700
Subject: [stringtemplate-interest] v4 ST
In-Reply-To: <4.1.20091006164913.02c73f08@grahamwideman.com>
References: <4.1.20091006164913.02c73f08@grahamwideman.com>
Message-ID: <C3A4624A-CB62-4EC4-9653-3E0E77747C3F@cs.usfca.edu>

I also use "inject" a lot in my papers and book.  hmm...a tough call.
Ter
On Oct 6, 2009, at 4:55 PM, Graham Wideman wrote:

> Hi Ter,
>
> At 10/6/2009 04:38 PM, Terence Parr wrote:
>> heh, to distinguish between v4 and v3, I'm thinkingof using ST not
>> StringTemplate for main class.
>
> Sounds fine to me, but what happens at v5?  :-)
>
>> Also using inject (or add) instead of setAttribute:
>
> I think "add" or "addAttribute" is a definite improvement over  
> "setAttribute".  I think "inject" is a step in a less-clear  
> direction, because:
>
> a) It fails to leverage what a user understands "add" to mean from  
> other common classes.
>
> b) It suggests that the calling of this method actively causes the  
> info in the args to be "injected" into the finished template's  
> output, when actually all it does is make the information accessible  
> to the template during its later assembly (toString), and might  
> actually have no ultimate effect if the template doesn't refer to it.
>
> -- Graham


From gwlist at grahamwideman.com  Tue Oct  6 17:55:23 2009
From: gwlist at grahamwideman.com (Graham Wideman)
Date: Tue, 06 Oct 2009 17:55:23 -0700
Subject: [stringtemplate-interest] v4 ST
In-Reply-To: <05D9CA06-CC9D-47CD-A048-3BD40FA3B4B2@cs.usfca.edu>
References: <4099293F-0F22-4D4B-8013-265898EB49C3@cs.usfca.edu>
	<4.1.20091006164913.02c73f08@grahamwideman.com>
	<4099293F-0F22-4D4B-8013-265898EB49C3@cs.usfca.edu>
Message-ID: <4.1.20091006173810.00d01248@grahamwideman.com>


At 10/6/2009 04:58 PM, Terence Parr wrote:
>Actually
>
>st.add("name, "parrt");
>
>might not be as clear as
>
>st.put("name, "parrt");
>
>but will people think it means "replace" instead of add?  I kind of  
>like put
>
>what about
>
>st.attr("name, "parrt");

Well to me, "put" doesn't describe anything pertinent to ST.  How would you, in english, describe what that method does, using the word "put"?  It "puts" the arguments into the list. We already have more precise and customary words for that: add and append.  

And to conspicuously *not* use those words suggests that add/append is specifically *not* what the method does. Instead, it suggests putting the ST itself, whatever that might mean (eg: onto a stream or something).

Is the resistance to "add" that it's not sufficiently clear in:

myST.add(args)

... what the args are being added to? Perhaps because an ST is not primarily a list or collection?  If so then augment "add" with further description of what aspect of ST the add is adding to... something having the sense of "add this argument to the ST's list of attributes", or for short:

  addAttribute

or addAttrib <--- (but personally the savings in typing is wiped out by the burden of having to remember degree of abbreviation: Attr, Attrib, Att etc)

Using st.attr() I think has the same problem as st.setAttribute... it's not clear that you are adding to the attributes rather then replacing. Also, in java and some other languages, the fact that attr() is deliberately not named either setSomething or add or addSomething suggests that it does not set or add something.

If you're thinking that "add" is too concretely about ST's implementation, then something more along the lines of "associate", "enscope" or "makeAvailable" is more the sense desired?

But... I'm still favoring plain-and-simple add or addAttribute.

-- Graham


From gwlist at grahamwideman.com  Tue Oct  6 18:09:19 2009
From: gwlist at grahamwideman.com (Graham Wideman)
Date: Tue, 06 Oct 2009 18:09:19 -0700
Subject: [stringtemplate-interest] v4 ST
Message-ID: <4.1.20091006180832.055b5fe0@grahamwideman.com>

At 10/6/2009 05:51 PM, Gerald Rosenberg wrote:
>Have to say that I liked "inject" on first impression.  Add, set and 
>put all suggest that the data is potentially still accessible, as if 
>the template is just a list or map in the model.  Inject reflects the 
>conceptual separation: once injected, the template has control.

OK, please correct my understanding if it's wrong:

After the call to setAttribute/add/inject, in general the value that the attribute points to *is* still accessible to the caller, *can* still be changed, and is not actually "injected" into the final string until toString is called. 

Actually I have to admit I'm unsure when setAttribute uses reference semantics and when it uses copy, but at least sometimes it uses reference, and in any case the values are not composed into the final ST toString output until toString is called, as I understand it.

If that's a correct account, then Gerald's discussion is really an argument against "inject" I think, and in favor of ...

>The term "associate" might be more accurate, but it is weak and 
>long.

... which I too mentioned in earlier message, but I agree that it's long and vague.

>  The term "attr" is less accurate, as the parameters are 
>attribute and value. Tuple?

Actually I think the args are name and value which together get composed into the attribute.  Value could be a simple type or a more complex object. So attribute is an object that maps name to value.

-- Graham

From zen at freedbms.net  Tue Oct  6 19:53:45 2009
From: zen at freedbms.net (Zenaan Harkness)
Date: Wed, 7 Oct 2009 13:53:45 +1100
Subject: [stringtemplate-interest] v4 ST
In-Reply-To: <4.1.20091006180832.055b5fe0@grahamwideman.com>
References: <4.1.20091006180832.055b5fe0@grahamwideman.com>
Message-ID: <20091007025345.GF6516@ip61>

On Tue, Oct 06, 2009 at 06:09:19PM -0700, Graham Wideman wrote:
> At 10/6/2009 05:51 PM, Gerald Rosenberg wrote:
> >Have to say that I liked "inject" on first impression.  Add, set and 
> >put all suggest that the data is potentially still accessible, as if 
> >the template is just a list or map in the model.  Inject reflects the 
> >conceptual separation: once injected, the template has control.
> 
> OK, please correct my understanding if it's wrong:
> 
> After the call to setAttribute/add/inject, in general the value that the attribute points to *is* still accessible to the caller, *can* still be changed, and is not actually "injected" into the final string until toString is called. 
> 
> Actually I have to admit I'm unsure when setAttribute uses reference semantics and when it uses copy, but at least sometimes it uses reference, and in any case the values are not composed into the final ST toString output until toString is called, as I understand it.
> 
> If that's a correct account, then Gerald's discussion is really an argument against "inject" I think, and in favor of ...
> 
> >The term "associate" might be more accurate, but it is weak and 
> >long.
> 
> ... which I too mentioned in earlier message, but I agree that it's long and vague.
> 
> >  The term "attr" is less accurate, as the parameters are 
> >attribute and value. Tuple?
> 
> Actually I think the args are name and value which together get composed into the attribute.  Value could be a simple type or a more complex object. So attribute is an object that maps name to value.

Perhaps semantically, myST.appendAttribute(myAtt) might be most
'accurate' (for some definition of accurate).

When I describe ST to others, it goes:

1) create ST
2) add attributes
3) call toString

Because, like, you know, "you have to add your attributes to the template
engine, _before_ calling toString".

Add is the word I use in general conversation, ie "lay usage".

Add is easy to remember.

There is precedent for add in java libs (can be said of put and others
too though).

Everything else (except perhaps addAttribute) is not as simple.

If there were two entirely different classes of things being added to
ST, then perhaps I might encourage addAttribute, to distinguish from
addOtherImportantThingWhichIsDefinitelyNotAnAttribute, and
notwithstanding, I would still advocate for .add(..) to be an alias of
addAttribute (common case, short, etc).

Hopefully my vote is clear :)

cheers
zenaan

-- 
Homepage: www.SoulSound.net -- Free Australia: www.UPMART.org
Please respect the confidentiality of this email as sensibly warranted.

From sharwell at pixelminegames.com  Wed Oct  7 11:05:24 2009
From: sharwell at pixelminegames.com (Sam Harwell)
Date: Wed, 7 Oct 2009 13:05:24 -0500
Subject: [stringtemplate-interest] v4 ST
In-Reply-To: <9EB02BCA-0553-4D6D-98CA-9F50A4B57036@cs.usfca.edu>
References: <9EB02BCA-0553-4D6D-98CA-9F50A4B57036@cs.usfca.edu>
Message-ID: <86403CA0939415448BCCB83855EFE09A0123F4B3@Bloodymary.ironwillgames.com>

Why not call it Template? It's much clearer than ST, and since it's in a
stringtemplate namespace it's clear what Template means.

Sam

-----Original Message-----
From: stringtemplate-interest-bounces at antlr.org
[mailto:stringtemplate-interest-bounces at antlr.org] On Behalf Of Terence
Parr
Sent: Tuesday, October 06, 2009 6:39 PM
To: stringtemplate-interest Template
Subject: [stringtemplate-interest] v4 ST

heh, to distinguish between v4 and v3, I'm thinkingof using ST not  
StringTemplate for main class. Also using inject (or add) instead of  
setAttribute:

         ST st = new ST("hi, <name>.");
         st.inject("name", "Ter");

Is that ok with people?
Ter
_______________________________________________
stringtemplate-interest mailing list
stringtemplate-interest at antlr.org
http://www.antlr.org/mailman/listinfo/stringtemplate-interest

From gerald at certiv.net  Wed Oct  7 11:20:19 2009
From: gerald at certiv.net (Gerald Rosenberg)
Date: Wed, 07 Oct 2009 11:20:19 -0700
Subject: [stringtemplate-interest] v4 ST
In-Reply-To: <4.1.20091006180832.055b5fe0@grahamwideman.com>
References: <4.1.20091006180832.055b5fe0@grahamwideman.com>
Message-ID: <200910071825.n97IPKqW004054@zinc.newtechlaw.com>

At 06:09 PM 10/6/2009, Graham Wideman wrote:
>At 10/6/2009 05:51 PM, Gerald Rosenberg wrote:
> >Have to say that I liked "inject" on first impression.  Add, set and
> >put all suggest that the data is potentially still accessible, as if
> >the template is just a list or map in the model.  Inject reflects the
> >conceptual separation: once injected, the template has control.
>
>OK, please correct my understanding if it's wrong:
>
>After the call to setAttribute/add/inject, in general the value that 
>the attribute points to *is* still accessible to the caller, *can* 
>still be changed, and is not actually "injected" into the final 
>string until toString is called.
>
>Actually I have to admit I'm unsure when setAttribute uses reference 
>semantics and when it uses copy, but at least sometimes it uses 
>reference, and in any case the values are not composed into the 
>final ST toString output until toString is called, as I understand it.
>
>If that's a correct account, then Gerald's discussion is really an 
>argument against "inject" I think, ...

Well, just to be clear on my thinking ;)

List b = new ArrayList();
b.add("Ter");
b.add("Graham");

// Inject (or whatever) is conceptually one way
ST.inject("names", b);

// Even though you can do this before calling toString(), it really
// isn't changing the established association of "names" with b.
b.add("Gerald");

Yes, I do realize that there is a convenience 
StringTemplate#getAttribute, but using that basically allows the view 
(or content generator) to act as a data store for the model.  While 
there may be practical reasons for having that method, it does blur 
the separation of concerns.  If getAttribute is changed to "get" (to 
parallel a change in setAttribute to add or put), will it tend to 
reinforce use of the view as a model data store?  The complement of 
"inject" might best be "read".


From jimi at temporal-wave.com  Wed Oct  7 12:06:44 2009
From: jimi at temporal-wave.com (Jim Idle)
Date: Wed, 07 Oct 2009 12:06:44 -0700
Subject: [stringtemplate-interest] Packaging C# StringTemplate in an assembly
Message-ID: <b55007f846b64144b21da41f8c0d9625@temporal-wave.com>

So I can't find any example (maybe I am blind) of how to add a .stg file into my C# project so that it goes in to the assembly and can be loaded at runtime. Anyone got an example of loading from the .Net assembly?

 

Cheers,

 

Jim



-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20091007/6352cfc9/attachment.html 

From parrt at cs.usfca.edu  Wed Oct  7 12:28:58 2009
From: parrt at cs.usfca.edu (Terence Parr)
Date: Wed, 7 Oct 2009 12:28:58 -0700
Subject: [stringtemplate-interest] mapping templates
Message-ID: <1D812D01-7428-4A83-9157-C81A4F3D13F3@cs.usfca.edu>

Hi, there is a syntax bugaboo in ST v3.

<names:bold()> means apply bold to each element of names but t=foo()  
in an arg list or wherever means invoke foo and put ST into t.  Seems  
like foo should be a template name and foo() should be an invocation.   
That would imply we'd chnage to:

<names:bold>

Makes more sense if you ask me.  Other thoughts?

Ter

From sharwell at pixelminegames.com  Wed Oct  7 16:28:33 2009
From: sharwell at pixelminegames.com (Sam Harwell)
Date: Wed, 7 Oct 2009 18:28:33 -0500
Subject: [stringtemplate-interest] mapping templates
In-Reply-To: <1D812D01-7428-4A83-9157-C81A4F3D13F3@cs.usfca.edu>
References: <1D812D01-7428-4A83-9157-C81A4F3D13F3@cs.usfca.edu>
Message-ID: <86403CA0939415448BCCB83855EFE09A0123F4C8@Bloodymary.ironwillgames.com>

This is the general form:

<{sequence}:{template taking one argument}>

If the template is a template named "bold" declared elsewhere, then the
form <names:bold> makes much more sense, especially since "bold()" would
imply that the template takes no arguments.

Sam

-----Original Message-----
From: stringtemplate-interest-bounces at antlr.org
[mailto:stringtemplate-interest-bounces at antlr.org] On Behalf Of Terence
Parr
Sent: Wednesday, October 07, 2009 2:29 PM
To: stringtemplate-interest Template
Subject: [stringtemplate-interest] mapping templates

Hi, there is a syntax bugaboo in ST v3.

<names:bold()> means apply bold to each element of names but t=foo()  
in an arg list or wherever means invoke foo and put ST into t.  Seems  
like foo should be a template name and foo() should be an invocation.   
That would imply we'd chnage to:

<names:bold>

Makes more sense if you ask me.  Other thoughts?

Ter
_______________________________________________
stringtemplate-interest mailing list
stringtemplate-interest at antlr.org
http://www.antlr.org/mailman/listinfo/stringtemplate-interest

From parrt at cs.usfca.edu  Wed Oct  7 16:30:52 2009
From: parrt at cs.usfca.edu (Terence Parr)
Date: Wed, 7 Oct 2009 16:30:52 -0700
Subject: [stringtemplate-interest] mapping templates
In-Reply-To: <86403CA0939415448BCCB83855EFE09A0123F4C8@Bloodymary.ironwillgames.com>
References: <1D812D01-7428-4A83-9157-C81A4F3D13F3@cs.usfca.edu>
	<86403CA0939415448BCCB83855EFE09A0123F4C8@Bloodymary.ironwillgames.com>
Message-ID: <2476B3B3-B3AD-4850-B807-647CF87A1F3B@cs.usfca.edu>

yeah, that's what i'm thinking.  f() really means invoke and we're not  
invoking.  In fact, even names:bold doesn't execute bold until later  
when we write out the results.

Core of new version is working.  Sooooo much simpler. one grammar, for  
example, not multiple to parse templates.  Bytecode compiler / interp  
are simple.

I should probably cut this version out and use as a template DSL  
example w/o complexity of full ST :)

Ter

On Oct 7, 2009, at 4:28 PM, Sam Harwell wrote:

> This is the general form:
>
> <{sequence}:{template taking one argument}>
>
> If the template is a template named "bold" declared elsewhere, then  
> the
> form <names:bold> makes much more sense, especially since "bold()"  
> would
> imply that the template takes no arguments.
>
> Sam
>
> -----Original Message-----
> From: stringtemplate-interest-bounces at antlr.org
> [mailto:stringtemplate-interest-bounces at antlr.org] On Behalf Of  
> Terence
> Parr
> Sent: Wednesday, October 07, 2009 2:29 PM
> To: stringtemplate-interest Template
> Subject: [stringtemplate-interest] mapping templates
>
> Hi, there is a syntax bugaboo in ST v3.
>
> <names:bold()> means apply bold to each element of names but t=foo()
> in an arg list or wherever means invoke foo and put ST into t.  Seems
> like foo should be a template name and foo() should be an invocation.
> That would imply we'd chnage to:
>
> <names:bold>
>
> Makes more sense if you ask me.  Other thoughts?
>
> Ter
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest


From zen at freedbms.net  Wed Oct  7 16:35:32 2009
From: zen at freedbms.net (Zenaan Harkness)
Date: Thu, 8 Oct 2009 10:35:32 +1100
Subject: [stringtemplate-interest] v4 ST
In-Reply-To: <200910071825.n97IPKqW004054@zinc.newtechlaw.com>
References: <4.1.20091006180832.055b5fe0@grahamwideman.com>
	<200910071825.n97IPKqW004054@zinc.newtechlaw.com>
Message-ID: <20091007233532.GB4160@ip61>

> >Actually I have to admit I'm unsure when setAttribute uses reference 
> >semantics and when it uses copy, but at least sometimes it uses 
> >reference, and in any case the values are not composed into the 
> >final ST toString output until toString is called, as I understand it.
> >
> >If that's a correct account, then Gerald's discussion is really an 
> >argument against "inject" I think, ...
> 
> Well, just to be clear on my thinking ;)
> 
> List b = new ArrayList();
> b.add("Ter");
> b.add("Graham");
> 
> // Inject (or whatever) is conceptually one way
> ST.inject("names", b);

I don't see why using .add here would cause confusion, or be a problem.
Add elements to an arraylist, add arraylist to ST. Sounds pretty simple
to me...

Whereas, with "inject" I say 'ok, I add elements to my list, now I want
to add the list to my STemplate.. what was that method name again?'


> // Even though you can do this before calling toString(), it really
> // isn't changing the established association of "names" with b.
> b.add("Gerald");
> 
> Yes, I do realize that there is a convenience 
> StringTemplate#getAttribute,

Ahh yes, .getAttribute. Well then, .putAttribute is the canonical
complement!

Symmetry demands .putAttribute as matching .getAttribute, if nothing
else. If there were .get, .put would be needed.

Simplicity/ ease of use, I say demands .add. About the only alternative
I could vote for is .put, as an abbreviation of .putAttribute, and I
imagine if we got into the debate, it might be hard to argue against
that. Notwithstanding, my feeling is that .add is more consistent with
the rest of the java api, as per List class demonstrated above.


> but using that basically allows the view 
> (or content generator) to act as a data store for the model.  While 
> there may be practical reasons for having that method, it does blur 
> the separation of concerns.  If getAttribute is changed to "get" (to 
> parallel a change in setAttribute to add or put), will it tend to 
> reinforce use of the view as a model data store?  The complement of 
> "inject" might best be "read".

In the templates themselves, we see .getXXXAttribute type methods able
to be used, but no .putAttribute equivalents: method naming is
important, I agree, but there are various measures of software quality:

http://en.wikipedia.org/wiki/Software_quality#Software_Quality_Factors

I seem to remember reading, may be 15 years ago in a book (I think it
was Code Complete), that Consistency rates pretty high in importance,
due to flow-on effects, such as readability, usability, maintainability
and simplicity.

Minimising Cognitive Load for the user I feel is important, and to me,
.inject increases cognitive load, whereas .add reduces cognitive load.

best
zen

-- 
Homepage: www.SoulSound.net -- Free Australia: www.UPMART.org
Please respect the confidentiality of this email as sensibly warranted.

From gwlist at grahamwideman.com  Wed Oct  7 17:03:43 2009
From: gwlist at grahamwideman.com (Graham Wideman)
Date: Wed, 07 Oct 2009 17:03:43 -0700
Subject: [stringtemplate-interest] v4 ST
In-Reply-To: <20091007233532.GB4160@ip61>
References: <200910071825.n97IPKqW004054@zinc.newtechlaw.com>
	<4.1.20091006180832.055b5fe0@grahamwideman.com>
	<200910071825.n97IPKqW004054@zinc.newtechlaw.com>
Message-ID: <4.1.20091007165957.01abd430@grahamwideman.com>

At 10/8/2009 10:35 AM, Zenaan Harkness wrote:
>Ahh yes, .getAttribute. Well then, .putAttribute is the canonical
>complement!

Wait... why is "put" the complement of "get" when it comes to programming languages?  What happened to plain old "set"?  Getters and setters and all that?

But of course "set" is what Ter was trying to move away from because it suggests "replace" rather than add/append.

So, I'm still heavily in favor of your suggestion :-) to use "add", otherwise addAttribute.

-- Graham


From gerald at certiv.net  Wed Oct  7 17:11:53 2009
From: gerald at certiv.net (Gerald Rosenberg)
Date: Wed, 07 Oct 2009 17:11:53 -0700
Subject: [stringtemplate-interest] v4 ST
In-Reply-To: <20091007233532.GB4160@ip61>
References: <4.1.20091006180832.055b5fe0@grahamwideman.com>
	<200910071825.n97IPKqW004054@zinc.newtechlaw.com>
	<20091007233532.GB4160@ip61>
Message-ID: <200910080013.n980D8ma006037@zinc.newtechlaw.com>

At 04:35 PM 10/7/2009, Zenaan Harkness wrote:

>Minimising Cognitive Load for the user I feel is important, and to me,
>.inject increases cognitive load, whereas .add reduces cognitive load.

Minimizing congatv, congaviv, cognatitiv, coganative . . . .  Sigh, 
maybe Feeble Design Patterns are best ;).

In the end, I think it is dealer's (Ter's) choice. 


From parrt at cs.usfca.edu  Wed Oct  7 17:19:38 2009
From: parrt at cs.usfca.edu (Terence Parr)
Date: Wed, 7 Oct 2009 17:19:38 -0700
Subject: [stringtemplate-interest] v4 ST
In-Reply-To: <200910080013.n980D8ma006037@zinc.newtechlaw.com>
References: <4.1.20091006180832.055b5fe0@grahamwideman.com>
	<200910071825.n97IPKqW004054@zinc.newtechlaw.com>
	<20091007233532.GB4160@ip61>
	<200910080013.n980D8ma006037@zinc.newtechlaw.com>
Message-ID: <6046757A-521A-4053-B86A-314494D3E4CB@cs.usfca.edu>

I've changed it between add and inject 5x today! ugh. Inject is what I  
say in papers, but it's not what people would expect. I'm thinking  
just simple add() for now.

BTW, as a testament to ST's simplicity, I have 12 instructions in the  
bytecode interpreter and it does all canonical operations :)  It's  
cool stuff.  I took the stack-based bytecode interp pattern from book  
which comes with disassembler and such.

Example compilation:

compile: <if(name)>works<else>fail<endif>

0000:	load_attr  #0:"name"
0003:	brf        13
0006:	load_str   #1:"works"
0009:	write
0010:	br         17
0013:	load_str   #2:"fail"
0016:	write

compile: hi <name:a>!

0000:	load_str   #0:"hi "
0003:	write
0004:	load_attr  #1:"name"
0007:	load_str   #2:"a"
0010:	map
0011:	write
0012:	load_str   #3:"!"
0015:	write

Cool, right?

I thank Sam Harwell who discussed the instructions with me when he  
visited.

Ter
On Oct 7, 2009, at 5:11 PM, Gerald Rosenberg wrote:

> At 04:35 PM 10/7/2009, Zenaan Harkness wrote:
>
>> Minimising Cognitive Load for the user I feel is important, and to  
>> me,
>> .inject increases cognitive load, whereas .add reduces cognitive  
>> load.
>
> Minimizing congatv, congaviv, cognatitiv, coganative . . . .  Sigh,
> maybe Feeble Design Patterns are best ;).
>
> In the end, I think it is dealer's (Ter's) choice.
>
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest


From zen at freedbms.net  Wed Oct  7 17:36:11 2009
From: zen at freedbms.net (Zenaan Harkness)
Date: Thu, 8 Oct 2009 11:36:11 +1100
Subject: [stringtemplate-interest] v4 ST
In-Reply-To: <20091007233532.GB4160@ip61>
References: <4.1.20091006180832.055b5fe0@grahamwideman.com>
	<200910071825.n97IPKqW004054@zinc.newtechlaw.com>
	<20091007233532.GB4160@ip61>
Message-ID: <20091008003611.GA6816@ip61>

> there are various measures of software quality:
> 
> http://en.wikipedia.org/wiki/Software_quality#Software_Quality_Factors

Another page I like:

http://lambda-the-ultimate.org/node/1483

-- 
Homepage: www.SoulSound.net -- Free Australia: www.UPMART.org
Please respect the confidentiality of this email as sensibly warranted.

From zen at freedbms.net  Wed Oct  7 17:39:08 2009
From: zen at freedbms.net (Zenaan Harkness)
Date: Thu, 8 Oct 2009 11:39:08 +1100
Subject: [stringtemplate-interest] v4 ST
In-Reply-To: <200910080013.n980D8ma006037@zinc.newtechlaw.com>
References: <4.1.20091006180832.055b5fe0@grahamwideman.com>
	<200910071825.n97IPKqW004054@zinc.newtechlaw.com>
	<20091007233532.GB4160@ip61>
	<200910080013.n980D8ma006037@zinc.newtechlaw.com>
Message-ID: <20091008003908.GD4160@ip61>

On Wed, Oct 07, 2009 at 05:11:53PM -0700, Gerald Rosenberg wrote:
> At 04:35 PM 10/7/2009, Zenaan Harkness wrote:
> 
> >Minimising Cognitive Load for the user I feel is important, and to me,
> >.inject increases cognitive load, whereas .add reduces cognitive load.
> 
> Minimizing congatv, congaviv, cognatitiv, coganative . . . .  Sigh, 
> maybe Feeble Design Patterns are best ;).

ROFL!

Looking forward to your pre-release O'Rielly book "Feeble Design
Patterns" :)

-- 
Homepage: www.SoulSound.net -- Free Australia: www.UPMART.org
Please respect the confidentiality of this email as sensibly warranted.

From zen at freedbms.net  Wed Oct  7 17:41:26 2009
From: zen at freedbms.net (Zenaan Harkness)
Date: Thu, 8 Oct 2009 11:41:26 +1100
Subject: [stringtemplate-interest] v4 ST
In-Reply-To: <6046757A-521A-4053-B86A-314494D3E4CB@cs.usfca.edu>
References: <4.1.20091006180832.055b5fe0@grahamwideman.com>
	<200910071825.n97IPKqW004054@zinc.newtechlaw.com>
	<20091007233532.GB4160@ip61>
	<200910080013.n980D8ma006037@zinc.newtechlaw.com>
	<6046757A-521A-4053-B86A-314494D3E4CB@cs.usfca.edu>
Message-ID: <20091008004126.GE4160@ip61>

> Example compilation:
> 
> compile: <if(name)>works<else>fail<endif>
> 
> 0000:	load_attr  #0:"name"
> 0003:	brf        13
> 0006:	load_str   #1:"works"
> 0009:	write
> 0010:	br         17
> 0013:	load_str   #2:"fail"
> 0016:	write
> 
> compile: hi <name:a>!
> 
> 0000:	load_str   #0:"hi "
> 0003:	write
> 0004:	load_attr  #1:"name"
> 0007:	load_str   #2:"a"
> 0010:	map
> 0011:	write
> 0012:	load_str   #3:"!"
> 0015:	write
> 
> Cool, right?

Looks cool. Is that Java byte-code, or some new fangled thing?

If it's new, was there a need to create a new byte-code language?

I'm not familiar with any reasons why you might do one or the other -
asking out of curiosity.

cheers
zen

-- 
Homepage: www.SoulSound.net -- Free Australia: www.UPMART.org
Please respect the confidentiality of this email as sensibly warranted.

From gwlist at grahamwideman.com  Wed Oct  7 18:23:19 2009
From: gwlist at grahamwideman.com (Graham Wideman)
Date: Wed, 07 Oct 2009 18:23:19 -0700
Subject: [stringtemplate-interest] v4 ST
In-Reply-To: <6046757A-521A-4053-B86A-314494D3E4CB@cs.usfca.edu>
References: <200910080013.n980D8ma006037@zinc.newtechlaw.com>
	<4.1.20091006180832.055b5fe0@grahamwideman.com>
	<200910071825.n97IPKqW004054@zinc.newtechlaw.com>
	<20091007233532.GB4160@ip61>
	<200910080013.n980D8ma006037@zinc.newtechlaw.com>
Message-ID: <4.1.20091007181550.02b21f40@grahamwideman.com>

Ter:

After all this discussion, setting aside the renaming of the setAttribute method, I guess I'm pretty curious what special meaning you see is conveyed or emphasized by "inject" as you used it in your papers?

-- Graham

From parrt at cs.usfca.edu  Wed Oct  7 19:52:47 2009
From: parrt at cs.usfca.edu (Terence Parr)
Date: Wed, 7 Oct 2009 19:52:47 -0700
Subject: [stringtemplate-interest] v4 ST
In-Reply-To: <20091008004126.GE4160@ip61>
References: <4.1.20091006180832.055b5fe0@grahamwideman.com>
	<200910071825.n97IPKqW004054@zinc.newtechlaw.com>
	<20091007233532.GB4160@ip61>
	<200910080013.n980D8ma006037@zinc.newtechlaw.com>
	<6046757A-521A-4053-B86A-314494D3E4CB@cs.usfca.edu>
	<20091008004126.GE4160@ip61>
Message-ID: <2BD12AA8-0B82-418A-89D7-E7EC1827431A@cs.usfca.edu>


On Oct 7, 2009, at 5:41 PM, Zenaan Harkness wrote:

>> Example compilation:
>>
>> compile: <if(name)>works<else>fail<endif>
>>
>> 0000:	load_attr  #0:"name"
>> 0003:	brf        13
>> 0006:	load_str   #1:"works"
>> 0009:	write
>> 0010:	br         17
>> 0013:	load_str   #2:"fail"
>> 0016:	write
>>
>> compile: hi <name:a>!
>>
>> 0000:	load_str   #0:"hi "
>> 0003:	write
>> 0004:	load_attr  #1:"name"
>> 0007:	load_str   #2:"a"
>> 0010:	map
>> 0011:	write
>> 0012:	load_str   #3:"!"
>> 0015:	write
>>
>> Cool, right?
>
> Looks cool. Is that Java byte-code, or some new fangled thing?

new thing. 12 instructions.

> If it's new, was there a need to create a new byte-code language?

yep, specialized instructions for specialized language. now "map" for  
example in java.

Ter

From parrt at cs.usfca.edu  Wed Oct  7 19:53:16 2009
From: parrt at cs.usfca.edu (Terence Parr)
Date: Wed, 7 Oct 2009 19:53:16 -0700
Subject: [stringtemplate-interest] v4 ST
In-Reply-To: <4.1.20091007181550.02b21f40@grahamwideman.com>
References: <200910080013.n980D8ma006037@zinc.newtechlaw.com>
	<4.1.20091006180832.055b5fe0@grahamwideman.com>
	<200910071825.n97IPKqW004054@zinc.newtechlaw.com>
	<20091007233532.GB4160@ip61>
	<200910080013.n980D8ma006037@zinc.newtechlaw.com>
	<4.1.20091007181550.02b21f40@grahamwideman.com>
Message-ID: <9099A9D1-C0F6-4C6B-9D02-E9D16FB59388@cs.usfca.edu>

attributes are injected into the template and *then* it's a evaluated.  
it reinforces idea of push vs pull. :)
Ter
On Oct 7, 2009, at 6:23 PM, Graham Wideman wrote:

> Ter:
>
> After all this discussion, setting aside the renaming of the  
> setAttribute method, I guess I'm pretty curious what special meaning  
> you see is conveyed or emphasized by "inject" as you used it in your  
> papers?
>
> -- Graham
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest


From zen at freedbms.net  Wed Oct  7 19:59:58 2009
From: zen at freedbms.net (Zenaan Harkness)
Date: Thu, 8 Oct 2009 13:59:58 +1100
Subject: [stringtemplate-interest] v4 ST
In-Reply-To: <9099A9D1-C0F6-4C6B-9D02-E9D16FB59388@cs.usfca.edu>
References: <200910080013.n980D8ma006037@zinc.newtechlaw.com>
	<4.1.20091006180832.055b5fe0@grahamwideman.com>
	<200910071825.n97IPKqW004054@zinc.newtechlaw.com>
	<20091007233532.GB4160@ip61>
	<200910080013.n980D8ma006037@zinc.newtechlaw.com>
	<4.1.20091007181550.02b21f40@grahamwideman.com>
	<9099A9D1-C0F6-4C6B-9D02-E9D16FB59388@cs.usfca.edu>
Message-ID: <20091008025958.GJ4160@ip61>

On Wed, Oct 07, 2009 at 07:53:16PM -0700, Terence Parr wrote:
> attributes are injected into the template and *then* it's a evaluated.  
> it reinforces idea of push vs pull. :)

Ahah! .pushAttrib() and .pullAttrib()

Finally, some sanity  :)

Kidding, kidding (for the facetiously impaired).

-- 
Homepage: www.SoulSound.net -- Free Australia: www.UPMART.org
Please respect the confidentiality of this email as sensibly warranted.

From jimi at temporal-wave.com  Wed Oct  7 20:28:34 2009
From: jimi at temporal-wave.com (Jim Idle)
Date: Wed, 07 Oct 2009 20:28:34 -0700
Subject: [stringtemplate-interest] v4 ST
In-Reply-To: <20091008025958.GJ4160@ip61>
Message-ID: <66146a99e8a3b04e8bffdd3739a51ef0@temporal-wave.com>

How about:

pushMe(), pullU()

8-|



> -----Original Message-----
> From: stringtemplate-interest-bounces at antlr.org [mailto:stringtemplate-
> interest-bounces at antlr.org] On Behalf Of Zenaan Harkness
> Sent: Wednesday, October 07, 2009 8:00 PM
> To: stringtemplate-interest at antlr.org
> Subject: Re: [stringtemplate-interest] v4 ST
> 
> On Wed, Oct 07, 2009 at 07:53:16PM -0700, Terence Parr wrote:
> > attributes are injected into the template and *then* it's a
> evaluated.
> > it reinforces idea of push vs pull. :)
> 
> Ahah! .pushAttrib() and .pullAttrib()
> 
> Finally, some sanity  :)
> 
> Kidding, kidding (for the facetiously impaired).
> 
> --
> Homepage: www.SoulSound.net -- Free Australia: www.UPMART.org
> Please respect the confidentiality of this email as sensibly warranted.
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest




From gwlist at grahamwideman.com  Wed Oct  7 20:48:43 2009
From: gwlist at grahamwideman.com (Graham Wideman)
Date: Wed, 07 Oct 2009 20:48:43 -0700
Subject: [stringtemplate-interest] v4 ST
In-Reply-To: <9099A9D1-C0F6-4C6B-9D02-E9D16FB59388@cs.usfca.edu>
References: <4.1.20091007181550.02b21f40@grahamwideman.com>
	<200910080013.n980D8ma006037@zinc.newtechlaw.com>
	<4.1.20091006180832.055b5fe0@grahamwideman.com>
	<200910071825.n97IPKqW004054@zinc.newtechlaw.com>
	<20091007233532.GB4160@ip61>
	<200910080013.n980D8ma006037@zinc.newtechlaw.com>
	<4.1.20091007181550.02b21f40@grahamwideman.com>
Message-ID: <4.1.20091007200732.0562b1d0@grahamwideman.com>

At 10/7/2009 07:53 PM, Terence Parr wrote:
>attributes are injected into the template and *then* it's a evaluated.  
>it reinforces idea of push vs pull. :)
>Ter

Ah, right, thanks, you're reminding me of your emphasis on push to enforce separation of data and view issues.  And specifically contrasting to other template mechanisms or languages which can grab any application data willy nilly (and possibly cause side-effects given that access).

That said, I think that "injection" is actually overstating the idea when it comes to the actual ST API. The setAttribute method (or whatever it's to be called), actually does not perform the injection of the data into the result, it just makes that data available to the ST object for later insertion where referenced by the template text.  Ie: If the template text does not call for that data, then that data doesn't ultimately get rendered into the output.

So this apparatus indeed achieves the effect that you are promoting (the calling app gets to control what data is *permitted* in the output), but that's achieved through a combination of half push (setAttribute) and half pull (reference in template text).

Contrast this to "DOM injection", where chunks of HTML are injected into an existing HTML structure (ie: fragments of html DOM are written into an existing HTML DOM) completely under the contol of an application, with no cooperation or anticipation by the recipient DOM. *That* I think lives up to the word "injection".

The step in the action that's most like "injection", IMO, is the point during toString when template text and attributes get merged together. One might imagine the ST object acting on behalf of the calling app to inject the data, perhaps.

Anyhow, none of this diminishes the attractiveness of the overall ST concept -- just that what sounds good as "inject" at the conceptual intent level maps to a combination of features in the ST implementation, and not one particular method -- in my view. 

And whatever that *&^% method is called, I'll still be willing to call it :-).

-- Graham


From gwlist at grahamwideman.com  Wed Oct  7 20:50:57 2009
From: gwlist at grahamwideman.com (Graham Wideman)
Date: Wed, 07 Oct 2009 20:50:57 -0700
Subject: [stringtemplate-interest] v4 ST
In-Reply-To: <20091008025958.GJ4160@ip61>
References: <9099A9D1-C0F6-4C6B-9D02-E9D16FB59388@cs.usfca.edu>
	<200910080013.n980D8ma006037@zinc.newtechlaw.com>
	<4.1.20091006180832.055b5fe0@grahamwideman.com>
	<200910071825.n97IPKqW004054@zinc.newtechlaw.com>
	<20091007233532.GB4160@ip61>
	<200910080013.n980D8ma006037@zinc.newtechlaw.com>
	<4.1.20091007181550.02b21f40@grahamwideman.com>
	<9099A9D1-C0F6-4C6B-9D02-E9D16FB59388@cs.usfca.edu>
Message-ID: <4.1.20091007204911.0295f120@grahamwideman.com>

>
>Ahah! .pushAttrib() and .pullAttrib()
>
>Finally, some sanity  :)
>

Hahahahaha -- ba-dum-tssssch

*I* decided to hold back from making that joke :-).



From zen at freedbms.net  Wed Oct  7 21:38:51 2009
From: zen at freedbms.net (Zenaan Harkness)
Date: Thu, 8 Oct 2009 15:38:51 +1100
Subject: [stringtemplate-interest] v4 ST
In-Reply-To: <4.1.20091007200732.0562b1d0@grahamwideman.com>
References: <4.1.20091007181550.02b21f40@grahamwideman.com>
	<200910080013.n980D8ma006037@zinc.newtechlaw.com>
	<4.1.20091006180832.055b5fe0@grahamwideman.com>
	<200910071825.n97IPKqW004054@zinc.newtechlaw.com>
	<20091007233532.GB4160@ip61>
	<200910080013.n980D8ma006037@zinc.newtechlaw.com>
	<4.1.20091007181550.02b21f40@grahamwideman.com>
	<4.1.20091007200732.0562b1d0@grahamwideman.com>
Message-ID: <20091008043851.GK4160@ip61>

On Wed, Oct 07, 2009 at 08:48:43PM -0700, Graham Wideman wrote:
> At 10/7/2009 07:53 PM, Terence Parr wrote:
> >attributes are injected into the template and *then* it's a evaluated.  
> >it reinforces idea of push vs pull. :)
> >Ter
> 
> Ah, right, thanks, you're reminding me of your emphasis on push to enforce separation of data and view issues.  And specifically contrasting to other template mechanisms or languages which can grab any application data willy nilly (and possibly cause side-effects given that access).
> 
> That said, I think that "injection" is actually overstating the idea when it comes to the actual ST API. The setAttribute method (or whatever it's to be called), actually does not perform the injection of the data into the result, it just makes that data available to the ST object for later insertion where referenced by the template text.  Ie: If the template text does not call for that data, then that data doesn't ultimately get rendered into the output.
> 
> So this apparatus indeed achieves the effect that you are promoting (the calling app gets to control what data is *permitted* in the output), but that's achieved through a combination of half push (setAttribute) and half pull (reference in template text).

I like your analysis. This is clear.

Brings to mind the verb 'post', such as on a blog/ bulleting board.
So what would be the complement of myST.post(att) ??


> Contrast this to "DOM injection", where chunks of HTML are injected into an existing HTML structure (ie: fragments of html DOM are written into an existing HTML DOM) completely under the contol of an application, with no cooperation or anticipation by the recipient DOM. *That* I think lives up to the word "injection".

Ack.

> The step in the action that's most like "injection", IMO, is the point during toString when template text and attributes get merged together. One might imagine the ST object acting on behalf of the calling app to inject the data, perhaps.

I have often thought of it as .render().


> Anyhow, none of this diminishes the attractiveness of the overall ST concept -- just that what sounds good as "inject" at the conceptual intent level maps to a combination of features in the ST implementation, and not one particular method -- in my view. 
> 
> And whatever that *&^% method is called, I'll still be willing to call it :-).

:)

I think you're suggestion has too many syntactically significant
characters there - *&^%

:/-

-- 
Homepage: www.SoulSound.net -- Free Australia: www.UPMART.org
Please respect the confidentiality of this email as sensibly warranted.

From gwlist at grahamwideman.com  Wed Oct  7 22:12:43 2009
From: gwlist at grahamwideman.com (Graham Wideman)
Date: Wed, 07 Oct 2009 22:12:43 -0700
Subject: [stringtemplate-interest] v4 ST
In-Reply-To: <20091008043851.GK4160@ip61>
References: <4.1.20091007200732.0562b1d0@grahamwideman.com>
	<4.1.20091007181550.02b21f40@grahamwideman.com>
	<200910080013.n980D8ma006037@zinc.newtechlaw.com>
	<4.1.20091006180832.055b5fe0@grahamwideman.com>
	<200910071825.n97IPKqW004054@zinc.newtechlaw.com>
	<20091007233532.GB4160@ip61>
	<200910080013.n980D8ma006037@zinc.newtechlaw.com>
	<4.1.20091007181550.02b21f40@grahamwideman.com>
	<4.1.20091007200732.0562b1d0@grahamwideman.com>
Message-ID: <4.1.20091007215916.05861fd0@grahamwideman.com>

Thanks Zenaan for the agreeable comments.

Answering your question:

>Brings to mind the verb 'post', such as on a blog/ bulleting board.
>So what would be the complement of myST.post(att) ??

Well the subject of complement came up when you were working backwards from Gerald's mention of .getAttribute to suggest .putAttribute as a candidate for setAttribute.

However, in this case you're starting with the candidate for setAttribute, suggesting "post", and the complement is a lot less important, since it's primarily a read-back of data that the app provided in the first place.

However, by analogy to a message board, I guess the corresponding "gimme access to previously posted thing" operation would be "read" or "edit".

That said, I'm not too hot on introducing a metaphor when a concrete term can be used *I* think unabashedly: Ie: Since any explanation of StringTemplate has to include the idea of "Attribute", then for the API method that allows adding an Attribute, why avoid naming that method "addAttribute"?

The short version "add" is not bad if users can be expected to know what is being added to what.  A minor risk is that since an ST is in the business of basically combining *two* data sources (template text and app data) it's not 100% obvious what plain "add" pertains to.  One might mistakenly imagine that "add" adds a template text.  Of course arguments might make that more clear, though one of the overloaded methods is a straight string.

You can 100% guarantee that if the method is *not* called addAttribute, you will find in the method doc the phrase "adds an attribute to the ST's attribute list". :-)

-- Graham

From lars.vonwedel at bayertechnology.com  Wed Oct  7 23:55:05 2009
From: lars.vonwedel at bayertechnology.com (lars.vonwedel at bayertechnology.com)
Date: Thu, 8 Oct 2009 08:55:05 +0200
Subject: [stringtemplate-interest] Antwort: Packaging C# StringTemplate in
 an assembly
In-Reply-To: <b55007f846b64144b21da41f8c0d9625@temporal-wave.com>
Message-ID: <OF63B22436.FCD7F21E-ONC1257649.00257E8C-C1257649.0025FC36@bayer.de>

Dear Jim,

this is quite easy to achieve using an "embedded ressource" for the 
template. Add the file in VS to your project and select "Embedded 
Resource" as a build option in the properties of the file.

In your code, you can use something like this:

        private StringTemplateGroup GetTemplateFromResource( string 
resource )
        {
            StringTemplateGroup group = null;
            Assembly assembly = Assembly.GetExecutingAssembly();
            Stream stream = assembly.GetManifestResourceStream( resource 
);

            if( stream != null )
            {
                var reader = new StreamReader( stream );
                group = new StringTemplateGroup( reader );
            }
    // else: template not found !
            return group;
        }

The resource parameter is the fully qualified name of the embedded 
resource, e.g. "Xyz.Template.stg" if Xyz is the standard namespace of the 
project and Template.stg is the name of the template file. Be aware that 
you need to recompile when changing the template.

Freundliche Gr??e / Best Regards
Lars von Wedel
_________________________________________

Bayer Technology Services GmbH
BTS-PT-PD-ES
Leverkusen, E 41
Phone: +49 214 30 56456
Fax: +49 214 30 62677
E-mail: lars.vonwedel at bayertechnology.com
Web: www.bayertechnology.com

Gesch?ftsf?hrer: Achim Noack
Aufsichtsratsvorsitzender: Dr. Wolfgang Plischke
Sitz der Gesellschaft: Leverkusen   |   Eintragung: Amtsgericht K?ln, HRB 
49896




"Jim Idle" <jimi at temporal-wave.com> 
Gesendet von: stringtemplate-interest-bounces at antlr.org
07.10.2009 21:06

An
"stringtemplate-interest at antlr.org" <stringtemplate-interest at antlr.org>
Kopie

Thema
[stringtemplate-interest] Packaging C# StringTemplate in an assembly






So I can?t find any example (maybe I am blind) of how to add a .stg file 
into my C# project so that it goes in to the assembly and can be loaded at 
runtime. Anyone got an example of loading from the .Net assembly?
 
Cheers,
 
Jim_______________________________________________
stringtemplate-interest mailing list
stringtemplate-interest at antlr.org
http://www.antlr.org/mailman/listinfo/stringtemplate-interest

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20091008/ff8d80d9/attachment.html 

From jimi at temporal-wave.com  Fri Oct  9 06:52:03 2009
From: jimi at temporal-wave.com (Jim Idle)
Date: Fri, 09 Oct 2009 06:52:03 -0700
Subject: [stringtemplate-interest] Antwort: Packaging C# StringTemplate
	in an assembly
In-Reply-To: <OF63B22436.FCD7F21E-ONC1257649.00257E8C-C1257649.0025FC36@bayer.de>
Message-ID: <f987889c655324458bb763039d1d5281@temporal-wave.com>

Thanks for replying - I did in fact already work this out. I will put this in the docs or on the wiki somewhere.

 

Jim

 

From: lars.vonwedel at bayertechnology.com [mailto:lars.vonwedel at bayertechnology.com] 
Sent: Wednesday, October 07, 2009 11:55 PM
To: Jim Idle
Cc: stringtemplate-interest at antlr.org; stringtemplate-interest-bounces at antlr.org
Subject: Antwort: [stringtemplate-interest] Packaging C# StringTemplate in an assembly

 


Dear Jim, 

this is quite easy to achieve using an "embedded ressource" for the template. Add the file in VS to your project and select "Embedded Resource" as a build option in the properties of the file. 

In your code, you can use something like this: 

        private StringTemplateGroup GetTemplateFromResource( string resource ) 
        { 
            StringTemplateGroup group = null; 
            Assembly assembly = Assembly.GetExecutingAssembly(); 
            Stream stream = assembly.GetManifestResourceStream( resource ); 

            if( stream != null ) 
            { 
                var reader = new StreamReader( stream ); 
                group = new StringTemplateGroup( reader ); 
            } 
    // else: template not found ! 
            return group; 
        } 

The resource parameter is the fully qualified name of the embedded resource, e.g. "Xyz.Template.stg" if Xyz is the standard namespace of the project and Template.stg is the name of the template file. Be aware that you need to recompile when changing the template. 

Freundliche Gr??e / Best Regards
Lars von Wedel
_________________________________________

Bayer Technology Services GmbH
BTS-PT-PD-ES
Leverkusen, E 41
Phone: +49 214 30 56456
Fax: +49 214 30 62677
E-mail: lars.vonwedel at bayertechnology.com
Web: www.bayertechnology.com

Gesch?ftsf?hrer: Achim Noack
Aufsichtsratsvorsitzender: Dr. Wolfgang Plischke
Sitz der Gesellschaft: Leverkusen   |   Eintragung: Amtsgericht K?ln, HRB 49896





"Jim Idle" <jimi at temporal-wave.com> 
Gesendet von: stringtemplate-interest-bounces at antlr.org 

07.10.2009 21:06 


An

"stringtemplate-interest at antlr.org" <stringtemplate-interest at antlr.org> 


Kopie

	

Thema

[stringtemplate-interest] Packaging C# StringTemplate in an assembly

 

		




So I can't find any example (maybe I am blind) of how to add a .stg file into my C# project so that it goes in to the assembly and can be loaded at runtime. Anyone got an example of loading from the .Net assembly? 
  
Cheers, 
  
Jim_______________________________________________
stringtemplate-interest mailing list
stringtemplate-interest at antlr.org
http://www.antlr.org/mailman/listinfo/stringtemplate-interest



-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20091009/904d7ac5/attachment-0001.html 

From parrt at cs.usfca.edu  Thu Oct  8 09:46:31 2009
From: parrt at cs.usfca.edu (Terence Parr)
Date: Thu, 8 Oct 2009 09:46:31 -0700
Subject: [stringtemplate-interest] v4 ST
In-Reply-To: <66146a99e8a3b04e8bffdd3739a51ef0@temporal-wave.com>
References: <66146a99e8a3b04e8bffdd3739a51ef0@temporal-wave.com>
Message-ID: <C4484C8F-B237-4DDF-9325-93FF7BA0F584@cs.usfca.edu>

ha! laugh if you will but ST.push("ter", "out the airlock") ain't a  
bad function name. actually i like push.
Ter
On Oct 7, 2009, at 8:28 PM, Jim Idle wrote:

> How about:
>
> pushMe(), pullU()
>
> 8-|
>
>
>
>> -----Original Message-----
>> From: stringtemplate-interest-bounces at antlr.org [mailto:stringtemplate-
>> interest-bounces at antlr.org] On Behalf Of Zenaan Harkness
>> Sent: Wednesday, October 07, 2009 8:00 PM
>> To: stringtemplate-interest at antlr.org
>> Subject: Re: [stringtemplate-interest] v4 ST
>>
>> On Wed, Oct 07, 2009 at 07:53:16PM -0700, Terence Parr wrote:
>>> attributes are injected into the template and *then* it's a
>> evaluated.
>>> it reinforces idea of push vs pull. :)
>>
>> Ahah! .pushAttrib() and .pullAttrib()
>>
>> Finally, some sanity  :)
>>
>> Kidding, kidding (for the facetiously impaired).
>>
>> --
>> Homepage: www.SoulSound.net -- Free Australia: www.UPMART.org
>> Please respect the confidentiality of this email as sensibly  
>> warranted.
>> _______________________________________________
>> stringtemplate-interest mailing list
>> stringtemplate-interest at antlr.org
>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>
>
>
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest


From gwlist at grahamwideman.com  Thu Oct  8 10:29:11 2009
From: gwlist at grahamwideman.com (Graham Wideman)
Date: Thu, 08 Oct 2009 10:29:11 -0700
Subject: [stringtemplate-interest] v4 ST
In-Reply-To: <C4484C8F-B237-4DDF-9325-93FF7BA0F584@cs.usfca.edu>
References: <66146a99e8a3b04e8bffdd3739a51ef0@temporal-wave.com>
	<66146a99e8a3b04e8bffdd3739a51ef0@temporal-wave.com>
Message-ID: <4.1.20091008102144.02dfcf18@grahamwideman.com>

At 10/8/2009 09:46 AM, Terence Parr wrote:
>ha! laugh if you will but ST.push("ter", "out the airlock") ain't a  
>bad function name. actually i like push.

I hope this is Ter pulling our legs!

If it's not, then I challenge supporters of "push" to come up with common programming uses of that term that *don't* mean adding data to a *stack*, with its implication that the data then becomes accessible primarily by popping, maybe by position into the stack (a la stack frame) and specifically *not* by name.

Ie: this function is supposed to place data at the disposal of the ST, where it can later be referred to by the template text *by name*, and, if needed, read back by the caller app *by name*.

So "push", if customarily used in connection with stacks, seems pretty at odds with this.

-- Graham

From bill at artima.com  Thu Oct  8 11:23:04 2009
From: bill at artima.com (Bill Venners)
Date: Thu, 8 Oct 2009 11:23:04 -0700
Subject: [stringtemplate-interest] v4 ST
In-Reply-To: <05D9CA06-CC9D-47CD-A048-3BD40FA3B4B2@cs.usfca.edu>
References: <4.1.20091006164913.02c73f08@grahamwideman.com>
	<4099293F-0F22-4D4B-8013-265898EB49C3@cs.usfca.edu>
	<05D9CA06-CC9D-47CD-A048-3BD40FA3B4B2@cs.usfca.edu>
Message-ID: <3b8d0de60910081123o2e35c5a8nbb2108349d5c384f@mail.gmail.com>

Hi Terence,

add() is nice and concise and clear, but put is what is used in
java.util.Map, and that's what people are doing here, mapping a name
to a value. So put might win on those grounds, but either would work.
Also, I'd stay away from transmogrify():

st.transmogrify("name", "parrt")

Bill

On Tue, Oct 6, 2009 at 4:58 PM, Terence Parr <parrt at cs.usfca.edu> wrote:
> Actually
>
> st.add("name, "parrt");
>
> might not be as clear as
>
> st.put("name, "parrt");
>
> but will people think it means "replace" instead of add? ?I kind of
> like put
>
> what about
>
> st.attr("name, "parrt");
>
>
> Ter
>
> On Oct 6, 2009, at 4:56 PM, Terence Parr wrote:
>
>>
>> On Oct 6, 2009, at 4:55 PM, Graham Wideman wrote:
>>
>>> Hi Ter,
>>>
>>> At 10/6/2009 04:38 PM, Terence Parr wrote:
>>>> heh, to distinguish between v4 and v3, I'm thinkingof using ST not
>>>> StringTemplate for main class.
>>>
>>> Sounds fine to me, but what happens at v5? ?:-)
>>
>> ha! still ST :)
>>
>>>
>>>> Also using inject (or add) instead of setAttribute:
>>>
>>> I think "add" or "addAttribute" is a definite improvement over
>>> "setAttribute". ?I think "inject" is a step in a less-clear
>>> direction, because:
>>>
>>> a) It fails to leverage what a user understands "add" to mean from
>>> other common classes.
>>>
>>> b) It suggests that the calling of this method actively causes the
>>> info in the args to be "injected" into the finished template's
>>> output, when actually all it does is make the information accessible
>>> to the template during its later assembly (toString), and might
>>> actually have no ultimate effect if the template doesn't refer to it.
>>
>> excellent arguments. ok, i'll make it add()
>>
>> Thanks
>> Ter
>> _______________________________________________
>> stringtemplate-interest mailing list
>> stringtemplate-interest at antlr.org
>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>



-- 
Bill Venners
Artima, Inc.
http://www.artima.com

From parrt at cs.usfca.edu  Thu Oct  8 11:24:16 2009
From: parrt at cs.usfca.edu (Terence Parr)
Date: Thu, 8 Oct 2009 11:24:16 -0700
Subject: [stringtemplate-interest] v4 ST
In-Reply-To: <4.1.20091008102144.02dfcf18@grahamwideman.com>
References: <66146a99e8a3b04e8bffdd3739a51ef0@temporal-wave.com>
	<66146a99e8a3b04e8bffdd3739a51ef0@temporal-wave.com>
	<4.1.20091008102144.02dfcf18@grahamwideman.com>
Message-ID: <97B26987-B526-4F78-BF4F-48B7CE9EDA15@cs.usfca.edu>

yeah, push ain't no good due to stack ref.
Ter
On Oct 8, 2009, at 10:29 AM, Graham Wideman wrote:

> At 10/8/2009 09:46 AM, Terence Parr wrote:
>> ha! laugh if you will but ST.push("ter", "out the airlock") ain't a
>> bad function name. actually i like push.
>
> I hope this is Ter pulling our legs!
>
> If it's not, then I challenge supporters of "push" to come up with  
> common programming uses of that term that *don't* mean adding data  
> to a *stack*, with its implication that the data then becomes  
> accessible primarily by popping, maybe by position into the stack (a  
> la stack frame) and specifically *not* by name.
>
> Ie: this function is supposed to place data at the disposal of the  
> ST, where it can later be referred to by the template text *by  
> name*, and, if needed, read back by the caller app *by name*.
>
> So "push", if customarily used in connection with stacks, seems  
> pretty at odds with this.
>
> -- Graham
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest


From parrt at cs.usfca.edu  Thu Oct  8 13:32:18 2009
From: parrt at cs.usfca.edu (Terence Parr)
Date: Thu, 8 Oct 2009 13:32:18 -0700
Subject: [stringtemplate-interest] mapping templates
In-Reply-To: <1D812D01-7428-4A83-9157-C81A4F3D13F3@cs.usfca.edu>
References: <1D812D01-7428-4A83-9157-C81A4F3D13F3@cs.usfca.edu>
Message-ID: <F6A95C21-D1D1-46C4-99AA-1AE984F0BFB1@cs.usfca.edu>

ooops, what about args that are part of the map? here's an ANTLR  
example usage:

<bitsets:bitset(name={FOLLOW_<it.name>_in_<it.inName><it.tokenIndex>},  
words64=it.bits)>

I want to set some args as well as the "it".

I do it again here:

<foo:parameterScope(scope=it)>

But, scope is only arg so it's same as:

<foo:parameterScope()>

or

<parameterScope(foo)>

So, anybody else use the args in map call?  I'm thinking it's  
confusing and we should remove.  E.g., in what context is "it"  
evaluated above?

I could rephrase as

<bitsets:{b | <bitset(name= 
{FOLLOW_<b.name>_in_<b.inName><it.tokenIndex>}, words64=b.bits)>}>

so we don't need I guess. Objections?

Ter
On Oct 7, 2009, at 12:28 PM, Terence Parr wrote:

> Hi, there is a syntax bugaboo in ST v3.
>
> <names:bold()> means apply bold to each element of names but t=foo()
> in an arg list or wherever means invoke foo and put ST into t.  Seems
> like foo should be a template name and foo() should be an invocation.
> That would imply we'd chnage to:
>
> <names:bold>
>
> Makes more sense if you ask me.  Other thoughts?
>
> Ter
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest


From parrt at cs.usfca.edu  Thu Oct  8 14:08:45 2009
From: parrt at cs.usfca.edu (Terence Parr)
Date: Thu, 8 Oct 2009 14:08:45 -0700
Subject: [stringtemplate-interest] any interest in toy version of ST for
	learning purposes?
Message-ID: <2125F8F7-3B4F-418C-B103-BFF8D9A74DD7@cs.usfca.edu>

Hi,

I'm in the process of rebuilding ST from the ground up. The previous  
version works well, but it's hard for me to maintain because it uses a  
tree-based interpreter. Further, it uses v2 ANTLR not v3. In order to  
remove the dependencies in ST and in v3 itself on ANTLR v2, I'm  
rebuilding both (though only the front end of ANTLR). The  
functionality will be effectively the same, with some slight  
differences in syntax. Lots of little things cleaned up and so on.

I'm working in my playground at the moment to create the core of the  
new system before moving back into my repository. I have created a  
very simple bytecode compiler and interpreter that handles the  
canonical operations:

1. attribute reference: <name>, <user.id>
2. template inclusion: <searchbox(args)>
3. map template to attribute(s): <names:bold:italics>
4. conditional inclusion: <if(x)>foo<elseif(y)>bar<else>ick<endif>

The code seems pretty doggone clean to me. It's only when you start  
dealing with separators and auto indentation and anchoring output  
values, that the code becomes difficult to understand. I am about to  
embark on that beast.

Should I cut this version out and make it an example? I don't have any  
text  describing how it works, but there are about 50 unit tests for  
the compiler and interpreter. Would this be useful to people?

Ter

From parrt at cs.usfca.edu  Thu Oct  8 14:36:12 2009
From: parrt at cs.usfca.edu (Terence Parr)
Date: Thu, 8 Oct 2009 14:36:12 -0700
Subject: [stringtemplate-interest] [antlr-interest] any interest in toy
	version of ST for learning purposes?
In-Reply-To: <2125F8F7-3B4F-418C-B103-BFF8D9A74DD7@cs.usfca.edu>
References: <2125F8F7-3B4F-418C-B103-BFF8D9A74DD7@cs.usfca.edu>
Message-ID: <E987D2E9-8F93-4A23-AC8B-F6C48E0FAC7D@cs.usfca.edu>

Oh, why not...dumped it up on the wiki:

http://www.antlr.org/wiki/display/ANTLR3/Toy+ST+implementation

Ter


From sharwell at pixelminegames.com  Thu Oct  8 14:59:08 2009
From: sharwell at pixelminegames.com (Sam Harwell)
Date: Thu, 8 Oct 2009 16:59:08 -0500
Subject: [stringtemplate-interest] mapping templates
In-Reply-To: <F6A95C21-D1D1-46C4-99AA-1AE984F0BFB1@cs.usfca.edu>
References: <1D812D01-7428-4A83-9157-C81A4F3D13F3@cs.usfca.edu>
	<F6A95C21-D1D1-46C4-99AA-1AE984F0BFB1@cs.usfca.edu>
Message-ID: <86403CA0939415448BCCB83855EFE09A0123F4D0@Bloodymary.ironwillgames.com>

One possibility that allows easy identification of visible (in the
output) whitespace would be an altered anonymous template syntax. In all
of the following, [ and ] delimit the syntax terms (since I don't have
italics, etc) and are not themselves part of the syntax.

<[sequence]:[template]>

Where [sequence] is a sequence (iterable in Java) and [template] is a
template taking exactly one argument. The [template] can be an anonymous
template, which can be used when the target of the mapping doesn't match
the required template prototype (one argument).

<[sequence]:[anonymous-variable-name | ( anonymous-variable-name-list )]
=> [anonymous-template-body]>

sequence : identifier;
anonymous-variable-name : identifier;
anonymous-variable-name-list : anonymous-variable-name |
anonymous-variable-name-list , anonymous-variable-name;
anonymous-template-body : { template-text (preserves whitespace) }

For the bitsets example, you'd need to write it as either one of the
following. The interpreter treats both identically (the first is
shorthand for the second).

<bitsets:b =>
{bitset(name={FOLLOW_<b.name>_in_<b.inName><b.tokenIndex>},
words64=b.bits)}>

<bitsets:(b) =>
{bitset(name={FOLLOW_<b.name>_in_<b.inName><b.tokenIndex>},
words64=b.bits)}>

For the foo example, you could use any of the following, but the first
is preferred for performance reasons (fewer templates *and* less
nesting).

<foo:parameterScope>

<foo:it => {parameterScope(scope=it)}>

<foo:(it) => {parameterScope(scope=it)}>

------ New section of ideas starts here ------

You could also consider closure support:

bar(arg1, arg2, arg3) ::= "whatever"

All 4 equivalent:

foo(seq) ::= "<seq:bind(bar, arg1:3, arg2:2)>"
foo(seq) ::= "<seq:bind(bar, 3, 2)>"
foo(seq) ::= "<seq:it => {bar(3, 2, it)}>"
foo(seq) ::= "<seq:it => {bar(arg1=3, arg2=2, arg3=it)}>"

All 3 equivalent:

foo(seq) ::= "<seq:bind(bar, arg2:3, arg3:2)>"
foo(seq) ::= "<seq:it => {bar(it, 3, 2)}>"
foo(seq) ::= "<seq:it => {bar(it, arg2=3, arg3=2)}>"



-----Original Message-----
From: stringtemplate-interest-bounces at antlr.org
[mailto:stringtemplate-interest-bounces at antlr.org] On Behalf Of Terence
Parr
Sent: Thursday, October 08, 2009 3:32 PM
To: stringtemplate-interest Template
Subject: Re: [stringtemplate-interest] mapping templates

ooops, what about args that are part of the map? here's an ANTLR  
example usage:

<bitsets:bitset(name={FOLLOW_<it.name>_in_<it.inName><it.tokenIndex>},  
words64=it.bits)>

I want to set some args as well as the "it".

I do it again here:

<foo:parameterScope(scope=it)>

But, scope is only arg so it's same as:

<foo:parameterScope()>

or

<parameterScope(foo)>

So, anybody else use the args in map call?  I'm thinking it's  
confusing and we should remove.  E.g., in what context is "it"  
evaluated above?

I could rephrase as

<bitsets:{b | <bitset(name= 
{FOLLOW_<b.name>_in_<b.inName><it.tokenIndex>}, words64=b.bits)>}>

so we don't need I guess. Objections?

Ter
On Oct 7, 2009, at 12:28 PM, Terence Parr wrote:

> Hi, there is a syntax bugaboo in ST v3.
>
> <names:bold()> means apply bold to each element of names but t=foo()
> in an arg list or wherever means invoke foo and put ST into t.  Seems
> like foo should be a template name and foo() should be an invocation.
> That would imply we'd chnage to:
>
> <names:bold>
>
> Makes more sense if you ask me.  Other thoughts?
>
> Ter
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest

_______________________________________________
stringtemplate-interest mailing list
stringtemplate-interest at antlr.org
http://www.antlr.org/mailman/listinfo/stringtemplate-interest

From zen at freedbms.net  Thu Oct  8 16:02:13 2009
From: zen at freedbms.net (Zenaan Harkness)
Date: Fri, 9 Oct 2009 10:02:13 +1100
Subject: [stringtemplate-interest] v4 ST
In-Reply-To: <3b8d0de60910081123o2e35c5a8nbb2108349d5c384f@mail.gmail.com>
References: <4.1.20091006164913.02c73f08@grahamwideman.com>
	<4099293F-0F22-4D4B-8013-265898EB49C3@cs.usfca.edu>
	<05D9CA06-CC9D-47CD-A048-3BD40FA3B4B2@cs.usfca.edu>
	<3b8d0de60910081123o2e35c5a8nbb2108349d5c384f@mail.gmail.com>
Message-ID: <20091008230213.GB4142@ip61>

On Thu, Oct 08, 2009 at 11:23:04AM -0700, Bill Venners wrote:
> Hi Terence,
> 
> add() is nice and concise and clear, but put is what is used in
> java.util.Map, and that's what people are doing here, mapping a name
> to a value. So put might win on those grounds, but either would work.
> Also, I'd stay away from transmogrify():

Here's a thought to counter the 'java.util.Map has .push()' position:

Map exists in a context. The context of Map is containers/ vectors.

In the context of Java containers, the contract of each container type,
eg List, Deque and ConcurrentNavigableMap, must be distinguished, and is
distinguished in the documentation, but more importantly, there must be
different method names for contractually different operations.

And in Java, we see the unfortunate overloading of java.awt.Container
and java.util.Container. Everything's easy in hindsight of course :/

It is of course desirable to align as closely as possible to
"traditional" java apis, such as Map.

However, given that:
   -  ST is not actually implementing Map interface
   -  there are other container types using .add
      -  which containers have an adequate "contractual similarity"
         to the ST 'container'
   -  and there being still significant differences and intents
      between Map and ST (such as it's more 'post' and 'read'
      than push/pull/pop, if we are to be as semantically precise
      as possible),

I submit that .add is not only adequate, but ideally compromised (hmm,
that didn't quite come out right :), or shall we say then, supremely
adequate. Ahh, I might just give up at this point... I have little hole
here somewhere that I jump into occasionally... 


> st.transmogrify("name", "parrt")

:)

-- 
Homepage: www.SoulSound.net -- Free Australia: www.UPMART.org
Please respect the confidentiality of this email as sensibly warranted.

From parrt at cs.usfca.edu  Thu Oct  8 16:33:36 2009
From: parrt at cs.usfca.edu (Terence Parr)
Date: Thu, 8 Oct 2009 16:33:36 -0700
Subject: [stringtemplate-interest] package name
Message-ID: <BA3E087D-E129-415B-855C-CE92FB2CD6C6@cs.usfca.edu>

should i reuse org.stringtemplate or should package be  
org.stringtemplate.v4 or something?  The classes are differently named  
so org.stringtemplate.ST and such might be ok.

Ter

From zen at freedbms.net  Thu Oct  8 19:08:19 2009
From: zen at freedbms.net (Zenaan Harkness)
Date: Fri, 9 Oct 2009 13:08:19 +1100
Subject: [stringtemplate-interest] package name
In-Reply-To: <BA3E087D-E129-415B-855C-CE92FB2CD6C6@cs.usfca.edu>
References: <BA3E087D-E129-415B-855C-CE92FB2CD6C6@cs.usfca.edu>
Message-ID: <20091009020819.GD4142@ip61>

On Thu, Oct 08, 2009 at 04:33:36PM -0700, Terence Parr wrote:
> should i reuse org.stringtemplate or should package be  
> org.stringtemplate.v4 or something?  The classes are differently named  
> so org.stringtemplate.ST and such might be ok.

Are there any classes or packages that would overlap?

-- 
Homepage: www.SoulSound.net -- Free Australia: www.UPMART.org
Please respect the confidentiality of this email as sensibly warranted.

From parrt at cs.usfca.edu  Fri Oct  9 13:10:53 2009
From: parrt at cs.usfca.edu (Terence Parr)
Date: Fri, 9 Oct 2009 13:10:53 -0700
Subject: [stringtemplate-interest] package name
In-Reply-To: <20091009020819.GD4142@ip61>
References: <BA3E087D-E129-415B-855C-CE92FB2CD6C6@cs.usfca.edu>
	<20091009020819.GD4142@ip61>
Message-ID: <6D3155F7-D621-4908-9D2D-149A1B7DAB9C@cs.usfca.edu>


On Oct 8, 2009, at 7:08 PM, Zenaan Harkness wrote:

> On Thu, Oct 08, 2009 at 04:33:36PM -0700, Terence Parr wrote:
>> should i reuse org.stringtemplate or should package be
>> org.stringtemplate.v4 or something?  The classes are differently  
>> named
>> so org.stringtemplate.ST and such might be ok.
>
> Are there any classes or packages that would overlap?

Don't think so...ha! I just realized that the old package was:

package org.antlr.stringtemplate;

so

package org.stringtemplate;

it is then! no collision.

Ter





From parrt at cs.usfca.edu  Sun Oct 11 13:52:59 2009
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sun, 11 Oct 2009 13:52:59 -0700
Subject: [stringtemplate-interest] render vs toString
Message-ID: <DE78559F-06C0-48AD-B9D2-ED098AFA8FBD@cs.usfca.edu>

heh, it's pretty hard to debug ST when the debugger calls toString all  
the time on the templates. Using render makes much more sense.  But,  
from a user perspective do you folks also run into trouble because of  
this or is it only debugging ST itself that is troubled by toString()?
Ter 

From zen at freedbms.net  Sun Oct 11 16:10:52 2009
From: zen at freedbms.net (Zenaan Harkness)
Date: Mon, 12 Oct 2009 10:10:52 +1100
Subject: [stringtemplate-interest] render vs toString
In-Reply-To: <DE78559F-06C0-48AD-B9D2-ED098AFA8FBD@cs.usfca.edu>
References: <DE78559F-06C0-48AD-B9D2-ED098AFA8FBD@cs.usfca.edu>
Message-ID: <20091011231052.GA4165@ip61>

On Sun, Oct 11, 2009 at 01:52:59PM -0700, Terence Parr wrote:
> heh, it's pretty hard to debug ST when the debugger calls toString all  
> the time on the templates. Using render makes much more sense.  But,  
> from a user perspective do you folks also run into trouble because of  
> this or is it only debugging ST itself that is troubled by toString()?

Never been a problem for me, an ST user.

When I'm debugging, I'm mostly debugging templates - I use a simple
driver model, so not a lot of code to handle, but plenty of templates.

Sor example, this causes difficulty when I use template debugging mode
(outputting angle backets for example), since this causes my template
conditionals to not work properly (there's always some strings output -
the angle brackets and template names - so conditional is never empty);
I think what might be useful here is a way to separate those "template
debugging outputs" from my "usual expected" outputs. Perhaps stdout and
stderr, except you'd probably need a .sync/ .flush after each element is
output, so that the streams 'merge' properly, so that on the screen
(stdout + stderr), you the output which includes debugging output, but
in my output file and within the template processing proper (just
stdout) normal ST output would appear. All that disk/ stream syncing
would slow things down, but we're in debugging mode, so that's
expected...

Make sense?


-- 
Homepage: www.SoulSound.net -- Free Australia: www.UPMART.org
Please respect the confidentiality of this email as sensibly warranted.

From iztok.kavkler at fmf.uni-lj.si  Mon Oct 12 01:43:21 2009
From: iztok.kavkler at fmf.uni-lj.si (Iztok Kavkler)
Date: Mon, 12 Oct 2009 10:43:21 +0200
Subject: [stringtemplate-interest] render vs toString
In-Reply-To: <DE78559F-06C0-48AD-B9D2-ED098AFA8FBD@cs.usfca.edu>
References: <DE78559F-06C0-48AD-B9D2-ED098AFA8FBD@cs.usfca.edu>
Message-ID: <4AD2EC29.8000502@fmf.uni-lj.si>

> heh, it's pretty hard to debug ST when the debugger calls toString all  
> the time on the templates. Using render makes much more sense.  But,  
> from a user perspective do you folks also run into trouble because of  
> this or is it only debugging ST itself that is troubled by toString()?
> Ter 
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest

I agree this is a problem. I remember I had to turn off debugger
variable rendering when I debugged a program using ST.

Iztok

From sharwell at pixelminegames.com  Mon Oct 12 05:56:48 2009
From: sharwell at pixelminegames.com (Sam Harwell)
Date: Mon, 12 Oct 2009 07:56:48 -0500
Subject: [stringtemplate-interest] render vs toString
In-Reply-To: <DE78559F-06C0-48AD-B9D2-ED098AFA8FBD@cs.usfca.edu>
References: <DE78559F-06C0-48AD-B9D2-ED098AFA8FBD@cs.usfca.edu>
Message-ID: <86403CA0939415448BCCB83855EFE09A0123F4D9@Bloodymary.ironwillgames.com>

The problem stems from ST violating the assumption in Java and C# that
toString/ToString are pure functions, i.e. ones with no visible side
effects on program state. I think this can/needs to be solved in either
of two ways: make toString pure or rename it to something like render.
Since changing the name to render is easier to ensure correct results,
that might be the better approach at this point.

Sam

-----Original Message-----
From: stringtemplate-interest-bounces at antlr.org
[mailto:stringtemplate-interest-bounces at antlr.org] On Behalf Of Terence
Parr
Sent: Sunday, October 11, 2009 3:53 PM
To: stringtemplate-interest Template
Subject: [stringtemplate-interest] render vs toString

heh, it's pretty hard to debug ST when the debugger calls toString all  
the time on the templates. Using render makes much more sense.  But,  
from a user perspective do you folks also run into trouble because of  
this or is it only debugging ST itself that is troubled by toString()?
Ter 
_______________________________________________
stringtemplate-interest mailing list
stringtemplate-interest at antlr.org
http://www.antlr.org/mailman/listinfo/stringtemplate-interest

From jdmitchell at gmail.com  Mon Oct 12 08:24:08 2009
From: jdmitchell at gmail.com (John D. Mitchell)
Date: Mon, 12 Oct 2009 08:24:08 -0700
Subject: [stringtemplate-interest] render vs toString
In-Reply-To: <86403CA0939415448BCCB83855EFE09A0123F4D9@Bloodymary.ironwillgames.com>
References: <DE78559F-06C0-48AD-B9D2-ED098AFA8FBD@cs.usfca.edu>
	<86403CA0939415448BCCB83855EFE09A0123F4D9@Bloodymary.ironwillgames.com>
Message-ID: <BFDED9AD-E7DD-4F6B-B49D-19E92C7A304B@gmail.com>

++

John

On Oct 12, 2009, at 05:56 , Sam Harwell wrote:

> The problem stems from ST violating the assumption in Java and C# that
> toString/ToString are pure functions, i.e. ones with no visible side
> effects on program state. I think this can/needs to be solved in  
> either
> of two ways: make toString pure or rename it to something like render.
> Since changing the name to render is easier to ensure correct results,
> that might be the better approach at this point.
>
> Sam
>
> -----Original Message-----
> From: stringtemplate-interest-bounces at antlr.org
> [mailto:stringtemplate-interest-bounces at antlr.org] On Behalf Of  
> Terence
> Parr
> Sent: Sunday, October 11, 2009 3:53 PM
> To: stringtemplate-interest Template
> Subject: [stringtemplate-interest] render vs toString
>
> heh, it's pretty hard to debug ST when the debugger calls toString all
> the time on the templates. Using render makes much more sense.  But,
> from a user perspective do you folks also run into trouble because of
> this or is it only debugging ST itself that is troubled by toString()?
> Ter
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest


From parrt at cs.usfca.edu  Mon Oct 12 12:24:16 2009
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon, 12 Oct 2009 12:24:16 -0700
Subject: [stringtemplate-interest] render vs toString
In-Reply-To: <20091011231052.GA4165@ip61>
References: <DE78559F-06C0-48AD-B9D2-ED098AFA8FBD@cs.usfca.edu>
	<20091011231052.GA4165@ip61>
Message-ID: <0B8351F2-2FA1-492C-B9E2-14C66E41A01C@cs.usfca.edu>

Could we add a GUI widget to display the results?
Ter
On Oct 11, 2009, at 4:10 PM, Zenaan Harkness wrote:

> On Sun, Oct 11, 2009 at 01:52:59PM -0700, Terence Parr wrote:
>> heh, it's pretty hard to debug ST when the debugger calls toString  
>> all
>> the time on the templates. Using render makes much more sense.  But,
>> from a user perspective do you folks also run into trouble because of
>> this or is it only debugging ST itself that is troubled by toString 
>> ()?
>
> Never been a problem for me, an ST user.
>
> When I'm debugging, I'm mostly debugging templates - I use a simple
> driver model, so not a lot of code to handle, but plenty of templates.
>
> Sor example, this causes difficulty when I use template debugging mode
> (outputting angle backets for example), since this causes my template
> conditionals to not work properly (there's always some strings  
> output -
> the angle brackets and template names - so conditional is never  
> empty);
> I think what might be useful here is a way to separate those "template
> debugging outputs" from my "usual expected" outputs. Perhaps stdout  
> and
> stderr, except you'd probably need a .sync/ .flush after each  
> element is
> output, so that the streams 'merge' properly, so that on the screen
> (stdout + stderr), you the output which includes debugging output, but
> in my output file and within the template processing proper (just
> stdout) normal ST output would appear. All that disk/ stream syncing
> would slow things down, but we're in debugging mode, so that's
> expected...
>
> Make sense?
>
>
> -- 
> Homepage: www.SoulSound.net -- Free Australia: www.UPMART.org
> Please respect the confidentiality of this email as sensibly  
> warranted.
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest


From parrt at cs.usfca.edu  Mon Oct 12 12:24:31 2009
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon, 12 Oct 2009 12:24:31 -0700
Subject: [stringtemplate-interest] render vs toString
In-Reply-To: <86403CA0939415448BCCB83855EFE09A0123F4D9@Bloodymary.ironwillgames.com>
References: <DE78559F-06C0-48AD-B9D2-ED098AFA8FBD@cs.usfca.edu>
	<86403CA0939415448BCCB83855EFE09A0123F4D9@Bloodymary.ironwillgames.com>
Message-ID: <C0102808-2174-4AD2-A495-610A1F5C3B95@cs.usfca.edu>


On Oct 12, 2009, at 5:56 AM, Sam Harwell wrote:

> The problem stems from ST violating the assumption in Java and C# that
> toString/ToString are pure functions, i.e. ones with no visible side

Yup.  particularly for me they have side-effects when I try to track  
the execution.

Wow. looks like we have consensus!

Ok, i'll make it render() and see how it feels.

Ter

> effects on program state. I think this can/needs to be solved in  
> either
> of two ways: make toString pure or rename it to something like render.
> Since changing the name to render is easier to ensure correct results,
> that might be the better approach at this point.
>
> Sam
>
> -----Original Message-----
> From: stringtemplate-interest-bounces at antlr.org
> [mailto:stringtemplate-interest-bounces at antlr.org] On Behalf Of  
> Terence
> Parr
> Sent: Sunday, October 11, 2009 3:53 PM
> To: stringtemplate-interest Template
> Subject: [stringtemplate-interest] render vs toString
>
> heh, it's pretty hard to debug ST when the debugger calls toString all
> the time on the templates. Using render makes much more sense.  But,
> from a user perspective do you folks also run into trouble because of
> this or is it only debugging ST itself that is troubled by toString()?
> Ter
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest


From parrt at cs.usfca.edu  Mon Oct 12 13:56:57 2009
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon, 12 Oct 2009 13:56:57 -0700
Subject: [stringtemplate-interest] escape char
Message-ID: <64C31A38-59E4-4F51-B132-6125FA9FA7B7@cs.usfca.edu>

So, I'm leaning towards only \< or \$ being an escape sequence outside  
of expressions.  \blech would be \blech in the output not blech.  I  
thik that's how it is now.

What say ye?

T

From sharwell at pixelminegames.com  Mon Oct 12 17:20:06 2009
From: sharwell at pixelminegames.com (Sam Harwell)
Date: Mon, 12 Oct 2009 19:20:06 -0500
Subject: [stringtemplate-interest] escape char
Message-ID: <DD5A5D428FE040429CCDF377FAA892840E4BE1@martini.ironwillgames.com>

As long as it's documented I think that would be both clear and
convenient to users. I think that's what it does now but I didn't
verify.

Sam

-----Original Message-----
From: stringtemplate-interest-bounces at antlr.org
[mailto:stringtemplate-interest-bounces at antlr.org] On Behalf Of Terence
Parr
Sent: Monday, October 12, 2009 3:57 PM
To: stringtemplate-interest Template
Subject: [stringtemplate-interest] escape char

So, I'm leaning towards only \< or \$ being an escape sequence outside  
of expressions.  \blech would be \blech in the output not blech.  I  
thik that's how it is now.

What say ye?

T
_______________________________________________
stringtemplate-interest mailing list
stringtemplate-interest at antlr.org
http://www.antlr.org/mailman/listinfo/stringtemplate-interest



From PARRT at antlr.org  Mon Oct 12 17:34:23 2009
From: PARRT at antlr.org (Terence Parr)
Date: Mon, 12 Oct 2009 17:34:23 -0700
Subject: [stringtemplate-interest] whitespace removal
Message-ID: <D31B6866-1AE5-441A-9769-D1870B58457D@antlr.org>

yo, i trim whitespace at the start and end of templates. easier to add  
\n and spaces in calling templates rather than trying to get rid of  
it.  Even in small templtes it makes sense:

<names:{n | <n>}>

You don't want the space between | and <n> to appear in output.

That means I would keep the "trim ws rule" in v4 as i have in v3.

Ter

From zen at freedbms.net  Mon Oct 12 17:34:48 2009
From: zen at freedbms.net (Zenaan Harkness)
Date: Tue, 13 Oct 2009 11:34:48 +1100
Subject: [stringtemplate-interest] escape char
In-Reply-To: <64C31A38-59E4-4F51-B132-6125FA9FA7B7@cs.usfca.edu>
References: <64C31A38-59E4-4F51-B132-6125FA9FA7B7@cs.usfca.edu>
Message-ID: <20091013003448.GC4586@ip61>

On Mon, Oct 12, 2009 at 01:56:57PM -0700, Terence Parr wrote:
> So, I'm leaning towards only \< or \$ being an escape sequence outside  
> of expressions.  \blech would be \blech in the output not blech.  I  
> thik that's how it is now.

Glad you asked :)

Very usefully, YAML (yaml.org) crowd have been deeply involved in just
this question, for yaml, in respect of UTF8 vs "Unicode" vs UTF16 etc.

So I refer you to the yaml-core mailing list. Specifically, the
following thread/ subject (it is split into two threads actually, the
first one being the main large one):

   Invalid UTF-8

first thread kicked off by "William Spitzak", on 2009 08 18
second thread kicked off by "Blue GM", on 2009 09 03


I implore a reading of these discussions as have occurred in very useful
detail on yaml-core, as getting escapes 'right' (although more
particularly for a stream markup/ serialization syntax) is essential for
long term sanity. It would behoove us STians to not follow the same
sequence of not-quite-get-it-right three times in a row. Thankfully some
smart brains appeared on yaml-core to resolve the issues in the most
practical long-term way possible. Let's take advantage of that.


If that yaml discussion (Invalid UTF-8) rings true, then we can sort of
copy-n-paste the corresponding section on escapes in the YAML
Specification (oh, did I mention an ST spec might be a good thing? :) :)

Best
Zen

-- 
Homepage: www.SoulSound.net -- Free Australia: www.UPMART.org
Please respect the confidentiality of this email as sensibly warranted.

From parrt at cs.usfca.edu  Mon Oct 12 17:37:03 2009
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon, 12 Oct 2009 17:37:03 -0700
Subject: [stringtemplate-interest] escape char
In-Reply-To: <20091013003448.GC4586@ip61>
References: <64C31A38-59E4-4F51-B132-6125FA9FA7B7@cs.usfca.edu>
	<20091013003448.GC4586@ip61>
Message-ID: <5F856932-DC88-44FF-94A9-F492A900DFB4@cs.usfca.edu>

well, what if i'm generating latex with all it's \box and \tt  
commands?  My rule is that i completely ignore everything outside of  
expressions like <...>. So, it wouldn't make sense to convert \u0009  
to a tab for example.

Ter
On Oct 12, 2009, at 5:34 PM, Zenaan Harkness wrote:

> On Mon, Oct 12, 2009 at 01:56:57PM -0700, Terence Parr wrote:
>> So, I'm leaning towards only \< or \$ being an escape sequence  
>> outside
>> of expressions.  \blech would be \blech in the output not blech.  I
>> thik that's how it is now.
>
> Glad you asked :)
>
> Very usefully, YAML (yaml.org) crowd have been deeply involved in just
> this question, for yaml, in respect of UTF8 vs "Unicode" vs UTF16 etc.
>
> So I refer you to the yaml-core mailing list. Specifically, the
> following thread/ subject (it is split into two threads actually, the
> first one being the main large one):
>
>   Invalid UTF-8
>
> first thread kicked off by "William Spitzak", on 2009 08 18
> second thread kicked off by "Blue GM", on 2009 09 03
>
>
> I implore a reading of these discussions as have occurred in very  
> useful
> detail on yaml-core, as getting escapes 'right' (although more
> particularly for a stream markup/ serialization syntax) is essential  
> for
> long term sanity. It would behoove us STians to not follow the same
> sequence of not-quite-get-it-right three times in a row. Thankfully  
> some
> smart brains appeared on yaml-core to resolve the issues in the most
> practical long-term way possible. Let's take advantage of that.
>
>
> If that yaml discussion (Invalid UTF-8) rings true, then we can sort  
> of
> copy-n-paste the corresponding section on escapes in the YAML
> Specification (oh, did I mention an ST spec might be a good  
> thing? :) :)
>
> Best
> Zen
>
> -- 
> Homepage: www.SoulSound.net -- Free Australia: www.UPMART.org
> Please respect the confidentiality of this email as sensibly  
> warranted.
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest


From jdmitchell at gmail.com  Mon Oct 12 17:37:47 2009
From: jdmitchell at gmail.com (John D. Mitchell)
Date: Mon, 12 Oct 2009 17:37:47 -0700
Subject: [stringtemplate-interest] whitespace removal
In-Reply-To: <D31B6866-1AE5-441A-9769-D1870B58457D@antlr.org>
References: <D31B6866-1AE5-441A-9769-D1870B58457D@antlr.org>
Message-ID: <8DA86CB7-4AF9-4D83-BD18-1F0CE0511DE3@gmail.com>

Yes!  If you don't then I'll come over and beat you!

:-),
John

On Oct 12, 2009, at 17:34 , Terence Parr wrote:

> yo, i trim whitespace at the start and end of templates. easier to add
> \n and spaces in calling templates rather than trying to get rid of
> it.  Even in small templtes it makes sense:
>
> <names:{n | <n>}>
>
> You don't want the space between | and <n> to appear in output.
>
> That means I would keep the "trim ws rule" in v4 as i have in v3.
>
> Ter
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest


From zen at freedbms.net  Mon Oct 12 17:37:58 2009
From: zen at freedbms.net (Zenaan Harkness)
Date: Tue, 13 Oct 2009 11:37:58 +1100
Subject: [stringtemplate-interest] render vs toString
In-Reply-To: <C0102808-2174-4AD2-A495-610A1F5C3B95@cs.usfca.edu>
References: <DE78559F-06C0-48AD-B9D2-ED098AFA8FBD@cs.usfca.edu>
	<86403CA0939415448BCCB83855EFE09A0123F4D9@Bloodymary.ironwillgames.com>
	<C0102808-2174-4AD2-A495-610A1F5C3B95@cs.usfca.edu>
Message-ID: <20091013003758.GD4586@ip61>

On Mon, Oct 12, 2009 at 12:24:31PM -0700, Terence Parr wrote:
> 
> On Oct 12, 2009, at 5:56 AM, Sam Harwell wrote:
> 
> > The problem stems from ST violating the assumption in Java and C# that
> > toString/ToString are pure functions, i.e. ones with no visible side
> 
> Yup.  particularly for me they have side-effects when I try to track  
> the execution.
> 
> Wow. looks like we have consensus!
> 
> Ok, i'll make it render() and see how it feels.

Ack! ++!

feels great already :)


> 
> Ter
> 
> > effects on program state. I think this can/needs to be solved in  
> > either
> > of two ways: make toString pure or rename it to something like render.
> > Since changing the name to render is easier to ensure correct results,
> > that might be the better approach at this point.
> >
> > Sam
> >
> > -----Original Message-----
> > From: stringtemplate-interest-bounces at antlr.org
> > [mailto:stringtemplate-interest-bounces at antlr.org] On Behalf Of  
> > Terence
> > Parr
> > Sent: Sunday, October 11, 2009 3:53 PM
> > To: stringtemplate-interest Template
> > Subject: [stringtemplate-interest] render vs toString
> >
> > heh, it's pretty hard to debug ST when the debugger calls toString all
> > the time on the templates. Using render makes much more sense.  But,
> > from a user perspective do you folks also run into trouble because of
> > this or is it only debugging ST itself that is troubled by toString()?
> > Ter
> > _______________________________________________
> > stringtemplate-interest mailing list
> > stringtemplate-interest at antlr.org
> > http://www.antlr.org/mailman/listinfo/stringtemplate-interest
> 
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest

-- 
Homepage: www.SoulSound.net -- Free Australia: www.UPMART.org
Please respect the confidentiality of this email as sensibly warranted.

From PARRT at antlr.org  Mon Oct 12 17:38:46 2009
From: PARRT at antlr.org (Terence Parr)
Date: Mon, 12 Oct 2009 17:38:46 -0700
Subject: [stringtemplate-interest] whitespace removal
In-Reply-To: <8DA86CB7-4AF9-4D83-BD18-1F0CE0511DE3@gmail.com>
References: <D31B6866-1AE5-441A-9769-D1870B58457D@antlr.org>
	<8DA86CB7-4AF9-4D83-BD18-1F0CE0511DE3@gmail.com>
Message-ID: <73F609D1-103B-438D-BABE-D095788D163E@antlr.org>

yeah, makes sense...can you imagine me having to fix all those antlr  
gen templates? gack.
Ter
On Oct 12, 2009, at 5:37 PM, John D. Mitchell wrote:

> Yes!  If you don't then I'll come over and beat you!
>
> :-),
> John
>
> On Oct 12, 2009, at 17:34 , Terence Parr wrote:
>
>> yo, i trim whitespace at the start and end of templates. easier to  
>> add
>> \n and spaces in calling templates rather than trying to get rid of
>> it.  Even in small templtes it makes sense:
>>
>> <names:{n | <n>}>
>>
>> You don't want the space between | and <n> to appear in output.
>>
>> That means I would keep the "trim ws rule" in v4 as i have in v3.
>>
>> Ter
>> _______________________________________________
>> stringtemplate-interest mailing list
>> stringtemplate-interest at antlr.org
>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest


From parrt at cs.usfca.edu  Mon Oct 12 17:40:35 2009
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon, 12 Oct 2009 17:40:35 -0700
Subject: [stringtemplate-interest] render vs toString
In-Reply-To: <20091013003758.GD4586@ip61>
References: <DE78559F-06C0-48AD-B9D2-ED098AFA8FBD@cs.usfca.edu>
	<86403CA0939415448BCCB83855EFE09A0123F4D9@Bloodymary.ironwillgames.com>
	<C0102808-2174-4AD2-A495-610A1F5C3B95@cs.usfca.edu>
	<20091013003758.GD4586@ip61>
Message-ID: <3B4E4ECD-E00D-4489-8D65-1B4C1B70FC26@cs.usfca.edu>

On Oct 12, 2009, at 5:37 PM, Zenaan Harkness wrote:
> feels great already :)

feels great to clean up ST!

E.g., all templates will require attribute definitions this time  
unless you use <it> or $it$ even in separate files. in bold.st:

bold(i) ::= "<b>$i$</b>"

Ter

From zen at freedbms.net  Mon Oct 12 17:41:49 2009
From: zen at freedbms.net (Zenaan Harkness)
Date: Tue, 13 Oct 2009 11:41:49 +1100
Subject: [stringtemplate-interest] render vs toString
In-Reply-To: <0B8351F2-2FA1-492C-B9E2-14C66E41A01C@cs.usfca.edu>
References: <DE78559F-06C0-48AD-B9D2-ED098AFA8FBD@cs.usfca.edu>
	<20091011231052.GA4165@ip61>
	<0B8351F2-2FA1-492C-B9E2-14C66E41A01C@cs.usfca.edu>
Message-ID: <20091013004149.GE4586@ip61>

Of course, entirely possible, and quite desirable by some I'm sure.

However, primary interface for using any and all ST features should
begin as command-line/ pipe/ unix text streams.

It would be sad to lose the "it can all be done without a gui" feature
of ST (as in, including certain debugging steps). At least, where it's
not otherwise necessary to break command line compatibility, let's not!

If for some reason, stdout and stderr are too arcane for your likings,
or not cross-platform compatible or something, then simply add an option
for the "debug output version" to go into a specified file.

cheers
zen


On Mon, Oct 12, 2009 at 12:24:16PM -0700, Terence Parr wrote:
> Could we add a GUI widget to display the results?
> Ter
> On Oct 11, 2009, at 4:10 PM, Zenaan Harkness wrote:
>
>> On Sun, Oct 11, 2009 at 01:52:59PM -0700, Terence Parr wrote:
>>> heh, it's pretty hard to debug ST when the debugger calls toString  
>>> all
>>> the time on the templates. Using render makes much more sense.  But,
>>> from a user perspective do you folks also run into trouble because of
>>> this or is it only debugging ST itself that is troubled by toString 
>>> ()?
>>
>> Never been a problem for me, an ST user.
>>
>> When I'm debugging, I'm mostly debugging templates - I use a simple
>> driver model, so not a lot of code to handle, but plenty of templates.
>>
>> Sor example, this causes difficulty when I use template debugging mode
>> (outputting angle backets for example), since this causes my template
>> conditionals to not work properly (there's always some strings output -
>> the angle brackets and template names - so conditional is never  
>> empty);
>> I think what might be useful here is a way to separate those "template
>> debugging outputs" from my "usual expected" outputs. Perhaps stdout  
>> and
>> stderr, except you'd probably need a .sync/ .flush after each element 
>> is
>> output, so that the streams 'merge' properly, so that on the screen
>> (stdout + stderr), you the output which includes debugging output, but
>> in my output file and within the template processing proper (just
>> stdout) normal ST output would appear. All that disk/ stream syncing
>> would slow things down, but we're in debugging mode, so that's
>> expected...
>>
>> Make sense?
>>
>>
>> -- 
>> Homepage: www.SoulSound.net -- Free Australia: www.UPMART.org
>> Please respect the confidentiality of this email as sensibly  
>> warranted.
>> _______________________________________________
>> stringtemplate-interest mailing list
>> stringtemplate-interest at antlr.org
>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest

-- 
Homepage: www.SoulSound.net -- Free Australia: www.UPMART.org
Please respect the confidentiality of this email as sensibly warranted.

From zen at freedbms.net  Mon Oct 12 18:05:36 2009
From: zen at freedbms.net (Zenaan Harkness)
Date: Tue, 13 Oct 2009 12:05:36 +1100
Subject: [stringtemplate-interest] escape char
In-Reply-To: <5F856932-DC88-44FF-94A9-F492A900DFB4@cs.usfca.edu>
References: <64C31A38-59E4-4F51-B132-6125FA9FA7B7@cs.usfca.edu>
	<20091013003448.GC4586@ip61>
	<5F856932-DC88-44FF-94A9-F492A900DFB4@cs.usfca.edu>
Message-ID: <20091013010536.GF4586@ip61>

On Mon, Oct 12, 2009 at 05:37:03PM -0700, Terence Parr wrote:
> well, what if i'm generating latex with all it's \box and \tt commands?  
> My rule is that i completely ignore everything outside of expressions 
> like <...>. So, it wouldn't make sense to convert \u0009 to a tab for 
> example.

Mmm. Yes, ST is a different context to YAML. ST is about _generating_
content, whereas YAML is just about _storing_ or representing content.

cheers
zen

-- 
Homepage: www.SoulSound.net -- Free Australia: www.UPMART.org
Please respect the confidentiality of this email as sensibly warranted.

From zen at freedbms.net  Mon Oct 12 18:08:08 2009
From: zen at freedbms.net (Zenaan Harkness)
Date: Tue, 13 Oct 2009 12:08:08 +1100
Subject: [stringtemplate-interest] render vs toString
In-Reply-To: <3B4E4ECD-E00D-4489-8D65-1B4C1B70FC26@cs.usfca.edu>
References: <DE78559F-06C0-48AD-B9D2-ED098AFA8FBD@cs.usfca.edu>
	<86403CA0939415448BCCB83855EFE09A0123F4D9@Bloodymary.ironwillgames.com>
	<C0102808-2174-4AD2-A495-610A1F5C3B95@cs.usfca.edu>
	<20091013003758.GD4586@ip61>
	<3B4E4ECD-E00D-4489-8D65-1B4C1B70FC26@cs.usfca.edu>
Message-ID: <20091013010808.GG4586@ip61>

On Mon, Oct 12, 2009 at 05:40:35PM -0700, Terence Parr wrote:
> On Oct 12, 2009, at 5:37 PM, Zenaan Harkness wrote:
>> feels great already :)
>
> feels great to clean up ST!
>
> E.g., all templates will require attribute definitions this time unless 
> you use <it> or $it$ even in separate files. in bold.st:
>
> bold(i) ::= "<b>$i$</b>"

Nice. Very pleasing to have this particular bit of greater consistency.

-- 
Homepage: www.SoulSound.net -- Free Australia: www.UPMART.org
Please respect the confidentiality of this email as sensibly warranted.

From baerrach at gmail.com  Mon Oct 12 21:58:59 2009
From: baerrach at gmail.com (Barrie Treloar)
Date: Tue, 13 Oct 2009 15:28:59 +1030
Subject: [stringtemplate-interest] Attribute definitions,
	Group files and Templates.
Message-ID: <f6b307f10910122158n74b1b66dwa1740f6dc3dee322@mail.gmail.com>

The other thread about cleaning up ST made me check Jira for one of
the things I wanted while working with ST.

I wanted to use a directory for my TemplateGroup instead of a file.
As the size of my templates would make the group file massive and unwieldy.

I think the only reason I wanted a group was so I could get attribute
definitions in my templates.
If the new version of ST will allow me to do this for template files
then I think I dont need TemplateGroup as a directory instead of a
file.
Can anyone see the values of having TemplateGroups as a directory then?

From zen at freedbms.net  Mon Oct 12 23:53:01 2009
From: zen at freedbms.net (Zenaan Harkness)
Date: Tue, 13 Oct 2009 17:53:01 +1100
Subject: [stringtemplate-interest] Attribute definitions,
	Group files	and Templates.
In-Reply-To: <f6b307f10910122158n74b1b66dwa1740f6dc3dee322@mail.gmail.com>
References: <f6b307f10910122158n74b1b66dwa1740f6dc3dee322@mail.gmail.com>
Message-ID: <20091013065301.GK4586@ip61>

On Tue, Oct 13, 2009 at 03:28:59PM +1030, Barrie Treloar wrote:
> The other thread about cleaning up ST made me check Jira for one of
> the things I wanted while working with ST.
> 
> I wanted to use a directory for my TemplateGroup instead of a file.
> As the size of my templates would make the group file massive and unwieldy.
> 
> I think the only reason I wanted a group was so I could get attribute
> definitions in my templates.
> If the new version of ST will allow me to do this for template files
> then I think I dont need TemplateGroup as a directory instead of a
> file.
> Can anyone see the values of having TemplateGroups as a directory then?

I rather like the structured Java-like approach:

   -  Directories correspond to java 'Packages', or "ST Packages"
      ie groups of ST TemplateGroups.
   -  Files correspond to classes, ie ST TemplateGroup files.
   -  Individual ST templates can be in a single file,
      BUT, for uniformity (ala Java), should still be a TemplateGroup.


   -  Next, TemplateGroups (just Group perhaps??), have an inheritance
      hierarchy ("extends", like Java classes).
   -  Multiple inheritance, would help big time for me.
      -  I have a "lib" ST group
      -  I have a language specific group (eg. Java, C#), sort of
         specialized 'lib' groups
      -  I have specific lower level/ operational groups which often
         need to inherit templates from different parent lines.

   -  Ie, I am using the TemplateGroup to bring sanity to the number and
      structure of templates.
   -  Without multiple inheritance, I am required to do some really
      hacky temporary file munging, to ensure that all groups I need
      ultimately form a single-inheritance hierarchy.

   -  A good language (eg. Java, ST), provides facilities to competantly
      manage complexity.
   -  Current versions of ST do not provide adequate complexity
      management facilities for larger projects.
   -  So, whether MultipleInheritance, or something else (eg. "mixin"
      pattern is the more robust way than "inheritance" pattern to
      componentize, where possible, at least when it comes to
      programming languages), another tool within ST for complexity
      management is required.

   -  It is my belief, that because ST is a declarative generative
      language, multiple-inheritance should not pose anywhere near the
      fine grained difficulties that we see for example in C++ MI.


So, directories are a fine and natural (given current and foreseeable
OSes) tool for grouping of files, and therefore a useful tool for
complexity management, which tool we _are_ currently using in ST.

To have TemplateGroups _be_ a directory, is comparable (comparison with
Java) to having a class of functions/methods, _be_ a directory - ie
splitting out each method into its own file, and having all those files
in a directory, and the directory be the java Class.

Of course, historically, it made sense - ST was built piece by piece,
and started out with much less features than it has now. thankfully,
despite feature growth,

   --== ST remains the only template engine to
        consistently separate view from model. ==--

And THAT is quite an achievement, for which we can thank Ter's rigorous
analysis in the first instance, written paper, and ongoing education and
commitment to this foundation principle (now of course supported by we
the ST community).

I have been convinced for some years now, since I first studied and
began my own ST journey, that ST's day is yet to truly begin. And I
think that with a spec :), the cleanup now in progress (thanks Ter), and
just a few little extra features (including in particular something akin
to multiple inheritance/ one more complexity management tool), then ST
has the potential to be the foundation of an amazing renaissance in
programming/ software development. Time will tell of course :)

cheers
zen

-- 
Homepage: www.SoulSound.net -- Free Australia: www.UPMART.org
Please respect the confidentiality of this email as sensibly warranted.

From parrt at cs.usfca.edu  Tue Oct 13 16:14:23 2009
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue, 13 Oct 2009 16:14:23 -0700
Subject: [stringtemplate-interest] "\n" goes away
Message-ID: <4CABBCA3-FBD2-431A-A25E-A1CD06F40906@cs.usfca.edu>

Hi, i allowed

<expr; separator="\n">

previously to mean newline separator, but that makes no sense.  "\n"  
is a 2 char sequence just like it is in between template expressions.   
But making you do

<expr; separator={<\n>}>

is a bit long.  It's *always* comma or newline. seems we should make  
it easier to say.  we use it constantly.

As far as i can tell, we have these options: wrap, anchor, null,  
separator, format.  Is there a better way to do those too?  How would  
we do this differently?

<values; anchor, wrap="\n", separator=",">

Ideas?  I've wrestled with this for years and can't come up with  
better syntax.

Ter


From zen at freedbms.net  Tue Oct 13 17:53:47 2009
From: zen at freedbms.net (Zenaan Harkness)
Date: Wed, 14 Oct 2009 11:53:47 +1100
Subject: [stringtemplate-interest] "\n" goes away
In-Reply-To: <4CABBCA3-FBD2-431A-A25E-A1CD06F40906@cs.usfca.edu>
References: <4CABBCA3-FBD2-431A-A25E-A1CD06F40906@cs.usfca.edu>
Message-ID: <20091014005347.GB4366@ip61>

On Tue, Oct 13, 2009 at 04:14:23PM -0700, Terence Parr wrote:
> Hi, i allowed
> 
> <expr; separator="\n">
> 
> previously to mean newline separator, but that makes no sense.  "\n"  
> is a 2 char sequence just like it is in between template expressions.   
> But making you do
> 
> <expr; separator={<\n>}>
> 
> is a bit long.  It's *always* comma or newline. seems we should make  
> it easier to say.  we use it constantly.
> 
> As far as i can tell, we have these options: wrap, anchor, null,  
> separator, format.  Is there a better way to do those too?  How would  
> we do this differently?
> 
> <values; anchor, wrap="\n", separator=",">

Good question. Would be really nice to simplify.

I've often thought abbreviation "sep" was intuitive, to me (for
'separator' of course).

-- 
Homepage: www.SoulSound.net -- Free Australia: www.UPMART.org
Please respect the confidentiality of this email as sensibly warranted.

From parrt at cs.usfca.edu  Tue Oct 13 18:10:45 2009
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue, 13 Oct 2009 18:10:45 -0700
Subject: [stringtemplate-interest] "\n" goes away
In-Reply-To: <20091014005347.GB4366@ip61>
References: <4CABBCA3-FBD2-431A-A25E-A1CD06F40906@cs.usfca.edu>
	<20091014005347.GB4366@ip61>
Message-ID: <686C10DA-2FEF-4C9B-B19F-D76C214BFD55@cs.usfca.edu>


On Oct 13, 2009, at 5:53 PM, Zenaan Harkness wrote:
> Good question. Would be really nice to simplify.
>
> I've often thought abbreviation "sep" was intuitive, to me (for
> 'separator' of course).

Was thinking of that but it's more of a question of what to do with  
"\n" not so much the names.

Ter

From bill at artima.com  Tue Oct 13 20:41:47 2009
From: bill at artima.com (Bill Venners)
Date: Tue, 13 Oct 2009 20:41:47 -0700
Subject: [stringtemplate-interest] "\n" goes away
In-Reply-To: <4CABBCA3-FBD2-431A-A25E-A1CD06F40906@cs.usfca.edu>
References: <4CABBCA3-FBD2-431A-A25E-A1CD06F40906@cs.usfca.edu>
Message-ID: <3b8d0de60910132041m7847c00cs39627c562e6c577a@mail.gmail.com>

Hi Terence,

How about a newline keyword? Something like:

<expr; separator=newline>

Verbose, and an extra keyword, but clear.

Bill

On Tue, Oct 13, 2009 at 4:14 PM, Terence Parr <parrt at cs.usfca.edu> wrote:
> Hi, i allowed
>
> <expr; separator="\n">
>
> previously to mean newline separator, but that makes no sense. ?"\n"
> is a 2 char sequence just like it is in between template expressions.
> But making you do
>
> <expr; separator={<\n>}>
>
> is a bit long. ?It's *always* comma or newline. seems we should make
> it easier to say. ?we use it constantly.
>
> As far as i can tell, we have these options: wrap, anchor, null,
> separator, format. ?Is there a better way to do those too? ?How would
> we do this differently?
>
> <values; anchor, wrap="\n", separator=",">
>
> Ideas? ?I've wrestled with this for years and can't come up with
> better syntax.
>
> Ter
>
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>



-- 
Bill Venners
Artima, Inc.
http://www.artima.com

From zen at freedbms.net  Tue Oct 13 23:21:29 2009
From: zen at freedbms.net (Zenaan Harkness)
Date: Wed, 14 Oct 2009 17:21:29 +1100
Subject: [stringtemplate-interest] "\n" goes away
In-Reply-To: <3b8d0de60910132041m7847c00cs39627c562e6c577a@mail.gmail.com>
References: <4CABBCA3-FBD2-431A-A25E-A1CD06F40906@cs.usfca.edu>
	<3b8d0de60910132041m7847c00cs39627c562e6c577a@mail.gmail.com>
Message-ID: <20091014062129.GB11894@ip61>

BTW, to everyone, are there any objections to a "please bottom-post if
you remember" convention? I find bottom-posting to be much clearer to
follow later on... (also it's an age-old internet convention...)

On Tue, Oct 13, 2009 at 08:41:47PM -0700, Bill Venners wrote:
> Hi Terence,
> 
> How about a newline keyword? Something like:
> 
> <expr; separator=newline>
> 
> Verbose, and an extra keyword, but clear.

Hi Bill, how would you then write a separator of 'two spaces, followed
by a newline, follwed by a single tab character, followed by two more
spaces'??


> On Tue, Oct 13, 2009 at 4:14 PM, Terence Parr <parrt at cs.usfca.edu> wrote:
> > Hi, i allowed
> >
> > <expr; separator="\n">
> >
> > previously to mean newline separator, but that makes no sense. ?"\n"
> > is a 2 char sequence just like it is in between template expressions.
> > But making you do
> >
> > <expr; separator={<\n>}>
> >
> > is a bit long. ?It's *always* comma or newline. seems we should make
> > it easier to say. ?we use it constantly.
> >
> > As far as i can tell, we have these options: wrap, anchor, null,
> > separator, format. ?Is there a better way to do those too? ?How would
> > we do this differently?
> >
> > <values; anchor, wrap="\n", separator=",">
> >
> > Ideas? ?I've wrestled with this for years and can't come up with
> > better syntax.
> >
> > Ter
> >
> > _______________________________________________
> > stringtemplate-interest mailing list
> > stringtemplate-interest at antlr.org
> > http://www.antlr.org/mailman/listinfo/stringtemplate-interest
> >
> 
> 
> 
> -- 
> Bill Venners
> Artima, Inc.
> http://www.artima.com
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest

-- 
Homepage: www.SoulSound.net -- Free Australia: www.UPMART.org
Please respect the confidentiality of this email as sensibly warranted.

From parrt at cs.usfca.edu  Wed Oct 14 12:07:58 2009
From: parrt at cs.usfca.edu (Terence Parr)
Date: Wed, 14 Oct 2009 12:07:58 -0700
Subject: [stringtemplate-interest] "\n" goes away
In-Reply-To: <3b8d0de60910132041m7847c00cs39627c562e6c577a@mail.gmail.com>
References: <4CABBCA3-FBD2-431A-A25E-A1CD06F40906@cs.usfca.edu>
	<3b8d0de60910132041m7847c00cs39627c562e6c577a@mail.gmail.com>
Message-ID: <B1DC9ED1-A734-47EA-8696-B8481B9A96C6@cs.usfca.edu>

what thinking about that too. or NL.
Ter

On Oct 13, 2009, at 8:41 PM, Bill Venners wrote:

> Hi Terence,
>
> How about a newline keyword? Something like:
>
> <expr; separator=newline>
>
> Verbose, and an extra keyword, but clear.
>
> Bill


From parrt at cs.usfca.edu  Wed Oct 14 12:09:02 2009
From: parrt at cs.usfca.edu (Terence Parr)
Date: Wed, 14 Oct 2009 12:09:02 -0700
Subject: [stringtemplate-interest] "\n" goes away
In-Reply-To: <20091014062129.GB11894@ip61>
References: <4CABBCA3-FBD2-431A-A25E-A1CD06F40906@cs.usfca.edu>
	<3b8d0de60910132041m7847c00cs39627c562e6c577a@mail.gmail.com>
	<20091014062129.GB11894@ip61>
Message-ID: <E980A6E0-F312-4FBB-812F-CDCC3E1CBEB7@cs.usfca.edu>


On Oct 13, 2009, at 11:21 PM, Zenaan Harkness wrote:
> On Tue, Oct 13, 2009 at 08:41:47PM -0700, Bill Venners wrote:
>> Hi Terence,
>>
>> How about a newline keyword? Something like:
>>
>> <expr; separator=newline>
>>
>> Verbose, and an extra keyword, but clear.
>
> Hi Bill, how would you then write a separator of 'two spaces, followed
> by a newline, follwed by a single tab character, followed by two more
> spaces'??

Ah. good point. now it would be:

separator={ <\n> }

I guess that's not horrible, but...

Ter

From ron.koerner at wincor-nixdorf.com  Thu Oct 15 01:32:30 2009
From: ron.koerner at wincor-nixdorf.com (Koerner, Ron)
Date: Thu, 15 Oct 2009 10:32:30 +0200
Subject: [stringtemplate-interest] "\n" goes away
In-Reply-To: <E980A6E0-F312-4FBB-812F-CDCC3E1CBEB7@cs.usfca.edu>
References: <4CABBCA3-FBD2-431A-A25E-A1CD06F40906@cs.usfca.edu>
	<3b8d0de60910132041m7847c00cs39627c562e6c577a@mail.gmail.com>
	<20091014062129.GB11894@ip61>
	<E980A6E0-F312-4FBB-812F-CDCC3E1CBEB7@cs.usfca.edu>
Message-ID: <DA44747BB658FC49B2705BB549F002C589921C9EDB@DEEXVS31.wincor-nixdorf.com>

> On Oct 13, 2009, at 11:21 PM, Zenaan Harkness wrote:
> > On Tue, Oct 13, 2009 at 08:41:47PM -0700, Bill Venners wrote:
> >> Hi Terence,
> >>
> >> How about a newline keyword? Something like:
> >>
> >> <expr; separator=newline>
> >>
> >> Verbose, and an extra keyword, but clear.
> >
> > Hi Bill, how would you then write a separator of 'two 
> spaces, followed
> > by a newline, follwed by a single tab character, followed 
> by two more
> > spaces'??
> 
> Ah. good point. now it would be:
> 
> separator={ <\n> }
> 
> I guess that's not horrible, but...
> 
> Ter

What about both? Allow:

   <expr; sep=nl>

for easy/common case, as well as:

   <expr; sep={  <\n><\t>  }

for the uncommon case, as well as:

   mailsep() ::= "$\n$> "

   $expr; sep=mailsep$


Actually you could combine first and last case by defining a always accessible template named "nl" which consists just of a newline.
This would not require but benefit greatly by multiple inheritance (mis)used to include general utility template libraries which was discussed in another post.

Regards,
Ron
-- 
WINCOR NIXDORF International GmbH 
Sitz der Gesellschaft: Paderborn 
Registergericht Paderborn HRB 3507
Gesch?ftsf?hrer: Eckard Heidloff (Vorsitzender), Stefan Auerbach, Dr. J?rgen Wunram
Vorsitzender des Aufsichtsrats: Karl-Heinz Stiller 
Steuernummer: 339/5884/0020 - Ust-ID Nr.: DE812927716 - WEEE-Reg.-Nr. DE44477193

Diese E-Mail enth?lt vertrauliche Informationen. Wenn Sie nicht der richtige Adressat sind oder diese E-Mail irrt?mlich erhalten haben, informieren Sie bitte sofort den Absender und vernichten Sie diese E-Mail. Das unerlaubte Kopieren sowie die unbefugte Weitergabe dieser E-Mail ist nicht gestattet.

This e-mail may contain confidential information. If you are not the intended recipient (or have received this e-mail in error) please notify the sender immediately and destroy this e-mail. Any unauthorised copying, disclosure or distribution of the material in this e-mail is strictly forbidden. 


From parrt at cs.usfca.edu  Thu Oct 15 11:54:09 2009
From: parrt at cs.usfca.edu (Terence Parr)
Date: Thu, 15 Oct 2009 11:54:09 -0700
Subject: [stringtemplate-interest] "\n" goes away
In-Reply-To: <DA44747BB658FC49B2705BB549F002C589921C9EDB@DEEXVS31.wincor-nixdorf.com>
References: <4CABBCA3-FBD2-431A-A25E-A1CD06F40906@cs.usfca.edu>
	<3b8d0de60910132041m7847c00cs39627c562e6c577a@mail.gmail.com>
	<20091014062129.GB11894@ip61>
	<E980A6E0-F312-4FBB-812F-CDCC3E1CBEB7@cs.usfca.edu>
	<DA44747BB658FC49B2705BB549F002C589921C9EDB@DEEXVS31.wincor-nixdorf.com>
Message-ID: <FA136CAA-FBB0-47D6-AECA-87F8E22F0A61@cs.usfca.edu>


On Oct 15, 2009, at 1:32 AM, Koerner, Ron wrote:
>> Ah. good point. now it would be:
>>
>> separator={ <\n> }
>>
>> I guess that's not horrible, but...
>>
>> Ter
>
> What about both? Allow:
>
>   <expr; sep=nl>
>

I'm worried about introducing another keyword. would "nl" be  
disallowed then as an attribute?

Ter


From parrt at cs.usfca.edu  Thu Oct 15 12:25:19 2009
From: parrt at cs.usfca.edu (Terence Parr)
Date: Thu, 15 Oct 2009 12:25:19 -0700
Subject: [stringtemplate-interest] null vs missing vs empty vs nonexistent
Message-ID: <DA1CE769-CD1B-4C87-83BF-7E195DB5B41E@cs.usfca.edu>

Ok, we have an important choice to make. Thanks to Bill Venners were  
bringing this up last year. It's important enough and long enough that  
I added to my blog:

http://tinyurl.com/parrt-on-null-attributes

Here is my summary from the bottom of the page:

> Ok, I think I just convinced myself that we'll allow null-valued  
> attributes and that we will treat them differently than missing  
> attributes. Secondly, null option only applies to present but null- 
> valued attributes.

Is it just me or am I cranking through the reimplementation of ST? The  
only thing that slows me down is thinking hard about the quirks of v3.

Ter

From gwlist at grahamwideman.com  Thu Oct 15 13:53:21 2009
From: gwlist at grahamwideman.com (Graham Wideman)
Date: Thu, 15 Oct 2009 13:53:21 -0700
Subject: [stringtemplate-interest] null vs missing vs empty vs
 nonexistent
In-Reply-To: <DA1CE769-CD1B-4C87-83BF-7E195DB5B41E@cs.usfca.edu>
Message-ID: <4.1.20091015134904.01aa7288@grahamwideman.com>

If you're worried about whether the missing case should or should not be treated like null, might you consider a missing="something" option to parallel null="something"?

-- Graham

At 10/15/2009 12:25 PM, you wrote:
>Ok, we have an important choice to make. Thanks to Bill Venners were  
>bringing this up last year. It's important enough and long enough that  
>I added to my blog:
>
>http://tinyurl.com/parrt-on-null-attributes
>
>Here is my summary from the bottom of the page:


From parrt at cs.usfca.edu  Thu Oct 15 13:56:14 2009
From: parrt at cs.usfca.edu (Terence Parr)
Date: Thu, 15 Oct 2009 13:56:14 -0700
Subject: [stringtemplate-interest] null vs missing vs empty vs
	nonexistent
In-Reply-To: <4.1.20091015134904.01aa7288@grahamwideman.com>
References: <4.1.20091015134904.01aa7288@grahamwideman.com>
Message-ID: <7A297B42-17CB-413E-AFCF-F44D2DD7663D@cs.usfca.edu>

was thinking about that but figured it'd confuse. we have <if(!foo)foo  
is missing<endif> anyway.
Ter
On Oct 15, 2009, at 1:53 PM, Graham Wideman wrote:

> If you're worried about whether the missing case should or should  
> not be treated like null, might you consider a missing="something"  
> option to parallel null="something"?
>
> -- Graham
>
> At 10/15/2009 12:25 PM, you wrote:
>> Ok, we have an important choice to make. Thanks to Bill Venners were
>> bringing this up last year. It's important enough and long enough  
>> that
>> I added to my blog:
>>
>> http://tinyurl.com/parrt-on-null-attributes
>>
>> Here is my summary from the bottom of the page:
>
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest


From gwlist at grahamwideman.com  Thu Oct 15 14:25:43 2009
From: gwlist at grahamwideman.com (Graham Wideman)
Date: Thu, 15 Oct 2009 14:25:43 -0700
Subject: [stringtemplate-interest] null vs missing vs empty vs
 nonexistent
In-Reply-To: <7A297B42-17CB-413E-AFCF-F44D2DD7663D@cs.usfca.edu>
References: <4.1.20091015134904.01aa7288@grahamwideman.com>
	<4.1.20091015134904.01aa7288@grahamwideman.com>
Message-ID: <4.1.20091015140028.015f5000@grahamwideman.com>


At 10/15/2009 01:56 PM, Terence Parr wrote:
>was thinking about that but figured it'd confuse. we have <if(!foo)foo  
>is missing<endif> anyway.

...though ! appears to have two problems for detecting the missing case: it doesn't distinguish between FALSE and null (and missing if missing is legal here), and docs I think probably aren't clear on whether the missing case is legal and treated like null, or should cause error.

Generally I think if you establish missing as a concept distinct from null, then to minimizing confusion means that everywhere those concepts arise they should get distinct treatment (eg: parallel options in render).

This of course runs into trouble applying boolean operators to what is now becoming a 4-value situation: true-val/false-val/null/missing --> true/false/maybe-error.

:-(

No time as good as a new version to take a stand though!

(BTW, are you really saying there are also empty and nonexistant cases?)

Graham


>Ter
>On Oct 15, 2009, at 1:53 PM, Graham Wideman wrote:
>
>> If you're worried about whether the missing case should or should  
>> not be treated like null, might you consider a missing="something"  
>> option to parallel null="something"?
>>
>> -- Graham
>>
>> At 10/15/2009 12:25 PM, you wrote:
>>> Ok, we have an important choice to make. Thanks to Bill Venners were
>>> bringing this up last year. It's important enough and long enough  
>>> that
>>> I added to my blog:
>>>
>>> http://tinyurl.com/parrt-on-null-attributes
>>>
>>> Here is my summary from the bottom of the page:
>>
>> _______________________________________________
>> stringtemplate-interest mailing list
>> stringtemplate-interest at antlr.org
>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest


From parrt at cs.usfca.edu  Thu Oct 15 16:14:56 2009
From: parrt at cs.usfca.edu (Terence Parr)
Date: Thu, 15 Oct 2009 16:14:56 -0700
Subject: [stringtemplate-interest] null vs missing vs empty vs
	nonexistent
In-Reply-To: <4.1.20091015140028.015f5000@grahamwideman.com>
References: <4.1.20091015134904.01aa7288@grahamwideman.com>
	<4.1.20091015134904.01aa7288@grahamwideman.com>
	<4.1.20091015140028.015f5000@grahamwideman.com>
Message-ID: <F8A12BC5-0240-4F8E-9247-6E1A5450492C@cs.usfca.edu>


On Oct 15, 2009, at 2:25 PM, Graham Wideman wrote:

>
> At 10/15/2009 01:56 PM, Terence Parr wrote:
>> was thinking about that but figured it'd confuse. we have <if(!foo) 
>> foo
>> is missing<endif> anyway.
>
> ...though ! appears to have two problems for detecting the missing  
> case: it doesn't distinguish between FALSE and null (and missing if  
> missing is legal here),

oh crap.  I guess ! would return false if missing or null. Ah. right.  
I just built this:

     protected boolean testAttributeTrue(Object a) {
         if ( a==null ) return false;
         if ( a==MISSING_ATTR ) return false;
	...
     }

> and docs I think probably aren't clear on whether the missing case  
> is legal and treated like null, or should cause error.

Is it ok if missing and null yield false?

> Generally I think if you establish missing as a concept distinct  
> from null, then to minimizing confusion means that everywhere those  
> concepts arise they should get distinct treatment (eg: parallel  
> options in render).

True. very confusing.

> This of course runs into trouble applying boolean operators to what  
> is now becoming a 4-value situation: true-val/false-val/null/missing  
> --> true/false/maybe-error.
>
> :-(

ha! and yes: frown face.

> No time as good as a new version to take a stand though!
>
> (BTW, are you really saying there are also empty and nonexistant  
> cases?)

Empty is like "" and nonexistent/missing is literally nothing.

Crap. BTW, the ST impl code is simple until we deal with this  
concept. :(

Ok, reason this came up was

http://www.antlr.org/pipermail/stringtemplate-interest/2009-July/002020.html

<names:{n | <if(n.cool)><n><endif>}; separator=",">

Previous to 3.2.1 that yielded , , , , , type output if all names are  
uncool.  Definitely not what we want, right?  Well, we could argue  
that the filtering should be done in the model. all elements get a  
separator.

Next, what does {} mean as a template?  Is that empty string or  
missing?  what would this generate?

<names: {}; separator=", ">

It gives either empty string, missing, or ", , , , , , "

Grrr...ok, i'm not liking this.  I think I was only half right today.  
We should allow null-valued attributes like

st.add("name", null);

but let's make null mean same thing as missing.  I am thinking i made  
a mistake adding this to ST 3.2.1.

So even for any null values in a list, <names:{...}; separator=", ">  
yields a separator.

Ok, let me try this new version out in my unit tests.

Ter

From gwlist at grahamwideman.com  Thu Oct 15 18:24:51 2009
From: gwlist at grahamwideman.com (Graham Wideman)
Date: Thu, 15 Oct 2009 18:24:51 -0700
Subject: [stringtemplate-interest] null vs missing vs empty vsnonexistent
In-Reply-To: <F8A12BC5-0240-4F8E-9247-6E1A5450492C@cs.usfca.edu>
References: <4.1.20091015140028.015f5000@grahamwideman.com>
	<4.1.20091015134904.01aa7288@grahamwideman.com>
	<4.1.20091015134904.01aa7288@grahamwideman.com>
	<4.1.20091015140028.015f5000@grahamwideman.com>
Message-ID: <4.1.20091015181901.03077790@grahamwideman.com>

>oh crap. 

Glad to be of assistance :-).

>Is it ok if missing and null yield false?

Probably, but I think you still can't use false to detect missing or null, because that fails to distinguish missing/null from an actual non-missing, non-null MyBooleanVariable=false value.

Eg: What happens if you have an ST template that uses "if" to do something with all the actual boolean false values -- instead it's going to include all the missing and null values as well. And vice versa.

Hence the "if" feature isn't an escape hatch for not wanting to implement a "missing" option in render.

On the subject of how to treat nulls/missing when it comes to how they should appear in the output, and whether they should get separators.

First, I think these two issues are intimately tied to gether. Ie: the current null="xxx" and separator="xxx" issues have to follow a uniform policy. Ie: if a template's options are set to omit rendering a null, then it should also omit rendering the delim for that item.

(And it should be legit to say null="" delimiter=",", and get a single comma for null items -- perhaps that's how it works already, not sure).

That said, there's tension regarding how to deal with null/missing (not to mention whether null and missing cases should get separate treatment).

Should ST make nulls/missing appear or not appear in the output (with delims if so optioned)?

I suggest there's no single right answer to this, hence ST should have the facility to set, as an option, whether nulls/missing appear (as it does now with null="xxx" etc, though maybe some refinement is possible).

The problem is that there's not universal agreement as to what a null or missing item means in a model itself.  

For example, iterating a bunch of items that have a "parent" field -- if ST encounters one that whose parent is missing or null -- perhaps that doesn't mean the item has no parent, it means the model just don't know what it is. So in this case we'd like the missing to appear in the output.

On the other hand, iterating a bunch of items that have a firstchild field -- in that case missing could mean that there are no children for this item, in which case we'd like nothing rendered.

(Somewhat contrived example, poorly thought out model, perhaps. But illustrates lack of agreed-upon meaning for null/missing).

Bottom line:

I think ST needs to maintain the flexibility of setting an option to include or exclude nulls/missing during render, because neither include or exclude is always the right "no calculation" interpretation of the model.

-- Graham

From zen at freedbms.net  Thu Oct 15 20:04:02 2009
From: zen at freedbms.net (Zenaan Harkness)
Date: Fri, 16 Oct 2009 14:04:02 +1100
Subject: [stringtemplate-interest] null vs missing vs empty
	vs	nonexistent
In-Reply-To: <4.1.20091015140028.015f5000@grahamwideman.com>
References: <4.1.20091015134904.01aa7288@grahamwideman.com>
	<4.1.20091015134904.01aa7288@grahamwideman.com>
	<4.1.20091015140028.015f5000@grahamwideman.com>
Message-ID: <20091016030402.GB4393@ip61>

(Again, to all, please make an effort to bottom-post, where at all
possible, if no objections to doing so. Thanks.)

On Thu, Oct 15, 2009 at 02:25:43PM -0700, Graham Wideman wrote:
> 
> At 10/15/2009 01:56 PM, Terence Parr wrote:
> >was thinking about that but figured it'd confuse. we have <if(!foo)foo  
> >is missing<endif> anyway.
> 
> ...though ! appears to have two problems for detecting the missing case: it doesn't distinguish between FALSE and null (and missing if missing is legal here), and docs I think probably aren't clear on whether the missing case is legal and treated like null, or should cause error.
> 
> Generally I think if you establish missing as a concept distinct from null, then to minimizing confusion means that everywhere those concepts arise they should get distinct treatment (eg: parallel options in render).

Graham this is an excellent, and I must add, very important point.

There have been >1 times when I have been frustrated with the concept
limitation and ambiguity/ overloading, of boolean value (true/false) as
compared with null and/ or missing.

In reality, we-the-template-authors have to handle (in some way or
other) the three concepts:

   -  boolean
   -  null
   -  missing attribute

Should all three concepts be compressed into boolean?

Should they be separate?

Notwithstanding if separate boolean, should null and missing be separate
or combined?


Again, I have to strongly agree here with Graham - if the concepts are
treated separately somewhere, they ought to be, if possible, treated as
separate concepts _everywhere_.


> This of course runs into trouble applying boolean operators to what is now becoming a 4-value situation: true-val/false-val/null/missing --> true/false/maybe-error.
> 
> :-(
> 
> No time as good as a new version to take a stand though!

ACK!


> (BTW, are you really saying there are also empty and nonexistant cases?)
> 
> Graham
> 
> 
> >Ter
> >On Oct 15, 2009, at 1:53 PM, Graham Wideman wrote:
> >
> >> If you're worried about whether the missing case should or should  
> >> not be treated like null, might you consider a missing="something"  
> >> option to parallel null="something"?

If the concepts are treated distinctly somewhere, consistency dictates,
once again, that the concepts are treated distinctly everywhere. So yes,
null="blah" and empty="foo" (or non="foo" or whatever).

Similarly, the conditionals:

   -  if (for true/false)
   -  ifnull
   -  ifempty

   -  etc for other parts of ST lang

Consistency of concept treatment is essential!


> >> At 10/15/2009 12:25 PM, you wrote:
> >>> Ok, we have an important choice to make. Thanks to Bill Venners were
> >>> bringing this up last year. It's important enough and long enough  
> >>> that
> >>> I added to my blog:
> >>>
> >>> http://tinyurl.com/parrt-on-null-attributes
> >>>
> >>> Here is my summary from the bottom of the page:
> >>
> >> _______________________________________________
> >> stringtemplate-interest mailing list
> >> stringtemplate-interest at antlr.org
> >> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
> 
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest

-- 
Homepage: www.SoulSound.net -- Free Australia: www.UPMART.org
Please respect the confidentiality of this email as sensibly warranted.

From zen at freedbms.net  Thu Oct 15 20:11:39 2009
From: zen at freedbms.net (Zenaan Harkness)
Date: Fri, 16 Oct 2009 14:11:39 +1100
Subject: [stringtemplate-interest] null vs missing vs empty
	vs	nonexistent
In-Reply-To: <F8A12BC5-0240-4F8E-9247-6E1A5450492C@cs.usfca.edu>
References: <4.1.20091015134904.01aa7288@grahamwideman.com>
	<4.1.20091015134904.01aa7288@grahamwideman.com>
	<4.1.20091015140028.015f5000@grahamwideman.com>
	<F8A12BC5-0240-4F8E-9247-6E1A5450492C@cs.usfca.edu>
Message-ID: <20091016031139.GC4393@ip61>

On Thu, Oct 15, 2009 at 04:14:56PM -0700, Terence Parr wrote:
> 
> On Oct 15, 2009, at 2:25 PM, Graham Wideman wrote:
> 
> >
> > At 10/15/2009 01:56 PM, Terence Parr wrote:
> >> was thinking about that but figured it'd confuse. we have <if(!foo) 
> >> foo
> >> is missing<endif> anyway.
> >
> > ...though ! appears to have two problems for detecting the missing  
> > case: it doesn't distinguish between FALSE and null (and missing if  
> > missing is legal here),
> 
> oh crap.  I guess ! would return false if missing or null. Ah. right.  
> I just built this:
> 
>      protected boolean testAttributeTrue(Object a) {
>          if ( a==null ) return false;
>          if ( a==MISSING_ATTR ) return false;
> 	...
>      }
> 
> > and docs I think probably aren't clear on whether the missing case  
> > is legal and treated like null, or should cause error.
> 
> Is it ok if missing and null yield false?

Tis the question.

There are many real-world situations where separate concept treatment,
for these boolean-like concepts, is very useful.

   We system builders/ ST users have to handle the concepts,
   whether or not ST provides in built facilities to assist.


Such situations _can_ (in my experience) always be worked around with
"beefing up" of the view's (ST's) "model" (independent of the "program/
business logic"s model).

   -  This increases complexity of view model generation/ processing.
   -  This simplifies ST templates.


Alternatively, such situations could be handled with distinct concept
treatment by ST.

   -  This would decrease complexity of view model generation/
      processing.
   -  This would cause the two/three concepts to have to be handled in
      various places in ST 'language', thereby increasing complexity of
      ST language.


Q: Have we drawn a line in the sand for ST which says "boolean
operations are not too much logic to encourage creation of 'business
logic' directly in templates"?

If so, then we can add different boolean concepts. We are consistent in
our ST design principles.

It appears to me that this is the case.


At this point (short of other persuasive arguments countering), I am in
favour of separate bool/null/exists concept treatment in ST.

cheers
zen


-- 
Homepage: www.SoulSound.net -- Free Australia: www.UPMART.org
Please respect the confidentiality of this email as sensibly warranted.

From zen at freedbms.net  Thu Oct 15 20:21:33 2009
From: zen at freedbms.net (Zenaan Harkness)
Date: Fri, 16 Oct 2009 14:21:33 +1100
Subject: [stringtemplate-interest] null vs missing vs empty	vsnonexistent
In-Reply-To: <4.1.20091015181901.03077790@grahamwideman.com>
References: <4.1.20091015140028.015f5000@grahamwideman.com>
	<4.1.20091015134904.01aa7288@grahamwideman.com>
	<4.1.20091015134904.01aa7288@grahamwideman.com>
	<4.1.20091015140028.015f5000@grahamwideman.com>
	<4.1.20091015181901.03077790@grahamwideman.com>
Message-ID: <20091016032133.GD4393@ip61>

On Thu, Oct 15, 2009 at 06:24:51PM -0700, Graham Wideman wrote:
> >oh crap. 
> 
> Glad to be of assistance :-).
> 
> >Is it ok if missing and null yield false?
> 
> Probably, but I think you still can't use false to detect missing or null, because that fails to distinguish missing/null from an actual non-missing, non-null MyBooleanVariable=false value.

Ack.

> Eg: What happens if you have an ST template that uses "if" to do something with all the actual boolean false values -- instead it's going to include all the missing and null values as well. And vice versa.
> 
> Hence the "if" feature isn't an escape hatch for not wanting to implement a "missing" option in render.

Ack.

> On the subject of how to treat nulls/missing when it comes to how they should appear in the output, and whether they should get separators.
> 
> First, I think these two issues are intimately tied to gether. Ie: the current null="xxx" and separator="xxx" issues have to follow a uniform policy. Ie: if a template's options are set to omit rendering a null, then it should also omit rendering the delim for that item.

Ack.

I think boolean logic tri-concept, null= ought be complemented with
empty= - it aligns well, is consistent, etc.

> (And it should be legit to say null="" delimiter=",", and get a single comma for null items -- perhaps that's how it works already, not sure).

Ack.

> That said, there's tension regarding how to deal with null/missing (not to mention whether null and missing cases should get separate treatment).
> 
> Should ST make nulls/missing appear or not appear in the output (with delims if so optioned)?
>
> I suggest there's no single right answer to this, hence ST should have the facility to set, as an option, whether nulls/missing appear (as it does now with null="xxx" etc, though maybe some refinement is possible).

Ack.

> The problem is that there's not universal agreement as to what a null or missing item means in a model itself.  

Exactly. So defer to view (ST); = tri-concept booleans.

> For example, iterating a bunch of items that have a "parent" field -- if ST encounters one that whose parent is missing or null -- perhaps that doesn't mean the item has no parent, it means the model just don't know what it is. So in this case we'd like the missing to appear in the output.

Of course. We cannot know the output view needs of a particular system,
or even of a particular view of a particular system...

> On the other hand, iterating a bunch of items that have a firstchild field -- in that case missing could mean that there are no children for this item, in which case we'd like nothing rendered.
> 
> (Somewhat contrived example, poorly thought out model, perhaps. But illustrates lack of agreed-upon meaning for null/missing).

Totally Ack. Thank you for putting the effort into an example at all.
Very useful to assist us in getting our heads around the questions
before us!

> Bottom line:
> 
> I think ST needs to maintain the flexibility of setting an option to include or exclude nulls/missing during render, because neither include or exclude is always the right "no calculation" interpretation of the model.

Ack!

Completely agree.

Only question I think is yet to be properly explored: are there ready
examples where null and missing must/ ought be usefully treated
separately, and if so, should we have a tri-concept boolean logic, or
just stick to two-concept boolean logic, in ST?

zen


-- 
Homepage: www.SoulSound.net -- Free Australia: www.UPMART.org
Please respect the confidentiality of this email as sensibly warranted.

From zen at freedbms.net  Thu Oct 15 20:26:16 2009
From: zen at freedbms.net (Zenaan Harkness)
Date: Fri, 16 Oct 2009 14:26:16 +1100
Subject: [stringtemplate-interest] "\n" goes away
In-Reply-To: <FA136CAA-FBB0-47D6-AECA-87F8E22F0A61@cs.usfca.edu>
References: <4CABBCA3-FBD2-431A-A25E-A1CD06F40906@cs.usfca.edu>
	<3b8d0de60910132041m7847c00cs39627c562e6c577a@mail.gmail.com>
	<20091014062129.GB11894@ip61>
	<E980A6E0-F312-4FBB-812F-CDCC3E1CBEB7@cs.usfca.edu>
	<DA44747BB658FC49B2705BB549F002C589921C9EDB@DEEXVS31.wincor-nixdorf.com>
	<FA136CAA-FBB0-47D6-AECA-87F8E22F0A61@cs.usfca.edu>
Message-ID: <20091016032616.GE4393@ip61>

On Thu, Oct 15, 2009 at 11:54:09AM -0700, Terence Parr wrote:
> 
> On Oct 15, 2009, at 1:32 AM, Koerner, Ron wrote:
> >> Ah. good point. now it would be:
> >>
> >> separator={ <\n> }
> >>
> >> I guess that's not horrible, but...
> >>
> >> Ter
> >
> > What about both? Allow:
> >
> >   <expr; sep=nl>
> >
> 
> I'm worried about introducing another keyword. would "nl" be  
> disallowed then as an attribute?

Are you saying nl could be treated as an attribute OR as a template?

I do like the cleanliness of treating 'specials' as just templates.
So what's the syntax context in this case? MUST nl (in
"<expr; sep=nl>") be only attr or template, or could it be either?

And if, as mentioned elsewhere, such specials are contained in an "ST
standard library", and combined in with some sort of
multiple-inheritance, then alternative "standard libraries" could always
be created by those who really want something a little different...

zen

-- 
Homepage: www.SoulSound.net -- Free Australia: www.UPMART.org
Please respect the confidentiality of this email as sensibly warranted.

From harry.karadimas at hmn.aphp.fr  Fri Oct 16 02:41:43 2009
From: harry.karadimas at hmn.aphp.fr (Harry Karadimas)
Date: Fri, 16 Oct 2009 11:41:43 +0200
Subject: [stringtemplate-interest] null vs missing vs empty vs
	nonexistent
Message-ID: <2E9E2DCAC398430ABEE6B535AD06E210@wprod.ds.aphp.fr>

Reminds me of the debates about SQL Null

http://en.wikipedia.org/wiki/Null_(SQL)

One other question is :

What must the user know about handling of null values to use st ?

If st becomes too complex, this will also hinder its adoption, so
maybe let's not put too many operators/values/cases/options/etc.

For me mainly three cases are relevant :

* there is no attribute named "foo"
* there is an attribute named "foo", and its value is : null
* there is an attribute named "foo", and its value is a string,
  which is : "...(whatever, including the empty string)"

Maybe a fourth case to test if the value is the empty string
could be relevant, and this would autmatically lead to a fifth
case where the trimmed value (removing all spaces, tabs, 
form feeds, vertical form feeds, ...) is the empty string.

My 1,3412 cents (we use euros in France) ...


                                                  Harry Karadimas

______________________________________________________________________
Dr Harry Karadimas,  Medecin Ingenieur
resp. Recherche et Developpement, Applications medicales
Departement d'Information Hospitalier (DIH)
C.H.U. Albert Chenevier - Henri Mondor 
51, av. du Marechal de Lattre de Tassigny               94010  CRETEIL



From parrt at cs.usfca.edu  Fri Oct 16 14:36:48 2009
From: parrt at cs.usfca.edu (Terence Parr)
Date: Fri, 16 Oct 2009 14:36:48 -0700
Subject: [stringtemplate-interest] anybody use parallel list iteration?
Message-ID: <E66A0475-C5B4-4AAB-834D-679FB97FB16B@cs.usfca.edu>

Use this?

<a1,a2,...,aN:{argument-list_ | _anonymous-template}>

Parallel list iteration. March through the values of the attributes  
a1..aN, setting the values to the arguments in argument-list in the  
same order. Apply the anonymous template. There is no defined it value  
unless inherited from an enclosing scope.

Most of use lists of objects not parallel arrays; thinking of leaving  
out for v4.

Ter

From jonathan at buhacoff.net  Fri Oct 16 21:31:45 2009
From: jonathan at buhacoff.net (Jonathan Buhacoff)
Date: Fri, 16 Oct 2009 21:31:45 -0700
Subject: [stringtemplate-interest] null vs missing vs empty
	vs	nonexistent
In-Reply-To: <20091016030402.GB4393@ip61>
References: <4.1.20091015134904.01aa7288@grahamwideman.com>
	<4.1.20091015134904.01aa7288@grahamwideman.com>
	<4.1.20091015140028.015f5000@grahamwideman.com>
	<20091016030402.GB4393@ip61>
Message-ID: <8971C07A-2ECF-4350-9A0B-E04EEB307249@buhacoff.net>

Hi, I've been lurking but would like to add my perspective here:

Where I grew up, null means missing value. I think it would be a  
mistake to make a distinction between a key that was set with a  
missing value, and a key that wasn't set at all. Either way the value  
is missing.

I think having an operator like ifnull is a great feature to have for  
template authors that care for the difference between false and missing.

I also think that the if operator should treat null as false, for all  
the template authors who care only if the value is defined and true.

I think that ifempty, trim, and other such variations should be left  
to the model,  perhaps by wrapping strings with an object that  
implements toString and also trim(), isEmpty(), etc.  so that the  
template writer can make distinctions like $ifnull(value)$,   
$if(value.isEmpty)$ and $if(value.trim.isEmpty)$

Jonathan

On Oct 15, 2009, at 8:04 PM, Zenaan Harkness wrote:

* there is no attribute named "foo"
* there is an attribute named "foo", and its value is : null
* there is an attribute named "foo", and its value is a string,
  which is : "...(whatever, including the empty string)"

Maybe a fourth case to test if the value is the empty string
could be relevant, and this would autmatically lead to a fifth
case where the trimmed value (removing all spaces, tabs,
form feeds, vertical form feeds, ...) is the empty string.


On Oct 15, 2009, at 8:04 PM, Zenaan Harkness wrote:

> (Again, to all, please make an effort to bottom-post, where at all
> possible, if no objections to doing so. Thanks.)
>
> On Thu, Oct 15, 2009 at 02:25:43PM -0700, Graham Wideman wrote:
>>
>> At 10/15/2009 01:56 PM, Terence Parr wrote:
>>> was thinking about that but figured it'd confuse. we have <if(! 
>>> foo)foo
>>> is missing<endif> anyway.
>>
>> ...though ! appears to have two problems for detecting the missing  
>> case: it doesn't distinguish between FALSE and null (and missing if  
>> missing is legal here), and docs I think probably aren't clear on  
>> whether the missing case is legal and treated like null, or should  
>> cause error.
>>
>> Generally I think if you establish missing as a concept distinct  
>> from null, then to minimizing confusion means that everywhere those  
>> concepts arise they should get distinct treatment (eg: parallel  
>> options in render).
>
> Graham this is an excellent, and I must add, very important point.
>
> There have been >1 times when I have been frustrated with the concept
> limitation and ambiguity/ overloading, of boolean value (true/false)  
> as
> compared with null and/ or missing.
>
> In reality, we-the-template-authors have to handle (in some way or
> other) the three concepts:
>
>   -  boolean
>   -  null
>   -  missing attribute
>
> Should all three concepts be compressed into boolean?
>
> Should they be separate?
>
> Notwithstanding if separate boolean, should null and missing be  
> separate
> or combined?
>
>
> Again, I have to strongly agree here with Graham - if the concepts are
> treated separately somewhere, they ought to be, if possible, treated  
> as
> separate concepts _everywhere_.
>
>
>> This of course runs into trouble applying boolean operators to what  
>> is now becoming a 4-value situation: true-val/false-val/null/ 
>> missing --> true/false/maybe-error.
>>
>> :-(
>>
>> No time as good as a new version to take a stand though!
>
> ACK!
>
>
>> (BTW, are you really saying there are also empty and nonexistant  
>> cases?)
>>
>> Graham
>>
>>
>>> Ter
>>> On Oct 15, 2009, at 1:53 PM, Graham Wideman wrote:
>>>
>>>> If you're worried about whether the missing case should or should
>>>> not be treated like null, might you consider a missing="something"
>>>> option to parallel null="something"?
>
> If the concepts are treated distinctly somewhere, consistency  
> dictates,
> once again, that the concepts are treated distinctly everywhere. So  
> yes,
> null="blah" and empty="foo" (or non="foo" or whatever).
>
> Similarly, the conditionals:
>
>   -  if (for true/false)
>   -  ifnull
>   -  ifempty
>
>   -  etc for other parts of ST lang
>
> Consistency of concept treatment is essential!
>
>
>>>> At 10/15/2009 12:25 PM, you wrote:
>>>>> Ok, we have an important choice to make. Thanks to Bill Venners  
>>>>> were
>>>>> bringing this up last year. It's important enough and long enough
>>>>> that
>>>>> I added to my blog:
>>>>>
>>>>> http://tinyurl.com/parrt-on-null-attributes
>>>>>
>>>>> Here is my summary from the bottom of the page:
>>>>
>>>> _______________________________________________
>>>> stringtemplate-interest mailing list
>>>> stringtemplate-interest at antlr.org
>>>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>>
>> _______________________________________________
>> stringtemplate-interest mailing list
>> stringtemplate-interest at antlr.org
>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>
> -- 
> Homepage: www.SoulSound.net -- Free Australia: www.UPMART.org
> Please respect the confidentiality of this email as sensibly  
> warranted.
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest


From jimi at temporal-wave.com  Sat Oct 17 21:15:19 2009
From: jimi at temporal-wave.com (Jim Idle)
Date: Sun, 18 Oct 2009 09:45:19 +0530
Subject: [stringtemplate-interest] anybody use parallel list iteration?
In-Reply-To: <E66A0475-C5B4-4AAB-834D-679FB97FB16B@cs.usfca.edu>
Message-ID: <f75528c89cf79d4ebd85accdccba5483@temporal-wave.com>

Think I might have used this in the C target and one other place. But it could probably be reworked :-)

JHim

> -----Original Message-----
> From: stringtemplate-interest-bounces at antlr.org [mailto:stringtemplate-
> interest-bounces at antlr.org] On Behalf Of Terence Parr
> Sent: Saturday, October 17, 2009 3:07 AM
> To: stringtemplate-interest Template
> Subject: [stringtemplate-interest] anybody use parallel list iteration?
> 
> Use this?
> 
> <a1,a2,...,aN:{argument-list_ | _anonymous-template}>
> 
> Parallel list iteration. March through the values of the attributes
> a1..aN, setting the values to the arguments in argument-list in the
> same order. Apply the anonymous template. There is no defined it value
> unless inherited from an enclosing scope.
> 
> Most of use lists of objects not parallel arrays; thinking of leaving
> out for v4.
> 
> Ter
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest




From jonathan at buhacoff.net  Fri Oct 16 23:35:16 2009
From: jonathan at buhacoff.net (Jonathan Buhacoff)
Date: Fri, 16 Oct 2009 23:35:16 -0700
Subject: [stringtemplate-interest] Attribute definitions,
	Group files	and Templates.
In-Reply-To: <20091013065301.GK4586@ip61>
References: <f6b307f10910122158n74b1b66dwa1740f6dc3dee322@mail.gmail.com>
	<20091013065301.GK4586@ip61>
Message-ID: <191D1580-6481-4D78-ADE6-864507A7FDCC@buhacoff.net>

This is the post I was looking for :)


On Oct 12, 2009, at 11:53 PM, Zenaan Harkness wrote:

> On Tue, Oct 13, 2009 at 03:28:59PM +1030, Barrie Treloar wrote:
>> The other thread about cleaning up ST made me check Jira for one of
>> the things I wanted while working with ST.
>>
>> I wanted to use a directory for my TemplateGroup instead of a file.
>> As the size of my templates would make the group file massive and  
>> unwieldy.

And I would like to use any arbitrary file storage class for a  
template group.  In my projects I have a FileStorage interface with  
implementations for classpath, disk, http, samba, ftp, sftp, memory,  
jdbc, etc, that I use routinely to allow my users to easily use files  
from any location.

In the project I'm working on now, I need to load templates from a  
database as a StringTemplateGroup having templates from the classpath  
as a super group to provide sensible defaults for missing templates.

I was just looking today for the easiest place to subclass  
TemplateGroup so when I call getInstanceOf it will load the templates  
from whatever data source I specify. Looks like the best place to do  
it is to override loadTemplateFromBeneathRootDirOrCLASSPATH.

Does that look right?  I looked at the StringTemplateGroupLoader  
interface but it doesn't look like the right place.


>>
>> I think the only reason I wanted a group was so I could get attribute
>> definitions in my templates.
>> If the new version of ST will allow me to do this for template files
>> then I think I dont need TemplateGroup as a directory instead of a
>> file.
>> Can anyone see the values of having TemplateGroups as a directory  
>> then?
>
> I rather like the structured Java-like approach:
>
>   -  Directories correspond to java 'Packages', or "ST Packages"
>      ie groups of ST TemplateGroups.
>   -  Files correspond to classes, ie ST TemplateGroup files.
>   -  Individual ST templates can be in a single file,
>      BUT, for uniformity (ala Java), should still be a TemplateGroup.
>
>
>   -  Next, TemplateGroups (just Group perhaps??), have an inheritance
>      hierarchy ("extends", like Java classes).
>   -  Multiple inheritance, would help big time for me.
>      -  I have a "lib" ST group
>      -  I have a language specific group (eg. Java, C#), sort of
>         specialized 'lib' groups
>      -  I have specific lower level/ operational groups which often
>         need to inherit templates from different parent lines.
>

It would be nice if there were an interface for loading the templates  
in a group, something like loadTemplate: String -> StringTemplate, so  
that in StringTemplateGroup itself this could be delegated to disk-  
and classpath- specific implementations, and it would be an easy way  
to integrate other storage or inheritance schemes.



>   -  Ie, I am using the TemplateGroup to bring sanity to the number  
> and
>      structure of templates.
>   -  Without multiple inheritance, I am required to do some really
>      hacky temporary file munging, to ensure that all groups I need
>      ultimately form a single-inheritance hierarchy.
>
>   -  A good language (eg. Java, ST), provides facilities to  
> competantly
>      manage complexity.
>   -  Current versions of ST do not provide adequate complexity
>      management facilities for larger projects.
>   -  So, whether MultipleInheritance, or something else (eg. "mixin"
>      pattern is the more robust way than "inheritance" pattern to
>      componentize, where possible, at least when it comes to
>      programming languages), another tool within ST for complexity
>      management is required.
>
>   -  It is my belief, that because ST is a declarative generative
>      language, multiple-inheritance should not pose anywhere near the
>      fine grained difficulties that we see for example in C++ MI.
>

I disagree, I think the problems with multiple inheritance will follow  
that concept into any situation.

But if we had a clean interface to implement a template loader for  
StringTemplateGroup without having to replace all the logic in that  
class, it  would make it easier for Zenaan to implement his package- 
based and multiple inheritance loaders, even publish them for other  
users who may want that.  In my program, I just need to implement a  
loader that contains a jdbc loader and a classpath loader and try them  
in order.


>
> So, directories are a fine and natural (given current and foreseeable
> OSes) tool for grouping of files, and therefore a useful tool for
> complexity management, which tool we _are_ currently using in ST.
>
> To have TemplateGroups _be_ a directory, is comparable (comparison  
> with
> Java) to having a class of functions/methods, _be_ a directory - ie
> splitting out each method into its own file, and having all those  
> files
> in a directory, and the directory be the java Class.
>
> Of course, historically, it made sense - ST was built piece by piece,
> and started out with much less features than it has now. thankfully,
> despite feature growth,
>
>   --== ST remains the only template engine to
>        consistently separate view from model. ==--
>
> And THAT is quite an achievement, for which we can thank Ter's  
> rigorous
> analysis in the first instance, written paper, and ongoing education  
> and
> commitment to this foundation principle (now of course supported by we
> the ST community).
>
> I have been convinced for some years now, since I first studied and
> began my own ST journey, that ST's day is yet to truly begin. And I
> think that with a spec :), the cleanup now in progress (thanks Ter),  
> and
> just a few little extra features (including in particular something  
> akin
> to multiple inheritance/ one more complexity management tool), then ST
> has the potential to be the foundation of an amazing renaissance in
> programming/ software development. Time will tell of course :)
>
> cheers
> zen
>
> -- 
> Homepage: www.SoulSound.net -- Free Australia: www.UPMART.org
> Please respect the confidentiality of this email as sensibly  
> warranted.
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest


From jonathan at buhacoff.net  Sat Oct 17 00:14:33 2009
From: jonathan at buhacoff.net (Jonathan Buhacoff)
Date: Sat, 17 Oct 2009 00:14:33 -0700
Subject: [stringtemplate-interest] package name
In-Reply-To: <6D3155F7-D621-4908-9D2D-149A1B7DAB9C@cs.usfca.edu>
References: <BA3E087D-E129-415B-855C-CE92FB2CD6C6@cs.usfca.edu>
	<20091009020819.GD4142@ip61>
	<6D3155F7-D621-4908-9D2D-149A1B7DAB9C@cs.usfca.edu>
Message-ID: <ABA6E7B6-345F-4681-9BFD-6ED5AABC72A9@buhacoff.net>

Can we please keep complete class names?  I agree with Sam Harwell,  
who wrote in a different thread, that StringTemplate or Template is  
clearer than ST.

Jonathan

On Oct 9, 2009, at 1:10 PM, Terence Parr wrote:

>
> On Oct 8, 2009, at 7:08 PM, Zenaan Harkness wrote:
>
>> On Thu, Oct 08, 2009 at 04:33:36PM -0700, Terence Parr wrote:
>>> should i reuse org.stringtemplate or should package be
>>> org.stringtemplate.v4 or something?  The classes are differently
>>> named
>>> so org.stringtemplate.ST and such might be ok.
>>
>> Are there any classes or packages that would overlap?
>
> Don't think so...ha! I just realized that the old package was:
>
> package org.antlr.stringtemplate;
>
> so
>
> package org.stringtemplate;
>
> it is then! no collision.
>
> Ter
>
>
>
>
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest


From zen at freedbms.net  Sat Oct 17 01:20:33 2009
From: zen at freedbms.net (Zenaan Harkness)
Date: Sat, 17 Oct 2009 19:20:33 +1100
Subject: [stringtemplate-interest] Attribute definitions,
	Group files	and Templates.
In-Reply-To: <191D1580-6481-4D78-ADE6-864507A7FDCC@buhacoff.net>
References: <f6b307f10910122158n74b1b66dwa1740f6dc3dee322@mail.gmail.com>
	<20091013065301.GK4586@ip61>
	<191D1580-6481-4D78-ADE6-864507A7FDCC@buhacoff.net>
Message-ID: <20091017082033.GB8734@ip61>

On Fri, Oct 16, 2009 at 11:35:16PM -0700, Jonathan Buhacoff wrote:
> On Oct 12, 2009, at 11:53 PM, Zenaan Harkness wrote:
> > On Tue, Oct 13, 2009 at 03:28:59PM +1030, Barrie Treloar wrote:

> >> The other thread about cleaning up ST made me check Jira for one of
> >> the things I wanted while working with ST.
> >>
> >> I wanted to use a directory for my TemplateGroup instead of a file.
> >> As the size of my templates would make the group file massive and  
> >> unwieldy.

> >> Can anyone see the values of having TemplateGroups as a directory  
> >> then?
> >
> > I rather like the structured Java-like approach:
> >
> >   -  Directories correspond to java 'Packages', or "ST Packages"
> >      ie groups of ST TemplateGroups.
> >   -  Files correspond to classes, ie ST TemplateGroup files.
> >   -  Individual ST templates can be in a single file,
> >      BUT, for uniformity (ala Java), should still be a TemplateGroup.
> >
> >
> >   -  Next, TemplateGroups (just Group perhaps??), have an inheritance
> >      hierarchy ("extends", like Java classes).
> >   -  Multiple inheritance, would help big time for me.
> >      -  I have a "lib" ST group
> >      -  I have a language specific group (eg. Java, C#), sort of
> >         specialized 'lib' groups
> >      -  I have specific lower level/ operational groups which often
> >         need to inherit templates from different parent lines.
> 
> It would be nice if there were an interface for loading the templates  
> in a group, something like loadTemplate: String -> StringTemplate, so  
> that in StringTemplateGroup itself this could be delegated to disk-  
> and classpath- specific implementations, and it would be an easy way  
> to integrate other storage or inheritance schemes.

Ack.


> >   -  Ie, I am using the TemplateGroup to bring sanity to the number  
> > and
> >      structure of templates.
> >   -  Without multiple inheritance, I am required to do some really
> >      hacky temporary file munging, to ensure that all groups I need
> >      ultimately form a single-inheritance hierarchy.
> >
> >   -  A good language (eg. Java, ST), provides facilities to  
> > competantly
> >      manage complexity.
> >   -  Current versions of ST do not provide adequate complexity
> >      management facilities for larger projects.
> >   -  So, whether MultipleInheritance, or something else (eg. "mixin"
> >      pattern is the more robust way than "inheritance" pattern to
> >      componentize, where possible, at least when it comes to
> >      programming languages), another tool within ST for complexity
> >      management is required.
> >
> >   -  It is my belief, that because ST is a declarative generative
> >      language, multiple-inheritance should not pose anywhere near the
> >      fine grained difficulties that we see for example in C++ MI.
> >
> 
> I disagree, I think the problems with multiple inheritance will follow  
> that concept into any situation.
> 
> But if we had a clean interface to implement a template loader for  
> StringTemplateGroup without having to replace all the logic in that  
> class, it  would make it easier for Zenaan to implement his package- 
> based and multiple inheritance loaders, even publish them for other  

Ack. If M-I is delegated to the loader, this puts full responsibility on
the ST end user, to resolve load orders/ "which ST to use if ambiguous"
etc. This is good.


> users who may want that.  In my program, I just need to implement a  
> loader that contains a jdbc loader and a classpath loader and try them  
> in order.


zen


-- 
Homepage: www.SoulSound.net -- Free Australia: www.UPMART.org
Please respect the confidentiality of this email as sensibly warranted.

From zen at freedbms.net  Sat Oct 17 01:28:28 2009
From: zen at freedbms.net (Zenaan Harkness)
Date: Sat, 17 Oct 2009 19:28:28 +1100
Subject: [stringtemplate-interest] package name
In-Reply-To: <ABA6E7B6-345F-4681-9BFD-6ED5AABC72A9@buhacoff.net>
References: <BA3E087D-E129-415B-855C-CE92FB2CD6C6@cs.usfca.edu>
	<20091009020819.GD4142@ip61>
	<6D3155F7-D621-4908-9D2D-149A1B7DAB9C@cs.usfca.edu>
	<ABA6E7B6-345F-4681-9BFD-6ED5AABC72A9@buhacoff.net>
Message-ID: <20091017082828.GC8734@ip61>

On Sat, Oct 17, 2009 at 12:14:33AM -0700, Jonathan Buhacoff wrote:
> Can we please keep complete class names?  I agree with Sam Harwell,  
> who wrote in a different thread, that StringTemplate or Template is  
> clearer than ST.

I have to Ack this one!

http://lwn.net/Articles/351422/
Just read last month, when Ken Thomson was asked what he'd do
differently about Unix IO api, he would have spelt creat as "create".

zen


> On Oct 9, 2009, at 1:10 PM, Terence Parr wrote:
> > On Oct 8, 2009, at 7:08 PM, Zenaan Harkness wrote:
> >> On Thu, Oct 08, 2009 at 04:33:36PM -0700, Terence Parr wrote:
> >>> should i reuse org.stringtemplate or should package be
> >>> org.stringtemplate.v4 or something?  The classes are differently
> >>> named
> >>> so org.stringtemplate.ST and such might be ok.
> >>
> >> Are there any classes or packages that would overlap?
> >
> > Don't think so...ha! I just realized that the old package was:
> >
> > package org.antlr.stringtemplate;
> >
> > so
> >
> > package org.stringtemplate;
> >
> > it is then! no collision.
> >
> > Ter

-- 
Homepage: www.SoulSound.net -- Free Australia: www.UPMART.org
Please respect the confidentiality of this email as sensibly warranted.

From zen at freedbms.net  Sat Oct 17 01:47:49 2009
From: zen at freedbms.net (Zenaan Harkness)
Date: Sat, 17 Oct 2009 19:47:49 +1100
Subject: [stringtemplate-interest] null vs missing vs empty
	vs	nonexistent
In-Reply-To: <8971C07A-2ECF-4350-9A0B-E04EEB307249@buhacoff.net>
References: <4.1.20091015134904.01aa7288@grahamwideman.com>
	<4.1.20091015134904.01aa7288@grahamwideman.com>
	<4.1.20091015140028.015f5000@grahamwideman.com>
	<20091016030402.GB4393@ip61>
	<8971C07A-2ECF-4350-9A0B-E04EEB307249@buhacoff.net>
Message-ID: <20091017084749.GD8734@ip61>

On Fri, Oct 16, 2009 at 09:31:45PM -0700, Jonathan Buhacoff wrote:
> Hi, I've been lurking but would like to add my perspective here:
> 
> Where I grew up, null means missing value.

Hm. Must be a regional thing.

:) Couldn't resist sorry..


> I think it would be a  
> mistake to make a distinction between a key that was set with a  
> missing value, and a key that wasn't set at all. Either way the value  
> is missing.

What about a key (String) with value "" ?

This is strictly EMPTY as opposed to either NULL _or_ MISSING entirely.

Question is, how much to provide as _possible_ within pure ST, and how
much to push onto view-model.

> I think having an operator like ifnull is a great feature to have for  
> template authors that care for the difference between false and missing.

I have needed (and used the crude support for) if 'empty'.

Can you imagine real world cases where it's needed to handle the
differences between:

   -  TRUE vs FALSE

   -  "TRUE" vs "FALSE"

   -  attribute present  vs  no attribute present

   -  attribute NULL   vs  attribute has a value

   -  attribute = ""   vs   attribute !null, and "some string"

   -  attribute = "" or "   " or "\t", vs attribute contains
      "non whitespace"


> I also think that the if operator should treat null as false, for all  
> the template authors who care only if the value is defined and true.

How would this be implemented? A per-ST option?
Or perhaps:

   <names:{n | ...}; null=FALSE, empty=NULL>
   <names:{n | ...}; null=EMPTY, empty=NULL>  :)
   <names:{n | ...}; null=FALSE, empty=FALSE>

??


> I think that ifempty, trim, and other such variations should be left  
> to the model,  perhaps by wrapping strings with an object that  
> implements toString and also trim(), isEmpty(), etc.  so that the  
> template writer can make distinctions like $ifnull(value)$,   
> $if(value.isEmpty)$ and $if(value.trim.isEmpty)$

Good points. The ongoing question of course, is how much is good to put
into ST, and how much to require view-model munging.

If in ST, how do you feel about:

   <names:{...}; trim=TRUE; empty=FALSE>

?


cheers
zen

-- 
Homepage: www.SoulSound.net -- Free Australia: www.UPMART.org
Please respect the confidentiality of this email as sensibly warranted.

From rob at fractis.com  Sat Oct 17 03:19:07 2009
From: rob at fractis.com (Robert Byrne)
Date: Sat, 17 Oct 2009 11:19:07 +0100
Subject: [stringtemplate-interest] package name
In-Reply-To: <20091017082828.GC8734@ip61>
References: <BA3E087D-E129-415B-855C-CE92FB2CD6C6@cs.usfca.edu>
	<20091009020819.GD4142@ip61>
	<6D3155F7-D621-4908-9D2D-149A1B7DAB9C@cs.usfca.edu>
	<ABA6E7B6-345F-4681-9BFD-6ED5AABC72A9@buhacoff.net>
	<20091017082828.GC8734@ip61>
Message-ID: <27f7ede70910170319w23de5b17m8ed870f41210fb33@mail.gmail.com>

I have to agree, the easy readability of StringTemplate wins over the
shorter ST for me.

2009/10/17 Zenaan Harkness <zen at freedbms.net>

> On Sat, Oct 17, 2009 at 12:14:33AM -0700, Jonathan Buhacoff wrote:
> > Can we please keep complete class names?  I agree with Sam Harwell,
> > who wrote in a different thread, that StringTemplate or Template is
> > clearer than ST.
>
> I have to Ack this one!
>
> http://lwn.net/Articles/351422/
> Just read last month, when Ken Thomson was asked what he'd do
> differently about Unix IO api, he would have spelt creat as "create".
>
> zen
>
>
> > On Oct 9, 2009, at 1:10 PM, Terence Parr wrote:
> > > On Oct 8, 2009, at 7:08 PM, Zenaan Harkness wrote:
> > >> On Thu, Oct 08, 2009 at 04:33:36PM -0700, Terence Parr wrote:
> > >>> should i reuse org.stringtemplate or should package be
> > >>> org.stringtemplate.v4 or something?  The classes are differently
> > >>> named
> > >>> so org.stringtemplate.ST and such might be ok.
> > >>
> > >> Are there any classes or packages that would overlap?
> > >
> > > Don't think so...ha! I just realized that the old package was:
> > >
> > > package org.antlr.stringtemplate;
> > >
> > > so
> > >
> > > package org.stringtemplate;
> > >
> > > it is then! no collision.
> > >
> > > Ter
>
> --
> Homepage: www.SoulSound.net -- Free Australia: www.UPMART.org
> Please respect the confidentiality of this email as sensibly warranted.
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>



-- 
Regards,

Robert Byrne,
CTO, Iceberg

www.geticeberg.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20091017/4c92a630/attachment.html 

From ockham at gmail.com  Sat Oct 17 10:02:25 2009
From: ockham at gmail.com (Joseph Grace)
Date: Sat, 17 Oct 2009 10:02:25 -0700
Subject: [stringtemplate-interest] ST interface: canonical name,
	and null vs missing vs empty vs 	nonexistent
Message-ID: <e3eda7ce0910171002o11bbe9b8w6ab4372e65aa9b8d@mail.gmail.com>

Another several cents from a lurker in the shadows...

Penny 1.  "ST" > "Template" >> "StringTemplate" for wide adoption and use.

Ter's StringTemplate deserves wide adoption.  I believe a short name
ST is useful in that regard.  If not ST, then Template (but please, no
"StringTemplate").  Remember, ST aims to be used in languages other
than Java (where lengthy StringTemplate naming may be the norm), but
many non-java languages (especially scripting languages) expect
lightweight naming for ease of use.  Also a short name denotes
convenience, and ST should be convenient.  ST deserves to look and
feel convenient and lightweight, so it can bebe used in lightweight
languages and applications.  IMO, an abbreviated canonical name is
desirable for wide adoption outside Java.  I can see both "Template"
and "ST" working with perhaps "ST" preferable for its brevity and
uniqueness (relative to generic Template).  IMO, shorter canonical
name = better for wide, convenient, and common use.


Penny 2.  Interfacing with Principle of Generous Acceptance

Sticking with the ease of use theme, ST lives to serve its host
language.  Therefore, I believe it should go some distance to provide
a friendly and accepting interface for whatever host languages provide
and expect.  This is the networking Principle of Generous Acceptance
(not its canonical name): "Be strict in what you generate, but
generous in what you accept."  The idea is to accept non-fatal errors
from faulty but discernible data, in order to prevent unnecessary
hangups and congestion.  A bit like the Principle of Least
Astonishment, but specifically for interfaces.

For ST to fulfill its role as ubiquitously as possible, I believe ST's
interface to the outside world should probably err on the side of
being generously accepting, not just for Java but for other languages
as well.  So, building on previous posts, I suggest balancing ST's
purity of purpose with the need for ST to suit many idiosyncratic
languages and situations with fewest hangups, hurdles, and surprises.
In other words, ST should use generous acceptance to ensure ease of
use without materially compromising its pure separation of model/view.

I believe the following conditionals would help in that regard.
Perhaps the "." syntax seems desirable, but perhaps not (see penny 3).

   -  if:  False unless the attribute exists.

   -  if.null:  False unless the attribute exists, and its value is NULL.

   -  if.empty:  False unless the attribute exists, and its value is "".

   -  if.true (for true/false):  False unless the attribute exists,
and its value is boolean TRUE (for the host language).

- if.whitespace: False unless the attribute exists, and its value is "\w*".

NB: "if.true" (boolean) is defined relative to the host language (not to
ST), which can vary in meaning w/r/t whether "" is false or not in the host
language. So the host language (I would say) should be the determining
factor of the "native" semantics for boolean in ST for ease of use with each
and every host language. In other words, ST adopts the host language T/F
semantics for native least astonishment, and ease of use.


Penny 3. (calling out the "." syntax issue separately)
It seems to me that the "." syntax could provide a customization hook for
language/application specific idiosyncracies. Of course, such customizations
would be frowned upon (for the risk of violating model/view separation of
concerns) but would leave the door open to unforeseeable idiosyncracies in
legacy et al. systems. Certain applications could use the dot syntax
flexibility to add variant conditional(s) to eliminate simple problems for
input streams for specific domains, and perhaps lead to no-brainer adoption
where purity would otherwise interfere, without compromising the soundness
of the ST model (since such customization should be few and far between and
very specific to quirky use cases). The "." hook could allow some projects
to adopt ST where they normally could not due to its otherwise
uncompromising purity.

Cheers,

= Joe =
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20091017/3fbd9d7a/attachment.html 

From parrt at cs.usfca.edu  Sat Oct 17 10:21:32 2009
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sat, 17 Oct 2009 10:21:32 -0700
Subject: [stringtemplate-interest] package name
In-Reply-To: <27f7ede70910170319w23de5b17m8ed870f41210fb33@mail.gmail.com>
References: <BA3E087D-E129-415B-855C-CE92FB2CD6C6@cs.usfca.edu>
	<20091009020819.GD4142@ip61>
	<6D3155F7-D621-4908-9D2D-149A1B7DAB9C@cs.usfca.edu>
	<ABA6E7B6-345F-4681-9BFD-6ED5AABC72A9@buhacoff.net>
	<20091017082828.GC8734@ip61>
	<27f7ede70910170319w23de5b17m8ed870f41210fb33@mail.gmail.com>
Message-ID: <B57AAA3A-4061-4F1C-BAEA-56CC0207C858@cs.usfca.edu>

Hi Guys.  Let me think some more.  I sure have to write ST a  
LOT...plus we all abbrev it as ST.
Ter
On Oct 17, 2009, at 3:19 AM, Robert Byrne wrote:

> I have to agree, the easy readability of StringTemplate wins over  
> the shorter ST for me.
>
> 2009/10/17 Zenaan Harkness <zen at freedbms.net>
> On Sat, Oct 17, 2009 at 12:14:33AM -0700, Jonathan Buhacoff wrote:
> > Can we please keep complete class names?  I agree with Sam Harwell,
> > who wrote in a different thread, that StringTemplate or Template is
> > clearer than ST.
>
> I have to Ack this one!
>
> http://lwn.net/Articles/351422/
> Just read last month, when Ken Thomson was asked what he'd do
> differently about Unix IO api, he would have spelt creat as "create".
>
> zen
>
>
> > On Oct 9, 2009, at 1:10 PM, Terence Parr wrote:
> > > On Oct 8, 2009, at 7:08 PM, Zenaan Harkness wrote:
> > >> On Thu, Oct 08, 2009 at 04:33:36PM -0700, Terence Parr wrote:
> > >>> should i reuse org.stringtemplate or should package be
> > >>> org.stringtemplate.v4 or something?  The classes are differently
> > >>> named
> > >>> so org.stringtemplate.ST and such might be ok.
> > >>
> > >> Are there any classes or packages that would overlap?
> > >
> > > Don't think so...ha! I just realized that the old package was:
> > >
> > > package org.antlr.stringtemplate;
> > >
> > > so
> > >
> > > package org.stringtemplate;
> > >
> > > it is then! no collision.
> > >
> > > Ter
>
> --
> Homepage: www.SoulSound.net -- Free Australia: www.UPMART.org
> Please respect the confidentiality of this email as sensibly  
> warranted.
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>
>
>
> -- 
> Regards,
>
> Robert Byrne,
> CTO, Iceberg
>
> www.geticeberg.com
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20091017/b6b5253e/attachment-0001.html 

From parrt at cs.usfca.edu  Sat Oct 17 10:24:43 2009
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sat, 17 Oct 2009 10:24:43 -0700
Subject: [stringtemplate-interest] [antlr-interest] [Antlr + ST] Huge
	output string - OutOfMemoryError
In-Reply-To: <d6e63684c91bda43a9dd01ec27d445f5@temporal-wave.com>
References: <d6e63684c91bda43a9dd01ec27d445f5@temporal-wave.com>
Message-ID: <F582A1CF-2F80-495A-8362-2B5E9F463679@cs.usfca.edu>

An important note about using ST: don't translate toString and then  
emit. Send in a Writer to write().  No need to buffer in memory.   
CC'ing the other list.
Ter

On Oct 17, 2009, at 9:05 PM, Jim Idle wrote:

> Run Java with   - Xmx1500M
>
> Or some other option that increases available memory size. However  
> this could point to something that can be better organized in terms  
> of recursion or whatever.
>
> You may also consider running Java with a better garbage collector  
> such as:
>
> -Xincgc
>
> JIm
>
>
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-bounces at antlr.org 
> ] On Behalf Of Hieu Phung
> Sent: Friday, October 16, 2009 4:03 PM
> To: antlr-interest at antlr.org
> Subject: [antlr-interest] [Antlr + ST] Huge output string -  
> OutOfMemoryError
>
> Hi all,
>
> I am writing a program using Antlr and StringTemplate to translate  
> an input file to an XML file. Input is small but output is huge:  
> 720KB input file will generate about 100MB output file. When my  
> input reached 7608KB, I got OOM error
>
> time taken in second: 18 - file size in KB: 4804
> time taken in second: 20 - file size in KB: 5205
> time taken in second: 20 - file size in KB: 5605
> time taken in second: 21 - file size in KB: 6006
> time taken in second: 23 - file size in KB: 6406
> time taken in second: 25 - file size in KB: 6806
> time taken in second: 31 - file size in KB: 7207
>
> at size 7608KB:
> Exception in thread "main" java.lang.OutOfMemoryError: Java heap space
>         at java.util.Arrays.copyOf(Arrays.java:2882)
>         at  
> java 
> .lang 
> .AbstractStringBuilder.expandCapacity(AbstractStringBuilder.java:100)
>         at  
> java.lang.AbstractStringBuilder.append(AbstractStringBuilder.java:572)
>         at java.lang.StringBuffer.append(StringBuffer.java:320)
>         at java.io.StringWriter.write(StringWriter.java:60)
>         at  
> org 
> .antlr.stringtemplate.AutoIndentWriter.write(AutoIndentWriter.java: 
> 172)
>         at  
> org.antlr.stringtemplate.language.ASTExpr.writePOJO(ASTExpr.java:702)
>         at  
> org.antlr.stringtemplate.language.ASTExpr.write(ASTExpr.java:683)
>         at  
> org 
> .antlr.stringtemplate.language.ASTExpr.writeAttribute(ASTExpr.java: 
> 660)
>         at  
> org 
> .antlr 
> .stringtemplate.language.ActionEvaluator.action(ActionEvaluator.java: 
> 86)
>         at  
> org.antlr.stringtemplate.language.ASTExpr.write(ASTExpr.java:149)
>         at  
> org.antlr.stringtemplate.StringTemplate.write(StringTemplate.java:705)
>         at  
> org.antlr.stringtemplate.language.ASTExpr.writeTemplate(ASTExpr.java: 
> 750)
>         at  
> org.antlr.stringtemplate.language.ASTExpr.write(ASTExpr.java:680)
>         at  
> org 
> .antlr 
> .stringtemplate.language.ASTExpr.writeIterableValue(ASTExpr.java:792)
>         at  
> org.antlr.stringtemplate.language.ASTExpr.write(ASTExpr.java:682)
>         at  
> org 
> .antlr.stringtemplate.language.ASTExpr.writeAttribute(ASTExpr.java: 
> 660)
>         at  
> org 
> .antlr 
> .stringtemplate.language.ActionEvaluator.action(ActionEvaluator.java: 
> 86)
>         at  
> org.antlr.stringtemplate.language.ASTExpr.write(ASTExpr.java:149)
>         at  
> org.antlr.stringtemplate.StringTemplate.write(StringTemplate.java:705)
>         at  
> org.antlr.stringtemplate.StringTemplate.toString(StringTemplate.java: 
> 1670)
>         at  
> org.antlr.stringtemplate.StringTemplate.toString(StringTemplate.java: 
> 1661)
>         at FFMParser.file(FFMParser.java:127)
>         at CSVTest.main(CSVTest.java:33)
>
> Is there any suggestion so that program can generate 1GB file?
>
> 1)       Having multiple templates, each template generates small  
> string, then write the small strings to file.
> My input has format: ((Part1) (Part2)+ (Part3)). For each part2,  
> there is an xml element in the output. I can have 3 templates here.  
> In Antlr action, I will write each part to file when parsing is done  
> for the part.
>
> 2)       Any template engine that could write to file directly,  
> instead of returning a string...? (This might not be proper to  
> discussed here :D)
>
> I hope problem is stated clearly. Please let me know if you need  
> more information. Any suggestion is much appreciated. Thank you.
> Regards,
> Helen
>
>
>
>
>
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20091017/d0ed042b/attachment.html 

From ockham at gmail.com  Sat Oct 17 11:55:03 2009
From: ockham at gmail.com (Joseph Grace)
Date: Sat, 17 Oct 2009 11:55:03 -0700
Subject: [stringtemplate-interest] package name
Message-ID: <e3eda7ce0910171155k693b9d30w8bcff2c0d4b621ea@mail.gmail.com>

On Sat, Oct 17, 2009, Zenaan Harkness wrote:
>http://lwn.net/Articles/351422/
>Just read last month, when Ken Thomson was asked what he'd do
>differently about Unix IO api, he would have spelt creat as "create".

I believe that "creat" vs. "create" and "ST" vs. "StringTemplate" are
fundamentally different and even opposing use cases.

"creat" is only 1 letter shorter than "create".
"ST" is a 12 letters more convenient than the hefty "StringTemplate".

"creat" sees infrequent use, suggesting the name should be explicit (as long
as necessary), specific, and self-documenting, and not clutter up the
abbreviated namespace.
"ST" is essential to use StringTemplate, so it sees frequent use and should
be as short as reasonable to declutter the code.  It deserves an
abbreviation.

"create" says what it means.
StringTemplate is made up and only has special meaning.  So "ST" is a made
up word with very specific meaning, StringTemplate.  It's short, so it
implies it deserves heavy use (see point 3, above) and has the benefit of
fairly unique spelling (capitalization sensitivity on for searching) as it
doesn't exist in the wild (unlike "Template" which may exist in code, or
even in English text).

So, I would say that while "creat" well deserves an "e", "ST" does not
necessarily deserve a "ringemplate".  I would say these are two different
use cases, and the same principles actually suggest opposite treatments:
 longer for uncommon "creat" -> "create", and shorter for ubiquitous
"StringTemplate" -> "ST".

Bottom Line

Short implies heavy use, a gateway to a useful, frequently used library.
 That's what ST should be for its use cases, and the long name negates some
of its convenience.  And because of its hefty typing load, IMO,
"StringTemplate" sends the wrong message to potential users of the
StringTemplate.

IMO:  "ST" >> "StringTemplate".

= Joe =
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20091017/cdbcb779/attachment.html 

From jonathan at buhacoff.net  Sat Oct 17 12:33:24 2009
From: jonathan at buhacoff.net (Jonathan Buhacoff)
Date: Sat, 17 Oct 2009 12:33:24 -0700
Subject: [stringtemplate-interest] package name
In-Reply-To: <e3eda7ce0910171155k693b9d30w8bcff2c0d4b621ea@mail.gmail.com>
References: <e3eda7ce0910171155k693b9d30w8bcff2c0d4b621ea@mail.gmail.com>
Message-ID: <E3D11BD7-6AC1-4B77-8F32-5AE2B6E15EF9@buhacoff.net>

Maybe a better parallel is that people who write a lot of I/O code in  
Java are constantly writing InputStream, FileInputStream, etc. Java  
has been around longer, and after 6 major versions of the Java  
language, these common and useful classes have not been abbreviated to  
IS or FIS.

I suppose if Terrence chooses ST and I really want to hear myself type  
StringTemplate more often, I could write class StringTemplate extends  
ST and use the full name :)

On Oct 17, 2009, at 11:55 AM, Joseph Grace wrote:

> On Sat, Oct 17, 2009, Zenaan Harkness wrote:
> >http://lwn.net/Articles/351422/
> >Just read last month, when Ken Thomson was asked what he'd do
> >differently about Unix IO api, he would have spelt creat as "create".
>
> I believe that "creat" vs. "create" and "ST" vs. "StringTemplate"  
> are fundamentally different and even opposing use cases.
>
> "creat" is only 1 letter shorter than "create".
> "ST" is a 12 letters more convenient than the hefty "StringTemplate".
>
> "creat" sees infrequent use, suggesting the name should be explicit  
> (as long as necessary), specific, and self-documenting, and not  
> clutter up the abbreviated namespace.
> "ST" is essential to use StringTemplate, so it sees frequent use and  
> should be as short as reasonable to declutter the code.  It deserves  
> an abbreviation.
>
> "create" says what it means.
> StringTemplate is made up and only has special meaning.  So "ST" is  
> a made up word with very specific meaning, StringTemplate.  It's  
> short, so it implies it deserves heavy use (see point 3, above) and  
> has the benefit of fairly unique spelling (capitalization  
> sensitivity on for searching) as it doesn't exist in the wild  
> (unlike "Template" which may exist in code, or even in English text).
>
> So, I would say that while "creat" well deserves an "e", "ST" does  
> not necessarily deserve a "ringemplate".  I would say these are two  
> different use cases, and the same principles actually suggest  
> opposite treatments:  longer for uncommon "creat" -> "create", and  
> shorter for ubiquitous "StringTemplate" -> "ST".
>
> Bottom Line
>
> Short implies heavy use, a gateway to a useful, frequently used  
> library.  That's what ST should be for its use cases, and the long  
> name negates some of its convenience.  And because of its hefty  
> typing load, IMO, "StringTemplate" sends the wrong message to  
> potential users of the StringTemplate.
>
> IMO:  "ST" >> "StringTemplate".
>
> = Joe =
>
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20091017/a7387e16/attachment.html 

From ockham at gmail.com  Sat Oct 17 13:15:20 2009
From: ockham at gmail.com (Joseph Grace)
Date: Sat, 17 Oct 2009 13:15:20 -0700
Subject: [stringtemplate-interest] package name
Message-ID: <e3eda7ce0910171315i75129df1xed458ab4e3ac2091@mail.gmail.com>

Jonathan Buhacoff wrote:

Maybe a better parallel is that people who write a lot of I/O code in

Java are constantly writing InputStream, FileInputStream, etc. Java

has been around longer, and after 6 major versions of the Java

language, these common and useful classes have not been abbreviated to

IS or FIS.


Yes, the long name suits the Java naming conventions.  However, for some
other languages/libraries (especially scripting languages), a long style
runs against the grain.  The nice thing about the shorter name is that it's
more accessible, convenient, and concise for code in all languages without
being too bizarre in any of them.

I believe we'd all like to see ST suit as many languages and styles as
possible.

= Joe =
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20091017/cebd18ac/attachment.html 

From zen at freedbms.net  Sat Oct 17 18:52:18 2009
From: zen at freedbms.net (Zenaan Harkness)
Date: Sun, 18 Oct 2009 12:52:18 +1100
Subject: [stringtemplate-interest] null vs missing vs empty
	vs	nonexistent
In-Reply-To: <2E9E2DCAC398430ABEE6B535AD06E210@wprod.ds.aphp.fr>
References: <2E9E2DCAC398430ABEE6B535AD06E210@wprod.ds.aphp.fr>
Message-ID: <20091018015218.GA4077@ip61>

On Fri, Oct 16, 2009 at 11:41:43AM +0200, Harry Karadimas wrote:
> Reminds me of the debates about SQL Null
> 
> http://en.wikipedia.org/wiki/Null_(SQL)
> 
> One other question is :
> 
> What must the user know about handling of null values to use st ?
> 
> If st becomes too complex, this will also hinder its adoption, so
> maybe let's not put too many operators/values/cases/options/etc.

Complexity can be ok, as long as there are counterbalancing
factors, such as consistency defaults, consistent treatment/ application
of the concept, completeness - not arbitrarily missing key use cases,
clean syntax, and flexibility for the ST user/ system designer to choose
_where_ in his system to handle different parts of the system's
complexity. Handling strictly view-specific "processing" in the view
specific tool (ST) rather than having to handle that view specific
complexity somewhere else, provides for sanity in the design of the
system, even if that means a slightly more featureful ST.

Hopefully I'm just reiterating the self evident.

Concept handling consistency, is much more important to ease-of-use
(particularly for casual but also regular) ST users, than mere
reduction in number of concepts handled/ provided for.

Eg:
If I have one part of ST (say IF conditional handling) which compresses
all into true or false (btw forcing me to handle 'empty' special casing
with view-model 'hacks'/ view-model compexity increase), yet in say
anonymous list processing the default ST processing is to treat empty
elements as present but empty and I am given special-case option to
'remove' empty elements, then I'm faced with a conceptual inconsistency.
I am forced to remember, depending on which ST syntax/context I'm in,
what the default treatment is in that localised context.
Increase in cognitive load.
Bad.

Conceptual inconsistency is bad complexity.

Incomplete concept handling for the domain being handled (eg view
processing/ ST), is false simplicity.

Conceptually (syntactically, contextually) consistent and complete tools
can and do make the ST user's task easier.

The real world dictates that we handle complexity.

The question is always how well does a particular tool, in this case ST,
facilitate handling that complexity.



> For me mainly three cases are relevant :
> 
> * there is no attribute named "foo"
> * there is an attribute named "foo", and its value is : null
> * there is an attribute named "foo", and its value is a string,
>   which is : "...(whatever, including the empty string)"

And for the next guy, the empty string is as good as a non-existent or
null element.

It is difficult to argue that empty-string vs non-empty-string is any
less valid-view-logic than is existence or non-existence of an
attribute.

Guaranteed, there will be someone's view, somewhere, that requires one,
another that requires the other, and another that requires both, in
order to generate the corresponding systems respective views.

> Maybe a fourth case to test if the value is the empty string
> could be relevant, and this would autmatically lead to a fifth
> case where the trimmed value (removing all spaces, tabs, 
> form feeds, vertical form feeds, ...) is the empty string.

Ah yes, you see the possibility.

:)

Now we're back to handling all cases.

To summarise my points:

   -  Real world dictates we handle complexity.

   -  Incomplete concept handling is false simplicity.

   -  Concept handling inconsistency is bad complexity.

   -  We should aim for conceptually complete, yet consistent, tools
      (according to the domain of the tool eg view handling,
      programming, etc)

cheers
zen

-- 
Homepage: www.SoulSound.net -- Free Australia: www.UPMART.org
Please respect the confidentiality of this email as sensibly warranted.

From zen at freedbms.net  Sat Oct 17 18:56:46 2009
From: zen at freedbms.net (Zenaan Harkness)
Date: Sun, 18 Oct 2009 12:56:46 +1100
Subject: [stringtemplate-interest] package name
In-Reply-To: <B57AAA3A-4061-4F1C-BAEA-56CC0207C858@cs.usfca.edu>
References: <BA3E087D-E129-415B-855C-CE92FB2CD6C6@cs.usfca.edu>
	<20091009020819.GD4142@ip61>
	<6D3155F7-D621-4908-9D2D-149A1B7DAB9C@cs.usfca.edu>
	<ABA6E7B6-345F-4681-9BFD-6ED5AABC72A9@buhacoff.net>
	<20091017082828.GC8734@ip61>
	<27f7ede70910170319w23de5b17m8ed870f41210fb33@mail.gmail.com>
	<B57AAA3A-4061-4F1C-BAEA-56CC0207C858@cs.usfca.edu>
Message-ID: <20091018015646.GB4077@ip61>

Please remember to bottom post everyone, where you can.


On Sat, Oct 17, 2009 at 10:21:32AM -0700, Terence Parr wrote:
> Hi Guys.  Let me think some more.  I sure have to write ST a LOT...plus 
> we all abbrev it as ST.
> Ter

I guess what there ought to be is a programming language 'alias'
facility. That's where it 'ought' to be in my mind, eg:

   import org.stringtemplate.StringTemplate alias ST;

JCP anyone? :)

zen


> On Oct 17, 2009, at 3:19 AM, Robert Byrne wrote:
>
>> I have to agree, the easy readability of StringTemplate wins over the 
>> shorter ST for me.
>>
>> 2009/10/17 Zenaan Harkness <zen at freedbms.net>
>> On Sat, Oct 17, 2009 at 12:14:33AM -0700, Jonathan Buhacoff wrote:
>> > Can we please keep complete class names?  I agree with Sam Harwell,
>> > who wrote in a different thread, that StringTemplate or Template is
>> > clearer than ST.
>>
>> I have to Ack this one!
>>
>> http://lwn.net/Articles/351422/
>> Just read last month, when Ken Thomson was asked what he'd do
>> differently about Unix IO api, he would have spelt creat as "create".
>>
>> zen
>>
>>
>> > On Oct 9, 2009, at 1:10 PM, Terence Parr wrote:
>> > > On Oct 8, 2009, at 7:08 PM, Zenaan Harkness wrote:
>> > >> On Thu, Oct 08, 2009 at 04:33:36PM -0700, Terence Parr wrote:
>> > >>> should i reuse org.stringtemplate or should package be
>> > >>> org.stringtemplate.v4 or something?  The classes are differently
>> > >>> named
>> > >>> so org.stringtemplate.ST and such might be ok.
>> > >>
>> > >> Are there any classes or packages that would overlap?
>> > >
>> > > Don't think so...ha! I just realized that the old package was:
>> > >
>> > > package org.antlr.stringtemplate;
>> > >
>> > > so
>> > >
>> > > package org.stringtemplate;
>> > >
>> > > it is then! no collision.
>> > >
>> > > Ter

-- 
Homepage: www.SoulSound.net -- Free Australia: www.UPMART.org
Please respect the confidentiality of this email as sensibly warranted.

From zen at freedbms.net  Sat Oct 17 19:16:09 2009
From: zen at freedbms.net (Zenaan Harkness)
Date: Sun, 18 Oct 2009 13:16:09 +1100
Subject: [stringtemplate-interest] ST interface: canonical name,
	and	null vs missing vs empty vs  nonexistent
In-Reply-To: <e3eda7ce0910171002o11bbe9b8w6ab4372e65aa9b8d@mail.gmail.com>
References: <e3eda7ce0910171002o11bbe9b8w6ab4372e65aa9b8d@mail.gmail.com>
Message-ID: <20091018021609.GC4077@ip61>

On Sat, Oct 17, 2009 at 10:02:25AM -0700, Joseph Grace wrote:
> Another several cents from a lurker in the shadows...
> 
> Penny 1.  "ST" > "Template" >> "StringTemplate" for wide adoption and use.
> 
> Ter's StringTemplate deserves wide adoption.  I believe a short name
> ST is useful in that regard.  If not ST, then Template (but please, no

+1 for Template.

> Penny 2.  Interfacing with Principle of Generous Acceptance
...
> For ST to fulfill its role as ubiquitously as possible, I believe ST's
> interface to the outside world should probably err on the side of
> being generously accepting, not just for Java but for other languages
> as well.  So, building on previous posts, I suggest balancing ST's
> purity of purpose with the need for ST to suit many idiosyncratic
> languages and situations with fewest hangups, hurdles, and surprises.
> In other words, ST should use generous acceptance to ensure ease of
> use without materially compromising its pure separation of model/view.

Ack.

Nice concept/ writeup. Thanks for sharing.


> I believe the following conditionals would help in that regard.
> Perhaps the "." syntax seems desirable, but perhaps not (see penny 3).
> 
>    -  if:  False unless the attribute exists.
> 
>    -  if.null:  False unless the attribute exists, and its value is NULL.
> 
>    -  if.empty:  False unless the attribute exists, and its value is "".
> 
>    -  if.true (for true/false):  False unless the attribute exists,
> and its value is boolean TRUE (for the host language).

I'll Ack something along these lines.

> - if.whitespace: False unless the attribute exists, and its value is "\w*".

We're better off separating "trim" as a function or option, I feel.


> NB: "if.true" (boolean) is defined relative to the host language (not to
> ST), which can vary in meaning w/r/t whether "" is false or not in the host
> language. So the host language (I would say) should be the determining
> factor of the "native" semantics for boolean in ST for ease of use with each
> and every host language. In other words, ST adopts the host language T/F
> semantics for native least astonishment, and ease of use.

That's good for the newcomer, but not so good for the system and library
builders.

Java's awt lib illustrates my point, where 'pixel perfect' layouts
(views) could not be consistently achieved, because the 'platform
specifics' (eg ST host language specifics) were different on different
platforms (languages).

An entire new library (swing) was developed. Not only that, but IBM went
and created eclipse foundation, and they created ANOTHER entire new gui
library (swt). In this case, because awt was inconsistent and
inflexible, and swing was not up to speed, nor free software, at the
time.

So, I have to -1 this one, and strongly suggest that consistency of view
generation, according to a consistent-with-itself and defined-in-a-spec
manner, is essential to some larger projects, which ST should not
ignore.

(YAML has gone through some similar phases, concluding with 'generous
acceptance' principle (not their words) re UTF8/UTF16/Unicode, _and_
clearly defining clear boundaries, syntax and bahaviour, so that
inter-language serialization compatibility is maximized.


> Penny 3. (calling out the "." syntax issue separately)
> It seems to me that the "." syntax could provide a customization hook for
> language/application specific idiosyncracies. Of course, such customizations
> would be frowned upon (for the risk of violating model/view separation of
> concerns) but would leave the door open to unforeseeable idiosyncracies in
> legacy et al. systems. Certain applications could use the dot syntax
> flexibility to add variant conditional(s) to eliminate simple problems for
> input streams for specific domains, and perhaps lead to no-brainer adoption
> where purity would otherwise interfere, without compromising the soundness
> of the ST model (since such customization should be few and far between and
> very specific to quirky use cases). The "." hook could allow some projects
> to adopt ST where they normally could not due to its otherwise
> uncompromising purity.

Good points, and I really get your drive to have ST be widely accepted/
usable etc. I do support this principle unreservedly :)

Regarding per-host-language "customizations" however, unless presented
with an example for which we cannot resolve or otherwise handle
'comfortably' and 'easily' using 'strictly-standard' ST semantics/
syntax, then let's stick to the high ground as long as possible.

cheers
zen

-- 
Homepage: www.SoulSound.net -- Free Australia: www.UPMART.org
Please respect the confidentiality of this email as sensibly warranted.

From zen at freedbms.net  Sat Oct 17 19:22:29 2009
From: zen at freedbms.net (Zenaan Harkness)
Date: Sun, 18 Oct 2009 13:22:29 +1100
Subject: [stringtemplate-interest] package name
In-Reply-To: <e3eda7ce0910171155k693b9d30w8bcff2c0d4b621ea@mail.gmail.com>
References: <e3eda7ce0910171155k693b9d30w8bcff2c0d4b621ea@mail.gmail.com>
Message-ID: <20091018022228.GD4077@ip61>

On Sat, Oct 17, 2009 at 11:55:03AM -0700, Joseph Grace wrote:
> On Sat, Oct 17, 2009, Zenaan Harkness wrote:
> >http://lwn.net/Articles/351422/
> >Just read last month, when Ken Thomson was asked what he'd do
> >differently about Unix IO api, he would have spelt creat as "create".
> 
> I believe that "creat" vs. "create" and "ST" vs. "StringTemplate" are
> fundamentally different and even opposing use cases.
> 
> "creat" is only 1 letter shorter than "create".
> "ST" is a 12 letters more convenient than the hefty "StringTemplate".
> 
> "creat" sees infrequent use, suggesting the name should be explicit (as long
> as necessary), specific, and self-documenting, and not clutter up the
> abbreviated namespace.
> "ST" is essential to use StringTemplate,

In the context of programmatically generated templates.

I have a "driver" to which I feed data and template-groups-in-files.

But I do grant that programmatic ST does not appear uncommon from what I
can tell...


> so it sees frequent use and should
> be as short as reasonable to declutter the code.  It deserves an
> abbreviation.
> 
> "create" says what it means.
> StringTemplate is made up and only has special meaning.  So "ST" is a made

Well that's true. I hadn't thought of it that way. Seemed so intuitive a
name. I guess we could consider StringsAndAttributesTemplate :)

What do you think about just "Template"?


> up word with very specific meaning, StringTemplate.  It's short, so it
> implies it deserves heavy use (see point 3, above) and has the benefit of
> fairly unique spelling (capitalization sensitivity on for searching) as it
> doesn't exist in the wild (unlike "Template" which may exist in code, or
> even in English text).

Hmm. You're swaying me on this one.


> So, I would say that while "creat" well deserves an "e", "ST" does not
> necessarily deserve a "ringemplate".  I would say these are two different
> use cases, and the same principles actually suggest opposite treatments:
>  longer for uncommon "creat" -> "create", and shorter for ubiquitous
> "StringTemplate" -> "ST".
> 
> Bottom Line
> 
> Short implies heavy use, a gateway to a useful, frequently used library.
>  That's what ST should be for its use cases, and the long name negates some
> of its convenience.  And because of its hefty typing load, IMO,
> "StringTemplate" sends the wrong message to potential users of the
> StringTemplate.
> 
> IMO:  "ST" >> "StringTemplate".
> 
> = Joe =

Template?

-- 
Homepage: www.SoulSound.net -- Free Australia: www.UPMART.org
Please respect the confidentiality of this email as sensibly warranted.

From jimi at temporal-wave.com  Sun Oct 18 23:54:06 2009
From: jimi at temporal-wave.com (Jim Idle)
Date: Mon, 19 Oct 2009 12:24:06 +0530
Subject: [stringtemplate-interest] package name
In-Reply-To: <B57AAA3A-4061-4F1C-BAEA-56CC0207C858@cs.usfca.edu>
Message-ID: <450f248a5317794798e32109d79b8864@temporal-wave.com>

Most IDES will allow you to add an abbreviation that is auto expanded when you hit <tab> or similar. Netbeans is good at this, eclipse is not bad, don't know about IDEA. However I would favor more explicit names and IDE shortcuts as few people use vi to program Java these days, expect for me occasionally ;-)

 

Jim

 

From: stringtemplate-interest-bounces at antlr.org [mailto:stringtemplate-interest-bounces at antlr.org] On Behalf Of Terence Parr
Sent: Saturday, October 17, 2009 10:52 PM
To: stringtemplate-interest at antlr.org Template
Subject: Re: [stringtemplate-interest] package name

 

Hi Guys.  Let me think some more.  I sure have to write ST a LOT...plus we all abbrev it as ST.

Ter

On Oct 17, 2009, at 3:19 AM, Robert Byrne wrote:





I have to agree, the easy readability of StringTemplate wins over the shorter ST for me.

2009/10/17 Zenaan Harkness <zen at freedbms.net>

On Sat, Oct 17, 2009 at 12:14:33AM -0700, Jonathan Buhacoff wrote:
> Can we please keep complete class names?  I agree with Sam Harwell,
> who wrote in a different thread, that StringTemplate or Template is
> clearer than ST.

I have to Ack this one!

http://lwn.net/Articles/351422/
Just read last month, when Ken Thomson was asked what he'd do
differently about Unix IO api, he would have spelt creat as "create".

zen



> On Oct 9, 2009, at 1:10 PM, Terence Parr wrote:
> > On Oct 8, 2009, at 7:08 PM, Zenaan Harkness wrote:
> >> On Thu, Oct 08, 2009 at 04:33:36PM -0700, Terence Parr wrote:
> >>> should i reuse org.stringtemplate or should package be
> >>> org.stringtemplate.v4 or something?  The classes are differently
> >>> named
> >>> so org.stringtemplate.ST and such might be ok.
> >>
> >> Are there any classes or packages that would overlap?
> >
> > Don't think so...ha! I just realized that the old package was:
> >
> > package org.antlr.stringtemplate;
> >
> > so
> >
> > package org.stringtemplate;
> >
> > it is then! no collision.
> >
> > Ter

--
Homepage: www.SoulSound.net -- Free Australia: www.UPMART.org
Please respect the confidentiality of this email as sensibly warranted.
_______________________________________________

stringtemplate-interest mailing list
stringtemplate-interest at antlr.org
http://www.antlr.org/mailman/listinfo/stringtemplate-interest




-- 
Regards,

Robert Byrne,
CTO, Iceberg

www.geticeberg.com
_______________________________________________
stringtemplate-interest mailing list
stringtemplate-interest at antlr.org
http://www.antlr.org/mailman/listinfo/stringtemplate-interest

 



-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20091019/da907cfa/attachment.html 

From zen at freedbms.net  Sun Oct 18 00:21:50 2009
From: zen at freedbms.net (Zenaan Harkness)
Date: Sun, 18 Oct 2009 18:21:50 +1100
Subject: [stringtemplate-interest] package name
In-Reply-To: <450f248a5317794798e32109d79b8864@temporal-wave.com>
References: <B57AAA3A-4061-4F1C-BAEA-56CC0207C858@cs.usfca.edu>
	<450f248a5317794798e32109d79b8864@temporal-wave.com>
Message-ID: <20091018072150.GA13456@ip61>

On Mon, Oct 19, 2009 at 12:24:06PM +0530, Jim Idle wrote:
> Most IDES will allow you to add an abbreviation that is auto expanded
> when you hit <tab> or similar. Netbeans is good at this, eclipse is
> not bad, don't know about IDEA. However I would favor more explicit
> names and IDE shortcuts as few people use vi to program Java these
> days, expect for me occasionally ;-)

Steady on, steady on there!!

<platitudes>There there vi, it's ok...

:)

For a few years now, vi is all I've used. Did a little eclipse, and used
Emacs full time for 18 months some years back too - was good for docbook
doco.

I find my own build scripts (given my bash competancy) are quick, and I
know exactly what's happening. So's vi...

I do plan to revisit Eclipse though, when I upgrade my lappy.

best
zen

-- 
Homepage: www.SoulSound.net -- Free Australia: www.UPMART.org
Please respect the confidentiality of this email as sensibly warranted.

From ockham at gmail.com  Sun Oct 18 08:39:20 2009
From: ockham at gmail.com (Joseph Grace)
Date: Sun, 18 Oct 2009 08:39:20 -0700
Subject: [stringtemplate-interest] On Pragmatism Violating Purity For The
	Win (was: ST interface: canonical name,
	and null vs missing vs empty vs nonexistent)
Message-ID: <e3eda7ce0910180839o74aae999h8fdb5fd804237799@mail.gmail.com>

*Zenaan Harkness* wrote at *Sat Oct 17 19:16:09 PDT 2009:**

>+1 for Template.

Yes.

>> Penny 2.  Interfacing with Principle of Generous Acceptance

>Ack.

>Nice concept/ writeup. Thanks for sharing.

Thank you.

>> NB: "if.true" (boolean) is defined relative to the host language (not to>> ST), which can vary in meaning w/r/t whether "" is false or not in the host>> language. So the host language (I would say) should be the determining>> factor of the "native" semantics for boolean in ST for ease of use with each>> and every host language. In other words, ST adopts the host language T/F>> semantics for native least astonishment, and ease of use.>
>That's good for the newcomer, but not so good for the system and library
>builders.
>
>Java's awt lib illustrates my point, where 'pixel perfect' layouts [...]

I agree with your concern in general but not in this case so much.

Yes, this feature would be more for language impedance matching, and
not so much for large system building.  As a complement to the system
building approach, "if.true" would provide a language-relative
solution to boolean, to perfectly match the host language's
interpretation of TRUE/FALSE.  System builders could avoid it like the
plague (as its optional), but it could still cover the bases for
others.  Since it's just one feature with many if.* duplicates, I
don't think the AWT example applies in this case (though it would in
more complex cases).  There's no necessity to use "if.true", and it's
not intertwined with a bunch of other features.  "if.true" would be
independent and optional, just one isolated feature.  System builders
would be unaffected by this feature unless they choose to use it.

I prefer to think of "if.true" as getting the best of both worlds:
absolute definitions (predefined, for robust systems) and relative
(impedance matched to the host language, for lightweight, seamless
solutions).  In some (many?) cases, if.true would duplicate one of the
other if.*, so it may only provide duplicate functionality in some
languages, but it would often be welcome where it does provide
specific semantics for its seamless use and transparent debugging.
And it would always respect the host language interpretation of
TRUE/FALSE, so that TRUE in the language would always be TRUE in the
StringTemplate (fewer surprises, lower learning curve, less debugging,
reliable and unambiguous host language programming).

I agree that the absolute if.*'s should be well designed for system
building, but I think if.true complements them even if it's just for quicky,
lightweight, and language specific application(s).

>Regarding per-host-language "customizations" however, unless presented

>with an example for which we cannot resolve or otherwise handle

>'comfortably' and 'easily' using 'strictly-standard' ST semantics/

>syntax, then let's stick to the high ground as long as possible.

For the sake of discussion... taking the low-ground! :-)

I see three questions with the if.* syntax and hook(s):

1. grammar: would "if.*" syntax and customizability be a reasonable
evolution for the StringTemplate language?

Since noone's complaining (yet?), I am supposing "if.*" is viable
grammar-wise.

2. philosophy: would Ter be OK with it? Is opening Pandora's Box in a very
focused way acceptable (even though it could be abused to Turing
Completion)? StringTemplate is his baby, and he might have to rewrite _all_
his papers on StringTemplate! ;-) Seriously, the Pandora's Box nature of the
hook puts a twist on the language and its use. It may open many doors, but
it Ter needs to be happy with the approach going forward.

Only Ter knows for sure. IMO, it could provide an elegant solution to making
StringTemplate flexible but doing so in a way that is very explicitly for a
specific, well-defined, limited use: Gentleman's Agreement if you will. Even
though it could be abused, it wouldn't be the language's or language
designer's fault. Also, abuses would be obvious just by looking at the
if.hook implementation by any StringTemplate coder. Use at your own risk, as
the saying goes.

3. Pragmatism & Purity: does this feature buy StringTemplate any new value
or use cases (or potentially expand the user base :-)?

A. The first use case I have in mind is the "escape valve" use case. I know
in corporate programming (I've been in this situation myself, and I'm sure
many of you have as well), a programmer may _know_ something will work
exceptionally well, but it's NIH (Not Invented Here). The manager and/or
project leads are all very (and when I say "very", I mean pathologically)
averse to change, risk, the unknown --- especially anything which may lead
down a proverbial rabbit hole with nothing to show for it but lost schedule.
They neither listen nor trust, and come up with _any_ excuse to shoot stuff
down. The escape valve preempts their "rabbit hole" attacks with an
all-encompassing "Not a problem. Pragmatism Prevails. In worst case, we'll
just 'if.*' our way to a solution (and out of any rabbit hole, real or
imagined)!"

StringTemplate's strength, purity & strict separation of concerns, could be
perceived as one such rabbit hole.

To get in the door, it's hard enough, but as a programmer in a "rabbit hole"
catch-22, I could always use the "escape valve" of the external "if.*" hook
to let my manager/lead _know_ without any hedging at all that we always
maintain a hook to do what we need. Then the risk is only the value of
StringTemplate relative to the usually deplorable status quo (no longer the
risk of rabbit hole'ing the schedule). The blind alley is no longer so much
a concern, and StringTemplate becomes a viable option where it may be needed
desperately (stick-in-the-mud engineering teams).

"if.*" anyone?

B. The other use case I think of is for legacy systems (or perhaps new,
unforeseen languages) where the escape valve is purposely abused, but
provides some unforeseeable advantage for a specific project or language.
Again, it's an "escape valve" example, but in this case providing a hook to
use StringTemplate against the grain. In some ways, this case is like above,
except the escape valve has been put into practice. Perhaps there are some
creative ways to use StringTemplate that are unforeseen, or some languages
that could benefit if flexibility were allowed (even if frowned upon).

Perhaps this hook could be implemented explicitly, e.g., "hook.*",
"CaptainHook.*" or "PandorasBox.*" ;-). That would make it an "explicit"
violation of separation of concerns, but at least then a switch could be
turned on/off disabling all such escapes. A localized leak of you will.

OTOH, the gentleman's agreement approach of hiding such a hook in "if.*"
(even though it would be a Pandora's Box) seems like an elegant solution
less inviting of trouble. Perhaps more in taste with Ter's papers, so he
doesn't have to fully revise them to totally reverse his claims about
purity. ;-)

In both cases, pragmatism prevails but in either a localized, gentleman's
agreement way (if.*), or a very explicit "Use At Your Own Risk" way
(hook.*).

"hook.*" anyone?

C. Hmm, just occurs to me (again, not sure of use case, but here goes), the
if.hook would allow for render time computation (instead of the usual load
time computation via t.add(...)). This could be useful for touchy debugging
(e.g., print the time when the render happened, to coordinate with other
aspects of the system or see any hangups in the rendering). It could also
dovetail better with some render-time only systems, making StringTemplate a
possibility where it never was before. Compute on demand >> compute
everything up-front.

"render.*" anyone?

D. Going further with render.*, "stream.*" could also cut down on
unnecessary computation by allowing a hook for generating data indefinitely,
i.e., render by stream (instead of by add(...) frontloading). "if.stream"
could stream results into the render process so that infinite streams could
be rendered. Again, this hook could be abused (Pandora's Box) but the
express intention would be clear: streaming data only. stream.* would focus
on potentially infinite streaming computation, i.e., _only_ for computation
not available at time of load via t.add(...). Is _this_ feature a useful
feature, application for StringTemplate? Perhaps streaming could open a few
more doors for StringTemplate?

"if.stream" anyone?

E. The render.* hook also provides a mechanism to dovetail StringTemplate
into existing systems. All existing systems can be thought of as render time
solutions. Worst case to dovetail StringTemplate into such a system, you can
put the entire legacy system in a "render.MyLegacySystem" hook. Tada! You're
now using StringTemplate (not in the way intended, but at least it's there).
So instead of having to redesign everything from scratch for legacy
system(s), StringTemplate could segue its way into use. Then one could
slowly migrate a legacy system from legacy -> StringTemplate piecemeal
without ever guaranteeing it will fully convert. Less and less work done at
render time, more and more work done at load time. Perhaps this entire
approach would comfort and ease many projects (especially large ones) to a
pure style of Template rendering, without having to figure out up-front
whether the pure approach would even work for everything. As long as it
works for -something-, the legacy project(s) could benefit from
StringTemplate.

"render.*" anyone?

I have no concrete use case(s), but I believe the concepts of Limited
Laissez-Faire (Pandoras Box) and render time computing could open some more
doors for StringTemplate. "if.*" (and its Pandoras Box Partners) could
provide:

a. Domain specific language/library impedance matching and customization
("if.*" boolean and beyond). [Gentleman's Agreement]
b. General purpose escape valve for backdoor computation ("if.*").
[Pandora's Box via Gentleman's Agreement ;-]
c. Render time hook ("render.*"). [Gentleman's Agreement]
d. Streaming hook ("if.stream"). [Gentleman's Agreement]
e. Enterprise applications ("render.*" For The Win!-). [App Migration:
Piecemeal Purity]

I guess those are largely theoretical use cases, but they do come from
experience and contain some grains of truth. "b" is really the endgame for
"B" (above): a provision for desperate measures for whatever reason, so that
StringTemplate can be used in impure situations without hitting a dead-end
(rabbit-hole'ing), alleviating the purity requirement without diminishing
the purity claim or design (via Gentleman's Agreement). Pragmatism Persists
while Purity Prevails.

"e" is more of the same but even more so, as the application is merely
trying to reach out for better purity, with no guarantee it will ever get
there.

So those are my theoretical use cases where with a few hooks into the
language, a lot of doors could open for StringTemplates where possibly
Pragmatism Violates Purity For The Win.

Apologies for the length, and expanding the discussion in an unforeseen way.

Ducking :-),

= Joe =

*
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20091018/60e755f0/attachment-0001.html 

From ockham at gmail.com  Sun Oct 18 08:55:02 2009
From: ockham at gmail.com (Joseph Grace)
Date: Sun, 18 Oct 2009 08:55:02 -0700
Subject: [stringtemplate-interest] package name: +1 for "Template"
Message-ID: <e3eda7ce0910180855g6847d488w707be357ff52cfed@mail.gmail.com>

*Zenaan Harkness* wrote at *Sat Oct 17 19:22:29 PDT 2009:*

>What do you think about just "Template"?

[...]

>Template?

Yes. +1

It's a good compromise if ST is distasteful for some. Its short enough to
suit all environment (IMO) and can be abbreviated to ST where desired. It
also explicitly says what it does, which never hurts.

Cheers,

= Joe =
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20091018/bfee58b6/attachment.html 

From sharwell at pixelminegames.com  Sun Oct 18 11:57:26 2009
From: sharwell at pixelminegames.com (Sam Harwell)
Date: Sun, 18 Oct 2009 13:57:26 -0500
Subject: [stringtemplate-interest] bottom posting
References: <20091018015646.GB4077@ip61>
Message-ID: <DD5A5D428FE040429CCDF377FAA892840152DDDA@martini.ironwillgames.com>

When you bottom post, people whose phones only download the first xx kB
of messages are rendered useless. After a lovely experience trying to
bring up my hotel/rental reservation on a delayed international flight
so I'd be ready for the short transit time, I realized bottom posting
was the work of evil forces.

Sam

-----Original Message-----
From: stringtemplate-interest-bounces at antlr.org
[mailto:stringtemplate-interest-bounces at antlr.org] On Behalf Of Zenaan
Harkness
Sent: Saturday, October 17, 2009 8:57 PM
To: stringtemplate-interest at antlr.org
Subject: Re: [stringtemplate-interest] package name

Please remember to bottom post everyone, where you can.


From sharwell at pixelminegames.com  Sun Oct 18 11:58:54 2009
From: sharwell at pixelminegames.com (Sam Harwell)
Date: Sun, 18 Oct 2009 13:58:54 -0500
Subject: [stringtemplate-interest] package name: +1 for "Template"
References: <e3eda7ce0910180855g6847d488w707be357ff52cfed@mail.gmail.com>
Message-ID: <DD5A5D428FE040429CCDF377FAA892840152DDDB@martini.ironwillgames.com>

This is what I originally suggested on 10/7.

 

Sam

 

From: stringtemplate-interest-bounces at antlr.org
[mailto:stringtemplate-interest-bounces at antlr.org] On Behalf Of Joseph
Grace
Sent: Sunday, October 18, 2009 10:55 AM
To: stringtemplate-interest at antlr.org
Subject: [stringtemplate-interest] package name: +1 for "Template"

 

Zenaan Harkness wrote at Sat Oct 17 19:22:29 PDT 2009:
>What do you think about just "Template"?
[...]

>Template?

 

Yes.  +1

 

It's a good compromise if ST is distasteful for some.  Its short enough
to suit all environment (IMO) and can be abbreviated to ST where
desired.  It also explicitly says what it does, which never hurts.

 

Cheers,

 

= Joe =

 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20091018/4b0c652b/attachment.html 

From sharwell at pixelminegames.com  Sun Oct 18 12:34:54 2009
From: sharwell at pixelminegames.com (Sam Harwell)
Date: Sun, 18 Oct 2009 14:34:54 -0500
Subject: [stringtemplate-interest] Status of the CSharp3 target and my C#
	ports of ANTLR and StringTemplate
Message-ID: <DD5A5D428FE040429CCDF377FAA892840152DDDD@martini.ironwillgames.com>

Hi everyone,

 

Here's a status update that I know many people are asking for. For each
portion, I'll talk about the status of the code in Perforce. At the end,
I'll talk about the status of the posted binaries.

 

Basic Status

 

StringTemplate and the ANTLR Tool: Up-to-date with the Java version for
all targets as of August 4, 2009, which covers all of the changes made
earlier in the year and over the summer.

 

CSharp3 Target: working and extensively used in the ANTLR Tool,
StringTemplate, and the commercial projects I use ANTLR for. I haven't
tested the -profile and -debug modes because I don't use them, however
the templates should be "close to working". Currently, the CSharp3
target can only be used when generating grammars from the C# port of the
tool.

 

Design Changes

 

1.       Rather than package the target templates as resources in the
tool's executable, I've chosen a flat file layout. That way, the
templates for a target can be updated without recompiling the tool. The
targets themselves are also implemented as individual DLL's.

2.       The CSharp3 target declares rules as private methods by
default. Rules can be made public by simply marking them as such in the
grammar: "public compile_unit : declaration*;" I have updated the Java
target's code generation to support this as well, but it's not checked
in.

3.       StringTemplate has code for a high speed dynamically compiled
interpreter. By default, the build doesn't enable this mode, but when
it's turned on the output appears to work correctly. I need to do
another round of tests, but at this point the C# ports of the ANTLR Tool
and StringTemplate should be significantly faster than the Java version.
We've hit a brick wall preventing further optimization without rewriting
ST, but the work on STv4 should give another order of magnitude
improvement in template rendering performance.

 

Things Holding Me Up

 

1.       I haven't finalized the way I'm going to do assembly
versioning, although I think I've got that worked out now. I'll send a
separate mail to the list regarding this.

2.       StringTemplate is only tested in regards to code generation for
the ANTLR tool. In particular, its ability to locate templates in
resources or on the file system is not documented and may or may not
behave as people expect.

3.       I'm still making periodic changes to the API as I finalize
things, and breaking changes in production code aren't good. I don't
want to suggest replacing the CSharp2 target until the CSharp3 target is
more tested by other people.

 

Things I want to do, but not really holding up the builds

 

I really want to package a clean integration of ANTLR+CSharp3 for
MSBuild. We need this. This would include at least MSBuild targets file
and templates for adding grammars to a project. Unfortunately, there are
many issues I still need to resolve for this to be a reality, most of
which have answers in shades of gray.

 

Status of the Posted Build

 

The build available for download was uploaded on fairly short notice.
Mistakes (by me) included not having the assembly version set correctly
and not posting the source code from the build with the binaries. I've
been trying to wrap some of these things up before posting another
build.

 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20091018/2fa7c83d/attachment.html 

From zen at freedbms.net  Sun Oct 18 15:39:12 2009
From: zen at freedbms.net (Zenaan Harkness)
Date: Mon, 19 Oct 2009 09:39:12 +1100
Subject: [stringtemplate-interest] On Pragmatism Violating Purity
	For	The Win (was: ST interface: canonical name,
	and null vs missing vs	empty vs nonexistent)
In-Reply-To: <e3eda7ce0910180839o74aae999h8fdb5fd804237799@mail.gmail.com>
References: <e3eda7ce0910180839o74aae999h8fdb5fd804237799@mail.gmail.com>
Message-ID: <20091018223912.GB4101@ip61>

On Sun, Oct 18, 2009 at 08:39:20AM -0700, Joseph Grace wrote:
> *Zenaan Harkness* wrote at *Sat Oct 17 19:16:09 PDT 2009:**
> >> NB: "if.true" (boolean) is defined relative to the host language (not to>> ST), which can vary in meaning w/r/t whether "" is false or not in the host>> language. So the host language (I would say) should be the determining>> factor of the "native" semantics for boolean in ST for ease of use with each>> and every host language. In other words, ST adopts the host language T/F>> semantics for native least astonishment, and ease of use.>
> >That's good for the newcomer, but not so good for the system and library
> >builders.
> >
> >Java's awt lib illustrates my point, where 'pixel perfect' layouts [...]
> 
> I agree with your concern in general but not in this case so much.
> 
> Yes, this feature would be more for language impedance matching, and
> not so much for large system building.  As a complement to the system
> building approach, "if.true" would provide a language-relative
> solution to boolean, to perfectly match the host language's
> interpretation of TRUE/FALSE.

I see. Language impedence matching. Could be useful.

I guess my concern is that if such a feature were in ST, that it not be
so simple to type that people would use it as the default true/false
test.

If it is a feature specifically for impedence matching, then it would
have relatively limited 'real world necessity' usage scope, say in
cross-language conversion templates or some such.

And the reason I say this is that if it becomes the 'default usage' (eg.
in tutorials/ on this list/ or just because it's so easy to type) then
the templates created with this feature will be non-deterministic across
ST runtimes/ languages/ implementations.

Do we wish to give up deterministic ST output production/ view
generation so easily?

I know I don't.

(Yes I realise it would be deterministic within the particular ST
runtime targetted, but then we would want to somehow declare that
assertion, and then add an option to ST to balk on failed assertions,
etc - the complexity is rising here, for such a feature.)

Adding a personal viewpoint - my feeling from using ST for a few years
on relatively small personal projects (although with some intensity), is
that I have had to get clear on ST boolean semantics, and that this is
par for the course. Each language, and ST is a language, has its
idiosyncracies. List processing. Boolean logic.  Predicates.
Documentation/ comments. Inheritance. Librarization/ componentization/
grouping. Facilities for complexity management.  Calling conventions
(eg, one fn to another, or in ST - one template to another).

There are so many places here where a language disconnect occurs, or
even simply just that the subtleties need to be known, that the
advantage of adding a host-env/lang-specific version of one ST feature
would, I feel confident, be outweighed by the increased overhead of
having to think about "which" features have a host-implementation
impedence matched version, and having to remember which version is that
version, and which version is the ST 'native' version. I think it's
better to keep ST 'primary usage' cleaner, and, if really needed,
provide impedence matching functionality either in libraries, or at
least as non-default behaviour/ clearly-identified-as-non-standard
syntax.


> System builders could avoid it like the
> plague (as its optional), but it could still cover the bases for
> others.  Since it's just one feature with many if.* duplicates, I
> don't think the AWT example applies in this case (though it would in
> more complex cases).  There's no necessity to use "if.true", and it's
> not intertwined with a bunch of other features.  "if.true" would be
> independent and optional, just one isolated feature.  System builders
> would be unaffected by this feature unless they choose to use it.
> 
> I prefer to think of "if.true" as getting the best of both worlds:
> absolute definitions (predefined, for robust systems) and relative
> (impedance matched to the host language, for lightweight, seamless
> solutions).  In some (many?) cases, if.true would duplicate one of the
> other if.*, so it may only provide duplicate functionality in some
> languages, but it would often be welcome where it does provide
> specific semantics for its seamless use and transparent debugging.
> And it would always respect the host language interpretation of
> TRUE/FALSE, so that TRUE in the language would always be TRUE in the
> StringTemplate (fewer surprises, lower learning curve, less debugging,
> reliable and unambiguous host language programming).

At this point, I do feel that we would need to see some real examples,
to be able to make a fair decision on such a feature being needed.
'If it aint broke, don't fix it.'

I only work in one host language, Java, so I'll have to leave such
examples up to you or others.


> >Regarding per-host-language "customizations" however, unless presented
> >with an example for which we cannot resolve or otherwise handle
> >'comfortably' and 'easily' using 'strictly-standard' ST semantics/
> >syntax, then let's stick to the high ground as long as possible.
> 
> For the sake of discussion... taking the low-ground! :-)
> 
> I see three questions with the if.* syntax and hook(s):
> 
> 1. grammar: would "if.*" syntax and customizability be a reasonable
> evolution for the StringTemplate language?

It would mean giving up cross-lang determinism of ST templates.
Which doesn't feel like a good thing to me.


> Since noone's complaining (yet?), I am supposing "if.*" is viable
> grammar-wise.

I don't see why not.


> 2. philosophy: would Ter be OK with it? Is opening Pandora's Box in a very
> focused way acceptable (even though it could be abused to Turing
> Completion)? StringTemplate is his baby, and he might have to rewrite _all_
> his papers on StringTemplate! ;-) Seriously, the Pandora's Box nature of the
> hook puts a twist on the language and its use. It may open many doors, but
> it Ter needs to be happy with the approach going forward.
> 
> Only Ter knows for sure. IMO, it could provide an elegant solution to making
> StringTemplate flexible but doing so in a way that is very explicitly for a
> specific, well-defined, limited use: Gentleman's Agreement if you will. Even
> though it could be abused, it wouldn't be the language's or language
> designer's fault. Also, abuses would be obvious just by looking at the
> if.hook implementation by any StringTemplate coder. Use at your own risk, as
> the saying goes.

Need a concrete example of a problem it solves. Hasn't been an issue on
the lists before know, and this discussion so far we've had the luxury
of living in hypothetical land.


> 3. Pragmatism & Purity: does this feature buy StringTemplate any new value
> or use cases (or potentially expand the user base :-)?
> 
> A. The first use case I have in mind is the "escape valve" use case. I know
> in corporate programming (I've been in this situation myself, and I'm sure
> many of you have as well), a programmer may _know_ something will work
> exceptionally well, but it's NIH (Not Invented Here). The manager and/or
> project leads are all very (and when I say "very", I mean pathologically)
> averse to change, risk, the unknown --- especially anything which may lead
> down a proverbial rabbit hole with nothing to show for it but lost schedule.
> They neither listen nor trust, and come up with _any_ excuse to shoot stuff
> down. The escape valve preempts their "rabbit hole" attacks with an
> all-encompassing "Not a problem. Pragmatism Prevails. In worst case, we'll
> just 'if.*' our way to a solution (and out of any rabbit hole, real or
> imagined)!"

It's that "or imagined" bit. We are just dealing with straw-men, until
there's a concrete problem demonstrated, which we can't readily solve
otherwise.

> StringTemplate's strength, purity & strict separation of concerns, could be
> perceived as one such rabbit hole.
> 
> To get in the door, it's hard enough, but as a programmer in a "rabbit hole"
> catch-22, I could always use the "escape valve" of the external "if.*" hook

Again, there are more areas in st, where host-env specific stuff could
be applied. No point adding just one without also addressing the others.

...
> "if.*" anyone?

NACK, to host-lang-specific version, at this point, for me.


> C. Hmm, just occurs to me (again, not sure of use case, but here goes), the
> if.hook would allow for render time computation (instead of the usual load
> time computation via t.add(...)). This could be useful for touchy debugging
> (e.g., print the time when the render happened, to coordinate with other
> aspects of the system or see any hangups in the rendering). It could also
> dovetail better with some render-time only systems, making StringTemplate a
> possibility where it never was before. Compute on demand >> compute
> everything up-front.
> 
> "render.*" anyone?

I believe Ter has on the agenda, better debugging, such as line-number
outputs etc.

Also, we of course already have custom attribute renderers...


> D. Going further with render.*, "stream.*" could also cut down on
... 
> "if.stream" anyone?

Stream processing I think is a different kettle of fish.
Perhaps awk and sed?

No-one's presented the list with an actual use-case...


cheers
zen

-- 
Homepage: www.SoulSound.net -- Free Australia: www.UPMART.org
Please respect the confidentiality of this email as sensibly warranted.

From ockham at gmail.com  Sun Oct 18 17:59:07 2009
From: ockham at gmail.com (Joseph Grace)
Date: Sun, 18 Oct 2009 17:59:07 -0700
Subject: [stringtemplate-interest] On Pragmatism Violating Purity For The Win
Message-ID: <e3eda7ce0910181759y588ed702k9b547278e5b6eec8@mail.gmail.com>

*Zenaan Harkness* wrote on *Sun Oct 18 15:39:12 PDT 2009:***



*

>I guess my concern is that if such a feature were in ST, that it not be
>so simple to type that people would use it as the default true/false
>test.

I don't see "if.true" becoming the default test.  FYI, I see "if"
(i.e., the common already in-use operator) as the default.  That's the
legacy code, so that's the likely default, not some newfangled
operator that is optional.

How about a name change from "if.true" to "native.if"?

By the way, this is just one feature or featureset, e.g., "native.if".
 To me, it's not that complicated, and since it's optional, anyone can
avoid it.  The one or a few tests might not even need tweaking.  That
does not make for a confusing situation to me.  So, I do not see
logistical bugbear here.  I do see potential philosophical issues, but
no logistical nightmare.


>Do we wish to give up deterministic ST output production/ view

>generation so easily?

>I know I don't.

"deterministic ST output":  Are you talking purity or practicality?
Purity prohibits even one operator of native compatibility.  That
would prohibit "native.if"?  Would that one instruction really
contaminate the entire instruction set?  Even if it were totally
isolated to one instruction?  One naming convention?  Well-documented?
 Easy-to-use for those who don't care about other languages?  What if
ST had a flag to warn/error on any use of "native.if"?  That would
solve the problem for portable ST;  just turnon the error flag, and ST
warns/errs on any "native.*" use.  Let the computer flag undesirable
use (or use global search to check).

The rest can use "native.if" with impunity.

> It would mean giving up cross-lang determinism of ST templates.

I do not think so.  Just turn on warnings/errors to prohibit
"native.if", and don't use it.  Those experts writing portable ST
applications would avoid it "like the plague" as I pointed out in my
earlier post.

This linguistic confusion, IMO, is a non-issue.  It's trivially
flagged (naming convention), removed (search-and-replace), and avoided
(just don't use).  I doubt a broader base of ST would involve majority
writing portable ST.  Most just want tools that work on their one
machine.


> Need a concrete example of a problem it solves. Hasn't been an issue on
> the lists before know, and this discussion so far we've had the luxury
> of living in hypothetical land.

I'm confused.  This whole topic started with the discussion of
splitting "if" into "if" variants.  That's a real world issue from
this list.

> Again, there are more areas in st, where host-env specific stuff could
> be applied. No point adding just one without also addressing the others.

Umm, I'm assuming this is the proverbial can of worms you are afraid
of?  Is that where all this confusion is coming from?  FYI, I am just
talking about this one feature (or some well-constrained variant), and
I think this feature has merit on its own.  (Let the other issues
stand on their own merits.)

-=-

I'm disappointed this conversation got off track, but then I probably
put too much in one message.  I think the various options I mentioned
raise some interesting potential uses for ST, but they were ideas (and
not concrete).

The basic issues to me at this point are whether a hook should be
added for multiple "if"s?  Whether to include a "native.if"?  Whether
to create an open-ended hook for customization at render time, e.g.,
"native.*"?

Perhaps "native.*" could be the namespace for open-ended render-time
hooks, and "native.if" would default to the native language
conditional and provide a simple example of such customization?

If so, the "native.if" could be there by default, but easily
customized by any programmer.  Frankly, most users (e.g.,
non-programmers) wouldn't care to customize, but necessity is the
mother of invention... so any user that needed/wanted to customize
could use the "native.*" ST operator namespace.  Then perhaps some
language/application specific ST customizations would start appearing!

Cheers,

= Joe =

P.s., no, I do not have any burning use cases for "native.*".  Just
thinking aloud based on the split "if" semantics issue.


*
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20091018/f9e7f2f2/attachment-0001.html 

From zen at freedbms.net  Sun Oct 18 18:22:26 2009
From: zen at freedbms.net (Zenaan Harkness)
Date: Mon, 19 Oct 2009 12:22:26 +1100
Subject: [stringtemplate-interest] On Pragmatism Violating Purity
	For	The Win
In-Reply-To: <e3eda7ce0910181759y588ed702k9b547278e5b6eec8@mail.gmail.com>
References: <e3eda7ce0910181759y588ed702k9b547278e5b6eec8@mail.gmail.com>
Message-ID: <20091019012226.GA8953@ip61>

On Sun, Oct 18, 2009 at 05:59:07PM -0700, Joseph Grace wrote:
> *Zenaan Harkness* wrote on *Sun Oct 18 15:39:12 PDT 2009:***
> *
> 
> >I guess my concern is that if such a feature were in ST, that it not be
> >so simple to type that people would use it as the default true/false
> >test.
> 
> I don't see "if.true" becoming the default test.  FYI, I see "if"
> (i.e., the common already in-use operator) as the default.  That's the
> legacy code, so that's the likely default, not some newfangled
> operator that is optional.
> 
> How about a name change from "if.true" to "native.if"?

native.* seems clear enough.

That could be suitable. I'd still like to see an actual use-case-
with-code that requires this though.

...
> Purity prohibits even one operator of native compatibility.  That

If we added native.if, are there other operators you see
being useful in the native.* library?


> > Need a concrete example of a problem it solves. Hasn't been an issue on
> > the lists before know, and this discussion so far we've had the luxury
> > of living in hypothetical land.
> 
> I'm confused.  This whole topic started with the discussion of
> splitting "if" into "if" variants.  That's a real world issue from
> this list.

Modifying ST into 'platform specific' variants is a significant
change if it were undertaken.

An actual example would be useful to the discussion.

I'm thinking that an actual example, which clearly identifies
the problem from a specific language (eg python, C#, whatever)
might be easy to counter with existing simple ST techniques.

If native.if were the only elegant solution, then that would be
useful information to the discussion ...


> > Again, there are more areas in st, where host-env specific stuff could
> > be applied. No point adding just one without also addressing the others.
> 
> Umm, I'm assuming this is the proverbial can of worms you are afraid
> of?  Is that where all this confusion is coming from?  FYI, I am just
> talking about this one feature (or some well-constrained variant), and
> I think this feature has merit on its own.  (Let the other issues
> stand on their own merits.)

It may have merit enough to stand on its own.

A native.* library would be good to think/ plan for in advance
though, rather than one feature at a time, don't you think?

Good discussion
zen

-- 
Homepage: www.SoulSound.net -- Free Australia: www.UPMART.org
Please respect the confidentiality of this email as sensibly warranted.

From jimi at temporal-wave.com  Tue Oct 20 00:46:20 2009
From: jimi at temporal-wave.com (Jim Idle)
Date: Tue, 20 Oct 2009 13:16:20 +0530
Subject: [stringtemplate-interest] bottom posting
In-Reply-To: <DD5A5D428FE040429CCDF377FAA892840152DDDA@martini.ironwillgames.com>
Message-ID: <4266b2da7f6bde4498b637b3864397fc@temporal-wave.com>

Basically guys we have debated this stuff many times and it is a waste of group bandwidth. The conclusion was that people are free to do what they think is best as Ter doesn't care and it is his list ;-) So let's not worry about this any more.

Jim

> -----Original Message-----
> From: stringtemplate-interest-bounces at antlr.org [mailto:stringtemplate-
> interest-bounces at antlr.org] On Behalf Of Sam Harwell
> Sent: Monday, October 19, 2009 12:27 AM
> To: Zenaan Harkness; stringtemplate-interest at antlr.org
> Subject: Re: [stringtemplate-interest] bottom posting
> 
> When you bottom post, people whose phones only download the first xx kB
> of messages are rendered useless. After a lovely experience trying to
> bring up my hotel/rental reservation on a delayed international flight
> so I'd be ready for the short transit time, I realized bottom posting
> was the work of evil forces.
> 
> Sam
> 
> -----Original Message-----
> From: stringtemplate-interest-bounces at antlr.org
> [mailto:stringtemplate-interest-bounces at antlr.org] On Behalf Of Zenaan
> Harkness
> Sent: Saturday, October 17, 2009 8:57 PM
> To: stringtemplate-interest at antlr.org
> Subject: Re: [stringtemplate-interest] package name
> 
> Please remember to bottom post everyone, where you can.
> 
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest




From jimi at temporal-wave.com  Tue Oct 20 00:51:25 2009
From: jimi at temporal-wave.com (Jim Idle)
Date: Tue, 20 Oct 2009 13:21:25 +0530
Subject: [stringtemplate-interest] Status of the CSharp3 target and my
	C# ports of ANTLR and StringTemplate
In-Reply-To: <DD5A5D428FE040429CCDF377FAA892840152DDDD@martini.ironwillgames.com>
Message-ID: <cc529a5754e5204bafd87d397c57b7ba@temporal-wave.com>

Top posting for Sam's benefit ;-)

 

Not being able to use the Csharp3 target from the standard version of the tool is going to be a turn off for many I think L What is it that your port of the tool has that the standard version does not. I know you have posted some of that, but perhaps we can summarize this and see if such things can be absorbed into the standard Java tool? Nobody minds you having your own version of anything because it is open source, but most will want ot use the 'offical' java version of the tool even if they are targeting C#.

 

Thanks for the updates,

 

Jim

 

From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-bounces at antlr.org] On Behalf Of Sam Harwell
Sent: Monday, October 19, 2009 1:05 AM
To: antlr-interest at antlr.org; stringtemplate-interest at antlr.org
Subject: [antlr-interest] Status of the CSharp3 target and my C# ports of ANTLR and StringTemplate

 

Hi everyone,

 

Here's a status update that I know many people are asking for. For each portion, I'll talk about the status of the code in Perforce. At the end, I'll talk about the status of the posted binaries.

 

Basic Status

 

StringTemplate and the ANTLR Tool: Up-to-date with the Java version for all targets as of August 4, 2009, which covers all of the changes made earlier in the year and over the summer.

 

CSharp3 Target: working and extensively used in the ANTLR Tool, StringTemplate, and the commercial projects I use ANTLR for. I haven't tested the -profile and -debug modes because I don't use them, however the templates should be "close to working". Currently, the CSharp3 target can only be used when generating grammars from the C# port of the tool.

 

Design Changes

 

1.       Rather than package the target templates as resources in the tool's executable, I've chosen a flat file layout. That way, the templates for a target can be updated without recompiling the tool. The targets themselves are also implemented as individual DLL's.

2.       The CSharp3 target declares rules as private methods by default. Rules can be made public by simply marking them as such in the grammar: "public compile_unit : declaration*;" I have updated the Java target's code generation to support this as well, but it's not checked in.

3.       StringTemplate has code for a high speed dynamically compiled interpreter. By default, the build doesn't enable this mode, but when it's turned on the output appears to work correctly. I need to do another round of tests, but at this point the C# ports of the ANTLR Tool and StringTemplate should be significantly faster than the Java version. We've hit a brick wall preventing further optimization without rewriting ST, but the work on STv4 should give another order of magnitude improvement in template rendering performance.

 

Things Holding Me Up

 

1.       I haven't finalized the way I'm going to do assembly versioning, although I think I've got that worked out now. I'll send a separate mail to the list regarding this.

2.       StringTemplate is only tested in regards to code generation for the ANTLR tool. In particular, its ability to locate templates in resources or on the file system is not documented and may or may not behave as people expect.

3.       I'm still making periodic changes to the API as I finalize things, and breaking changes in production code aren't good. I don't want to suggest replacing the CSharp2 target until the CSharp3 target is more tested by other people.

 

Things I want to do, but not really holding up the builds

 

I really want to package a clean integration of ANTLR+CSharp3 for MSBuild. We need this. This would include at least MSBuild targets file and templates for adding grammars to a project. Unfortunately, there are many issues I still need to resolve for this to be a reality, most of which have answers in shades of gray.

 

Status of the Posted Build

 

The build available for download was uploaded on fairly short notice. Mistakes (by me) included not having the assembly version set correctly and not posting the source code from the build with the binaries. I've been trying to wrap some of these things up before posting another build.

 



-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20091020/96118201/attachment.html 

From jonathan at buhacoff.net  Mon Oct 19 05:08:58 2009
From: jonathan at buhacoff.net (Jonathan Buhacoff)
Date: Mon, 19 Oct 2009 05:08:58 -0700
Subject: [stringtemplate-interest] On Pragmatism Violating Purity
	For	The Win
In-Reply-To: <20091019012226.GA8953@ip61>
References: <e3eda7ce0910181759y588ed702k9b547278e5b6eec8@mail.gmail.com>
	<20091019012226.GA8953@ip61>
Message-ID: <4AEF0643-5EB8-4809-8063-5C37C8DC488B@buhacoff.net>

I think the dive into if.*, render.*, etc can be avoided because:

1. The model author can easily create that functionality plus handle  
various forms of "empty" using renderers or wrapper classes as  
described in Terrence's papers, and in fact I use "render-time"  
computations routinely in my projects

2. The only thing that, IMHO, could really use a new operator is null  
vs non-null which right now can only be tested for non-boolean values.  
I think the "if" operator's behavior can stay exactly as it is, we  
just need an additional "ifnull" to test for null booleans (or that  
any other value is null/missing).

The other issue that was related to this discussion was how to treat  
nulls in lists. In my experience, the most convenient thing to do with  
nulls in lists is to drop them, but of course it's not always the  
case. I think it would be conceptually simple to drop nulls by  
default, and include them with an option. It would be analogous to  
leaving the current behavior of "if" and adding an option to check for  
null explicitly via "ifnull".

<if(attr)>     analogous to    <multi-valued; separator={,}>  because  
they both ignore nulls

<ifnull(attr)>    analogous to   <multi-valued; separator={,};  
null={}>   would include nulls AND allow a template author to decide  
how they get rendered, by supplying an aribitrary template.  So they  
can be rendered as an empty string with {}, or as the word NULL  with  
{NULL},  etc.   Terrence gave an example of this in the summer, with  
null="6".


--
Jonathan Buhacoff
jonathan at buhacoff.net
--



On Oct 18, 2009, at 6:22 PM, Zenaan Harkness wrote:

> On Sun, Oct 18, 2009 at 05:59:07PM -0700, Joseph Grace wrote:
>> *Zenaan Harkness* wrote on *Sun Oct 18 15:39:12 PDT 2009:***
>> *
>>
>>> I guess my concern is that if such a feature were in ST, that it  
>>> not be
>>> so simple to type that people would use it as the default true/false
>>> test.
>>
>> I don't see "if.true" becoming the default test.  FYI, I see "if"
>> (i.e., the common already in-use operator) as the default.  That's  
>> the
>> legacy code, so that's the likely default, not some newfangled
>> operator that is optional.
>>
>> How about a name change from "if.true" to "native.if"?
>
> native.* seems clear enough.
>
> That could be suitable. I'd still like to see an actual use-case-
> with-code that requires this though.
>
> ...
>> Purity prohibits even one operator of native compatibility.  That
>
> If we added native.if, are there other operators you see
> being useful in the native.* library?
>
>
>>> Need a concrete example of a problem it solves. Hasn't been an  
>>> issue on
>>> the lists before know, and this discussion so far we've had the  
>>> luxury
>>> of living in hypothetical land.
>>
>> I'm confused.  This whole topic started with the discussion of
>> splitting "if" into "if" variants.  That's a real world issue from
>> this list.
>
> Modifying ST into 'platform specific' variants is a significant
> change if it were undertaken.
>
> An actual example would be useful to the discussion.
>
> I'm thinking that an actual example, which clearly identifies
> the problem from a specific language (eg python, C#, whatever)
> might be easy to counter with existing simple ST techniques.
>
> If native.if were the only elegant solution, then that would be
> useful information to the discussion ...
>
>
>>> Again, there are more areas in st, where host-env specific stuff  
>>> could
>>> be applied. No point adding just one without also addressing the  
>>> others.
>>
>> Umm, I'm assuming this is the proverbial can of worms you are afraid
>> of?  Is that where all this confusion is coming from?  FYI, I am just
>> talking about this one feature (or some well-constrained variant),  
>> and
>> I think this feature has merit on its own.  (Let the other issues
>> stand on their own merits.)
>
> It may have merit enough to stand on its own.
>
> A native.* library would be good to think/ plan for in advance
> though, rather than one feature at a time, don't you think?
>
> Good discussion
> zen
>
> -- 
> Homepage: www.SoulSound.net -- Free Australia: www.UPMART.org
> Please respect the confidentiality of this email as sensibly  
> warranted.
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest


From zen at freedbms.net  Mon Oct 19 08:23:14 2009
From: zen at freedbms.net (Zenaan Harkness)
Date: Tue, 20 Oct 2009 02:23:14 +1100
Subject: [stringtemplate-interest] On Pragmatism Violating Purity
	For	The Win
In-Reply-To: <4AEF0643-5EB8-4809-8063-5C37C8DC488B@buhacoff.net>
References: <e3eda7ce0910181759y588ed702k9b547278e5b6eec8@mail.gmail.com>
	<20091019012226.GA8953@ip61>
	<4AEF0643-5EB8-4809-8063-5C37C8DC488B@buhacoff.net>
Message-ID: <20091019152314.GA26010@u8.ip61.upmart.info>

On Mon, Oct 19, 2009 at 05:08:58AM -0700, Jonathan Buhacoff wrote:
...
> case. I think it would be conceptually simple to drop nulls by  
> default, and include them with an option. It would be analogous to  
> leaving the current behavior of "if" and adding an option to check for  
> null explicitly via "ifnull".

Ack. And ack.

-- 
Homepage: www.SoulSound.net -- Free Australia: www.UPMART.org
Please respect the confidentiality of this email as sensibly warranted.

From jonathan at buhacoff.net  Mon Oct 19 08:24:09 2009
From: jonathan at buhacoff.net (Jonathan Buhacoff)
Date: Mon, 19 Oct 2009 08:24:09 -0700
Subject: [stringtemplate-interest] question about toString and maps
Message-ID: <696ADCB4-968E-4104-9AA2-8258A9E987AF@buhacoff.net>

Hi,  I'm trying to create a file with data that mimicks what my Java  
objects produce, for testing with my templates "offline".

My templates take advantage of the reflection and the toString features.

Normally I wouldn't be able to reproduce the toString() output from a  
properties file, so I created  a special implementation of Map to  
produce the toString values.  But... ST doesn't call toString() on the  
map, it calls values().

Concrete example of my "online" processing:

template.setAttribute("locale", (java.util.Locale)locale);

$locale$   ->  en_US   because that's what locale.toString() returns
$locale.language$ -> en
$locale.country$ -> US

Now with a property file, using my special map implementation:

locale=en_US    this entry is meant to produce the same as  
locale.toString()
locale.language=en
locale.country=US

$locale$   ->  USen    because ST called values() on the map I created  
from the properties file
$locale.language$ -> en
$locale.country$ -> US

I tried using the _default_ key, like this:

locale._default_=en_US

But it's being ignored because the map is iterable...

I'd like to extend ASTExpr.rawGetObjectProperty() and  
convertAnything*ToIterator() to have an additional case for a map that  
is not iterable. I'm thinking it can implement a marker interface,  
like LabeledMap or NonIterator, so that any object that implements a  
Map can also choose to have this behavior of providing a label with  
toString() instead of having its values iterated wherever it appears  
solely by name in the template.  The template author can still write  
map.keys and map.values  to explicitly iterate the map so I think that  
would be ok.

Any comments on this?  Is there another way?  If this sounds ok, I'll   
need to do it right away in my project.   I could send a patch if  
you're interested in allowing this in the next version.


--
Jonathan Buhacoff
jonathan at buhacoff.net
--




From ockham at gmail.com  Mon Oct 19 11:58:40 2009
From: ockham at gmail.com (Joseph Grace)
Date: Mon, 19 Oct 2009 11:58:40 -0700
Subject: [stringtemplate-interest] On Pragmatism Violating Purity For The Win
Message-ID: <e3eda7ce0910191158l623026b3o8827a386b2e52f01@mail.gmail.com>

*First, a clarification.  I finally found the canonical name for my
"Principle of Generous Acceptance".  It is the Robustness
Principle<http://en.wikipedia.org/wiki/Robustness_Principle> (also
"Postel's Principle").  (Apologies for not finding it on my previous
search!)
However, I still prefer my phrasing of it "Be strict in what you generate,
but generous in what you accept."

Zenaan Harkness* wrote at *Sun Oct 18 18:22:26 PDT 2009:*



> If we added native.if, are there other operators you see

> being useful in the native.* library?

I am not looking to add operators other than "if.*" to the core language.

The ST philosophy is strict separation of concerns.  Even the existing
"if" is a violation of strict separation in that ST inspects an aspect
of the model albeit in a very tidy way.  The recognition of a second
"if" is another step toward such pragmatism.  I believe the
"Robustness Principle" (strict in what you generate, generous in what
you accept) explains why these "if.*" are so important even though
(strictly speaking) they violate the purity of the language.  Add
"if.*" but only in a very controlled fashion, e.g., "if.null".  I do
not suggest ST be littered with operators and violations of model/view
separation.

> Modifying ST into 'platform specific' variants is a significant

> change if it were undertaken.

That's not my intent or intended suggestion.  The only supported
compatibility variant as envisioned would be the one instruction,
"native.if".  The rest of the "native.*" namespace would be for user
customizations (unsupported, Use At Your Own Risk).

> A native.* library would be good to think/ plan for in advance
> though, rather than one feature at a time, don't you think?

I'm thinking of "native.*" more as opening the door to user
extensions, not as a new part of the language.  Mostly for ease of
use, compatibility, and only a little bit of "Awaiting Further
Developments" if you will, to see what happens from user extensions.

-=-

The basic existence "if" is a practical necessity, and has been shown
largely "necessary and sufficient" for ST just not totally practical.
The question becomes how to handle multiple "if"s in ST.  I believe
the answer is to recognize that "necessary and sufficient" is not
necessarily sufficient!  "Practical" is also important, and I think
that's because of the "Robustness Principle", i.e., "generous in what
you accept" as in making ST easy to use (without losing ST's strength
and spirit of purity).

Hence adding multiple "if"s is practical, but how should it be
handled?  There's the rub.

I can see multiple options depending on how seriously one takes ease
of use, "Robustness Principle", and attitude toward ease of adoption
of ST (and how to go about it).  Just looking at ST language merits
(and not, e.g., a marketing campaign!), I see the options as follows:

1.  Should ST add a single monolithic operator, "ifnull".  Is that
practical?  What if there are other "if" operators that are desirable
(as already mentioned on this list)?

2. Should ST then add a clean syntax for multiple "if.*" language
independent operators?  Is that practical?  What if a common use case
is to dovetail ST onto an existing system, in a native language, and
the native language "if" is not found in ST?  What if ease of use is
compromised without native language friendly "if"?

3.  Should ST then add a "native.if" which handles language native
"if" but in a tidy, automatically flaggable (command line flag ->
warning/errors), but built-in fashion?  Does this increase
language/legacy friendliness enough, or does "Robustness Principle"
generosity suggest that users may have unforeseeable user-specific and
domain specific needs beyond "native.if"?

4.  Should ST then make "native.*" a generic hook for user-specific
augmentation of the language to suit their specific needs?
"native.if" would then be the exemplar (code template for "native.*"
extensions) for users to build additional hooks.  The hooks may be few
and far between, or become shared.  However, at least users would have
power to augment ST specifically for their needs (impure or not).  Now
users can customize ST in a controlled fashion ("native.*" operators)
using their language of choice for their application(s).  Would
"native.*" extensions be automatically portable across all ST users?
Of course not, since "native.*" extensions would be
language/application specific.  Would "native.*" extensions be
shareable at all?  Yes, "native.*" extensions could be shared among ST
users who share a common language/application (e.g., Ruby on Rails for
Ruby ST --- if it existed!-).  Is that desirable?  I think so.

So those are the options as I see them.  The big difference is
philosophy about where ST is headed, and how to get there?  Big steps
or baby steps?  I don't know, but I don't like monolithic design, and
do like options.

To recap:

1.  "ifnull"  (one new keyword)

2.  "if.null", "if.empty", et al.  (syntax extensions for a few
additional common ST use cases, tidy "if.*" extensibility)

3.  above + "native.if" (above + language compatible "native.if" for
native language compatibility use case)

4.  above + "native.*" (above + user extensible syntax hook for
open-ended user and application specific use cases)

IMO, these are all reasonable approaches.

I view #1 as a band-aid, old school (a la Bourne shell keywords) with
little future extensibility other than adding more monolithic
keywords.  #1 adds a "fix" with low-risk to purity, and low potential.

I see #2 as more promising.  It acknowledges there's a bit more to the
issue ("Robustness Principle"'s Generous Acceptance and ease-of-use)
than a single "ifnull" and explicitly leaves room for tidy "if.*" ST
extensibility.  #2 adds a more sophisticated fix with low-risk, and
some future potential (through the "if.*" syntax).

I like #3's extensibility since it takes the extensibility syntax to a
natural progression and adds a hint of native language compatibility,
"native.if".  #3 has #2's sophisticated fixes, and adds a
compatibility feature for native languages.  Philosophically, this
could be considered risky (portability violation).  OTOH, I believe
the nod to native language compatibility is a big step forward in
appreciating the importance of "Generous Acceptance" [Robustness
Principle] and ease of use.  In other words, even though purity
prevails in ST, pragmatism has its place.  The "native.if" would be
that built-in for ST.

I like #4 the best, but it's the riskiest (biggest leap) since it
would open the door to user extensibility.  Is there any value in user
extensibility, or it just a Pandora's Box?  I think it's a logical
extension and may have hidden value (unforeseen advantages).  As I
outlined in a previous post, providing full extensibility hooks is
sometimes essential for political/mental acceptance of "foreign"
technology, e.g., the NIH (Not Invented Here) Syndrome.  As long as
"necessity is the mother of invention", extensibility could lead to
some very innovative uses for ST.  To fully embrace "Generous
Acceptance" [Robustness Principle], "native.*" and user extensibilty
seems the next logical step when adding "if.*" and "native.if" to ST.

-=-

So that's how I see the "ifnull", "if.*", "native.if", and "native.*"
conversation.  It's been very thought-provoking.  I feel some
resistance by the experts (and maybe rightly so), but at least the
options are under consideration.

I'm mostly interested in Ruby and am toying with taking Ter's Toy-ST
and converting that to Ruby.  I've been wondering how to get ST on
Ruby for some time.  I'm hoping Toy-ST is the path of least
resistance.

I think it's important to give a nod to pragmatism, even when ST's
core strength is purity.  Perhaps it's even -more- important to nod to
pragmatism since ST has such strong purity genetics.  I think
pragmatism has already gotten a boost in the discussion of
abbreviating "StringTemplate" to "Template" (not to mention "ST").

IMO, ST has the genetics to be the king of the hill in templating, and
Ter continues to improve on it with v4.  The rub seems to be less
about genetics and power, than about packaging and ease of adoption.

I believe the biggest opportunity for ST to grow is to convert users
with greater ease of use, ease of adoption.  I believe ST's purity is
a two-edged sword.  Strict adherence to separation of concerns
(model/view) keeps the ST language pure and valuable, but can make ST
harder to adopt (and appear riskier to prospective users, tech leads,
managers).  I believe a few nods toward pragmatism with ("if.*") and
user extensibility ("native.*") could alleviate some of those
concerns.

Could these changes lead to wider ST adoption?  Possibly, but perhaps
that's just my wishful thinking.  We all want ST to be successful.
The question is how, not just from a purity of language standpoint,
but also from an ease-of-use and safety of adoption standpoint.  I
think "Generous Acceptability" [Robustness Principle] could lead the
way, and that's where I suggest extrapolating beyond the simple
"ifnull".

Cheers,

= Joe =
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20091019/8def1127/attachment.html 

From jonathan at buhacoff.net  Mon Oct 19 14:01:02 2009
From: jonathan at buhacoff.net (Jonathan Buhacoff)
Date: Mon, 19 Oct 2009 14:01:02 -0700
Subject: [stringtemplate-interest] question about toString and maps
In-Reply-To: <696ADCB4-968E-4104-9AA2-8258A9E987AF@buhacoff.net>
References: <696ADCB4-968E-4104-9AA2-8258A9E987AF@buhacoff.net>
Message-ID: <9005BDEF-2296-452A-B402-3BDD8F94436F@buhacoff.net>

A little update - I added just a handful of lies to my copy of ASTExpr  
this morning and added the LabledMap interface, and it's working great.

In my project I'm using that with Apache Ant and a properties file to  
generate offline samples of my user interface.



On Oct 19, 2009, at 8:24 AM, Jonathan Buhacoff wrote:

> Hi,  I'm trying to create a file with data that mimicks what my Java
> objects produce, for testing with my templates "offline".
>
> My templates take advantage of the reflection and the toString  
> features.
>
> Normally I wouldn't be able to reproduce the toString() output from a
> properties file, so I created  a special implementation of Map to
> produce the toString values.  But... ST doesn't call toString() on the
> map, it calls values().
>
> Concrete example of my "online" processing:
>
> template.setAttribute("locale", (java.util.Locale)locale);
>
> $locale$   ->  en_US   because that's what locale.toString() returns
> $locale.language$ -> en
> $locale.country$ -> US
>
> Now with a property file, using my special map implementation:
>
> locale=en_US    this entry is meant to produce the same as
> locale.toString()
> locale.language=en
> locale.country=US
>
> $locale$   ->  USen    because ST called values() on the map I created
> from the properties file
> $locale.language$ -> en
> $locale.country$ -> US
>
> I tried using the _default_ key, like this:
>
> locale._default_=en_US
>
> But it's being ignored because the map is iterable...
>
> I'd like to extend ASTExpr.rawGetObjectProperty() and
> convertAnything*ToIterator() to have an additional case for a map that
> is not iterable. I'm thinking it can implement a marker interface,
> like LabeledMap or NonIterator, so that any object that implements a
> Map can also choose to have this behavior of providing a label with
> toString() instead of having its values iterated wherever it appears
> solely by name in the template.  The template author can still write
> map.keys and map.values  to explicitly iterate the map so I think that
> would be ok.
>
> Any comments on this?  Is there another way?  If this sounds ok, I'll
> need to do it right away in my project.   I could send a patch if
> you're interested in allowing this in the next version.
>
>
> --
> Jonathan Buhacoff
> jonathan at buhacoff.net
> --
>
>
>
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest


From baerrach at gmail.com  Mon Oct 19 15:41:17 2009
From: baerrach at gmail.com (Barrie Treloar)
Date: Tue, 20 Oct 2009 09:11:17 +1030
Subject: [stringtemplate-interest] question about toString and maps
In-Reply-To: <9005BDEF-2296-452A-B402-3BDD8F94436F@buhacoff.net>
References: <696ADCB4-968E-4104-9AA2-8258A9E987AF@buhacoff.net>
	<9005BDEF-2296-452A-B402-3BDD8F94436F@buhacoff.net>
Message-ID: <f6b307f10910191541y464cd105o8a729ab82e6ace9a@mail.gmail.com>

On Tue, Oct 20, 2009 at 7:31 AM, Jonathan Buhacoff
<jonathan at buhacoff.net> wrote:
> A little update - I added just a handful of lies to my copy of ASTExpr
> this morning and added the LabledMap interface, and it's working great.

"Lies"?

p.s. Can't you subclass your Map and override values() to hack the
output ST expects?

From gwlist at grahamwideman.com  Mon Oct 19 16:11:21 2009
From: gwlist at grahamwideman.com (Graham Wideman)
Date: Mon, 19 Oct 2009 16:11:21 -0700
Subject: [stringtemplate-interest] On Pragmatism Violating Purity
In-Reply-To: <e3eda7ce0910191158l623026b3o8827a386b2e52f01@mail.gmail.co
 m>
Message-ID: <4.1.20091019151309.00cfa7a0@grahamwideman.com>

I am currently not sold on the importance of native.if per se, and feel that it's trying to address a genuine problem, but at the wrong place.

Thinking on native.if
-------------------------
First, the motivation behind native.if seems to be that direct access to whatever "if" means in the native language would allow templates to understand the model in the same way the app intends.

But this presupposes that (native) "if" is the (only) tool which the calling app uses to understand out-of-band values in its model. That I think is unlikely.

Instead, the designer may well have depended on evaluating such variables with explicit tests of missing, null or comparison to "", and so on, only some of the time using "if" if it happens to do the desired thing.  

Indeed, a fair proportion of the time an app designer has to go to some effort to take care of nulls arising from database queries, or database prohibiting empty string and converting to null, or application use of strictly typed vs variant type variables, and so on, so that there's a high level of awareness to *not* align the meaning of out-of-band values with language idiosyncracies in this area, and instead to be careful to deal with them explicitly.

So, maybe there's an argument to provide, within ST, access to particular native language features, but I am skeptical about it's importance in the area of "if".  If it's reasonable for ST to be able to interrogate values at all (and thus have an "if" capability), then it's reasonable for ST to test all variants of absence/missing/null/empty that ST can "see".  If ST can "see" into native data structures by virtue of its reflection-following capability, then it can also encounter absence/missing/null/empty in various ways and should allow the ST programmer a way to tell what to do about each case.

There is an alternative strategy that better preserves model/view separation, and that's for the model (ie: callign app) to tell what to do about null/missing/empty on the model side, and for ST to be able to read that.  One could imagine ST's Attribute containing not just name and value, but also the default values for each case: defaultForEmpty, defaultForNull, defaultForMissing (and of course these could be made native-language specific, with no impact on what one writes in a template).

But this line of thinking is subverted by ST's capability to use reflection to access subsidiary properties of an aggregate object that the caller explicitly supplied as an Attribute. Then Attribute would need a way for the caller to supply defaultForNull etc for each subsidiary property that ST could reference... and at that point the design of ST Attribute would devolve toward requiring each data item as a separate Attribute (so it could have its own defaultXxx's) rather than as part of an aggregate.

Summary: ST bent strict model/view separation by providing the convenience of ST-driven selection of data via aggregates that a template can access. That precluded setting defaults for various "out of band" values for each data item. That necessitated ability on the template side to test for some out-of-band values (if, null="xxx"), but this feature set is incomplete. (A second partial workaround is supplying your own render function.)

My current conclusion is that the current state of compromise is best complemented by rounding out ST's handing of the out-of-band values it can encounter, by completing the set of ifxxx functions, and the set of defaults one can specify for rendering (and make them parallel).

native.somefunction
-------------------------
Second, if there is a move toward a native.somefunction idea, then how about avoid using the keyword "native", and instead use the keyword for the language:  java.somefunction or csharp.somefunction etc.  Then it would be immediately clear what's going on, and the ST interpreter compiler could readily reject attempts by a template that expects C somefunction behavior to be used where it's getting java somefunction behavior. (And one would be prevented from accidentally reusing a template written for one native language in an incompatible scenario.)

Finally, would this really be heading in the direction of native-language specific functions, or is it really about adding user-defined functions to ST: ie: user.somefunction.  Let me be the first to suggest....

com.yourdomain.somefunction

:-).

-- Graham


From jonathan at buhacoff.net  Mon Oct 19 16:35:34 2009
From: jonathan at buhacoff.net (Jonathan Buhacoff)
Date: Mon, 19 Oct 2009 16:35:34 -0700
Subject: [stringtemplate-interest] question about toString and maps
In-Reply-To: <f6b307f10910191541y464cd105o8a729ab82e6ace9a@mail.gmail.com>
References: <696ADCB4-968E-4104-9AA2-8258A9E987AF@buhacoff.net>
	<9005BDEF-2296-452A-B402-3BDD8F94436F@buhacoff.net>
	<f6b307f10910191541y464cd105o8a729ab82e6ace9a@mail.gmail.com>
Message-ID: <5B220E35-0293-409D-ACCA-72F2B947FC5A@buhacoff.net>

Oops, "lines" :)

I tried overriding values() but it turns out that method is more  
popular than I thought, and overriding it had unexpected side effects  
for me.  Plus, if I override values(), then I can't ever use it in my  
templates for iteration, even if I want to.

The LabledMap type is fully compatible with Map and doesn't have any  
side effects.

Here's the diff:

605a606
 > 		if( a instanceof LabledMap ) { return true; }
953a955
 > 		else if ( o instanceof LabledMap ) { return o; }
970a973,977
 > 		else if ( o instanceof LabledMap ) {
 > 			List singleton = new StringTemplate.STAttributeList(1);
 > 			singleton.add(o);
 > 			return singleton.iterator();
 > 		}

And here's LabledMap, which I placed in the "language" package next to  
ASTExpr:

public interface LabledMap {}

And here is the declaration of my adapter class:

public class PropertyTreeAdapter implements Map<String,Object>,  
LabledMap { ... }

Jonathan

On Oct 19, 2009, at 3:41 PM, Barrie Treloar wrote:

> On Tue, Oct 20, 2009 at 7:31 AM, Jonathan Buhacoff
> <jonathan at buhacoff.net> wrote:
>> A little update - I added just a handful of lies to my copy of  
>> ASTExpr
>> this morning and added the LabledMap interface, and it's working  
>> great.
>
> "Lies"?
>
> p.s. Can't you subclass your Map and override values() to hack the
> output ST expects?
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest


From ockham at gmail.com  Mon Oct 19 17:59:58 2009
From: ockham at gmail.com (Joseph Grace)
Date: Mon, 19 Oct 2009 17:59:58 -0700
Subject: [stringtemplate-interest] On Pragmatism Violating Purity
Message-ID: <e3eda7ce0910191759r299d2607q1c91ce71632b8c2d@mail.gmail.com>

*Graham, thank you for a great insights and suggestions.

Graham Wideman* wrote on *Mon Oct 19 16:11:21 PDT 2009:***



*

> I am currently not sold on the importance of native.if per se, and feel that it's trying to address a genuine problem, but at the wrong place.

Mmm, perhaps, but I think operators are pretty core.  I think any
solution would involve operators since they're core.  Perhaps they're
just a good starting point, jumping off point for discussion?

BTW, I just finished reading many posts on this mailing list from
2009, and there are definitely use cases for making ST more adaptable
to model input, so I think ST could definitely benefit from some TLC
in this area.

> So, maybe there's an argument to provide, within ST, access to particular native language features,

> but I am skeptical about it's importance in the area of "if".

I think you make a good case that "if" is limited in solving all the
problems.  However, "if" is a key for ST, so getting it to work nicely
still seems compelling, even if insufficient.  You make a case (and
from past posts I've read), there are plenty of niggly little data
importing issues that crop of to cause impedance mismatches between
model and view/ST.  As you suggest, even a multi-headed "if" is
insufficient to solve them all.

Past posts and your well-written expose on "if" et al. convince me
that the language and user based customizations _will_ get used to
make ST adapt to various situations it smugly avoids now.  Once ST is
willing to solve the niggly import issues, I believe ST will get more
use.

Which is a good segue to your final suggestions...

> avoid using the keyword "native", and instead use the keyword for the language:  java.somefunction or csharp.somefunction etc.

+1, and

> com.yourdomain.somefunction

+1

I was cracking up when I read your suggestions, because they're spot
on, I didn't see them coming, yet I was thinking in the same
direction.  My next suggestion was:

model.*

So "native.*" is out.  It was bugging me.  I was thinking "lang.*" but
hadn't thought to actually specify the language.  Your solution is
great.  I also was thinking about "user.*";  again, your solution is
better.

Let me explain my "model.*" suggestion even if it turns out inferior
to your suggestions (not to mention a little tongue in cheek:-).  What
I realized is that unsolved interfacing problems in the mailing list
degenerate into exhortations of "Do it in the model!".  In other
words, whenever a model doesn't provide exactly what ST needs (and ST
takes a pretty narrow view of data), the model has to get "fixed" when
it wasn't broken.

That's a problem for two reasons.

1.  If the model isn't broken, why is it being fixed?  In other words,
why can't ST handle normal stuff like everything else on the market?
(Answer:  because ST is pure, and doesn't do "model" like the rest of
the template engines.)  That's what makes ST cool... and what makes it
suicidal.

ST needs to be friendly to models, and by friendly I mean:  Be
generous in what you accept!

If ST can not adapt to "normal" models, then it's useless in many
situations, and dangerous to standardize for unknown/future projects.
For example, what if the model can not be changed?  That happens,
right?  That's what ST strives for:  total separation of view and
model.  What if it's literally the case that they're already
separated, and the view simply has to make do?  Then saying "Do it in
the model!" is an admission of ST failure.  Unacceptable.

I read a thread where one guy was very polite, understood the value of
ST's separation of concerns, but struggling to make it work.  He kept
requesting relief for niggling data massage problems (e.g.,
calculations, filtering, little stuff).  His final answer was that he
doesn't have access to the model, so he can't change it.  The official
response was essentially: Do it in the model, or bust!  I don't think
he ever posted again.  I bet he dropped ST like a hot potato (and for
good reason).

That's garbage (not him, ST's smug attitude, "Do it in the model, or bust!").

ST has several advantages.  One it's more often than not an endpoint
for processing.  So it only has to serve one master --- the model on
input.  So it should at least make itself as easy to use by the model
as possible (a la the "Robustness Principle", "Be generous in what you
accept!", ease of use, adaptability, and all that).

Second, ST is usually the new kid on the block, so it's installed base
in each new project is small, simple, and blank slate.  It's a perfect
place to add complexity when the rest of an application is overloaded.
 Yeah, I said it:  add complexity.  Sometimes model stuff is easier
done elsewhere.  That's what people keep asking for, projects keep
asking for, and desperate measures keep asking for.  So, ST should
help out (again, be easy to work with).  Again, just saying "Do it in
the model!" is purist gobbledygook, and from an engineering standpoint
can even be wrong.  Sometimes its better to offload straightforward
stuff to endpoints (e.g., ST).

So, my epiphany is that all those posts exhorting poor infidels to "Do
it in the model!" would suddenly come true.  With

>  model.*

With "model.*" user custom hooks, anyone could do anything in the
model, including massage input for easy processing in ST.  The
perennial exhortation "Do it in the model." could remain true, and yet
ST would be easy to use and adaptable by providing an outlet for model
massaging, "model.*".

So even mundane non-view stuff could be done in model.* (trimming,
calculating, filtering, etc.) with native language support, but apart
from ST itself.  Sure it's violation of purity, but not of ST purity.
Model massage is segregated to "model.*" and that's fine.  Suddenly
the world doesn't have to adapt to ST;  ST can adapt to the world.

Much better for all.

Plus, model.* customizations take some of the pressure off ST to
handle any but the most straightforward model stuff (such as themost
basic "if.*" cases).  Model massage can take care of the rest.  ST
gets to maintain its sanity, while being much more adaptable to real
world situations.

Prospective users don't have to worry about getting rabbit-holed (etc.
etc.) by ST purity, or "fixing" a model that already works (just
because StringTemplate demands it).  Impure code goes in "model.*" (in
the model where it's supposed to be :-).

My reading of the list suggests such an escape valve is sorely needed
for massaging data on the way into ST but criticized every time
someone gets too pushy.  IMO, ST should shoulder some of the massaging
work when necessary.  I was tempted to call massaging "middleware.*",
but "model.*" says it all, and keeps the advice "Do it in the model."
as current as it ever was.

-=-

However, Graham's suggestions about language specific or even domain
specific names are well taken.  After my reading of the list, I found
cases of shared language specific code ('if you're using java, just
email me for the code'), and also some demand for custom hooks and
massaging to get data into ST without modifying preexisting models.
So, taking the long-view with the domain names may be appropriate.
I'm open to either or both!  I'll think on it, and look forward to
other insights.

Thanks for the suggestions,

= Joe =


*
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20091019/af02ffb7/attachment-0001.html 

From ockham at gmail.com  Mon Oct 19 18:55:14 2009
From: ockham at gmail.com (Joseph Grace)
Date: Mon, 19 Oct 2009 18:55:14 -0700
Subject: [stringtemplate-interest] On Pragmatism Violating Purity: namespaces
Message-ID: <e3eda7ce0910191855k12a9d180l1c28452590aef8c7@mail.gmail.com>

Namespaces that seem interesting for extensions:
loading, sharing (language dependent):

com.domainname.project.lang-suffix      (canonical user space + language
suffix)

using (language independent):

glue.*    (emphasis on input massaging)
model.*    (segregate model processing)
user.*    (the rest, catchall)

= Joe =
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20091019/609723d5/attachment.html 

From sharwell at pixelminegames.com  Mon Oct 19 19:16:11 2009
From: sharwell at pixelminegames.com (Sam Harwell)
Date: Mon, 19 Oct 2009 21:16:11 -0500
Subject: [stringtemplate-interest] [antlr-interest] Status of the
	CSharp3 target and my C# portsof ANTLR and StringTemplate
References: <cc529a5754e5204bafd87d397c57b7ba@temporal-wave.com>
Message-ID: <DD5A5D428FE040429CCDF377FAA892840152DDE2@martini.ironwillgames.com>

I think the only thing missing is the Java class required for the Java
version to know the CSharp3 target exists.

 

Sam

 

From: antlr-interest-bounces at antlr.org
[mailto:antlr-interest-bounces at antlr.org] On Behalf Of Jim Idle
Sent: Tuesday, October 20, 2009 2:51 AM
To: antlr-interest at antlr.org; stringtemplate-interest at antlr.org
Subject: Re: [antlr-interest] Status of the CSharp3 target and my C#
portsof ANTLR and StringTemplate

 

Top posting for Sam's benefit ;-)

 

Not being able to use the Csharp3 target from the standard version of
the tool is going to be a turn off for many I think L What is it that
your port of the tool has that the standard version does not. I know you
have posted some of that, but perhaps we can summarize this and see if
such things can be absorbed into the standard Java tool? Nobody minds
you having your own version of anything because it is open source, but
most will want ot use the 'offical' java version of the tool even if
they are targeting C#.

 

Thanks for the updates,

 

Jim

 

From: antlr-interest-bounces at antlr.org
[mailto:antlr-interest-bounces at antlr.org] On Behalf Of Sam Harwell
Sent: Monday, October 19, 2009 1:05 AM
To: antlr-interest at antlr.org; stringtemplate-interest at antlr.org
Subject: [antlr-interest] Status of the CSharp3 target and my C# ports
of ANTLR and StringTemplate

 

Hi everyone,

 

Here's a status update that I know many people are asking for. For each
portion, I'll talk about the status of the code in Perforce. At the end,
I'll talk about the status of the posted binaries.

 

Basic Status

 

StringTemplate and the ANTLR Tool: Up-to-date with the Java version for
all targets as of August 4, 2009, which covers all of the changes made
earlier in the year and over the summer.

 

CSharp3 Target: working and extensively used in the ANTLR Tool,
StringTemplate, and the commercial projects I use ANTLR for. I haven't
tested the -profile and -debug modes because I don't use them, however
the templates should be "close to working". Currently, the CSharp3
target can only be used when generating grammars from the C# port of the
tool.

 

Design Changes

 

1.       Rather than package the target templates as resources in the
tool's executable, I've chosen a flat file layout. That way, the
templates for a target can be updated without recompiling the tool. The
targets themselves are also implemented as individual DLL's.

2.       The CSharp3 target declares rules as private methods by
default. Rules can be made public by simply marking them as such in the
grammar: "public compile_unit : declaration*;" I have updated the Java
target's code generation to support this as well, but it's not checked
in.

3.       StringTemplate has code for a high speed dynamically compiled
interpreter. By default, the build doesn't enable this mode, but when
it's turned on the output appears to work correctly. I need to do
another round of tests, but at this point the C# ports of the ANTLR Tool
and StringTemplate should be significantly faster than the Java version.
We've hit a brick wall preventing further optimization without rewriting
ST, but the work on STv4 should give another order of magnitude
improvement in template rendering performance.

 

Things Holding Me Up

 

1.       I haven't finalized the way I'm going to do assembly
versioning, although I think I've got that worked out now. I'll send a
separate mail to the list regarding this.

2.       StringTemplate is only tested in regards to code generation for
the ANTLR tool. In particular, its ability to locate templates in
resources or on the file system is not documented and may or may not
behave as people expect.

3.       I'm still making periodic changes to the API as I finalize
things, and breaking changes in production code aren't good. I don't
want to suggest replacing the CSharp2 target until the CSharp3 target is
more tested by other people.

 

Things I want to do, but not really holding up the builds

 

I really want to package a clean integration of ANTLR+CSharp3 for
MSBuild. We need this. This would include at least MSBuild targets file
and templates for adding grammars to a project. Unfortunately, there are
many issues I still need to resolve for this to be a reality, most of
which have answers in shades of gray.

 

Status of the Posted Build

 

The build available for download was uploaded on fairly short notice.
Mistakes (by me) included not having the assembly version set correctly
and not posting the source code from the build with the binaries. I've
been trying to wrap some of these things up before posting another
build.

 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20091019/22e5c2e4/attachment.html 

From zen at freedbms.net  Mon Oct 19 19:27:25 2009
From: zen at freedbms.net (Zenaan Harkness)
Date: Tue, 20 Oct 2009 13:27:25 +1100
Subject: [stringtemplate-interest] On Pragmatism Violating Purity
	For	The Win
In-Reply-To: <e3eda7ce0910191158l623026b3o8827a386b2e52f01@mail.gmail.com>
References: <e3eda7ce0910191158l623026b3o8827a386b2e52f01@mail.gmail.com>
Message-ID: <20091020022725.GD3378@u8.ip61.upmart.info>

On Mon, Oct 19, 2009 at 11:58:40AM -0700, Joseph Grace wrote:
> Principle<http://en.wikipedia.org/wiki/Robustness_Principle> (also

Excellent! Well found.

> However, I still prefer my phrasing of it "Be strict in what you generate,
> but generous in what you accept."

I'd change one word - change "but" to "and" :)


> Zenaan Harkness* wrote at *Sun Oct 18 18:22:26 PDT 2009:*
> 
> > If we added native.if, are there other operators you see
> > being useful in the native.* library?
> 
> I am not looking to add operators other than "if.*" to the core language.
> 
> The ST philosophy is strict separation of concerns.  Even the existing
> "if" is a violation of strict separation in that ST inspects an aspect
> of the model albeit in a very tidy way.  The recognition of a second
> "if" is another step toward such pragmatism.  I believe the
> "Robustness Principle" (strict in what you generate, generous in what
> you accept) explains why these "if.*" are so important even though
> (strictly speaking) they violate the purity of the language.  Add

Robustness as in accept generously, is more like accepting many inputs,
even error inputs, even though it might produce error outputs. As in,
not being so strict on inputs that everything is short-circuited,
therefore making it harder to find errors.

As seen, ST's if is not really necessary at all. It's just a
convenience. This is a different principle, that of flexibility/
featurefullness, which may or may not increase complexity, but of itself
does not affect what data is accepted in a raw state (data processing
aside).


> > Modifying ST into 'platform specific' variants is a significant
> > change if it were undertaken.
> 
> That's not my intent or intended suggestion.  The only supported
> compatibility variant as envisioned would be the one instruction,
> "native.if".  The rest of the "native.*" namespace would be for user
> customizations (unsupported, Use At Your Own Risk).

If allowed, I see users would easily, readily, and pretty much
immediately (for newcomers untrained in the true 'way' of ST :)
add native.or, native.and, native.add and native.sqrt :)

Instant slippery slope, no let's say oiled water slide, it seems..


> > A native.* library would be good to think/ plan for in advance
> > though, rather than one feature at a time, don't you think?
> 
> I'm thinking of "native.*" more as opening the door to user
> extensions, not as a new part of the language.  Mostly for ease of

And that's the problem.

There users can already extend in renderers, violating ST best practice,
but it's very clear that you are doing that _and_ it is 'ugly' enough
that it just wouldn't catch on as standard practice.

There must be a principle here somewhere 'Robust Design Encouragement'
or some such, which as you are aware, ST holds quite strenuously to.


> The basic existence "if" is a practical necessity, and has been shown
> largely "necessary and sufficient" for ST just not totally practical.

I think you mean 'not totally flexible'. ST if is entirely practical,
and highly convenient.


...
> 1.  Should ST add a single monolithic operator, "ifnull".  Is that
> practical?

Yes. It is practical.

Whether it's called ifnull, or if.null, is almost immaterial to
template authors.

And if we add if[.]empty, that is orthogonal (not directly related)
concern too.


> 2. Should ST then add a clean syntax for multiple "if.*" language
> independent operators?  Is that practical?  What if a common use case

Clean and easy syntax which provides for Violation of Robust Design,
is a problem!


> is to dovetail ST onto an existing system, in a native language, and
> the native language "if" is not found in ST?  What if ease of use is
> compromised without native language friendly "if"?

Here's my 'rub':

We _do_ have before us, an actual, experienced-by-various people on
this list, ST 'limitation' (boolean testing of null and sometimes
empty) for which a simple non-Robust-Design-Violation-encouraging
solution is also before us: ifnull and ifempty, and null= and empty=
in list processing.

1) I cannot say the same for native.*

2) And I can say that native.* looks horribly slippery.

Until these two concerns (non-existent example, and slippery slope
problem) are addressed, I have to NACK user-extensible native.*,
and most probably also native.if. Strong protection against
violation of principles, is trumps here.

best
zen

-- 
Homepage: www.SoulSound.net -- Free Australia: www.UPMART.org
Please respect the confidentiality of this email as sensibly warranted.

From ockham at gmail.com  Mon Oct 19 20:54:50 2009
From: ockham at gmail.com (Joseph Grace)
Date: Mon, 19 Oct 2009 20:54:50 -0700
Subject: [stringtemplate-interest] On Pragmatism Violating Purity For The Win
Message-ID: <e3eda7ce0910192054w4bc1aac9wedfb287467d15f8b@mail.gmail.com>

*Zenaan Harkness* wrote on *Mon Oct 19 19:27:25 PDT 2009:*

*>>"Be strict in what you generate, but generous in what you accept."***>
>I'd change one word - change "but" to "and" :)

*  "Be strict in what you generate, [and] generous in what you accept."

Zen, that's definitely better.  Thank you.  Done.

> Robustness as in accept generously, is more like accepting many inputs,
> even error inputs, even though it might produce error outputs.

That's a common first impression of the "Robustness Principle", but it
definitely does NOT do that.  It originates in networking (TCP/IP)
where generating errors is absolutely unacceptable, hence the "Be
strict in what you generate".  Error tolerance:  0.

However, datagram specs are very strict, so often "errors" are
innocuous (e.g., non-zero values in undefined (zero) fields).
Sometimes they appear to be errors, but really represent backwards
compatible version mismatches (one version's junk is another newer
version's backward compatible bits!).  The Robustness Principle
provides a guideline to pass seemingly errant datagrams ignoring
innocuous variations to enable forward compatibility for such cases
(and protocol designers specifically design to take advantage of
Robustness).

For our purposes, the non-spec data is data which needs massaging
before ST can handle it, so we apply the Robustness Principle and
massage it into StringTemplate using (e.g.) "model.*" or "glue.*".  As
long as the data is discernible, we shape it into a form ST accepts.
Then we process it.  The end result would be an easier to use, more
diversely capable, adaptable, and compatible ST.

This robustness means increased ease of use for ST, and adaptability
to diverse conditions.  It would also mean ST could do its part to
keep workflow moving even model developers are unwilling or
unavailable to adjust model output.  Flexible ST would to non-spec
data by (e.g.) massaging it into ST-compatible form, then processing
it.

> Instant slippery slope, no let's say oiled water slide, it seems..

> [and later]  2) And I can say that native.* looks horribly slippery.

Ack to both. No disagreement here. However, this slippery slope already
exists in the form of formatters, correct? And people use it from time to
time for just this purpose, e.g., for "Truncate string" in java:

http://www.antlr.org/pipermail/stringtemplate-interest/2009-May/001954.html

The difference is that the "model.*" feature would acknowledge and approve
[Robustness Principle] this need with language specific hooks, not chastise
prospects for thinking impurely (but correctly).

Emphasis is on massaging input, and offloading other sticky issues from pure
ST (or a stubborn model). ST becomes the good citizen by generously
accepting whatever the models send its way.

FYI, earlier today, I spent some time reading the list from the first half
of the year. There are a variety of examples of people asking for help
massaging data on its way into ST, or pulling key information from the model
for ST/view access. Those are both expressed needs, especially if the model
is off-limits (as in, if the model works don't fix it or touch it). Here are
two posts. The first requests a minor input massage feature, and the second
(Ter himself) suggests a need for some additional data metrics (data shape
information):

http://www.antlr.org/pipermail/stringtemplate-interest/2009-May/001921.html
http://www.antlr.org/pipermail/stringtemplate-interest/2009-May/001939.html

These issues would be perfect candidates for "model.*" hook customization.
If a "model.*" hook existed, users could develop such features as needed,
and then migrate them into common ST usage only after being proven (or
never). Pressure to change ST would be relieved, so core ST could remain
true to its purity roots. Yet ST would generously accept any discernible
input [Robustness Principle] and become a genuinely good citizen even for
legacy or complex models.

IMO, ST needs to be a good citizen and handle glue issues even if they're
not strictly ST's problem. I believe ST perenially loses converts due to the
purist "Do it in the model!" attitude. By adopting a more accomodating
attitude of

"Do it in model.*!"

We all believe ST's purity is valuable, but if many people can't use ST, who
cares? I believe purist inflexibility is hurting ST for some projects and
crimping its growth. I believe something like "model.*" addresses critical
ST adoption issues and makes ST more accessible, flexible, and relevant to
more projects.

Cheers,

= Joe =
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20091019/bc478576/attachment.html 

From ockham at gmail.com  Mon Oct 19 21:43:47 2009
From: ockham at gmail.com (Joseph Grace)
Date: Mon, 19 Oct 2009 21:43:47 -0700
Subject: [stringtemplate-interest] On Pragmatism Violating Purity For The Win
Message-ID: <e3eda7ce0910192143n47f8f02bl68b5137707b86978@mail.gmail.com>

Doh, got a link wrong in my previous message.  Link was supposed to be to a
post by Ter, but I put the wrong post by Ter.I couldn't find what I was
thinking of, but here's where Ter mentions a need for "shape" operators:

[http://www.antlr.org/pipermail/stringtemplate-interest/2009-May/001939.html
]

should have been:

http://www.antlr.org/pipermail/stringtemplate-interest/2009-May/001949.html

Apologies for the erroneous link.  The new link at least mentions the need
for shape operators.

Cheers,

= Joe =
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20091019/060152c0/attachment.html 

From jonathan at buhacoff.net  Mon Oct 19 22:20:04 2009
From: jonathan at buhacoff.net (Jonathan Buhacoff)
Date: Mon, 19 Oct 2009 22:20:04 -0700
Subject: [stringtemplate-interest] On Pragmatism Violating Purity For
	The Win
In-Reply-To: <e3eda7ce0910192054w4bc1aac9wedfb287467d15f8b@mail.gmail.com>
References: <e3eda7ce0910192054w4bc1aac9wedfb287467d15f8b@mail.gmail.com>
Message-ID: <B96A7226-9023-46FA-BE1C-11368C084A46@buhacoff.net>

>
> We all believe ST's purity is valuable, but if many people can't use  
> ST, who cares?  I believe purist inflexibility is hurting ST for  
> some projects and crimping its growth.  I believe something like  
> "model.*" addresses critical ST adoption issues and makes ST more  
> accessible, flexible, and relevant to more projects.
>
Here's my take, for what it's worth:

The world already has enough text generation systems without a strict  
separation between model and view. It doesn't need another one.

I believe that ST's growth in popularity will be precisely because it  
maintains a strict separation that attracts programmers who are  
suffering from spaghetti-code syndrome with other tools.

At any rate, that's why I enjoy using ST, and I know that I can  
completely swap out the model if I want to.  That's won't easy to do  
if litter my templates language-specific "hooks".  I like ST because  
it prevents me from doing what I'll regret later.  Contrast with JSP,  
Velocity, Text::Template, and others for which it's not possible to  
change the model.

If the strict separation & the convenient functional syntax makes ST  
good -- then giving that up for the sake of making ST popular will  
make it less good.

Everything that needs to be done to "massage" data can be done and  
should be done in the model.  Employ whatever middleware you like --  
in the model.  It will be a lot more powerful there.

ST does have nice convenience features for pushing objects directly to  
the view (so you don't have to copy all their properties to a map) and  
of course you can abuse these with side-effect programming... but that  
would be abuse of a feature, as opposed to something built-in to  
encourage entanglement of model and view.

I think it's fine if ST is less popular, as long as it stays the most  
useful :)

Jonathan

> Cheers,
>
> = Joe =
>
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20091019/388d192f/attachment.html 

From jimi at temporal-wave.com  Mon Oct 19 22:08:05 2009
From: jimi at temporal-wave.com (Jim Idle)
Date: Tue, 20 Oct 2009 10:38:05 +0530
Subject: [stringtemplate-interest] [antlr-interest] Status of the
	CSharp3 target and my C# portsof ANTLR and StringTemplate
In-Reply-To: <DD5A5D428FE040429CCDF377FAA892840152DDE2@martini.ironwillgames.com>
Message-ID: <148a82de0f599d48a588d6de36c9b231@temporal-wave.com>

OK - well we can add that easily enough J Why don't we try it?

 

Jim

 

From: Sam Harwell [mailto:sharwell at pixelminegames.com] 
Sent: Tuesday, October 20, 2009 7:46 AM
To: Jim Idle; antlr-interest at antlr.org; stringtemplate-interest at antlr.org
Subject: RE: [antlr-interest] Status of the CSharp3 target and my C# portsof ANTLR and StringTemplate

 

I think the only thing missing is the Java class required for the Java version to know the CSharp3 target exists.

 

Sam

 

From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-bounces at antlr.org] On Behalf Of Jim Idle
Sent: Tuesday, October 20, 2009 2:51 AM
To: antlr-interest at antlr.org; stringtemplate-interest at antlr.org
Subject: Re: [antlr-interest] Status of the CSharp3 target and my C# portsof ANTLR and StringTemplate

 

Top posting for Sam's benefit ;-)

 

Not being able to use the Csharp3 target from the standard version of the tool is going to be a turn off for many I think L What is it that your port of the tool has that the standard version does not. I know you have posted some of that, but perhaps we can summarize this and see if such things can be absorbed into the standard Java tool? Nobody minds you having your own version of anything because it is open source, but most will want ot use the 'offical' java version of the tool even if they are targeting C#.

 

Thanks for the updates,

 

Jim

 

From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-bounces at antlr.org] On Behalf Of Sam Harwell
Sent: Monday, October 19, 2009 1:05 AM
To: antlr-interest at antlr.org; stringtemplate-interest at antlr.org
Subject: [antlr-interest] Status of the CSharp3 target and my C# ports of ANTLR and StringTemplate

 

Hi everyone,

 

Here's a status update that I know many people are asking for. For each portion, I'll talk about the status of the code in Perforce. At the end, I'll talk about the status of the posted binaries.

 

Basic Status

 

StringTemplate and the ANTLR Tool: Up-to-date with the Java version for all targets as of August 4, 2009, which covers all of the changes made earlier in the year and over the summer.

 

CSharp3 Target: working and extensively used in the ANTLR Tool, StringTemplate, and the commercial projects I use ANTLR for. I haven't tested the -profile and -debug modes because I don't use them, however the templates should be "close to working". Currently, the CSharp3 target can only be used when generating grammars from the C# port of the tool.

 

Design Changes

 

1.       Rather than package the target templates as resources in the tool's executable, I've chosen a flat file layout. That way, the templates for a target can be updated without recompiling the tool. The targets themselves are also implemented as individual DLL's.

2.       The CSharp3 target declares rules as private methods by default. Rules can be made public by simply marking them as such in the grammar: "public compile_unit : declaration*;" I have updated the Java target's code generation to support this as well, but it's not checked in.

3.       StringTemplate has code for a high speed dynamically compiled interpreter. By default, the build doesn't enable this mode, but when it's turned on the output appears to work correctly. I need to do another round of tests, but at this point the C# ports of the ANTLR Tool and StringTemplate should be significantly faster than the Java version. We've hit a brick wall preventing further optimization without rewriting ST, but the work on STv4 should give another order of magnitude improvement in template rendering performance.

 

Things Holding Me Up

 

1.       I haven't finalized the way I'm going to do assembly versioning, although I think I've got that worked out now. I'll send a separate mail to the list regarding this.

2.       StringTemplate is only tested in regards to code generation for the ANTLR tool. In particular, its ability to locate templates in resources or on the file system is not documented and may or may not behave as people expect.

3.       I'm still making periodic changes to the API as I finalize things, and breaking changes in production code aren't good. I don't want to suggest replacing the CSharp2 target until the CSharp3 target is more tested by other people.

 

Things I want to do, but not really holding up the builds

 

I really want to package a clean integration of ANTLR+CSharp3 for MSBuild. We need this. This would include at least MSBuild targets file and templates for adding grammars to a project. Unfortunately, there are many issues I still need to resolve for this to be a reality, most of which have answers in shades of gray.

 

Status of the Posted Build

 

The build available for download was uploaded on fairly short notice. Mistakes (by me) included not having the assembly version set correctly and not posting the source code from the build with the binaries. I've been trying to wrap some of these things up before posting another build.

 



-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20091020/6d831b37/attachment-0001.html 

From ockham at gmail.com  Mon Oct 19 23:04:43 2009
From: ockham at gmail.com (Joseph Grace)
Date: Mon, 19 Oct 2009 23:04:43 -0700
Subject: [stringtemplate-interest] On Pragmatism Violating Purity For The Win
Message-ID: <e3eda7ce0910192304k7a1664c7wdfc1942d81198a7f@mail.gmail.com>

*Jonathan Buhacoff* wrote on *Mon Oct 19 22:20:04 PDT 2009:***



*

> I believe that ST's growth in popularity will be precisely because it

> maintains a strict separation that attracts programmers who are

> suffering from spaghetti-code syndrome with other tools.

No argument here.

Nothing changes.  If you don't need the hooks, do not use them.

> Everything that needs to be done to "massage" data can be done and

> should be done in the model.

Echoes of "Do it in the model!"

What if the model is inaccessible, feature frozen, or otherwise source
code inaccessible?  Count your blessings that you have fully
accessible model code.  Some projects don't and that makes ST a
dead-end due to logistical difficulties.

> of course you can abuse these with side-effect programming... but that
> would be abuse of a feature, as opposed to something built-in to
> encourage entanglement of model and view.

Really?  Extensibility solves real world, logistical problems that
would prevent ST from being used.

Think of it as a "nice convenience feature" for pulling data from the model.

= Joe =


*
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20091019/0177f2b0/attachment.html 

From harry.karadimas at hmn.aphp.fr  Tue Oct 20 07:48:26 2009
From: harry.karadimas at hmn.aphp.fr (Harry Karadimas)
Date: Tue, 20 Oct 2009 16:48:26 +0200
Subject: [stringtemplate-interest] null vs missing vs
	empty	vs	nonexistent
In-Reply-To: <mailman.6003.1255832190.3227.stringtemplate-interest@antlr.org>
References: <mailman.6003.1255832190.3227.stringtemplate-interest@antlr.org>
Message-ID: <7E4066AA90634047A7ACFD441F4E1E57@wprod.ds.aphp.fr>

Hi,

Sorry for the reply not appearing with the other messages; I
have subscribed to "the stringtemplate-interest Digest" so
I cut and paste the subject for the response, and apparently this does not
always
work so well.

Here are my comments :

> Date: Sun, 18 Oct 2009 12:52:18 +1100
> From: Zenaan Harkness <zen at freedbms.net>
> Subject: Re: [stringtemplate-interest] null vs missing vs 
> empty	vs
> 	nonexistent
> To: stringtemplate-interest at antlr.org
> Message-ID: <20091018015218.GA4077 at ip61>
> Content-Type: text/plain; charset=us-ascii
> 
> On Fri, Oct 16, 2009 at 11:41:43AM +0200, Harry Karadimas wrote:
> > Reminds me of the debates about SQL Null
> > 
> > http://en.wikipedia.org/wiki/Null_(SQL)
> > 
> > One other question is :
> > 
> > What must the user know about handling of null values to use st ?
> > 
> > If st becomes too complex, this will also hinder its adoption, so 
> > maybe let's not put too many operators/values/cases/options/etc.
> 
> Complexity can be ok, as long as there are counterbalancing 
> factors, such as consistency defaults, consistent treatment/ 
> application of the concept, completeness - not arbitrarily 
> missing key use cases, clean syntax, and flexibility for the 
> ST user/ system designer to choose _where_ in his system to 
> handle different parts of the system's complexity. Handling 
> strictly view-specific "processing" in the view specific tool 
> (ST) rather than having to handle that view specific 
> complexity somewhere else, provides for sanity in the design 
> of the system, even if that means a slightly more featureful ST.
> 
> Hopefully I'm just reiterating the self evident.
> 
> Concept handling consistency, is much more important to 
> ease-of-use (particularly for casual but also regular) ST 
> users, than mere reduction in number of concepts handled/ 
> provided for.
> 
> Eg:
> If I have one part of ST (say IF conditional handling) which 
> compresses all into true or false (btw forcing me to handle 
> 'empty' special casing with view-model 'hacks'/ view-model 
> compexity increase), yet in say anonymous list processing the 
> default ST processing is to treat empty elements as present 
> but empty and I am given special-case option to 'remove' 
> empty elements, then I'm faced with a conceptual inconsistency.
> I am forced to remember, depending on which ST syntax/context 
> I'm in, what the default treatment is in that localised context.
> Increase in cognitive load.
> Bad.
> 
> Conceptual inconsistency is bad complexity.
> 
> Incomplete concept handling for the domain being handled (eg 
> view processing/ ST), is false simplicity.
> 
> Conceptually (syntactically, contextually) consistent and 
> complete tools can and do make the ST user's task easier.
> 
> The real world dictates that we handle complexity.
> 
> The question is always how well does a particular tool, in 
> this case ST, facilitate handling that complexity.
>

In short, I agree.
 
> 
> 
> > For me mainly three cases are relevant :
> > 
> > * there is no attribute named "foo"
> > * there is an attribute named "foo", and its value is : null
> > * there is an attribute named "foo", and its value is a string,
> >   which is : "...(whatever, including the empty string)"
> 
> And for the next guy, the empty string is as good as a 
> non-existent or null element.
> 
> It is difficult to argue that empty-string vs 
> non-empty-string is any less valid-view-logic than is 
> existence or non-existence of an attribute.
> 
> Guaranteed, there will be someone's view, somewhere, that 
> requires one, another that requires the other, and another 
> that requires both, in order to generate the corresponding 
> systems respective views.
> 
> > Maybe a fourth case to test if the value is the empty 
> string could be 
> > relevant, and this would autmatically lead to a fifth case 
> where the 
> > trimmed value (removing all spaces, tabs, form feeds, vertical form 
> > feeds, ...) is the empty string.
> 
> Ah yes, you see the possibility.
> 
> :)

I do indeed ...

> 
> Now we're back to handling all cases.
> 
> To summarise my points:
> 
>    -  Real world dictates we handle complexity.
> 
>    -  Incomplete concept handling is false simplicity.
> 
>    -  Concept handling inconsistency is bad complexity.
> 
>    -  We should aim for conceptually complete, yet consistent, tools
>       (according to the domain of the tool eg view handling,
>       programming, etc)
> 
> cheers
> zen
> 
> --
> Homepage: www.SoulSound.net -- Free Australia: www.UPMART.org 
> Please respect the confidentiality of this email as sensibly 
> warranted.
> 
> 


Let's not overrate these issues; after all st has worked quite 
well for me (and for others I guess) in the current form. After 
all, having only whitespace in the model may also be treated as
a model issue; if whitespace means empty, the model could be 
responsible for trimming strings.

The choice of the operators to propose is not so trivial,
I guess. Self-explanatory words are difficult to find,
because of the ambiguity of words like "empty". Here are
the terms that I use in my java code, let me know what 
you think of it, I don't say they are ideal :

1) A general, broad-use operator, to be used in 80-99% of the cases :
if isempty(foo) : foo is undefined, or null, or the empty string, 
  or only whitespace : in short, it does not contain a meaningful,
  useable, displayable value.

2) Specific operators, to be used in more specific cases :
if isundefined(foo) : foo is not defined, no attribute has been set
  for foo in st
if isnull(foo) : foo exists but it contains the value null
if isemptystring(foo) : foo exists but it is equal to the 
  empty string
if iswhitespace(foo) : foo exists but it contains only whitespace
  or the empty string

3) Boolean operators
if istrue(foo) : foo contains a boolean with the value true, or
  a string that is equal to "true" (case-insensitive)
if isfalse(foo) : foo contains a boolean with the value false, or
  a string that is equal to "false" (case-insensitive)

4) No operator at all
if (foo) : what should that mean ? The more practical case would be
  for me the value of !isempty(foo). But I admit this might not
  have the same meaning for everybody. For me 99% of the times
  I want to test if there is something to display, in constructs
  like the ones that appear in Terence's paper :
  $if(title)$
  <h1>$title$</h1>
  $endif$

As for an "ismissing" operator, I don't see how we can introduce 
a special value that would mean : "foo is defined, and it contains
a value that indicates that a value is missing for it"
Similarly, we could also have a value that indicates "foo is 
defined, and it contains a value that indicates that an error has 
occurred when its value had to be computed / retrieved"

For the cases of missing value in the model (different from not 
defining the attribute in st), and error value in the model, we 
should leave the decisions of artifacts of representation to the
model, as there is no accepted standard to represent this in 
java/C#, AFAIK.

Best regards,


                                                  Harry Karadimas

______________________________________________________________________
Dr Harry Karadimas,  Medecin Ingenieur
resp. Recherche et Developpement, Applications medicales
Departement d'Information Hospitalier (DIH)
C.H.U. Albert Chenevier - Henri Mondor 
51, av. du Marechal de Lattre de Tassigny               94010  CRETEIL
tel : (00 33 1) 49 81 21 79, [0687353384]  fax : (00 33 1) 49 81 27 08
secr.: (00 33 1) 49 81 23 82         m.el.:harry.karadimas at hmn.aphp.fr
 




From zen at freedbms.net  Tue Oct 20 07:55:32 2009
From: zen at freedbms.net (Zenaan Harkness)
Date: Wed, 21 Oct 2009 01:55:32 +1100
Subject: [stringtemplate-interest] On Pragmatism Violating Purity
In-Reply-To: <4.1.20091019151309.00cfa7a0@grahamwideman.com>
References: <e3eda7ce0910191158l623026b3o8827a386b2e52f01@mail.gmail.com>
	<4.1.20091019151309.00cfa7a0@grahamwideman.com>
Message-ID: <20091020145532.GA17259@u8.ip61.upmart.info>

On Mon, Oct 19, 2009 at 04:11:21PM -0700, Graham Wideman wrote:
...
> So, maybe there's an argument to provide, within ST, access to particular native language features, but I am skeptical about it's importance in the area of "if".  If it's reasonable for ST to be able to interrogate values at all (and thus have an "if" capability), then it's reasonable for ST to test all variants of absence/missing/null/empty that ST can "see".  If ST can "see" into native data structures by virtue of its reflection-following capability, then it can also encounter absence/missing/null/empty in various ways and should allow the ST programmer a way to tell what to do about each case.
...
> My current conclusion is that the current state of compromise is best complemented by rounding out ST's handing of the out-of-band values it can encounter, by completing the set of ifxxx functions, and the set of defaults one can specify for rendering (and make them parallel).

Clear writeup of concepts and analysis, thanks (quote shortened only for brevity).

> native.somefunction
> -------------------------
> Second, if there is a move toward a native.somefunction idea, then how about avoid using the keyword "native", and instead use the keyword for the language:  java.somefunction or csharp.somefunction etc.  Then it would be immediately clear what's going on, and the ST interpreter compiler could readily reject attempts by a template that expects C somefunction behavior to be used where it's getting java somefunction behavior. (And one would be prevented from accidentally reusing a template written for one native language in an incompatible scenario.)
> 
> Finally, would this really be heading in the direction of native-language specific functions, or is it really about adding user-defined functions to ST: ie: user.somefunction.  Let me be the first to suggest....
> 
> com.yourdomain.somefunction
> 
> :-).

:) indeed.

Iff there is some concensus on a need for java-etc.somefunction, this
proposed naming convention is good.

cheers
zen

-- 
Homepage: www.SoulSound.net -- Free Australia: www.UPMART.org
Please respect the confidentiality of this email as sensibly warranted.

From jonathan at buhacoff.net  Tue Oct 20 08:38:50 2009
From: jonathan at buhacoff.net (Jonathan Buhacoff)
Date: Tue, 20 Oct 2009 08:38:50 -0700
Subject: [stringtemplate-interest] On Pragmatism Violating Purity For
	The Win
In-Reply-To: <e3eda7ce0910192304k7a1664c7wdfc1942d81198a7f@mail.gmail.com>
References: <e3eda7ce0910192304k7a1664c7wdfc1942d81198a7f@mail.gmail.com>
Message-ID: <096AD955-DB24-4A93-90D1-9421CB749B2F@buhacoff.net>

On Oct 19, 2009, at 11:04 PM, Joseph Grace wrote:

> Jonathan Buhacoff wrote on Mon Oct 19 22:20:04 PDT 2009:
>
> > I believe that ST's growth in popularity will be precisely because  
> it
> > maintains a strict separation that attracts programmers who are
> > suffering from spaghetti-code syndrome with other tools.
> No argument here.
> Nothing changes.  If you don't need the hooks, do not use them.

Ok, that's fair.

> > Everything that needs to be done to "massage" data can be done and
> > should be done in the model.
> Echoes of "Do it in the model!"
> What if the model is inaccessible, feature frozen, or otherwise  
> source code inaccessible?  Count your blessings that you have fully  
> accessible model code.  Some projects don't and that makes ST a dead- 
> end due to logistical difficulties.

Then you need another layer of model, not view hooks. If the model is  
also integrated with the controller and you can't change the fact that  
the system uses ST for output, you could rewrite the templates to  
output all the model's  output in a suitable data format, write  
middleware to take that as input and supplement it with whatever else  
you need, and then use that with a copy of your original templates.

I guess I'd need an example of how you would use model.* to run  
arbitrary code that's not in the template to compensate for a model  
and/or controller that you can't change.  In the scenario you  
described, you'd have to actually write the code in the template  
because you wouldn't be able to change the model to take advantage of  
the hooks...

It just seems to me that if you can add a hook, you can also do  
anything else that's needed to fix the model and keep the view  
simple.   Here's a paragraph I copied & pasted from a previous email:

On Oct 19, 2009, at 5:59 PM, Joseph Grace wrote:

If ST can not adapt to "normal" models, then it's useless in many  
situations, and dangerous to standardize for unknown/future projects.   
For example, what if the model can not be changed?  That happens,  
right?  That's what ST strives for:  total separation of view and  
model.  What if it's literally the case that they're already  
separated, and the view simply has to make do?  Then saying "Do it in  
the model!" is an admission of ST failure.  Unacceptable.
So I think I just disagree with this premise. If they are already  
separated, great, make the change in the model. If they are already  
separated AND the model is frozen,  then modify the controller to  
either merge data from the frozen model with a new one, or to wrap  
data presented by the model with variations that you need in the view.  
If both the model and the controller are frozen, then you have an  
issue that is entirely outside the scope of the view.
If I were in a restaurant and the waiter (the view) told me he can't  
bring my favorite dish because they're out of ingredients,  I would  
call the owner and complain about the manager (the model/controller)  
not the waiter.  I certainly wouldn't expect the waiter to run to town  
(with hooks) buy the ingredients and cook them for me.  That's just  
not his job.
Similarly,  ST wouldn't be at fault,  and neither would the principle  
of separation between model and view, which predates ST.   ST is just  
better at enforcing what we already believe to be good and true.


>  > of course you can abuse these with side-effect programming... but  
> that
> > would be abuse of a feature, as opposed to something built-in to
> > encourage entanglement of model and view.
> Really?  Extensibility solves real world, logistical problems that  
> would prevent ST from being used.
> Think of it as a "nice convenience feature" for pulling data from  
> the model.
> = Joe =
>
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20091020/4bc656b8/attachment-0001.html 

From zen at freedbms.net  Tue Oct 20 08:41:12 2009
From: zen at freedbms.net (Zenaan Harkness)
Date: Wed, 21 Oct 2009 02:41:12 +1100
Subject: [stringtemplate-interest] On Pragmatism Violating Purity
	For	The Win
In-Reply-To: <e3eda7ce0910192054w4bc1aac9wedfb287467d15f8b@mail.gmail.com>
References: <e3eda7ce0910192054w4bc1aac9wedfb287467d15f8b@mail.gmail.com>
Message-ID: <20091020154112.GB17259@u8.ip61.upmart.info>

On Mon, Oct 19, 2009 at 08:54:50PM -0700, Joseph Grace wrote:
> *Zenaan Harkness* wrote on *Mon Oct 19 19:27:25 PDT 2009:*
...
> > [and later]  2) And I can say that native.* looks horribly slippery.
> 
> Ack to both. No disagreement here. However, this slippery slope already
> exists in the form of formatters, correct? And people use it from time to
> time for just this purpose, e.g., for "Truncate string" in java:
> 
> http://www.antlr.org/pipermail/stringtemplate-interest/2009-May/001954.html

String processing to massage it into a format suitable for output.
Eg line wrapping.
Had to handle this myself.
Wrote a formatter/ renderer which did the processing as I required.

I agree there is an argument for more comprehensive ST formatting
facilities.

On the other hand, if that 'data [format] processing' capability can be
used to process data, as opposed to data format, then people will
process data.

Template engines that can process data are plentiful. Velocity is one
I've used just a little, for example. In fact, just about every other
template engine out there provides for this :)

I've been away from my programming + ST, for most of this year, so
I'm sorry I can't provide more concrete examples right now.

Perhaps if it is limited to String munging of various sorts, then
we don't go into "data processing" (DP) territory.


Thank you for referring to the emails.
I shall speak to the two other emails you raise:

> http://www.antlr.org/pipermail/stringtemplate-interest/2009-May/001921.html

Here, although the author speaks of 'slight compromise', the proposal
put - 'expression handler' - is anything but slight. It would indeed
turn ST into a DP language, for those who want that. We want to keep ST
from being a DP language. For example, the 'when really needed', is
never. If DP is really needed, a separate layer will need to be
implemented. The complexities of arbitrary DP is ultimately "a
programming language".
That's a different problem than ST solves.


> http://www.antlr.org/pipermail/stringtemplate-interest/2009-May/001939.html

Thanks for referring to the email where Ter answers the questions
raised.

And at the last point (""This zoo contains $zebras.Count$
$if(rest(zebras))$ zebras $else$  zebra $endif$ I?m wondering if even
simple logic like this doesn?t belong in the  view""), Ter points out
again the slippery slope of working in a template with values (numbers)
as opposed to the list processing of 'rest' 'first' etc.

> These issues would be perfect candidates for "model.*" hook customization.
> If a "model.*" hook existed, users could develop such features as needed,
> and then migrate them into common ST usage only after being proven (or
> never). Pressure to change ST would be relieved, so core ST could remain

There's actually no significant pressure to change ST to become a DP
language. Although the question arises on occasion, in most (all?) cases
of an actual problem presented, a relatively straightforward solution
has been presented. Perhaps most telling, we see reports on the list
here and there of gratitude and "ahah" from time to time.

Strict separation of concerns really does make systems easier.

> true to its purity roots. Yet ST would generously accept any discernible
> input [Robustness Principle] and become a genuinely good citizen even for
> legacy or complex models.

This statement unfortunately implies that ST is not a good citizen in
such situations.

I have to cry straw-man on this one. Examples, brother. Examples :)


> IMO, ST needs to be a good citizen

It is.

> and handle glue issues

It does, to a degree.

> even if they're
> not strictly ST's problem. I believe ST perenially loses converts due to the
> purist "Do it in the model!" attitude. By adopting a more accomodating
> attitude of
> 
> "Do it in model.*!"

You might enjoy a couple of emails regarding MVC-recursion, 2009-07-23.

For full flexibility, say an intertwining of view with custom data
processing stuff, you may want to separate out the DP stuff into a
View-Model (as opposed to Data-Model class, eg).

best
zen

-- 
Homepage: www.SoulSound.net -- Free Australia: www.UPMART.org
Please respect the confidentiality of this email as sensibly warranted.

From zen at freedbms.net  Tue Oct 20 08:47:12 2009
From: zen at freedbms.net (Zenaan Harkness)
Date: Wed, 21 Oct 2009 02:47:12 +1100
Subject: [stringtemplate-interest] On Pragmatism Violating Purity
	For	The Win
In-Reply-To: <B96A7226-9023-46FA-BE1C-11368C084A46@buhacoff.net>
References: <e3eda7ce0910192054w4bc1aac9wedfb287467d15f8b@mail.gmail.com>
	<B96A7226-9023-46FA-BE1C-11368C084A46@buhacoff.net>
Message-ID: <20091020154712.GC17259@u8.ip61.upmart.info>

On Mon, Oct 19, 2009 at 10:20:04PM -0700, Jonathan Buhacoff wrote:
>>
>> We all believe ST's purity is valuable, but if many people can't use  
>> ST, who cares?  I believe purist inflexibility is hurting ST for some 
>> projects and crimping its growth.  I believe something like "model.*" 
>> addresses critical ST adoption issues and makes ST more accessible, 
>> flexible, and relevant to more projects.

ST is very good at handling its defined problem set.
In fact, it's simply the best (only, really) at view templating,
whilst keeping strict model and view separation.

For complex/ larger systems, the 'view' (ST) may needs its own
view-specific model, or view model. This is manifested for example
with custom renderers, which I use for example to format Java
style comments to line wrap correctly.

>>
> Here's my take, for what it's worth:
...
> I think it's fine if ST is less popular, as long as it stays the most  
> useful :)

:)

It _is_ the most useful :)

Just not everyone's quite become aware of that yet. Gives me a little
warm tickle inside me to think about it.

Kumbaya..

-- 
Homepage: www.SoulSound.net -- Free Australia: www.UPMART.org
Please respect the confidentiality of this email as sensibly warranted.

From zen at freedbms.net  Tue Oct 20 08:54:58 2009
From: zen at freedbms.net (Zenaan Harkness)
Date: Wed, 21 Oct 2009 02:54:58 +1100
Subject: [stringtemplate-interest] On Pragmatism Violating Purity
	For	The Win
In-Reply-To: <e3eda7ce0910192304k7a1664c7wdfc1942d81198a7f@mail.gmail.com>
References: <e3eda7ce0910192304k7a1664c7wdfc1942d81198a7f@mail.gmail.com>
Message-ID: <20091020155458.GD17259@u8.ip61.upmart.info>

On Mon, Oct 19, 2009 at 11:04:43PM -0700, Joseph Grace wrote:
> *Jonathan Buhacoff* wrote on *Mon Oct 19 22:20:04 PDT 2009:***
> > I believe that ST's growth in popularity will be precisely because it
> > maintains a strict separation that attracts programmers who are
> > suffering from spaghetti-code syndrome with other tools.
> 
> No argument here.
> Nothing changes.  If you don't need the hooks, do not use them.
> 
> > Everything that needs to be done to "massage" data can be done and
> > should be done in the model.
> 
> Echoes of "Do it in the model!"
> 
> What if the model is inaccessible, feature frozen, or otherwise source
> code inaccessible?

Reuse-by-Composition. Wrap your closed/ proprietary/ inaccessible model
in an accessible (ie that you write) data-model or view-model, whichever
makes sense for your problem.

You are writing code. Connecting (inaccessible) model to (accessible)
ST. Write the model (wrapper) you need.


> Count your blessings that you have fully
> accessible model code.  Some projects don't and that makes ST a
> dead-end due to logistical difficulties.

I can't picture that.


> > of course you can abuse these with side-effect programming... but that
> > would be abuse of a feature, as opposed to something built-in to
> > encourage entanglement of model and view.
> 
> Really?

Yes. Really.

best
zen

-- 
Homepage: www.SoulSound.net -- Free Australia: www.UPMART.org
Please respect the confidentiality of this email as sensibly warranted.

From ockham at gmail.com  Tue Oct 20 09:25:14 2009
From: ockham at gmail.com (Joseph Grace)
Date: Tue, 20 Oct 2009 09:25:14 -0700
Subject: [stringtemplate-interest] ST Half-in or All-in? Pragmatism &
	Portability.
Message-ID: <e3eda7ce0910200925q4518438cr9c22bb6a49c85fa9@mail.gmail.com>

I was just reading Harry's post suggesting a variety of ST operators, and it
brought the discussion back to basics:  which operators are commonly needed.
 He lists some useful operators, but it occurred to me that (with
conditionals) there are any number (combinatoric) of ways to combine them,
depending on need.  So customization is essential (no surprise).  Custom
data handling is a recurring, major issue these operators could address
using ST across applications, via user hooks for their own custom needs.  ST
could help with custom data issue in a pragmatic way by adding a work area
to support custom conversion (et al.) code.  "com.<domain>.<app>.*"
Then I thought back to some questions Zen asked earlier in the conversation:
"If we added native.if, are there other operators you see being useful in
the native.* library?", and
"A native.* library would be good to think/ plan for in advance though,
rather than one feature at a time, don't you think?"

I realized there's really a second concern intermingled with "custom data",
and that's the whole issue of keeping ST portable across languages.  ST data
conversion is not something that is always custom.  Each language may
present its own special needs, but many problems will be generic conversion
problems shaping, converting, tweaking, tagging data for ST.  ST could
probably use a portable library (a la Zen's questions, above) to handle
standard data conversions (et al.) into ST.  ("st.*" and "st.<lang>.*").  An
ST standard portable library could help with data conversions, capture
expertise for reuse, and lend a hand with language portability of ST.  ST
support could also foster more community among users of specific languages
with ST, through language specific support ("st.<lang>.*").  The idea would
be to make ST portable to many languages, by treating those languages and
data with first-class citizenship.

Pragmatism & Portability.  Those are really two separate issues.

I think the key idea is that data migration into ST can be difficult from
unorthodox languages or applications. The key to making ST work in many
situations is ST Data Generosity, the idea that ST should be generous about
accepting data. However, that can be a can of worms.

So we really have two concerns representing two namespaces:

1. "com.<domain>.<app>.*" Pragmatism.
Make ST extensible for custom projects/situations: User Extensibility.
"com.domain.app.*" Open to all developers.

2. "st.*" and "st.<lang>.*" Portability.
Help ST play nice, accept data easily: Data Generosity.
"st.<lang>.*" Ports ST data tools for ST to host each language.

I guess that's really a mash-up of Graham Wideman's namespace
suggestions + Zenaan
Harkness's library questions.

#1.  Pragmatism means that ST would open itself to user extensibility by
providing a namespace for custom tools.  Let the developers hook to their
models however they want or need, convert their data, and start using ST
even if the data is idiosyncratic.  Basically, ST would provide an extra
layer ("com.<domain>.<app>.*") within itself to take care of sticky model
and other custom data issues.  Users have a work area for getting their data
into ST any way they need or know how.  ST becomes friendly to all
string-compatible data.

#2.  Portability means that ST actually takes an active role in helping data
fit it's model, and would do so with welcome arms (instead of begrudgingly).
 So that's a philosophical change for ST community, but means that ST would
become a more language portable and data friendly tool.  I do not have any
ideas on what the library would look like, but I think ST could benefit from
taking a proactive role in being a good customer for data and hosting data
into ST.  The library would be portable across languages as much as
possible, but would probably end up also having specials code for
idiosyncracies of certain languages (putting emphasis on porting data into
ST).

As stuff from #1 gets shared among users, it could eventually graduate into
#2, library support for ST itself.  #1 would be minor leagues, and #2 would
be official ST data conversion tools.

-=-

Granted, all this is a far cry from Ter's main application for ST:  antlr.
 Antlr is a closed system, so this data hosting idea doesn't apply.
 However, in the real world, since ST is so useful, tool friendliness
(extensibility, pragmatism) and data hosting (conversions, portability)
become real issues.

Philosophically, I think ST pragmatism and portability would be a big step
forward.  However it would be a second focus and a lot of new
responsibility.  I'm not sure ST is ready for it.  However, the timing is
right for such a change since Ter is retooling ST for STv4.

Adding data conversion + hosting support would expand ST would become a
two-part toolset.  1.  ST the functional language.  2.  ST data conversion
and hosting tools.  That would be new focus for ST and ST community, and
would require dropping the insular attitude and adopting an open attitude
toward data as a first-class citizen in the ST space.   Each ST port would
then involve porting any "st.*" and "st.<lang>.*" library support functions
as well (and I don't know what else).  So ST would become higher maintenance
to see wider adoption, success, and... more radical testimonials!-)

I'm not sure if the ST community is ready or even wants such success.  One
person has already spoken out against such growth and expansion.  Now that
such growth appears to have higher maintenance costs, since ST would be
taking on some of that responsibility with "st.*" and "st.<lang>.*", such an
expansion may be seen as a threat to the community or otherwise undesirable.

OTOH, ST is powerful and has tons of potential, and maybe Ter would like to
see ST expand its roots to become more pragmatic, portable, and broadly
successful.

Cheers,

= Joe =
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20091020/7bec9a46/attachment-0001.html 

From ockham at gmail.com  Tue Oct 20 09:32:09 2009
From: ockham at gmail.com (Joseph Grace)
Date: Tue, 20 Oct 2009 09:32:09 -0700
Subject: [stringtemplate-interest] Posts in the night...
Message-ID: <e3eda7ce0910200932h2358afaved2c75b34194637a@mail.gmail.com>

A flurry of posts all aiming different directions, and all happening
simultaneously.
Where's google-wave when you need it.  ;-)
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20091020/8c60f5fa/attachment.html 

From ockham at gmail.com  Tue Oct 20 09:47:47 2009
From: ockham at gmail.com (Joseph Grace)
Date: Tue, 20 Oct 2009 09:47:47 -0700
Subject: [stringtemplate-interest] On Pragmatism Violating Purity For The Win
Message-ID: <e3eda7ce0910200947k6c3bf062wea9cc20659ef49d5@mail.gmail.com>

*Jonathan Buhacoff* wrote on *Tue Oct 20 08:38:50 PDT 2009:*



> Then you need another layer of model, not view hooks.

 Agreed.
The question then becomes a matter of where you put the extra layer?  I
suggest this discussion boils down to a matter of perspective.  Does the
extra layer belong outside ST entirely (as now, except via the formatter
backdoor), or does it belong alongside ST to complete ST as a tool to apply
its function purity to diverse datasets?

2 philosophies.  2 answers.

1.  Insular.  Not here.  Add your layer elsewhere.
2.  Generous.  Do it here, alongside ST.  "com.<domain>.<app>.*"

Both are valid.  Which is right for STv4 and ST community at this time?

= Joe =
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20091020/29b90293/attachment.html 

From sharwell at pixelminegames.com  Tue Oct 20 09:55:58 2009
From: sharwell at pixelminegames.com (Sam Harwell)
Date: Tue, 20 Oct 2009 11:55:58 -0500
Subject: [stringtemplate-interest] [antlr-interest] Status of the
	CSharp3 target and my C# portsof ANTLR and StringTemplate
References: <148a82de0f599d48a588d6de36c9b231@temporal-wave.com>
Message-ID: <DD5A5D428FE040429CCDF377FAA892840152DDE3@martini.ironwillgames.com>

The code should be nearly the same as that of the CSharp2 target. Here
is the C# port of the CSharp2 target and CSharp3 target so you can see
how the CSharp3 one differs. Clearly it should be easy to make it work.

 

public class CSharp2Target : Target

{

    public override string EncodeIntAsCharEscape(int v)

    {

        return "\\x" + v.ToString("X");

    }

}

 

public class CSharp3Target : Target

{

    public override string EncodeIntAsCharEscape(int v)

    {

        return "\\x" + v.ToString("X");

    }

 

    public override string GetTarget64BitStringFromValue(ulong word)

    {

        return "0x" + word.ToString("X");

    }

}

 

Something to note: I'm not sure the Java version of the tool exposes the
property required to support marking rules as public/protected/private.
We'll have to check that out too, but it should be straightforward.

 

Sam

 

From: Jim Idle [mailto:jimi at temporal-wave.com] 
Sent: Tuesday, October 20, 2009 12:08 AM
To: Sam Harwell; antlr-interest at antlr.org;
stringtemplate-interest at antlr.org
Subject: RE: [antlr-interest] Status of the CSharp3 target and my C#
portsof ANTLR and StringTemplate

 

OK - well we can add that easily enough J Why don't we try it?

 

Jim

 

From: Sam Harwell [mailto:sharwell at pixelminegames.com] 
Sent: Tuesday, October 20, 2009 7:46 AM
To: Jim Idle; antlr-interest at antlr.org;
stringtemplate-interest at antlr.org
Subject: RE: [antlr-interest] Status of the CSharp3 target and my C#
portsof ANTLR and StringTemplate

 

I think the only thing missing is the Java class required for the Java
version to know the CSharp3 target exists.

 

Sam

 

From: antlr-interest-bounces at antlr.org
[mailto:antlr-interest-bounces at antlr.org] On Behalf Of Jim Idle
Sent: Tuesday, October 20, 2009 2:51 AM
To: antlr-interest at antlr.org; stringtemplate-interest at antlr.org
Subject: Re: [antlr-interest] Status of the CSharp3 target and my C#
portsof ANTLR and StringTemplate

 

Top posting for Sam's benefit ;-)

 

Not being able to use the Csharp3 target from the standard version of
the tool is going to be a turn off for many I think L What is it that
your port of the tool has that the standard version does not. I know you
have posted some of that, but perhaps we can summarize this and see if
such things can be absorbed into the standard Java tool? Nobody minds
you having your own version of anything because it is open source, but
most will want ot use the 'offical' java version of the tool even if
they are targeting C#.

 

Thanks for the updates,

 

Jim

 

From: antlr-interest-bounces at antlr.org
[mailto:antlr-interest-bounces at antlr.org] On Behalf Of Sam Harwell
Sent: Monday, October 19, 2009 1:05 AM
To: antlr-interest at antlr.org; stringtemplate-interest at antlr.org
Subject: [antlr-interest] Status of the CSharp3 target and my C# ports
of ANTLR and StringTemplate

 

Hi everyone,

 

Here's a status update that I know many people are asking for. For each
portion, I'll talk about the status of the code in Perforce. At the end,
I'll talk about the status of the posted binaries.

 

Basic Status

 

StringTemplate and the ANTLR Tool: Up-to-date with the Java version for
all targets as of August 4, 2009, which covers all of the changes made
earlier in the year and over the summer.

 

CSharp3 Target: working and extensively used in the ANTLR Tool,
StringTemplate, and the commercial projects I use ANTLR for. I haven't
tested the -profile and -debug modes because I don't use them, however
the templates should be "close to working". Currently, the CSharp3
target can only be used when generating grammars from the C# port of the
tool.

 

Design Changes

 

1.       Rather than package the target templates as resources in the
tool's executable, I've chosen a flat file layout. That way, the
templates for a target can be updated without recompiling the tool. The
targets themselves are also implemented as individual DLL's.

2.       The CSharp3 target declares rules as private methods by
default. Rules can be made public by simply marking them as such in the
grammar: "public compile_unit : declaration*;" I have updated the Java
target's code generation to support this as well, but it's not checked
in.

3.       StringTemplate has code for a high speed dynamically compiled
interpreter. By default, the build doesn't enable this mode, but when
it's turned on the output appears to work correctly. I need to do
another round of tests, but at this point the C# ports of the ANTLR Tool
and StringTemplate should be significantly faster than the Java version.
We've hit a brick wall preventing further optimization without rewriting
ST, but the work on STv4 should give another order of magnitude
improvement in template rendering performance.

 

Things Holding Me Up

 

1.       I haven't finalized the way I'm going to do assembly
versioning, although I think I've got that worked out now. I'll send a
separate mail to the list regarding this.

2.       StringTemplate is only tested in regards to code generation for
the ANTLR tool. In particular, its ability to locate templates in
resources or on the file system is not documented and may or may not
behave as people expect.

3.       I'm still making periodic changes to the API as I finalize
things, and breaking changes in production code aren't good. I don't
want to suggest replacing the CSharp2 target until the CSharp3 target is
more tested by other people.

 

Things I want to do, but not really holding up the builds

 

I really want to package a clean integration of ANTLR+CSharp3 for
MSBuild. We need this. This would include at least MSBuild targets file
and templates for adding grammars to a project. Unfortunately, there are
many issues I still need to resolve for this to be a reality, most of
which have answers in shades of gray.

 

Status of the Posted Build

 

The build available for download was uploaded on fairly short notice.
Mistakes (by me) included not having the assembly version set correctly
and not posting the source code from the build with the binaries. I've
been trying to wrap some of these things up before posting another
build.

 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20091020/734239ec/attachment-0001.html 

From parrt at cs.usfca.edu  Tue Oct 20 16:38:22 2009
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue, 20 Oct 2009 16:38:22 -0700
Subject: [stringtemplate-interest] "final" word on null vs missing vs empty
Message-ID: <5C413EA6-805A-4FD2-AAB8-B92E98F6AA3C@cs.usfca.edu>

Hi Guys,

thank you all for the detailed discussion concerning what the hell  
null means! I've done a lot of thinking about this and I believe I  
made a mistake in the final ST 3.2.1 version before my current rebuild  
(v4). It's too confusing, and makes the code too complex, to  
distinguish between missing and present but null. There is huge  
history with ST too suggests that it seems to work okay treating a  
missing attribute and a null attribute as the same thing (i.e., not  
there). We have the null option that lets us say what to replace null  
with. there are a few corner cases that I've cleaned up, but ST ain't  
broke so I don't think I will "fix" this part. Has the advantage of  
being backward compatible, which will be important when I move onto  
rebuilding the front end of ANTLR v3 so that it does not use ANTLR v2.

Here are two of my unit tests. The difference you will notice that  
adding (setAttribute) null stores a null the value attribute in the  
attributes table. This is consistent than when I pass an array of size  
1 with a null element.

     @Test public void testNullValueAndNullOption() throws Exception {
         STGroup group = new STGroup();
         group.defineTemplate("test", "<name; null=\"n/a\">");
         ST st = group.getInstanceOf("test");
         st.add("name", null);
         String expected = "n/a";
         String result = st.render();
         assertEquals(expected, result);
     }

Here it uses the null option because name is missing (same as null  
value attribute)

     @Test public void testMissingValueAndNullOption() throws  
Exception {
         STGroup group = new STGroup();
         group.defineTemplate("test", "<name; null=\"n/a\">");
         ST st = group.getInstanceOf("test");
         String expected = "n/a";
         String result = st.render();
         assertEquals(expected, result);
     }

The use case that I had for "missing" being important I realize is now  
a flaw in my thinking. filtering should be done in the model and not  
the view so my use case was an abuse case :)

When I yanked out the code that handled all of this missing versus  
null crap, it became much simpler and easier to understand + faster  
etc...

Ter

From zen at freedbms.net  Tue Oct 20 19:42:14 2009
From: zen at freedbms.net (Zenaan Harkness)
Date: Wed, 21 Oct 2009 13:42:14 +1100
Subject: [stringtemplate-interest] null vs missing vs empty
	vs	nonexistent
In-Reply-To: <7E4066AA90634047A7ACFD441F4E1E57@wprod.ds.aphp.fr>
References: <mailman.6003.1255832190.3227.stringtemplate-interest@antlr.org>
	<7E4066AA90634047A7ACFD441F4E1E57@wprod.ds.aphp.fr>
Message-ID: <20091021024214.GB10715@u8.ip61.upmart.info>

On Tue, Oct 20, 2009 at 04:48:26PM +0200, Harry Karadimas wrote:
> > From: Zenaan Harkness <zen at freedbms.net>
> > On Fri, Oct 16, 2009 at 11:41:43AM +0200, Harry Karadimas wrote:
> > > Reminds me of the debates about SQL Null
...
 
> > Now we're back to handling all cases.
> > 
> > To summarise my points:
> > 
> >    -  Real world dictates we handle complexity.
> > 
> >    -  Incomplete concept handling is false simplicity.
> > 
> >    -  Concept handling inconsistency is bad complexity.
> > 
> >    -  We should aim for conceptually complete, yet consistent, tools
> >       (according to the domain of the tool eg view handling,
> >       programming, etc)

> In short, I agree.

> Let's not overrate these issues; after all st has worked quite 
> well for me (and for others I guess) in the current form. After 
> all, having only whitespace in the model may also be treated as
> a model issue; if whitespace means empty, the model could be 
> responsible for trimming strings.

Ack.

For the cleanest view 'code' (ST templates), data is 'cleaned up'
not in the view, but in the model.

MVC recursion says that to the extent this 'data cleaning' is a view
specific thing unrelated to the system's data-model, that a view-model
is created for just this purpose (distinct from the data-model (which
business logic uses/ requires) and from view-view (ie ST)).

best
zen

-- 
Homepage: www.SoulSound.net -- Free Australia: www.UPMART.org
Please respect the confidentiality of this email as sensibly warranted.

From ockham at gmail.com  Tue Oct 20 20:23:20 2009
From: ockham at gmail.com (Joseph Grace)
Date: Tue, 20 Oct 2009 20:23:20 -0700
Subject: [stringtemplate-interest] null vs missing vs empty vs nonexistent
Message-ID: <e3eda7ce0910202023r2383c04fl4729a3f68e95002c@mail.gmail.com>

*Zenaan Harkness* wrote on *Tue Oct 20 19:42:14 PDT 2009:**

> For the cleanest view 'code' (ST templates), data is 'cleaned up'
> not in the view, but in the model.
>
> MVC recursion says that to the extent this 'data cleaning' is a view
> specific thing unrelated to the system's data-model, that a view-model
> is created for just this purpose (distinct from the data-model (which
> business logic uses/ requires) and from view-view (ie ST)).

Ack.

If I understand you properly, the recursive nature of MVC allows for each
MVC component
to be subdivided into MVC as well? So for example, the View can also be
broken down
into three MVC subcomponents, V-Model + V-View + V-Controller.

In ST's case, the V-View could be the functional language ST (very
functional, very pure),
leaving room for a V-Model and V-Controller as helpers to the V-View.
For instance, a V-Model could clean and convert data from input for the ST
V-View,
and perhaps a V-Controller could handle trivia data tweaking, tagging, and
tracking.

Cool.

*
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20091020/4610a2fc/attachment.html 

From gwlist at grahamwideman.com  Tue Oct 20 20:32:23 2009
From: gwlist at grahamwideman.com (Graham Wideman)
Date: Tue, 20 Oct 2009 20:32:23 -0700
Subject: [stringtemplate-interest] null vs missing vs emptyvsnonexistent
In-Reply-To: <20091021024214.GB10715@u8.ip61.upmart.info>
References: <7E4066AA90634047A7ACFD441F4E1E57@wprod.ds.aphp.fr>
	<mailman.6003.1255832190.3227.stringtemplate-interest@antlr.org>
	<7E4066AA90634047A7ACFD441F4E1E57@wprod.ds.aphp.fr>
Message-ID: <4.1.20091020200516.01aaad50@grahamwideman.com>

> Zenaan said:
>MVC recursion says that to the extent this 'data cleaning' is a view
>specific thing unrelated to the system's data-model, that a view-model
>is created for just this purpose (distinct from the data-model (which
>business logic uses/ requires) and from view-view (ie ST)).

Agreed. I think some confusion arises in simplifying the concept of ST to "handles model-view separation" -- this suggests that ST aspires to be *solely* responsible for producing the view, with no impact in the calling application (other than filling in attributes).

One *could* imagine an apparatus that does this, a sort of Java Objects Query Language, for example, but really, we more or less have that already and it's called "write some view code in Java in a separate class".  

At any rate, it's not what ST is intended for, at least as I understand it.

I think it's perhaps helpful to note that though the calling app can pass various data types to ST attributes, at the point where they "cross over into ST land" they've been converted by the caller to strings. (ie: in Java they have to have a toString method, and the result of that is what ST works on.)  Hence *String* Template.  But with a slight bending in the "if" area, to facilitate the caller sending enable/disable signals to ST.

So again, no intent to become a general computing language.

That said, there seems room to debate the features that are always or often view issues, such as handling of whitespace, wrapping, padding, missing/null values, output variation based on counts of items and so on.

-- Graham






From zen at freedbms.net  Tue Oct 20 20:43:54 2009
From: zen at freedbms.net (Zenaan Harkness)
Date: Wed, 21 Oct 2009 14:43:54 +1100
Subject: [stringtemplate-interest] ST Half-in or All-in? Pragmatism
	&	Portability.
In-Reply-To: <e3eda7ce0910200925q4518438cr9c22bb6a49c85fa9@mail.gmail.com>
References: <e3eda7ce0910200925q4518438cr9c22bb6a49c85fa9@mail.gmail.com>
Message-ID: <20091021034354.GC10715@u8.ip61.upmart.info>

On Tue, Oct 20, 2009 at 09:25:14AM -0700, Joseph Grace wrote:
> I was just reading Harry's post suggesting a variety of ST operators, and it
> brought the discussion back to basics:  which operators are commonly needed.
>  He lists some useful operators, but it occurred to me that (with
> conditionals) there are any number (combinatoric) of ways to combine them,
> depending on need.  So customization is essential (no surprise).  Custom

Operator customization, is one technique to handle explosion of
operators.

Orthogonal operators, is another.

Most strictly, 'if' is a violation of 'no logic in the view'.
It's a concession of sorts.

Back to orthogonal operators, I'm thinking:
<if(isempty(strip(attribute)))>
<if(exists(attribute))>

It's looking a little lisp like. What I'm thinking is that if any
data processing (DP) is required to reduce the data to a point where
sensible boolean values can be obtained, then that DP should be kept
separate, completely separate, from the conditional test facility.

Functional orthogonality may look more verbose, but conceptually it
is much cleaner.

For the example <if(isempty(strip(attribute)))>, the only indeterminate
now is 'strip'.
   -  'if' must have a boolean value to work at all.
      -  unfortunately this would backwards incompatible,
         but would simplify/ purify ST
      -  for 'if' on a possibly null attribute, implies
         a functional language extension like lisp list processing

   -  isempty is self explanatory

   -  isnull becomes small and self contained complement of isempty

   -  <if(nullorempty(strip(attribute)))> would round out these
      functions


> data handling is a recurring, major issue these operators could address
> using ST across applications, via user hooks for their own custom needs.  ST

DP is a recurring, major issue common-lisp could address across
applications  :)


...
> I realized there's really a second concern intermingled with "custom data",
> and that's the whole issue of keeping ST portable across languages.  ST data
> conversion is not something that is always custom.  Each language may

ST is mandated with _not_ providing for DP/ data-conversion.

> present its own special needs, but many problems will be generic conversion
> problems shaping, converting, tweaking, tagging data for ST.  ST could
> probably use a portable library (a la Zen's questions, above) to handle
> standard data conversions (et al.) into ST.  ("st.*" and "st.<lang>.*").  An

There is certainly room for a complement to ST. Unfortunately given that
this layer would not be ST, it would require either a completely
alternative language like lisp, or an implementation/ library in each
"ST host" language.

> ST standard portable library could help with data conversions, capture
> expertise for reuse, and lend a hand with language portability of ST.  ST

I think what you mean to say is not 'language portability of ST' (ST
works just fine in each host language) but rather 'language-specific
data processing needs would be able to be performed in ST, yes?

> support could also foster more community among users of specific languages
> with ST, through language specific support ("st.<lang>.*").  The idea would
> be to make ST portable to many languages, by treating those languages and
> data with first-class citizenship.

ST treats no language as a second-class citizen. It has been stated
a few times, eg in this discussion, that this is the case, but I'm
pretty sure it's just not the case. Doesn't make sense to me.

> Pragmatism & Portability.  Those are really two separate issues.

Agreed. ST templates are currently highly portable. It's goodness.

> I think the key idea is that data migration into ST can be difficult from
> unorthodox languages or applications.

Actually, it's not.  It's really easy to push data into ST.

In my imagination, I can imagine that an unorthodox language for which
there are some difficulties processing the data into a suitable format
for ST, then that language is going to have difficulties processing
data into _any_ suitable format.

But this is a hypothetical anyway...


> The key to making ST work in many situations is ST Data Generosity,
> the idea that ST should be generous about accepting data. However,
> that can be a can of worms.

ST provides generous acceptance.

What ST does not provide is anything remotely approaching
'comprehensive DP facilities'.

And _that_ is by design. It's not a DP tool.
But it _is_ the best view templating tool in existence. Period.

...
> Adding data conversion + hosting support would expand ST would become
> a two-part toolset.  1.  ST the functional language.  2.  ST data
> conversion and hosting tools.

Totally agree. Would be a two part toolset.

> That would be new focus for ST and ST community, and would require
> dropping the insular attitude and adopting an open attitude toward
> data as a first-class citizen in the ST space.
...
> I'm not sure if the ST community is ready or even wants such success.  One
...
> expansion may be seen as a threat to the community or otherwise undesirable.

Furfy! The hide of you!  :)  :)

It would require only development of the second of the two tools you
refer to - the DP tool. I find Java just fine, myself. But I do imagine
something lisp like (ahh, perhaps lisp <shrug>) could provide some
useful benefits depending on project.

best
zen

-- 
Homepage: www.SoulSound.net -- Free Australia: www.UPMART.org
Please respect the confidentiality of this email as sensibly warranted.

From zen at freedbms.net  Tue Oct 20 20:49:17 2009
From: zen at freedbms.net (Zenaan Harkness)
Date: Wed, 21 Oct 2009 14:49:17 +1100
Subject: [stringtemplate-interest] On Pragmatism Violating Purity
	For	The Win
In-Reply-To: <e3eda7ce0910200947k6c3bf062wea9cc20659ef49d5@mail.gmail.com>
References: <e3eda7ce0910200947k6c3bf062wea9cc20659ef49d5@mail.gmail.com>
Message-ID: <20091021034917.GD10715@u8.ip61.upmart.info>

On Tue, Oct 20, 2009 at 09:47:47AM -0700, Joseph Grace wrote:
> *Jonathan Buhacoff* wrote on *Tue Oct 20 08:38:50 PDT 2009:*
> 
> 
> 
> > Then you need another layer of model, not view hooks.
> 
>  Agreed.
> The question then becomes a matter of where you put the extra layer?  I
> suggest this discussion boils down to a matter of perspective.  Does the
> extra layer belong outside ST entirely (as now, except via the formatter
> backdoor), or does it belong alongside ST to complete ST as a tool to apply
> its function purity to diverse datasets?
> 
> 2 philosophies.  2 answers.
> 
> 1.  Insular.  Not here.  Add your layer elsewhere.
> 2.  Generous.  Do it here, alongside ST.  "com.<domain>.<app>.*"

:)

 1.  Clean. Powerful. Join the revolution.
 2.  Slutty. Be like all the others. Make a mess.


Seriously, Velocity is a fine DP-come-template engine combined.

I was on a velocity-learning path, until I found ST, read the paper,
and was hit by an epiphany lorry.

The red pill man. The red pill.

best
zen

-- 
Homepage: www.SoulSound.net -- Free Australia: www.UPMART.org
Please respect the confidentiality of this email as sensibly warranted.

From zen at freedbms.net  Tue Oct 20 20:55:44 2009
From: zen at freedbms.net (Zenaan Harkness)
Date: Wed, 21 Oct 2009 14:55:44 +1100
Subject: [stringtemplate-interest] "final" word on null vs missing
	vs	empty
In-Reply-To: <5C413EA6-805A-4FD2-AAB8-B92E98F6AA3C@cs.usfca.edu>
References: <5C413EA6-805A-4FD2-AAB8-B92E98F6AA3C@cs.usfca.edu>
Message-ID: <20091021035544.GE10715@u8.ip61.upmart.info>

On Tue, Oct 20, 2009 at 04:38:22PM -0700, Terence Parr wrote:
...
> The use case that I had for "missing" being important I realize is now  
> a flaw in my thinking. filtering should be done in the model and not  
> the view so my use case was an abuse case :)

Hard to disagree.

> When I yanked out the code that handled all of this missing versus  
> null crap, it became much simpler and easier to understand + faster  
> etc...

Good signs.

Any thoughts on making 'if' strict, or providing something like:
   if.boolean (a data analysis/ model signal operator), and
   if.existence (a data presence operator)
   ??

best
zen

-- 
Homepage: www.SoulSound.net -- Free Australia: www.UPMART.org
Please respect the confidentiality of this email as sensibly warranted.

From ockham at gmail.com  Wed Oct 21 10:30:03 2009
From: ockham at gmail.com (Joseph Grace)
Date: Wed, 21 Oct 2009 10:30:03 -0700
Subject: [stringtemplate-interest] ST Half-in or All-in? Pragmatism &
	Portability.
Message-ID: <e3eda7ce0910211030h6ae23c36m5a6d67e8ddcb84c8@mail.gmail.com>

*Zenaan Harkness* wrote on *Tue Oct 20 20:43:54 PDT 2009:**

> It's looking a little lisp like. What I'm thinking is that if any
> data processing (DP) is required to reduce the data to a point where
> sensible boolean values can be obtained, then that DP should be kept
> separate, completely separate, from the conditional test facility.
>
> Functional orthogonality may look more verbose, but conceptually it
> is much cleaner.

Double ack.

To answer your follow-up question about languages. I like lisp and agree its
powerful. However, I think it would be jumping the gun to select a DP (Data
Processing) language before having libraries written to use it. Also, I
think it would be cumbersome to require another language as a sidecar to ST.
The "ST host" language is an exception, because presumably that's already
the user's choice. So I would like to keep any sidecar libraries implemented
in the "ST host" languages.

Any portable DP library would then port to all the various "ST host"
languages by the various "ST host" maintainers. For now, that's not an issue
since there's no library! I'd suggest just reserving "st.*" for "Future Use"
in case ST eventually adopted some of the DP tooling from independent users.
A DP stdlib for ST for common DP portable tooling common in ST applications.

= Joe =

*
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20091021/fbc51f95/attachment.html 

From parrt at cs.usfca.edu  Wed Oct 21 11:11:32 2009
From: parrt at cs.usfca.edu (Terence Parr)
Date: Wed, 21 Oct 2009 11:11:32 -0700
Subject: [stringtemplate-interest] "final" word on null vs missing
	vs	empty
In-Reply-To: <20091021035544.GE10715@u8.ip61.upmart.info>
References: <5C413EA6-805A-4FD2-AAB8-B92E98F6AA3C@cs.usfca.edu>
	<20091021035544.GE10715@u8.ip61.upmart.info>
Message-ID: <A32308D2-5703-45AE-B10B-57ED8A0BAACE@cs.usfca.edu>


On Oct 20, 2009, at 8:55 PM, Zenaan Harkness wrote:
> Any thoughts on making 'if' strict, or providing something like:
>   if.boolean (a data analysis/ model signal operator), and
>   if.existence (a data presence operator)
>   ??

Well, it's an interesting idea but I lean towards leaving as simple <if 
(...)> because nobody really complained about this so far.

Ter

From zen at freedbms.net  Wed Oct 21 17:30:41 2009
From: zen at freedbms.net (Zenaan Harkness)
Date: Thu, 22 Oct 2009 11:30:41 +1100
Subject: [stringtemplate-interest] "final" word on null vs missing
	vs	empty
In-Reply-To: <A32308D2-5703-45AE-B10B-57ED8A0BAACE@cs.usfca.edu>
References: <5C413EA6-805A-4FD2-AAB8-B92E98F6AA3C@cs.usfca.edu>
	<20091021035544.GE10715@u8.ip61.upmart.info>
	<A32308D2-5703-45AE-B10B-57ED8A0BAACE@cs.usfca.edu>
Message-ID: <20091022003040.GA8163@u8.ip61.upmart.info>

On Wed, Oct 21, 2009 at 11:11:32AM -0700, Terence Parr wrote:
> 
> On Oct 20, 2009, at 8:55 PM, Zenaan Harkness wrote:
> > Any thoughts on making 'if' strict, or providing something like:
> >   if.boolean (a data analysis/ model signal operator), and
> >   if.existence (a data presence operator)
> >   ??
> 
> Well, it's an interesting idea but I lean towards leaving as simple <if 
> (...)> because nobody really complained about this so far.

So concluding, we have:
   -  1) inclusive/ generic/ back-compatible operator 'if'
   -  2) strict data-type test operator 'ifnull'
   -  3) no strict data-type test operator for ifbool?

Or did you just mean not removing the inclusive 'if'?

Of course removing inclusive 'if' would break backwards compatibility
and therefore is a bad idea.

And operators 1 and 2 above are adequate as far as I can tell,
to handle most of the complaints I and others have voiced on
this list.

However, if we consider the concepts, we can group them as 'inclusive'
vs 'strict' conditional concepts.

We can also say that 2 and 3 are data-type analysis tests.
We could say they are data 'shape' operators as you have referred to.

   -  ifnull - standard comp sci special case, often needed;
      suggests 'no shape' or not existing/ present at all;

   -  ifscalar (ifstring? ifvalue?) - a value/string type;
      ifstring suggests data type, where ifscalar suggests shape
      (as in, anything other than list or map);

   -  iflist - self explanatory;

   -  ifmap - self explanatory;

   -  ifempty - the final piece of the 'shapes' puzzle?
      ie for list and map shape testing?
      when combined with first/rest/last/front, ifempty allows
      testing for 'no remaining elements' etc, providing full
      list 'shape processing' ability (vs DP) and plural handling,
      which to my mind aligns closely with view layout of the data;
      this is of course just a bunch of niceness which could be
      pushed back to the model as we know, but strictly is not DP;

The question might be put before us, the question of ST implementing/
providing strictly only 'shape' operators, vs adding data-type
operators.

I think it is only ifnull and 'if' itself that leads to desire to
consider data-type operators. But I don't think data-type operators
are appropriate in general (ifemployee vs ifmanager anyone :)

The limit of consideration for data type (not shape) testing concept
would I think only be for "simple" or "built in" types - but drawing
such a line is another I think very slippery slope (gcc has built in
support for complex numbers for example).
So data-type testing is a strong NACK for me, such to be left to the
[v-]model.

Thoughts?

best
zen

-- 
Homepage: www.SoulSound.net -- Free Australia: www.UPMART.org
Please respect the confidentiality of this email as sensibly warranted.

From vdaron at ask.be  Thu Oct 22 08:12:15 2009
From: vdaron at ask.be (Vincent DARON)
Date: Thu, 22 Oct 2009 17:12:15 +0200
Subject: [stringtemplate-interest] IAttributeRenderer and Type Inheritance
	in C#
Message-ID: <4AE0764F.4030403@ask.be>

Hi

I would like to be able to register an IAttributeRenderer for objects 
implementing an Interface.

Part of current implementation of GetAttributeRenderer

        public virtual IAttributeRenderer GetAttributeRenderer( Type attributeClassType )
        {
            IAttributeRenderer renderer = null;
            if ( _attributeRenderers != null )
            {
                if ( !_attributeRenderers.TryGetValue( attributeClassType, out renderer ) )
                    renderer = null;
            }
// ...snip ... //
        }


My proposal (untested, but should be ok)

        public virtual IAttributeRenderer GetAttributeRenderer( Type attributeClassType )
        {
            IAttributeRenderer renderer = null;
            if ( _attributeRenderers != null )
            {
		foreach(Type key in _attributeRenderers.Keys)
		{
			if(key.IsAssignableFrom(attributeClassType))
			{
				renderer = _attributeRenderers[key];
				break;
			}
		}
            }
// ...snip ... //
        }


It will allow to register Attribute Renderer for objects implementing 
interfaces

    RegisterAttributeRenderer(typeof(IFormatProvider), ...);

Goot idea ?

Second question, is it possible to have access to source using Source 
Control (Subversion, Hg, Git, ...) ? It would be far easier to test and 
create patches.

Thanks for answer/comments

Vincent

From sharwell at pixelminegames.com  Thu Oct 22 09:45:58 2009
From: sharwell at pixelminegames.com (Sam Harwell)
Date: Thu, 22 Oct 2009 11:45:58 -0500
Subject: [stringtemplate-interest] IAttributeRenderer and Type
	Inheritancein C#
References: <4AE0764F.4030403@ask.be>
Message-ID: <DD5A5D428FE040429CCDF377FAA892840152DDF1@martini.ironwillgames.com>

Hi Vincent,

My first thought is this changes an O(1) algorithm that has to run for
every rendered item into an O(n) algorithm. I would have to run this
through the instrumenting profiler to make sure it isn't slowing down
the rendering process before I could include it. There are a few other
ways to approach the problem, but I'm not yet sure which one would work
out best.

Sam

-----Original Message-----
From: stringtemplate-interest-bounces at antlr.org
[mailto:stringtemplate-interest-bounces at antlr.org] On Behalf Of Vincent
DARON
Sent: Thursday, October 22, 2009 10:12 AM
To: stringtemplate-interest at antlr.org
Subject: [stringtemplate-interest] IAttributeRenderer and Type
Inheritancein C#

Hi

I would like to be able to register an IAttributeRenderer for objects 
implementing an Interface.

Part of current implementation of GetAttributeRenderer

        public virtual IAttributeRenderer GetAttributeRenderer( Type
attributeClassType )
        {
            IAttributeRenderer renderer = null;
            if ( _attributeRenderers != null )
            {
                if ( !_attributeRenderers.TryGetValue(
attributeClassType, out renderer ) )
                    renderer = null;
            }
// ...snip ... //
        }


My proposal (untested, but should be ok)

        public virtual IAttributeRenderer GetAttributeRenderer( Type
attributeClassType )
        {
            IAttributeRenderer renderer = null;
            if ( _attributeRenderers != null )
            {
		foreach(Type key in _attributeRenderers.Keys)
		{
			if(key.IsAssignableFrom(attributeClassType))
			{
				renderer = _attributeRenderers[key];
				break;
			}
		}
            }
// ...snip ... //
        }


It will allow to register Attribute Renderer for objects implementing 
interfaces

    RegisterAttributeRenderer(typeof(IFormatProvider), ...);

Goot idea ?

Second question, is it possible to have access to source using Source 
Control (Subversion, Hg, Git, ...) ? It would be far easier to test and 
create patches.

Thanks for answer/comments

Vincent
_______________________________________________
stringtemplate-interest mailing list
stringtemplate-interest at antlr.org
http://www.antlr.org/mailman/listinfo/stringtemplate-interest

From jonathan at buhacoff.net  Thu Oct 22 10:06:29 2009
From: jonathan at buhacoff.net (Jonathan Buhacoff)
Date: Thu, 22 Oct 2009 10:06:29 -0700
Subject: [stringtemplate-interest] IAttributeRenderer and Type
	Inheritance in C#
In-Reply-To: <4AE0764F.4030403@ask.be>
References: <4AE0764F.4030403@ask.be>
Message-ID: <B0C97375-9B1F-45FA-B409-1DB6B673E95E@buhacoff.net>

+0.5

I think this can be useful for internationalization efforts, but I'd   
like to have a concrete example for everyone before I give it the  
other 0.5 :)

Vincent wrote a lot of code in Microsoft-style C, so here's a diff  
against StringTemplate.java in version 3.2.1 that does the same thing,  
if you just register your interface renderer the same way you do your  
class renderer (not what Vincent wrote), which does work:

1070a1071,1079
 > 			
 > 			if( renderer == null ) {
 > 				// there's no renderer for that class specifically, so let's  
try its interfaces
 > 				Class[] interfaces = attributeClassType.getInterfaces();
 > 				for(int i=0; i<interfaces.length && renderer==null; i++) {
 > 					renderer =  
(AttributeRenderer)attributeRenderers.get(interfaces[i]);
 > 				}
 > 			}
 >


On Oct 22, 2009, at 8:12 AM, Vincent DARON wrote:

> Hi
>
> I would like to be able to register an IAttributeRenderer for objects
> implementing an Interface.
>
> Part of current implementation of GetAttributeRenderer
>
>        public virtual IAttributeRenderer GetAttributeRenderer( Type  
> attributeClassType )
>        {
>            IAttributeRenderer renderer = null;
>            if ( _attributeRenderers != null )
>            {
>                if ( ! 
> _attributeRenderers.TryGetValue( attributeClassType, out renderer ) )
>                    renderer = null;
>            }
> // ...snip ... //
>        }
>
>
> My proposal (untested, but should be ok)
>
>        public virtual IAttributeRenderer GetAttributeRenderer( Type  
> attributeClassType )
>        {
>            IAttributeRenderer renderer = null;
>            if ( _attributeRenderers != null )
>            {
> 		foreach(Type key in _attributeRenderers.Keys)
> 		{
> 			if(key.IsAssignableFrom(attributeClassType))
> 			{
> 				renderer = _attributeRenderers[key];
> 				break;
> 			}
> 		}
>            }
> // ...snip ... //
>        }
>
>
> It will allow to register Attribute Renderer for objects implementing
> interfaces
>
>    RegisterAttributeRenderer(typeof(IFormatProvider), ...);
>
> Goot idea ?
>
> Second question, is it possible to have access to source using Source
> Control (Subversion, Hg, Git, ...) ? It would be far easier to test  
> and
> create patches.
>
> Thanks for answer/comments
>
> Vincent
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest


From jonathan at buhacoff.net  Thu Oct 22 10:22:07 2009
From: jonathan at buhacoff.net (Jonathan Buhacoff)
Date: Thu, 22 Oct 2009 10:22:07 -0700
Subject: [stringtemplate-interest] IAttributeRenderer and Type
	Inheritancein C#
In-Reply-To: <DD5A5D428FE040429CCDF377FAA892840152DDF1@martini.ironwillgames.com>
References: <4AE0764F.4030403@ask.be>
	<DD5A5D428FE040429CCDF377FAA892840152DDF1@martini.ironwillgames.com>
Message-ID: <DAE8224D-ABD0-40DA-883E-8C4A650B680B@buhacoff.net>

If it's integrated with the class renderers as I showed in my diff,   
there's a little extra work to do. On the other hand,  most classes  
only implement handful of interfaces, and since this code doesn't do  
any string processing it will probably be fast enough.

Or, if it's implemented as a separate map of renderers, then it will  
only slow down processing if the programmer has registered any  
interface renderers.  But that seems a little messy to me, maybe more  
messy than the speed savings is worth.

Finally, the other issue with interface renderers is priority -  as  
proposed now, we have  no control over which renderer will be found  
first, and if a class implements more than one interface with a  
registered renderer, the output will be non-deterministic.  I think  
that's a bad thing.

The way to control that would be to have a complete interface to  
manage the priority of interface renderers, or to have ST implement  
something like  
registerInterfaceAttributeRenderers(List<AttributeRenderer>  
renderers);     so the programmer can specify the order of the  
renderers.

So the loop would change to iterating through the registered interface  
renderers and checking if the value implements each one (and they  
would be in priority order).

That makes things deterministic again, and would require the use of a  
list of interface renders separate from the map of class renderers,  
which means only people who use interface renderers would incur any  
performance penalty.

I'm still trying to think of a case where this scheme would be better  
than wrapping everything with an adapter and registering a renderer  
for that, because automatically wrapping certain classes that  
implement an interface automatically is so easy to do by subclassing  
StringTemplate.   I'm still thinking along the lines of  
internationalization, units of measure, stuff like that.   Vincent can  
you provide a real world case?


On Oct 22, 2009, at 9:45 AM, Sam Harwell wrote:

> Hi Vincent,
>
> My first thought is this changes an O(1) algorithm that has to run for
> every rendered item into an O(n) algorithm. I would have to run this
> through the instrumenting profiler to make sure it isn't slowing down
> the rendering process before I could include it. There are a few other
> ways to approach the problem, but I'm not yet sure which one would  
> work
> out best.
>
> Sam
>
> -----Original Message-----
> From: stringtemplate-interest-bounces at antlr.org
> [mailto:stringtemplate-interest-bounces at antlr.org] On Behalf Of  
> Vincent
> DARON
> Sent: Thursday, October 22, 2009 10:12 AM
> To: stringtemplate-interest at antlr.org
> Subject: [stringtemplate-interest] IAttributeRenderer and Type
> Inheritancein C#
>
> Hi
>
> I would like to be able to register an IAttributeRenderer for objects
> implementing an Interface.
>
> Part of current implementation of GetAttributeRenderer
>
>        public virtual IAttributeRenderer GetAttributeRenderer( Type
> attributeClassType )
>        {
>            IAttributeRenderer renderer = null;
>            if ( _attributeRenderers != null )
>            {
>                if ( !_attributeRenderers.TryGetValue(
> attributeClassType, out renderer ) )
>                    renderer = null;
>            }
> // ...snip ... //
>        }
>
>
> My proposal (untested, but should be ok)
>
>        public virtual IAttributeRenderer GetAttributeRenderer( Type
> attributeClassType )
>        {
>            IAttributeRenderer renderer = null;
>            if ( _attributeRenderers != null )
>            {
> 		foreach(Type key in _attributeRenderers.Keys)
> 		{
> 			if(key.IsAssignableFrom(attributeClassType))
> 			{
> 				renderer = _attributeRenderers[key];
> 				break;
> 			}
> 		}
>            }
> // ...snip ... //
>        }
>
>
> It will allow to register Attribute Renderer for objects implementing
> interfaces
>
>    RegisterAttributeRenderer(typeof(IFormatProvider), ...);
>
> Goot idea ?
>
> Second question, is it possible to have access to source using Source
> Control (Subversion, Hg, Git, ...) ? It would be far easier to test  
> and
> create patches.
>
> Thanks for answer/comments
>
> Vincent
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest


From vdaron at ask.be  Thu Oct 22 12:23:12 2009
From: vdaron at ask.be (Vincent DARON)
Date: Thu, 22 Oct 2009 21:23:12 +0200
Subject: [stringtemplate-interest] IAttributeRenderer and
 Type	Inheritancein C#
In-Reply-To: <DAE8224D-ABD0-40DA-883E-8C4A650B680B@buhacoff.net>
References: <4AE0764F.4030403@ask.be>	<DD5A5D428FE040429CCDF377FAA892840152DDF1@martini.ironwillgames.com>
	<DAE8224D-ABD0-40DA-883E-8C4A650B680B@buhacoff.net>
Message-ID: <4AE0B120.7060802@ask.be>

Thanks all for your comments

I'm quite new to StringTemplate, the first need for that feature was 
internationalization of Enumerations

(All Types starting with "My" are custom classes here to ease reading)

I simply try to do

StringTemplate.SetAttributeRenderer(typeof(Enum),new MyI18nEnumRenderer());

It did'nt works and I had to do

StringTemplate.SetAttributeRenderer(typeof(MyEnum1),new 
MyI18nEnumRenderer());
StringTemplate.SetAttributeRenderer(typeof(MyEnum2),new 
MyI18nEnumRenderer());
StringTemplate.SetAttributeRenderer(typeof(MyEnum3),new 
MyI18nEnumRenderer());
...

The second need for that feature was for Formatting purposes

StringTemplate.SetAttributeRenderer(typeof(IFormatProvider),new 
MyFormatProviderRenderer());

did'nt works either...

It's after that second problem that I looked into Sources and propose my 
approach.

I do not think that it could be a speed problem, with a behavior like 
mine, people using AttributeRenderer will probably use less Renderer. 
The problem about priority is a little more embarrassing. Maybe using 2 
lists instead of a Dictionary (Type and Renderer) ? People are adding 
AttributeRenderer in the order they will be processed.

StringTemplate st = new ...

st.SetAttributeRenderer(typeof(MyClass), new MyRenderer());
st.SetAttributeRenderer(typeof(IMyInterface), new MyIRenderer());
st.SetAttributeRenderer(typeof(object), new MyDefaultRenderer());
 
st.ToString();

In this example the MyDefaultRenderer will be called for all Attributes 
that are not of type MyClass and do not implements IMyInterface. It look 
quite intuitive to me. The only difference is that the order of Setting 
Renderer matters.

It's only suggestion :-) and any other ideas to solve these "problems" 
are welcome.

Thanks,

Vincent

PS: Accessing source from trunk is possible ? How ?




Jonathan Buhacoff wrote:
> If it's integrated with the class renderers as I showed in my diff,   
> there's a little extra work to do. On the other hand,  most classes  
> only implement handful of interfaces, and since this code doesn't do  
> any string processing it will probably be fast enough.
>
> Or, if it's implemented as a separate map of renderers, then it will  
> only slow down processing if the programmer has registered any  
> interface renderers.  But that seems a little messy to me, maybe more  
> messy than the speed savings is worth.
>
> Finally, the other issue with interface renderers is priority -  as  
> proposed now, we have  no control over which renderer will be found  
> first, and if a class implements more than one interface with a  
> registered renderer, the output will be non-deterministic.  I think  
> that's a bad thing.
>
> The way to control that would be to have a complete interface to  
> manage the priority of interface renderers, or to have ST implement  
> something like  
> registerInterfaceAttributeRenderers(List<AttributeRenderer>  
> renderers);     so the programmer can specify the order of the  
> renderers.
>
> So the loop would change to iterating through the registered interface  
> renderers and checking if the value implements each one (and they  
> would be in priority order).
>
> That makes things deterministic again, and would require the use of a  
> list of interface renders separate from the map of class renderers,  
> which means only people who use interface renderers would incur any  
> performance penalty.
>
> I'm still trying to think of a case where this scheme would be better  
> than wrapping everything with an adapter and registering a renderer  
> for that, because automatically wrapping certain classes that  
> implement an interface automatically is so easy to do by subclassing  
> StringTemplate.   I'm still thinking along the lines of  
> internationalization, units of measure, stuff like that.   Vincent can  
> you provide a real world case?
>
>
> On Oct 22, 2009, at 9:45 AM, Sam Harwell wrote:
>
>   
>> Hi Vincent,
>>
>> My first thought is this changes an O(1) algorithm that has to run for
>> every rendered item into an O(n) algorithm. I would have to run this
>> through the instrumenting profiler to make sure it isn't slowing down
>> the rendering process before I could include it. There are a few other
>> ways to approach the problem, but I'm not yet sure which one would  
>> work
>> out best.
>>
>> Sam
>>
>> -----Original Message-----
>> From: stringtemplate-interest-bounces at antlr.org
>> [mailto:stringtemplate-interest-bounces at antlr.org] On Behalf Of  
>> Vincent
>> DARON
>> Sent: Thursday, October 22, 2009 10:12 AM
>> To: stringtemplate-interest at antlr.org
>> Subject: [stringtemplate-interest] IAttributeRenderer and Type
>> Inheritancein C#
>>
>> Hi
>>
>> I would like to be able to register an IAttributeRenderer for objects
>> implementing an Interface.
>>
>> Part of current implementation of GetAttributeRenderer
>>
>>        public virtual IAttributeRenderer GetAttributeRenderer( Type
>> attributeClassType )
>>        {
>>            IAttributeRenderer renderer = null;
>>            if ( _attributeRenderers != null )
>>            {
>>                if ( !_attributeRenderers.TryGetValue(
>> attributeClassType, out renderer ) )
>>                    renderer = null;
>>            }
>> // ...snip ... //
>>        }
>>
>>
>> My proposal (untested, but should be ok)
>>
>>        public virtual IAttributeRenderer GetAttributeRenderer( Type
>> attributeClassType )
>>        {
>>            IAttributeRenderer renderer = null;
>>            if ( _attributeRenderers != null )
>>            {
>> 		foreach(Type key in _attributeRenderers.Keys)
>> 		{
>> 			if(key.IsAssignableFrom(attributeClassType))
>> 			{
>> 				renderer = _attributeRenderers[key];
>> 				break;
>> 			}
>> 		}
>>            }
>> // ...snip ... //
>>        }
>>
>>
>> It will allow to register Attribute Renderer for objects implementing
>> interfaces
>>
>>    RegisterAttributeRenderer(typeof(IFormatProvider), ...);
>>
>> Goot idea ?
>>
>> Second question, is it possible to have access to source using Source
>> Control (Subversion, Hg, Git, ...) ? It would be far easier to test  
>> and
>> create patches.
>>
>> Thanks for answer/comments
>>
>> Vincent
>> _______________________________________________
>> stringtemplate-interest mailing list
>> stringtemplate-interest at antlr.org
>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>> _______________________________________________
>> stringtemplate-interest mailing list
>> stringtemplate-interest at antlr.org
>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>>     
>
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>
>   

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20091022/1c2a2d37/attachment.html 

From jonathan at buhacoff.net  Thu Oct 22 14:20:58 2009
From: jonathan at buhacoff.net (Jonathan Buhacoff)
Date: Thu, 22 Oct 2009 14:20:58 -0700
Subject: [stringtemplate-interest] IAttributeRenderer and
	Type	Inheritancein C#
In-Reply-To: <4AE0B120.7060802@ask.be>
References: <4AE0764F.4030403@ask.be>	<DD5A5D428FE040429CCDF377FAA892840152DDF1@martini.ironwillgames.com>
	<DAE8224D-ABD0-40DA-883E-8C4A650B680B@buhacoff.net>
	<4AE0B120.7060802@ask.be>
Message-ID: <3AA9875D-31A5-49BC-8000-AE756E177656@buhacoff.net>


On Oct 22, 2009, at 12:23 PM, Vincent DARON wrote:


> I'm quite new to StringTemplate, the first need for that feature was  
> internationalization of Enumerations
>

I know you're not using Java... In Java this is easy with  
ResourceBundle.  Find or make the equivalent in your platform ; this  
doesn't require  a modification to StringTemplate.

> (All Types starting with "My" are custom classes here to ease reading)
>
> I simply try to do
>
> StringTemplate.SetAttributeRenderer(typeof(Enum),new  
> MyI18nEnumRenderer());
>
> It did'nt works and I had to do
>
> StringTemplate.SetAttributeRenderer(typeof(MyEnum1),new  
> MyI18nEnumRenderer());
> StringTemplate.SetAttributeRenderer(typeof(MyEnum2),new  
> MyI18nEnumRenderer());
> StringTemplate.SetAttributeRenderer(typeof(MyEnum3),new  
> MyI18nEnumRenderer());
> ...
>
> The second need for that feature was for Formatting purposes
>
> StringTemplate.SetAttributeRenderer(typeof(IFormatProvider),new  
> MyFormatProviderRenderer());
>

You can create a new type MyFormattedType that implements your  
IFormatProvider interface.  Then register your  
MyFormatProviderRenderer renderer for MyFormattedType. Then wrap all  
your types that implement IFormatProvider with a MyFormattedType type  
object.  That will do what you want, and after you set it up once it's  
easy to reuse.


> did'nt works either...
>
> It's after that second problem that I looked into Sources and  
> propose my approach.
>
> I do not think that it could be a speed problem, with a behavior  
> like mine, people using AttributeRenderer will probably use less  
> Renderer. The problem about priority is a little more embarrassing.  
> Maybe using 2 lists instead of a Dictionary (Type and Renderer) ?  
> People are adding AttributeRenderer in the order they will be  
> processed.

No, people are adding AttributeRenderers in any order because they go  
in a map and the order doesn't matter.  Only the interface renderers  
would have to go in an ordered list. And in that case it's easier to  
provide an ordered List to ST with all your interface renderers  
already in it than to duplicate a list implementation in ST with add,  
remove, insertAt, etc. methods.

>
> StringTemplate st = new ...
>
> st.SetAttributeRenderer(typeof(MyClass), new MyRenderer());
> st.SetAttributeRenderer(typeof(IMyInterface), new MyIRenderer());
> st.SetAttributeRenderer(typeof(object), new MyDefaultRenderer());
>
> st.ToString();
>

I wouldn't mix the class and interface renderers;  already mentioned  
the reasons in my last post.

> In this example the MyDefaultRenderer will be called for all  
> Attributes that are not of type MyClass and do not implements  
> IMyInterface. It look quite intuitive to me. The only difference is  
> that the order of Setting Renderer matters.

I think a better way, which you can do right now, is for you to  
subclass StringTemplate and override setAttribute to automatically  
wrap your objects that implement a specific interface with a class for  
which you register a renderer.  You can handle or ignore priority  
issues and it won't require a change to StringTemplate.

>
> It's only suggestion :-) and any other ideas to solve these  
> "problems" are welcome.
>



> Thanks,
>
> Vincent
>
> PS: Accessing source from trunk is possible ? How ?
>
>
>
>
> Jonathan Buhacoff wrote:
>>
>> If it's integrated with the class renderers as I showed in my diff,
>> there's a little extra work to do. On the other hand,  most classes
>> only implement handful of interfaces, and since this code doesn't do
>> any string processing it will probably be fast enough.
>>
>> Or, if it's implemented as a separate map of renderers, then it will
>> only slow down processing if the programmer has registered any
>> interface renderers.  But that seems a little messy to me, maybe more
>> messy than the speed savings is worth.
>>
>> Finally, the other issue with interface renderers is priority -  as
>> proposed now, we have  no control over which renderer will be found
>> first, and if a class implements more than one interface with a
>> registered renderer, the output will be non-deterministic.  I think
>> that's a bad thing.
>>
>> The way to control that would be to have a complete interface to
>> manage the priority of interface renderers, or to have ST implement
>> something like
>> registerInterfaceAttributeRenderers(List<AttributeRenderer>
>> renderers);     so the programmer can specify the order of the
>> renderers.
>>
>> So the loop would change to iterating through the registered  
>> interface
>> renderers and checking if the value implements each one (and they
>> would be in priority order).
>>
>> That makes things deterministic again, and would require the use of a
>> list of interface renders separate from the map of class renderers,
>> which means only people who use interface renderers would incur any
>> performance penalty.
>>
>> I'm still trying to think of a case where this scheme would be better
>> than wrapping everything with an adapter and registering a renderer
>> for that, because automatically wrapping certain classes that
>> implement an interface automatically is so easy to do by subclassing
>> StringTemplate.   I'm still thinking along the lines of
>> internationalization, units of measure, stuff like that.   Vincent  
>> can
>> you provide a real world case?
>>
>>
>> On Oct 22, 2009, at 9:45 AM, Sam Harwell wrote:
>>
>>
>>> Hi Vincent,
>>>
>>> My first thought is this changes an O(1) algorithm that has to run  
>>> for
>>> every rendered item into an O(n) algorithm. I would have to run this
>>> through the instrumenting profiler to make sure it isn't slowing  
>>> down
>>> the rendering process before I could include it. There are a few  
>>> other
>>> ways to approach the problem, but I'm not yet sure which one would
>>> work
>>> out best.
>>>
>>> Sam
>>>
>>> -----Original Message-----
>>> From: stringtemplate-interest-bounces at antlr.org
>>> [mailto:stringtemplate-interest-bounces at antlr.org] On Behalf Of
>>> Vincent
>>> DARON
>>> Sent: Thursday, October 22, 2009 10:12 AM
>>> To: stringtemplate-interest at antlr.org
>>> Subject: [stringtemplate-interest] IAttributeRenderer and Type
>>> Inheritancein C#
>>>
>>> Hi
>>>
>>> I would like to be able to register an IAttributeRenderer for  
>>> objects
>>> implementing an Interface.
>>>
>>> Part of current implementation of GetAttributeRenderer
>>>
>>>        public virtual IAttributeRenderer GetAttributeRenderer( Type
>>> attributeClassType )
>>>        {
>>>            IAttributeRenderer renderer = null;
>>>            if ( _attributeRenderers != null )
>>>            {
>>>                if ( !_attributeRenderers.TryGetValue(
>>> attributeClassType, out renderer ) )
>>>                    renderer = null;
>>>            }
>>> // ...snip ... //
>>>        }
>>>
>>>
>>> My proposal (untested, but should be ok)
>>>
>>>        public virtual IAttributeRenderer GetAttributeRenderer( Type
>>> attributeClassType )
>>>        {
>>>            IAttributeRenderer renderer = null;
>>>            if ( _attributeRenderers != null )
>>>            {
>>> 		foreach(Type key in _attributeRenderers.Keys)
>>> 		{
>>> 			if(key.IsAssignableFrom(attributeClassType))
>>> 			{
>>> 				renderer = _attributeRenderers[key];
>>> 				break;
>>> 			}
>>> 		}
>>>            }
>>> // ...snip ... //
>>>        }
>>>
>>>
>>> It will allow to register Attribute Renderer for objects  
>>> implementing
>>> interfaces
>>>
>>>    RegisterAttributeRenderer(typeof(IFormatProvider), ...);
>>>
>>> Goot idea ?
>>>
>>> Second question, is it possible to have access to source using  
>>> Source
>>> Control (Subversion, Hg, Git, ...) ? It would be far easier to test
>>> and
>>> create patches.
>>>
>>> Thanks for answer/comments
>>>
>>> Vincent
>>> _______________________________________________
>>> stringtemplate-interest mailing list
>>> stringtemplate-interest at antlr.org
>>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>>> _______________________________________________
>>> stringtemplate-interest mailing list
>>> stringtemplate-interest at antlr.org
>>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>>>
>>
>> _______________________________________________
>> stringtemplate-interest mailing list
>> stringtemplate-interest at antlr.org
>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>>
>>
>
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20091022/84a4669e/attachment-0001.html 

From vdaron at ask.be  Thu Oct 22 15:19:13 2009
From: vdaron at ask.be (Vincent DARON)
Date: Fri, 23 Oct 2009 00:19:13 +0200
Subject: [stringtemplate-interest] IAttributeRenderer
 and	Type	Inheritancein C#
In-Reply-To: <3AA9875D-31A5-49BC-8000-AE756E177656@buhacoff.net>
References: <4AE0764F.4030403@ask.be>	<DD5A5D428FE040429CCDF377FAA892840152DDF1@martini.ironwillgames.com>	<DAE8224D-ABD0-40DA-883E-8C4A650B680B@buhacoff.net>	<4AE0B120.7060802@ask.be>
	<3AA9875D-31A5-49BC-8000-AE756E177656@buhacoff.net>
Message-ID: <4AE0DA61.9010600@ask.be>

Jonathan Buhacoff wrote:
>
> On Oct 22, 2009, at 12:23 PM, Vincent DARON wrote:
>
>
>> I'm quite new to StringTemplate, the first need for that feature was 
>> internationalization of Enumerations
>>
>
> I know you're not using Java... In Java this is easy with 
> ResourceBundle.  Find or make the equivalent in your platform ; this 
> doesn't require  a modification to StringTemplate.
Resources exists in .NET as well, this is not the problem here. using 
typeof(Enum) allow the creation of ONE AttributeRenderer for ALL the 
Enum used in my attributes.
>
>> (All Types starting with "My" are custom classes here to ease reading)
>>
>> I simply try to do
>>
>> StringTemplate.SetAttributeRenderer(typeof(Enum),new 
>> MyI18nEnumRenderer());
>>
>> It did'nt works and I had to do
>>
>> StringTemplate.SetAttributeRenderer(typeof(MyEnum1),new 
>> MyI18nEnumRenderer());
>> StringTemplate.SetAttributeRenderer(typeof(MyEnum2),new 
>> MyI18nEnumRenderer());
>> StringTemplate.SetAttributeRenderer(typeof(MyEnum3),new 
>> MyI18nEnumRenderer());
>> ...
>>
>> The second need for that feature was for Formatting purposes
>>
>> StringTemplate.SetAttributeRenderer(typeof(IFormatProvider),new 
>> MyFormatProviderRenderer());
>>
>
> You can create a new type MyFormattedType that implements your 
> IFormatProvider interface.  Then register 
> your MyFormatProviderRenderer renderer for MyFormattedType. Then wrap 
> all your types that implement IFormatProvider with a MyFormattedType 
> type object.  That will do what you want, and after you set it up once 
> it's easy to reuse.
>

This is maybe specific to .NET as well, IFormattable for example, is an 
interface that is implemented by all the basic types (int, string, 
Datetime , ...) to specify what is the formatting to use when calling 
the method ToString().

When I'm using StringTemplate, I'm using Graph objects as Attributes :

class Address{
    public string Street;
    public int Number;
    ...
}

class Person{
    public string Name;
    public Address Address;
}


in my template there are plenty of call to $Person.Name$ or 
$Person.Address.Street$
 
It's not possible to wrap all types that implement IFormatProvider (wrap 
"int" or "string" ?)

>
>> did'nt works either...
>>
>> It's after that second problem that I looked into Sources and propose 
>> my approach.
>>
>> I do not think that it could be a speed problem, with a behavior like 
>> mine, people using AttributeRenderer will probably use less Renderer. 
>> The problem about priority is a little more embarrassing. Maybe using 
>> 2 lists instead of a Dictionary (Type and Renderer) ? People are 
>> adding AttributeRenderer in the order they will be processed.
>
> No, people are adding AttributeRenderers in any order because they go 
> in a map and the order doesn't matter.  Only the interface renderers 
> would have to go in an ordered list. And in that case it's easier to 
> provide an ordered List to ST with all your interface renderers 
> already in it than to duplicate a list implementation in ST with add, 
> remove, insertAt, etc. methods.
Users of StringTemplate shouldn't be aware that it's a map behind ;-). 
But you're right, using a list may break the code of some people.
>
>>
>> StringTemplate st = new ...
>>
>> st.SetAttributeRenderer(typeof(MyClass), new MyRenderer());
>> st.SetAttributeRenderer(typeof(IMyInterface), new MyIRenderer());
>> st.SetAttributeRenderer(typeof(object), new MyDefaultRenderer());
>>  
>> st.ToString();
>>
>
> I wouldn't mix the class and interface renderers;  already mentioned 
> the reasons in my last post. 
>
>> In this example the MyDefaultRenderer will be called for all 
>> Attributes that are not of type MyClass and do not implements 
>> IMyInterface. It look quite intuitive to me. The only difference is 
>> that the order of Setting Renderer matters.
>
> I think a better way, which you can do right now, is for you to 
> subclass StringTemplate and override setAttribute to automatically 
> wrap your objects that implement a specific interface with a class for 
> which you register a renderer.  You can handle or ignore priority 
> issues and it won't require a change to StringTemplate.
Again, it's not possible to wrap object graph easily.

It seems that my proposition is maybe too much .NET oriented.

Thanks for answers and precisions.

Vincent

>
>>
>> It's only suggestion :-) and any other ideas to solve these 
>> "problems" are welcome.
>>
>
>
>
>> Thanks,
>>
>> Vincent
>>
>> PS: Accessing source from trunk is possible ? How ?
>>
>>
>>
>>
>> Jonathan Buhacoff wrote:
>>> If it's integrated with the class renderers as I showed in my diff,   
>>> there's a little extra work to do. On the other hand,  most classes  
>>> only implement handful of interfaces, and since this code doesn't do  
>>> any string processing it will probably be fast enough.
>>>
>>> Or, if it's implemented as a separate map of renderers, then it will  
>>> only slow down processing if the programmer has registered any  
>>> interface renderers.  But that seems a little messy to me, maybe more  
>>> messy than the speed savings is worth.
>>>
>>> Finally, the other issue with interface renderers is priority -  as  
>>> proposed now, we have  no control over which renderer will be found  
>>> first, and if a class implements more than one interface with a  
>>> registered renderer, the output will be non-deterministic.  I think  
>>> that's a bad thing.
>>>
>>> The way to control that would be to have a complete interface to  
>>> manage the priority of interface renderers, or to have ST implement  
>>> something like  
>>> registerInterfaceAttributeRenderers(List<AttributeRenderer>  
>>> renderers);     so the programmer can specify the order of the  
>>> renderers.
>>>
>>> So the loop would change to iterating through the registered interface  
>>> renderers and checking if the value implements each one (and they  
>>> would be in priority order).
>>>
>>> That makes things deterministic again, and would require the use of a  
>>> list of interface renders separate from the map of class renderers,  
>>> which means only people who use interface renderers would incur any  
>>> performance penalty.
>>>
>>> I'm still trying to think of a case where this scheme would be better  
>>> than wrapping everything with an adapter and registering a renderer  
>>> for that, because automatically wrapping certain classes that  
>>> implement an interface automatically is so easy to do by subclassing  
>>> StringTemplate.   I'm still thinking along the lines of  
>>> internationalization, units of measure, stuff like that.   Vincent can  
>>> you provide a real world case?
>>>
>>>
>>> On Oct 22, 2009, at 9:45 AM, Sam Harwell wrote:
>>>
>>>   
>>>> Hi Vincent,
>>>>
>>>> My first thought is this changes an O(1) algorithm that has to run for
>>>> every rendered item into an O(n) algorithm. I would have to run this
>>>> through the instrumenting profiler to make sure it isn't slowing down
>>>> the rendering process before I could include it. There are a few other
>>>> ways to approach the problem, but I'm not yet sure which one would  
>>>> work
>>>> out best.
>>>>
>>>> Sam
>>>>
>>>> -----Original Message-----
>>>> From: stringtemplate-interest-bounces at antlr.org
>>>> [mailto:stringtemplate-interest-bounces at antlr.org] On Behalf Of  
>>>> Vincent
>>>> DARON
>>>> Sent: Thursday, October 22, 2009 10:12 AM
>>>> To: stringtemplate-interest at antlr.org
>>>> Subject: [stringtemplate-interest] IAttributeRenderer and Type
>>>> Inheritancein C#
>>>>
>>>> Hi
>>>>
>>>> I would like to be able to register an IAttributeRenderer for objects
>>>> implementing an Interface.
>>>>
>>>> Part of current implementation of GetAttributeRenderer
>>>>
>>>>        public virtual IAttributeRenderer GetAttributeRenderer( Type
>>>> attributeClassType )
>>>>        {
>>>>            IAttributeRenderer renderer = null;
>>>>            if ( _attributeRenderers != null )
>>>>            {
>>>>                if ( !_attributeRenderers.TryGetValue(
>>>> attributeClassType, out renderer ) )
>>>>                    renderer = null;
>>>>            }
>>>> // ...snip ... //
>>>>        }
>>>>
>>>>
>>>> My proposal (untested, but should be ok)
>>>>
>>>>        public virtual IAttributeRenderer GetAttributeRenderer( Type
>>>> attributeClassType )
>>>>        {
>>>>            IAttributeRenderer renderer = null;
>>>>            if ( _attributeRenderers != null )
>>>>            {
>>>> 		foreach(Type key in _attributeRenderers.Keys)
>>>> 		{
>>>> 			if(key.IsAssignableFrom(attributeClassType))
>>>> 			{
>>>> 				renderer = _attributeRenderers[key];
>>>> 				break;
>>>> 			}
>>>> 		}
>>>>            }
>>>> // ...snip ... //
>>>>        }
>>>>
>>>>
>>>> It will allow to register Attribute Renderer for objects implementing
>>>> interfaces
>>>>
>>>>    RegisterAttributeRenderer(typeof(IFormatProvider), ...);
>>>>
>>>> Goot idea ?
>>>>
>>>> Second question, is it possible to have access to source using Source
>>>> Control (Subversion, Hg, Git, ...) ? It would be far easier to test  
>>>> and
>>>> create patches.
>>>>
>>>> Thanks for answer/comments
>>>>
>>>> Vincent
>>>> _______________________________________________
>>>> stringtemplate-interest mailing list
>>>> stringtemplate-interest at antlr.org
>>>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>>>> _______________________________________________
>>>> stringtemplate-interest mailing list
>>>> stringtemplate-interest at antlr.org
>>>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>>>>     
>>>
>>> _______________________________________________
>>> stringtemplate-interest mailing list
>>> stringtemplate-interest at antlr.org
>>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>>>
>>>   
>>
>> _______________________________________________
>> stringtemplate-interest mailing list
>> stringtemplate-interest at antlr.org 
>> <mailto:stringtemplate-interest at antlr.org>
>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>
> ------------------------------------------------------------------------
>
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>   

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20091023/a9cb437d/attachment.html 

From sharwell at pixelminegames.com  Thu Oct 22 21:10:57 2009
From: sharwell at pixelminegames.com (Sam Harwell)
Date: Thu, 22 Oct 2009 23:10:57 -0500
Subject: [stringtemplate-interest] IAttributeRenderer
	and	Type	Inheritancein C#
References: <4AE0764F.4030403@ask.be>	<DD5A5D428FE040429CCDF377FAA892840152DDF1@martini.ironwillgames.com>	<DAE8224D-ABD0-40DA-883E-8C4A650B680B@buhacoff.net>	<4AE0B120.7060802@ask.be><3AA9875D-31A5-49BC-8000-AE756E177656@buhacoff.net>
	<4AE0DA61.9010600@ask.be>
Message-ID: <DD5A5D428FE040429CCDF377FAA892840152DDF2@martini.ironwillgames.com>

Hi Vincent and Jonathan,

 

I can't tell who said what here due to the way your editors formatted
the text. I thought about a possible solution to the performance
problems I mentioned, but I don't think it will be viable. I thought
about always caching the results of the lookup, so object interfaces
would only need to be checked the first time a type was used in a
template. Unfortunately, due to the way templates inherit attribute
renderers, several problems emerge:

 

1.       Caching the renderers would result in a copy of all
type->renderer maps in every template, incurring both a space and time
overhead.

2.       Caching the renderers would break the attribute renderer
inheritance scheme.

3.       Not caching the renderers would mean checking all interface
base types and interfaces while walking up the template inheritance
chain. This would be a more substantial hit than GetAttribute, likely
more than doubling the time required to render templates. I'll profile
this to make sure, but if my analysis proves correct the feature will
have to be completely reengineered before we could talk about
incorporating it into the library.

 

Sam

 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20091022/c9f14a6f/attachment-0001.html 

From vdaron at ask.be  Thu Oct 22 23:42:34 2009
From: vdaron at ask.be (Vincent DARON)
Date: Fri, 23 Oct 2009 08:42:34 +0200
Subject: [stringtemplate-interest] IAttributeRenderer
 and	Type	Inheritancein C#
In-Reply-To: <DD5A5D428FE040429CCDF377FAA892840152DDF2@martini.ironwillgames.com>
References: <4AE0764F.4030403@ask.be>	<DD5A5D428FE040429CCDF377FAA892840152DDF1@martini.ironwillgames.com>	<DAE8224D-ABD0-40DA-883E-8C4A650B680B@buhacoff.net>	<4AE0B120.7060802@ask.be><3AA9875D-31A5-49BC-8000-AE756E177656@buhacoff.net>
	<4AE0DA61.9010600@ask.be>
	<DD5A5D428FE040429CCDF377FAA892840152DDF2@martini.ironwillgames.com>
Message-ID: <4AE1505A.80305@ask.be>

Hi Jonathan and Sam,

The use of  Type.IsAssignableFrom()) on the .NET framework is maybe 
faster that getInterfaces() methods of Java.

Even if benchmarks are ok, the "problem" of the order of insertion of 
AttributeRenderer remains. Current version use a Map to store 
AttributeRenderer, allowing interfaces will need to process 
AttributeRenderer in a fixed/known order.

Do you have some benchmark data/application ?
How can I checkout the last version of sources to test it by myself ?

Thanks

Vincent


Sam Harwell wrote:
>
> Hi Vincent and Jonathan,
>
>  
>
> I can't tell who said what here due to the way your editors formatted 
> the text. I thought about a possible solution to the performance 
> problems I mentioned, but I don't think it will be viable. I thought 
> about always caching the results of the lookup, so object interfaces 
> would only need to be checked the first time a type was used in a 
> template. Unfortunately, due to the way templates inherit attribute 
> renderers, several problems emerge:
>
>  
>
> 1.       Caching the renderers would result in a copy of all 
> type->renderer maps in every template, incurring both a space and time 
> overhead.
>
> 2.       Caching the renderers would break the attribute renderer 
> inheritance scheme.
>
> 3.       /Not/ caching the renderers would mean checking all interface 
> base types and interfaces while walking up the template inheritance 
> chain. This would be a more substantial hit than GetAttribute, likely 
> more than doubling the time required to render templates. I'll profile 
> this to make sure, but if my analysis proves correct the feature will 
> have to be completely reengineered before we could talk about 
> incorporating it into the library.
>
>  
>
> Sam
>
>  
>

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20091023/9b71c7be/attachment.html 

From Nicola.Musatti at objectway.it  Fri Oct 23 06:15:53 2009
From: Nicola.Musatti at objectway.it (Nicola Musatti)
Date: Fri, 23 Oct 2009 15:15:53 +0200
Subject: [stringtemplate-interest] bug: Colon as dir separator doesn't work
	on Windows
Message-ID: <11262_1256303770_n9NDFs1q010175_4AE1AC89.8000000@ObjectWay.it>

Hallo,
I had a mysterious bug where I kept receiving messages as the following:

StringTemplate: no such group file JavaTemplate.stg

when my template group files were stored on a different drive from the 
one I was running my program from. I tracked it down to PathGroupLoader 
expecting colons as separators. Note that I only have a single directory 
in my path, but as the drive letter gets split away, my template files 
are only found when they are on the current drive.

A possible fix would be to use java.io.File.pathSeparator instead of a 
literal ":".

Cheers,
Nicola Musatti

P.S. I'm aware that PathGroupLoader works according to its specs, it's 
the specs that are broken :-)

-- 
La presente comunicazione potrebbe contenere informazioni riservate e/o protette
da segreto professionale ed e' indirizzata esclusivamente ai destinatari della
medesima qui indicati. Se avete ricevuto per errore la presente comunicazione,
siete invitati a segnalarcelo, rispondendo a questo stesso indirizzo di e-mail,
e a cancellare il presente messaggio dal Vostro sistema. E' strettamente proibito
e potrebbe essere fonte di violazione di legge qualsiasi uso, comunicazione, copia
o diffusione dei contenuti di questa comunicazione da parte di chi la abbia
ricevuta per errore o in violazione degli scopi della presente.
Il messaggio e' stato analizzato alla ricerca di virus o contenuti pericolosi
ed e' risultato NON infetto.


From parrt at cs.usfca.edu  Fri Oct 23 13:47:24 2009
From: parrt at cs.usfca.edu (Terence Parr)
Date: Fri, 23 Oct 2009 13:47:24 -0700
Subject: [stringtemplate-interest] error messages
Message-ID: <8974E993-0438-453C-BF84-8149E4E7AD8D@cs.usfca.edu>

hiya. working on identifying exact error location in group files.

group t;
foo() ::= "hi <.> mom"

Previously we'd get an error at the '.' inside the <.> but where in  
the file was it?  Now, i know everything:

line 2:10: can't parse chunk: '1:4..4:.' in hi <.> mom

i'll make that more readable but it says ST expr is one char (line 1  
in template and from char index 4 to 4 relative to the template),  
which starts at line 2, char position 10 in that line.

Ter

From zen at freedbms.net  Fri Oct 23 15:29:34 2009
From: zen at freedbms.net (Zenaan Harkness)
Date: Sat, 24 Oct 2009 09:29:34 +1100
Subject: [stringtemplate-interest] error messages
In-Reply-To: <8974E993-0438-453C-BF84-8149E4E7AD8D@cs.usfca.edu>
References: <8974E993-0438-453C-BF84-8149E4E7AD8D@cs.usfca.edu>
Message-ID: <20091023222934.GA7122@u8.ip61.upmart.info>

On Fri, Oct 23, 2009 at 01:47:24PM -0700, Terence Parr wrote:
> group t;
> foo() ::= "hi <.> mom"

> line 2:10: can't parse chunk: '1:4..4:.' in hi <.> mom

:)

Awesome! Very useful.

-- 
Free Australia: www.UPMART.org
Please respect the confidentiality of this email as sensibly warranted.

From jonathan at buhacoff.net  Fri Oct 23 16:54:50 2009
From: jonathan at buhacoff.net (Jonathan Buhacoff)
Date: Fri, 23 Oct 2009 16:54:50 -0700
Subject: [stringtemplate-interest] IAttributeRenderer
	and	Type	Inheritancein C#
In-Reply-To: <DD5A5D428FE040429CCDF377FAA892840152DDF2@martini.ironwillgames.com>
References: <4AE0764F.4030403@ask.be>	<DD5A5D428FE040429CCDF377FAA892840152DDF1@martini.ironwillgames.com>	<DAE8224D-ABD0-40DA-883E-8C4A650B680B@buhacoff.net>	<4AE0B120.7060802@ask.be><3AA9875D-31A5-49BC-8000-AE756E177656@buhacoff.net>
	<4AE0DA61.9010600@ask.be>
	<DD5A5D428FE040429CCDF377FAA892840152DDF2@martini.ironwillgames.com>
Message-ID: <B1A392DD-ED38-46B1-B7B6-71F5EA0C5927@buhacoff.net>

Hi Sam,

My last suggestion solves the performance and priority issues:

A separate method for setting a list of interface renderers

Something like:  public void setRenderers(List<AttributeRenderer>  
renderers)

Then in StringTemplate this list of renderers would be checked only if  
a class renderer wasnt found.

Performance issues would then only affect people using this feature.





Sent from my iPhone

On Oct 22, 2009, at 9:10 PM, "Sam Harwell"  
<sharwell at pixelminegames.com> wrote:

> Hi Vincent and Jonathan,
>
>
>
> I can?t tell who said what here due to the way your editors formatte 
> d the text. I thought about a possible solution to the performance p 
> roblems I mentioned, but I don?t think it will be viable. I thought  
> about always caching the results of the lookup, so object interfaces 
>  would only need to be checked the first time a type was used in a t 
> emplate. Unfortunately, due to the way templates inherit attribute r 
> enderers, several problems emerge:
>
>
>
> 1.       Caching the renderers would result in a copy of all type- 
> >renderer maps in every template, incurring both a space and time  
> overhead.
>
> 2.       Caching the renderers would break the attribute renderer  
> inheritance scheme.
>
> 3.       Not caching the renderers would mean checking all interface  
> base types and interfaces while walking up the template inheritance  
> chain. This would be a more substantial hit than GetAttribute,  
> likely more than doubling the time required to render templates. I?l 
> l profile this to make sure, but if my analysis proves correct the f 
> eature will have to be completely reengineered before we could talk  
> about incorporating it into the library.
>
>
>
> Sam
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20091023/7c4b3bff/attachment.html 

From sharwell at pixelminegames.com  Fri Oct 23 18:52:30 2009
From: sharwell at pixelminegames.com (Sam Harwell)
Date: Fri, 23 Oct 2009 20:52:30 -0500
Subject: [stringtemplate-interest] IAttributeRenderer and Type
	Inheritance in C#
References: <4AE0764F.4030403@ask.be>	<DD5A5D428FE040429CCDF377FAA892840152DDF1@martini.ironwillgames.com>	<DAE8224D-ABD0-40DA-883E-8C4A650B680B@buhacoff.net>	<4AE0B120.7060802@ask.be><3AA9875D-31A5-49BC-8000-AE756E177656@buhacoff.net><4AE0DA61.9010600@ask.be><DD5A5D428FE040429CCDF377FAA892840152DDF2@martini.ironwillgames.com>
	<B1A392DD-ED38-46B1-B7B6-71F5EA0C5927@buhacoff.net>
Message-ID: <DD5A5D428FE040429CCDF377FAA892840152DDF7@martini.ironwillgames.com>

This semi-solves one problem, but doesn?t address another at all. What if you want to add a renderer for ?[non-interface] type X and all types derived from X?? Also, it still doesn?t address the performance issue of the feature itself. Below is one way it could be implemented without changing the public interface.

 

Covered:

?         Performance when the feature is not in use

?         Registering renderers for interface type

Not covered:

?         Performance implication when a renderer is registered for an interface type

?         Registering renderers for a base type and having it also apply to derived types

 

 

    public virtual void RegisterRenderer( Type attributeClassType, IAttributeRenderer renderer )

    {

        Dictionary<Type, IAttributeRenderer> renderers;

        // renderers for interface types are kept separately due to their performance implications

        if (!attributeClassType.IsInterface)

        {

            if (_attributeRenderers == null)

                _attributeRenderers = new Dictionary<Type, IAttributeRenderer>();

 

            renderers = _attributeRenderers;

        }

        else

        {

            if (_interfaceRenderers == null)

                _interfaceRenderers = new Dictionary<Type, IAttributeRenderer>();

 

            renderers = _interfaceRenderers;

        }

 

        renderers[attributeClassType] = renderer;

    }

 

    public virtual IAttributeRenderer GetAttributeRenderer( Type attributeClassType )

    {

        IAttributeRenderer renderer = null;

        if ( _attributeRenderers != null )

        {

            if ( !_attributeRenderers.TryGetValue( attributeClassType, out renderer ) )

                renderer = null;

        }

 

        // Only need to perform the expensive interface checks if the user registered a renderer for an interface type

        if (renderer == null && _interfaceRenderers != null)

        {

            renderer = _interfaceRenderers.FirstOrDefault(pair => pair.Key.IsAssignableFrom(attributeClassType)).Value;

        }

 

        if ( renderer != null )

        {

            // found it!

            return renderer;

        }

 

        // we have no renderer overrides for the template or none for class arg

        // check parent template if we are embedded

        if ( _enclosingInstance != null )

        {

            return _enclosingInstance.GetAttributeRenderer( attributeClassType );

        }

        // else check group

        return _group.GetAttributeRenderer( attributeClassType );

    }

 

 

From: stringtemplate-interest-bounces at antlr.org [mailto:stringtemplate-interest-bounces at antlr.org] On Behalf Of Jonathan Buhacoff
Sent: Friday, October 23, 2009 6:55 PM
To: StringTemplate Mailing List
Subject: Re: [stringtemplate-interest] IAttributeRendererand Type Inheritancein C#

 

Hi Sam,

 

My last suggestion solves the performance and priority issues:

 

A separate method for setting a list of interface renderers  

 

Something like:  public void setRenderers(List<AttributeRenderer> renderers)

 

Then in StringTemplate this list of renderers would be checked only if a class renderer wasnt found.

 

Performance issues would then only affect people using this feature.

 

 

 

 


Sent from my iPhone


On Oct 22, 2009, at 9:10 PM, "Sam Harwell" <sharwell at pixelminegames.com> wrote:

	Hi Vincent and Jonathan,

	 

	I can?t tell who said what here due to the way your editors formatted the text. I thought about a possible solution to the performance problems I mentioned, but I don?t think it will be viable. I thought about always caching the results of the lookup, so object interfaces would only need to be checked the first time a type was used in a template. Unfortunately, due to the way templates inherit attribute renderers, several problems emerge:

	 

	1.       Caching the renderers would result in a copy of all type->renderer maps in every template, incurring both a space and time overhead.

	2.       Caching the renderers would break the attribute renderer inheritance scheme.

	3.       Not caching the renderers would mean checking all interface base types and interfaces while walking up the template inheritance chain. This would be a more substantial hit than GetAttribute, likely more than doubling the time required to render templates. I?ll profile this to make sure, but if my analysis proves correct the feature will have to be completely reengineered before we could talk about incorporating it into the library.

	 

	Sam

	 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20091023/bdbc3757/attachment-0001.html 

From jonathan at buhacoff.net  Sun Oct 25 15:55:40 2009
From: jonathan at buhacoff.net (Jonathan Buhacoff)
Date: Sun, 25 Oct 2009 15:55:40 -0700
Subject: [stringtemplate-interest] IAttributeRenderer and Type
	Inheritance in C#
In-Reply-To: <DD5A5D428FE040429CCDF377FAA892840152DDF7@martini.ironwillgames.com>
References: <4AE0764F.4030403@ask.be>	<DD5A5D428FE040429CCDF377FAA892840152DDF1@martini.ironwillgames.com>	<DAE8224D-ABD0-40DA-883E-8C4A650B680B@buhacoff.net>	<4AE0B120.7060802@ask.be><3AA9875D-31A5-49BC-8000-AE756E177656@buhacoff.net><4AE0DA61.9010600@ask.be><DD5A5D428FE040429CCDF377FAA892840152DDF2@martini.ironwillgames.com>
	<B1A392DD-ED38-46B1-B7B6-71F5EA0C5927@buhacoff.net>
	<DD5A5D428FE040429CCDF377FAA892840152DDF7@martini.ironwillgames.com>
Message-ID: <523F403F-023E-42CD-AB84-9C4EB56824BF@buhacoff.net>

The existing ST code already works for subclasses.  My implementation  
of the interface renderer also works for subclasses that implement the  
same interface, but not because I did anything special - we get this  
from the language itself and from the renderer implementation, if it  
uses instanceof.

I like the idea of using isInterface to automatically separate the two  
kinds of renderers for later, but then the programmer can't control  
which interface renderer will apply to a value that implements more  
than one registered interface.

If the code were changed to add to a list instead of a map/dictionary,  
the programmer could control priority but then you have the same  
performance problem that you mentioned, plus the programmer will be  
forced to register interface-based handlers in order, which is not  
consistent with the current registration interface.

If it's implemented with a map or dictionary I would warn users not to  
use values that implement more than one registered interface because  
the behavior will not be predictable. This may be the simplest route.


--
Jonathan Buhacoff
jonathan at buhacoff.net
--



On Oct 23, 2009, at 6:52 PM, Sam Harwell wrote:

> This semi-solves one problem, but doesn?t address another at all.  
> What if you want to add a renderer for ?[non-interface] type X and  
> all types derived from X?? Also, it still doesn?t address the  
> performance issue of the feature itself. Below is one way it could  
> be implemented without changing the public interface.
>
> Covered:
> ?         Performance when the feature is not in use
>
> ?         Registering renderers for interface type
>
> Not covered:
> ?         Performance implication when a renderer is registered for  
> an interface type
>
> ?         Registering renderers for a base type and having it also  
> apply to derived types
>
>
>
>     public virtual void RegisterRenderer( Type attributeClassType,  
> IAttributeRenderer renderer )
>     {
>         Dictionary<Type, IAttributeRenderer> renderers;
>         // renderers for interface types are kept separately due to  
> their performance implications
>         if (!attributeClassType.IsInterface)
>         {
>             if (_attributeRenderers == null)
>                 _attributeRenderers = new Dictionary<Type,  
> IAttributeRenderer>();
>
>             renderers = _attributeRenderers;
>         }
>         else
>         {
>             if (_interfaceRenderers == null)
>                 _interfaceRenderers = new Dictionary<Type,  
> IAttributeRenderer>();
>
>             renderers = _interfaceRenderers;
>         }
>
>         renderers[attributeClassType] = renderer;
>     }
>
>     public virtual IAttributeRenderer GetAttributeRenderer( Type  
> attributeClassType )
>     {
>         IAttributeRenderer renderer = null;
>         if ( _attributeRenderers != null )
>         {
>             if ( ! 
> _attributeRenderers.TryGetValue( attributeClassType, out renderer ) )
>                 renderer = null;
>         }
>
>         // Only need to perform the expensive interface checks if  
> the user registered a renderer for an interface type
>         if (renderer == null && _interfaceRenderers != null)
>         {
>             renderer = _interfaceRenderers.FirstOrDefault(pair =>  
> pair.Key.IsAssignableFrom(attributeClassType)).Value;
>         }
>
>         if ( renderer != null )
>         {
>             // found it!
>             return renderer;
>         }
>
>         // we have no renderer overrides for the template or none  
> for class arg
>         // check parent template if we are embedded
>         if ( _enclosingInstance != null )
>         {
>             return  
> _enclosingInstance.GetAttributeRenderer( attributeClassType );
>         }
>         // else check group
>         return _group.GetAttributeRenderer( attributeClassType );
>     }
>
>
> From: stringtemplate-interest-bounces at antlr.org [mailto:stringtemplate-interest-bounces at antlr.org 
> ] On Behalf Of Jonathan Buhacoff
> Sent: Friday, October 23, 2009 6:55 PM
> To: StringTemplate Mailing List
> Subject: Re: [stringtemplate-interest] IAttributeRendererand Type  
> Inheritancein C#
>
> Hi Sam,
>
> My last suggestion solves the performance and priority issues:
>
> A separate method for setting a list of interface renderers
>
> Something like:  public void setRenderers(List<AttributeRenderer>  
> renderers)
>
> Then in StringTemplate this list of renderers would be checked only  
> if a class renderer wasnt found.
>
> Performance issues would then only affect people using this feature.
>
>
>
>
>
> Sent from my iPhone
>
> On Oct 22, 2009, at 9:10 PM, "Sam Harwell" <sharwell at pixelminegames.com 
> > wrote:
>
> Hi Vincent and Jonathan,
>
> I can?t tell who said what here due to the way your editors  
> formatted the text. I thought about a possible solution to the  
> performance problems I mentioned, but I don?t think it will be  
> viable. I thought about always caching the results of the lookup, so  
> object interfaces would only need to be checked the first time a  
> type was used in a template. Unfortunately, due to the way templates  
> inherit attribute renderers, several problems emerge:
>
> 1.       Caching the renderers would result in a copy of all type- 
> >renderer maps in every template, incurring both a space and time  
> overhead.
>
> 2.       Caching the renderers would break the attribute renderer  
> inheritance scheme.
>
> 3.       Not caching the renderers would mean checking all interface  
> base types and interfaces while walking up the template inheritance  
> chain. This would be a more substantial hit than GetAttribute,  
> likely more than doubling the time required to render templates.  
> I?ll profile this to make sure, but if my analysis proves correct  
> the feature will have to be completely reengineered before we could  
> talk about incorporating it into the library.
>
>
> Sam
>

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20091025/09d2c25d/attachment-0001.html 

From vdaron at ask.be  Mon Oct 26 01:01:01 2009
From: vdaron at ask.be (Vincent DARON)
Date: Mon, 26 Oct 2009 09:01:01 +0100
Subject: [stringtemplate-interest] IAttributeRenderer and
 Type	Inheritance in C#
In-Reply-To: <523F403F-023E-42CD-AB84-9C4EB56824BF@buhacoff.net>
References: <4AE0764F.4030403@ask.be>	<DD5A5D428FE040429CCDF377FAA892840152DDF1@martini.ironwillgames.com>	<DAE8224D-ABD0-40DA-883E-8C4A650B680B@buhacoff.net>	<4AE0B120.7060802@ask.be><3AA9875D-31A5-49BC-8000-AE756E177656@buhacoff.net><4AE0DA61.9010600@ask.be><DD5A5D428FE040429CCDF377FAA892840152DDF2@martini.ironwillgames.com>	<B1A392DD-ED38-46B1-B7B6-71F5EA0C5927@buhacoff.net>	<DD5A5D428FE040429CCDF377FAA892840152DDF7@martini.ironwillgames.com>
	<523F403F-023E-42CD-AB84-9C4EB56824BF@buhacoff.net>
Message-ID: <4AE5573D.4090403@ask.be>

Hi Jonathan and others,

Existing C# code didn't works for subclass at the moment (Dictionary 
with Type as key). And if it works for subclasses in Java, the priority 
problem remains...

My 2 cents ..  ;-)

Thanks

Vincent


Jonathan Buhacoff wrote:
> The existing ST code already works for subclasses.  My implementation 
> of the interface renderer also works for subclasses that implement the 
> same interface, but not because I did anything special - we get this 
> from the language itself and from the renderer implementation, if it 
> uses instanceof. 
>
> I like the idea of using isInterface to automatically separate the two 
> kinds of renderers for later, but then the programmer can't control 
> which interface renderer will apply to a value that implements more 
> than one registered interface.
>
> If the code were changed to add to a list instead of a map/dictionary, 
> the programmer could control priority but then you have the same 
> performance problem that you mentioned, plus the programmer will be 
> forced to register interface-based handlers in order, which is not 
> consistent with the current registration interface.  
>
> If it's implemented with a map or dictionary I would warn users not to 
> use values that implement more than one registered interface because 
> the behavior will not be predictable. This may be the simplest route.
>
>
> --
> Jonathan Buhacoff
> jonathan at buhacoff.net <mailto:jonathan at buhacoff.net>
> --
>
>
>
> On Oct 23, 2009, at 6:52 PM, Sam Harwell wrote:
>
>> This semi-solves one problem, but doesn?t address another at all. 
>> What if you want to add a renderer for ?[non-interface] type X and 
>> all types derived from X?? Also, it still doesn?t address the 
>> performance issue of the feature itself. Below is one way it could be 
>> implemented without changing the public interface.
>>  
>> Covered:
>>
>> ?         Performance when the feature is not in use
>>
>> ?         Registering renderers for interface type
>>
>> Not covered:
>>
>> ?         Performance implication when a renderer is registered for 
>> an interface type
>>
>> ?         Registering renderers for a base type and having it also 
>> apply to derived types
>>
>>  
>>  
>>     public virtual void RegisterRenderer( Type attributeClassType, IAttributeRenderer renderer 
>> )
>>     {
>>         Dictionary<Type, IAttributeRenderer> renderers;
>>         // renderers for interface types are kept separately due to 
>> their performance implications
>>         if (!attributeClassType.IsInterface)
>>         {
>>             if (_attributeRenderers == null)
>>                 _attributeRenderers 
>> = new Dictionary<Type, IAttributeRenderer>();
>>  
>>             renderers = _attributeRenderers;
>>         }
>>         else
>>         {
>>             if (_interfaceRenderers == null)
>>                 _interfaceRenderers 
>> = new Dictionary<Type, IAttributeRenderer>();
>>  
>>             renderers = _interfaceRenderers;
>>         }
>>  
>>         renderers[attributeClassType] = renderer;
>>     }
>>  
>>     public virtual IAttributeRenderer GetAttributeRenderer( Type attributeClassType 
>> )
>>     {
>>         IAttributeRenderer renderer = null;
>>         if ( _attributeRenderers != null )
>>         {
>>             if ( !_attributeRenderers.TryGetValue( 
>> attributeClassType, out renderer ) )
>>                 renderer = null;
>>         }
>>  
>>         // Only need to perform the expensive interface checks if the 
>> user registered a renderer for an interface type
>>         if (renderer == null && _interfaceRenderers != null)
>>         {
>>             renderer = _interfaceRenderers.FirstOrDefault(pair => 
>> pair.Key.IsAssignableFrom(attributeClassType)).Value;
>>         }
>>  
>>         if ( renderer != null )
>>         {
>>             // found it!
>>             return renderer;
>>         }
>>  
>>         // we have no renderer overrides for the template or none for 
>> class arg
>>         // check parent template if we are embedded
>>         if ( _enclosingInstance != null )
>>         {
>>             return _enclosingInstance.GetAttributeRenderer( 
>> attributeClassType );
>>         }
>>         // else check group
>>         return _group.GetAttributeRenderer( attributeClassType );
>>     }
>>  
>>  
>> *From:* stringtemplate-interest-bounces at antlr.org 
>> <mailto:stringtemplate-interest-bounces at antlr.org> [mailto:stringtemplate-interest-bounces at antlr.org] *On 
>> Behalf Of *Jonathan Buhacoff
>> *Sent:* Friday, October 23, 2009 6:55 PM
>> *To:* StringTemplate Mailing List
>> *Subject:* Re: [stringtemplate-interest] IAttributeRendererand Type 
>> Inheritancein C#
>>  
>> Hi Sam,
>>  
>> My last suggestion solves the performance and priority issues:
>>  
>> A separate method for setting a list of interface renderers  
>>  
>> Something like:  public void setRenderers(List<AttributeRenderer> 
>> renderers)
>>  
>> Then in StringTemplate this list of renderers would be checked only 
>> if a class renderer wasnt found.
>>  
>> Performance issues would then only affect people using this feature.
>>  
>>  
>>  
>>  
>>
>> Sent from my iPhone
>>
>>
>> On Oct 22, 2009, at 9:10 PM, "Sam Harwell" 
>> <sharwell at pixelminegames.com <mailto:sharwell at pixelminegames.com>> wrote:
>>
>>     Hi Vincent and Jonathan,
>>      
>>     I can?t tell who said what here due to the way your editors
>>     formatted the text. I thought about a possible solution to the
>>     performance problems I mentioned, but I don?t think it will be
>>     viable. I thought about always caching the results of the lookup,
>>     so object interfaces would only need to be checked the first time
>>     a type was used in a template. Unfortunately, due to the way
>>     templates inherit attribute renderers, several problems emerge:
>>      
>>
>>     1.       Caching the renderers would result in a copy of all
>>     type->renderer maps in every template, incurring both a space and
>>     time overhead.
>>
>>     2.       Caching the renderers would break the attribute renderer
>>     inheritance scheme.
>>
>>     3.       /Not/ caching the renderers would mean checking all
>>     interface base types and interfaces while walking up the template
>>     inheritance chain. This would be a more substantial hit than
>>     GetAttribute, likely more than doubling the time required to
>>     render templates. I?ll profile this to make sure, but if my
>>     analysis proves correct the feature will have to be completely
>>     reengineered before we could talk about incorporating it into the
>>     library.
>>
>>      
>>     Sam
>>      
>>
>
> ------------------------------------------------------------------------
>
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>   

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20091026/2fb758b7/attachment-0001.html 

From JBrain at Aegonusa.com  Mon Oct 26 10:33:09 2009
From: JBrain at Aegonusa.com (Brain, Jim)
Date: Mon, 26 Oct 2009 12:33:09 -0500
Subject: [stringtemplate-interest] Newbie question
Message-ID: <052CE3453BFE664DB4C2AD0B8BECC34805D6FB7DBD@crexmail01.us.aegon.com>

I'm a recent ST user, but I've successfully integrated ST into my project (a Template-based XML schema code generator).  I have, though, noticed some things that are not intuitive, even after reading the documentation.

Autoindent?

            StringTemplate st = new StringTemplate("    $reader:{$it$\n\n}$    $writer:{$it$\n\n}$    stuff");
            st.setAttribute("reader", "line1");
            st.setAttribute("reader", "line2");
            st.setAttribute("writer", "line3");
            st.setAttribute("writer", "line4");
            System.out.println(st.toString());

Spits out:

    line1

    line2

    line3

line4

    stuff

I know I'm falling victim to this: "Indentation can only occur at the start of a line so indentation is only tracked in front of attribute expressions following a newline.".  However, adding a newline in front of the second indentation adds an unwanted newline in the resulting code, and it seems problematic to go to a [$reader,$writer] construct to avoid the issue.  Is there a reason why indent cannot be tracked from the end of the last function?

Jim

--
Jim Brain, AFP Architecture, 319-355-2070

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20091026/dd16b328/attachment.html 

From parrt at cs.usfca.edu  Mon Oct 26 10:40:06 2009
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon, 26 Oct 2009 10:40:06 -0700
Subject: [stringtemplate-interest] Newbie question
In-Reply-To: <052CE3453BFE664DB4C2AD0B8BECC34805D6FB7DBD@crexmail01.us.aegon.com>
References: <052CE3453BFE664DB4C2AD0B8BECC34805D6FB7DBD@crexmail01.us.aegon.com>
Message-ID: <8185211C-4086-4863-AE81-8C2FA6635F52@cs.usfca.edu>


On Oct 26, 2009, at 10:33 AM, Brain, Jim wrote:

> I?m a recent ST user, but I?ve successfully integrated ST into my  
> project (a Template-based XML schema code generator).  I have,  
> though, noticed some things that are not intuitive, even after  
> reading the documentation.
>
> Autoindent?
>
>             StringTemplate st = new StringTemplate("    $reader:{$it$ 
> \n\n}$    $writer:{$it$\n\n}$    stuff");

perhaps you want to use wrap?

> I know I?m falling victim to this: ?Indentation can only occur at  
> the start of a line so indentation is only tracked in front of  
> attribute expressions following a newline.".  However, adding a  
> newline in front of the second indentation adds an unwanted newline  
> in the resulting code, and it seems problematic to go to a [$reader, 
> $writer] construct to avoid the issue.  Is there a reason why indent  
> cannot be tracked from the end of the last function?

Yep, since it can't compute statically if a \n occurs inside.

Ter

From JBrain at Aegonusa.com  Mon Oct 26 10:55:01 2009
From: JBrain at Aegonusa.com (Brain, Jim)
Date: Mon, 26 Oct 2009 12:55:01 -0500
Subject: [stringtemplate-interest] Newbie question
In-Reply-To: <8185211C-4086-4863-AE81-8C2FA6635F52@cs.usfca.edu>
References: <052CE3453BFE664DB4C2AD0B8BECC34805D6FB7DBD@crexmail01.us.aegon.com>
	<8185211C-4086-4863-AE81-8C2FA6635F52@cs.usfca.edu>
Message-ID: <052CE3453BFE664DB4C2AD0B8BECC34805D6FB7E2E@crexmail01.us.aegon.com>

> perhaps you want to use wrap?

I can, though if I can't use autoindent, I'd rather do something like:

$reader;indent='    ':{$it$
}$

That way I don't have to try to keep the initial indent and the wrap in sync manually.


> Yep, since it can't compute statically if a \n occurs inside.

Ah, makes sense.

Jim


From rantav at gmail.com  Mon Oct 26 22:46:28 2009
From: rantav at gmail.com (Ran Tavory)
Date: Tue, 27 Oct 2009 07:46:28 +0200
Subject: [stringtemplate-interest] Formal parameters in web templates
Message-ID: <e4b4609b0910262246w56848d6dibde7e0557c9c66dd@mail.gmail.com>

A newbe question: Is it possible to define the list of formal parameters in
a template where my use case would be for a web page?

For example, in this template:

layout.st

<html>
<head>
<title>$title$</title>
<body>
$banner()$
<hr>
$body()$
</body>
</html>


I'd like to say that *$title$* is a required parameter. Would even be better
if types can be enforced, such as String, Number, Date, List of x etc, but
even without static typing, simply listing the formal arguments the template
expects would be great.
Thanks!
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20091027/43c68bea/attachment.html 

From jimi at temporal-wave.com  Tue Oct 27 06:13:11 2009
From: jimi at temporal-wave.com (Jim Idle)
Date: Tue, 27 Oct 2009 06:13:11 -0700
Subject: [stringtemplate-interest] Formal parameters in web templates
In-Reply-To: <e4b4609b0910262246w56848d6dibde7e0557c9c66dd@mail.gmail.com>
Message-ID: <346952c3eb647043866023ed3faa1475@temporal-wave.com>

That is a function of the model (or possibly controller I suppose), not the view. The view just renders what it is given and can tell if some attributes are not present but that is about it. To enforce what you want, you need to implement some method in your model that is called to populate the view. The controller or model can then enforce what you are asking. In other words, do not crate the template directly, but via an external method that requires parameters , enforces types and throws requisite exceptions.

 

Jim

 

 

 

From: stringtemplate-interest-bounces at antlr.org [mailto:stringtemplate-interest-bounces at antlr.org] On Behalf Of Ran Tavory
Sent: Monday, October 26, 2009 10:46 PM
To: stringtemplate-interest at antlr.org
Subject: [stringtemplate-interest] Formal parameters in web templates

 

A newbe question: Is it possible to define the list of formal parameters in a template where my use case would be for a web page?

 

For example, in this template:

 

layout.st

 
<html>
<head>
<title>$title$</title>
<body>
$banner()$
<hr>
$body()$
</body>
</html>


I'd like to say that $title$ is a required parameter. Would even be better if types can be enforced, such as String, Number, Date, List of x etc, but even without static typing, simply listing the formal arguments the template expects would be great.

Thanks!



-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20091027/2ca21a68/attachment.html 

From rantav at gmail.com  Tue Oct 27 06:39:25 2009
From: rantav at gmail.com (Ran Tavory)
Date: Tue, 27 Oct 2009 15:39:25 +0200
Subject: [stringtemplate-interest] Formal parameters in web templates
In-Reply-To: <346952c3eb647043866023ed3faa1475@temporal-wave.com>
References: <e4b4609b0910262246w56848d6dibde7e0557c9c66dd@mail.gmail.com>
	<346952c3eb647043866023ed3faa1475@temporal-wave.com>
Message-ID: <e4b4609b0910270639j56f5fa0di94c1b3ec01f4ab4f@mail.gmail.com>

Hi Jim, thanks for the reply, but...
As a web designer, if I have two templates, one of them is layout.st and the
other is page.st.

layout.st

<html>
<head>
<title>$title$</title>
<body>
$banner()$
<hr>
$body()$
</body>
</html>


page.st:

$layout(title="My Title")$


How can I tell what's expected by layout.st? Of course, I can always
document that, but it'd be nicer if there was a formal way to do it (tools
could also use it to hint users).
I'm not sure I understand why you say this should be a function of the model
or of the controller.  I don't view this is a "pull" by the view, rather as
"what can be pushed" to the view.
At runtime, the view can always complain if some attributes are missing, but
what would even be nicer is if even before runtime, while editing the files,
I'd be able to tell whether something's missing or not.

Thanks!


On Tue, Oct 27, 2009 at 3:13 PM, Jim Idle <jimi at temporal-wave.com> wrote:

>  That is a function of the model (or possibly controller I suppose), not
> the view. The view just renders what it is given and can tell if some
> attributes are not present but that is about it. To enforce what you want,
> you need to implement some method in your model that is called to populate
> the view. The controller or model can then enforce what you are asking. In
> other words, do not crate the template directly, but via an external method
> that requires parameters , enforces types and throws requisite exceptions.
>
>
>
> Jim
>
>
>
>
>
>
>
> *From:* stringtemplate-interest-bounces at antlr.org [mailto:
> stringtemplate-interest-bounces at antlr.org] *On Behalf Of *Ran Tavory
> *Sent:* Monday, October 26, 2009 10:46 PM
> *To:* stringtemplate-interest at antlr.org
> *Subject:* [stringtemplate-interest] Formal parameters in web templates
>
>
>
> A newbe question: Is it possible to define the list of formal parameters in
> a template where my use case would be for a web page?
>
>
>
> For example, in this template:
>
>
>
> layout.st
>
>
>
> <html>
>
> <head>
>
> <title>$title$</title>
>
> <body>
>
> $banner()$
>
> <hr>
>
> $body()$
>
> </body>
>
> </html>
>
>
> I'd like to say that *$title$* is a required parameter. Would even be
> better if types can be enforced, such as String, Number, Date, List of x
> etc, but even without static typing, simply listing the formal arguments the
> template expects would be great.
>
> Thanks!
>
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20091027/c21ed43a/attachment.html 

From todd.tstout at gmail.com  Tue Oct 27 06:47:35 2009
From: todd.tstout at gmail.com (Todd Stout)
Date: Tue, 27 Oct 2009 08:47:35 -0500
Subject: [stringtemplate-interest] Formal parameters in web templates
In-Reply-To: <e4b4609b0910270639j56f5fa0di94c1b3ec01f4ab4f@mail.gmail.com>
References: <e4b4609b0910262246w56848d6dibde7e0557c9c66dd@mail.gmail.com>
	<346952c3eb647043866023ed3faa1475@temporal-wave.com>
	<e4b4609b0910270639j56f5fa0di94c1b3ec01f4ab4f@mail.gmail.com>
Message-ID: <ce8c4d5d0910270647p50d417e5t3f3a92150c7d6c43@mail.gmail.com>

I think StringTemplate's support of group interfaces is what you are looking
for.  Take a look here:
http://www.antlr.org/wiki/display/ST/Group+Files#GroupFiles-Supergroupsandinterfaces
.

On Tue, Oct 27, 2009 at 8:39 AM, Ran Tavory <rantav at gmail.com> wrote:

> Hi Jim, thanks for the reply, but...
> As a web designer, if I have two templates, one of them is layout.st and
> the other is page.st.
>
> layout.st
>
> <html>
> <head>
> <title>$title$</title>
> <body>
> $banner()$
> <hr>
> $body()$
> </body>
> </html>
>
>
> page.st:
>
> $layout(title="My Title")$
>
>
> How can I tell what's expected by layout.st? Of course, I can always
> document that, but it'd be nicer if there was a formal way to do it (tools
> could also use it to hint users).
> I'm not sure I understand why you say this should be a function of the
> model or of the controller.  I don't view this is a "pull" by the view,
> rather as "what can be pushed" to the view.
> At runtime, the view can always complain if some attributes are missing,
> but what would even be nicer is if even before runtime, while editing the
> files, I'd be able to tell whether something's missing or not.
>
> Thanks!
>
>
> On Tue, Oct 27, 2009 at 3:13 PM, Jim Idle <jimi at temporal-wave.com> wrote:
>
>>  That is a function of the model (or possibly controller I suppose), not
>> the view. The view just renders what it is given and can tell if some
>> attributes are not present but that is about it. To enforce what you want,
>> you need to implement some method in your model that is called to populate
>> the view. The controller or model can then enforce what you are asking. In
>> other words, do not crate the template directly, but via an external method
>> that requires parameters , enforces types and throws requisite exceptions.
>>
>>
>>
>> Jim
>>
>>
>>
>>
>>
>>
>>
>> *From:* stringtemplate-interest-bounces at antlr.org [mailto:
>> stringtemplate-interest-bounces at antlr.org] *On Behalf Of *Ran Tavory
>> *Sent:* Monday, October 26, 2009 10:46 PM
>> *To:* stringtemplate-interest at antlr.org
>> *Subject:* [stringtemplate-interest] Formal parameters in web templates
>>
>>
>>
>> A newbe question: Is it possible to define the list of formal parameters
>> in a template where my use case would be for a web page?
>>
>>
>>
>> For example, in this template:
>>
>>
>>
>> layout.st
>>
>>
>>
>> <html>
>>
>> <head>
>>
>> <title>$title$</title>
>>
>> <body>
>>
>> $banner()$
>>
>> <hr>
>>
>> $body()$
>>
>> </body>
>>
>> </html>
>>
>>
>> I'd like to say that *$title$* is a required parameter. Would even be
>> better if types can be enforced, such as String, Number, Date, List of x
>> etc, but even without static typing, simply listing the formal arguments the
>> template expects would be great.
>>
>> Thanks!
>>
>> _______________________________________________
>> stringtemplate-interest mailing list
>> stringtemplate-interest at antlr.org
>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>>
>>
>
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20091027/16ab07b3/attachment-0001.html 

From thomas.jackson.iii at gmail.com  Tue Oct 27 06:58:31 2009
From: thomas.jackson.iii at gmail.com (Thomas Jackson)
Date: Tue, 27 Oct 2009 09:58:31 -0400
Subject: [stringtemplate-interest] Formal parameters in web templates
In-Reply-To: <e4b4609b0910262246w56848d6dibde7e0557c9c66dd@mail.gmail.com>
References: <e4b4609b0910262246w56848d6dibde7e0557c9c66dd@mail.gmail.com>
Message-ID: <4AE6FC87.2090900@gmail.com>

Are you asking for Template Reflection to see possible the attributes 
that need setting for that template?

> A newbe question: Is it possible to define the list of formal 
> parameters in a template where my use case would be for a web page?
>
> For example, in this template:
>
> layout.st <http://layout.st>
> <html>
> <head>
> <title>$title$</title>
> <body>
> $banner()$
> <hr>
> $body()$
> </body>
> </html>
>
> I'd like to say that *$title$* is a required parameter. Would even be 
> better if types can be enforced, such as String, Number, Date, List of 
> x etc, but even without static typing, simply listing the formal 
> arguments the template expects would be great.
> Thanks!
> ------------------------------------------------------------------------
>
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>   

From rantav at gmail.com  Tue Oct 27 07:00:32 2009
From: rantav at gmail.com (Ran Tavory)
Date: Tue, 27 Oct 2009 16:00:32 +0200
Subject: [stringtemplate-interest] Formal parameters in web templates
In-Reply-To: <ce8c4d5d0910270647p50d417e5t3f3a92150c7d6c43@mail.gmail.com>
References: <e4b4609b0910262246w56848d6dibde7e0557c9c66dd@mail.gmail.com>
	<346952c3eb647043866023ed3faa1475@temporal-wave.com>
	<e4b4609b0910270639j56f5fa0di94c1b3ec01f4ab4f@mail.gmail.com>
	<ce8c4d5d0910270647p50d417e5t3f3a92150c7d6c43@mail.gmail.com>
Message-ID: <e4b4609b0910270700o233b4b50xdeb36818388c0209@mail.gmail.com>

Hi Todd, I've read this page 10 times I think... ;)
Perhaps what I'm looking for is hiding in the BNF on the page, I have to
admit my BNFish is a bit rusty...
Anyhow, I see how templates such as this list their parameters:

vardef(type,name) ::= "<type> <name>;"

But I figured this sort of notation seems unnatural to web pages, so I was
wondering if there's a more appropriate web-page-friendly notation.
What also got me confused is that all ST web-page examples seem to use a
different notation style. None of them contain tokens such as ::= for
example, and none of them define the group name, so I was wondering if this
those notations are indeed equivalent.
And to mention again - I've only heard of ST 3 days ago, so this is a newbe
question, if there's something trivial I'm missing feel free to point me at
it :)


On Tue, Oct 27, 2009 at 3:47 PM, Todd Stout <todd.tstout at gmail.com> wrote:

> I think StringTemplate's support of group interfaces is what you are
> looking for.  Take a look here:
> http://www.antlr.org/wiki/display/ST/Group+Files#GroupFiles-Supergroupsandinterfaces
> .
>
>
> On Tue, Oct 27, 2009 at 8:39 AM, Ran Tavory <rantav at gmail.com> wrote:
>
>> Hi Jim, thanks for the reply, but...
>> As a web designer, if I have two templates, one of them is layout.st and
>> the other is page.st.
>>
>> layout.st
>>
>> <html>
>> <head>
>> <title>$title$</title>
>> <body>
>> $banner()$
>> <hr>
>> $body()$
>> </body>
>> </html>
>>
>>
>> page.st:
>>
>> $layout(title="My Title")$
>>
>>
>> How can I tell what's expected by layout.st? Of course, I can always
>> document that, but it'd be nicer if there was a formal way to do it (tools
>> could also use it to hint users).
>> I'm not sure I understand why you say this should be a function of the
>> model or of the controller.  I don't view this is a "pull" by the view,
>> rather as "what can be pushed" to the view.
>> At runtime, the view can always complain if some attributes are missing,
>> but what would even be nicer is if even before runtime, while editing the
>> files, I'd be able to tell whether something's missing or not.
>>
>> Thanks!
>>
>>
>> On Tue, Oct 27, 2009 at 3:13 PM, Jim Idle <jimi at temporal-wave.com> wrote:
>>
>>>  That is a function of the model (or possibly controller I suppose), not
>>> the view. The view just renders what it is given and can tell if some
>>> attributes are not present but that is about it. To enforce what you want,
>>> you need to implement some method in your model that is called to populate
>>> the view. The controller or model can then enforce what you are asking. In
>>> other words, do not crate the template directly, but via an external method
>>> that requires parameters , enforces types and throws requisite exceptions.
>>>
>>>
>>>
>>> Jim
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>> *From:* stringtemplate-interest-bounces at antlr.org [mailto:
>>> stringtemplate-interest-bounces at antlr.org] *On Behalf Of *Ran Tavory
>>> *Sent:* Monday, October 26, 2009 10:46 PM
>>> *To:* stringtemplate-interest at antlr.org
>>> *Subject:* [stringtemplate-interest] Formal parameters in web templates
>>>
>>>
>>>
>>> A newbe question: Is it possible to define the list of formal parameters
>>> in a template where my use case would be for a web page?
>>>
>>>
>>>
>>> For example, in this template:
>>>
>>>
>>>
>>> layout.st
>>>
>>>
>>>
>>> <html>
>>>
>>> <head>
>>>
>>> <title>$title$</title>
>>>
>>> <body>
>>>
>>> $banner()$
>>>
>>> <hr>
>>>
>>> $body()$
>>>
>>> </body>
>>>
>>> </html>
>>>
>>>
>>> I'd like to say that *$title$* is a required parameter. Would even be
>>> better if types can be enforced, such as String, Number, Date, List of x
>>> etc, but even without static typing, simply listing the formal arguments the
>>> template expects would be great.
>>>
>>> Thanks!
>>>
>>> _______________________________________________
>>> stringtemplate-interest mailing list
>>> stringtemplate-interest at antlr.org
>>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>>>
>>>
>>
>> _______________________________________________
>> stringtemplate-interest mailing list
>> stringtemplate-interest at antlr.org
>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>>
>>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20091027/0c720490/attachment.html 

From rantav at gmail.com  Tue Oct 27 07:02:20 2009
From: rantav at gmail.com (Ran Tavory)
Date: Tue, 27 Oct 2009 16:02:20 +0200
Subject: [stringtemplate-interest] Formal parameters in web templates
In-Reply-To: <4AE6FC87.2090900@gmail.com>
References: <e4b4609b0910262246w56848d6dibde7e0557c9c66dd@mail.gmail.com>
	<4AE6FC87.2090900@gmail.com>
Message-ID: <e4b4609b0910270702t4e67a721xaae5367e8facaccd@mail.gmail.com>

Thomas - am I asking for template reflection?
Not necessarily. I'd actually prefer if the template could declare its
formal parameters at the beginning so that someone reading it would know
what it needs without having to dig in.

On Tue, Oct 27, 2009 at 3:58 PM, Thomas Jackson <
thomas.jackson.iii at gmail.com> wrote:

> Are you asking for Template Reflection to see possible the attributes that
> need setting for that template?
>
>  A newbe question: Is it possible to define the list of formal parameters
>> in a template where my use case would be for a web page?
>>
>> For example, in this template:
>>
>> layout.st <http://layout.st>
>>
>> <html>
>> <head>
>> <title>$title$</title>
>> <body>
>> $banner()$
>> <hr>
>> $body()$
>> </body>
>> </html>
>>
>> I'd like to say that *$title$* is a required parameter. Would even be
>> better if types can be enforced, such as String, Number, Date, List of x
>> etc, but even without static typing, simply listing the formal arguments the
>> template expects would be great.
>> Thanks!
>> ------------------------------------------------------------------------
>>
>>
>> _______________________________________________
>> stringtemplate-interest mailing list
>> stringtemplate-interest at antlr.org
>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>>
>>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20091027/7cbb0492/attachment.html 

From jonathan at buhacoff.net  Tue Oct 27 08:12:48 2009
From: jonathan at buhacoff.net (Jonathan Buhacoff)
Date: Tue, 27 Oct 2009 08:12:48 -0700
Subject: [stringtemplate-interest] Formal parameters in web templates
In-Reply-To: <e4b4609b0910270702t4e67a721xaae5367e8facaccd@mail.gmail.com>
References: <e4b4609b0910262246w56848d6dibde7e0557c9c66dd@mail.gmail.com>
	<4AE6FC87.2090900@gmail.com>
	<e4b4609b0910270702t4e67a721xaae5367e8facaccd@mail.gmail.com>
Message-ID: <7473EB3F-6059-436D-97B4-934DA0D16998@buhacoff.net>

You could use something similar to javadoc...  put your formal  
arguments inside template comments $! ... !$ at the beginning of each  
template, then create a separate tool to read those and give you  
editor hints.

I use one-template-per-file like you for web sites, instead of the  
group syntax,  so I would also appreciate something like this.  I use  
Eclipse so an Eclipse plugin would be sweet.

Does anyone on the list have experience writing these?  Such a plugin  
would need settings to allow the user to specify the location of  
multiple template folders and template groups, analogous to source  
folders & jar files on a class path.

You could also write an interface file (http://www.antlr.org/wiki/display/ST/ST+condensed+--+File+syntax 
) but I think for what you're doing that will be cumbersome to maintain.


--
Jonathan Buhacoff
jonathan at buhacoff.net
--



On Oct 27, 2009, at 7:02 AM, Ran Tavory wrote:

> Thomas - am I asking for template reflection?
> Not necessarily. I'd actually prefer if the template could declare  
> its formal parameters at the beginning so that someone reading it  
> would know what it needs without having to dig in.
>
> On Tue, Oct 27, 2009 at 3:58 PM, Thomas Jackson <thomas.jackson.iii at gmail.com 
> > wrote:
> Are you asking for Template Reflection to see possible the  
> attributes that need setting for that template?
>
> A newbe question: Is it possible to define the list of formal  
> parameters in a template where my use case would be for a web page?
>
> For example, in this template:
>
> layout.st <http://layout.st>
>
> <html>
> <head>
> <title>$title$</title>
> <body>
> $banner()$
> <hr>
> $body()$
> </body>
> </html>
>
> I'd like to say that *$title$* is a required parameter. Would even  
> be better if types can be enforced, such as String, Number, Date,  
> List of x etc, but even without static typing, simply listing the  
> formal arguments the template expects would be great.
> Thanks!
> ------------------------------------------------------------------------
>
>
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>
>
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20091027/951b38b7/attachment-0001.html 

From jimi at temporal-wave.com  Tue Oct 27 08:14:15 2009
From: jimi at temporal-wave.com (Jim Idle)
Date: Tue, 27 Oct 2009 08:14:15 -0700
Subject: [stringtemplate-interest] Formal parameters in web templates
In-Reply-To: <e4b4609b0910270639j56f5fa0di94c1b3ec01f4ab4f@mail.gmail.com>
Message-ID: <5b7fa2fd036f044ca204454f9ee42c49@temporal-wave.com>

Ah, I see what you mean ? well then you can use an interface definition of the templates:

 

File: rant.sti

interface RanT;

layout(

   title  /* Document this parameter */

);

 

File: rantg.stg

group rantG implements RanT;

 

layout(title) ::= << xxxxxxx $title$ iiiiiii >>

 

But that really only enforces that interface for templates that implement it. References to templates in the group can pass in the variables or not, as they please, which is sort of the point of it all. There is currently no way to enforce the presence of a parameter (formal attribute) within an instantiation of a template.

 

Jim

 

From: Ran Tavory [mailto:rantav at gmail.com] 
Sent: Tuesday, October 27, 2009 6:39 AM
To: Jim Idle
Cc: stringtemplate-interest at antlr.org
Subject: Re: [stringtemplate-interest] Formal parameters in web templates

 

Hi Jim, thanks for the reply, but...

As a web designer, if I have two templates, one of them is layout.st and the other is page.st.

 

 <http://layout.st/> layout.st

 
<html>
<head>
<title>$title$</title>
<body>
$banner()$
<hr>
$body()$
</body>
</html>
 
 

page.st:

 
$layout(title="My Title")$

 

How can I tell what's expected by layout.st? Of course, I can always document that, but it'd be nicer if there was a formal way to do it (tools could also use it to hint users). 

I'm not sure I understand why you say this should be a function of the model or of the controller.  I don't view this is a "pull" by the view, rather as "what can be pushed" to the view.

At runtime, the view can always complain if some attributes are missing, but what would even be nicer is if even before runtime, while editing the files, I'd be able to tell whether something's missing or not.

 

Thanks!

 

 

On Tue, Oct 27, 2009 at 3:13 PM, Jim Idle <jimi at temporal-wave.com> wrote:

That is a function of the model (or possibly controller I suppose), not the view. The view just renders what it is given and can tell if some attributes are not present but that is about it. To enforce what you want, you need to implement some method in your model that is called to populate the view. The controller or model can then enforce what you are asking. In other words, do not crate the template directly, but via an external method that requires parameters , enforces types and throws requisite exceptions.

 

Jim

 

 

 

From: stringtemplate-interest-bounces at antlr.org [mailto:stringtemplate-interest-bounces at antlr.org] On Behalf Of Ran Tavory
Sent: Monday, October 26, 2009 10:46 PM
To: stringtemplate-interest at antlr.org
Subject: [stringtemplate-interest] Formal parameters in web templates

 

A newbe question: Is it possible to define the list of formal parameters in a template where my use case would be for a web page?

 

For example, in this template:

 

layout.st

 
<html>
 
<head>
<title>$title$</title>
<body>
$banner()$
<hr>
 
$body()$
</body>
</html>


I'd like to say that $title$ is a required parameter. Would even be better if types can be enforced, such as String, Number, Date, List of x etc, but even without static typing, simply listing the formal arguments the template expects would be great.

Thanks!


_______________________________________________
stringtemplate-interest mailing list
stringtemplate-interest at antlr.org
http://www.antlr.org/mailman/listinfo/stringtemplate-interest

 



-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20091027/6523c50f/attachment.html 

From parrt at cs.usfca.edu  Tue Oct 27 09:01:26 2009
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue, 27 Oct 2009 09:01:26 -0700
Subject: [stringtemplate-interest] Formal parameters in web templates
In-Reply-To: <e4b4609b0910262246w56848d6dibde7e0557c9c66dd@mail.gmail.com>
References: <e4b4609b0910262246w56848d6dibde7e0557c9c66dd@mail.gmail.com>
Message-ID: <FE1F0F59-4F05-4A12-BCE3-9896FDD4F08A@cs.usfca.edu>

Hi Ran,

You've asked 2 questions actually :)

1. Define formal args for nongroup file templates: Coming in STv4. All  
templates will require formal args even in separate files.

2. Specifying cardinality of parameters (required, optional, multi- 
valued).  It's somethng I've considered for years and have commented  
out in the code. ;)  I'm still deciding about it's use for STv4.

As for types, I think types would tie templtes too closely to the  
model.  But, i understand the desire for them.

Ter
On Oct 26, 2009, at 10:46 PM, Ran Tavory wrote:

> A newbe question: Is it possible to define the list of formal  
> parameters in a template where my use case would be for a web page?
>
> For example, in this template:
>
> layout.st
> <html>
> <head>
> <title>$title$</title>
> <body>
> $banner()$
> <hr>
> $body()$
> </body>
> </html>
>
> I'd like to say that $title$ is a required parameter. Would even be  
> better if types can be enforced, such as String, Number, Date, List  
> of x etc, but even without static typing, simply listing the formal  
> arguments the template expects would be great.
> Thanks!
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20091027/35dd2bf4/attachment.html 

From rantav at gmail.com  Tue Oct 27 12:39:38 2009
From: rantav at gmail.com (Ran Tavory)
Date: Tue, 27 Oct 2009 21:39:38 +0200
Subject: [stringtemplate-interest] Formal parameters in web templates
In-Reply-To: <FE1F0F59-4F05-4A12-BCE3-9896FDD4F08A@cs.usfca.edu>
References: <e4b4609b0910262246w56848d6dibde7e0557c9c66dd@mail.gmail.com>
	<FE1F0F59-4F05-4A12-BCE3-9896FDD4F08A@cs.usfca.edu>
Message-ID: <e4b4609b0910271239v24ad517qbe410b3ec3ecd04b@mail.gmail.com>

I suppose I'll wait for v4 then, thanks for the replies.

On Tue, Oct 27, 2009 at 6:01 PM, Terence Parr <parrt at cs.usfca.edu> wrote:

> Hi Ran,
>
> You've asked 2 questions actually :)
>
> 1. Define formal args for nongroup file templates: Coming in STv4. All
> templates will require formal args even in separate files.
>
> 2. Specifying cardinality of parameters (required, optional, multi-valued).
>  It's somethng I've considered for years and have commented out in the code.
> ;)  I'm still deciding about it's use for STv4.
>
> As for types, I think types would tie templtes too closely to the model.
>  But, i understand the desire for them.
>
> Ter
> On Oct 26, 2009, at 10:46 PM, Ran Tavory wrote:
>
> A newbe question: Is it possible to define the list of formal parameters in
> a template where my use case would be for a web page?
>
> For example, in this template:
>
> layout.st
>
> <html>
> <head>
> <title>$title$</title>
> <body>
> $banner()$
> <hr>
> $body()$
> </body>
> </html>
>
>
> I'd like to say that *$title$* is a required parameter. Would even be
> better if types can be enforced, such as String, Number, Date, List of x
> etc, but even without static typing, simply listing the formal arguments the
> template expects would be great.
> Thanks!
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20091027/f43aaab1/attachment.html 

From bob.ollerton at navy.mil  Thu Oct 29 13:13:11 2009
From: bob.ollerton at navy.mil (Ollerton, Robert M CIV SPAWARSYSCEN-PACIFIC,
	71120)
Date: Thu, 29 Oct 2009 12:13:11 -0800
Subject: [stringtemplate-interest] Multivalued attributes and iteration over
	inner and outer loops
Message-ID: <FBE48BFEFDEF4E41AC92A4BF7B8886896E725E@nawespscez02v.nadsuswe.nads.navy.mil>

Greetings,

I do not understand how to formulate a group of templates that can be
used to iterate over the elements in lists of lists.  I would like to
understand how to use string templates generate the same output that
this program does. For example, the following program generates this
output when given 2 and 3 as inputs:

s0
    e0 -> s0
    e1 -> s1
    e2 -> s0
s1
    e0 -> s0
    e1 -> s1
    e2 -> s0

What would a set of templates, preferably in a single group template
file, look like?

Thanks,
Bob

/**
 * The program
 */
class S {
    final String s;
    final T[] t;

    S(String s, int n) { this.s = s; t = new T[n]; }
    public String getS() { return s; }
    public T[] getT() { return t; }
    
    public String toString(){
        StringBuilder sb = new StringBuilder();
        sb.append(s);
        for (T temp: t)
            sb.append("\n    " + temp.getE()+ " -> " + temp.getD());
        return sb.toString();
    }
}
class T {
    final String e;
    final String d;

    T(String e, String d) { this.e = e; this.d = d; }
    public String getD() { return d; }
    public String getE() { return e; }
}
public class Test {
    public static void main(String[] args) {
        final int j = Integer.parseInt(args[0]);
        final int k = Integer.parseInt(args[1]);
        S[] s = new S[j];
        for (int outer = 0; outer < j; outer++) {
            s[outer] = new S("s" + outer, k);
            for (int inner = 0; inner < k; inner++) {
                s[outer].getT()[inner] = new T("e" + inner, "s"
                        + (inner % j));
            }
        }
        
        for (S v: s)
            System.out.println(v.toString());
    }
}

From parrt at cs.usfca.edu  Thu Oct 29 18:29:11 2009
From: parrt at cs.usfca.edu (Terence Parr)
Date: Thu, 29 Oct 2009 18:29:11 -0700
Subject: [stringtemplate-interest] off to korea/tokyo for a week
Message-ID: <6DF6A21D-DEF5-4540-BBE6-02E467ED6F01@cs.usfca.edu>

Hi, I'm off to recruit grad CS students for Univ. of San Francisco  
from tomorrow until Nov 6th.  I'll be even slower than usual with my  
email responses ;)
Ter

From hofmanndavid at gmail.com  Fri Oct 30 12:58:26 2009
From: hofmanndavid at gmail.com (David Hofmann)
Date: Fri, 30 Oct 2009 16:58:26 -0300
Subject: [stringtemplate-interest] Formal parameters in web templates
In-Reply-To: <e4b4609b0910271239v24ad517qbe410b3ec3ecd04b@mail.gmail.com>
References: <e4b4609b0910262246w56848d6dibde7e0557c9c66dd@mail.gmail.com>
	<FE1F0F59-4F05-4A12-BCE3-9896FDD4F08A@cs.usfca.edu>
	<e4b4609b0910271239v24ad517qbe410b3ec3ecd04b@mail.gmail.com>
Message-ID: <b32beff20910301258r4dffdaf3p38ea73bcb849131a@mail.gmail.com>

Hi Terr
Is there an estimate when st4 will be feature complete ?
Bugs does not matter :) I'll use it anyway because that is a matter of time
:)

Greetings

--
David Daniel Hofmann
WebVAS, Nucleo S.A. - Telecom Personal Paraguay
http://www.google.com/profiles/hofmanndavid





On Tue, Oct 27, 2009 at 4:39 PM, Ran Tavory <rantav at gmail.com> wrote:

> I suppose I'll wait for v4 then, thanks for the replies.
>
>
> On Tue, Oct 27, 2009 at 6:01 PM, Terence Parr <parrt at cs.usfca.edu> wrote:
>
>> Hi Ran,
>>
>> You've asked 2 questions actually :)
>>
>> 1. Define formal args for nongroup file templates: Coming in STv4. All
>> templates will require formal args even in separate files.
>>
>> 2. Specifying cardinality of parameters (required, optional,
>> multi-valued).  It's somethng I've considered for years and have commented
>> out in the code. ;)  I'm still deciding about it's use for STv4.
>>
>> As for types, I think types would tie templtes too closely to the model.
>>  But, i understand the desire for them.
>>
>> Ter
>> On Oct 26, 2009, at 10:46 PM, Ran Tavory wrote:
>>
>> A newbe question: Is it possible to define the list of formal parameters
>> in a template where my use case would be for a web page?
>>
>> For example, in this template:
>>
>> layout.st
>>
>> <html>
>> <head>
>> <title>$title$</title>
>> <body>
>> $banner()$
>> <hr>
>> $body()$
>> </body>
>> </html>
>>
>>
>> I'd like to say that *$title$* is a required parameter. Would even be
>> better if types can be enforced, such as String, Number, Date, List of x
>> etc, but even without static typing, simply listing the formal arguments the
>> template expects would be great.
>> Thanks!
>> _______________________________________________
>> stringtemplate-interest mailing list
>> stringtemplate-interest at antlr.org
>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>>
>>
>>
>
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20091030/28400def/attachment.html 

From parrt at cs.usfca.edu  Sat Oct 31 14:43:45 2009
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sat, 31 Oct 2009 14:43:45 -0700
Subject: [stringtemplate-interest] [SPAM] Re: Formal parameters in web
	templates
In-Reply-To: <b32beff20910301258r4dffdaf3p38ea73bcb849131a@mail.gmail.com>
References: <e4b4609b0910262246w56848d6dibde7e0557c9c66dd@mail.gmail.com>
	<FE1F0F59-4F05-4A12-BCE3-9896FDD4F08A@cs.usfca.edu>
	<e4b4609b0910271239v24ad517qbe410b3ec3ecd04b@mail.gmail.com>
	<b32beff20910301258r4dffdaf3p38ea73bcb849131a@mail.gmail.com>
Message-ID: <026E3FB7-4600-4732-88C0-97D59B3D78DE@cs.usfca.edu>

no real estimate but a guess would be late november you could play.   
i'm gutting the parser/lexer now since trying to add really good error  
handling was impossible with old method. I ended up having to write a  
lexer by hand.  It's highly context sensitive and even ambiguous  
(well, not semantically).

Ter
On Oct 30, 2009, at 12:58 PM, David Hofmann wrote:

> Hi Terr
> Is there an estimate when st4 will be feature complete ?
> Bugs does not matter :) I'll use it anyway because that is a matter  
> of time :)
>
> Greetings
>
> --
> David Daniel Hofmann
> WebVAS, Nucleo S.A. - Telecom Personal Paraguay
> http://www.google.com/profiles/hofmanndavid
>
>
>
>
>
> On Tue, Oct 27, 2009 at 4:39 PM, Ran Tavory <rantav at gmail.com> wrote:
> I suppose I'll wait for v4 then, thanks for the replies.
>
>
> On Tue, Oct 27, 2009 at 6:01 PM, Terence Parr <parrt at cs.usfca.edu>  
> wrote:
> Hi Ran,
>
> You've asked 2 questions actually :)
>
> 1. Define formal args for nongroup file templates: Coming in STv4.  
> All templates will require formal args even in separate files.
>
> 2. Specifying cardinality of parameters (required, optional, multi- 
> valued).  It's somethng I've considered for years and have commented  
> out in the code. ;)  I'm still deciding about it's use for STv4.
>
> As for types, I think types would tie templtes too closely to the  
> model.  But, i understand the desire for them.
>
> Ter
> On Oct 26, 2009, at 10:46 PM, Ran Tavory wrote:
>
>> A newbe question: Is it possible to define the list of formal  
>> parameters in a template where my use case would be for a web page?
>>
>> For example, in this template:
>>
>> layout.st
>> <html>
>> <head>
>> <title>$title$</title>
>> <body>
>> $banner()$
>> <hr>
>> $body()$
>> </body>
>> </html>
>>
>> I'd like to say that $title$ is a required parameter. Would even be  
>> better if types can be enforced, such as String, Number, Date, List  
>> of x etc, but even without static typing, simply listing the formal  
>> arguments the template expects would be great.
>> Thanks!
>> _______________________________________________
>> stringtemplate-interest mailing list
>> stringtemplate-interest at antlr.org
>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>
>
>
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>
>
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20091031/33e47c06/attachment.html 

