From mathieu.clabaut at gmail.com  Sun Mar  1 12:16:26 2009
From: mathieu.clabaut at gmail.com (Mathieu Clabaut)
Date: Sun, 1 Mar 2009 21:16:26 +0100
Subject: [stringtemplate-interest] Stringtemplate performances : some figures
Message-ID: <db9360ca0903011216l1642b7f6l17e2c164611988f5@mail.gmail.com>

Hello,

 I was in the process on doing a prototype in python to validate the use of
template engine for some export task inside the Rodin Platform (
http://wiki.event-b.org).
 I was quite disappointed stringtemplate performances in python: The export
of a (quite big) model took 49,7 seconds.
 So I tried Mako which is reputed to be quite fast (albeit 3 times slower
than tenjin : http://www.kuwata-lab.com/tenjin/), and I get the same result
(Same overhead outside of template generation, and very similar template) in
8,7s.

 This led to two questions:
 - Do you know of some ways to improve strigtemplate performances ?
 - Are java stringtemplate performances better, or quite the same than those
of python (I didn't find any benchmark with Stringtemplate on the net) ?

 Thank you for your help,
-Mathieu
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20090301/81b414e4/attachment.html 

From parrt at cs.usfca.edu  Sun Mar  1 12:24:49 2009
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sun, 1 Mar 2009 12:24:49 -0800
Subject: [stringtemplate-interest] Stringtemplate performances : some
	figures
In-Reply-To: <db9360ca0903011216l1642b7f6l17e2c164611988f5@mail.gmail.com>
References: <db9360ca0903011216l1642b7f6l17e2c164611988f5@mail.gmail.com>
Message-ID: <967E95BE-117C-490F-B2E7-0F45DD52F520@cs.usfca.edu>


On Mar 1, 2009, at 12:16 PM, Mathieu Clabaut wrote:

> Hello,
>
>  I was in the process on doing a prototype in python to validate the  
> use of template engine for some export task inside the Rodin  
> Platform (http://wiki.event-b.org).
>  I was quite disappointed stringtemplate performances in python: The  
> export of a (quite big) model took 49,7 seconds.
>  So I tried Mako which is reputed to be quite fast (albeit 3 times  
> slower than tenjin : http://www.kuwata-lab.com/tenjin/), and I get  
> the same result (Same overhead outside of template generation, and  
> very similar template) in 8,7s.
>
>  This led to two questions:
>  - Do you know of some ways to improve strigtemplate performances ?

The biggest thing I remember about previous versions is that they did  
a deep copy instead of a pointer copy when they did set attribute  
stuff. I understand that that has been fixed, what version are you  
using?

>  - Are java stringtemplate performances better, or quite the same  
> than those of python (I didn't find any benchmark with  
> Stringtemplate on the net) ?

Java should go much faster.

Ter

From pink at odahoda.de  Sun Mar  1 12:32:35 2009
From: pink at odahoda.de (Benjamin Niemann)
Date: Sun, 1 Mar 2009 21:32:35 +0100
Subject: [stringtemplate-interest] Stringtemplate performances : some
	figures
In-Reply-To: <db9360ca0903011216l1642b7f6l17e2c164611988f5@mail.gmail.com>
References: <db9360ca0903011216l1642b7f6l17e2c164611988f5@mail.gmail.com>
Message-ID: <543531490903011232r26fab250xd706908e7d890101@mail.gmail.com>

Hello Mathieu,

On Sun, Mar 1, 2009 at 9:16 PM, Mathieu Clabaut
<mathieu.clabaut at gmail.com> wrote:
> ?I was in the process on doing a prototype in python to validate the use of
> template engine for some export task inside the Rodin Platform
> (http://wiki.event-b.org).
> ?I was quite disappointed stringtemplate performances in python: The export
> of a (quite big) model took 49,7 seconds.
> ?So I tried Mako which is reputed to be quite fast (albeit 3 times slower
> than tenjin : http://www.kuwata-lab.com/tenjin/), and I get the same result
> (Same overhead outside of template generation, and very similar template) in
> 8,7s.
>
> ?This led to two questions:
> ?- Do you know of some ways to improve strigtemplate performances ?

The Python version of ST is a very close port of the Java version.
This makes it much easier for me to keep the implementation correct
(as in 'like the reference implementation') - at the price of often
suboptimal, un-pythonic solutions.
I haven't spent time on optimizing it yet, I did not even ran it
through the profiler, so I can't say if there are big and/or easy
opportunities for improvements.

-Ben

> ?- Are java stringtemplate performances better, or quite the same than those
> of python (I didn't find any benchmark with Stringtemplate on the net) ?

From mathieu.clabaut at gmail.com  Sun Mar  1 12:42:21 2009
From: mathieu.clabaut at gmail.com (Mathieu Clabaut)
Date: Sun, 1 Mar 2009 21:42:21 +0100
Subject: [stringtemplate-interest] Stringtemplate performances : some
	figures
In-Reply-To: <967E95BE-117C-490F-B2E7-0F45DD52F520@cs.usfca.edu>
References: <db9360ca0903011216l1642b7f6l17e2c164611988f5@mail.gmail.com>
	<967E95BE-117C-490F-B2E7-0F45DD52F520@cs.usfca.edu>
Message-ID: <db9360ca0903011242n4e58aae6g948ad176ba72a99@mail.gmail.com>

On Sun, Mar 1, 2009 at 21:24, Terence Parr <parrt at cs.usfca.edu> wrote:

> On Mar 1, 2009, at 12:16 PM, Mathieu Clabaut wrote:
>
>>
>>  This led to two questions:
>>  - Do you know of some ways to improve strigtemplate performances ?
>>
>
> The biggest thing I remember about previous versions is that they did a
> deep copy instead of a pointer copy when they did set attribute stuff. I
> understand that that has been fixed, what version are you using?

I use version  3.2b1.

  - Are java stringtemplate performances better, or quite the same than
> those of python (I didn't find any benchmark with Stringtemplate on the net)
> ?
>

Java should go much faster.
>

Ok, I definitely will give a try when porting the proto to Java.
Thank you !

-Mathieu
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20090301/7847f6d7/attachment.html 

From jimi at temporal-wave.com  Sun Mar  1 13:13:47 2009
From: jimi at temporal-wave.com (Jim Idle)
Date: Sun, 01 Mar 2009 13:13:47 -0800
Subject: [stringtemplate-interest] Stringtemplate performances : some
 figures
In-Reply-To: <543531490903011232r26fab250xd706908e7d890101@mail.gmail.com>
References: <db9360ca0903011216l1642b7f6l17e2c164611988f5@mail.gmail.com>
	<543531490903011232r26fab250xd706908e7d890101@mail.gmail.com>
Message-ID: <49AAFA8B.5010809@temporal-wave.com>

An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20090301/427efd3b/attachment.html 

From mathieu.clabaut at gmail.com  Mon Mar  2 04:38:10 2009
From: mathieu.clabaut at gmail.com (Mathieu Clabaut)
Date: Mon, 2 Mar 2009 13:38:10 +0100
Subject: [stringtemplate-interest] Stringtemplate performances : some
	figures
In-Reply-To: <543531490903011232r26fab250xd706908e7d890101@mail.gmail.com>
References: <db9360ca0903011216l1642b7f6l17e2c164611988f5@mail.gmail.com>
	<543531490903011232r26fab250xd706908e7d890101@mail.gmail.com>
Message-ID: <db9360ca0903020438v482fe50cv548826696fb32e1a@mail.gmail.com>

On Sun, Mar 1, 2009 at 21:32, Benjamin Niemann <pink at odahoda.de> wrote:
> Hello Mathieu,
> I haven't spent time on optimizing it yet, I did not even ran it
> through the profiler, so I can't say if there are big and/or easy
> opportunities for improvements.

Attach is the result of a profiling session on the aforementioned program.

Cheers,
-Mathieu

From JALuber at gmx.de  Mon Mar  2 05:55:33 2009
From: JALuber at gmx.de (Johannes Luber)
Date: Mon, 02 Mar 2009 14:55:33 +0100
Subject: [stringtemplate-interest] Stringtemplate performances :
	some	figures
In-Reply-To: <db9360ca0903020438v482fe50cv548826696fb32e1a@mail.gmail.com>
References: <db9360ca0903011216l1642b7f6l17e2c164611988f5@mail.gmail.com>
	<543531490903011232r26fab250xd706908e7d890101@mail.gmail.com>
	<db9360ca0903020438v482fe50cv548826696fb32e1a@mail.gmail.com>
Message-ID: <20090302135533.203780@gmx.net>

> On Sun, Mar 1, 2009 at 21:32, Benjamin Niemann <pink at odahoda.de> wrote:
> > Hello Mathieu,
> > I haven't spent time on optimizing it yet, I did not even ran it
> > through the profiler, so I can't say if there are big and/or easy
> > opportunities for improvements.
> 
> Attach is the result of a profiling session on the aforementioned program.

No, it isn't. Did you really attach it? Or is the file size above the limit (50 KB or 100 KB, compression may work)?

Johannes
> 
> Cheers,
> -Mathieu
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest

-- 
Psssst! Schon vom neuen GMX MultiMessenger geh?rt? Der kann`s mit allen: http://www.gmx.net/de/go/multimessenger01

From mathieu.clabaut at gmail.com  Mon Mar  2 04:39:12 2009
From: mathieu.clabaut at gmail.com (Mathieu Clabaut)
Date: Mon, 2 Mar 2009 13:39:12 +0100
Subject: [stringtemplate-interest] Stringtemplate performances : some
	figures
In-Reply-To: <db9360ca0903020438v482fe50cv548826696fb32e1a@mail.gmail.com>
References: <db9360ca0903011216l1642b7f6l17e2c164611988f5@mail.gmail.com>
	<543531490903011232r26fab250xd706908e7d890101@mail.gmail.com>
	<db9360ca0903020438v482fe50cv548826696fb32e1a@mail.gmail.com>
Message-ID: <db9360ca0903020439v579006d6ha6187ed526429ab@mail.gmail.com>

With the attachment...

On Mon, Mar 2, 2009 at 13:38, Mathieu Clabaut <mathieu.clabaut at gmail.com> wrote:
> On Sun, Mar 1, 2009 at 21:32, Benjamin Niemann <pink at odahoda.de> wrote:
>> Hello Mathieu,
>> I haven't spent time on optimizing it yet, I did not even ran it
>> through the profiler, so I can't say if there are big and/or easy
>> opportunities for improvements.
>
> Attach is the result of a profiling session on the aforementioned program.
>
> Cheers,
> -Mathieu
>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: st.profile
Type: application/octet-stream
Size: 38364 bytes
Desc: not available
Url : http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20090302/e6eda1f7/attachment-0001.obj 

From sharwell at pixelminegames.com  Tue Mar  3 19:10:21 2009
From: sharwell at pixelminegames.com (Sam Harwell)
Date: Tue, 3 Mar 2009 21:10:21 -0600
Subject: [stringtemplate-interest] ASTExpr.getObjectProperty: should a null
	propertyName check for a default value if the object is a Map?
Message-ID: <86403CA0939415448BCCB83855EFE09AA67A9B@Bloodymary.ironwillgames.com>

If I have the following map in my StringTemplate:

 

csharpVisibilityMap ::= [

        "private":"private",

        "protected":"protected",

        "public":"public",

        "fragment":"private",

        default:"private"

]

 

And ruleDescriptor is an instance of the Rule class, whose string member
modifier is null, should "private" be output, or an empty string? It
seems like the default value in the map, if present, should be used. The
relevant code is the check for a null propertyName inside
ASTExpr.getObjectProperty without then checking if the parameter o is a
Map.

 

lexerRule(ruleName,nakedBlock,ruleDescriptor,block,memoize) ::= <<

...

<csharpVisibilityMap.(ruleDescriptor.modifier)> ...

>> 

 

Thanks,

Sam Harwell

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20090303/52e55e65/attachment.html 

From jaluber at gmx.de  Wed Mar  4 00:20:42 2009
From: jaluber at gmx.de (Johannes Luber)
Date: Wed, 04 Mar 2009 09:20:42 +0100
Subject: [stringtemplate-interest] ASTExpr.getObjectProperty: should a
 null	propertyName check for a default value if the object is a Map?
In-Reply-To: <86403CA0939415448BCCB83855EFE09AA67A9B@Bloodymary.ironwillgames.com>
References: <86403CA0939415448BCCB83855EFE09AA67A9B@Bloodymary.ironwillgames.com>
Message-ID: <49AE39DA.4060301@gmx.de>

Sam Harwell schrieb:
> If I have the following map in my StringTemplate:
> 
> csharpVisibilityMap ::= [
>         "private":"private",
>         "protected":"protected",
>         "public":"public",
>         "fragment":"private",
>         default:"private"
> ]
> 
> And ruleDescriptor is an instance of the Rule class, whose string member
> modifier is null, should ?private? be output, or an empty string? It
> seems like the default value in the map, if present, should be used. The
> relevant code is the check for a null propertyName inside
> ASTExpr.getObjectProperty without then checking if the parameter o is a Map.
> 
> lexerRule(ruleName,nakedBlock,ruleDescriptor,block,memoize) ::= <<
> ...
> <csharpVisibilityMap.(ruleDescriptor.modifier)> ...
>>> 
> 
> Thanks,
> Sam Harwell

I'm in favor of doing so - less tighter access rights should be
explicitly set. But why using this list? That's an ANTLR-dev issue and
not a problem with using ST.

Johannes

From josemaria at simpleoption.com  Thu Mar 12 14:03:40 2009
From: josemaria at simpleoption.com (=?utf-8?Q?Jos=C3=A9_Mar=C3=ADa_Ruiz?=)
Date: Thu, 12 Mar 2009 21:03:40 -0000
Subject: [stringtemplate-interest] A problem with a variable name
Message-ID: <op.uqo54eomegnie4@rufus.simpleoption.com>

Hi.

I've an object (c#) with a property  named "Categor?a" (Category in
english).

When I try to access it in a template, $object.Categor?a$, as soon as
StringTemplate
find the unicode character "?" it stops interpreting.

What can I do to have unicode characters in the names of my clases and
variables?

Cheers.

-- 
Jos? Mar?a Ruiz Aguilera

Simple Option S.L.
     Tel: (+34) 951 930 122
     Fax: (+34) 951 930 122
     pedidos at simpleoption.es
     http://www.simpleoption.es

From jaluber at gmx.de  Thu Mar 12 13:33:35 2009
From: jaluber at gmx.de (Johannes Luber)
Date: Thu, 12 Mar 2009 21:33:35 +0100
Subject: [stringtemplate-interest] A problem with a variable name
In-Reply-To: <op.uqo54eomegnie4@rufus.simpleoption.com>
References: <op.uqo54eomegnie4@rufus.simpleoption.com>
Message-ID: <49B9719F.3070605@gmx.de>

Jos? Mar?a Ruiz schrieb:
> Hi.
> 
> I've an object (c#) with a property  named "Categor?a" (Category in
> english).
> 
> When I try to access it in a template, $object.Categor?a$, as soon as
> StringTemplate
> find the unicode character "?" it stops interpreting.
> 
> What can I do to have unicode characters in the names of my clases and
> variables?
> 
> Cheers.
> 

As StringTemplate is built upon ANTLR 2.7.7, which supports only ASCII,
I doubt that there is something you can do beyond adding/renaming to
English names. Seeing that you are using the C# version of ST, the for
now unreleased ST 3.2 may be using ANTLR 3.x, but that's pure
speculation on the fact that the creator did finish a version 3
conversion of the ANTLR grammar as well a C# conversion of the ANTLR
tool. But he has to (not) confirm this himself.

Johannes

From sharwell at pixelminegames.com  Mon Mar 16 14:33:25 2009
From: sharwell at pixelminegames.com (Sam Harwell)
Date: Mon, 16 Mar 2009 16:33:25 -0500
Subject: [stringtemplate-interest] StringTemplate Compiler for .NET
In-Reply-To: <f897bf780902281444g7d26ca58kd443d740430109cf@mail.gmail.com>
References: <f897bf780902281444g7d26ca58kd443d740430109cf@mail.gmail.com>
Message-ID: <86403CA0939415448BCCB83855EFE09AA67B62@Bloodymary.ironwillgames.com>

I'm extremely interested to see how the compiled code performs compared
to my C# port of StringTemplate.

 

That aside, I think the idea of compiling templates to an assembly is
great. This is the kind of program that truly makes use of the
multi-language ability at the core of the CLI. I don't have profiling
results from the Java version of StringTemplate to compare with, but
I'll give you an overview of the results of some profiling I did.

 

I used a sampling method to profile the library. The test was a batch
conversion of the 8 grammars that are used in the C# port of the ANTLR
Tool. 54.33% (inclusive) of the samples were in
Antlr3.StringTemplate.dll. Only 6.59% (inclusive) was spent in
ASTExpr.rawGetObjectProperty, which is responsible for all measurable
uses of .NET reflection. 35.31% (inclusive) of the time was spent in
ActionEvaluator.action, (note: this call encapsulates all calls to
ASTExpr.rawGetObjectProperty).

 

By implementing a System.Type -> System.Reflection.MemberInfo map in
ASTExpr and caching the property accessors, I was able to reduce the
time spent in ASTExpr.rawGetObjectProperty to 2.36% (inclusive).

 

Sam

 

PS: I've thought about doing something similar to the CLI compilation
with ANTLR grammars, but profiling the generated code has shown that
it's not the bottleneck right now.

 

From: stringtemplate-interest-bounces at antlr.org
[mailto:stringtemplate-interest-bounces at antlr.org] On Behalf Of Volkan
Ceylan
Sent: Saturday, February 28, 2009 4:44 PM
To: stringtemplate-interest at antlr.org
Subject: [stringtemplate-interest] StringTemplate Compiler for .NET

 

Hello ST lovers,

I met StringTemplate about two years ago and before that i had never
used a templating language (considering my 15+ years coding history, its
a shame :), other than String.Format. Now, i have a CMS developed in
C#/.NET that completely depends on ST to generate pages, where templates
are stored in a SQL database. It is actively being used in some
important web sites in my country. I love the idea behind ST to enforce
model-view separation, which cleared the messy HTML markup from my C#
classes completely, and made it easier to change the look of interface
based on customer requests. I strongly recommend ST to any .NET
developer. Even MS has seen the light and invented MVC framework but
they are a bit late. Anyway, ST can be used as an alternative view
engine in MVC framework too, as the default one doesn't still seem
functional enough to me :)

Nowadays, i am working on a high traffic web site where we expect to
take thousands of requests per second. A page with a rather complex
template (or set of templates) takes about 35 ms (after some
optimizations, it was 130 ms at start) just for
StringTemplate.ToString(). This time doesn't include the time required
to parse a template (templates are parsed and cached, and i'm using
ST.GetInstanceOf()), and it also doesn't include the time for populating
template with data. Fetching all data required in the page from SQL and
setting them in ST takes only 6 ms. 

At first sight, 35 ms may seem a small amount of time, but it means that
only about 25 requests per second can be handled by the web server if we
had just called ST.ToString() to render a page, so the actual requests
per second is even lower.

As i had no intention to give up on StringTemplate, decided to try
writing a compiler for it. I've set up a project in Google code. 

http://code.google.com/p/stringtemplate-dotnet-compiler/

There is a working compiler in SVN repository, but don't expect much
from it. It is only two days of work yet, not even in alpha state.

For now, it can only compile templates like "testing
$a:{$it:{$it:{$it:{$it$}$}$}$}$ $a+b+"blablalalbla"$ $b$ $c$ $d$ end"

No formal arguments, no groups, no format/anchor/null options, no no no,
just what you see above :)

When it comes to speed, for this simple template it works about 5 times
faster than native StringTemplate. I'm expecting the difference to grow
as templates gets more complex. 
Also, there are some room for optimizations, such as inlining simple
template chunks and constant expressions, but my priority is to create a
fully compilant, working compiler.

To keep compiler simple, and easier to develop, i decided not to parse
templates myself, but take a StringTemplate object, walk its chunks and
trees and emit IL code instead of evaluating expressions. For example, i
took ActionEvaluator.cs from ST source code, and replaced evaluation
expressions with dynamic IL generating code. Result can be seen in
ActionCompiler.cs.

I'd appreciate any suggestions, ideas, help etc. Would like to hear from
Terrence (thanks a lot for letting me see the light :), opinion as i
read in the group he also has plans to turn StringTemplate into a code
generating compiler in v4.

Volkan Ceylan









-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20090316/bbfe7af9/attachment.html 

From volkanceylan at gmail.com  Tue Mar 17 01:51:42 2009
From: volkanceylan at gmail.com (Volkan Ceylan)
Date: Tue, 17 Mar 2009 10:51:42 +0200
Subject: [stringtemplate-interest]  StringTemplate Compiler for .NET
In-Reply-To: <f897bf780903170139l423eb87bt2b4acb4472cf8cb@mail.gmail.com>
References: <f897bf780902281444g7d26ca58kd443d740430109cf@mail.gmail.com>
	<86403CA0939415448BCCB83855EFE09AA67B62@Bloodymary.ironwillgames.com>
	<f897bf780903170139l423eb87bt2b4acb4472cf8cb@mail.gmail.com>
Message-ID: <f897bf780903170151n2d0c1ab0laad262b581cf6253@mail.gmail.com>

> I?m extremely interested to see how the compiled code performs compared
> to my C# port of StringTemplate.

?Hi, is your C# port open source? Would like to see what optimizations
you did. I'm currently working on public 3.1beta at stringtemplate.org

> That aside, I think the idea of compiling templates to an assembly is great.

Actually, i'm not thinking about compiling to an assembly, but to
dynamic methods. AFAIK, due to some problems with .NET, when you load
an assembly, there is no way to unload it, unless you use a separate
application domain to load assemblies, and unload the domain
completely.

Dynamic methods can be garbage collected when you have no delegates or
references to them. That's why i prefer dynamic methods versus
assemblies. The only problem with dynamic methods i see is that they
are harder to debug :(

>I used a sampling method to profile the library. The test was a batch conversion
> of the 8 grammars that are used in the C# port of the ANTLR >Tool. 54.33% (inclusive)
> of the samples were in Antlr3.StringTemplate.dll. Only 6.59% (inclusive) was spent
> in >ASTExpr.rawGetObjectProperty, which is responsible for all measurable uses of .NET reflection.
> 35.31% (inclusive) of the time was spent in >ActionEvaluator.action,
> (note: this call encapsulates all calls to ASTExpr.rawGetObjectProperty).

ActionEvaluator.action is walking a tree and consists of some costly
CASE statements. When a template is compiled, there will not be any of
them in the generated IL. Currently i'm having about 10x speed for
simple templates.


> By implementing a System.Type -> System.Reflection.MemberInfo map in ASTExpr and
> caching the property accessors, I was able to reduce the time spent in
> ASTExpr.rawGetObjectProperty to 2.36% (inclusive).

This is a nice idea, would like to see implementation. There may be
even a further improvement by compiling property accessors as dynamic
methods such as (type, property) -> dynamic get delegate (though i'm
not %100 sure about that, need to see source code of new DLR)

> PS: I?ve thought about doing something similar to the CLI compilation with
> ANTLR grammars, but profiling the generated code has shown that it?s not the bottleneck right now.

I don't know much about ANTLR and its grammars, other than a general
overview of what it is used for :(

From sharwell at pixelminegames.com  Tue Mar 17 02:20:20 2009
From: sharwell at pixelminegames.com (Sam Harwell)
Date: Tue, 17 Mar 2009 04:20:20 -0500
Subject: [stringtemplate-interest] StringTemplate Compiler for .NET
In-Reply-To: <f897bf780903170151n2d0c1ab0laad262b581cf6253@mail.gmail.com>
References: <f897bf780902281444g7d26ca58kd443d740430109cf@mail.gmail.com><86403CA0939415448BCCB83855EFE09AA67B62@Bloodymary.ironwillgames.com><f897bf780903170139l423eb87bt2b4acb4472cf8cb@mail.gmail.com>
	<f897bf780903170151n2d0c1ab0laad262b581cf6253@mail.gmail.com>
Message-ID: <86403CA0939415448BCCB83855EFE09AA67B66@Bloodymary.ironwillgames.com>

My C# port is checked into Perforce under //depot/code/antlrcs/main/Antlr3.StringTemplate/. I submitted the cache optimization in CL5887. You are correct about the debugging difficulty of dynamic methods. I'll see about using them as stubs to accessing the properties, since it should be very easy. Good luck with the conversion and I look forward to seeing the progress. :)

Sam

-----Original Message-----
From: stringtemplate-interest-bounces at antlr.org [mailto:stringtemplate-interest-bounces at antlr.org] On Behalf Of Volkan Ceylan
Sent: Tuesday, March 17, 2009 3:52 AM
To: stringtemplate-interest at antlr.org
Subject: [stringtemplate-interest] StringTemplate Compiler for .NET

> I'm extremely interested to see how the compiled code performs compared
> to my C# port of StringTemplate.

?Hi, is your C# port open source? Would like to see what optimizations
you did. I'm currently working on public 3.1beta at stringtemplate.org

> That aside, I think the idea of compiling templates to an assembly is great.

Actually, i'm not thinking about compiling to an assembly, but to
dynamic methods. AFAIK, due to some problems with .NET, when you load
an assembly, there is no way to unload it, unless you use a separate
application domain to load assemblies, and unload the domain
completely.

Dynamic methods can be garbage collected when you have no delegates or
references to them. That's why i prefer dynamic methods versus
assemblies. The only problem with dynamic methods i see is that they
are harder to debug :(

>I used a sampling method to profile the library. The test was a batch conversion
> of the 8 grammars that are used in the C# port of the ANTLR >Tool. 54.33% (inclusive)
> of the samples were in Antlr3.StringTemplate.dll. Only 6.59% (inclusive) was spent
> in >ASTExpr.rawGetObjectProperty, which is responsible for all measurable uses of .NET reflection.
> 35.31% (inclusive) of the time was spent in >ActionEvaluator.action,
> (note: this call encapsulates all calls to ASTExpr.rawGetObjectProperty).

ActionEvaluator.action is walking a tree and consists of some costly
CASE statements. When a template is compiled, there will not be any of
them in the generated IL. Currently i'm having about 10x speed for
simple templates.


> By implementing a System.Type -> System.Reflection.MemberInfo map in ASTExpr and
> caching the property accessors, I was able to reduce the time spent in
> ASTExpr.rawGetObjectProperty to 2.36% (inclusive).

This is a nice idea, would like to see implementation. There may be
even a further improvement by compiling property accessors as dynamic
methods such as (type, property) -> dynamic get delegate (though i'm
not %100 sure about that, need to see source code of new DLR)

> PS: I've thought about doing something similar to the CLI compilation with
> ANTLR grammars, but profiling the generated code has shown that it's not the bottleneck right now.

I don't know much about ANTLR and its grammars, other than a general
overview of what it is used for :(
_______________________________________________
stringtemplate-interest mailing list
stringtemplate-interest at antlr.org
http://www.antlr.org/mailman/listinfo/stringtemplate-interest

From sharwell at pixelminegames.com  Tue Mar 17 03:38:07 2009
From: sharwell at pixelminegames.com (Sam Harwell)
Date: Tue, 17 Mar 2009 05:38:07 -0500
Subject: [stringtemplate-interest] StringTemplate Compiler for .NET
In-Reply-To: <f897bf780903170151n2d0c1ab0laad262b581cf6253@mail.gmail.com>
References: <f897bf780902281444g7d26ca58kd443d740430109cf@mail.gmail.com><86403CA0939415448BCCB83855EFE09AA67B62@Bloodymary.ironwillgames.com><f897bf780903170139l423eb87bt2b4acb4472cf8cb@mail.gmail.com>
	<f897bf780903170151n2d0c1ab0laad262b581cf6253@mail.gmail.com>
Message-ID: <86403CA0939415448BCCB83855EFE09AA67B67@Bloodymary.ironwillgames.com>

This caching method dropped ASTExpr.rawGetObjectProperty to 1.56%
(inclusive). I'm also creating/caching dynamic methods to construct the
lexers in StringTemplate.BreakTemplateIntoChunks. At this point it's
safe to say the reflection aspect of the StringTemplate evaluation is
not a significant performance bottleneck, which is great news for a
dynamically-typed language. I'll have to wait until tomorrow to check in
the updates.

Sam

-----Original Message-----
From: stringtemplate-interest-bounces at antlr.org
[mailto:stringtemplate-interest-bounces at antlr.org] On Behalf Of Volkan
Ceylan
Sent: Tuesday, March 17, 2009 3:52 AM
To: stringtemplate-interest at antlr.org
Subject: [stringtemplate-interest] StringTemplate Compiler for .NET

> By implementing a System.Type -> System.Reflection.MemberInfo map in
ASTExpr and
> caching the property accessors, I was able to reduce the time spent in
> ASTExpr.rawGetObjectProperty to 2.36% (inclusive).

This is a nice idea, would like to see implementation. There may be
even a further improvement by compiling property accessors as dynamic
methods such as (type, property) -> dynamic get delegate (though i'm
not %100 sure about that, need to see source code of new DLR)


From JALuber at gmx.de  Tue Mar 17 05:12:31 2009
From: JALuber at gmx.de (Johannes Luber)
Date: Tue, 17 Mar 2009 13:12:31 +0100
Subject: [stringtemplate-interest] StringTemplate Compiler for .NET
In-Reply-To: <86403CA0939415448BCCB83855EFE09AA67B66@Bloodymary.ironwillgames.com>
References: <f897bf780902281444g7d26ca58kd443d740430109cf@mail.gmail.com><86403CA0939415448BCCB83855EFE09AA67B62@Bloodymary.ironwillgames.com><f897bf780903170139l423eb87bt2b4acb4472cf8cb@mail.gmail.com>
	<f897bf780903170151n2d0c1ab0laad262b581cf6253@mail.gmail.com>
	<86403CA0939415448BCCB83855EFE09AA67B66@Bloodymary.ironwillgames.com>
Message-ID: <20090317121231.237310@gmx.net>

> My C# port is checked into Perforce under
> //depot/code/antlrcs/main/Antlr3.StringTemplate/. I submitted the cache optimization in CL5887. You are
> correct about the debugging difficulty of dynamic methods. I'll see about
> using them as stubs to accessing the properties, since it should be very easy.
> Good luck with the conversion and I look forward to seeing the progress. :)
> 
> Sam

Sam, can you publish an official (beta?) of ST# 3.2? Then I can update the ANTLR distribution.

Johannes

P.S.: There is another mail on this list, which you should reply to. The question is if your port is still ASCII limited or accepts unicode.
> 
> -----Original Message-----
> From: stringtemplate-interest-bounces at antlr.org
> [mailto:stringtemplate-interest-bounces at antlr.org] On Behalf Of Volkan Ceylan
> Sent: Tuesday, March 17, 2009 3:52 AM
> To: stringtemplate-interest at antlr.org
> Subject: [stringtemplate-interest] StringTemplate Compiler for .NET
> 
> > I'm extremely interested to see how the compiled code performs compared
> > to my C# port of StringTemplate.
> 
> ?Hi, is your C# port open source? Would like to see what optimizations
> you did. I'm currently working on public 3.1beta at stringtemplate.org
> 
> > That aside, I think the idea of compiling templates to an assembly is
> great.
> 
> Actually, i'm not thinking about compiling to an assembly, but to
> dynamic methods. AFAIK, due to some problems with .NET, when you load
> an assembly, there is no way to unload it, unless you use a separate
> application domain to load assemblies, and unload the domain
> completely.
> 
> Dynamic methods can be garbage collected when you have no delegates or
> references to them. That's why i prefer dynamic methods versus
> assemblies. The only problem with dynamic methods i see is that they
> are harder to debug :(
> 
> >I used a sampling method to profile the library. The test was a batch
> conversion
> > of the 8 grammars that are used in the C# port of the ANTLR >Tool.
> 54.33% (inclusive)
> > of the samples were in Antlr3.StringTemplate.dll. Only 6.59% (inclusive)
> was spent
> > in >ASTExpr.rawGetObjectProperty, which is responsible for all
> measurable uses of .NET reflection.
> > 35.31% (inclusive) of the time was spent in >ActionEvaluator.action,
> > (note: this call encapsulates all calls to
> ASTExpr.rawGetObjectProperty).
> 
> ActionEvaluator.action is walking a tree and consists of some costly
> CASE statements. When a template is compiled, there will not be any of
> them in the generated IL. Currently i'm having about 10x speed for
> simple templates.
> 
> 
> > By implementing a System.Type -> System.Reflection.MemberInfo map in
> ASTExpr and
> > caching the property accessors, I was able to reduce the time spent in
> > ASTExpr.rawGetObjectProperty to 2.36% (inclusive).
> 
> This is a nice idea, would like to see implementation. There may be
> even a further improvement by compiling property accessors as dynamic
> methods such as (type, property) -> dynamic get delegate (though i'm
> not %100 sure about that, need to see source code of new DLR)
> 
> > PS: I've thought about doing something similar to the CLI compilation
> with
> > ANTLR grammars, but profiling the generated code has shown that it's not
> the bottleneck right now.
> 
> I don't know much about ANTLR and its grammars, other than a general
> overview of what it is used for :(
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest

-- 
Aufgepasst: Sind Ihre Daten beim Online-Banking auch optimal gesch?tzt?
Jetzt informieren und absichern: https://homebanking.web.de/?mc=mail at footer.

From sharwell at pixelminegames.com  Tue Mar 17 07:43:19 2009
From: sharwell at pixelminegames.com (Sam Harwell)
Date: Tue, 17 Mar 2009 09:43:19 -0500
Subject: [stringtemplate-interest] A problem with a variable name
In-Reply-To: <49B9719F.3070605@gmx.de>
References: <op.uqo54eomegnie4@rufus.simpleoption.com>
	<49B9719F.3070605@gmx.de>
Message-ID: <86403CA0939415448BCCB83855EFE09AA67B68@Bloodymary.ironwillgames.com>

The C# versions of the Tool and StringTemplate read input files in auto-detection mode that recognizes byte encoding marks at the beginning of a file. They should support any input encoding, but there may be bugs. The ANTLR port writes UTF-8 files, although this could be controlled through an option and implemented in AntlrTool.getOutputFile as any encoding.

Sam

-----Original Message-----
From: stringtemplate-interest-bounces at antlr.org [mailto:stringtemplate-interest-bounces at antlr.org] On Behalf Of Johannes Luber
Sent: Thursday, March 12, 2009 3:34 PM
To: Jos? Mar?a Ruiz
Cc: stringtemplate-interest at antlr.org
Subject: Re: [stringtemplate-interest] A problem with a variable name

Jos? Mar?a Ruiz schrieb:
> Hi.
> 
> I've an object (c#) with a property  named "Categor?a" (Category in
> english).
> 
> When I try to access it in a template, $object.Categor?a$, as soon as
> StringTemplate
> find the unicode character "?" it stops interpreting.
> 
> What can I do to have unicode characters in the names of my clases and
> variables?
> 
> Cheers.
> 

As StringTemplate is built upon ANTLR 2.7.7, which supports only ASCII,
I doubt that there is something you can do beyond adding/renaming to
English names. Seeing that you are using the C# version of ST, the for
now unreleased ST 3.2 may be using ANTLR 3.x, but that's pure
speculation on the fact that the creator did finish a version 3
conversion of the ANTLR grammar as well a C# conversion of the ANTLR
tool. But he has to (not) confirm this himself.

Johannes
_______________________________________________
stringtemplate-interest mailing list
stringtemplate-interest at antlr.org
http://www.antlr.org/mailman/listinfo/stringtemplate-interest

From sharwell at pixelminegames.com  Tue Mar 17 09:41:35 2009
From: sharwell at pixelminegames.com (Sam Harwell)
Date: Tue, 17 Mar 2009 11:41:35 -0500
Subject: [stringtemplate-interest] StringTemplate Compiler for .NET
In-Reply-To: <20090317121231.237310@gmx.net>
References: <f897bf780902281444g7d26ca58kd443d740430109cf@mail.gmail.com><86403CA0939415448BCCB83855EFE09AA67B62@Bloodymary.ironwillgames.com><f897bf780903170139l423eb87bt2b4acb4472cf8cb@mail.gmail.com><f897bf780903170151n2d0c1ab0laad262b581cf6253@mail.gmail.com>
	<86403CA0939415448BCCB83855EFE09AA67B66@Bloodymary.ironwillgames.com>
	<20090317121231.237310@gmx.net>
Message-ID: <86403CA0939415448BCCB83855EFE09AA67B71@Bloodymary.ironwillgames.com>

I put Antlr3.StringTemplate.dll and Antlr3.StringTemplate.pdb in:
//depot/code/antlrcs/main/bin/Bootstrap/

It references both Antlr3.Runtime.dll and Antlr3.Runtime.Debug.dll, both
in the same folder.

The bootstrap build only includes a partial build of the Tool, which
only supports the CSharp3 target and vs2005 or antlr error messages. I
still need to place a zip file with a full build somewhere, I'm
thinking:
//depot/code/antlrcs/main/bin/Release/Antlr3.7z and
//depot/code/antlrcs/main/bin/Release/Antlr3Symbols.7z

Sam

-----Original Message-----
From: Johannes Luber [mailto:JALuber at gmx.de] 
Sent: Tuesday, March 17, 2009 7:13 AM
To: Sam Harwell; stringtemplate-interest at antlr.org;
volkanceylan at gmail.com
Subject: Re: [stringtemplate-interest] StringTemplate Compiler for .NET

Sam, can you publish an official (beta?) of ST# 3.2? Then I can update
the ANTLR distribution.

Johannes


From sharwell at pixelminegames.com  Tue Mar 17 11:24:18 2009
From: sharwell at pixelminegames.com (Sam Harwell)
Date: Tue, 17 Mar 2009 13:24:18 -0500
Subject: [stringtemplate-interest] Performance improvement in
	AutoIndentWriter
Message-ID: <86403CA0939415448BCCB83855EFE09AA67B7E@Bloodymary.ironwillgames.com>

In repeated profiling, I found that AutoIndentWriter.Write(string)
consumed just over 10% of the processing time. It was the most expensive
terminal function inside StringTemplate. I was able to cut that better
than in half by using faster string operations, and only when necessary.
Here is my code before and after the change.

 

Before:

 

public virtual int Write( string str )

{

    int n = 0;

    int strLength = str.Length;

    int newlineLength = _newline.Length;

    for ( int i = 0; i < strLength; i++ )

    {

        char c = str[i];

        // found \n or \r\n newline?

        if ( c == '\r' || c == '\n' )

        {

            _atStartOfLine = true;

            n += newlineLength; // wrote n more char

            _writer.Write( _newline );

            _charPosition = 0; 

            // skip an extra char upon \r\n

            if ( ( c == '\r' && ( i + 1 ) < strLength && str[i+1] ==
'\n' ) )

            {

                i++; // loop iteration i++ takes care of skipping 2nd
char

            }

            continue;

        }

        // normal character

        // check to see if we are at the start of a line; need indent if
so

        if ( _atStartOfLine )

        {

            n += Indent();

            _atStartOfLine = false;

        }

        n++;

        _writer.Write( c );

        _charPosition++;

    }

    return n;

}

 

 

After:

 

public virtual int Write( string str )

{

    if ( string.IsNullOrEmpty( str ) )

    {

        return 0;

    }

    else if ( str.Contains( '\n' ) || str.Contains( '\r' ) )

    {

        str = str.Replace( "\r\n", "\n" );

        str = str.Replace( '\r', '\n' );

        if ( _indents.Count > 1 )

        {

            string[] lines = str.Split( '\n' );

            string indent = null;

            for ( int i = 0; i < lines.Length; i++ )

            {

                if ( ( i > 0 || _charPosition == 0 ) && lines[i].Length
> 0 )

                {

                    if ( indent == null )

                    {

                        indent = string.Join( string.Empty,
_indents.ToArray() );

                        if ( indent.Length == 0 )

                            break;

                    }

 

                    lines[i] = indent + lines[i];

                }

            }

 

            if ( lines.Length == 1 )

            {

                str = lines[0];

                _charPosition += str.Length;

            }

            else

            {

                str = string.Join( _newline, lines );

                _charPosition = lines[lines.Length - 1].Length;

            }

        }

        else

        {

            if ( _newline != "\n" )

                str = str.Replace( "\n", _newline );

            _charPosition = str.Length - str.LastIndexOf(
_newline[_newline.Length - 1] ) - 1;

        }

    }

    else

    {

        if ( _charPosition == 0 && _indents.Count > 1 )

        {

            string indent = string.Join( string.Empty,
_indents.ToArray() );

            str = indent + str;

        }

 

        _charPosition += str.Length;

    }

 

    Writer.Write( str );

 

    _atStartOfLine = ( _charPosition == 0 );

    return str.Length;

}

 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20090317/661158de/attachment-0001.html 

From volkanceylan at gmail.com  Tue Mar 17 12:06:00 2009
From: volkanceylan at gmail.com (Volkan Ceylan)
Date: Tue, 17 Mar 2009 21:06:00 +0200
Subject: [stringtemplate-interest] StringTemplate Compiler for .NET
In-Reply-To: <86403CA0939415448BCCB83855EFE09AA67B71@Bloodymary.ironwillgames.com>
References: <f897bf780902281444g7d26ca58kd443d740430109cf@mail.gmail.com>
	<86403CA0939415448BCCB83855EFE09AA67B62@Bloodymary.ironwillgames.com>
	<f897bf780903170139l423eb87bt2b4acb4472cf8cb@mail.gmail.com>
	<f897bf780903170151n2d0c1ab0laad262b581cf6253@mail.gmail.com>
	<86403CA0939415448BCCB83855EFE09AA67B66@Bloodymary.ironwillgames.com>
	<20090317121231.237310@gmx.net>
	<86403CA0939415448BCCB83855EFE09AA67B71@Bloodymary.ironwillgames.com>
Message-ID: <f897bf780903171206k443ed73dxece9a9862c983830@mail.gmail.com>

Hi again.

I didn't use Perforce before, installed it first time. As there seems
to be no information about Perforce server URL in antlr.org,  found
server address by googling as "antlr.org:666" and connected with
"anonymous" user (guessing by luck) but i see only org.antlr directory
under //depot/code, no antlrcs :( May be anonymous account doesn't
have access to other directories or i'm using a wrong server, you have
another repository server?? I would like to see your code, and base my
compiler on your port if possible. Thanks for help.

2009/3/17 Sam Harwell <sharwell at pixelminegames.com>:
> I put Antlr3.StringTemplate.dll and Antlr3.StringTemplate.pdb in:
> //depot/code/antlrcs/main/bin/Bootstrap/
>

From hofmanndavid at gmail.com  Wed Mar 18 08:53:15 2009
From: hofmanndavid at gmail.com (David Hofmann)
Date: Wed, 18 Mar 2009 11:53:15 -0400
Subject: [stringtemplate-interest] String template book
Message-ID: <b32beff20903180853q3d34b951v10488fa96bec9ef3@mail.gmail.com>

Hi all,
After I tried a little of velocity I took a look a this project and though I
don't understand very well all the aspects of stringtempate it seems to be
much better than what velocity can offer.
I was going though the wiki of stringtemplate.org and the documentation part
but I couln't find any interesting book to buy on stringtemplate though I
have seen one for the antlr project.

Besides this mailing list and the wiki on stringtemplate are there any other
resource to have a full look at the project ?

Thanks for the work !

Greetengs .

--
David Daniel Hofmann
WebVAS, Nucleo S.A. - Telecom Personal Paraguay
http://hofmanndavid.blogspot.com/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20090318/d08ed69f/attachment.html 

From iztok.kavkler at fmf.uni-lj.si  Wed Mar 18 09:10:12 2009
From: iztok.kavkler at fmf.uni-lj.si (Iztok Kavkler)
Date: Wed, 18 Mar 2009 17:10:12 +0100
Subject: [stringtemplate-interest] Problem with null actual parameters (in
	anonymous templates)
Message-ID: <49C11CE4.1080106@fmf.uni-lj.si>

If an actual parameter to a template without formal attributes is
specified but its value is null, the attribute will be looked-up in
enclosing instances. This will almost always break recursive invocations
of templates (they are common in grammars with output=template), because
it creates cycles in the list of enclosing instances.

For example, the following snippet should parse and print back nested
functions with any number of parameters, like " f1(f2(), f3()) ", but it
actually dies with stack owerflow (or it diagnoses the cycle when lint
is on):

expr: id=IDENTIFIER '(' (pl+=expr (',' pl+=expr)*) ')'
->	template(id={$id.text}, par={$pl})
	<< <id>(<par; separator=", ">) >> ;

The solution is simple: when checking for attributes th function
StringTemplate.get should return null if the attribute is present but
its value is null (some modifications to setAttribute are also
necessary). The following patch to StringTemplate.java does the trick:

486c486
< 		if ( value==null || name==null ) {
---
> 		if ( name==null ) {
510a511,516
> 		
> 		// null value should be added only if the attribute does not yet exist
> 		if ( value==null ) {
> 		   return;
> 		}
> 		
772a779,783
> 		// there is an actual argument, but it is null
> 		if ( o==null && self.attributes!=null &&
self.attributes.containsKey(attribute) ) {
> 		   return o;
> 		}
>

From sharwell at pixelminegames.com  Wed Mar 18 17:25:38 2009
From: sharwell at pixelminegames.com (Sam Harwell)
Date: Wed, 18 Mar 2009 19:25:38 -0500
Subject: [stringtemplate-interest] StringTemplate Compiler for .NET
In-Reply-To: <f897bf780903170151n2d0c1ab0laad262b581cf6253@mail.gmail.com>
References: <f897bf780902281444g7d26ca58kd443d740430109cf@mail.gmail.com><86403CA0939415448BCCB83855EFE09AA67B62@Bloodymary.ironwillgames.com><f897bf780903170139l423eb87bt2b4acb4472cf8cb@mail.gmail.com>
	<f897bf780903170151n2d0c1ab0laad262b581cf6253@mail.gmail.com>
Message-ID: <86403CA0939415448BCCB83855EFE09AA67B8A@Bloodymary.ironwillgames.com>

So here we go/you've inspired me. :) For syntax highlighting, view in
HTML.

 

I'm starting with the if condition evaluation in ConditionalExpr. The
delegate returned can call either the interpreted version or a dynamic
method to evaluate the expression. The delegates are created on-demand
inside ConditionalExpr.Write, and called instead of directly creating
instances of ActionEvaluator like before.

 

public static bool EnableDynamicMethods = true;

static int _evaluatorNumber = 1;

static System.Func<StringTemplate, IStringTemplateWriter, bool>
GetEvaluator( ASTExpr chunk, ITree condition )

{

    if ( EnableDynamicMethods )

    {

        try

        {

            Type[] parameterTypes = { typeof( StringTemplate ), typeof(
IStringTemplateWriter ) };

            DynamicMethod method = new DynamicMethod(
"ConditionEvaluator" + _evaluatorNumber++, typeof( bool ),
parameterTypes );

 

            var gen = method.GetILGenerator();

            ActionEvaluator evalCompiled = new ActionEvaluator( null,
chunk, null, condition );

            evalCompiled.ifConditionCompiled( gen );

            gen.Emit( OpCodes.Ret );

 

            var dynamicEvaluator = (System.Func<StringTemplate,
IStringTemplateWriter, bool>)method.CreateDelegate( typeof(
System.Func<StringTemplate, IStringTemplateWriter, bool> ) );

            return dynamicEvaluator;

        }

        catch

        {

            // fall back to interpreted version

        }

    }

 

    return new System.Func<StringTemplate, IStringTemplateWriter, bool>(
( self, @out ) =>

    {

        ActionEvaluator eval = new ActionEvaluator( self, chunk, @out,
condition );

        return eval.ifCondition();

    } );

}

 

Inside ActionEvaluator.g3, I'm working my way up, and it throws
System.NotImplementedException if it doesn't know how to emit IL for the
[sub]expression. The exception results in automatic fallback to the
interpreted code that we know works.

 

public

ifConditionCompiled[System.Reflection.Emit.ILGenerator gen]

        :       ifAtomCompiled[$gen]

        |       ^(NOT ifAtomCompiled[$gen])

                {EmitNot($gen);}

        ;

 

ifAtomCompiled[System.Reflection.Emit.ILGenerator gen]

        :       exprCompiled[$gen] {EmitTest($gen);}

        ;

 

exprCompiled[System.Reflection.Emit.ILGenerator gen]

        :       ^(PLUS exprCompiled[$gen] exprCompiled[$gen])

                {throw new System.NotImplementedException();}

        |       templateApplication

                {throw new System.NotImplementedException();}

        |       attribute

                {throw new System.NotImplementedException();}

        |       templateInclude

                {throw new System.NotImplementedException();}

        |       function

                {throw new System.NotImplementedException();}

        |       list

                {throw new System.NotImplementedException();}

        |       ^(VALUE exprCompiled[$gen])

                {throw new System.NotImplementedException();}

        ;

 

Helper methods do the actual emit:

 

static void EmitNot( ILGenerator gen )

{

    gen.Emit( OpCodes.Not );

}

static void EmitTest( ILGenerator gen )

{

    var label = gen.DefineLabel();

    var label2 = gen.DefineLabel();

    gen.Emit( OpCodes.Brtrue_S, label );

    gen.Emit( OpCodes.Ldc_I4_0 );

    gen.Emit( OpCodes.Br_S, label2 );

    gen.MarkLabel( label );

    gen.Emit( OpCodes.Ldc_I4_1 );

    gen.MarkLabel( label2 );

}

 

Sam

 

-----Original Message-----
From: stringtemplate-interest-bounces at antlr.org
[mailto:stringtemplate-interest-bounces at antlr.org] On Behalf Of Volkan
Ceylan
Sent: Tuesday, March 17, 2009 3:52 AM
To: stringtemplate-interest at antlr.org
Subject: [stringtemplate-interest] StringTemplate Compiler for .NET

 

> I'm extremely interested to see how the compiled code performs
compared

> to my C# port of StringTemplate.

 

 Hi, is your C# port open source? Would like to see what optimizations

you did. I'm currently working on public 3.1beta at stringtemplate.org

 

> That aside, I think the idea of compiling templates to an assembly is
great.

 

Actually, i'm not thinking about compiling to an assembly, but to

dynamic methods. AFAIK, due to some problems with .NET, when you load

an assembly, there is no way to unload it, unless you use a separate

application domain to load assemblies, and unload the domain

completely.

 

Dynamic methods can be garbage collected when you have no delegates or

references to them. That's why i prefer dynamic methods versus

assemblies. The only problem with dynamic methods i see is that they

are harder to debug :(

 

>I used a sampling method to profile the library. The test was a batch
conversion

> of the 8 grammars that are used in the C# port of the ANTLR >Tool.
54.33% (inclusive)

> of the samples were in Antlr3.StringTemplate.dll. Only 6.59%
(inclusive) was spent

> in >ASTExpr.rawGetObjectProperty, which is responsible for all
measurable uses of .NET reflection.

> 35.31% (inclusive) of the time was spent in >ActionEvaluator.action,

> (note: this call encapsulates all calls to
ASTExpr.rawGetObjectProperty).

 

ActionEvaluator.action is walking a tree and consists of some costly

CASE statements. When a template is compiled, there will not be any of

them in the generated IL. Currently i'm having about 10x speed for

simple templates.

 

 

> By implementing a System.Type -> System.Reflection.MemberInfo map in
ASTExpr and

> caching the property accessors, I was able to reduce the time spent in

> ASTExpr.rawGetObjectProperty to 2.36% (inclusive).

 

This is a nice idea, would like to see implementation. There may be

even a further improvement by compiling property accessors as dynamic

methods such as (type, property) -> dynamic get delegate (though i'm

not %100 sure about that, need to see source code of new DLR)

 

> PS: I've thought about doing something similar to the CLI compilation
with

> ANTLR grammars, but profiling the generated code has shown that it's
not the bottleneck right now.

 

I don't know much about ANTLR and its grammars, other than a general

overview of what it is used for :(

_______________________________________________

stringtemplate-interest mailing list

stringtemplate-interest at antlr.org

http://www.antlr.org/mailman/listinfo/stringtemplate-interest

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20090318/94ee6415/attachment-0001.html 

From volkanceylan at gmail.com  Thu Mar 19 01:23:45 2009
From: volkanceylan at gmail.com (Volkan Ceylan)
Date: Thu, 19 Mar 2009 10:23:45 +0200
Subject: [stringtemplate-interest] StringTemplate Compiler for .NET
In-Reply-To: <f897bf780903190117t6cf8549au7cef082ef92b64af@mail.gmail.com>
References: <f897bf780902281444g7d26ca58kd443d740430109cf@mail.gmail.com>
	<86403CA0939415448BCCB83855EFE09AA67B62@Bloodymary.ironwillgames.com>
	<f897bf780903170139l423eb87bt2b4acb4472cf8cb@mail.gmail.com>
	<f897bf780903170151n2d0c1ab0laad262b581cf6253@mail.gmail.com>
	<86403CA0939415448BCCB83855EFE09AA67B8A@Bloodymary.ironwillgames.com>
	<f897bf780903190117t6cf8549au7cef082ef92b64af@mail.gmail.com>
Message-ID: <f897bf780903190123t35c39856nf8a467ebfaa59296@mail.gmail.com>

> So here we go/you?ve inspired me. :) For syntax highlighting, view in HTML.

Wouv i'm glad, thats great, ?;)

I still don't have access to repository and can't see actual code.
Prof. Parr could you please set up a readonly account for me to access
ST#3 code?

Btw, it would be great if expressions are compiled during parsing. As
i didn't want to modify ST code myself, i choosed another way. I'm
creating a set of dynamic methods/CompiledTemplate objects given a set
of StringTemplate/StringTemplateGroup objects. So when the template is
going to be converted to string with a new set of attributes by means
of compiledTemplate.GetInstanceOf().ToString(), there won't be any
dynamic compilation at this stage, just calls to dynamic methods. You
are not generating dynamic methods on evaluation stage each time a
template instance is converted to string, do you? It would be very
slow, because of the way ILGenerator works (probably you don't, i
couldn't have enough time to review code yet).

I would like to point in some performance bottlenecks that i
discovered during my development. Might be helpful if you are planning
to keep on doing compilations / optimizations.

- Anonymous templates (and most named templates) usually only have one
(or none) argument, "it" or a named variant of it e.g. "x". And there
is also
"i" and "i0" special variables. Even when a template access only these
attributes, a dictionary lookup is still required. And dictionary
lookup is slow (yes O(1) but still 10x slower than a direct variable
lookup). They should be treated specially in special template
variables. I did this for compiled templates and it helped a lot.
Templates with a single argument can also be treated specially.

- Options like separator, format, null, anchor etc. are all string
templates, even when they just contains of a constant simple string
(And most of the time like %99 they are constants). When they are
constants, they should also be treated specially.

- There is a list called EmbeddedInstances in each StringTemplate.
This list is not used anywhere, grows each time a template is
converted to a string and it prevents garbage collection of template
instances. Don't know if your port has them, but if it does, should be
removed.

- ASTExpr.ApplyListOfAlternatingTemplates is called even when there is
only one template and it has array lookup/modulus overheads. Also it
creates an array of templates for each element and returns that array
as results may be applied to another template, but most of the time
they don't. May be optimized by looking ahead in the expression tree
to see if there is an upcoming template application.

Volkan Ceylan

From sharwell at pixelminegames.com  Thu Mar 19 02:20:32 2009
From: sharwell at pixelminegames.com (Sam Harwell)
Date: Thu, 19 Mar 2009 04:20:32 -0500
Subject: [stringtemplate-interest] StringTemplate Compiler for .NET
In-Reply-To: <f897bf780903190123t35c39856nf8a467ebfaa59296@mail.gmail.com>
References: <f897bf780902281444g7d26ca58kd443d740430109cf@mail.gmail.com><86403CA0939415448BCCB83855EFE09AA67B62@Bloodymary.ironwillgames.com><f897bf780903170139l423eb87bt2b4acb4472cf8cb@mail.gmail.com><f897bf780903170151n2d0c1ab0laad262b581cf6253@mail.gmail.com><86403CA0939415448BCCB83855EFE09AA67B8A@Bloodymary.ironwillgames.com><f897bf780903190117t6cf8549au7cef082ef92b64af@mail.gmail.com>
	<f897bf780903190123t35c39856nf8a467ebfaa59296@mail.gmail.com>
Message-ID: <86403CA0939415448BCCB83855EFE09AA67B8B@Bloodymary.ironwillgames.com>

You have a lot of useful info there. Out of curiosity, I'm wondering how
fast this type of code would be. It works with the debugger and
IntelliSense tools better.

 

public

ifConditionFunctional returns
[System.Func<ASTExpr,StringTemplate,IStringTemplateWriter,bool> func]

        :       ifAtomFunctional

                {$func = $ifAtomFunctional.func;}

        |       ^(NOT ifAtomFunctional)

                {$func = (chunk,self,writer) =>
!($ifAtomFunctional.func(chunk,self,writer));}

        ;

 

ifAtomFunctional returns
[System.Func<ASTExpr,StringTemplate,IStringTemplateWriter,bool> func]

        :       exprFunctional

                {$func = (chunk,self,writer) =>
chunk.TestAttributeTrue($exprFunctional.func(chunk,self,writer));}

        ;

 

exprFunctional returns
[System.Func<ASTExpr,StringTemplate,IStringTemplateWriter,object> func]

        :       ^(PLUS a=exprFunctional b=exprFunctional)

                {$func = (chunk,self,writer) =>
chunk.Add($a.func(chunk,self,writer),$b.func(chunk,self,writer));}

        |       templateApplicationFunctional

                {$func = $templateApplicationFunctional.func;}

        |       attributeFunctional

                {$func = $attributeFunctional.func;}

        |       templateIncludeFunctional

                {$func = $templateIncludeFunctional.func;}

        |       functionFunctional

                {$func = $functionFunctional.func;}

        |       listFunctional

                {$func = $listFunctional.func;}

        |       ^(VALUE a=exprFunctional)

                {

                        $func = (chunk,self,writer) =>

                                {

                                        var value =
$a.func(chunk,self,writer);

                                        StringWriter buf = new
StringWriter();

                                        IStringTemplateWriter sw =
self.Group.GetStringTemplateWriter( buf );

                                        int n = chunk.WriteAttribute(
self, value, sw );

                                        if ( n > 0 )

                                                return buf.ToString();

                                        return value;

                                };

                }

        ;

 

Sam

 

-----Original Message-----
From: stringtemplate-interest-bounces at antlr.org
[mailto:stringtemplate-interest-bounces at antlr.org] On Behalf Of Volkan
Ceylan
Sent: Thursday, March 19, 2009 3:24 AM
To: stringtemplate-interest at antlr.org
Subject: Re: [stringtemplate-interest] StringTemplate Compiler for .NET

 

> So here we go/you've inspired me. :) For syntax highlighting, view in
HTML.

 

Wouv i'm glad, thats great,  ;)

 

I still don't have access to repository and can't see actual code.

Prof. Parr could you please set up a readonly account for me to access

ST#3 code?

 

Btw, it would be great if expressions are compiled during parsing. As

i didn't want to modify ST code myself, i choosed another way. I'm

creating a set of dynamic methods/CompiledTemplate objects given a set

of StringTemplate/StringTemplateGroup objects. So when the template is

going to be converted to string with a new set of attributes by means

of compiledTemplate.GetInstanceOf().ToString(), there won't be any

dynamic compilation at this stage, just calls to dynamic methods. You

are not generating dynamic methods on evaluation stage each time a

template instance is converted to string, do you? It would be very

slow, because of the way ILGenerator works (probably you don't, i

couldn't have enough time to review code yet).

 

I would like to point in some performance bottlenecks that i

discovered during my development. Might be helpful if you are planning

to keep on doing compilations / optimizations.

 

- Anonymous templates (and most named templates) usually only have one

(or none) argument, "it" or a named variant of it e.g. "x". And there

is also

"i" and "i0" special variables. Even when a template access only these

attributes, a dictionary lookup is still required. And dictionary

lookup is slow (yes O(1) but still 10x slower than a direct variable

lookup). They should be treated specially in special template

variables. I did this for compiled templates and it helped a lot.

Templates with a single argument can also be treated specially.

 

- Options like separator, format, null, anchor etc. are all string

templates, even when they just contains of a constant simple string

(And most of the time like %99 they are constants). When they are

constants, they should also be treated specially.

 

- There is a list called EmbeddedInstances in each StringTemplate.

This list is not used anywhere, grows each time a template is

converted to a string and it prevents garbage collection of template

instances. Don't know if your port has them, but if it does, should be

removed.

 

- ASTExpr.ApplyListOfAlternatingTemplates is called even when there is

only one template and it has array lookup/modulus overheads. Also it

creates an array of templates for each element and returns that array

as results may be applied to another template, but most of the time

they don't. May be optimized by looking ahead in the expression tree

to see if there is an upcoming template application.

 

Volkan Ceylan

_______________________________________________

stringtemplate-interest mailing list

stringtemplate-interest at antlr.org

http://www.antlr.org/mailman/listinfo/stringtemplate-interest

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20090319/cadc9e97/attachment-0001.html 

From parrt at cs.usfca.edu  Thu Mar 19 10:29:40 2009
From: parrt at cs.usfca.edu (Terence Parr)
Date: Thu, 19 Mar 2009 10:29:40 -0700
Subject: [stringtemplate-interest] [antlr-interest] Example of lazy
	evaluation in string templates ?
In-Reply-To: <49C229A7.1020408@ballesta.fr>
References: <49C229A7.1020408@ballesta.fr>
Message-ID: <6591AB1C-DE22-4DB5-A0E6-93F23A3AB205@cs.usfca.edu>

hi.  ST uses lazy evaluation in the sense that you can reference any  
attribute or template without concern that it will be evaluated until  
"the end" (ie., when you call toString()). This allows you to  
gradually fill in attributes as it's convenient to compute the as  
opposed to when the template references them. the key is to decouple  
the order of the output from the order of attribute computation. You  
also want to build up the overall output template in any order you  
want without concern that things will be evaluated too soon.

This is sort of a poor man's lazy evaluation in the sense that it  
doesn't do any dependency graph between values. It simply says make  
sure that all your values are set before calling toString.

  does that help?

Ter

On Mar 19, 2009, at 4:16 AM, bernard at ballesta.fr wrote:

> Hi,
>
> Does someone know of a real example of lazy evaluation in string  
> templates used in conjunction with a grammar or tree grammar.
>
> Best regards
> Bernard
> <bernard.vcf>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From sharwell at pixelminegames.com  Thu Mar 19 15:55:52 2009
From: sharwell at pixelminegames.com (Sam Harwell)
Date: Thu, 19 Mar 2009 17:55:52 -0500
Subject: [stringtemplate-interest] StringTemplate Compiler for .NET
In-Reply-To: <f897bf780903190251m38c18bc5xbd2a2a9329882af@mail.gmail.com>
References: <f897bf780902281444g7d26ca58kd443d740430109cf@mail.gmail.com>
	<86403CA0939415448BCCB83855EFE09AA67B62@Bloodymary.ironwillgames.com>
	<f897bf780903170139l423eb87bt2b4acb4472cf8cb@mail.gmail.com>
	<f897bf780903170151n2d0c1ab0laad262b581cf6253@mail.gmail.com>
	<86403CA0939415448BCCB83855EFE09AA67B8A@Bloodymary.ironwillgames.com>
	<f897bf780903190117t6cf8549au7cef082ef92b64af@mail.gmail.com>
	<f897bf780903190123t35c39856nf8a467ebfaa59296@mail.gmail.com>
	<86403CA0939415448BCCB83855EFE09AA67B8B@Bloodymary.ironwillgames.com>
	<f897bf780903190251m38c18bc5xbd2a2a9329882af@mail.gmail.com>
Message-ID: <86403CA0939415448BCCB83855EFE09AA67BA7@Bloodymary.ironwillgames.com>

I checked in (CL5952) an update that builds a delegate (System.Func<T>)
inside ActionEvaluator instead of basic interpretation. I have not
implemented caching of the delegates or optimized resolution of
arguments other special name attributes. However, the implementation is
a complete working example of execution of a compiled template that
passes the same 1200 unit tests that the interpreter does.

If optimizations including but not limited to known formal arguments
being resolved to a predetermined index when the functors are assembled,
this code could be a true beast. :)

In my test cases of using StringTemplate to generate code, I found that
a small percentage of calls to GetAttribute contained a special name
like "it". Almost all were names of formal arguments.

Sam

-----Original Message-----
From: Volkan Ceylan [mailto:volkanceylan at gmail.com] 
Sent: Thursday, March 19, 2009 4:51 AM
To: Sam Harwell
Subject: Re: [stringtemplate-interest] StringTemplate Compiler for .NET

Code and idea looks nice :) but as i said before i'm not as familiar
with ANTLR and it's grammars as you do :( I need to see resulting code
(in ActionEvaluator.cs?) and compare it to the old code to make a
comment on my opinion of how it would perform.

2009/3/19 Sam Harwell <sharwell at pixelminegames.com>:
> You have a lot of useful info there. Out of curiosity, I'm wondering
how
> fast this type of code would be. It works with the debugger and
IntelliSense
> tools better.
>
>
>
> public
>
> ifConditionFunctional returns
> ....


From volkanceylan at gmail.com  Fri Mar 20 00:33:03 2009
From: volkanceylan at gmail.com (Volkan Ceylan)
Date: Fri, 20 Mar 2009 09:33:03 +0200
Subject: [stringtemplate-interest] StringTemplate Compiler for .NET
In-Reply-To: <86403CA0939415448BCCB83855EFE09AA67BA7@Bloodymary.ironwillgames.com>
References: <f897bf780902281444g7d26ca58kd443d740430109cf@mail.gmail.com>
	<86403CA0939415448BCCB83855EFE09AA67B62@Bloodymary.ironwillgames.com>
	<f897bf780903170139l423eb87bt2b4acb4472cf8cb@mail.gmail.com>
	<f897bf780903170151n2d0c1ab0laad262b581cf6253@mail.gmail.com>
	<86403CA0939415448BCCB83855EFE09AA67B8A@Bloodymary.ironwillgames.com>
	<f897bf780903190117t6cf8549au7cef082ef92b64af@mail.gmail.com>
	<f897bf780903190123t35c39856nf8a467ebfaa59296@mail.gmail.com>
	<86403CA0939415448BCCB83855EFE09AA67B8B@Bloodymary.ironwillgames.com>
	<f897bf780903190251m38c18bc5xbd2a2a9329882af@mail.gmail.com>
	<86403CA0939415448BCCB83855EFE09AA67BA7@Bloodymary.ironwillgames.com>
Message-ID: <f897bf780903200033j35ea7e6er6e0fb1536878173a@mail.gmail.com>

2009/3/20 Sam Harwell <sharwell at pixelminegames.com>:
> I checked in (CL5952) an update that builds a delegate (System.Func<T>)
> inside ActionEvaluator instead of basic interpretation. I have not
> implemented caching of the delegates or optimized resolution of
> arguments other special name attributes. However, the implementation is
> a complete working example of execution of a compiled template that
> passes the same 1200 unit tests that the interpreter does.

Great, you are so fast, i hope i'll be able to see your work one day,
if Prof. Parr lets me :)

>
> If optimizations including but not limited to known formal arguments
> being resolved to a predetermined index when the functors are assembled,
> this code could be a true beast. :)
Yes, i forgot to mention that i also keep list of known arguments in
an argument array and access them by their predetermined index
directly.

>
> In my test cases of using StringTemplate to generate code, I found that
> a small percentage of calls to GetAttribute contained a special name
> like "it". Almost all were names of formal arguments.

I meant the sole argument of the template by "it", where for example
in template "$items:{x|$<b>x</b>$}$", here "x", the sole argument is
"it". There is no need for an argument array if template only has one
attribute. Yes, usually people don't use "it" as the default sole
argument name anymore.

From parrt at cs.usfca.edu  Fri Mar 20 11:36:39 2009
From: parrt at cs.usfca.edu (Terence Parr)
Date: Fri, 20 Mar 2009 11:36:39 -0700
Subject: [stringtemplate-interest] StringTemplate Compiler for .NET
In-Reply-To: <f897bf780902281444g7d26ca58kd443d740430109cf@mail.gmail.com>
References: <f897bf780902281444g7d26ca58kd443d740430109cf@mail.gmail.com>
Message-ID: <BF26EC58-22C2-413F-BABA-9E4FEE7BD18D@cs.usfca.edu>


On Feb 28, 2009, at 2:44 PM, Volkan Ceylan wrote:
> I'd appreciate any suggestions, ideas, help etc. Would like to hear  
> from Terrence (thanks a lot for letting me see the light :), opinion  
> as i read in the group he also has plans to turn StringTemplate into  
> a code generating compiler in v4.

Hi Volkan et al,

I have been thinking about this JSP-like approach to execution for  
awhile. With the complete rewrite, I suspect it's trivial to build a  
code generator as well as the interpreter. I still like the  
interpreter idea to avoid having to invoke a compiler and all that  
sort of thing when speed doesn't matter. for speed, I think we could  
do a pretty good job of cogeneration. A better even than a threaded  
approach.

Ter

From parrt at cs.usfca.edu  Fri Mar 20 11:43:38 2009
From: parrt at cs.usfca.edu (Terence Parr)
Date: Fri, 20 Mar 2009 11:43:38 -0700
Subject: [stringtemplate-interest] StringTemplate Compiler for .NET
In-Reply-To: <f897bf780903171206k443ed73dxece9a9862c983830@mail.gmail.com>
References: <f897bf780902281444g7d26ca58kd443d740430109cf@mail.gmail.com>
	<86403CA0939415448BCCB83855EFE09AA67B62@Bloodymary.ironwillgames.com>
	<f897bf780903170139l423eb87bt2b4acb4472cf8cb@mail.gmail.com>
	<f897bf780903170151n2d0c1ab0laad262b581cf6253@mail.gmail.com>
	<86403CA0939415448BCCB83855EFE09AA67B66@Bloodymary.ironwillgames.com>
	<20090317121231.237310@gmx.net>
	<86403CA0939415448BCCB83855EFE09AA67B71@Bloodymary.ironwillgames.com>
	<f897bf780903171206k443ed73dxece9a9862c983830@mail.gmail.com>
Message-ID: <3AFABCD6-0021-4D7F-A90D-B9B409075F8A@cs.usfca.edu>

Hi. I just realized that fisheye doesn't include Sam's excellent work:

http://fisheye2.atlassian.com/browse/stringtemplate

Hmm...Jim, can we get it posted to Hudson:

http://antlr.org/hudson/

Volkan, I just created a user, volkan, with no password that has read  
permissions to the entire antlrcs main directory:

         read user volkan * //depot/code/antlrcs/main/...

Ter

On Mar 17, 2009, at 12:06 PM, Volkan Ceylan wrote:

> Hi again.
>
> I didn't use Perforce before, installed it first time. As there seems
> to be no information about Perforce server URL in antlr.org,  found
> server address by googling as "antlr.org:666" and connected with
> "anonymous" user (guessing by luck) but i see only org.antlr directory
> under //depot/code, no antlrcs :( May be anonymous account doesn't
> have access to other directories or i'm using a wrong server, you have
> another repository server?? I would like to see your code, and base my
> compiler on your port if possible. Thanks for help.
>
> 2009/3/17 Sam Harwell <sharwell at pixelminegames.com>:
>> I put Antlr3.StringTemplate.dll and Antlr3.StringTemplate.pdb in:
>> //depot/code/antlrcs/main/bin/Bootstrap/
>>
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest


From parrt at cs.usfca.edu  Fri Mar 20 11:48:07 2009
From: parrt at cs.usfca.edu (Terence Parr)
Date: Fri, 20 Mar 2009 11:48:07 -0700
Subject: [stringtemplate-interest] StringTemplate Compiler for .NET
In-Reply-To: <f897bf780903190123t35c39856nf8a467ebfaa59296@mail.gmail.com>
References: <f897bf780902281444g7d26ca58kd443d740430109cf@mail.gmail.com>
	<86403CA0939415448BCCB83855EFE09AA67B62@Bloodymary.ironwillgames.com>
	<f897bf780903170139l423eb87bt2b4acb4472cf8cb@mail.gmail.com>
	<f897bf780903170151n2d0c1ab0laad262b581cf6253@mail.gmail.com>
	<86403CA0939415448BCCB83855EFE09AA67B8A@Bloodymary.ironwillgames.com>
	<f897bf780903190117t6cf8549au7cef082ef92b64af@mail.gmail.com>
	<f897bf780903190123t35c39856nf8a467ebfaa59296@mail.gmail.com>
Message-ID: <2A7B6700-A3E7-4A34-AF14-4BB0073D0265@cs.usfca.edu>

excellent information. I will take advantage of these optimizations  
for the next version.

I never bothered to optimize anything in ST so I guess there will be  
plenty of opportunities :)

Ter
On Mar 19, 2009, at 1:23 AM, Volkan Ceylan wrote:

>> So here we go/you?ve inspired me. :) For syntax highlighting, view  
>> in HTML.
>
> Wouv i'm glad, thats great,  ;)
>
> I still don't have access to repository and can't see actual code.
> Prof. Parr could you please set up a readonly account for me to access
> ST#3 code?
>
> Btw, it would be great if expressions are compiled during parsing. As
> i didn't want to modify ST code myself, i choosed another way. I'm
> creating a set of dynamic methods/CompiledTemplate objects given a set
> of StringTemplate/StringTemplateGroup objects. So when the template is
> going to be converted to string with a new set of attributes by means
> of compiledTemplate.GetInstanceOf().ToString(), there won't be any
> dynamic compilation at this stage, just calls to dynamic methods. You
> are not generating dynamic methods on evaluation stage each time a
> template instance is converted to string, do you? It would be very
> slow, because of the way ILGenerator works (probably you don't, i
> couldn't have enough time to review code yet).
>
> I would like to point in some performance bottlenecks that i
> discovered during my development. Might be helpful if you are planning
> to keep on doing compilations / optimizations.
>
> - Anonymous templates (and most named templates) usually only have one
> (or none) argument, "it" or a named variant of it e.g. "x". And there
> is also
> "i" and "i0" special variables. Even when a template access only these
> attributes, a dictionary lookup is still required. And dictionary
> lookup is slow (yes O(1) but still 10x slower than a direct variable
> lookup). They should be treated specially in special template
> variables. I did this for compiled templates and it helped a lot.
> Templates with a single argument can also be treated specially.
>
> - Options like separator, format, null, anchor etc. are all string
> templates, even when they just contains of a constant simple string
> (And most of the time like %99 they are constants). When they are
> constants, they should also be treated specially.
>
> - There is a list called EmbeddedInstances in each StringTemplate.
> This list is not used anywhere, grows each time a template is
> converted to a string and it prevents garbage collection of template
> instances. Don't know if your port has them, but if it does, should be
> removed.
>
> - ASTExpr.ApplyListOfAlternatingTemplates is called even when there is
> only one template and it has array lookup/modulus overheads. Also it
> creates an array of templates for each element and returns that array
> as results may be applied to another template, but most of the time
> they don't. May be optimized by looking ahead in the expression tree
> to see if there is an upcoming template application.
>
> Volkan Ceylan
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest


From parrt at cs.usfca.edu  Fri Mar 20 11:53:58 2009
From: parrt at cs.usfca.edu (Terence Parr)
Date: Fri, 20 Mar 2009 11:53:58 -0700
Subject: [stringtemplate-interest] Performance improvement in
	AutoIndentWriter
In-Reply-To: <86403CA0939415448BCCB83855EFE09AA67B7E@Bloodymary.ironwillgames.com>
References: <86403CA0939415448BCCB83855EFE09AA67B7E@Bloodymary.ironwillgames.com>
Message-ID: <617E3D2C-1996-4EB9-9FF7-613C37323DE3@cs.usfca.edu>

  interesting. So, the repeated IF statements inside my loop cost more  
than this double O(n) operation before the loop?

str.Contains( '\n' ) || str.Contains( '\r' )

and the replace operations?

Wow, that is not something I would expect to happen. I can take  
another look at this later
Ter

On Mar 17, 2009, at 11:24 AM, Sam Harwell wrote:

> In repeated profiling, I found that AutoIndentWriter.Write(string)  
> consumed just over 10% of the processing time. It was the most  
> expensive terminal function inside StringTemplate. I was able to cut  
> that better than in half by using faster string operations, and only  
> when necessary. Here is my code before and after the change.
>
> Before:
>
> public virtual int Write( string str )
> {
>     int n = 0;
>     int strLength = str.Length;
>     int newlineLength = _newline.Length;
>     for ( int i = 0; i < strLength; i++ )
>     {
>         char c = str[i];
>         // found \n or \r\n newline?
>         if ( c == '\r' || c == '\n' )
>         {
>             _atStartOfLine = true;
>             n += newlineLength; // wrote n more char
>             _writer.Write( _newline );
>             _charPosition = 0;
>             // skip an extra char upon \r\n
>             if ( ( c == '\r' && ( i + 1 ) < strLength && str[i+1] ==  
> '\n' ) )
>             {
>                 i++; // loop iteration i++ takes care of skipping  
> 2nd char
>             }
>             continue;
>         }
>         // normal character
>         // check to see if we are at the start of a line; need  
> indent if so
>         if ( _atStartOfLine )
>         {
>             n += Indent();
>             _atStartOfLine = false;
>         }
>         n++;
>         _writer.Write( c );
>         _charPosition++;
>     }
>     return n;
> }
>
>
> After:
>
> public virtual int Write( string str )
> {
>     if ( string.IsNullOrEmpty( str ) )
>     {
>         return 0;
>     }
>     else if ( str.Contains( '\n' ) || str.Contains( '\r' ) )
>     {
>         str = str.Replace( "\r\n", "\n" );
>         str = str.Replace( '\r', '\n' );
>         if ( _indents.Count > 1 )
>         {
>             string[] lines = str.Split( '\n' );
>             string indent = null;
>             for ( int i = 0; i < lines.Length; i++ )
>             {
>                 if ( ( i > 0 || _charPosition == 0 ) &&  
> lines[i].Length > 0 )
>                 {
>                     if ( indent == null )
>                     {
>                         indent = string.Join( string.Empty,  
> _indents.ToArray() );
>                         if ( indent.Length == 0 )
>                             break;
>                     }
>
>                     lines[i] = indent + lines[i];
>                 }
>             }
>
>             if ( lines.Length == 1 )
>             {
>                 str = lines[0];
>                 _charPosition += str.Length;
>             }
>             else
>             {
>                 str = string.Join( _newline, lines );
>                 _charPosition = lines[lines.Length - 1].Length;
>             }
>         }
>         else
>         {
>             if ( _newline != "\n" )
>                 str = str.Replace( "\n", _newline );
>             _charPosition = str.Length -  
> str.LastIndexOf( _newline[_newline.Length - 1] ) - 1;
>         }
>     }
>     else
>     {
>         if ( _charPosition == 0 && _indents.Count > 1 )
>         {
>             string indent = string.Join( string.Empty,  
> _indents.ToArray() );
>             str = indent + str;
>         }
>
>         _charPosition += str.Length;
>     }
>
>     Writer.Write( str );
>
>     _atStartOfLine = ( _charPosition == 0 );
>     return str.Length;
> }
>
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest


From parrt at cs.usfca.edu  Fri Mar 20 11:55:00 2009
From: parrt at cs.usfca.edu (Terence Parr)
Date: Fri, 20 Mar 2009 11:55:00 -0700
Subject: [stringtemplate-interest] String template book
In-Reply-To: <b32beff20903180853q3d34b951v10488fa96bec9ef3@mail.gmail.com>
References: <b32beff20903180853q3d34b951v10488fa96bec9ef3@mail.gmail.com>
Message-ID: <89C57B4F-7196-49A8-B276-EC2A7743A39B@cs.usfca.edu>

Hi David,

Glad you like ST better than velocity :)

The ANTLR book talks about the use of ST a lot for doing generation  
and so on. My next book will also use it a lot.

http://www.pragprog.com/titles/tpantlr/the-definitive-antlr-reference

Ter
On Mar 18, 2009, at 8:53 AM, David Hofmann wrote:

> Hi all,
>
> After I tried a little of velocity I took a look a this project and  
> though I don't understand very well all the aspects of stringtempate  
> it seems to be much better than what velocity can offer.
> I was going though the wiki of stringtemplate.org and the  
> documentation part but I couln't find any interesting book to buy on  
> stringtemplate though I have seen one for the antlr project.
>
> Besides this mailing list and the wiki on stringtemplate are there  
> any other resource to have a full look at the project ?
>
> Thanks for the work !
>
> Greetengs .
>
> --
> David Daniel Hofmann
> WebVAS, Nucleo S.A. - Telecom Personal Paraguay
> http://hofmanndavid.blogspot.com/
>
>
>
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest


From parrt at cs.usfca.edu  Fri Mar 20 11:58:36 2009
From: parrt at cs.usfca.edu (Terence Parr)
Date: Fri, 20 Mar 2009 11:58:36 -0700
Subject: [stringtemplate-interest] Problem with null actual parameters
	(in anonymous templates)
In-Reply-To: <49C11CE4.1080106@fmf.uni-lj.si>
References: <49C11CE4.1080106@fmf.uni-lj.si>
Message-ID: <932C6042-DC42-4B61-93A0-0093CDC54D54@cs.usfca.edu>

Wow. Yes, I had not thought of this. sometimes you want to say "empty"  
not missing. I'm not sure I see the infinite loop though. the only way  
to get an infinite loop is if they template is ultimately and  
enclosing template of itself.

Ter
On Mar 18, 2009, at 9:10 AM, Iztok Kavkler wrote:

> If an actual parameter to a template without formal attributes is
> specified but its value is null, the attribute will be looked-up in
> enclosing instances. This will almost always break recursive  
> invocations
> of templates (they are common in grammars with output=template),  
> because
> it creates cycles in the list of enclosing instances.
>
> For example, the following snippet should parse and print back nested
> functions with any number of parameters, like " f1(f2(), f3()) ",  
> but it
> actually dies with stack owerflow (or it diagnoses the cycle when lint
> is on):
>
> expr: id=IDENTIFIER '(' (pl+=expr (',' pl+=expr)*) ')'
> ->	template(id={$id.text}, par={$pl})
> 	<< <id>(<par; separator=", ">) >> ;
>
> The solution is simple: when checking for attributes th function
> StringTemplate.get should return null if the attribute is present but
> its value is null (some modifications to setAttribute are also
> necessary). The following patch to StringTemplate.java does the trick:
>
> 486c486
> < 		if ( value==null || name==null ) {
> ---
>> 		if ( name==null ) {
> 510a511,516
>> 		
>> 		// null value should be added only if the attribute does not yet  
>> exist
>> 		if ( value==null ) {
>> 		   return;
>> 		}
>> 		
> 772a779,783
>> 		// there is an actual argument, but it is null
>> 		if ( o==null && self.attributes!=null &&
> self.attributes.containsKey(attribute) ) {
>> 		   return o;
>> 		}
>>
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest


From sharwell at pixelminegames.com  Fri Mar 20 12:03:08 2009
From: sharwell at pixelminegames.com (Sam Harwell)
Date: Fri, 20 Mar 2009 14:03:08 -0500
Subject: [stringtemplate-interest] Question about ASTExpr.TestAttributeTrue
Message-ID: <86403CA0939415448BCCB83855EFE09AA67BB4@Bloodymary.ironwillgames.com>

Is the non-null empty string ("") true or false?

 

Thanks,

Sam :)

 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20090320/95e50d4f/attachment.html 

From parrt at cs.usfca.edu  Fri Mar 20 12:09:08 2009
From: parrt at cs.usfca.edu (Terence Parr)
Date: Fri, 20 Mar 2009 12:09:08 -0700
Subject: [stringtemplate-interest] Question about
	ASTExpr.TestAttributeTrue
In-Reply-To: <86403CA0939415448BCCB83855EFE09AA67BB4@Bloodymary.ironwillgames.com>
References: <86403CA0939415448BCCB83855EFE09AA67BB4@Bloodymary.ironwillgames.com>
Message-ID: <01E2AD00-4E15-4C9A-808B-5F4DD7DE1DB0@cs.usfca.edu>

True. it's present. IF always tests the presence or absence of an  
attribute, unless of course it's Boolean. Then, I have to test the  
value.
Ter
On Mar 20, 2009, at 12:03 PM, Sam Harwell wrote:

> Is the non-null empty string ("") true or false?
>
> Thanks,
> Sam :)
>
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest


From sharwell at pixelminegames.com  Fri Mar 20 12:11:35 2009
From: sharwell at pixelminegames.com (Sam Harwell)
Date: Fri, 20 Mar 2009 14:11:35 -0500
Subject: [stringtemplate-interest] Question about
	ASTExpr.TestAttributeTrue
In-Reply-To: <01E2AD00-4E15-4C9A-808B-5F4DD7DE1DB0@cs.usfca.edu>
References: <86403CA0939415448BCCB83855EFE09AA67BB4@Bloodymary.ironwillgames.com>
	<01E2AD00-4E15-4C9A-808B-5F4DD7DE1DB0@cs.usfca.edu>
Message-ID: <86403CA0939415448BCCB83855EFE09AA67BB6@Bloodymary.ironwillgames.com>

For enumerable items (do you call them iterable in java?), you check if
the length is > 0. Since a string implements IEnumerable<char> in .NET,
I had to make sure I handle it as a null-check. :)

-----Original Message-----
From: Terence Parr [mailto:parrt at cs.usfca.edu] 
Sent: Friday, March 20, 2009 2:09 PM
To: Sam Harwell
Cc: stringtemplate-interest at antlr.org
Subject: Re: [stringtemplate-interest] Question about
ASTExpr.TestAttributeTrue

True. it's present. IF always tests the presence or absence of an  
attribute, unless of course it's Boolean. Then, I have to test the  
value.
Ter
On Mar 20, 2009, at 12:03 PM, Sam Harwell wrote:

> Is the non-null empty string ("") true or false?
>
> Thanks,
> Sam :)
>
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest


From parrt at cs.usfca.edu  Fri Mar 20 12:16:49 2009
From: parrt at cs.usfca.edu (Terence Parr)
Date: Fri, 20 Mar 2009 12:16:49 -0700
Subject: [stringtemplate-interest] Question about
	ASTExpr.TestAttributeTrue
In-Reply-To: <86403CA0939415448BCCB83855EFE09AA67BB6@Bloodymary.ironwillgames.com>
References: <86403CA0939415448BCCB83855EFE09AA67BB4@Bloodymary.ironwillgames.com>
	<01E2AD00-4E15-4C9A-808B-5F4DD7DE1DB0@cs.usfca.edu>
	<86403CA0939415448BCCB83855EFE09AA67BB6@Bloodymary.ironwillgames.com>
Message-ID: <55FA411E-1F94-4F38-84D1-588B30F160CA@cs.usfca.edu>


On Mar 20, 2009, at 12:11 PM, Sam Harwell wrote:

> For enumerable items (do you call them iterable in java?), you check  
> if
> the length is > 0. Since a string implements IEnumerable<char>  
> in .NET,
> I had to make sure I handle it as a null-check. :)

Oh, I treats strings as atomic; I don't iterate over characters. The  
only thing I iterate over our multi-value attributes which are either  
lists and arrays or when you set a single attribute multiple times.
T

From jimi at temporal-wave.com  Fri Mar 20 12:36:40 2009
From: jimi at temporal-wave.com (Jim Idle)
Date: Fri, 20 Mar 2009 12:36:40 -0700
Subject: [stringtemplate-interest] StringTemplate Compiler for .NET
In-Reply-To: <3AFABCD6-0021-4D7F-A90D-B9B409075F8A@cs.usfca.edu>
References: <f897bf780902281444g7d26ca58kd443d740430109cf@mail.gmail.com>
	<86403CA0939415448BCCB83855EFE09AA67B62@Bloodymary.ironwillgames.com>
	<f897bf780903170139l423eb87bt2b4acb4472cf8cb@mail.gmail.com>
	<f897bf780903170151n2d0c1ab0laad262b581cf6253@mail.gmail.com>
	<86403CA0939415448BCCB83855EFE09AA67B66@Bloodymary.ironwillgames.com>
	<20090317121231.237310@gmx.net>
	<86403CA0939415448BCCB83855EFE09AA67B71@Bloodymary.ironwillgames.com>
	<f897bf780903171206k443ed73dxece9a9862c983830@mail.gmail.com>
	<3AFABCD6-0021-4D7F-A90D-B9B409075F8A@cs.usfca.edu>
Message-ID: <49C3F048.40805@temporal-wave.com>

Terence Parr wrote:
> Hi. I just realized that fisheye doesn't include Sam's excellent work:
>
> http://fisheye2.atlassian.com/browse/stringtemplate
>
> Hmm...Jim, can we get it posted to Hudson:
>
> http://antlr.org/hudson/
Hmm - building C# on Linux. Well, what I could do is just run a Hudson 
job that creates a zip of the source code if that helps.

Jim

From parrt at cs.usfca.edu  Fri Mar 20 12:47:40 2009
From: parrt at cs.usfca.edu (Terence Parr)
Date: Fri, 20 Mar 2009 12:47:40 -0700
Subject: [stringtemplate-interest] StringTemplate Compiler for .NET
In-Reply-To: <49C3F048.40805@temporal-wave.com>
References: <f897bf780902281444g7d26ca58kd443d740430109cf@mail.gmail.com>
	<86403CA0939415448BCCB83855EFE09AA67B62@Bloodymary.ironwillgames.com>
	<f897bf780903170139l423eb87bt2b4acb4472cf8cb@mail.gmail.com>
	<f897bf780903170151n2d0c1ab0laad262b581cf6253@mail.gmail.com>
	<86403CA0939415448BCCB83855EFE09AA67B66@Bloodymary.ironwillgames.com>
	<20090317121231.237310@gmx.net>
	<86403CA0939415448BCCB83855EFE09AA67B71@Bloodymary.ironwillgames.com>
	<f897bf780903171206k443ed73dxece9a9862c983830@mail.gmail.com>
	<3AFABCD6-0021-4D7F-A90D-B9B409075F8A@cs.usfca.edu>
	<49C3F048.40805@temporal-wave.com>
Message-ID: <30FFB764-B66E-4B7B-98DE-C841762537CD@cs.usfca.edu>

Hmm...I would like to be able to show the software tree; I'll ask the  
atlassian guys to update fisheye.
Ter
On Mar 20, 2009, at 12:36 PM, Jim Idle wrote:

> Terence Parr wrote:
>> Hi. I just realized that fisheye doesn't include Sam's excellent  
>> work:
>>
>> http://fisheye2.atlassian.com/browse/stringtemplate
>>
>> Hmm...Jim, can we get it posted to Hudson:
>>
>> http://antlr.org/hudson/
> Hmm - building C# on Linux. Well, what I could do is just run a  
> Hudson job that creates a zip of the source code if that helps.
>
> Jim


From iztok.kavkler at fmf.uni-lj.si  Fri Mar 20 13:14:21 2009
From: iztok.kavkler at fmf.uni-lj.si (Iztok Kavkler)
Date: Fri, 20 Mar 2009 21:14:21 +0100
Subject: [stringtemplate-interest] Problem with null actual parameters
 (in anonymous templates)
In-Reply-To: <932C6042-DC42-4B61-93A0-0093CDC54D54@cs.usfca.edu>
References: <49C11CE4.1080106@fmf.uni-lj.si>
	<932C6042-DC42-4B61-93A0-0093CDC54D54@cs.usfca.edu>
Message-ID: <49C3F91D.3020704@fmf.uni-lj.si>

I'm sorry, there was a slight mistake in the example, the '?' was
missing (so the pl could not be empty).

expr: id=IDENTIFIER '(' (pl+=expr (',' pl+=expr)*)? ')'
->    template(id={$id.text}, par={$pl})
    << <id>(<par; separator=", ">) >> ;

The reason for the infinite recursion is as follows: when processing
	f1(f2(), f3())
the first instance of the template gets paramaters
1)	id = "f1",  par = [f2(), f3()]
because expr rule is recursive, template is invoked recursively for both
parameters, first with
2)	id = "f2",  par = null
at this point, the engine will think that "par" is a missing parameter
and will check the enclosing instance, which is 1), obtaining
	par = [f2(), f3()]
and so on to infinity.


> Wow. Yes, I had not thought of this. sometimes you want to say "empty"
> not missing. I'm not sure I see the infinite loop though. the only way
> to get an infinite loop is if they template is ultimately and enclosing
> template of itself.
> 
> Ter
> On Mar 18, 2009, at 9:10 AM, Iztok Kavkler wrote:
> 
>> If an actual parameter to a template without formal attributes is
>> specified but its value is null, the attribute will be looked-up in
>> enclosing instances. This will almost always break recursive invocations
>> of templates (they are common in grammars with output=template), because
>> it creates cycles in the list of enclosing instances.
>>
>> For example, the following snippet should parse and print back nested
>> functions with any number of parameters, like " f1(f2(), f3()) ", but it
>> actually dies with stack owerflow (or it diagnoses the cycle when lint
>> is on):
>>
>> expr: id=IDENTIFIER '(' (pl+=expr (',' pl+=expr)*) ')'
>> ->    template(id={$id.text}, par={$pl})
>>     << <id>(<par; separator=", ">) >> ;
>>
>> The solution is simple: when checking for attributes th function
>> StringTemplate.get should return null if the attribute is present but
>> its value is null (some modifications to setAttribute are also
>> necessary). The following patch to StringTemplate.java does the trick:
>>
>> 486c486
>> <         if ( value==null || name==null ) {
>> ---
>>>         if ( name==null ) {
>> 510a511,516
>>>        
>>>         // null value should be added only if the attribute does not
>>> yet exist
>>>         if ( value==null ) {
>>>            return;
>>>         }
>>>        
>> 772a779,783
>>>         // there is an actual argument, but it is null
>>>         if ( o==null && self.attributes!=null &&
>> self.attributes.containsKey(attribute) ) {
>>>            return o;
>>>         }
>>>
>> _______________________________________________
>> stringtemplate-interest mailing list
>> stringtemplate-interest at antlr.org
>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
> 


From volkanceylan at gmail.com  Sat Mar 21 03:39:00 2009
From: volkanceylan at gmail.com (Volkan Ceylan)
Date: Sat, 21 Mar 2009 12:39:00 +0200
Subject: [stringtemplate-interest] StringTemplate Compiler for .NET
In-Reply-To: <86403CA0939415448BCCB83855EFE09AA67BA7@Bloodymary.ironwillgames.com>
References: <f897bf780902281444g7d26ca58kd443d740430109cf@mail.gmail.com>
	<86403CA0939415448BCCB83855EFE09AA67B62@Bloodymary.ironwillgames.com>
	<f897bf780903170139l423eb87bt2b4acb4472cf8cb@mail.gmail.com>
	<f897bf780903170151n2d0c1ab0laad262b581cf6253@mail.gmail.com>
	<86403CA0939415448BCCB83855EFE09AA67B8A@Bloodymary.ironwillgames.com>
	<f897bf780903190117t6cf8549au7cef082ef92b64af@mail.gmail.com>
	<f897bf780903190123t35c39856nf8a467ebfaa59296@mail.gmail.com>
	<86403CA0939415448BCCB83855EFE09AA67B8B@Bloodymary.ironwillgames.com>
	<f897bf780903190251m38c18bc5xbd2a2a9329882af@mail.gmail.com>
	<86403CA0939415448BCCB83855EFE09AA67BA7@Bloodymary.ironwillgames.com>
Message-ID: <f897bf780903210339s5b77c24dt242857b26479e9aa@mail.gmail.com>

Hi again,

Thanks a lot Prof. Parr, now i can see Sam's code.

It will take some time before i understand your work fully, but seems
like you are following a similar path with me,
emitting dynamic methods in ActionEvaluator.cs but certainly
proceeding a lot faster than me. If you finish your
work, mine will probably become obsolete but anyway i'll keep on
working, its a practice and brainstorming for me
to perform in evenings :)

Yesterday i made a profiling session to find out why it is working so
slow in StringTemplate.ToString() or
StringTemplate.Write methods using my templates. It seemed like most
calls are to new HashTable(),
new StringTemplate(), StringTemplate.BreakTemplateIntoChunks(),
GetConstructorInfo() methods. I can understand
new StringTemplate() calls caused by GetInstanceOf() methods but why
BreakTemplateIntoChunks()??
It shouldn't be parsing templates in evaluation stage.

In ActionEvaluator.attribute(), for ANONYMOUS_TEMPLATE nodes, there is
a code like below:

StringTemplate valueST = new StringTemplate(self.Group, at.GetText());
valueST.EnclosingInstance = self;
valueST.Name = "<anonymous template argument>";
value = valueST;

This is called for all anonymous templates and all separator, format,
null etc. options in each evaluation.
Caching the template by replacing code with:

if (at.StringTemplate == null)
{
   at.StringTemplate = new StringTemplate(at.getText());
   at.StringTemplate.Name = "<anonymous template argument>";
}
StringTemplate valueST = at.StringTemplate.GetInstanceOf();
valueST.EnclosingInstance = self;
valueST.Group = self.Group;
value = valueST;

removed all these parsing calls, and it saved a lot time alone as
parsing is slow.
Your port seems to have the same code block causing problem.

Reflection method GetConstructorInfo() was called in BreakTemplateIntoChunks()
while creating an instance of lexer class but seems like you spotted
that performance bottleneck.

There is also another potential problem i spotted while working on the compiler:

AFAIK, StringTemplate.ToString() calls (i mean evaluation) is
thread-safe, as long as you
use a unique instance created with GetInstanceOf() methods. I see no
reason why it should't.
But in just a few places in ActionEvaluator.cs for ANONYMOUS_TEMPLATE nodes,
and in ApplyTemplateToListOfAttributes, ApplyAlternatingTemplates
methods, an instance of
anonymous template is not used (by calling of GetInstanceOf()), but
directly anonymous
template itself is modified (this is not true for named templates,
always a new instance of
them is used). This will cause same anonymous template instance to be modified
in different threads. If threads modify at same time, this may cause
unexpected side-effects.
Am i wrong in assuming string template instance evaluation as
thread-safe or this is a bug??

2009/3/20 Sam Harwell <sharwell at pixelminegames.com>:
> I checked in (CL5952) an update that builds a delegate (System.Func<T>)
> inside ActionEvaluator instead of basic interpretation. I have not
> implemented caching of the delegates or optimized resolution of
> arguments other special name attributes. However, the implementation is
> a complete working example of execution of a compiled template that
> passes the same 1200 unit tests that the interpreter does.

From jaluber at gmx.de  Sat Mar 21 06:14:54 2009
From: jaluber at gmx.de (Johannes Luber)
Date: Sat, 21 Mar 2009 14:14:54 +0100
Subject: [stringtemplate-interest] StringTemplate Compiler for .NET
In-Reply-To: <49C3F048.40805@temporal-wave.com>
References: <f897bf780902281444g7d26ca58kd443d740430109cf@mail.gmail.com>	<86403CA0939415448BCCB83855EFE09AA67B62@Bloodymary.ironwillgames.com>	<f897bf780903170139l423eb87bt2b4acb4472cf8cb@mail.gmail.com>	<f897bf780903170151n2d0c1ab0laad262b581cf6253@mail.gmail.com>	<86403CA0939415448BCCB83855EFE09AA67B66@Bloodymary.ironwillgames.com>	<20090317121231.237310@gmx.net>	<86403CA0939415448BCCB83855EFE09AA67B71@Bloodymary.ironwillgames.com>	<f897bf780903171206k443ed73dxece9a9862c983830@mail.gmail.com>	<3AFABCD6-0021-4D7F-A90D-B9B409075F8A@cs.usfca.edu>
	<49C3F048.40805@temporal-wave.com>
Message-ID: <49C4E84E.4070503@gmx.de>

Jim Idle schrieb:
> Terence Parr wrote:
>> Hi. I just realized that fisheye doesn't include Sam's excellent work:
>>
>> http://fisheye2.atlassian.com/browse/stringtemplate
>>
>> Hmm...Jim, can we get it posted to Hudson:
>>
>> http://antlr.org/hudson/
> Hmm - building C# on Linux.

Are you saying you don't know that you could use mono to compile C# on
linux? Or is there another problem?

Johannes

> Well, what I could do is just run a Hudson 
> job that creates a zip of the source code if that helps.
> 
> Jim
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
> 


From jimi at temporal-wave.com  Sat Mar 21 08:41:23 2009
From: jimi at temporal-wave.com (Jim Idle)
Date: Sat, 21 Mar 2009 08:41:23 -0700
Subject: [stringtemplate-interest] StringTemplate Compiler for .NET
In-Reply-To: <49C4E84E.4070503@gmx.de>
References: <f897bf780902281444g7d26ca58kd443d740430109cf@mail.gmail.com>	<86403CA0939415448BCCB83855EFE09AA67B62@Bloodymary.ironwillgames.com>	<f897bf780903170139l423eb87bt2b4acb4472cf8cb@mail.gmail.com>	<f897bf780903170151n2d0c1ab0laad262b581cf6253@mail.gmail.com>	<86403CA0939415448BCCB83855EFE09AA67B66@Bloodymary.ironwillgames.com>	<20090317121231.237310@gmx.net>	<86403CA0939415448BCCB83855EFE09AA67B71@Bloodymary.ironwillgames.com>	<f897bf780903171206k443ed73dxece9a9862c983830@mail.gmail.com>	<3AFABCD6-0021-4D7F-A90D-B9B409075F8A@cs.usfca.edu>
	<49C3F048.40805@temporal-wave.com> <49C4E84E.4070503@gmx.de>
Message-ID: <49C50AA3.3000309@temporal-wave.com>

An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20090321/480bb49e/attachment.html 

From sharwell at pixelminegames.com  Sat Mar 21 12:07:37 2009
From: sharwell at pixelminegames.com (Sam Harwell)
Date: Sat, 21 Mar 2009 14:07:37 -0500
Subject: [stringtemplate-interest] StringTemplate Compiler for .NET
In-Reply-To: <f897bf780903210339s5b77c24dt242857b26479e9aa@mail.gmail.com>
References: <f897bf780902281444g7d26ca58kd443d740430109cf@mail.gmail.com>
	<86403CA0939415448BCCB83855EFE09AA67B62@Bloodymary.ironwillgames.com>
	<f897bf780903170139l423eb87bt2b4acb4472cf8cb@mail.gmail.com>
	<f897bf780903170151n2d0c1ab0laad262b581cf6253@mail.gmail.com>
	<86403CA0939415448BCCB83855EFE09AA67B8A@Bloodymary.ironwillgames.com>
	<f897bf780903190117t6cf8549au7cef082ef92b64af@mail.gmail.com>
	<f897bf780903190123t35c39856nf8a467ebfaa59296@mail.gmail.com>
	<86403CA0939415448BCCB83855EFE09AA67B8B@Bloodymary.ironwillgames.com>
	<f897bf780903190251m38c18bc5xbd2a2a9329882af@mail.gmail.com>
	<86403CA0939415448BCCB83855EFE09AA67BA7@Bloodymary.ironwillgames.com>
	<f897bf780903210339s5b77c24dt242857b26479e9aa@mail.gmail.com>
Message-ID: <86403CA0939415448BCCB83855EFE09AA67BC0@Bloodymary.ironwillgames.com>

This email describes a proposal that I'm absolutely willing to
implement. As I mention at the end, I'm very interested in feedback on
the idea as will.

Before I work to optimize handling of various cases, I'm modifying
StringTemplate to have a Frozen (immutable) state. Before the object is
frozen, a call to ToString() will internally call GetAsFrozen()
(actually not quite; see #4 below) to get a frozen duplicate of the
current template, and evaluate ToString() on it. A warning will
optionally be issued to stderr when this case occurs.

When a template is frozen, all attributes are locked and the expression
tree is compiled. However, a subsequent call to Clone will return an
non-frozen copy of the template with no attributes set. The advantage
comes from several key characteristics of the cloned copies:

1. The clone gets a copy of the compiled expression tree. As long as the
pattern is not changed, the expression tree will not need recompiling
before evaluation. The calls to Freeze or GetAsFrozen will simply lock
the attribute set.

2. When the expression tree is compiled, a List of objects is created
with a bucket for every referenced attribute of every template. When
SetAttribute is called, the value is placed immediately in the proper
bin for direct lookup during evaluation. Otherwise, it goes in the
dictionary and the values are placed in bins after the expression is
compiled.

3. If a never-frozen template is cloned, the non-compiled template is
copied on write. This means if *either* copy is frozen, both copies will
get the expression tree and bin layout. The frozen copy will move
attributes to the bins immediately; the other will copy them when it is
frozen later, but it won't have to recomputed the bins.

4. Calls to GetAsFrozen copy all frozen subtemplates by reference. Two
additional methods, CloneCurrentValue and GetCurrentValueAsFrozen,
return copies including all current attributes. Clearly a call to
GetCurrentValueAsFrozen on a frozen template will simply "return this;",
and a call to Freeze on a frozen template will immediately return. With
that said, a call to ToString on a non-frozen template will actually
call GetCurrentValueAsFrozen. :)

It's my opinion (open to suggestions) that this implementation is
appropriate for the following reasons:

A. It's conceptually straightforward and therefore straightforward to
implement.
B. It addresses all remaining bottlenecks that have been described here
on the list.
C. It offers excellent performance for a variety of uses/order of
operations. It's easy to add runtime warnings for performance-degrading
uses such as calls to ToString() on non-frozen templates while
simultaneously holding on to the compiled expression so the performance
is strong on later calls to ToString() on that same template.
D. Since the concept is not reliant on either the template compilation
method or syntax/built-in functions/features of the StringTemplate
language itself, it will be portable to version 4. We've also already
shown that multiple compilation techniques can be used targeting the
CLI, and I imagine similar could be done in Java (jealous of our lambdas
yet? =) ).

-----Original Message-----
From: Volkan Ceylan [mailto:volkanceylan at gmail.com] 
Sent: Saturday, March 21, 2009 5:39 AM
To: Sam Harwell; stringtemplate-interest at antlr.org
Subject: Re: [stringtemplate-interest] StringTemplate Compiler for .NET

Hi again,

Thanks a lot Prof. Parr, now i can see Sam's code.

It will take some time before i understand your work fully, but seems
like you are following a similar path with me,
emitting dynamic methods in ActionEvaluator.cs but certainly
proceeding a lot faster than me. If you finish your
work, mine will probably become obsolete but anyway i'll keep on
working, its a practice and brainstorming for me
to perform in evenings :)

Yesterday i made a profiling session to find out why it is working so
slow in StringTemplate.ToString() or
StringTemplate.Write methods using my templates. It seemed like most
calls are to new HashTable(),
new StringTemplate(), StringTemplate.BreakTemplateIntoChunks(),
GetConstructorInfo() methods. I can understand
new StringTemplate() calls caused by GetInstanceOf() methods but why
BreakTemplateIntoChunks()??
It shouldn't be parsing templates in evaluation stage.

In ActionEvaluator.attribute(), for ANONYMOUS_TEMPLATE nodes, there is
a code like below:

StringTemplate valueST = new StringTemplate(self.Group, at.GetText());
valueST.EnclosingInstance = self;
valueST.Name = "<anonymous template argument>";
value = valueST;

This is called for all anonymous templates and all separator, format,
null etc. options in each evaluation.
Caching the template by replacing code with:

if (at.StringTemplate == null)
{
   at.StringTemplate = new StringTemplate(at.getText());
   at.StringTemplate.Name = "<anonymous template argument>";
}
StringTemplate valueST = at.StringTemplate.GetInstanceOf();
valueST.EnclosingInstance = self;
valueST.Group = self.Group;
value = valueST;

removed all these parsing calls, and it saved a lot time alone as
parsing is slow.
Your port seems to have the same code block causing problem.

Reflection method GetConstructorInfo() was called in
BreakTemplateIntoChunks()
while creating an instance of lexer class but seems like you spotted
that performance bottleneck.

There is also another potential problem i spotted while working on the
compiler:

AFAIK, StringTemplate.ToString() calls (i mean evaluation) is
thread-safe, as long as you
use a unique instance created with GetInstanceOf() methods. I see no
reason why it should't.
But in just a few places in ActionEvaluator.cs for ANONYMOUS_TEMPLATE
nodes,
and in ApplyTemplateToListOfAttributes, ApplyAlternatingTemplates
methods, an instance of
anonymous template is not used (by calling of GetInstanceOf()), but
directly anonymous
template itself is modified (this is not true for named templates,
always a new instance of
them is used). This will cause same anonymous template instance to be
modified
in different threads. If threads modify at same time, this may cause
unexpected side-effects.
Am i wrong in assuming string template instance evaluation as
thread-safe or this is a bug??

2009/3/20 Sam Harwell <sharwell at pixelminegames.com>:
> I checked in (CL5952) an update that builds a delegate
(System.Func<T>)
> inside ActionEvaluator instead of basic interpretation. I have not
> implemented caching of the delegates or optimized resolution of
> arguments other special name attributes. However, the implementation
is
> a complete working example of execution of a compiled template that
> passes the same 1200 unit tests that the interpreter does.

From jaluber at gmx.de  Sat Mar 21 16:30:57 2009
From: jaluber at gmx.de (Johannes Luber)
Date: Sun, 22 Mar 2009 00:30:57 +0100
Subject: [stringtemplate-interest] StringTemplate Compiler for .NET
In-Reply-To: <86403CA0939415448BCCB83855EFE09AA67BC0@Bloodymary.ironwillgames.com>
References: <f897bf780902281444g7d26ca58kd443d740430109cf@mail.gmail.com>	<86403CA0939415448BCCB83855EFE09AA67B62@Bloodymary.ironwillgames.com>	<f897bf780903170139l423eb87bt2b4acb4472cf8cb@mail.gmail.com>	<f897bf780903170151n2d0c1ab0laad262b581cf6253@mail.gmail.com>	<86403CA0939415448BCCB83855EFE09AA67B8A@Bloodymary.ironwillgames.com>	<f897bf780903190117t6cf8549au7cef082ef92b64af@mail.gmail.com>	<f897bf780903190123t35c39856nf8a467ebfaa59296@mail.gmail.com>	<86403CA0939415448BCCB83855EFE09AA67B8B@Bloodymary.ironwillgames.com>	<f897bf780903190251m38c18bc5xbd2a2a9329882af@mail.gmail.com>	<86403CA0939415448BCCB83855EFE09AA67BA7@Bloodymary.ironwillgames.com>	<f897bf780903210339s5b77c24dt242857b26479e9aa@mail.gmail.com>
	<86403CA0939415448BCCB83855EFE09AA67BC0@Bloodymary.ironwillgames.com>
Message-ID: <49C578B1.2060206@gmx.de>

Sam Harwell schrieb:
> This email describes a proposal that I'm absolutely willing to
> implement. As I mention at the end, I'm very interested in feedback on
> the idea as will.
> 
> Before I work to optimize handling of various cases, I'm modifying
> StringTemplate to have a Frozen (immutable) state. Before the object is
> frozen, a call to ToString() will internally call GetAsFrozen()
> (actually not quite; see #4 below) to get a frozen duplicate of the
> current template, and evaluate ToString() on it. A warning will
> optionally be issued to stderr when this case occurs.

I don't get how a non-frozen template can return the correct results, if
you say that this should be considered an error. Furthermore, at which
point are templates frozen? Is this done automatically? If yes, how can
you be sure of the correct time? What happens if someone wants to modify
a frozen template? Does this result in an error or do return a modified
clone (with set attributes)?
> 
> When a template is frozen, all attributes are locked and the expression
> tree is compiled. However, a subsequent call to Clone will return an
> non-frozen copy of the template with no attributes set. The advantage
> comes from several key characteristics of the cloned copies:

Apropos compilation: You said you are using the codedom, right? Isn't
that too buggy for more than academic use?
> 
> 1. The clone gets a copy of the compiled expression tree. As long as the
> pattern is not changed, the expression tree will not need recompiling
> before evaluation. The calls to Freeze or GetAsFrozen will simply lock
> the attribute set.
> 
> 2. When the expression tree is compiled, a List of objects is created
> with a bucket for every referenced attribute of every template. When
> SetAttribute is called, the value is placed immediately in the proper
> bin for direct lookup during evaluation. Otherwise, it goes in the
> dictionary and the values are placed in bins after the expression is
> compiled.

I don't get item two without any examples... Otherwise your design seems
to be quite sound.

Johannes
> 
> 3. If a never-frozen template is cloned, the non-compiled template is
> copied on write. This means if *either* copy is frozen, both copies will
> get the expression tree and bin layout. The frozen copy will move
> attributes to the bins immediately; the other will copy them when it is
> frozen later, but it won't have to recomputed the bins.
> 
> 4. Calls to GetAsFrozen copy all frozen subtemplates by reference. Two
> additional methods, CloneCurrentValue and GetCurrentValueAsFrozen,
> return copies including all current attributes. Clearly a call to
> GetCurrentValueAsFrozen on a frozen template will simply "return this;",
> and a call to Freeze on a frozen template will immediately return. With
> that said, a call to ToString on a non-frozen template will actually
> call GetCurrentValueAsFrozen. :)
> 
> It's my opinion (open to suggestions) that this implementation is
> appropriate for the following reasons:
> 
> A. It's conceptually straightforward and therefore straightforward to
> implement.
> B. It addresses all remaining bottlenecks that have been described here
> on the list.
> C. It offers excellent performance for a variety of uses/order of
> operations. It's easy to add runtime warnings for performance-degrading
> uses such as calls to ToString() on non-frozen templates while
> simultaneously holding on to the compiled expression so the performance
> is strong on later calls to ToString() on that same template.
> D. Since the concept is not reliant on either the template compilation
> method or syntax/built-in functions/features of the StringTemplate
> language itself, it will be portable to version 4. We've also already
> shown that multiple compilation techniques can be used targeting the
> CLI, and I imagine similar could be done in Java (jealous of our lambdas
> yet? =) ).
> 
> -----Original Message-----
> From: Volkan Ceylan [mailto:volkanceylan at gmail.com] 
> Sent: Saturday, March 21, 2009 5:39 AM
> To: Sam Harwell; stringtemplate-interest at antlr.org
> Subject: Re: [stringtemplate-interest] StringTemplate Compiler for .NET
> 
> Hi again,
> 
> Thanks a lot Prof. Parr, now i can see Sam's code.
> 
> It will take some time before i understand your work fully, but seems
> like you are following a similar path with me,
> emitting dynamic methods in ActionEvaluator.cs but certainly
> proceeding a lot faster than me. If you finish your
> work, mine will probably become obsolete but anyway i'll keep on
> working, its a practice and brainstorming for me
> to perform in evenings :)
> 
> Yesterday i made a profiling session to find out why it is working so
> slow in StringTemplate.ToString() or
> StringTemplate.Write methods using my templates. It seemed like most
> calls are to new HashTable(),
> new StringTemplate(), StringTemplate.BreakTemplateIntoChunks(),
> GetConstructorInfo() methods. I can understand
> new StringTemplate() calls caused by GetInstanceOf() methods but why
> BreakTemplateIntoChunks()??
> It shouldn't be parsing templates in evaluation stage.
> 
> In ActionEvaluator.attribute(), for ANONYMOUS_TEMPLATE nodes, there is
> a code like below:
> 
> StringTemplate valueST = new StringTemplate(self.Group, at.GetText());
> valueST.EnclosingInstance = self;
> valueST.Name = "<anonymous template argument>";
> value = valueST;
> 
> This is called for all anonymous templates and all separator, format,
> null etc. options in each evaluation.
> Caching the template by replacing code with:
> 
> if (at.StringTemplate == null)
> {
>    at.StringTemplate = new StringTemplate(at.getText());
>    at.StringTemplate.Name = "<anonymous template argument>";
> }
> StringTemplate valueST = at.StringTemplate.GetInstanceOf();
> valueST.EnclosingInstance = self;
> valueST.Group = self.Group;
> value = valueST;
> 
> removed all these parsing calls, and it saved a lot time alone as
> parsing is slow.
> Your port seems to have the same code block causing problem.
> 
> Reflection method GetConstructorInfo() was called in
> BreakTemplateIntoChunks()
> while creating an instance of lexer class but seems like you spotted
> that performance bottleneck.
> 
> There is also another potential problem i spotted while working on the
> compiler:
> 
> AFAIK, StringTemplate.ToString() calls (i mean evaluation) is
> thread-safe, as long as you
> use a unique instance created with GetInstanceOf() methods. I see no
> reason why it should't.
> But in just a few places in ActionEvaluator.cs for ANONYMOUS_TEMPLATE
> nodes,
> and in ApplyTemplateToListOfAttributes, ApplyAlternatingTemplates
> methods, an instance of
> anonymous template is not used (by calling of GetInstanceOf()), but
> directly anonymous
> template itself is modified (this is not true for named templates,
> always a new instance of
> them is used). This will cause same anonymous template instance to be
> modified
> in different threads. If threads modify at same time, this may cause
> unexpected side-effects.
> Am i wrong in assuming string template instance evaluation as
> thread-safe or this is a bug??
> 
> 2009/3/20 Sam Harwell <sharwell at pixelminegames.com>:
>> I checked in (CL5952) an update that builds a delegate
> (System.Func<T>)
>> inside ActionEvaluator instead of basic interpretation. I have not
>> implemented caching of the delegates or optimized resolution of
>> arguments other special name attributes. However, the implementation
> is
>> a complete working example of execution of a compiled template that
>> passes the same 1200 unit tests that the interpreter does.
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
> 


From volkanceylan at gmail.com  Sun Mar 22 03:02:49 2009
From: volkanceylan at gmail.com (Volkan Ceylan)
Date: Sun, 22 Mar 2009 12:02:49 +0200
Subject: [stringtemplate-interest] StringTemplate Compiler for .NET
In-Reply-To: <f897bf780903220300t1a0acc8cp1b78e8db65f8e84d@mail.gmail.com>
References: <f897bf780902281444g7d26ca58kd443d740430109cf@mail.gmail.com>
	<86403CA0939415448BCCB83855EFE09AA67B8A@Bloodymary.ironwillgames.com>
	<f897bf780903190117t6cf8549au7cef082ef92b64af@mail.gmail.com>
	<f897bf780903190123t35c39856nf8a467ebfaa59296@mail.gmail.com>
	<86403CA0939415448BCCB83855EFE09AA67B8B@Bloodymary.ironwillgames.com>
	<f897bf780903190251m38c18bc5xbd2a2a9329882af@mail.gmail.com>
	<86403CA0939415448BCCB83855EFE09AA67BA7@Bloodymary.ironwillgames.com>
	<f897bf780903210339s5b77c24dt242857b26479e9aa@mail.gmail.com>
	<86403CA0939415448BCCB83855EFE09AA67BC0@Bloodymary.ironwillgames.com>
	<f897bf780903220300t1a0acc8cp1b78e8db65f8e84d@mail.gmail.com>
Message-ID: <f897bf780903220302y3a5be4adj2e450b4fc2478e9f@mail.gmail.com>

As i understand, you are trying to create a slot (bin) for all
referencable attributes in the template and
its all anonymous subtemplates in its expression tree. As far as i
know, one can access a calculated
property of an object by means of "attribute.(expression)" but
currently there is no way to
access a template attribute whose name is calculated by an expression
like "(expression)".

Unless an idea of "this" special variable is introduced into
StringTemplate, and it is allowed access
an attribute by an expression like this.(expression), your idea of
given a template, list of attributes that
could be accessed is constant is right. So creating a bin for every
possible attribute and accessing attributes
by their predetermined index is possible. This will eliminate the need
for hash tables, and also eliminate
recursive attribute lookups from a subtemplate to the root template.

I'm sure you are aware that same doesn't hold true for formal
arguments (or default arguments it, i0, i, x etc)
and every anonymous template instance should have its own array of
arguments, even though its also
predetermined list of bins. Also it should be noted that if an
anonymous template/subtemplate has a formal
argument it's value takes predence over a possible global attribute
with the same name.

ST is similar to a lets say a javascript program where attributes are
global variables and arguments are
function parameters. Each template instance is a function with
arguments where its a dynamic
subfunction of its enclosing instance as its enclosing instance may
change dynamically for named
template calls.

There may be some problems when PassThroughAttributes is enabled that
you should be aware of.

From volkanceylan at gmail.com  Sun Mar 22 03:06:23 2009
From: volkanceylan at gmail.com (Volkan Ceylan)
Date: Sun, 22 Mar 2009 12:06:23 +0200
Subject: [stringtemplate-interest] StringTemplate Compiler for .NET
In-Reply-To: <86403CA0939415448BCCB83855EFE09AA67BC0@Bloodymary.ironwillgames.com>
References: <f897bf780902281444g7d26ca58kd443d740430109cf@mail.gmail.com>
	<f897bf780903170151n2d0c1ab0laad262b581cf6253@mail.gmail.com>
	<86403CA0939415448BCCB83855EFE09AA67B8A@Bloodymary.ironwillgames.com>
	<f897bf780903190117t6cf8549au7cef082ef92b64af@mail.gmail.com>
	<f897bf780903190123t35c39856nf8a467ebfaa59296@mail.gmail.com>
	<86403CA0939415448BCCB83855EFE09AA67B8B@Bloodymary.ironwillgames.com>
	<f897bf780903190251m38c18bc5xbd2a2a9329882af@mail.gmail.com>
	<86403CA0939415448BCCB83855EFE09AA67BA7@Bloodymary.ironwillgames.com>
	<f897bf780903210339s5b77c24dt242857b26479e9aa@mail.gmail.com>
	<86403CA0939415448BCCB83855EFE09AA67BC0@Bloodymary.ironwillgames.com>
Message-ID: <f897bf780903220306q6aeb8c8t22eb03743928251b@mail.gmail.com>

Sam, i also forgot to ask about what you are thinking on handling
named template calls inside a frozen template?
As a templates group may be changed dynamically, and named templates
may neeed to access attributes
by name, are you planning to compile a template's group and its named
templates with the template together and
recompile if group change??

From sharwell at pixelminegames.com  Sun Mar 22 06:21:45 2009
From: sharwell at pixelminegames.com (Sam Harwell)
Date: Sun, 22 Mar 2009 08:21:45 -0500
Subject: [stringtemplate-interest] StringTemplate Compiler for .NET
In-Reply-To: <49C578B1.2060206@gmx.de>
References: <f897bf780902281444g7d26ca58kd443d740430109cf@mail.gmail.com>	<86403CA0939415448BCCB83855EFE09AA67B62@Bloodymary.ironwillgames.com>	<f897bf780903170139l423eb87bt2b4acb4472cf8cb@mail.gmail.com>	<f897bf780903170151n2d0c1ab0laad262b581cf6253@mail.gmail.com>	<86403CA0939415448BCCB83855EFE09AA67B8A@Bloodymary.ironwillgames.com>	<f897bf780903190117t6cf8549au7cef082ef92b64af@mail.gmail.com>	<f897bf780903190123t35c39856nf8a467ebfaa59296@mail.gmail.com>	<86403CA0939415448BCCB83855EFE09AA67B8B@Bloodymary.ironwillgames.com>	<f897bf780903190251m38c18bc5xbd2a2a9329882af@mail.gmail.com>	<86403CA0939415448BCCB83855EFE09AA67BA7@Bloodymary.ironwillgames.com>	<f897bf780903210339s5b77c24dt242857b26479e9aa@mail.gmail.com>
	<86403CA0939415448BCCB83855EFE09AA67BC0@Bloodymary.ironwillgames.com>
	<49C578B1.2060206@gmx.de>
Message-ID: <86403CA0939415448BCCB83855EFE09AA67BC5@Bloodymary.ironwillgames.com>

When you hit a breakpoint in Visual Studio, ToString is called
automatically during Watch/Locals evaluation. I need to handle this
cleanly.

Freezing can be done implicitly or explicitly. A frozen template can be
modified by cloning it and working with the clone. Implicit freezing
occurs when ToString() is called on a non-frozen template: a frozen
clone is created, then that clone is evaluated to return the string.
Explicit cloning occurs via a call to Freeze (freezes the current
object) or GetAsFrozen (returns a frozen clone of the object, copying by
reference where possible).

I'm using Func<T> or the IL Generator for my codegen methods. The
Func<T> method is currently working since it easily expresses functional
languages and can be debugged, but it may be slower than IL gen in the
end due to more difficult inlining which I haven't implemented yet.
Profiling showed that current bottlenecks are not in either building the
functional representation or in evaluating the functor itself.

Sam

-----Original Message-----
From: Johannes Luber [mailto:jaluber at gmx.de] 
Sent: Saturday, March 21, 2009 6:31 PM
To: Sam Harwell
Cc: Volkan Ceylan; stringtemplate-interest at antlr.org
Subject: Re: [stringtemplate-interest] StringTemplate Compiler for .NET

Sam Harwell schrieb:
> This email describes a proposal that I'm absolutely willing to
> implement. As I mention at the end, I'm very interested in feedback on
> the idea as will.
> 
> Before I work to optimize handling of various cases, I'm modifying
> StringTemplate to have a Frozen (immutable) state. Before the object
is
> frozen, a call to ToString() will internally call GetAsFrozen()
> (actually not quite; see #4 below) to get a frozen duplicate of the
> current template, and evaluate ToString() on it. A warning will
> optionally be issued to stderr when this case occurs.

I don't get how a non-frozen template can return the correct results, if
you say that this should be considered an error. Furthermore, at which
point are templates frozen? Is this done automatically? If yes, how can
you be sure of the correct time? What happens if someone wants to modify
a frozen template? Does this result in an error or do return a modified
clone (with set attributes)?
> 
> When a template is frozen, all attributes are locked and the
expression
> tree is compiled. However, a subsequent call to Clone will return an
> non-frozen copy of the template with no attributes set. The advantage
> comes from several key characteristics of the cloned copies:

Apropos compilation: You said you are using the codedom, right? Isn't
that too buggy for more than academic use?
> 
> 1. The clone gets a copy of the compiled expression tree. As long as
the
> pattern is not changed, the expression tree will not need recompiling
> before evaluation. The calls to Freeze or GetAsFrozen will simply lock
> the attribute set.
> 
> 2. When the expression tree is compiled, a List of objects is created
> with a bucket for every referenced attribute of every template. When
> SetAttribute is called, the value is placed immediately in the proper
> bin for direct lookup during evaluation. Otherwise, it goes in the
> dictionary and the values are placed in bins after the expression is
> compiled.

I don't get item two without any examples... Otherwise your design seems
to be quite sound.

Johannes


From sharwell at pixelminegames.com  Sun Mar 22 06:37:06 2009
From: sharwell at pixelminegames.com (Sam Harwell)
Date: Sun, 22 Mar 2009 08:37:06 -0500
Subject: [stringtemplate-interest] StringTemplate Compiler for .NET
In-Reply-To: <f897bf780903220302y3a5be4adj2e450b4fc2478e9f@mail.gmail.com>
References: <f897bf780902281444g7d26ca58kd443d740430109cf@mail.gmail.com><86403CA0939415448BCCB83855EFE09AA67B8A@Bloodymary.ironwillgames.com><f897bf780903190117t6cf8549au7cef082ef92b64af@mail.gmail.com><f897bf780903190123t35c39856nf8a467ebfaa59296@mail.gmail.com><86403CA0939415448BCCB83855EFE09AA67B8B@Bloodymary.ironwillgames.com><f897bf780903190251m38c18bc5xbd2a2a9329882af@mail.gmail.com><86403CA0939415448BCCB83855EFE09AA67BA7@Bloodymary.ironwillgames.com><f897bf780903210339s5b77c24dt242857b26479e9aa@mail.gmail.com><86403CA0939415448BCCB83855EFE09AA67BC0@Bloodymary.ironwillgames.com><f897bf780903220300t1a0acc8cp1b78e8db65f8e84d@mail.gmail.com>
	<f897bf780903220302y3a5be4adj2e450b4fc2478e9f@mail.gmail.com>
Message-ID: <86403CA0939415448BCCB83855EFE09AA67BC6@Bloodymary.ironwillgames.com>

Properties of an object are different than the object reference itself.
When evaluating "attribute.(expression)", only one bin is required for
'attribute'. Depending on how "expression" is formed, its leftmost items
of subexpressions may need bins as well.

There are various ways to modify the binning to handle nested lookups,
etc. One possibility is placing a Stack in the bin with attribute values
and precedence levels. Another possibility is using something similar to
vtable lookup, with a "version" attribute specified on the entries that
is incremented when a child template overrides one of its attributes.
The version allows expiration of the entry so children of the template
that were relying on no overrides of that attribute perform a new
recursive attribute lookup.

Attribute names may need mangling of some form during compilation.

I'm sure I'll run into quite a few problems with the nuances as I work
on this. :o I'll have to look into this more.

Sam

-----Original Message-----
From: stringtemplate-interest-bounces at antlr.org
[mailto:stringtemplate-interest-bounces at antlr.org] On Behalf Of Volkan
Ceylan
Sent: Sunday, March 22, 2009 5:03 AM
To: stringtemplate-interest at antlr.org
Subject: Re: [stringtemplate-interest] StringTemplate Compiler for .NET

As i understand, you are trying to create a slot (bin) for all
referencable attributes in the template and
its all anonymous subtemplates in its expression tree. As far as i
know, one can access a calculated
property of an object by means of "attribute.(expression)" but
currently there is no way to
access a template attribute whose name is calculated by an expression
like "(expression)".

Unless an idea of "this" special variable is introduced into
StringTemplate, and it is allowed access
an attribute by an expression like this.(expression), your idea of
given a template, list of attributes that
could be accessed is constant is right. So creating a bin for every
possible attribute and accessing attributes
by their predetermined index is possible. This will eliminate the need
for hash tables, and also eliminate
recursive attribute lookups from a subtemplate to the root template.

I'm sure you are aware that same doesn't hold true for formal
arguments (or default arguments it, i0, i, x etc)
and every anonymous template instance should have its own array of
arguments, even though its also
predetermined list of bins. Also it should be noted that if an
anonymous template/subtemplate has a formal
argument it's value takes predence over a possible global attribute
with the same name.

ST is similar to a lets say a javascript program where attributes are
global variables and arguments are
function parameters. Each template instance is a function with
arguments where its a dynamic
subfunction of its enclosing instance as its enclosing instance may
change dynamically for named
template calls.

There may be some problems when PassThroughAttributes is enabled that
you should be aware of.
_______________________________________________
stringtemplate-interest mailing list
stringtemplate-interest at antlr.org
http://www.antlr.org/mailman/listinfo/stringtemplate-interest

From sharwell at pixelminegames.com  Mon Mar 23 22:46:01 2009
From: sharwell at pixelminegames.com (Sam Harwell)
Date: Tue, 24 Mar 2009 00:46:01 -0500
Subject: [stringtemplate-interest] StringTemplate Compiler for .NET
In-Reply-To: <f897bf780903210339s5b77c24dt242857b26479e9aa@mail.gmail.com>
References: <f897bf780902281444g7d26ca58kd443d740430109cf@mail.gmail.com>
	<86403CA0939415448BCCB83855EFE09AA67B62@Bloodymary.ironwillgames.com>
	<f897bf780903170139l423eb87bt2b4acb4472cf8cb@mail.gmail.com>
	<f897bf780903170151n2d0c1ab0laad262b581cf6253@mail.gmail.com>
	<86403CA0939415448BCCB83855EFE09AA67B8A@Bloodymary.ironwillgames.com>
	<f897bf780903190117t6cf8549au7cef082ef92b64af@mail.gmail.com>
	<f897bf780903190123t35c39856nf8a467ebfaa59296@mail.gmail.com>
	<86403CA0939415448BCCB83855EFE09AA67B8B@Bloodymary.ironwillgames.com>
	<f897bf780903190251m38c18bc5xbd2a2a9329882af@mail.gmail.com>
	<86403CA0939415448BCCB83855EFE09AA67BA7@Bloodymary.ironwillgames.com>
	<f897bf780903210339s5b77c24dt242857b26479e9aa@mail.gmail.com>
Message-ID: <86403CA0939415448BCCB83855EFE09AA67BDA@Bloodymary.ironwillgames.com>

I implemented more (almost all of) of the DynamicMethod compiler in
ActionEvaluator. In its present state, the functional compiler is
tremendously faster. The only hope for DynamicMethod is compiling (once)
a template that gets evaluated many times. Currently the program I'm
using for testing doesn't implement a template caching strategy that
comes even close to meeting this condition. Nevertheless, I've checked
in the work to give an idea of what's involved. If you plan to work with
this code, I highly recommend the DynamicMethod visualizer for Visual
Studio so you can see the full generated IL code for a compiled method.
http://weblogs.asp.net/rosherove/archive/2007/11/02/debugger-visualizers
-for-methodinfo-dynamicmethod-and-methodbase.aspx

I think I'll put further work on the compiler on ice until frozen
templates are implemented. I should have frozen templates
implemented/checked in by the end of the week, at which point we can
start to look at improved compilation that takes advantage of the
templates' immutable state.

Sam

-----Original Message-----
From: Volkan Ceylan [mailto:volkanceylan at gmail.com] 
Sent: Saturday, March 21, 2009 5:39 AM
To: Sam Harwell; stringtemplate-interest at antlr.org
Subject: Re: [stringtemplate-interest] StringTemplate Compiler for .NET

Hi again,

Thanks a lot Prof. Parr, now i can see Sam's code.

It will take some time before i understand your work fully, but seems
like you are following a similar path with me,
emitting dynamic methods in ActionEvaluator.cs but certainly
proceeding a lot faster than me. If you finish your
work, mine will probably become obsolete but anyway i'll keep on
working, its a practice and brainstorming for me
to perform in evenings :)

Yesterday i made a profiling session to find out why it is working so
slow in StringTemplate.ToString() or
StringTemplate.Write methods using my templates. It seemed like most
calls are to new HashTable(),
new StringTemplate(), StringTemplate.BreakTemplateIntoChunks(),
GetConstructorInfo() methods. I can understand
new StringTemplate() calls caused by GetInstanceOf() methods but why
BreakTemplateIntoChunks()??
It shouldn't be parsing templates in evaluation stage.

In ActionEvaluator.attribute(), for ANONYMOUS_TEMPLATE nodes, there is
a code like below:

StringTemplate valueST = new StringTemplate(self.Group, at.GetText());
valueST.EnclosingInstance = self;
valueST.Name = "<anonymous template argument>";
value = valueST;

This is called for all anonymous templates and all separator, format,
null etc. options in each evaluation.
Caching the template by replacing code with:

if (at.StringTemplate == null)
{
   at.StringTemplate = new StringTemplate(at.getText());
   at.StringTemplate.Name = "<anonymous template argument>";
}
StringTemplate valueST = at.StringTemplate.GetInstanceOf();
valueST.EnclosingInstance = self;
valueST.Group = self.Group;
value = valueST;

removed all these parsing calls, and it saved a lot time alone as
parsing is slow.
Your port seems to have the same code block causing problem.

Reflection method GetConstructorInfo() was called in
BreakTemplateIntoChunks()
while creating an instance of lexer class but seems like you spotted
that performance bottleneck.

There is also another potential problem i spotted while working on the
compiler:

AFAIK, StringTemplate.ToString() calls (i mean evaluation) is
thread-safe, as long as you
use a unique instance created with GetInstanceOf() methods. I see no
reason why it should't.
But in just a few places in ActionEvaluator.cs for ANONYMOUS_TEMPLATE
nodes,
and in ApplyTemplateToListOfAttributes, ApplyAlternatingTemplates
methods, an instance of
anonymous template is not used (by calling of GetInstanceOf()), but
directly anonymous
template itself is modified (this is not true for named templates,
always a new instance of
them is used). This will cause same anonymous template instance to be
modified
in different threads. If threads modify at same time, this may cause
unexpected side-effects.
Am i wrong in assuming string template instance evaluation as
thread-safe or this is a bug??

2009/3/20 Sam Harwell <sharwell at pixelminegames.com>:
> I checked in (CL5952) an update that builds a delegate
(System.Func<T>)
> inside ActionEvaluator instead of basic interpretation. I have not
> implemented caching of the delegates or optimized resolution of
> arguments other special name attributes. However, the implementation
is
> a complete working example of execution of a compiled template that
> passes the same 1200 unit tests that the interpreter does.

From eclement at famictech.com  Tue Mar 24 11:57:48 2009
From: eclement at famictech.com (=?iso-8859-1?Q?=C9ric_Cl=E9ment?=)
Date: Tue, 24 Mar 2009 14:57:48 -0400
Subject: [stringtemplate-interest] Call a template from a template
Message-ID: <F69B6D41EA3E164B921148BBCF9744D703E895A1@mailsrv.famictech.com>

Hi,

 

I have this template file:

 

group TreeManip;

print_root(arg1, arg2) ::= "print_root : <arg1>:<arg2>"

 

print_exp(cte1, cte2) ::= <<

<cte1>

<cte2>

<print_root(arg1=cte1, arg2=cte2)>

print_exp!!

>> 

 

I don't understand why I got this exception when I load the file :

A first chance exception of type 'antlr.NoViableAltException' occurred in StringTemplate.dll

Additional information: NoViableAlt 

 

Regards,

 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20090324/3da022b0/attachment.html 

From hofmanndavid at gmail.com  Thu Mar 26 03:24:19 2009
From: hofmanndavid at gmail.com (David Hofmann)
Date: Thu, 26 Mar 2009 06:24:19 -0400
Subject: [stringtemplate-interest] StringTemplateGroup restricts the
	location of the templates
Message-ID: <b32beff20903260324w2872872au6c6c03efe9a4964e@mail.gmail.com>

Hi all,
As far as I can see, for a template to reference another one it must to be
in the same StringTemplateGroup (stg) which is fine except for the fact that
stg only allows you to load templates from files ( of the filesystem or the
classpath )

I really need to do something like this:

StringTemplate st = new
StringTemplate(templateThatComesFromTheMoonOrWhereverElseButNotTheFileSystem);
StringTemplateGroup stg = new StringTemplateGroup(); // stg does not have
this contructor
stg.loadTemplate("moontemplate", st); // stg does not have this method

If I need to refresh the template, then I will call loadTemplate again and
that's it

Does this make sense ?
Is there a reason why we shoun't do this ?
Or is it already there and I am the one that didn't dig on it enough to find
it ?

I hope that this is not a too stupid post
Thanks in advance

--
David Daniel Hofmann
WebVAS, Nucleo S.A. - Telecom Personal Paraguay
http://hofmanndavid.blogspot.com/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20090326/02eaed45/attachment.html 

From s.barnett-cormack at lancaster.ac.uk  Thu Mar 26 07:39:11 2009
From: s.barnett-cormack at lancaster.ac.uk (Sam Barnett-Cormack)
Date: Thu, 26 Mar 2009 14:39:11 +0000
Subject: [stringtemplate-interest] String template book
Message-ID: <49CB938F.7080709@lancaster.ac.uk>

Hey all,

Having seen recent queries about this possibility in the archive, I just
wanted to weigh in and say: Ter, you really should consider doing a
straight ST book next, divorced from ANTLR (maybe one chapter on its use
in ANTLR). I'm just getting into ST to do the codegen part of my ASN.1
implementation, and it's wonderful, but a decent book would be a
wonderful addition - and I'm willing to bet it'd get decent sales.

Sam

From s.barnett-cormack at lancaster.ac.uk  Thu Mar 26 08:24:01 2009
From: s.barnett-cormack at lancaster.ac.uk (Sam Barnett-Cormack)
Date: Thu, 26 Mar 2009 15:24:01 +0000
Subject: [stringtemplate-interest] Which libraries (jars) needed?
Message-ID: <49CB9E11.2000005@lancaster.ac.uk>

Hey all,

I'm just setting out to use StringTemplate for codegen, and I'm just
wondering what the jar dependencies are? Obviously
stringtemplate-3.2.jar, and I'm assuming the antlr runtime jar
(antlr-runtime-3.1.2.jar in my case). I can't see what it'd need the
other ANTLR jars, but I thought I'd check in case, and it doesn't seem
to be mentioned anywhere in the docs.

Sam

From jimi at temporal-wave.com  Thu Mar 26 08:26:38 2009
From: jimi at temporal-wave.com (Jim Idle)
Date: Thu, 26 Mar 2009 08:26:38 -0700
Subject: [stringtemplate-interest] Which libraries (jars) needed?
In-Reply-To: <49CB9E11.2000005@lancaster.ac.uk>
References: <49CB9E11.2000005@lancaster.ac.uk>
Message-ID: <49CB9EAE.3030207@temporal-wave.com>

Sam Barnett-Cormack wrote:
> Hey all,
>
> I'm just setting out to use StringTemplate for codegen, and I'm just
> wondering what the jar dependencies are? Obviously
> stringtemplate-3.2.jar, and I'm assuming the antlr runtime jar
> (antlr-runtime-3.1.2.jar in my case). I can't see what it'd need the
> other ANTLR jars, but I thought I'd check in case, and it doesn't seem
> to be mentioned anywhere in the docs.
Use Maven and let it work it out for you. If you want this project to 
become part of the ANTLR tool set, then you will have to make it a Maven 
project anyway. Just load the Maven plugin for Netbeans or Eclispse or 
whatever you use for development.

JIm

From sharwell at pixelminegames.com  Thu Mar 26 08:26:57 2009
From: sharwell at pixelminegames.com (Sam Harwell)
Date: Thu, 26 Mar 2009 10:26:57 -0500
Subject: [stringtemplate-interest] Which libraries (jars) needed?
In-Reply-To: <49CB9E11.2000005@lancaster.ac.uk>
References: <49CB9E11.2000005@lancaster.ac.uk>
Message-ID: <86403CA0939415448BCCB83855EFE09AA67C1F@Bloodymary.ironwillgames.com>

StringTemplate has grammars that rely on the ANTLR 2.7.7 runtime, so
you'll need it as well. That should be all. :)

Sam

-----Original Message-----
From: stringtemplate-interest-bounces at antlr.org
[mailto:stringtemplate-interest-bounces at antlr.org] On Behalf Of Sam
Barnett-Cormack
Sent: Thursday, March 26, 2009 10:24 AM
To: StringTemplate Interest List
Subject: [stringtemplate-interest] Which libraries (jars) needed?

Hey all,

I'm just setting out to use StringTemplate for codegen, and I'm just
wondering what the jar dependencies are? Obviously
stringtemplate-3.2.jar, and I'm assuming the antlr runtime jar
(antlr-runtime-3.1.2.jar in my case). I can't see what it'd need the
other ANTLR jars, but I thought I'd check in case, and it doesn't seem
to be mentioned anywhere in the docs.

Sam
_______________________________________________
stringtemplate-interest mailing list
stringtemplate-interest at antlr.org
http://www.antlr.org/mailman/listinfo/stringtemplate-interest

From s.barnett-cormack at lancaster.ac.uk  Thu Mar 26 08:31:42 2009
From: s.barnett-cormack at lancaster.ac.uk (Sam Barnett-Cormack)
Date: Thu, 26 Mar 2009 15:31:42 +0000
Subject: [stringtemplate-interest] Which libraries (jars) needed?
In-Reply-To: <49CB9EAE.3030207@temporal-wave.com>
References: <49CB9E11.2000005@lancaster.ac.uk>
	<49CB9EAE.3030207@temporal-wave.com>
Message-ID: <49CB9FDE.3050002@lancaster.ac.uk>

Jim Idle wrote:
> Sam Barnett-Cormack wrote:
>> Hey all,
>>
>> I'm just setting out to use StringTemplate for codegen, and I'm just
>> wondering what the jar dependencies are? Obviously
>> stringtemplate-3.2.jar, and I'm assuming the antlr runtime jar
>> (antlr-runtime-3.1.2.jar in my case). I can't see what it'd need the
>> other ANTLR jars, but I thought I'd check in case, and it doesn't seem
>> to be mentioned anywhere in the docs.
> Use Maven and let it work it out for you. If you want this project to 
> become part of the ANTLR tool set, then you will have to make it a Maven 
> project anyway. Just load the Maven plugin for Netbeans or Eclispse or 
> whatever you use for development.

Well, this bit isn't meant to be for ANTLR - this is for work! However,
I've been meaning to look into Maven. To be frank I'm still not entirely
clear what it's for, but I gather that, with its Eclipse integration,
any maven-friendly libraries easily become known to eclipse, along with
inter-library dependencies... anyone got a link for a Maven primer so I
know what I'm doing?

Sam


From jimi at temporal-wave.com  Thu Mar 26 09:02:25 2009
From: jimi at temporal-wave.com (Jim Idle)
Date: Thu, 26 Mar 2009 09:02:25 -0700
Subject: [stringtemplate-interest] Which libraries (jars) needed?
In-Reply-To: <49CB9FDE.3050002@lancaster.ac.uk>
References: <49CB9E11.2000005@lancaster.ac.uk>
	<49CB9EAE.3030207@temporal-wave.com>
	<49CB9FDE.3050002@lancaster.ac.uk>
Message-ID: <49CBA711.30403@temporal-wave.com>

An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20090326/c07ab86f/attachment.html 

From bharani at ti.com  Thu Mar 26 15:33:52 2009
From: bharani at ti.com (Bharani Ellore)
Date: Thu, 26 Mar 2009 17:33:52 -0500
Subject: [stringtemplate-interest] Newbie-  if conditional question
Message-ID: <49CC02D0.2070403@ti.com>

I have the code in my template.st

$outputs: { bo |

       $if(length(strip(bo.sourceWire)))$

            $bo.label$ zzz

        $endif$

}$


where bo.sourceWire is a <list>. Basically I was to print the label if 
the itemList has atleast one string. But somehow it is printing all the 
items in $bo$ even though some of them are empty lists.

This expression does print number ranging from 0-9. So I know all item 
should not be printed.
$length(strip(bo.sourceWire))$


What am I doing wrong? Any help?

-Bharani
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20090326/dac4deda/attachment.html 

From s.barnett-cormack at lancaster.ac.uk  Thu Mar 26 16:06:40 2009
From: s.barnett-cormack at lancaster.ac.uk (Sam Barnett-Cormack)
Date: Thu, 26 Mar 2009 23:06:40 +0000
Subject: [stringtemplate-interest] Newbie-  if conditional question
In-Reply-To: <49CC02D0.2070403@ti.com>
References: <49CC02D0.2070403@ti.com>
Message-ID: <49CC0A80.6010900@lancaster.ac.uk>

Bharani Ellore wrote:
> I have the code in my template.st
> 
> $outputs: { bo |
> 
>        $if(length(strip(bo.sourceWire)))$
> 
>             $bo.label$ zzz
> 
>         $endif$
> 
> }$
> 
> 
> where bo.sourceWire is a <list>. Basically I was to print the label if 
> the itemList has atleast one string. But somehow it is printing all the 
> items in $bo$ even though some of them are empty lists.
> 
> This expression does print number ranging from 0-9. So I know all item 
> should not be printed.
> $length(strip(bo.sourceWire))$
> 
> 
> What am I doing wrong? Any help?

Based on my own first reading of the docs, today, ISTR that $if$ only 
checks for null or boolean false, not zero, to count as "not" doing it.

-- 
Sam Barnett-Cormack

From bharani at ti.com  Fri Mar 27 08:23:19 2009
From: bharani at ti.com (Bharani Ellore)
Date: Fri, 27 Mar 2009 10:23:19 -0500
Subject: [stringtemplate-interest] Newbie-  if conditional question
In-Reply-To: <49CC0A80.6010900@lancaster.ac.uk>
References: <49CC02D0.2070403@ti.com> <49CC0A80.6010900@lancaster.ac.uk>
Message-ID: <49CCEF67.60707@ti.com>

I want to print the $bo.label$ if there atleast one item in the sublist 
$bo.sourceWire$. Is there a different way to achieve this?

Thanks.
-Bharani


Sam Barnett-Cormack wrote:
> Bharani Ellore wrote:
>> I have the code in my template.st
>>
>> $outputs: { bo |
>>
>>        $if(length(strip(bo.sourceWire)))$
>>
>>             $bo.label$ zzz
>>
>>         $endif$
>>
>> }$
>>
>>
>> where bo.sourceWire is a <list>. Basically I was to print the label 
>> if the itemList has atleast one string. But somehow it is printing 
>> all the items in $bo$ even though some of them are empty lists.
>>
>> This expression does print number ranging from 0-9. So I know all 
>> item should not be printed.
>> $length(strip(bo.sourceWire))$
>>
>>
>> What am I doing wrong? Any help?
>
> Based on my own first reading of the docs, today, ISTR that $if$ only 
> checks for null or boolean false, not zero, to count as "not" doing it.
>

From sharwell at pixelminegames.com  Fri Mar 27 08:25:51 2009
From: sharwell at pixelminegames.com (Sam Harwell)
Date: Fri, 27 Mar 2009 10:25:51 -0500
Subject: [stringtemplate-interest] Newbie-  if conditional question
In-Reply-To: <49CCEF67.60707@ti.com>
References: <49CC02D0.2070403@ti.com> <49CC0A80.6010900@lancaster.ac.uk>
	<49CCEF67.60707@ti.com>
Message-ID: <86403CA0939415448BCCB83855EFE09AA67C2D@Bloodymary.ironwillgames.com>

At least in the latest version, $if(bo.sourceWire)$ is only true if the
list contains at least one item.

Sam

-----Original Message-----
From: stringtemplate-interest-bounces at antlr.org
[mailto:stringtemplate-interest-bounces at antlr.org] On Behalf Of Bharani
Ellore
Sent: Friday, March 27, 2009 10:23 AM
To: Sam Barnett-Cormack
Cc: stringtemplate-interest at antlr.org
Subject: Re: [stringtemplate-interest] Newbie- if conditional question

I want to print the $bo.label$ if there atleast one item in the sublist 
$bo.sourceWire$. Is there a different way to achieve this?

Thanks.
-Bharani


Sam Barnett-Cormack wrote:
> Bharani Ellore wrote:
>> I have the code in my template.st
>>
>> $outputs: { bo |
>>
>>        $if(length(strip(bo.sourceWire)))$
>>
>>             $bo.label$ zzz
>>
>>         $endif$
>>
>> }$
>>
>>
>> where bo.sourceWire is a <list>. Basically I was to print the label 
>> if the itemList has atleast one string. But somehow it is printing 
>> all the items in $bo$ even though some of them are empty lists.
>>
>> This expression does print number ranging from 0-9. So I know all 
>> item should not be printed.
>> $length(strip(bo.sourceWire))$
>>
>>
>> What am I doing wrong? Any help?
>
> Based on my own first reading of the docs, today, ISTR that $if$ only 
> checks for null or boolean false, not zero, to count as "not" doing
it.
>
_______________________________________________
stringtemplate-interest mailing list
stringtemplate-interest at antlr.org
http://www.antlr.org/mailman/listinfo/stringtemplate-interest

From bharani at ti.com  Fri Mar 27 13:53:56 2009
From: bharani at ti.com (Bharani Ellore)
Date: Fri, 27 Mar 2009 15:53:56 -0500
Subject: [stringtemplate-interest] Newbie-  if conditional question
In-Reply-To: <86403CA0939415448BCCB83855EFE09AA67C2D@Bloodymary.ironwillgames.com>
References: <49CC02D0.2070403@ti.com> <49CC0A80.6010900@lancaster.ac.uk>
	<49CCEF67.60707@ti.com>
	<86403CA0939415448BCCB83855EFE09AA67C2D@Bloodymary.ironwillgames.com>
Message-ID: <49CD3CE4.50902@ti.com>

This works. Thanks a lot Sam.

-Bharani

Sam Harwell wrote:
> At least in the latest version, $if(bo.sourceWire)$ is only true if the
> list contains at least one item.
>
> Sam
>
> -----Original Message-----
> From: stringtemplate-interest-bounces at antlr.org
> [mailto:stringtemplate-interest-bounces at antlr.org] On Behalf Of Bharani
> Ellore
> Sent: Friday, March 27, 2009 10:23 AM
> To: Sam Barnett-Cormack
> Cc: stringtemplate-interest at antlr.org
> Subject: Re: [stringtemplate-interest] Newbie- if conditional question
>
> I want to print the $bo.label$ if there atleast one item in the sublist 
> $bo.sourceWire$. Is there a different way to achieve this?
>
> Thanks.
> -Bharani
>
>
> Sam Barnett-Cormack wrote:
>   
>> Bharani Ellore wrote:
>>     
>>> I have the code in my template.st
>>>
>>> $outputs: { bo |
>>>
>>>        $if(length(strip(bo.sourceWire)))$
>>>
>>>             $bo.label$ zzz
>>>
>>>         $endif$
>>>
>>> }$
>>>
>>>
>>> where bo.sourceWire is a <list>. Basically I was to print the label 
>>> if the itemList has atleast one string. But somehow it is printing 
>>> all the items in $bo$ even though some of them are empty lists.
>>>
>>> This expression does print number ranging from 0-9. So I know all 
>>> item should not be printed.
>>> $length(strip(bo.sourceWire))$
>>>
>>>
>>> What am I doing wrong? Any help?
>>>       
>> Based on my own first reading of the docs, today, ISTR that $if$ only 
>> checks for null or boolean false, not zero, to count as "not" doing
>>     
> it.
>   
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>
>   
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20090327/914ff437/attachment.html 

From parrt at cs.usfca.edu  Mon Mar 30 14:03:54 2009
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon, 30 Mar 2009 14:03:54 -0700
Subject: [stringtemplate-interest] StringTemplate Compiler for .NET
In-Reply-To: <86403CA0939415448BCCB83855EFE09AA67BC0@Bloodymary.ironwillgames.com>
References: <f897bf780902281444g7d26ca58kd443d740430109cf@mail.gmail.com>
	<86403CA0939415448BCCB83855EFE09AA67B62@Bloodymary.ironwillgames.com>
	<f897bf780903170139l423eb87bt2b4acb4472cf8cb@mail.gmail.com>
	<f897bf780903170151n2d0c1ab0laad262b581cf6253@mail.gmail.com>
	<86403CA0939415448BCCB83855EFE09AA67B8A@Bloodymary.ironwillgames.com>
	<f897bf780903190117t6cf8549au7cef082ef92b64af@mail.gmail.com>
	<f897bf780903190123t35c39856nf8a467ebfaa59296@mail.gmail.com>
	<86403CA0939415448BCCB83855EFE09AA67B8B@Bloodymary.ironwillgames.com>
	<f897bf780903190251m38c18bc5xbd2a2a9329882af@mail.gmail.com>
	<86403CA0939415448BCCB83855EFE09AA67BA7@Bloodymary.ironwillgames.com>
	<f897bf780903210339s5b77c24dt242857b26479e9aa@mail.gmail.com>
	<86403CA0939415448BCCB83855EFE09AA67BC0@Bloodymary.ironwillgames.com>
Message-ID: <1D3D27D0-FA72-4DDD-A3CA-4AC75F9C9219@cs.usfca.edu>


On Mar 21, 2009, at 12:07 PM, Sam Harwell wrote:

> This email describes a proposal that I'm absolutely willing to
> implement. As I mention at the end, I'm very interested in feedback on
> the idea as will.
>
> Before I work to optimize handling of various cases, I'm modifying
> StringTemplate to have a Frozen (immutable) state. Before the object  
> is
> frozen, a call to ToString() will internally call GetAsFrozen()
> (actually not quite; see #4 below) to get a frozen duplicate of the
> current template, and evaluate ToString() on it. A warning will
> optionally be issued to stderr when this case occurs.
>
> When a template is frozen, all attributes are locked and the  
> expression
> tree is compiled.

That's the same as evaluating it to a string so why not just do that?  
you can cache the string instead of compiling.

> However, a subsequent call to Clone will return an
> non-frozen copy of the template with no attributes set. The advantage
> comes from several key characteristics of the cloned copies:
>
> 1. The clone gets a copy of the compiled expression tree. As long as  
> the
> pattern is not changed, the expression tree will not need recompiling
> before evaluation. The calls to Freeze or GetAsFrozen will simply lock
> the attribute set.

  expression trees never change, do they?

> 2. When the expression tree is compiled, a List of objects is created
> with a bucket for every referenced attribute of every template. When
> SetAttribute is called, the value is placed immediately in the proper
> bin for direct lookup during evaluation. Otherwise, it goes in the
> dictionary and the values are placed in bins after the expression is
> compiled.
>
> 3. If a never-frozen template is cloned, the non-compiled template is
> copied on write. This means if *either* copy is frozen, both copies  
> will
> get the expression tree and bin layout. The frozen copy will move
> attributes to the bins immediately; the other will copy them when it  
> is
> frozen later, but it won't have to recomputed the bins.
>
> 4. Calls to GetAsFrozen copy all frozen subtemplates by reference. Two
> additional methods, CloneCurrentValue and GetCurrentValueAsFrozen,
> return copies including all current attributes. Clearly a call to
> GetCurrentValueAsFrozen on a frozen template will simply "return  
> this;",
> and a call to Freeze on a frozen template will immediately return.  
> With
> that said, a call to ToString on a non-frozen template will actually
> call GetCurrentValueAsFrozen. :)
>
> It's my opinion (open to suggestions) that this implementation is
> appropriate for the following reasons:
>
> A. It's conceptually straightforward and therefore straightforward to
> implement.
> B. It addresses all remaining bottlenecks that have been described  
> here
> on the list.
> C. It offers excellent performance for a variety of uses/order of
> operations. It's easy to add runtime warnings for performance- 
> degrading
> uses such as calls to ToString() on non-frozen templates while
> simultaneously holding on to the compiled expression so the  
> performance
> is strong on later calls to ToString() on that same template.
> D. Since the concept is not reliant on either the template compilation
> method or syntax/built-in functions/features of the StringTemplate
> language itself, it will be portable to version 4. We've also already
> shown that multiple compilation techniques can be used targeting the
> CLI, and I imagine similar could be done in Java (jealous of our  
> lambdas
> yet? =) ).

Still not sure what frozen means. sorry.

Does any of this break the lazy evaluation?

Ter

From parrt at cs.usfca.edu  Mon Mar 30 14:42:20 2009
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon, 30 Mar 2009 14:42:20 -0700
Subject: [stringtemplate-interest] Call a template from a template
In-Reply-To: <F69B6D41EA3E164B921148BBCF9744D703E895A1@mailsrv.famictech.com>
References: <F69B6D41EA3E164B921148BBCF9744D703E895A1@mailsrv.famictech.com>
Message-ID: <69149AEA-BF56-4ACC-BB38-E2E016D301FF@cs.usfca.edu>

Wow...that must be a C# error....anyway, it's a syntax error  
apparently, but I don't see anything wrong with your templates.  That  
is really weird... sorry I can't be of more help.
Ter

On Mar 24, 2009, at 11:57 AM, ?ric Cl?ment wrote:

> Hi,
>
> I have this template file:
>
> group TreeManip;
> print_root(arg1, arg2) ::= "print_root : <arg1>:<arg2>"
>
> print_exp(cte1, cte2) ::= <<
> <cte1>
> <cte2>
> <print_root(arg1=cte1, arg2=cte2)>
> print_exp!!
> >>
>
> I don?t understand why I got this exception when I load the file :
> A first chance exception of type 'antlr.NoViableAltException'  
> occurred in StringTemplate.dll
> Additional information: NoViableAlt
>
> Regards,
>
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest


From parrt at cs.usfca.edu  Mon Mar 30 14:43:33 2009
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon, 30 Mar 2009 14:43:33 -0700
Subject: [stringtemplate-interest] StringTemplateGroup restricts the
	location of the templates
In-Reply-To: <b32beff20903260324w2872872au6c6c03efe9a4964e@mail.gmail.com>
References: <b32beff20903260324w2872872au6c6c03efe9a4964e@mail.gmail.com>
Message-ID: <D46027C2-EB05-43CD-A6AB-592268A1BA62@cs.usfca.edu>

Hi.  isn't there a Reader-based StringTemplate ctor? good you load  
your template using that?
Ter
On Mar 26, 2009, at 3:24 AM, David Hofmann wrote:

> Hi all,
>
> As far as I can see, for a template to reference another one it must  
> to be in the same StringTemplateGroup (stg) which is fine except for  
> the fact that stg only allows you to load templates from files ( of  
> the filesystem or the classpath )
>
> I really need to do something like this:
>
> StringTemplate st = new  
> StringTemplate 
> (templateThatComesFromTheMoonOrWhereverElseButNotTheFileSystem);
> StringTemplateGroup stg = new StringTemplateGroup(); // stg does not  
> have this contructor
> stg.loadTemplate("moontemplate", st); // stg does not have this method
>
> If I need to refresh the template, then I will call loadTemplate  
> again and that's it
>
> Does this make sense ?
> Is there a reason why we shoun't do this ?
> Or is it already there and I am the one that didn't dig on it enough  
> to find it ?
>
> I hope that this is not a too stupid post
> Thanks in advance
>
> --
> David Daniel Hofmann
> WebVAS, Nucleo S.A. - Telecom Personal Paraguay
> http://hofmanndavid.blogspot.com/
>
>
>
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest


From parrt at cs.usfca.edu  Mon Mar 30 14:44:54 2009
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon, 30 Mar 2009 14:44:54 -0700
Subject: [stringtemplate-interest] String template book
In-Reply-To: <49CB938F.7080709@lancaster.ac.uk>
References: <49CB938F.7080709@lancaster.ac.uk>
Message-ID: <95DC82E3-A016-45B5-816E-0A012F2B6110@cs.usfca.edu>

Hi Sam et al,

I thought about doing a ST book, but I'm not sure the publisher would  
go for it because the market is much smaller than ANTLR itself.  I'm  
kind of sick of working on books at the moment; I plan on coding for  
the next year but could definitely consider a ST book. It would have  
to be short to convince the publishers probably.

Ter

On Mar 26, 2009, at 7:39 AM, Sam Barnett-Cormack wrote:

> Hey all,
>
> Having seen recent queries about this possibility in the archive, I  
> just
> wanted to weigh in and say: Ter, you really should consider doing a
> straight ST book next, divorced from ANTLR (maybe one chapter on its  
> use
> in ANTLR). I'm just getting into ST to do the codegen part of my ASN.1
> implementation, and it's wonderful, but a decent book would be a
> wonderful addition - and I'm willing to bet it'd get decent sales.
>
> Sam
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest


From sharwell at pixelminegames.com  Mon Mar 30 15:22:09 2009
From: sharwell at pixelminegames.com (Sam Harwell)
Date: Mon, 30 Mar 2009 17:22:09 -0500
Subject: [stringtemplate-interest] StringTemplate Compiler for .NET
In-Reply-To: <1D3D27D0-FA72-4DDD-A3CA-4AC75F9C9219@cs.usfca.edu>
References: <f897bf780902281444g7d26ca58kd443d740430109cf@mail.gmail.com><86403CA0939415448BCCB83855EFE09AA67B62@Bloodymary.ironwillgames.com><f897bf780903170139l423eb87bt2b4acb4472cf8cb@mail.gmail.com><f897bf780903170151n2d0c1ab0laad262b581cf6253@mail.gmail.com><86403CA0939415448BCCB83855EFE09AA67B8A@Bloodymary.ironwillgames.com><f897bf780903190117t6cf8549au7cef082ef92b64af@mail.gmail.com><f897bf780903190123t35c39856nf8a467ebfaa59296@mail.gmail.com><86403CA0939415448BCCB83855EFE09AA67B8B@Bloodymary.ironwillgames.com><f897bf780903190251m38c18bc5xbd2a2a9329882af@mail.gmail.com><86403CA0939415448BCCB83855EFE09AA67BA7@Bloodymary.ironwillgames.com><f897bf780903210339s5b77c24dt242857b26479e9aa@mail.gmail.com><86403CA0939415448BCCB83855EFE09AA67BC0@Bloodymary.ironwillgames.com>
	<1D3D27D0-FA72-4DDD-A3CA-4AC75F9C9219@cs.usfca.edu>
Message-ID: <86403CA0939415448BCCB83855EFE09AA67C56@Bloodymary.ironwillgames.com>

Compiling the expression tree allows heavy optimization of Clone() and
CloneCurrentValue(), so future calls to freeze on the same tree using
different attributes is much faster than the first time. I'll draw up a
ppt when I get the chance so I can show the layout. :)

Sam

-----Original Message-----
From: stringtemplate-interest-bounces at antlr.org
[mailto:stringtemplate-interest-bounces at antlr.org] On Behalf Of Terence
Parr
Sent: Monday, March 30, 2009 4:04 PM
To: stringtemplate-interest at antlr.org Newsletter
Subject: Re: [stringtemplate-interest] StringTemplate Compiler for .NET


On Mar 21, 2009, at 12:07 PM, Sam Harwell wrote:

> This email describes a proposal that I'm absolutely willing to
> implement. As I mention at the end, I'm very interested in feedback on
> the idea as will.
>
> Before I work to optimize handling of various cases, I'm modifying
> StringTemplate to have a Frozen (immutable) state. Before the object  
> is
> frozen, a call to ToString() will internally call GetAsFrozen()
> (actually not quite; see #4 below) to get a frozen duplicate of the
> current template, and evaluate ToString() on it. A warning will
> optionally be issued to stderr when this case occurs.
>
> When a template is frozen, all attributes are locked and the  
> expression
> tree is compiled.

That's the same as evaluating it to a string so why not just do that?  
you can cache the string instead of compiling.

> However, a subsequent call to Clone will return an
> non-frozen copy of the template with no attributes set. The advantage
> comes from several key characteristics of the cloned copies:
>
> 1. The clone gets a copy of the compiled expression tree. As long as  
> the
> pattern is not changed, the expression tree will not need recompiling
> before evaluation. The calls to Freeze or GetAsFrozen will simply lock
> the attribute set.

  expression trees never change, do they?

> 2. When the expression tree is compiled, a List of objects is created
> with a bucket for every referenced attribute of every template. When
> SetAttribute is called, the value is placed immediately in the proper
> bin for direct lookup during evaluation. Otherwise, it goes in the
> dictionary and the values are placed in bins after the expression is
> compiled.
>
> 3. If a never-frozen template is cloned, the non-compiled template is
> copied on write. This means if *either* copy is frozen, both copies  
> will
> get the expression tree and bin layout. The frozen copy will move
> attributes to the bins immediately; the other will copy them when it  
> is
> frozen later, but it won't have to recomputed the bins.
>
> 4. Calls to GetAsFrozen copy all frozen subtemplates by reference. Two
> additional methods, CloneCurrentValue and GetCurrentValueAsFrozen,
> return copies including all current attributes. Clearly a call to
> GetCurrentValueAsFrozen on a frozen template will simply "return  
> this;",
> and a call to Freeze on a frozen template will immediately return.  
> With
> that said, a call to ToString on a non-frozen template will actually
> call GetCurrentValueAsFrozen. :)
>
> It's my opinion (open to suggestions) that this implementation is
> appropriate for the following reasons:
>
> A. It's conceptually straightforward and therefore straightforward to
> implement.
> B. It addresses all remaining bottlenecks that have been described  
> here
> on the list.
> C. It offers excellent performance for a variety of uses/order of
> operations. It's easy to add runtime warnings for performance- 
> degrading
> uses such as calls to ToString() on non-frozen templates while
> simultaneously holding on to the compiled expression so the  
> performance
> is strong on later calls to ToString() on that same template.
> D. Since the concept is not reliant on either the template compilation
> method or syntax/built-in functions/features of the StringTemplate
> language itself, it will be portable to version 4. We've also already
> shown that multiple compilation techniques can be used targeting the
> CLI, and I imagine similar could be done in Java (jealous of our  
> lambdas
> yet? =) ).

Still not sure what frozen means. sorry.

Does any of this break the lazy evaluation?

Ter
_______________________________________________
stringtemplate-interest mailing list
stringtemplate-interest at antlr.org
http://www.antlr.org/mailman/listinfo/stringtemplate-interest

From parrt at cs.usfca.edu  Mon Mar 30 16:34:50 2009
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon, 30 Mar 2009 16:34:50 -0700
Subject: [stringtemplate-interest] StringTemplate Compiler for .NET
In-Reply-To: <86403CA0939415448BCCB83855EFE09AA67C56@Bloodymary.ironwillgames.com>
References: <f897bf780902281444g7d26ca58kd443d740430109cf@mail.gmail.com><86403CA0939415448BCCB83855EFE09AA67B62@Bloodymary.ironwillgames.com><f897bf780903170139l423eb87bt2b4acb4472cf8cb@mail.gmail.com><f897bf780903170151n2d0c1ab0laad262b581cf6253@mail.gmail.com><86403CA0939415448BCCB83855EFE09AA67B8A@Bloodymary.ironwillgames.com><f897bf780903190117t6cf8549au7cef082ef92b64af@mail.gmail.com><f897bf780903190123t35c39856nf8a467ebfaa59296@mail.gmail.com><86403CA0939415448BCCB83855EFE09AA67B8B@Bloodymary.ironwillgames.com><f897bf780903190251m38c18bc5xbd2a2a9329882af@mail.gmail.com><86403CA0939415448BCCB83855EFE09AA67BA7@Bloodymary.ironwillgames.com><f897bf780903210339s5b77c24dt242857b26479e9aa@mail.gmail.com><86403CA0939415448BCCB83855EFE09AA67BC0@Bloodymary.ironwillgames.com>
	<1D3D27D0-FA72-4DDD-A3CA-4AC75F9C9219@cs.usfca.edu>
	<86403CA0939415448BCCB83855EFE09AA67C56@Bloodymary.ironwillgames.com>
Message-ID: <120EC014-9481-4E63-90C6-838A448E4AEA@cs.usfca.edu>


On Mar 30, 2009, at 3:22 PM, Sam Harwell wrote:

> Compiling the expression tree allows heavy optimization of Clone() and
> CloneCurrentValue(), so future calls to freeze on the same tree using
> different attributes is much faster than the first time. I'll draw  
> up a
> ppt when I get the chance so I can show the layout. :)

Hmm...ok, so it's really just compiled and with attributes as instance  
fields?  Makes sense.
T

From eclement at famictech.com  Tue Mar 31 07:14:31 2009
From: eclement at famictech.com (=?iso-8859-1?Q?=C9ric_Cl=E9ment?=)
Date: Tue, 31 Mar 2009 10:14:31 -0400
Subject: [stringtemplate-interest] [SPAM-HC] - Re: Call a template from
	a template - Email found in subject
In-Reply-To: <69149AEA-BF56-4ACC-BB38-E2E016D301FF@cs.usfca.edu>
References: <F69B6D41EA3E164B921148BBCF9744D703E895A1@mailsrv.famictech.com>
	<69149AEA-BF56-4ACC-BB38-E2E016D301FF@cs.usfca.edu>
Message-ID: <F69B6D41EA3E164B921148BBCF9744D703F45293@mailsrv.famictech.com>

You are right, I use the C# version of StringTemplate (3.0.1).  Maybe it's a bug.  I try to report it in the bug list but I didn't find how.

Thank you,
Eric

-----Original Message-----
From: Terence Parr [mailto:parrt at cs.usfca.edu] 
Sent: Monday, March 30, 2009 5:42 PM
To: ?ric Cl?ment
Cc: stringtemplate-interest at antlr.org
Subject: [SPAM-HC] - Re: [stringtemplate-interest] Call a template from a template - Email found in subject

Wow...that must be a C# error....anyway, it's a syntax error  
apparently, but I don't see anything wrong with your templates.  That  
is really weird... sorry I can't be of more help.
Ter

On Mar 24, 2009, at 11:57 AM, ?ric Cl?ment wrote:

> Hi,
>
> I have this template file:
>
> group TreeManip;
> print_root(arg1, arg2) ::= "print_root : <arg1>:<arg2>"
>
> print_exp(cte1, cte2) ::= <<
> <cte1>
> <cte2>
> <print_root(arg1=cte1, arg2=cte2)>
> print_exp!!
> >>
>
> I don't understand why I got this exception when I load the file :
> A first chance exception of type 'antlr.NoViableAltException'  
> occurred in StringTemplate.dll
> Additional information: NoViableAlt
>
> Regards,
>
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest


From jaluber at gmx.de  Tue Mar 31 07:39:01 2009
From: jaluber at gmx.de (Johannes Luber)
Date: Tue, 31 Mar 2009 16:39:01 +0200
Subject: [stringtemplate-interest] [SPAM-HC] - Re: Call a template from
 a template - Email found in subject
In-Reply-To: <F69B6D41EA3E164B921148BBCF9744D703F45293@mailsrv.famictech.com>
References: <F69B6D41EA3E164B921148BBCF9744D703E895A1@mailsrv.famictech.com>	<69149AEA-BF56-4ACC-BB38-E2E016D301FF@cs.usfca.edu>
	<F69B6D41EA3E164B921148BBCF9744D703F45293@mailsrv.famictech.com>
Message-ID: <49D22B05.8010305@gmx.de>

?ric Cl?ment schrieb:
> You are right, I use the C# version of StringTemplate (3.0.1).  Maybe it's a bug.  I try to report it in the bug list but I didn't find how.

There is a beta of ST# 3.1 available. Maybe the bug is fixed there?

Johannes
> 
> Thank you,
> Eric
> 
> -----Original Message-----
> From: Terence Parr [mailto:parrt at cs.usfca.edu] 
> Sent: Monday, March 30, 2009 5:42 PM
> To: ?ric Cl?ment
> Cc: stringtemplate-interest at antlr.org
> Subject: [SPAM-HC] - Re: [stringtemplate-interest] Call a template from a template - Email found in subject
> 
> Wow...that must be a C# error....anyway, it's a syntax error  
> apparently, but I don't see anything wrong with your templates.  That  
> is really weird... sorry I can't be of more help.
> Ter
> 
> On Mar 24, 2009, at 11:57 AM, ?ric Cl?ment wrote:
> 
>> Hi,
>>
>> I have this template file:
>>
>> group TreeManip;
>> print_root(arg1, arg2) ::= "print_root : <arg1>:<arg2>"
>>
>> print_exp(cte1, cte2) ::= <<
>> <cte1>
>> <cte2>
>> <print_root(arg1=cte1, arg2=cte2)>
>> print_exp!!
>> I don't understand why I got this exception when I load the file :
>> A first chance exception of type 'antlr.NoViableAltException'  
>> occurred in StringTemplate.dll
>> Additional information: NoViableAlt
>>
>> Regards,
>>
>> _______________________________________________
>> stringtemplate-interest mailing list
>> stringtemplate-interest at antlr.org
>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
> 
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
> 


From eclement at famictech.com  Tue Mar 31 08:17:08 2009
From: eclement at famictech.com (=?iso-8859-1?Q?=C9ric_Cl=E9ment?=)
Date: Tue, 31 Mar 2009 11:17:08 -0400
Subject: [stringtemplate-interest] [SPAM-HC] - Re: Call a template from
	a template - Email found in subject - Email found in subject
In-Reply-To: <49D22B05.8010305@gmx.de>
References: <F69B6D41EA3E164B921148BBCF9744D703E895A1@mailsrv.famictech.com>	<69149AEA-BF56-4ACC-BB38-E2E016D301FF@cs.usfca.edu>
	<F69B6D41EA3E164B921148BBCF9744D703F45293@mailsrv.famictech.com>
	<49D22B05.8010305@gmx.de>
Message-ID: <F69B6D41EA3E164B921148BBCF9744D703F452E2@mailsrv.famictech.com>

I try the beta.  I reproduce the problem.  The exception occur when I create a new StringTemplateGroup.

Thank you,
Eric

-----Original Message-----
From: Johannes Luber [mailto:jaluber at gmx.de] 
Sent: Tuesday, March 31, 2009 10:39 AM
To: ?ric Cl?ment
Cc: Terence Parr; stringtemplate-interest at antlr.org
Subject: [SPAM-HC] - Re: [stringtemplate-interest] [SPAM-HC] - Re: Call a template from a template - Email found in subject - Email found in subject

?ric Cl?ment schrieb:
> You are right, I use the C# version of StringTemplate (3.0.1).  Maybe it's a bug.  I try to report it in the bug list but I didn't find how.

There is a beta of ST# 3.1 available. Maybe the bug is fixed there?

Johannes
> 
> Thank you,
> Eric
> 
> -----Original Message-----
> From: Terence Parr [mailto:parrt at cs.usfca.edu] 
> Sent: Monday, March 30, 2009 5:42 PM
> To: ?ric Cl?ment
> Cc: stringtemplate-interest at antlr.org
> Subject: [SPAM-HC] - Re: [stringtemplate-interest] Call a template from a template - Email found in subject
> 
> Wow...that must be a C# error....anyway, it's a syntax error  
> apparently, but I don't see anything wrong with your templates.  That  
> is really weird... sorry I can't be of more help.
> Ter
> 
> On Mar 24, 2009, at 11:57 AM, ?ric Cl?ment wrote:
> 
>> Hi,
>>
>> I have this template file:
>>
>> group TreeManip;
>> print_root(arg1, arg2) ::= "print_root : <arg1>:<arg2>"
>>
>> print_exp(cte1, cte2) ::= <<
>> <cte1>
>> <cte2>
>> <print_root(arg1=cte1, arg2=cte2)>
>> print_exp!!
>> I don't understand why I got this exception when I load the file :
>> A first chance exception of type 'antlr.NoViableAltException'  
>> occurred in StringTemplate.dll
>> Additional information: NoViableAlt
>>
>> Regards,
>>
>> _______________________________________________
>> stringtemplate-interest mailing list
>> stringtemplate-interest at antlr.org
>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
> 
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
> 


