From m at rtin-burger.net  Wed Sep 12 02:38:04 2012
From: m at rtin-burger.net (Martin Burger)
Date: Wed, 12 Sep 2012 11:38:04 +0200
Subject: [stringtemplate-interest] How to handle plural / singular in
	templates?
Message-ID: <505057FC.908@rtin-burger.net>

Hi,

I would like to distinguish singular from plural in my templates. For 
instance, I would like to use some template code like

$if(length(customerList) > 1)$
   Customers
$else
   Customer
$endif$

As far as I understand, this is currently not possible with 
StringTemplate. Is that correct?

Thanks

Martin

From parrt at cs.usfca.edu  Sat Sep 15 11:36:09 2012
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sat, 15 Sep 2012 11:36:09 -0700
Subject: [stringtemplate-interest] ANTLR v4 status / website functionality
	moving forward
Message-ID: <B9E258B1-1B8F-4A16-BFB2-AF4EF79C04B8@cs.usfca.edu>

Howdy folks,

ANTLR v4 release is rapidly approaching. The beta of the reference book will be out next week and the remaining two or three chapters should appear within a month or so afterwards. Sam Harwell and I have been working very hard on the tool itself and we should have 4.0 ready by the time the book goes final. In the meantime, 4.0b1 will be available for use with the beta book. Oh, and we need to release 3.4.1 before 4.0.

I have paid for a new website design for both ANTLR and StringTemplate, which looks great. We will continue to use the same wiki software for documentation. The current website is generated by a Java server I built whereas the new one is going to be static so I have less software to maintain. In other words,  rather than using some kind of include mechanism to get the general look and feel on each page, the new websites will be simply static files on the disk.  The current antlr.org content will become antlr3.org, leaving the current domain pointing at v4 content.

We currently have functionality on the websites to accept new grammars and filesharing and articles and so on. Because this is so infrequent, I think it's reasonable to simply have an HTML form that has an email action instead of an HTTP POST. When I get those requests, I can simply add them to the file on the server. (will that use the user's local mail client or will it force people to set up mail in their actual browsers before it will email me? does anybody know?)

On to the grammar repository. Because it's likely we'll want to make fixes / updates to existing grammars, I don't think a simple form / email mechanism is the best solution. Right now, I have to go in and overwrite / update a number of files for a grammar update. Naturally, this screams for a revision control solution. I was thinking that we might as well just use github for this so that anybody can add or modify the publicly available grammars.

There are a number of issues with using github for this. First, I would not want to create a new repository for each grammar so we would have one repository holding all grammars. This is pretty coarse granularity.  On the other hand, if you just want one grammar, you can download individually from github. The second issue is that we would really have to have a single license for all grammars in the repository. I would hate for a GPL grammar to get its stank on the other grammars. It would confuse people to have multiple licenses within a single repository. Thirdly, not everyone is comfortable with assembly language?er?I mean git. In that case, people could simply mail me a grammar for inclusion. It would only take me a second to add it. The fourth problem. We need a clean URI for grammars and I propose: 

http://www.antlr.org/grammars/<name>

for the root directory of that project. For example,

http://www.antlr.org/grammars/java

would point out a directory that contains Java.g4 and may be a test program or something.

I could easily add a redirect in the tomcat configuration files, assuming I can stomach all of that filthy XML, but that does not scale very well when people add grammars. Instead, perhaps the best solution is to set up a cronjob that pulls from the grammar repository and leaves the grammars on antlr.org's disk so that /grammars URI points at that directory. That way, the URIs would always be up-to-date with the repository and without me having to do any work. Heh, that just might work. http://www.antlr.org/grammars by itself could redirect to the github project.

Anyway, If you have any thoughts on this stuff, please reply.

Terence

From parrt at cs.usfca.edu  Sat Sep 15 12:04:12 2012
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sat, 15 Sep 2012 12:04:12 -0700
Subject: [stringtemplate-interest] [antlr-interest] ANTLR v4 status /
	website functionality moving forward
In-Reply-To: <CAN45N112CVxeo192PzNtiNy=NHKo3XnD4PPSaTLwBUDJ5bWjMw@mail.gmail.com>
References: <B9E258B1-1B8F-4A16-BFB2-AF4EF79C04B8@cs.usfca.edu>
	<CAN45N112CVxeo192PzNtiNy=NHKo3XnD4PPSaTLwBUDJ5bWjMw@mail.gmail.com>
Message-ID: <27FA1766-1F1F-4B4B-9AD3-7BE9F340404F@cs.usfca.edu>


On Sep 15, 2012, at 11:57 AM, Eric wrote:

> First of all a big THANKS for all of your hard work and effort.

You're welcome! :)

> Since tree grammars are gone and tree manipulations are done using code,
> should we have a separate place or named subdirectory for each language
> and/or grammar to add additional/supplemental code?

good point.  Well, maybe those are applications and we have actual project repositories for those?

Ter

From parrt at cs.usfca.edu  Sat Sep 15 15:14:42 2012
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sat, 15 Sep 2012 15:14:42 -0700
Subject: [stringtemplate-interest] [antlr-interest] ANTLR v4 status /
	website functionality moving forward
In-Reply-To: <CAN1YFWsXff+OYkaBnvey5ayEL9LsnEXbNSrhWU2D57LSdjUd-A@mail.gmail.com>
References: <B9E258B1-1B8F-4A16-BFB2-AF4EF79C04B8@cs.usfca.edu>
	<CAN1YFWsXff+OYkaBnvey5ayEL9LsnEXbNSrhWU2D57LSdjUd-A@mail.gmail.com>
Message-ID: <301FD49C-926A-4869-9CA6-80FD502893E5@cs.usfca.edu>


On Sep 15, 2012, at 1:23 PM, Juancarlo A?ez wrote:
> Looking forward, I think that each grammar should have its own github
> repository, with an antlr-grammars user that forks stable versions of
> them. It can all be automated.
> 
> Grammars with no current "owner" can go as main repositories under
> antlr-grammars.

hi. Thanks for the suggestion. It's a good one, though it seems to me that the grammar should be a part of the antlr project. I guess it would be okay to have a separate "project" or whatever to hold the grammars.

Currently, for v3, I have that collection of example grammars that is nice and neat in a single directory/repo:

https://github.com/antlr/examples-v3

Hmm? not sure what the best answer is here.  It seems heavyweight to create a new repository for a single grammar file. On the other hand, it's easier to say "create repo" on github than it is to fork/add grammar/ send pull request.

I guess in the end I just don't get that many grammar submissions so people could even just email it to me and I could manage it however works most easily for me.

Ter
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20120915/77d88146/attachment.html 

From zen at freedbms.net  Sat Sep 15 18:37:07 2012
From: zen at freedbms.net (Zenaan Harkness)
Date: Sun, 16 Sep 2012 11:37:07 +1000
Subject: [stringtemplate-interest] ST C implementation contemplation
Message-ID: <CAOsGNSQQXVw34B7PHzwj5Dg2Lvqa45U1RZV0t1v7aZQPqDVvYg@mail.gmail.com>

Been contemplating a C implementation of ST this year.

Any thoughts on any issues that would arise? eg the introspective/
dynamic flexibility of Java and what might make sense in C.

I believe there are C ("low level language") die-hards out there, and
that a C implementation of some sort could significantly widen the
mind-share/ cognitive disconnect/ performance bigot-ness barriers to
ST adoption (world domination hasn't happened, ipso facto there must
be barriers to entry).

A C implementation would perhaps be amenable to a SWIG wrapping to
thereafter provide multiple language bindings. This could also broaden
the visibility/ mind share of course.

Performance - there must be some situations where every shaving of CPU
cycles counts (large shared hosting environments I guess)? Or is this
just chasing windmills these days given Java's JIT?

I have felt strongly since my first discovery of ST quite some years
ago, that it was (and still is) a largely undiscovered diamond;
templating engine par excellence where separation of concerns has
always been a foundation requirement. It seems like the non-clean
template engines out there (most of them) are 'good enough', and more
than that, respectively available in each programmers/ project's
implementation language of choice, and that again this means "it's
good enough".

So, I am imagining that lack of a C implementation could 'effectively'
be a significant yet unseen barrier to entry/ barrier to programming
language implementation etc. Yes we see some C# and Clojure coverage,
but ST World Domination was just around the corner already (at least
in my mind :) so many years ago...

Per-programming-language availability via SWIG or similar, could
finally make ST that default go-to templating engine I still see it
as. Some random ones: C, C++, Objective-C (or whatever Apple's pushing
these days), JVM based, CLR based, perl, python, ruby, scheme and/ or
other lisp, javascript, PHP, Ada.

Best
Zenaan

From parrt at cs.usfca.edu  Wed Sep 19 08:31:51 2012
From: parrt at cs.usfca.edu (Terence Parr)
Date: Wed, 19 Sep 2012 08:31:51 -0700
Subject: [stringtemplate-interest] The Definitive ANTLR 4 Reference BETA
	released
Message-ID: <3CDFD157-68F5-4E4D-B250-2CE0F9EC2478@cs.usfca.edu>

Well, It had to happen sometime?the new ANTLR v4 book is available in beta, with only two chapters left to write. Until it is complete, the book is only available at the publisher's website. You can preorder the paper book now but only the electronic format is available until we come out of beta. Go here to get it while it's hot!

http://pragprog.com/book/tpantlr2/the-definitive-antlr-4-reference

Until Oct 8, 2012, you can get a 25% discount with code: "zANTLRdiscount" while you check out at the pragmatic programmer's website.

Terence
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/stringtemplate-interest/attachments/20120919/e8bafeb8/attachment.html 

From parrt at cs.usfca.edu  Mon Sep 24 11:11:33 2012
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon, 24 Sep 2012 11:11:33 -0700
Subject: [stringtemplate-interest] ST C implementation contemplation
In-Reply-To: <CAOsGNSQQXVw34B7PHzwj5Dg2Lvqa45U1RZV0t1v7aZQPqDVvYg@mail.gmail.com>
References: <CAOsGNSQQXVw34B7PHzwj5Dg2Lvqa45U1RZV0t1v7aZQPqDVvYg@mail.gmail.com>
Message-ID: <5E609125-677C-4BE5-88B5-29C0A4619BCC@cs.usfca.edu>

hi everyone,

sorry for my lack of response on the mailing list. I'm just too completely overwhelmed at the moment. However, a few words about C for ST.  

Yep, it would be challenging without some kind of introspection because ST is a dynamically typed language. <a.b> has to find b within a at runtime. A statically typed version of the language however with no what type a is and could therefore convert b to a field reference of a.

We could add types to the language like this:

foo(MyStruct a) ::= "<a.b>"

where MyStruct is a C struct definition, instead of

foo(a) ::= "<a.b>"

That way we could generate static code, which would haul ass! It would change the flavor of the language, but rarely are static types a bad thing. I would be happy to help you to find the new syntax and think about how to generate static code. Once the templates were in place, generating static Java would also be trivial.

I'm happy that you feel so strongly about the suitability of ST :) Is truly one of my favorite pieces of software!

Ter

On Sep 15, 2012, at 6:37 PM, Zenaan Harkness wrote:

> Been contemplating a C implementation of ST this year.
> 
> Any thoughts on any issues that would arise? eg the introspective/
> dynamic flexibility of Java and what might make sense in C.
> 
> I believe there are C ("low level language") die-hards out there, and
> that a C implementation of some sort could significantly widen the
> mind-share/ cognitive disconnect/ performance bigot-ness barriers to
> ST adoption (world domination hasn't happened, ipso facto there must
> be barriers to entry).
> 
> A C implementation would perhaps be amenable to a SWIG wrapping to
> thereafter provide multiple language bindings. This could also broaden
> the visibility/ mind share of course.
> 
> Performance - there must be some situations where every shaving of CPU
> cycles counts (large shared hosting environments I guess)? Or is this
> just chasing windmills these days given Java's JIT?
> 
> I have felt strongly since my first discovery of ST quite some years
> ago, that it was (and still is) a largely undiscovered diamond;
> templating engine par excellence where separation of concerns has
> always been a foundation requirement. It seems like the non-clean
> template engines out there (most of them) are 'good enough', and more
> than that, respectively available in each programmers/ project's
> implementation language of choice, and that again this means "it's
> good enough".
> 
> So, I am imagining that lack of a C implementation could 'effectively'
> be a significant yet unseen barrier to entry/ barrier to programming
> language implementation etc. Yes we see some C# and Clojure coverage,
> but ST World Domination was just around the corner already (at least
> in my mind :) so many years ago...
> 
> Per-programming-language availability via SWIG or similar, could
> finally make ST that default go-to templating engine I still see it
> as. Some random ones: C, C++, Objective-C (or whatever Apple's pushing
> these days), JVM based, CLR based, perl, python, ruby, scheme and/ or
> other lisp, javascript, PHP, Ada.
> 
> Best
> Zenaan
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest


From parrt at cs.usfca.edu  Wed Sep 26 16:15:35 2012
From: parrt at cs.usfca.edu (Terence Parr)
Date: Wed, 26 Sep 2012 16:15:35 -0700
Subject: [stringtemplate-interest] StringTemplate 4.0.6 maintenance release
Message-ID: <99C7740B-3E2A-48BF-ACE4-4F882F17C814@cs.usfca.edu>

Hi, 4.0.6 ST (java impl) released:

http://www.stringtemplate.org/download.html

This is a bug fix release.

	? STRawGroupDir problem and ST("template") issue. When there are no formal args for template t and you map t across some values, t implicitly gets arg "it". E.g., "$names:bold()$" and bold as "<b>$it$</b>".
	? Fixed https://github.com/antlr/stringtemplate4/issues/5
	? Made fields in the error messages public

Terence

