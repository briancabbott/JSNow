.TH "ANTLR3_INT_STREAM_struct" 3 "29 Nov 2010" "Version 3.3" "ANTLR3C" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ANTLR3_INT_STREAM_struct \- 
.SH SYNOPSIS
.br
.PP
\fC#include <antlr3intstream.h>\fP
.PP
.SS "Data Fields"

.in +1c
.ti -1c
.RI "\fBANTLR3_UINT32\fP(* \fB_LA\fP )(struct \fBANTLR3_INT_STREAM_struct\fP *intStream, \fBANTLR3_INT32\fP i)"
.br
.RI "\fIGet ANTLR3_UINT32 at current input pointer + i ahead where i=1 is next ANTLR3_UINT32. \fP"
.ti -1c
.RI "\fBANTLR3_UINT32\fP \fBcachedSize\fP"
.br
.RI "\fIBecause the indirect call, though small in individual cases can mount up if there are thousands of tokens (very large input streams), callers of size can optionally use this cached size field. \fP"
.ti -1c
.RI "void(* \fBconsume\fP )(struct \fBANTLR3_INT_STREAM_struct\fP *intStream)"
.br
.RI "\fIConsume the next 'ANTR3_UINT32' in the stream. \fP"
.ti -1c
.RI "void(* \fBfree\fP )(struct \fBANTLR3_INT_STREAM_struct\fP *stream)"
.br
.RI "\fIFrees any resources that were allocated for the implementation of this interface. \fP"
.ti -1c
.RI "\fBpANTLR3_STRING\fP(* \fBgetSourceName\fP )(struct \fBANTLR3_INT_STREAM_struct\fP *intStream)"
.br
.ti -1c
.RI "\fBANTLR3_MARKER\fP(* \fBindex\fP )(struct \fBANTLR3_INT_STREAM_struct\fP *intStream)"
.br
.RI "\fIReturn the current input symbol index 0. \fP"
.ti -1c
.RI "\fBANTLR3_MARKER\fP \fBlastMarker\fP"
.br
.RI "\fILast marker position allocated. \fP"
.ti -1c
.RI "\fBANTLR3_MARKER\fP(* \fBmark\fP )(struct \fBANTLR3_INT_STREAM_struct\fP *intStream)"
.br
.RI "\fITell the stream to start buffering if it hasn't already. \fP"
.ti -1c
.RI "void(* \fBrelease\fP )(struct \fBANTLR3_INT_STREAM_struct\fP *intStream, \fBANTLR3_MARKER\fP \fBmark\fP)"
.br
.RI "\fIYou may want to commit to a backtrack but don't want to force the stream to keep bookkeeping objects around for a marker that is no longer necessary. \fP"
.ti -1c
.RI "void(* \fBrewind\fP )(struct \fBANTLR3_INT_STREAM_struct\fP *intStream, \fBANTLR3_MARKER\fP marker)"
.br
.RI "\fIReset the stream so that next call to index would return marker. \fP"
.ti -1c
.RI "void(* \fBrewindLast\fP )(struct \fBANTLR3_INT_STREAM_struct\fP *intStream)"
.br
.RI "\fIReset the stream to the last marker position, witouh destryoing the last marker position. \fP"
.ti -1c
.RI "void(* \fBseek\fP )(struct \fBANTLR3_INT_STREAM_struct\fP *intStream, \fBANTLR3_MARKER\fP \fBindex\fP)"
.br
.RI "\fISet the input cursor to the position indicated by index. \fP"
.ti -1c
.RI "\fBANTLR3_UINT32\fP(* \fBsize\fP )(struct \fBANTLR3_INT_STREAM_struct\fP *intStream)"
.br
.RI "\fIOnly makes sense for streams that buffer everything up probably, but might be useful to display the entire stream or for testing. \fP"
.ti -1c
.RI "\fBpANTLR3_STRING\fP \fBstreamName\fP"
.br
.RI "\fIPotentially useful in error reporting and so on, this string is an identification of the input source. \fP"
.ti -1c
.RI "void * \fBsuper\fP"
.br
.RI "\fIPointer to the super structure that contains this interface. \fP"
.ti -1c
.RI "\fBANTLR3_UINT32\fP \fBtype\fP"
.br
.RI "\fIInput stream type indicator. \fP"
.in -1c
.SH "Field Documentation"
.PP 
.SS "\fBANTLR3_UINT32\fP(* \fBANTLR3_INT_STREAM_struct::_LA\fP)(struct \fBANTLR3_INT_STREAM_struct\fP *intStream, \fBANTLR3_INT32\fP i)"
.PP
Get ANTLR3_UINT32 at current input pointer + i ahead where i=1 is next ANTLR3_UINT32. 
.PP
Referenced by antlr38BitLT(), antlr38BitSetUcaseLA(), antlr3CommonTokenDebugStreamSourceNew(), antlr3CommonTokenStreamNew(), antlr3CommonTreeNodeStreamNew(), antlr3CommonTreeNodeStreamNewStream(), antlr3dfapredict(), antlr3EBCDICSetupStream(), antlr3GenericSetupStream(), antlr3RecognitionExceptionNew(), antlr3UTF16Seek(), antlr3UTF16SetupStream(), antlr3UTF32Seek(), antlr3UTF32SetupStream(), antlr3UTF8SetupStream(), consumeUntil(), consumeUntilSet(), match(), matchc(), matchRange(), matchs(), mismatchIsMissingToken(), mismatchIsUnwantedToken(), nextTokenStr(), recoverFromMismatchedElement(), and setDebugListener().
.SS "\fBANTLR3_UINT32\fP \fBANTLR3_INT_STREAM_struct::cachedSize\fP"
.PP
Because the indirect call, though small in individual cases can mount up if there are thousands of tokens (very large input streams), callers of size can optionally use this cached size field. 
.PP
Referenced by tokLT().
.SS "void(* \fBANTLR3_INT_STREAM_struct::consume\fP)(struct \fBANTLR3_INT_STREAM_struct\fP *intStream)"
.PP
Consume the next 'ANTR3_UINT32' in the stream. 
.PP
Referenced by antlr38BitSeek(), antlr3CommonTokenDebugStreamSourceNew(), antlr3CommonTokenStreamNew(), antlr3CommonTreeNodeStreamNew(), antlr3CommonTreeNodeStreamNewStream(), antlr3dfapredict(), antlr3GenericSetupStream(), antlr3UTF16Seek(), antlr3UTF16SetupStream(), antlr3UTF32Seek(), antlr3UTF32SetupStream(), antlr3UTF8SetupStream(), consumeUntil(), consumeUntilSet(), match(), matchAny(), matchc(), matchRange(), matchs(), recover(), recoverFromMismatchedToken(), and setDebugListener().
.SS "void(* \fBANTLR3_INT_STREAM_struct::free\fP)(struct \fBANTLR3_INT_STREAM_struct\fP *stream)"
.PP
Frees any resources that were allocated for the implementation of this interface. 
.PP
Usually this is just releasing the memory allocated for the structure itself, but it may of course do anything it need to so long as it does not stamp on anything else. 
.PP
Referenced by antlr3CommonTreeNodeStreamFree(), antlr3CTSFree(), antlr3InputClose(), and antlr3IntStreamNew().
.SS "\fBpANTLR3_STRING\fP(* \fBANTLR3_INT_STREAM_struct::getSourceName\fP)(struct \fBANTLR3_INT_STREAM_struct\fP *intStream)"
.PP
Referenced by antlr3CommonTokenStreamNew(), and antlr3GenericSetupStream().
.SS "\fBANTLR3_MARKER\fP(* \fBANTLR3_INT_STREAM_struct::index\fP)(struct \fBANTLR3_INT_STREAM_struct\fP *intStream)"
.PP
Return the current input symbol index 0. 
.PP
.n where n indicates the last symbol has been read. 
.PP
Referenced by alreadyParsedRule(), antlr3CommonTokenStreamNew(), antlr3CommonTreeNodeStreamNew(), antlr3CommonTreeNodeStreamNewStream(), antlr3GenericSetupStream(), antlr3RecognitionExceptionNew(), antlr3UTF16SetupStream(), antlr3UTF32SetupStream(), consumeInitialHiddenTokens(), dbgConsume(), getCharIndex(), memoize(), recover(), and tokLT().
.SS "\fBANTLR3_MARKER\fP \fBANTLR3_INT_STREAM_struct::lastMarker\fP"
.PP
Last marker position allocated. 
.PP
Referenced by antlr38BitMark(), antlr38BitRewindLast(), and reset().
.SS "\fBANTLR3_MARKER\fP(* \fBANTLR3_INT_STREAM_struct::mark\fP)(struct \fBANTLR3_INT_STREAM_struct\fP *intStream)"
.PP
Tell the stream to start buffering if it hasn't already. 
.PP
Return current input position, \fBindex()\fP, or some other marker so that when passed to \fBrewind()\fP you get back to the same spot. rewind(\fBmark()\fP) should not affect the input cursor. 
.PP
Referenced by antlr3CommonTokenDebugStreamSourceNew(), antlr3CommonTokenStreamNew(), antlr3CommonTreeNodeStreamNew(), antlr3CommonTreeNodeStreamNewStream(), antlr3dfapredict(), antlr3GenericSetupStream(), pushCharStream(), setDebugListener(), and synpred().
.SS "void(* \fBANTLR3_INT_STREAM_struct::release\fP)(struct \fBANTLR3_INT_STREAM_struct\fP *intStream, \fBANTLR3_MARKER\fP \fBmark\fP)"
.PP
You may want to commit to a backtrack but don't want to force the stream to keep bookkeeping objects around for a marker that is no longer necessary. 
.PP
This will have the same behavior as \fBrewind()\fP except it releases resources without the backward seek. 
.PP
Referenced by antlr38BitRewind(), antlr3CommonTokenStreamNew(), antlr3CommonTreeNodeStreamNew(), antlr3CommonTreeNodeStreamNewStream(), and antlr3GenericSetupStream().
.SS "void(* \fBANTLR3_INT_STREAM_struct::rewind\fP)(struct \fBANTLR3_INT_STREAM_struct\fP *intStream, \fBANTLR3_MARKER\fP marker)"
.PP
Reset the stream so that next call to index would return marker. 
.PP
The marker will usually be \fBindex()\fP but it doesn't have to be. It's just a marker to indicate what state the stream was in. This is essentially calling \fBrelease()\fP and \fBseek()\fP. If there are markers created after this marker argument, this routine must unroll them like a stack. Assume the state the stream was in when this marker was created. 
.PP
Referenced by antlr38BitRewindLast(), antlr3CommonTokenDebugStreamSourceNew(), antlr3CommonTokenStreamNew(), antlr3CommonTreeNodeStreamNew(), antlr3CommonTreeNodeStreamNewStream(), antlr3dfapredict(), antlr3GenericSetupStream(), setDebugListener(), and synpred().
.SS "void(* \fBANTLR3_INT_STREAM_struct::rewindLast\fP)(struct \fBANTLR3_INT_STREAM_struct\fP *intStream)"
.PP
Reset the stream to the last marker position, witouh destryoing the last marker position. 
.PP
Referenced by antlr3CommonTokenDebugStreamSourceNew(), antlr3CommonTokenStreamNew(), antlr3CommonTreeNodeStreamNew(), antlr3CommonTreeNodeStreamNewStream(), antlr3GenericSetupStream(), popCharStream(), and setDebugListener().
.SS "void(* \fBANTLR3_INT_STREAM_struct::seek\fP)(struct \fBANTLR3_INT_STREAM_struct\fP *intStream, \fBANTLR3_MARKER\fP \fBindex\fP)"
.PP
Set the input cursor to the position indicated by index. 
.PP
This is normally used to seek ahead in the input stream. No buffering is required to do this unless you know your stream will use seek to move backwards such as when backtracking.
.PP
This is different from rewind in its multi-directional requirement and in that its argument is strictly an input cursor (index).
.PP
For char streams, seeking forward must update the stream state such as line number. For seeking backwards, you will be presumably backtracking using the mark/rewind mechanism that restores state and so this method does not need to update state when seeking backwards.
.PP
Currently, this method is only used for efficient backtracking, but in the future it may be used for incremental parsing. 
.PP
Referenced by alreadyParsedRule(), antlr3CommonTokenDebugStreamSourceNew(), antlr3CommonTokenStreamNew(), antlr3CommonTreeNodeStreamNew(), antlr3CommonTreeNodeStreamNewStream(), antlr3GenericSetupStream(), antlr3UTF16SetupStream(), antlr3UTF32SetupStream(), and setDebugListener().
.SS "\fBANTLR3_UINT32\fP(* \fBANTLR3_INT_STREAM_struct::size\fP)(struct \fBANTLR3_INT_STREAM_struct\fP *intStream)"
.PP
Only makes sense for streams that buffer everything up probably, but might be useful to display the entire stream or for testing. 
.PP
Referenced by antlr3CommonTokenStreamNew(), antlr3CommonTreeNodeStreamNew(), antlr3CommonTreeNodeStreamNewStream(), getTokensSet(), toString(), and toStringSS().
.SS "\fBpANTLR3_STRING\fP \fBANTLR3_INT_STREAM_struct::streamName\fP"
.PP
Potentially useful in error reporting and so on, this string is an identification of the input source. 
.PP
It may be NULL, so anything attempting to access it needs to check this and substitute a sensible default. 
.PP
Referenced by antlr38BitGetSourceName(), antlr38BitReuse(), antlr3FileStreamNew(), and antlr3StringStreamNew().
.SS "void* \fBANTLR3_INT_STREAM_struct::super\fP"
.PP
Pointer to the super structure that contains this interface. 
.PP
This will usually be a token stream or a tree stream. 
.PP
Referenced by antlr38BitConsume(), antlr38BitIndex(), antlr38BitLA(), antlr38BitLA_ucase(), antlr38BitMark(), antlr38BitRelease(), antlr38BitRewind(), antlr38BitSeek(), antlr3CommonTokenStreamNew(), antlr3CommonTreeNodeStreamNew(), antlr3CommonTreeNodeStreamNewStream(), antlr3CTSFree(), antlr3EBCDICLA(), antlr3GenericSetupStream(), antlr3UTF16Consume(), antlr3UTF16ConsumeBE(), antlr3UTF16ConsumeLE(), antlr3UTF16Index(), antlr3UTF16LA(), antlr3UTF16LABE(), antlr3UTF16LALE(), antlr3UTF16Seek(), antlr3UTF32Consume(), antlr3UTF32Index(), antlr3UTF32LA(), antlr3UTF32LABE(), antlr3UTF32LALE(), antlr3UTF32Seek(), antlr3UTF8Consume(), antlr3UTF8LA(), consume(), consumeInitialHiddenTokens(), dbgConsume(), getCurrentInputSymbol(), and getMissingSymbol().
.SS "\fBANTLR3_UINT32\fP \fBANTLR3_INT_STREAM_struct::type\fP"
.PP
Input stream type indicator. 
.PP
Sometimes useful for error reporting etc. 
.PP
Referenced by antlr3CommonTokenStreamNew(), antlr3CommonTreeNodeStreamNew(), antlr3CommonTreeNodeStreamNewStream(), antlr3GenericSetupStream(), and antlr3RecognitionExceptionNew().

.SH "Author"
.PP 
Generated automatically by Doxygen for ANTLR3C from the source code.
