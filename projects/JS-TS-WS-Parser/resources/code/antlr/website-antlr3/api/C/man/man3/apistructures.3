.TH "API Typedefs and Structs" 3 "29 Nov 2010" "Version 3.3" "ANTLR3C" \" -*- nroff -*-
.ad l
.nh
.SH NAME
API Typedefs and Structs \- 
.SH "Detailed Description"
.PP 
These structures (and the typedefs that you use to reference them and their pointers) are the C equivalent of objects. 
.PP
They correspond (roughly) to the Java runtime system classes and contain all the data elements for a particular interface as well as all the pointers to functions that implement these interfaces.
.PP
There are constructor functions exported from the C runtime, which you use to create a default implementation of one of these 'classes'. You can then override any part of the implementation by installing your own function pointers, before using the interface 'object' you have created.
.PP
For instance, you can override the default error message reporting function by replacing the standard (example) implementation of this function with your own. In your grammar, you would place the following
.PP
.PP
.nf
 @parser::apifuncs
 {
    // Install custom error message display
    //
    RECOGNIZER->displayRecognitionError = produceError;
 }
.fi
.PP
.PP
The special section apiFuncs is guaranteed to be generated after the RECONGIZER 'object' has already be created and initialized, so you may install your own implementations of the \fBANTLR3_BASE_RECOGNIZER\fP interface functions. The error display function is likely to be the only one you are interested in replacing.
.PP
Some typedef structures contain either pointers to 'inherited' objects (usual) or embedded structures/typedefs (unusual). In some cases, the pointers passed around by the paresr or tree parser are actually the pointers to these embedded structures (such as \fBpANTLR3_BASE_TREE\fP), and these embedded 'objects' contain pointers to their encapsulating objects. This is the equivalent of passing interface objects around in object oriented languages. 
.PP
.SS "Modules"

.in +1c
.ti -1c
.RI "\fBANTLR3_BASE_RECOGNIZER - Base Recognizer Class Definition\fP"
.br
.RI "\fIThis is the definition of the base recognizer interface, instantiations of which are referred to via \fBpANTLR3_BASE_RECOGNIZER\fP. \fP"
.PP
.in +1c

.ti -1c
.RI "\fBANTLR3_RECOGNIZER_SHARED_STATE Recognizer Shared State Class Definition\fP"
.br
.ti -1c
.RI "\fBANTLR3_BITSET - Bitset Class Definition\fP"
.br
.ti -1c
.RI "\fBANTLR3_TOKEN_FACTORY - Token Factory Class Definition\fP"
.br
.ti -1c
.RI "\fBANTLR3_COMMON_TOKEN - Common Token Class Definition\fP"
.br
.ti -1c
.RI "\fBANTLR3_EXCEPTION - Exception Class Definition\fP"
.br
.ti -1c
.RI "\fBANTLR3_HASH_BUCKET - Hash Table Bucket Class Definition\fP"
.br
.ti -1c
.RI "\fBANTLR3_HASH_ENTRY - Hash Table Entry Class Definition\fP"
.br
.ti -1c
.RI "\fBANTLR3_HASH_ENUM - Hash Table Enumerator Class Definition\fP"
.br
.ti -1c
.RI "\fBANTLR3_HASH_TABLE - Hash Table Class Definition\fP"
.br
.ti -1c
.RI "\fBANTLR3_LIST - List Class Definition\fP"
.br
.ti -1c
.RI "\fBANTLR3_VECTOR_FACTORY - Vector Factory Class Definition\fP"
.br
.ti -1c
.RI "\fBANTLR3_VECTOR - Vector Class Definition\fP"
.br
.ti -1c
.RI "\fBANTLR3_STACK - Stack Class Definition\fP"
.br
.ti -1c
.RI "\fBANTLR3_INPUT_STREAM - Input Stream Class Definition\fP"
.br
.ti -1c
.RI "\fBANTLR3_LEX_STATE - Lexer State Class Definition\fP"
.br
.ti -1c
.RI "\fBANTLR3_STRING_FACTORY - String Factory Class Definition\fP"
.br
.ti -1c
.RI "\fBANTLR3_STRING - String Class Definition\fP"
.br
.ti -1c
.RI "\fBANTLR3_TOKEN_SOURCE - Token Source Class Definition\fP"
.br
.ti -1c
.RI "\fBANTLR3_TOKEN_STREAM - Token Stream Class Definition\fP"
.br
.ti -1c
.RI "\fBANTLR3_COMMON_TOKEN_STREAM - Common Token Stream Class Definition\fP"
.br
.ti -1c
.RI "\fBANTLR3_CYCLIC_DFA - Cyclic DFA Class Definition\fP"
.br
.ti -1c
.RI "\fBANTLR3_LEXER - Lexer Class Definition\fP"
.br
.ti -1c
.RI "\fBANTLR3_PARSER - Parser Class Definition\fP"
.br
.ti -1c
.RI "\fBANTLR3_BASE_TREE - Base Tree Class Definition\fP"
.br
.ti -1c
.RI "\fBANTLR3_COMMON_TREE - Common Tree Class Definition\fP"
.br
.ti -1c
.RI "\fBANTLR3_ARBORETUM - Tree Factory Class Definition\fP"
.br
.ti -1c
.RI "\fBANTLR3_PARSE_TREE - Parse Tree Class Definition\fP"
.br
.ti -1c
.RI "\fBANTLR3_TREE_NODE_STREAM - Tree Node Class Definition\fP"
.br
.ti -1c
.RI "\fBANTLR3_COMMON_TREE_NODE_STREAM - Common Tree Node Class Definition\fP"
.br
.ti -1c
.RI "\fBANTLR3_TREE_WALK_STATE - Tree Walk State Class Definition\fP"
.br
.ti -1c
.RI "\fBANTLR3_BASE_TREE_ADAPTOR - Base Tree Class Definition\fP"
.br
.ti -1c
.RI "\fBANTLR3_COMMON_TREE_ADAPTOR - Common Tree Adaptor Class Definition\fP"
.br
.ti -1c
.RI "\fBANTLR3_TREE_PARSER - Tree Parser Class Definition\fP"
.br
.ti -1c
.RI "\fBANTLR3_INT_TRIE - Trie Class Definition\fP"
.br
.ti -1c
.RI "\fBANTLR3_REWRITE_RULE_ELEMENT_STREAM - Token Rewrite Stream Class Definition\fP"
.br
.ti -1c
.RI "\fBANTLR3_DEBUG_EVENT_LISTENER - Debugger Class Definition\fP"
.br
.in -1c
.SS "Data Structures"

.in +1c
.ti -1c
.RI "struct \fBANTLR3_INPUT_STREAM_struct\fP"
.br
.RI "\fIMaster context structure for an ANTLR3 C runtime based input stream. \fP"
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef struct \fBANTLR3_INPUT_STREAM_struct\fP \fBANTLR3_INPUT_STREAM\fP"
.br
.in -1c
.SH "Typedef Documentation"
.PP 
.SS "typedef struct \fBANTLR3_INPUT_STREAM_struct\fP

     \fBANTLR3_INPUT_STREAM\fP"
.PP

