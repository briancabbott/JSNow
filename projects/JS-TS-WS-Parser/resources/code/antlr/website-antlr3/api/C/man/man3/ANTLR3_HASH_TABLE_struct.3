.TH "ANTLR3_HASH_TABLE_struct" 3 "29 Nov 2010" "Version 3.3" "ANTLR3C" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ANTLR3_HASH_TABLE_struct \- 
.SH SYNOPSIS
.br
.PP
\fC#include <antlr3collections.h>\fP
.PP
.SH "Detailed Description"
.PP 
Structure that tracks a hash table. 
.SS "Data Fields"

.in +1c
.ti -1c
.RI "int \fBallowDups\fP"
.br
.RI "\fIIndicates whether the table allows duplicate keys. \fP"
.ti -1c
.RI "\fBpANTLR3_HASH_BUCKET\fP \fBbuckets\fP"
.br
.RI "\fIPoints to the memory where the array of buckets starts. \fP"
.ti -1c
.RI "\fBANTLR3_UINT32\fP \fBcount\fP"
.br
.RI "\fIHow many elements currently exist in the table. \fP"
.ti -1c
.RI "void(* \fBdel\fP )(struct \fBANTLR3_HASH_TABLE_struct\fP *table, void *key)"
.br
.ti -1c
.RI "void(* \fBdelI\fP )(struct \fBANTLR3_HASH_TABLE_struct\fP *table, \fBANTLR3_INTKEY\fP key)"
.br
.ti -1c
.RI "\fBANTLR3_BOOLEAN\fP \fBdoStrdup\fP"
.br
.RI "\fIWhether the hash table should strdup the keys it is given or not. \fP"
.ti -1c
.RI "void(* \fBfree\fP )(struct \fBANTLR3_HASH_TABLE_struct\fP *table)"
.br
.RI "\fIPointer to function to completely delete this table. \fP"
.ti -1c
.RI "void *(* \fBget\fP )(struct \fBANTLR3_HASH_TABLE_struct\fP *table, void *key)"
.br
.ti -1c
.RI "void *(* \fBgetI\fP )(struct \fBANTLR3_HASH_TABLE_struct\fP *table, \fBANTLR3_INTKEY\fP key)"
.br
.ti -1c
.RI "\fBANTLR3_UINT32\fP \fBmodulo\fP"
.br
.RI "\fINumber of buckets available in this table. \fP"
.ti -1c
.RI "\fBANTLR3_INT32\fP(* \fBput\fP )(struct \fBANTLR3_HASH_TABLE_struct\fP *table, void *key, void *element, void(ANTLR3_CDECL *freeptr)(void *))"
.br
.ti -1c
.RI "\fBANTLR3_INT32\fP(* \fBputI\fP )(struct \fBANTLR3_HASH_TABLE_struct\fP *table, \fBANTLR3_INTKEY\fP key, void *element, void(ANTLR3_CDECL *freeptr)(void *))"
.br
.ti -1c
.RI "\fBpANTLR3_HASH_ENTRY\fP(* \fBremove\fP )(struct \fBANTLR3_HASH_TABLE_struct\fP *table, void *key)"
.br
.ti -1c
.RI "\fBpANTLR3_HASH_ENTRY\fP(* \fBremoveI\fP )(struct \fBANTLR3_HASH_TABLE_struct\fP *table, \fBANTLR3_INTKEY\fP key)"
.br
.ti -1c
.RI "\fBANTLR3_UINT32\fP(* \fBsize\fP )(struct \fBANTLR3_HASH_TABLE_struct\fP *table)"
.br
.in -1c
.SH "Field Documentation"
.PP 
.SS "int \fBANTLR3_HASH_TABLE_struct::allowDups\fP"
.PP
Indicates whether the table allows duplicate keys. 
.PP
Referenced by antlr3HashPut(), antlr3HashPutI(), and antlr3HashTableNew().
.SS "\fBpANTLR3_HASH_BUCKET\fP \fBANTLR3_HASH_TABLE_struct::buckets\fP"
.PP
Points to the memory where the array of buckets starts. 
.PP
Referenced by antlr3EnumNew(), antlr3EnumNextEntry(), antlr3HashFree(), antlr3HashGet(), antlr3HashGetI(), antlr3HashPut(), antlr3HashPutI(), antlr3HashRemove(), antlr3HashRemoveI(), and antlr3HashTableNew().
.SS "\fBANTLR3_UINT32\fP \fBANTLR3_HASH_TABLE_struct::count\fP"
.PP
How many elements currently exist in the table. 
.PP
Referenced by antlr3HashPut(), antlr3HashPutI(), antlr3HashRemove(), antlr3HashRemoveI(), antlr3HashSize(), and antlr3HashTableNew().
.SS "void(* \fBANTLR3_HASH_TABLE_struct::del\fP)(struct \fBANTLR3_HASH_TABLE_struct\fP *table, void *key)"
.PP
Referenced by antlr3HashTableNew().
.SS "void(* \fBANTLR3_HASH_TABLE_struct::delI\fP)(struct \fBANTLR3_HASH_TABLE_struct\fP *table, \fBANTLR3_INTKEY\fP key)"
.PP
Referenced by antlr3HashTableNew(), and antlr3ListDelete().
.SS "\fBANTLR3_BOOLEAN\fP \fBANTLR3_HASH_TABLE_struct::doStrdup\fP"
.PP
Whether the hash table should strdup the keys it is given or not. 
.PP
Referenced by antlr3HashPut(), antlr3HashRemove(), and antlr3HashTableNew().
.SS "void(* \fBANTLR3_HASH_TABLE_struct::free\fP)(struct \fBANTLR3_HASH_TABLE_struct\fP *table)"
.PP
Pointer to function to completely delete this table. 
.PP
Referenced by antlr3HashTableNew(), and antlr3ListFree().
.SS "void*(* \fBANTLR3_HASH_TABLE_struct::get\fP)(struct \fBANTLR3_HASH_TABLE_struct\fP *table, void *key)"
.PP
Referenced by antlr3HashTableNew().
.SS "void*(* \fBANTLR3_HASH_TABLE_struct::getI\fP)(struct \fBANTLR3_HASH_TABLE_struct\fP *table, \fBANTLR3_INTKEY\fP key)"
.PP
Referenced by antlr3HashTableNew(), and antlr3ListGet().
.SS "\fBANTLR3_UINT32\fP \fBANTLR3_HASH_TABLE_struct::modulo\fP"
.PP
Number of buckets available in this table. 
.PP
Referenced by antlr3EnumNext(), antlr3EnumNextEntry(), antlr3HashFree(), antlr3HashGet(), antlr3HashGetI(), antlr3HashPut(), antlr3HashPutI(), antlr3HashRemove(), antlr3HashRemoveI(), and antlr3HashTableNew().
.SS "\fBANTLR3_INT32\fP(* \fBANTLR3_HASH_TABLE_struct::put\fP)(struct \fBANTLR3_HASH_TABLE_struct\fP *table, void *key, void *element, void(ANTLR3_CDECL *freeptr)(void *))"
.PP
Referenced by antlr3HashTableNew().
.SS "\fBANTLR3_INT32\fP(* \fBANTLR3_HASH_TABLE_struct::putI\fP)(struct \fBANTLR3_HASH_TABLE_struct\fP *table, \fBANTLR3_INTKEY\fP key, void *element, void(ANTLR3_CDECL *freeptr)(void *))"
.PP
Referenced by antlr3HashTableNew(), and antlr3ListPut().
.SS "\fBpANTLR3_HASH_ENTRY\fP(* \fBANTLR3_HASH_TABLE_struct::remove\fP)(struct \fBANTLR3_HASH_TABLE_struct\fP *table, void *key)"
.PP
Referenced by antlr3HashTableNew().
.SS "\fBpANTLR3_HASH_ENTRY\fP(* \fBANTLR3_HASH_TABLE_struct::removeI\fP)(struct \fBANTLR3_HASH_TABLE_struct\fP *table, \fBANTLR3_INTKEY\fP key)"
.PP
Referenced by antlr3HashTableNew(), and antlr3ListRemove().
.SS "\fBANTLR3_UINT32\fP(* \fBANTLR3_HASH_TABLE_struct::size\fP)(struct \fBANTLR3_HASH_TABLE_struct\fP *table)"
.PP
Referenced by antlr3HashTableNew(), antlr3ListAdd(), and antlr3ListSize().

.SH "Author"
.PP 
Generated automatically by Doxygen for ANTLR3C from the source code.
