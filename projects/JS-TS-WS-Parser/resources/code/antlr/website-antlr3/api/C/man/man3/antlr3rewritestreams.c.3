.TH "src/antlr3rewritestreams.c" 3 "29 Nov 2010" "Version 3.3" "ANTLR3C" \" -*- nroff -*-
.ad l
.nh
.SH NAME
src/antlr3rewritestreams.c \- 
.SH "Detailed Description"
.PP 
Implementation of token/tree streams that are used by the tree re-write rules to manipulate the tokens and trees produced by rules that are subject to rewrite directives. 


.SH SYNOPSIS
.br
.PP
\fC#include <antlr3rewritestreams.h>\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "static void * \fB_next\fP (\fBpANTLR3_REWRITE_RULE_ELEMENT_STREAM\fP stream)"
.br
.RI "\fIDo the work of getting the next element, making sure that it's a tree node or subtree. \fP"
.ti -1c
.RI "static void \fBadd\fP (\fBpANTLR3_REWRITE_RULE_ELEMENT_STREAM\fP stream, void *el, void(ANTLR3_CDECL *freePtr)(void *))"
.br
.ti -1c
.RI "static \fBpANTLR3_REWRITE_RULE_ELEMENT_STREAM\fP \fBantlr3RewriteRuleElementStreamNewAE\fP (\fBpANTLR3_BASE_TREE_ADAPTOR\fP adaptor, \fBpANTLR3_BASE_RECOGNIZER\fP rec, \fBpANTLR3_UINT8\fP description)"
.br
.ti -1c
.RI "static \fBpANTLR3_REWRITE_RULE_ELEMENT_STREAM\fP \fBantlr3RewriteRuleElementStreamNewAEE\fP (\fBpANTLR3_BASE_TREE_ADAPTOR\fP adaptor, \fBpANTLR3_BASE_RECOGNIZER\fP rec, \fBpANTLR3_UINT8\fP description, void *oneElement)"
.br
.ti -1c
.RI "static \fBpANTLR3_REWRITE_RULE_ELEMENT_STREAM\fP \fBantlr3RewriteRuleElementStreamNewAEV\fP (\fBpANTLR3_BASE_TREE_ADAPTOR\fP adaptor, \fBpANTLR3_BASE_RECOGNIZER\fP rec, \fBpANTLR3_UINT8\fP description, \fBpANTLR3_VECTOR\fP vector)"
.br
.ti -1c
.RI "ANTLR3_API \fBpANTLR3_REWRITE_RULE_NODE_STREAM\fP \fBantlr3RewriteRuleNODEStreamNewAE\fP (\fBpANTLR3_BASE_TREE_ADAPTOR\fP adaptor, \fBpANTLR3_BASE_RECOGNIZER\fP rec, \fBpANTLR3_UINT8\fP description)"
.br
.ti -1c
.RI "ANTLR3_API \fBpANTLR3_REWRITE_RULE_NODE_STREAM\fP \fBantlr3RewriteRuleNODEStreamNewAEE\fP (\fBpANTLR3_BASE_TREE_ADAPTOR\fP adaptor, \fBpANTLR3_BASE_RECOGNIZER\fP rec, \fBpANTLR3_UINT8\fP description, void *oneElement)"
.br
.ti -1c
.RI "ANTLR3_API \fBpANTLR3_REWRITE_RULE_NODE_STREAM\fP \fBantlr3RewriteRuleNODEStreamNewAEV\fP (\fBpANTLR3_BASE_TREE_ADAPTOR\fP adaptor, \fBpANTLR3_BASE_RECOGNIZER\fP rec, \fBpANTLR3_UINT8\fP description, \fBpANTLR3_VECTOR\fP vector)"
.br
.ti -1c
.RI "ANTLR3_API \fBpANTLR3_REWRITE_RULE_SUBTREE_STREAM\fP \fBantlr3RewriteRuleSubtreeStreamNewAE\fP (\fBpANTLR3_BASE_TREE_ADAPTOR\fP adaptor, \fBpANTLR3_BASE_RECOGNIZER\fP rec, \fBpANTLR3_UINT8\fP description)"
.br
.ti -1c
.RI "ANTLR3_API \fBpANTLR3_REWRITE_RULE_SUBTREE_STREAM\fP \fBantlr3RewriteRuleSubtreeStreamNewAEE\fP (\fBpANTLR3_BASE_TREE_ADAPTOR\fP adaptor, \fBpANTLR3_BASE_RECOGNIZER\fP rec, \fBpANTLR3_UINT8\fP description, void *oneElement)"
.br
.ti -1c
.RI "ANTLR3_API \fBpANTLR3_REWRITE_RULE_SUBTREE_STREAM\fP \fBantlr3RewriteRuleSubtreeStreamNewAEV\fP (\fBpANTLR3_BASE_TREE_ADAPTOR\fP adaptor, \fBpANTLR3_BASE_RECOGNIZER\fP rec, \fBpANTLR3_UINT8\fP description, \fBpANTLR3_VECTOR\fP vector)"
.br
.ti -1c
.RI "ANTLR3_API \fBpANTLR3_REWRITE_RULE_TOKEN_STREAM\fP \fBantlr3RewriteRuleTOKENStreamNewAE\fP (\fBpANTLR3_BASE_TREE_ADAPTOR\fP adaptor, \fBpANTLR3_BASE_RECOGNIZER\fP rec, \fBpANTLR3_UINT8\fP description)"
.br
.ti -1c
.RI "ANTLR3_API \fBpANTLR3_REWRITE_RULE_TOKEN_STREAM\fP \fBantlr3RewriteRuleTOKENStreamNewAEE\fP (\fBpANTLR3_BASE_TREE_ADAPTOR\fP adaptor, \fBpANTLR3_BASE_RECOGNIZER\fP rec, \fBpANTLR3_UINT8\fP description, void *oneElement)"
.br
.ti -1c
.RI "ANTLR3_API \fBpANTLR3_REWRITE_RULE_TOKEN_STREAM\fP \fBantlr3RewriteRuleTOKENStreamNewAEV\fP (\fBpANTLR3_BASE_TREE_ADAPTOR\fP adaptor, \fBpANTLR3_BASE_RECOGNIZER\fP rec, \fBpANTLR3_UINT8\fP description, \fBpANTLR3_VECTOR\fP vector)"
.br
.ti -1c
.RI "static void * \fBdupTok\fP (\fBpANTLR3_REWRITE_RULE_ELEMENT_STREAM\fP stream, void *el)"
.br
.RI "\fIWhen constructing trees, sometimes we need to dup a token or AST subtree. \fP"
.ti -1c
.RI "static void * \fBdupTree\fP (\fBpANTLR3_REWRITE_RULE_ELEMENT_STREAM\fP stream, void *element)"
.br
.RI "\fIWhen constructing trees, sometimes we need to dup a token or AST subtree. \fP"
.ti -1c
.RI "static void * \fBdupTreeNode\fP (\fBpANTLR3_REWRITE_RULE_ELEMENT_STREAM\fP stream, void *element)"
.br
.RI "\fIWhen constructing trees, sometimes we need to dup a token or AST subtree. \fP"
.ti -1c
.RI "static void \fBexpungeRS\fP (\fBpANTLR3_REWRITE_RULE_ELEMENT_STREAM\fP stream)"
.br
.ti -1c
.RI "static void \fBfreeNodeRS\fP (\fBpANTLR3_REWRITE_RULE_ELEMENT_STREAM\fP stream)"
.br
.RI "\fIDo special nilNode reuse detection for node streams. \fP"
.ti -1c
.RI "static void \fBfreeRS\fP (\fBpANTLR3_REWRITE_RULE_ELEMENT_STREAM\fP stream)"
.br
.ti -1c
.RI "static void * \fBgetDescription\fP (\fBpANTLR3_REWRITE_RULE_ELEMENT_STREAM\fP stream)"
.br
.RI "\fIReturns the description string if there is one available (check for NULL). \fP"
.ti -1c
.RI "static \fBANTLR3_BOOLEAN\fP \fBhasNext\fP (\fBpANTLR3_REWRITE_RULE_ELEMENT_STREAM\fP stream)"
.br
.RI "\fIReturns ANTLR3_TRUE if there is a next element available. \fP"
.ti -1c
.RI "static void * \fBnext\fP (\fBpANTLR3_REWRITE_RULE_ELEMENT_STREAM\fP stream)"
.br
.RI "\fIReturn the next element in the stream. \fP"
.ti -1c
.RI "static \fBpANTLR3_BASE_TREE\fP \fBnextNode\fP (\fBpANTLR3_REWRITE_RULE_ELEMENT_STREAM\fP stream)"
.br
.RI "\fITreat next element as a single node even if it's a subtree. \fP"
.ti -1c
.RI "static \fBpANTLR3_BASE_TREE\fP \fBnextNodeNode\fP (\fBpANTLR3_REWRITE_RULE_ELEMENT_STREAM\fP stream)"
.br
.ti -1c
.RI "static \fBpANTLR3_BASE_TREE\fP \fBnextNodeToken\fP (\fBpANTLR3_REWRITE_RULE_ELEMENT_STREAM\fP stream)"
.br
.RI "\fIGet the next token from the list and create a node for it This is the implementation for token streams. \fP"
.ti -1c
.RI "static void * \fBnextToken\fP (\fBpANTLR3_REWRITE_RULE_ELEMENT_STREAM\fP stream)"
.br
.RI "\fIReturn the next element for a caller that wants just the token. \fP"
.ti -1c
.RI "static \fBpANTLR3_BASE_TREE\fP \fBnextTree\fP (\fBpANTLR3_REWRITE_RULE_ELEMENT_STREAM\fP stream)"
.br
.RI "\fIReturn the next element in the stream. \fP"
.ti -1c
.RI "static void \fBreset\fP (\fBpANTLR3_REWRITE_RULE_ELEMENT_STREAM\fP stream)"
.br
.RI "\fIReset the condition of this stream so that it appears we have not consumed any of its elements. \fP"
.ti -1c
.RI "static \fBANTLR3_UINT32\fP \fBsize\fP (\fBpANTLR3_REWRITE_RULE_ELEMENT_STREAM\fP stream)"
.br
.RI "\fINumber of elements available in the stream. \fP"
.ti -1c
.RI "static \fBpANTLR3_BASE_TREE\fP \fBtoTree\fP (\fBpANTLR3_REWRITE_RULE_ELEMENT_STREAM\fP stream, void *element)"
.br
.RI "\fIWe don;t explicitly convert to a tree unless the call goes to nextTree, which means rewrites are heterogeneous. \fP"
.ti -1c
.RI "static \fBpANTLR3_BASE_TREE\fP \fBtoTreeNode\fP (\fBpANTLR3_REWRITE_RULE_ELEMENT_STREAM\fP stream, void *element)"
.br
.RI "\fIEnsure stream emits trees; tokens must be converted to AST nodes. \fP"
.in -1c
.SH "Function Documentation"
.PP 
.SS "static void * _next (\fBpANTLR3_REWRITE_RULE_ELEMENT_STREAM\fP stream)\fC [static]\fP"
.PP
Do the work of getting the next element, making sure that it's a tree node or subtree. 
.PP
Deal with the optimization of single- element list versus list of size > 1. Throw an exception (or something similar) if the stream is empty or we're out of elements and size>1. You can override in a 'subclass' if necessary. 
.PP
References ANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct::cursor, ANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct::elements, ANTLR3_VECTOR_struct::get, ANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct::singleElement, ANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct::size, and ANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct::toTree.
.PP
Referenced by antlr3RewriteRuleElementStreamNewAE().
.SS "static void add (\fBpANTLR3_REWRITE_RULE_ELEMENT_STREAM\fP stream, void * el, void(ANTLR3_CDECL *freePtr)(void *))\fC [static]\fP"
.PP
References ANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct::adaptor, ANTLR3_VECTOR_struct::add, ANTLR3_TRUE, ANTLR3_VECTOR_struct::count, ANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct::elements, ANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct::freeElements, ANTLR3_VECTOR_FACTORY_struct::newVector, ANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct::singleElement, and ANTLR3_BASE_TREE_ADAPTOR_struct::super.
.SS "static \fBpANTLR3_REWRITE_RULE_ELEMENT_STREAM\fP antlr3RewriteRuleElementStreamNewAE (\fBpANTLR3_BASE_TREE_ADAPTOR\fP adaptor, \fBpANTLR3_BASE_RECOGNIZER\fP rec, \fBpANTLR3_UINT8\fP description)\fC [static]\fP"
.PP
References _next(), ANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct::_next, ANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct::adaptor, ANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct::add, ANTLR3_FALSE, ANTLR3_MALLOC, ANTLR3_VECTOR_struct::count, ANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct::cursor, ANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct::dirty, ANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct::elementDescription, ANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct::elements, ANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct::free, ANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct::freeElements, freeRS(), getDescription(), ANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct::getDescription, hasNext(), ANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct::hasNext, next(), ANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct::next, nextNode(), ANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct::nextNode, nextToken(), ANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct::nextToken, nextTree(), ANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct::nextTree, ANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct::rec, ANTLR3_VECTOR_struct::remove, reset(), ANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct::reset, ANTLR3_RECOGNIZER_SHARED_STATE_struct::rStreams, ANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct::singleElement, size(), ANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct::size, ANTLR3_BASE_RECOGNIZER_struct::state, toTree(), and ANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct::toTree.
.PP
Referenced by antlr3RewriteRuleElementStreamNewAEE(), antlr3RewriteRuleElementStreamNewAEV(), antlr3RewriteRuleNODEStreamNewAE(), antlr3RewriteRuleSubtreeStreamNewAE(), and antlr3RewriteRuleTOKENStreamNewAE().
.SS "static \fBpANTLR3_REWRITE_RULE_ELEMENT_STREAM\fP antlr3RewriteRuleElementStreamNewAEE (\fBpANTLR3_BASE_TREE_ADAPTOR\fP adaptor, \fBpANTLR3_BASE_RECOGNIZER\fP rec, \fBpANTLR3_UINT8\fP description, void * oneElement)\fC [static]\fP"
.PP
References ANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct::add, and antlr3RewriteRuleElementStreamNewAE().
.PP
Referenced by antlr3RewriteRuleNODEStreamNewAEE(), antlr3RewriteRuleSubtreeStreamNewAEE(), and antlr3RewriteRuleTOKENStreamNewAEE().
.SS "static \fBpANTLR3_REWRITE_RULE_ELEMENT_STREAM\fP antlr3RewriteRuleElementStreamNewAEV (\fBpANTLR3_BASE_TREE_ADAPTOR\fP adaptor, \fBpANTLR3_BASE_RECOGNIZER\fP rec, \fBpANTLR3_UINT8\fP description, \fBpANTLR3_VECTOR\fP vector)\fC [static]\fP"
.PP
References ANTLR3_FALSE, ANTLR3_TRUE, antlr3RewriteRuleElementStreamNewAE(), ANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct::elements, ANTLR3_VECTOR_struct::factoryMade, and ANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct::freeElements.
.PP
Referenced by antlr3RewriteRuleNODEStreamNewAEV(), antlr3RewriteRuleSubtreeStreamNewAEV(), and antlr3RewriteRuleTOKENStreamNewAEV().
.SS "ANTLR3_API \fBpANTLR3_REWRITE_RULE_NODE_STREAM\fP antlr3RewriteRuleNODEStreamNewAE (\fBpANTLR3_BASE_TREE_ADAPTOR\fP adaptor, \fBpANTLR3_BASE_RECOGNIZER\fP rec, \fBpANTLR3_UINT8\fP description)"
.PP
References antlr3RewriteRuleElementStreamNewAE(), ANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct::dup, dupTreeNode(), ANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct::free, freeNodeRS(), ANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct::nextNode, nextNodeNode(), ANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct::toTree, and toTreeNode().
.SS "ANTLR3_API \fBpANTLR3_REWRITE_RULE_NODE_STREAM\fP antlr3RewriteRuleNODEStreamNewAEE (\fBpANTLR3_BASE_TREE_ADAPTOR\fP adaptor, \fBpANTLR3_BASE_RECOGNIZER\fP rec, \fBpANTLR3_UINT8\fP description, void * oneElement)"
.PP
References antlr3RewriteRuleElementStreamNewAEE(), ANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct::dup, dupTreeNode(), ANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct::free, freeNodeRS(), ANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct::nextNode, nextNodeNode(), ANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct::toTree, and toTreeNode().
.SS "ANTLR3_API \fBpANTLR3_REWRITE_RULE_NODE_STREAM\fP antlr3RewriteRuleNODEStreamNewAEV (\fBpANTLR3_BASE_TREE_ADAPTOR\fP adaptor, \fBpANTLR3_BASE_RECOGNIZER\fP rec, \fBpANTLR3_UINT8\fP description, \fBpANTLR3_VECTOR\fP vector)"
.PP
References antlr3RewriteRuleElementStreamNewAEV(), ANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct::dup, dupTreeNode(), ANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct::free, freeNodeRS(), ANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct::nextNode, nextNodeNode(), ANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct::toTree, and toTreeNode().
.SS "ANTLR3_API \fBpANTLR3_REWRITE_RULE_SUBTREE_STREAM\fP antlr3RewriteRuleSubtreeStreamNewAE (\fBpANTLR3_BASE_TREE_ADAPTOR\fP adaptor, \fBpANTLR3_BASE_RECOGNIZER\fP rec, \fBpANTLR3_UINT8\fP description)"
.PP
References antlr3RewriteRuleElementStreamNewAE(), ANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct::dup, dupTree(), ANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct::free, freeNodeRS(), nextNode(), and ANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct::nextNode.
.SS "ANTLR3_API \fBpANTLR3_REWRITE_RULE_SUBTREE_STREAM\fP antlr3RewriteRuleSubtreeStreamNewAEE (\fBpANTLR3_BASE_TREE_ADAPTOR\fP adaptor, \fBpANTLR3_BASE_RECOGNIZER\fP rec, \fBpANTLR3_UINT8\fP description, void * oneElement)"
.PP
References antlr3RewriteRuleElementStreamNewAEE(), ANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct::dup, dupTree(), ANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct::free, freeNodeRS(), nextNode(), and ANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct::nextNode.
.SS "ANTLR3_API \fBpANTLR3_REWRITE_RULE_SUBTREE_STREAM\fP antlr3RewriteRuleSubtreeStreamNewAEV (\fBpANTLR3_BASE_TREE_ADAPTOR\fP adaptor, \fBpANTLR3_BASE_RECOGNIZER\fP rec, \fBpANTLR3_UINT8\fP description, \fBpANTLR3_VECTOR\fP vector)"
.PP
References antlr3RewriteRuleElementStreamNewAEV(), ANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct::dup, dupTree(), ANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct::free, freeNodeRS(), nextNode(), and ANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct::nextNode.
.SS "ANTLR3_API \fBpANTLR3_REWRITE_RULE_TOKEN_STREAM\fP antlr3RewriteRuleTOKENStreamNewAE (\fBpANTLR3_BASE_TREE_ADAPTOR\fP adaptor, \fBpANTLR3_BASE_RECOGNIZER\fP rec, \fBpANTLR3_UINT8\fP description)"
.PP
References antlr3RewriteRuleElementStreamNewAE(), ANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct::dup, dupTok(), ANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct::nextNode, and nextNodeToken().
.SS "ANTLR3_API \fBpANTLR3_REWRITE_RULE_TOKEN_STREAM\fP antlr3RewriteRuleTOKENStreamNewAEE (\fBpANTLR3_BASE_TREE_ADAPTOR\fP adaptor, \fBpANTLR3_BASE_RECOGNIZER\fP rec, \fBpANTLR3_UINT8\fP description, void * oneElement)"
.PP
References antlr3RewriteRuleElementStreamNewAEE(), ANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct::dup, dupTok(), ANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct::nextNode, and nextNodeToken().
.SS "ANTLR3_API \fBpANTLR3_REWRITE_RULE_TOKEN_STREAM\fP antlr3RewriteRuleTOKENStreamNewAEV (\fBpANTLR3_BASE_TREE_ADAPTOR\fP adaptor, \fBpANTLR3_BASE_RECOGNIZER\fP rec, \fBpANTLR3_UINT8\fP description, \fBpANTLR3_VECTOR\fP vector)"
.PP
References antlr3RewriteRuleElementStreamNewAEV(), ANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct::dup, dupTok(), ANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct::nextNode, and nextNodeToken().
.SS "static void * dupTok (\fBpANTLR3_REWRITE_RULE_ELEMENT_STREAM\fP stream, void * el)\fC [static]\fP"
.PP
When constructing trees, sometimes we need to dup a token or AST subtree. 
.PP
Dup'ing a token means just creating another AST node around it. For trees, you must call the \fBadaptor.dupTree()\fP. 
.PP
References ANTLR3_FPRINTF.
.PP
Referenced by antlr3RewriteRuleTOKENStreamNewAE(), antlr3RewriteRuleTOKENStreamNewAEE(), and antlr3RewriteRuleTOKENStreamNewAEV().
.SS "static void * dupTree (\fBpANTLR3_REWRITE_RULE_ELEMENT_STREAM\fP stream, void * element)\fC [static]\fP"
.PP
When constructing trees, sometimes we need to dup a token or AST subtree. 
.PP
Dup'ing a token means just creating another AST node around it. For trees, you must call the \fBadaptor.dupTree()\fP. 
.PP
References ANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct::adaptor, and ANTLR3_BASE_TREE_ADAPTOR_struct::dupNode.
.SS "static void * dupTreeNode (\fBpANTLR3_REWRITE_RULE_ELEMENT_STREAM\fP stream, void * element)\fC [static]\fP"
.PP
When constructing trees, sometimes we need to dup a token or AST subtree. 
.PP
Dup'ing a token means just creating another AST node around it. For trees, you must call the \fBadaptor.dupTree()\fP. 
.PP
References ANTLR3_FPRINTF.
.PP
Referenced by antlr3RewriteRuleNODEStreamNewAE(), antlr3RewriteRuleNODEStreamNewAEE(), and antlr3RewriteRuleNODEStreamNewAEV().
.SS "static void expungeRS (\fBpANTLR3_REWRITE_RULE_ELEMENT_STREAM\fP stream)\fC [static]\fP"
.PP
References ANTLR3_FREE, ANTLR3_TRUE, ANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct::elements, and ANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct::freeElements.
.PP
Referenced by freeNodeRS(), and freeRS().
.SS "static void freeNodeRS (\fBpANTLR3_REWRITE_RULE_ELEMENT_STREAM\fP stream)\fC [static]\fP"
.PP
Do special nilNode reuse detection for node streams. 
.PP
References ANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct::adaptor, ANTLR3_VECTOR_struct::add, ANTLR3_FALSE, ANTLR3_TRUE, ANTLR3_VECTOR_struct::clear, ANTLR3_VECTOR_struct::count, ANTLR3_VECTOR_ELEMENT_struct::element, ANTLR3_VECTOR_struct::elements, ANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct::elements, expungeRS(), ANTLR3_VECTOR_struct::factoryMade, ANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct::freeElements, ANTLR3_BASE_TREE_struct::isNilNode, ANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct::rec, ANTLR3_VECTOR_FACTORY_struct::returnVector, ANTLR3_RECOGNIZER_SHARED_STATE_struct::rStreams, ANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct::singleElement, ANTLR3_BASE_RECOGNIZER_struct::state, and ANTLR3_BASE_TREE_ADAPTOR_struct::super.
.PP
Referenced by antlr3RewriteRuleNODEStreamNewAE(), antlr3RewriteRuleNODEStreamNewAEE(), antlr3RewriteRuleNODEStreamNewAEV(), antlr3RewriteRuleSubtreeStreamNewAE(), antlr3RewriteRuleSubtreeStreamNewAEE(), and antlr3RewriteRuleSubtreeStreamNewAEV().
.SS "static void freeRS (\fBpANTLR3_REWRITE_RULE_ELEMENT_STREAM\fP stream)\fC [static]\fP"
.PP
References ANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct::adaptor, ANTLR3_VECTOR_struct::add, ANTLR3_FALSE, ANTLR3_TRUE, ANTLR3_VECTOR_struct::clear, ANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct::elements, expungeRS(), ANTLR3_VECTOR_struct::factoryMade, ANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct::freeElements, ANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct::rec, ANTLR3_VECTOR_FACTORY_struct::returnVector, ANTLR3_RECOGNIZER_SHARED_STATE_struct::rStreams, ANTLR3_BASE_RECOGNIZER_struct::state, and ANTLR3_BASE_TREE_ADAPTOR_struct::super.
.PP
Referenced by antlr3RewriteRuleElementStreamNewAE().
.SS "static void * getDescription (\fBpANTLR3_REWRITE_RULE_ELEMENT_STREAM\fP stream)\fC [static]\fP"
.PP
Returns the description string if there is one available (check for NULL). 
.PP
References ANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct::elementDescription.
.PP
Referenced by antlr3RewriteRuleElementStreamNewAE().
.SS "static \fBANTLR3_BOOLEAN\fP hasNext (\fBpANTLR3_REWRITE_RULE_ELEMENT_STREAM\fP stream)\fC [static]\fP"
.PP
Returns ANTLR3_TRUE if there is a next element available. 
.PP
References ANTLR3_FALSE, ANTLR3_TRUE, ANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct::cursor, ANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct::elements, ANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct::singleElement, and ANTLR3_VECTOR_struct::size.
.PP
Referenced by antlr3RewriteRuleElementStreamNewAE().
.SS "static void * next (\fBpANTLR3_REWRITE_RULE_ELEMENT_STREAM\fP stream)\fC [static]\fP"
.PP
Return the next element in the stream. 
.PP
If out of elements, throw an exception unless \fBsize()\fP==1. If size is 1, then return elements[0]. 
.PP
References ANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct::_next, ANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct::cursor, ANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct::dup, and ANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct::size.
.PP
Referenced by antlr3ExceptionFree(), and antlr3RewriteRuleElementStreamNewAE().
.SS "static \fBpANTLR3_BASE_TREE\fP nextNode (\fBpANTLR3_REWRITE_RULE_ELEMENT_STREAM\fP stream)\fC [static]\fP"
.PP
Treat next element as a single node even if it's a subtree. 
.PP
This is used instead of \fBnext()\fP when the result has to be a tree root node. Also prevents us from duplicating recently-added children; e.g., ^(type ID)+ adds ID to type and then 2nd iteration must dup the type node, but ID has been added.
.PP
Referencing to a rule result twice is ok; dup entire tree as we can't be adding trees; e.g., expr expr. 
.PP
References ANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct::_next, ANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct::adaptor, ANTLR3_TRUE, ANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct::cursor, ANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct::dirty, ANTLR3_BASE_TREE_ADAPTOR_struct::dupNode, and ANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct::size.
.PP
Referenced by antlr3RewriteRuleElementStreamNewAE(), antlr3RewriteRuleSubtreeStreamNewAE(), antlr3RewriteRuleSubtreeStreamNewAEE(), antlr3RewriteRuleSubtreeStreamNewAEV(), intTrieAdd(), and intTrieGet().
.SS "static \fBpANTLR3_BASE_TREE\fP nextNodeNode (\fBpANTLR3_REWRITE_RULE_ELEMENT_STREAM\fP stream)\fC [static]\fP"
.PP
References ANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct::_next.
.PP
Referenced by antlr3RewriteRuleNODEStreamNewAE(), antlr3RewriteRuleNODEStreamNewAEE(), and antlr3RewriteRuleNODEStreamNewAEV().
.SS "static \fBpANTLR3_BASE_TREE\fP nextNodeToken (\fBpANTLR3_REWRITE_RULE_ELEMENT_STREAM\fP stream)\fC [static]\fP"
.PP
Get the next token from the list and create a node for it This is the implementation for token streams. 
.PP
References ANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct::_next, ANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct::adaptor, and ANTLR3_BASE_TREE_ADAPTOR_struct::create.
.PP
Referenced by antlr3RewriteRuleTOKENStreamNewAE(), antlr3RewriteRuleTOKENStreamNewAEE(), and antlr3RewriteRuleTOKENStreamNewAEV().
.SS "static void * nextToken (\fBpANTLR3_REWRITE_RULE_ELEMENT_STREAM\fP stream)\fC [static]\fP"
.PP
Return the next element for a caller that wants just the token. 
.PP
References ANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct::_next.
.SS "static \fBpANTLR3_BASE_TREE\fP nextTree (\fBpANTLR3_REWRITE_RULE_ELEMENT_STREAM\fP stream)\fC [static]\fP"
.PP
Return the next element in the stream. 
.PP
If out of elements, throw an exception unless \fBsize()\fP==1. If size is 1, then return elements[0]. Return a duplicate node/subtree if stream is out of elements and size==1. If we've already used the element, dup (dirty bit set). 
.PP
References ANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct::_next, ANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct::cursor, ANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct::dirty, ANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct::dup, and ANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct::size.
.PP
Referenced by antlr3RewriteRuleElementStreamNewAE().
.SS "static void reset (\fBpANTLR3_REWRITE_RULE_ELEMENT_STREAM\fP stream)\fC [static]\fP"
.PP
Reset the condition of this stream so that it appears we have not consumed any of its elements. 
.PP
Elements themselves are untouched. 
.PP
References ANTLR3_TRUE, ANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct::cursor, and ANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct::dirty.
.SS "static \fBANTLR3_UINT32\fP size (\fBpANTLR3_REWRITE_RULE_ELEMENT_STREAM\fP stream)\fC [static]\fP"
.PP
Number of elements available in the stream. 
.PP

.PP
Should be a count of one if singleElement is set. I copied this logic from the java implementation, which I suspect is just guarding against someone setting singleElement and forgetting to NULL it out 
.PP
References ANTLR3_VECTOR_struct::count, ANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct::elements, and ANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct::singleElement.
.SS "static \fBpANTLR3_BASE_TREE\fP toTree (\fBpANTLR3_REWRITE_RULE_ELEMENT_STREAM\fP stream, void * element)\fC [static]\fP"
.PP
We don;t explicitly convert to a tree unless the call goes to nextTree, which means rewrites are heterogeneous. 
.PP
Referenced by antlr3RewriteRuleElementStreamNewAE().
.SS "static \fBpANTLR3_BASE_TREE\fP toTreeNode (\fBpANTLR3_REWRITE_RULE_ELEMENT_STREAM\fP stream, void * element)\fC [static]\fP"
.PP
Ensure stream emits trees; tokens must be converted to AST nodes. 
.PP
AST nodes can be passed through unmolested. 
.PP
References ANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct::adaptor, and ANTLR3_BASE_TREE_ADAPTOR_struct::dupNode.
.PP
Referenced by antlr3RewriteRuleNODEStreamNewAE(), antlr3RewriteRuleNODEStreamNewAEE(), and antlr3RewriteRuleNODEStreamNewAEV().
.SH "Author"
.PP 
Generated automatically by Doxygen for ANTLR3C from the source code.
