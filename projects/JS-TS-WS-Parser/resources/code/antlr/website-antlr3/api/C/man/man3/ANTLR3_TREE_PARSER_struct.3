.TH "ANTLR3_TREE_PARSER_struct" 3 "29 Nov 2010" "Version 3.3" "ANTLR3C" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ANTLR3_TREE_PARSER_struct \- 
.SH SYNOPSIS
.br
.PP
\fC#include <antlr3treeparser.h>\fP
.PP
.SH "Detailed Description"
.PP 
Internal structure representing an element in a hash bucket. 

Stores the original key so that duplicate keys can be rejected if necessary, and contains function can be supported If the hash key could be unique I would have invented the perfect compression algorithm ;-) 
.SS "Data Fields"

.in +1c
.ti -1c
.RI "\fBpANTLR3_COMMON_TREE_NODE_STREAM\fP \fBctnstream\fP"
.br
.RI "\fIPointer to the common tree node stream for the parser. \fP"
.ti -1c
.RI "void(* \fBfree\fP )(struct \fBANTLR3_TREE_PARSER_struct\fP *parser)"
.br
.RI "\fIPointer to a function that knows how to free resources of an ANTLR3 tree parser. \fP"
.ti -1c
.RI "\fBpANTLR3_COMMON_TREE_NODE_STREAM\fP(* \fBgetTreeNodeStream\fP )(struct \fBANTLR3_TREE_PARSER_struct\fP *parser)"
.br
.RI "\fIReturn a pointer to the input stream. \fP"
.ti -1c
.RI "\fBpANTLR3_BASE_RECOGNIZER\fP \fBrec\fP"
.br
.RI "\fIA pointer to the base recognizer, where most of the parser functions actually live because they are shared between parser and tree parser and this is the easier way than copying the interface all over the place. \fP"
.ti -1c
.RI "void(* \fBsetTreeNodeStream\fP )(struct \fBANTLR3_TREE_PARSER_struct\fP *parser, \fBpANTLR3_COMMON_TREE_NODE_STREAM\fP input)"
.br
.RI "\fISet the input stream and reset the parser. \fP"
.ti -1c
.RI "void * \fBsuper\fP"
.br
.RI "\fIPointer to any super class. \fP"
.in -1c
.SH "Field Documentation"
.PP 
.SS "\fBpANTLR3_COMMON_TREE_NODE_STREAM\fP \fBANTLR3_TREE_PARSER_struct::ctnstream\fP"
.PP
Pointer to the common tree node stream for the parser. 
.PP
Referenced by alreadyParsedRule(), antlr3RecognitionExceptionNew(), consumeUntil(), consumeUntilSet(), displayRecognitionError(), getTreeNodeStream(), match(), matchAny(), memoize(), recover(), recoverFromMismatchedElement(), recoverFromMismatchedSet(), recoverFromMismatchedToken(), setTreeNodeStream(), and synpred().
.SS "void(* \fBANTLR3_TREE_PARSER_struct::free\fP)(struct \fBANTLR3_TREE_PARSER_struct\fP *parser)"
.PP
Pointer to a function that knows how to free resources of an ANTLR3 tree parser. 
.PP
Referenced by antlr3ArboretumNew(), and antlr3TreeParserNewStream().
.SS "\fBpANTLR3_COMMON_TREE_NODE_STREAM\fP(* \fBANTLR3_TREE_PARSER_struct::getTreeNodeStream\fP)(struct \fBANTLR3_TREE_PARSER_struct\fP *parser)"
.PP
Return a pointer to the input stream. 
.PP
Referenced by antlr3TreeParserNewStream().
.SS "\fBpANTLR3_BASE_RECOGNIZER\fP \fBANTLR3_TREE_PARSER_struct::rec\fP"
.PP
A pointer to the base recognizer, where most of the parser functions actually live because they are shared between parser and tree parser and this is the easier way than copying the interface all over the place. 
.PP
Macros hide this for the generated code so it is easier on the eye (though not the debugger ;-). 
.PP
Referenced by antlr3TreeParserNewStream(), freeParser(), and setTreeNodeStream().
.SS "void(* \fBANTLR3_TREE_PARSER_struct::setTreeNodeStream\fP)(struct \fBANTLR3_TREE_PARSER_struct\fP *parser, \fBpANTLR3_COMMON_TREE_NODE_STREAM\fP input)"
.PP
Set the input stream and reset the parser. 
.PP
Referenced by antlr3TreeParserNewStream().
.SS "void* \fBANTLR3_TREE_PARSER_struct::super\fP"
.PP
Pointer to any super class. 
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for ANTLR3C from the source code.
