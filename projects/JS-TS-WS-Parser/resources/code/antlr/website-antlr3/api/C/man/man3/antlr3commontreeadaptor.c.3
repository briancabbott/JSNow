.TH "src/antlr3commontreeadaptor.c" 3 "29 Nov 2010" "Version 3.3" "ANTLR3C" \" -*- nroff -*-
.ad l
.nh
.SH NAME
src/antlr3commontreeadaptor.c \- 
.SH "Detailed Description"
.PP 
This is the standard tree adaptor used by the C runtime unless the grammar source file says to use anything different. 

It embeds a BASE_TREE to which it adds its own implementation of anything that the base tree is not good for, plus a number of methods that any other adaptor type needs to implement too. 
.SH SYNOPSIS
.br
.PP
\fC#include <antlr3commontreeadaptor.h>\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "ANTLR3_API \fBpANTLR3_BASE_TREE_ADAPTOR\fP \fBANTLR3_TREE_ADAPTORDebugNew\fP (\fBpANTLR3_STRING_FACTORY\fP strFactory, \fBpANTLR3_DEBUG_EVENT_LISTENER\fP debugger)"
.br
.RI "\fIDebugging version of the tree adaptor (not normally called as generated code calls setDebugEventListener instead which changes a normal token stream to a debugging stream and means that a user's instantiation code does not need to be changed just to debug with AW. \fP"
.ti -1c
.RI "ANTLR3_API \fBpANTLR3_BASE_TREE_ADAPTOR\fP \fBANTLR3_TREE_ADAPTORNew\fP (\fBpANTLR3_STRING_FACTORY\fP strFactory)"
.br
.RI "\fICreate a new tree adaptor. \fP"
.ti -1c
.RI "static \fBpANTLR3_BASE_TREE\fP \fBcreate\fP (\fBpANTLR3_BASE_TREE_ADAPTOR\fP adpator, \fBpANTLR3_COMMON_TOKEN\fP payload)"
.br
.ti -1c
.RI "static \fBpANTLR3_COMMON_TOKEN\fP \fBcreateToken\fP (\fBpANTLR3_BASE_TREE_ADAPTOR\fP adaptor, \fBANTLR3_UINT32\fP tokenType, \fBpANTLR3_UINT8\fP text)"
.br
.RI "\fITell me how to create a token for use with imaginary token nodes. \fP"
.ti -1c
.RI "static \fBpANTLR3_COMMON_TOKEN\fP \fBcreateTokenFromToken\fP (\fBpANTLR3_BASE_TREE_ADAPTOR\fP adaptor, \fBpANTLR3_COMMON_TOKEN\fP fromToken)"
.br
.RI "\fITell me how to create a token for use with imaginary token nodes. \fP"
.ti -1c
.RI "static void \fBctaFree\fP (\fBpANTLR3_BASE_TREE_ADAPTOR\fP adaptor)"
.br
.ti -1c
.RI "static \fBpANTLR3_BASE_TREE\fP \fBdbgCreate\fP (\fBpANTLR3_BASE_TREE_ADAPTOR\fP adaptor, \fBpANTLR3_COMMON_TOKEN\fP payload)"
.br
.ti -1c
.RI "static void \fBdbgSetTokenBoundaries\fP (\fBpANTLR3_BASE_TREE_ADAPTOR\fP adaptor, \fBpANTLR3_BASE_TREE\fP t, \fBpANTLR3_COMMON_TOKEN\fP startToken, \fBpANTLR3_COMMON_TOKEN\fP stopToken)"
.br
.ti -1c
.RI "static void \fBdeleteChild\fP (\fBpANTLR3_BASE_TREE_ADAPTOR\fP adaptor, \fBpANTLR3_BASE_TREE\fP t, \fBANTLR3_UINT32\fP i)"
.br
.ti -1c
.RI "static \fBpANTLR3_BASE_TREE\fP \fBdupNode\fP (\fBpANTLR3_BASE_TREE_ADAPTOR\fP adaptor, \fBpANTLR3_BASE_TREE\fP treeNode)"
.br
.RI "\fIDuplicate the supplied node. \fP"
.ti -1c
.RI "static \fBpANTLR3_BASE_TREE\fP \fBerrorNode\fP (\fBpANTLR3_BASE_TREE_ADAPTOR\fP adaptor, \fBpANTLR3_TOKEN_STREAM\fP ctnstream, \fBpANTLR3_COMMON_TOKEN\fP startToken, \fBpANTLR3_COMMON_TOKEN\fP stopToken, \fBpANTLR3_EXCEPTION\fP e)"
.br
.ti -1c
.RI "static \fBpANTLR3_BASE_TREE\fP \fBgetChild\fP (\fBpANTLR3_BASE_TREE_ADAPTOR\fP adaptor, \fBpANTLR3_BASE_TREE\fP t, \fBANTLR3_UINT32\fP i)"
.br
.ti -1c
.RI "static \fBANTLR3_UINT32\fP \fBgetChildCount\fP (\fBpANTLR3_BASE_TREE_ADAPTOR\fP adaptor, \fBpANTLR3_BASE_TREE\fP t)"
.br
.ti -1c
.RI "static \fBANTLR3_INT32\fP \fBgetChildIndex\fP (\fBpANTLR3_BASE_TREE_ADAPTOR\fP adaptor, \fBpANTLR3_BASE_TREE\fP t)"
.br
.ti -1c
.RI "static \fBpANTLR3_BASE_TREE\fP \fBgetParent\fP (\fBpANTLR3_BASE_TREE_ADAPTOR\fP adaptor, \fBpANTLR3_BASE_TREE\fP child)"
.br
.ti -1c
.RI "static \fBpANTLR3_STRING\fP \fBgetText\fP (\fBpANTLR3_BASE_TREE_ADAPTOR\fP adaptor, \fBpANTLR3_BASE_TREE\fP t)"
.br
.ti -1c
.RI "static \fBpANTLR3_COMMON_TOKEN\fP \fBgetToken\fP (\fBpANTLR3_BASE_TREE_ADAPTOR\fP adaptor, \fBpANTLR3_BASE_TREE\fP t)"
.br
.ti -1c
.RI "static \fBANTLR3_MARKER\fP \fBgetTokenStartIndex\fP (\fBpANTLR3_BASE_TREE_ADAPTOR\fP adaptor, \fBpANTLR3_BASE_TREE\fP t)"
.br
.ti -1c
.RI "static \fBANTLR3_MARKER\fP \fBgetTokenStopIndex\fP (\fBpANTLR3_BASE_TREE_ADAPTOR\fP adaptor, \fBpANTLR3_BASE_TREE\fP t)"
.br
.ti -1c
.RI "static \fBANTLR3_UINT32\fP \fBgetType\fP (\fBpANTLR3_BASE_TREE_ADAPTOR\fP adaptor, \fBpANTLR3_BASE_TREE\fP t)"
.br
.ti -1c
.RI "static void \fBreplaceChildren\fP (\fBpANTLR3_BASE_TREE_ADAPTOR\fP adaptor, \fBpANTLR3_BASE_TREE\fP parent, \fBANTLR3_INT32\fP startChildIndex, \fBANTLR3_INT32\fP stopChildIndex, \fBpANTLR3_BASE_TREE\fP t)"
.br
.ti -1c
.RI "static void \fBsetChild\fP (\fBpANTLR3_BASE_TREE_ADAPTOR\fP adaptor, \fBpANTLR3_BASE_TREE\fP t, \fBANTLR3_UINT32\fP i, \fBpANTLR3_BASE_TREE\fP child)"
.br
.ti -1c
.RI "static void \fBsetChildIndex\fP (\fBpANTLR3_BASE_TREE_ADAPTOR\fP adaptor, \fBpANTLR3_BASE_TREE\fP t, \fBANTLR3_INT32\fP i)"
.br
.ti -1c
.RI "static void \fBsetDebugEventListener\fP (\fBpANTLR3_BASE_TREE_ADAPTOR\fP adaptor, \fBpANTLR3_DEBUG_EVENT_LISTENER\fP debugger)"
.br
.RI "\fICauses an existing common tree adaptor to become a debug version. \fP"
.ti -1c
.RI "static void \fBsetParent\fP (\fBpANTLR3_BASE_TREE_ADAPTOR\fP adaptor, \fBpANTLR3_BASE_TREE\fP child, \fBpANTLR3_BASE_TREE\fP parent)"
.br
.ti -1c
.RI "static void \fBsetTokenBoundaries\fP (\fBpANTLR3_BASE_TREE_ADAPTOR\fP adaptor, \fBpANTLR3_BASE_TREE\fP t, \fBpANTLR3_COMMON_TOKEN\fP startToken, \fBpANTLR3_COMMON_TOKEN\fP stopToken)"
.br
.RI "\fITrack start/stop token for subtree root created for a rule. \fP"
.in -1c
.SH "Function Documentation"
.PP 
.SS "ANTLR3_API \fBpANTLR3_BASE_TREE_ADAPTOR\fP ANTLR3_TREE_ADAPTORDebugNew (\fBpANTLR3_STRING_FACTORY\fP strFactory, \fBpANTLR3_DEBUG_EVENT_LISTENER\fP debugger)"
.PP
Debugging version of the tree adaptor (not normally called as generated code calls setDebugEventListener instead which changes a normal token stream to a debugging stream and means that a user's instantiation code does not need to be changed just to debug with AW. 
.PP
References ANTLR3_TREE_ADAPTORNew(), antlr3BaseTreeAdaptorInit(), ANTLR3_BASE_TREE_ADAPTOR_struct::create, dbgCreate(), dbgSetTokenBoundaries(), and ANTLR3_BASE_TREE_ADAPTOR_struct::setTokenBoundaries.
.SS "ANTLR3_API \fBpANTLR3_BASE_TREE_ADAPTOR\fP ANTLR3_TREE_ADAPTORNew (\fBpANTLR3_STRING_FACTORY\fP strFactory)"
.PP
Create a new tree adaptor. 
.PP
Note that despite the fact that this is creating a new COMMON_TREE adaptor, we return the address of the BASE_TREE interface, as should any other adaptor that wishes to be used as the tree element of a tree parse/build. It needs to be given the address of a valid string factory as we do not know what the originating input stream encoding type was. This way we can rely on just using the original input stream's string factory or one of the correct type which the user supplies us. 
.PP
References ANTLR3_MALLOC, antlr3ArboretumNew(), antlr3BaseTreeAdaptorInit(), antlr3TokenFactoryNew(), ANTLR3_COMMON_TREE_ADAPTOR_struct::arboretum, ANTLR3_COMMON_TREE_ADAPTOR_struct::baseAdaptor, create(), ANTLR3_BASE_TREE_ADAPTOR_struct::create, createToken(), ANTLR3_BASE_TREE_ADAPTOR_struct::createToken, createTokenFromToken(), ANTLR3_BASE_TREE_ADAPTOR_struct::createTokenFromToken, ctaFree(), deleteChild(), ANTLR3_BASE_TREE_ADAPTOR_struct::deleteChild, dupNode(), ANTLR3_BASE_TREE_ADAPTOR_struct::dupNode, errorNode(), ANTLR3_BASE_TREE_ADAPTOR_struct::errorNode, ANTLR3_BASE_TREE_ADAPTOR_struct::free, getChild(), ANTLR3_BASE_TREE_ADAPTOR_struct::getChild, getChildCount(), ANTLR3_BASE_TREE_ADAPTOR_struct::getChildCount, getChildIndex(), ANTLR3_BASE_TREE_ADAPTOR_struct::getChildIndex, getParent(), ANTLR3_BASE_TREE_ADAPTOR_struct::getParent, getText(), ANTLR3_BASE_TREE_ADAPTOR_struct::getText, getTokenStartIndex(), ANTLR3_BASE_TREE_ADAPTOR_struct::getTokenStartIndex, getTokenStopIndex(), ANTLR3_BASE_TREE_ADAPTOR_struct::getTokenStopIndex, getType(), ANTLR3_BASE_TREE_ADAPTOR_struct::getType, replaceChildren(), ANTLR3_BASE_TREE_ADAPTOR_struct::replaceChildren, setChild(), ANTLR3_BASE_TREE_ADAPTOR_struct::setChild, setChildIndex(), ANTLR3_BASE_TREE_ADAPTOR_struct::setChildIndex, setDebugEventListener(), ANTLR3_BASE_TREE_ADAPTOR_struct::setDebugEventListener, setParent(), ANTLR3_BASE_TREE_ADAPTOR_struct::setParent, setTokenBoundaries(), ANTLR3_BASE_TREE_ADAPTOR_struct::setTokenBoundaries, ANTLR3_BASE_TREE_ADAPTOR_struct::strFactory, ANTLR3_COMMON_TOKEN_struct::strFactory, ANTLR3_BASE_TREE_ADAPTOR_struct::super, ANTLR3_BASE_TREE_ADAPTOR_struct::tokenFactory, and ANTLR3_TOKEN_FACTORY_struct::unTruc.
.PP
Referenced by ANTLR3_TREE_ADAPTORDebugNew(), and antlr3CommonTreeNodeStreamNew().
.SS "static \fBpANTLR3_BASE_TREE\fP create (\fBpANTLR3_BASE_TREE_ADAPTOR\fP adpator, \fBpANTLR3_COMMON_TOKEN\fP payload)\fC [static]\fP"
.PP
References ANTLR3_BASE_TREE_ADAPTOR_struct::super.
.PP
Referenced by ANTLR3_TREE_ADAPTORNew(), and dbgCreate().
.SS "static \fBpANTLR3_COMMON_TOKEN\fP createToken (\fBpANTLR3_BASE_TREE_ADAPTOR\fP adaptor, \fBANTLR3_UINT32\fP tokenType, \fBpANTLR3_UINT8\fP text)\fC [static]\fP"
.PP
Tell me how to create a token for use with imaginary token nodes. 
.PP
For example, there is probably no input symbol associated with imaginary token DECL, but you need to create it as a payload or whatever for the DECL node as in ^(DECL type ID).
.PP
If you care what the token payload objects' type is, you should override this method and any other createToken variant. 
.PP
References ANTLR3_TEXT_CHARP, ANTLR3_COMMON_TOKEN_struct::chars, ANTLR3_TOKEN_FACTORY_struct::input, ANTLR3_COMMON_TOKEN_struct::input, ANTLR3_TOKEN_FACTORY_struct::newToken, newToken(), ANTLR3_COMMON_TOKEN_struct::setType, ANTLR3_BASE_TREE_ADAPTOR_struct::strFactory, ANTLR3_COMMON_TOKEN_struct::strFactory, ANTLR3_COMMON_TOKEN_struct::textState, ANTLR3_BASE_TREE_ADAPTOR_struct::tokenFactory, and ANTLR3_COMMON_TOKEN_struct::tokText.
.PP
Referenced by ANTLR3_TREE_ADAPTORNew().
.SS "static \fBpANTLR3_COMMON_TOKEN\fP createTokenFromToken (\fBpANTLR3_BASE_TREE_ADAPTOR\fP adaptor, \fBpANTLR3_COMMON_TOKEN\fP fromToken)\fC [static]\fP"
.PP
Tell me how to create a token for use with imaginary token nodes. 
.PP
For example, there is probably no input symbol associated with imaginary token DECL, but you need to create it as a payload or whatever for the DECL node as in ^(DECL type ID).
.PP
This is a variant of createToken where the new token is derived from an actual real input token. Typically this is for converting '{' tokens to BLOCK etc... You'll see
.PP
r : lc='{' ID+ '}' -> ^(BLOCK[$lc] ID+) ;
.PP
If you care what the token payload objects' type is, you should override this method and any other createToken variant.
.PP
NB: this being C it is not so easy to extend the types of creaeteToken. We will have to see if anyone needs to do this and add any variants to this interface. 
.PP
References ANTLR3_TEXT_CHARP, ANTLR3_TEXT_STRING, ANTLR3_STRING_struct::chars, ANTLR3_COMMON_TOKEN_struct::chars, ANTLR3_COMMON_TOKEN_struct::getChannel, ANTLR3_COMMON_TOKEN_struct::getCharPositionInLine, ANTLR3_COMMON_TOKEN_struct::getLine, ANTLR3_COMMON_TOKEN_struct::getText, ANTLR3_COMMON_TOKEN_struct::getTokenIndex, ANTLR3_COMMON_TOKEN_struct::getType, ANTLR3_STRING_struct::len, ANTLR3_STRING_FACTORY_struct::newPtr, ANTLR3_TOKEN_FACTORY_struct::newToken, newToken(), ANTLR3_COMMON_TOKEN_struct::setChannel, ANTLR3_COMMON_TOKEN_struct::setCharPositionInLine, ANTLR3_COMMON_TOKEN_struct::setLine, ANTLR3_COMMON_TOKEN_struct::setTokenIndex, ANTLR3_COMMON_TOKEN_struct::setType, ANTLR3_BASE_TREE_ADAPTOR_struct::strFactory, ANTLR3_COMMON_TOKEN_struct::text, ANTLR3_COMMON_TOKEN_struct::textState, ANTLR3_BASE_TREE_ADAPTOR_struct::tokenFactory, ANTLR3_COMMON_TOKEN_struct::tokText, and ANTLR3_COMMON_TOKEN_struct::toString.
.PP
Referenced by ANTLR3_TREE_ADAPTORNew().
.SS "static void ctaFree (\fBpANTLR3_BASE_TREE_ADAPTOR\fP adaptor)\fC [static]\fP"
.PP
References ANTLR3_FREE, ANTLR3_COMMON_TREE_ADAPTOR_struct::arboretum, ANTLR3_TOKEN_FACTORY_struct::close, ANTLR3_ARBORETUM_struct::close, ANTLR3_BASE_TREE_ADAPTOR_struct::super, and ANTLR3_BASE_TREE_ADAPTOR_struct::tokenFactory.
.PP
Referenced by ANTLR3_TREE_ADAPTORNew().
.SS "static \fBpANTLR3_BASE_TREE\fP dbgCreate (\fBpANTLR3_BASE_TREE_ADAPTOR\fP adaptor, \fBpANTLR3_COMMON_TOKEN\fP payload)\fC [static]\fP"
.PP
References create(), ANTLR3_DEBUG_EVENT_LISTENER_struct::createNode, and ANTLR3_BASE_TREE_ADAPTOR_struct::debugger.
.PP
Referenced by ANTLR3_TREE_ADAPTORDebugNew(), and setDebugEventListener().
.SS "static void dbgSetTokenBoundaries (\fBpANTLR3_BASE_TREE_ADAPTOR\fP adaptor, \fBpANTLR3_BASE_TREE\fP t, \fBpANTLR3_COMMON_TOKEN\fP startToken, \fBpANTLR3_COMMON_TOKEN\fP stopToken)\fC [static]\fP"
.PP
References ANTLR3_BASE_TREE_ADAPTOR_struct::debugger, ANTLR3_COMMON_TOKEN_struct::getTokenIndex, ANTLR3_DEBUG_EVENT_LISTENER_struct::setTokenBoundaries, and setTokenBoundaries().
.PP
Referenced by ANTLR3_TREE_ADAPTORDebugNew(), and setDebugEventListener().
.SS "static void deleteChild (\fBpANTLR3_BASE_TREE_ADAPTOR\fP adaptor, \fBpANTLR3_BASE_TREE\fP t, \fBANTLR3_UINT32\fP i)\fC [static]\fP"
.PP
References ANTLR3_BASE_TREE_struct::deleteChild.
.SS "static \fBpANTLR3_BASE_TREE\fP dupNode (\fBpANTLR3_BASE_TREE_ADAPTOR\fP adaptor, \fBpANTLR3_BASE_TREE\fP treeNode)\fC [static]\fP"
.PP
Duplicate the supplied node. 
.PP
References ANTLR3_BASE_TREE_struct::dupNode.
.SS "static \fBpANTLR3_BASE_TREE\fP errorNode (\fBpANTLR3_BASE_TREE_ADAPTOR\fP adaptor, \fBpANTLR3_TOKEN_STREAM\fP ctnstream, \fBpANTLR3_COMMON_TOKEN\fP startToken, \fBpANTLR3_COMMON_TOKEN\fP stopToken, \fBpANTLR3_EXCEPTION\fP e)\fC [static]\fP"
.PP
References ANTLR3_TOKEN_INVALID, and ANTLR3_BASE_TREE_ADAPTOR_struct::createTypeText.
.PP
Referenced by ANTLR3_TREE_ADAPTORNew(), and antlr3DebugListenerNew().
.SS "static \fBpANTLR3_BASE_TREE\fP getChild (\fBpANTLR3_BASE_TREE_ADAPTOR\fP adaptor, \fBpANTLR3_BASE_TREE\fP t, \fBANTLR3_UINT32\fP i)\fC [static]\fP"
.PP
References ANTLR3_BASE_TREE_struct::getChild.
.SS "static \fBANTLR3_UINT32\fP getChildCount (\fBpANTLR3_BASE_TREE_ADAPTOR\fP adaptor, \fBpANTLR3_BASE_TREE\fP t)\fC [static]\fP"
.PP
References ANTLR3_BASE_TREE_struct::getChildCount.
.SS "static \fBANTLR3_INT32\fP getChildIndex (\fBpANTLR3_BASE_TREE_ADAPTOR\fP adaptor, \fBpANTLR3_BASE_TREE\fP t)\fC [static]\fP"
.PP
References ANTLR3_BASE_TREE_struct::getChildIndex.
.SS "static \fBpANTLR3_BASE_TREE\fP getParent (\fBpANTLR3_BASE_TREE_ADAPTOR\fP adaptor, \fBpANTLR3_BASE_TREE\fP child)\fC [static]\fP"
.PP
References ANTLR3_BASE_TREE_struct::getParent.
.SS "static \fBpANTLR3_STRING\fP getText (\fBpANTLR3_BASE_TREE_ADAPTOR\fP adaptor, \fBpANTLR3_BASE_TREE\fP t)\fC [static]\fP"
.PP
References ANTLR3_BASE_TREE_struct::getText.
.SS "static \fBpANTLR3_COMMON_TOKEN\fP getToken (\fBpANTLR3_BASE_TREE_ADAPTOR\fP adaptor, \fBpANTLR3_BASE_TREE\fP t)\fC [static]\fP"
.PP
.SS "static \fBANTLR3_MARKER\fP getTokenStartIndex (\fBpANTLR3_BASE_TREE_ADAPTOR\fP adaptor, \fBpANTLR3_BASE_TREE\fP t)\fC [static]\fP"
.PP
References ANTLR3_BASE_TREE_struct::super.
.PP
Referenced by ANTLR3_TREE_ADAPTORNew().
.SS "static \fBANTLR3_MARKER\fP getTokenStopIndex (\fBpANTLR3_BASE_TREE_ADAPTOR\fP adaptor, \fBpANTLR3_BASE_TREE\fP t)\fC [static]\fP"
.PP
References ANTLR3_BASE_TREE_struct::super.
.PP
Referenced by ANTLR3_TREE_ADAPTORNew().
.SS "static \fBANTLR3_UINT32\fP getType (\fBpANTLR3_BASE_TREE_ADAPTOR\fP adaptor, \fBpANTLR3_BASE_TREE\fP t)\fC [static]\fP"
.PP
References ANTLR3_BASE_TREE_struct::getType.
.SS "static void replaceChildren (\fBpANTLR3_BASE_TREE_ADAPTOR\fP adaptor, \fBpANTLR3_BASE_TREE\fP parent, \fBANTLR3_INT32\fP startChildIndex, \fBANTLR3_INT32\fP stopChildIndex, \fBpANTLR3_BASE_TREE\fP t)\fC [static]\fP"
.PP
References ANTLR3_BASE_TREE_struct::replaceChildren.
.SS "static void setChild (\fBpANTLR3_BASE_TREE_ADAPTOR\fP adaptor, \fBpANTLR3_BASE_TREE\fP t, \fBANTLR3_UINT32\fP i, \fBpANTLR3_BASE_TREE\fP child)\fC [static]\fP"
.PP
References ANTLR3_BASE_TREE_struct::setChild.
.SS "static void setChildIndex (\fBpANTLR3_BASE_TREE_ADAPTOR\fP adaptor, \fBpANTLR3_BASE_TREE\fP t, \fBANTLR3_INT32\fP i)\fC [static]\fP"
.PP
References ANTLR3_BASE_TREE_struct::setChildIndex.
.SS "static void setDebugEventListener (\fBpANTLR3_BASE_TREE_ADAPTOR\fP adaptor, \fBpANTLR3_DEBUG_EVENT_LISTENER\fP debugger)\fC [static]\fP"
.PP
Causes an existing common tree adaptor to become a debug version. 
.PP
References antlr3BaseTreeAdaptorInit(), ANTLR3_BASE_TREE_ADAPTOR_struct::create, dbgCreate(), dbgSetTokenBoundaries(), and ANTLR3_BASE_TREE_ADAPTOR_struct::setTokenBoundaries.
.PP
Referenced by ANTLR3_TREE_ADAPTORNew().
.SS "static void setParent (\fBpANTLR3_BASE_TREE_ADAPTOR\fP adaptor, \fBpANTLR3_BASE_TREE\fP child, \fBpANTLR3_BASE_TREE\fP parent)\fC [static]\fP"
.PP
References ANTLR3_BASE_TREE_struct::setParent.
.SS "static void setTokenBoundaries (\fBpANTLR3_BASE_TREE_ADAPTOR\fP adaptor, \fBpANTLR3_BASE_TREE\fP t, \fBpANTLR3_COMMON_TOKEN\fP startToken, \fBpANTLR3_COMMON_TOKEN\fP stopToken)\fC [static]\fP"
.PP
Track start/stop token for subtree root created for a rule. 
.PP
Only works with CommonTree nodes. For rules that match nothing, seems like this will yield start=i and stop=i-1 in a nil node. Might be useful info so I'll not force to be i..i. 
.PP
References ANTLR3_COMMON_TOKEN_struct::getTokenIndex, ANTLR3_COMMON_TREE_struct::startIndex, ANTLR3_COMMON_TREE_struct::stopIndex, and ANTLR3_BASE_TREE_struct::super.
.PP
Referenced by ANTLR3_TREE_ADAPTORNew(), antlr3DebugListenerNew(), and dbgSetTokenBoundaries().
.SH "Author"
.PP 
Generated automatically by Doxygen for ANTLR3C from the source code.
