.TH "ANTLR3_VECTOR_FACTORY_struct" 3 "29 Nov 2010" "Version 3.3" "ANTLR3C" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ANTLR3_VECTOR_FACTORY_struct \- 
.SH SYNOPSIS
.br
.PP
\fC#include <antlr3collections.h>\fP
.PP
.SH "Detailed Description"
.PP 
Structure that tracks vectors in a vector and auto deletes the vectors in the vector factory when closed. 
.SS "Data Fields"

.in +1c
.ti -1c
.RI "void(* \fBclose\fP )(struct \fBANTLR3_VECTOR_FACTORY_struct\fP *factory)"
.br
.RI "\fIFunction to close the vector factory. \fP"
.ti -1c
.RI "\fBpANTLR3_STACK\fP \fBfreeStack\fP"
.br
.RI "\fIConsumers from the factory can release a factory produced vector back to the factory so that it may be reused (and thus conserve memory) by another caller. \fP"
.ti -1c
.RI "\fBpANTLR3_VECTOR\fP(* \fBnewVector\fP )(struct \fBANTLR3_VECTOR_FACTORY_struct\fP *factory)"
.br
.RI "\fIFunction to supply a new vector. \fP"
.ti -1c
.RI "\fBANTLR3_UINT32\fP \fBnextVector\fP"
.br
.RI "\fIThe next vector available in the pool. \fP"
.ti -1c
.RI "\fBpANTLR3_VECTOR\fP * \fBpools\fP"
.br
.RI "\fIList of all vector pools allocated so far. \fP"
.ti -1c
.RI "void(* \fBreturnVector\fP )(struct \fBANTLR3_VECTOR_FACTORY_struct\fP *factory, \fBpANTLR3_VECTOR\fP vector)"
.br
.RI "\fIFunction to return a vector to the factory for reuse. \fP"
.ti -1c
.RI "\fBANTLR3_INT32\fP \fBthisPool\fP"
.br
.RI "\fICount of the vector pools allocated so far (current active pool). \fP"
.ti -1c
.RI "\fBANTLR3_VECTOR\fP \fBunTruc\fP"
.br
.RI "\fITrick to quickly initialize a new vector via memcpy and not a function call. \fP"
.in -1c
.SH "Field Documentation"
.PP 
.SS "void(* \fBANTLR3_VECTOR_FACTORY_struct::close\fP)(struct \fBANTLR3_VECTOR_FACTORY_struct\fP *factory)"
.PP
Function to close the vector factory. 
.PP
Referenced by antlr3VectorFactoryNew(), and factoryClose().
.SS "\fBpANTLR3_STACK\fP \fBANTLR3_VECTOR_FACTORY_struct::freeStack\fP"
.PP
Consumers from the factory can release a factory produced vector back to the factory so that it may be reused (and thus conserve memory) by another caller. 
.PP
The available vectors are stored here. Note that the only vectors avaible in the free chain are produced by this factory, so they need not be explicitly freed when the factory is closed. 
.PP
Referenced by antlr3VectorFactoryNew(), closeVectorFactory(), newVector(), and returnVector().
.SS "\fBpANTLR3_VECTOR\fP(* \fBANTLR3_VECTOR_FACTORY_struct::newVector\fP)(struct \fBANTLR3_VECTOR_FACTORY_struct\fP *factory)"
.PP
Function to supply a new vector. 
.PP
Referenced by add(), and antlr3VectorFactoryNew().
.SS "\fBANTLR3_UINT32\fP \fBANTLR3_VECTOR_FACTORY_struct::nextVector\fP"
.PP
The next vector available in the pool. 
.PP
Referenced by closeVectorFactory(), newPool(), and newVector().
.SS "\fBpANTLR3_VECTOR\fP* \fBANTLR3_VECTOR_FACTORY_struct::pools\fP"
.PP
List of all vector pools allocated so far. 
.PP
Referenced by antlr3VectorFactoryNew(), closeVectorFactory(), newPool(), and newVector().
.SS "void(* \fBANTLR3_VECTOR_FACTORY_struct::returnVector\fP)(struct \fBANTLR3_VECTOR_FACTORY_struct\fP *factory, \fBpANTLR3_VECTOR\fP vector)"
.PP
Function to return a vector to the factory for reuse. 
.PP
Referenced by antlr3VectorFactoryNew(), freeNodeRS(), and freeRS().
.SS "\fBANTLR3_INT32\fP \fBANTLR3_VECTOR_FACTORY_struct::thisPool\fP"
.PP
Count of the vector pools allocated so far (current active pool). 
.PP
Referenced by antlr3VectorFactoryNew(), closeVectorFactory(), newPool(), and newVector().
.SS "\fBANTLR3_VECTOR\fP \fBANTLR3_VECTOR_FACTORY_struct::unTruc\fP"
.PP
Trick to quickly initialize a new vector via memcpy and not a function call. 
.PP
Referenced by antlr3VectorFactoryNew().

.SH "Author"
.PP 
Generated automatically by Doxygen for ANTLR3C from the source code.
