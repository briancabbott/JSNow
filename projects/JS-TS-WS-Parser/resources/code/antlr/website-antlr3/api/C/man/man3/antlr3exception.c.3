.TH "src/antlr3exception.c" 3 "29 Nov 2010" "Version 3.3" "ANTLR3C" \" -*- nroff -*-
.ad l
.nh
.SH NAME
src/antlr3exception.c \- 
.SH "Detailed Description"
.PP 
Contains default functions for creating and destroying as well as otherwise handling ANTLR3 standard exception structures. 


.SH SYNOPSIS
.br
.PP
\fC#include <antlr3exception.h>\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "static void \fBantlr3ExceptionFree\fP (\fBpANTLR3_EXCEPTION\fP ex)"
.br
.RI "\fIFrees up a chain of ANTLR3 exceptions. \fP"
.ti -1c
.RI "\fBpANTLR3_EXCEPTION\fP \fBantlr3ExceptionNew\fP (\fBANTLR3_UINT32\fP exception, void *name, void *message, \fBANTLR3_BOOLEAN\fP freeMessage)"
.br
.RI "\fICreates a new ANTLR3 exception structure. \fP"
.ti -1c
.RI "static void \fBantlr3ExceptionPrint\fP (\fBpANTLR3_EXCEPTION\fP ex)"
.br
.RI "\fIPrints out the message in all the exceptions in the supplied chain. \fP"
.in -1c
.SH "Function Documentation"
.PP 
.SS "static void antlr3ExceptionFree (\fBpANTLR3_EXCEPTION\fP ex)\fC [static]\fP"
.PP
Frees up a chain of ANTLR3 exceptions. 
.PP
\fBParameters:\fP
.RS 4
\fIex\fP Pointer to the first exception in the chain to free.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBANTLR3_EXCEPTION\fP 
.RE
.PP

.PP
References ANTLR3_FREE, ANTLR3_TRUE, ANTLR3_EXCEPTION_struct::custom, ANTLR3_EXCEPTION_struct::freeCustom, ANTLR3_EXCEPTION_struct::freeMessage, ANTLR3_EXCEPTION_struct::message, next(), and ANTLR3_EXCEPTION_struct::nextException.
.PP
Referenced by antlr3ExceptionNew().
.SS "\fBpANTLR3_EXCEPTION\fP antlr3ExceptionNew (\fBANTLR3_UINT32\fP exception, void * name, void * message, \fBANTLR3_BOOLEAN\fP freeMessage)"
.PP
Creates a new ANTLR3 exception structure. 
.PP
\fBParameters:\fP
.RS 4
\fIexception\fP One of the ANTLR3_xxx_EXCEPTION indicators such as \fBANTLR3_RECOGNITION_EXCEPTION\fP
.br
\fImessage\fP Pointer to message string
.br
\fIfreeMessage\fP Set to ANTLR3_TRUE if the message parameter should be freed by a call to \fBANTLR3_FREE()\fP when the exception is destroyed.
.RE
.PP
\fBReturns:\fP
.RS 4
Pointer to newly initialized exception structure, or an ANTLR3_ERR_xx defined value upon failure.
.RE
.PP
An exception is 'thrown' by a recognizer when input is seen that is not predicted by the grammar productions or when some other error condition occurs. In C we do not have the luxury of try and catch blocks, so exceptions are added in the order they occur to a list in the baserecognizer structure. The last one to be thrown is inserted at the head of the list and the one currently installed is pointed to by the newly installed exception.
.PP
\fBRemarks:\fP
.RS 4
After an exception is created, you may add a pointer to your own structure and a pointer to a function to free this structure when the exception is destroyed.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBANTLR3_EXCEPTION\fP 
.RE
.PP

.PP
References ANTLR3_CALLOC, antlr3ExceptionFree(), antlr3ExceptionPrint(), ANTLR3_EXCEPTION_struct::freeEx, ANTLR3_EXCEPTION_struct::freeMessage, ANTLR3_EXCEPTION_struct::message, ANTLR3_EXCEPTION_struct::name, ANTLR3_EXCEPTION_struct::print, and ANTLR3_EXCEPTION_struct::type.
.PP
Referenced by antlr3RecognitionExceptionNew().
.SS "static void antlr3ExceptionPrint (\fBpANTLR3_EXCEPTION\fP ex)\fC [static]\fP"
.PP
Prints out the message in all the exceptions in the supplied chain. 
.PP
\fBParameters:\fP
.RS 4
\fIex\fP Pointer to the exception structure to print.
.RE
.PP
\fBRemarks:\fP
.RS 4
You may wish to override this function by installing a pointer to a new function in the base recognizer context structure.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBANTLR3_BASE_RECOGNIZER\fP 
.RE
.PP

.PP
References ANTLR3_FPRINTF, ANTLR3_EXCEPTION_struct::message, ANTLR3_EXCEPTION_struct::nextException, and ANTLR3_EXCEPTION_struct::type.
.PP
Referenced by antlr3ExceptionNew().
.SH "Author"
.PP 
Generated automatically by Doxygen for ANTLR3C from the source code.
