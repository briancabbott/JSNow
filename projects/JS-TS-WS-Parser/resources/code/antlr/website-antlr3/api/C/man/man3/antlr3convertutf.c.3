.TH "src/antlr3convertutf.c" 3 "29 Nov 2010" "Version 3.3" "ANTLR3C" \" -*- nroff -*-
.ad l
.nh
.SH NAME
src/antlr3convertutf.c \- 
.SH SYNOPSIS
.br
.PP
\fC#include 'antlr3convertutf.h'\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "\fBConversionResult\fP \fBConvertUTF16toUTF32\fP (const \fBUTF16\fP **sourceStart, const \fBUTF16\fP *sourceEnd, \fBUTF32\fP **targetStart, \fBUTF32\fP *targetEnd, \fBConversionFlags\fP flags)"
.br
.ti -1c
.RI "\fBConversionResult\fP \fBConvertUTF16toUTF8\fP (const \fBUTF16\fP **sourceStart, const \fBUTF16\fP *sourceEnd, \fBUTF8\fP **targetStart, \fBUTF8\fP *targetEnd, \fBConversionFlags\fP flags)"
.br
.ti -1c
.RI "\fBConversionResult\fP \fBConvertUTF32toUTF16\fP (const \fBUTF32\fP **sourceStart, const \fBUTF32\fP *sourceEnd, \fBUTF16\fP **targetStart, \fBUTF16\fP *targetEnd, \fBConversionFlags\fP flags)"
.br
.ti -1c
.RI "\fBConversionResult\fP \fBConvertUTF32toUTF8\fP (const \fBUTF32\fP **sourceStart, const \fBUTF32\fP *sourceEnd, \fBUTF8\fP **targetStart, \fBUTF8\fP *targetEnd, \fBConversionFlags\fP flags)"
.br
.ti -1c
.RI "\fBConversionResult\fP \fBConvertUTF8toUTF16\fP (const \fBUTF8\fP **sourceStart, const \fBUTF8\fP *sourceEnd, \fBUTF16\fP **targetStart, \fBUTF16\fP *targetEnd, \fBConversionFlags\fP flags)"
.br
.ti -1c
.RI "\fBConversionResult\fP \fBConvertUTF8toUTF32\fP (const \fBUTF8\fP **sourceStart, const \fBUTF8\fP *sourceEnd, \fBUTF32\fP **targetStart, \fBUTF32\fP *targetEnd, \fBConversionFlags\fP flags)"
.br
.ti -1c
.RI "static \fBANTLR3_BOOLEAN\fP \fBisLegalUTF8\fP (const \fBUTF8\fP *source, int length)"
.br
.ti -1c
.RI "\fBANTLR3_BOOLEAN\fP \fBisLegalUTF8Sequence\fP (const \fBUTF8\fP *source, const \fBUTF8\fP *sourceEnd)"
.br
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "static const \fBUTF8\fP \fBfirstByteMark\fP [7] = { 0x00, 0x00, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC }"
.br
.ti -1c
.RI "static const \fBUTF32\fP \fBoffsetsFromUTF8\fP [6]"
.br
.ti -1c
.RI "static const char \fBtrailingBytesForUTF8\fP [256]"
.br
.in -1c
.SH "Function Documentation"
.PP 
.SS "\fBConversionResult\fP ConvertUTF16toUTF32 (const \fBUTF16\fP ** sourceStart, const \fBUTF16\fP * sourceEnd, \fBUTF32\fP ** targetStart, \fBUTF32\fP * targetEnd, \fBConversionFlags\fP flags)"
.PP
References ANTLR3_FPRINTF, conversionOK, halfBase, halfShift, sourceExhausted, sourceIllegal, strictConversion, targetExhausted, UNI_SUR_HIGH_END, UNI_SUR_HIGH_START, UNI_SUR_LOW_END, and UNI_SUR_LOW_START.
.SS "\fBConversionResult\fP ConvertUTF16toUTF8 (const \fBUTF16\fP ** sourceStart, const \fBUTF16\fP * sourceEnd, \fBUTF8\fP ** targetStart, \fBUTF8\fP * targetEnd, \fBConversionFlags\fP flags)"
.PP
References conversionOK, firstByteMark, halfBase, halfShift, sourceExhausted, sourceIllegal, strictConversion, targetExhausted, UNI_REPLACEMENT_CHAR, UNI_SUR_HIGH_END, UNI_SUR_HIGH_START, UNI_SUR_LOW_END, and UNI_SUR_LOW_START.
.PP
Referenced by toUTF8_UTF16().
.SS "\fBConversionResult\fP ConvertUTF32toUTF16 (const \fBUTF32\fP ** sourceStart, const \fBUTF32\fP * sourceEnd, \fBUTF16\fP ** targetStart, \fBUTF16\fP * targetEnd, \fBConversionFlags\fP flags)"
.PP
References conversionOK, halfBase, halfMask, halfShift, sourceIllegal, strictConversion, targetExhausted, UNI_MAX_BMP, UNI_MAX_LEGAL_UTF32, UNI_REPLACEMENT_CHAR, UNI_SUR_HIGH_START, UNI_SUR_LOW_END, and UNI_SUR_LOW_START.
.SS "\fBConversionResult\fP ConvertUTF32toUTF8 (const \fBUTF32\fP ** sourceStart, const \fBUTF32\fP * sourceEnd, \fBUTF8\fP ** targetStart, \fBUTF8\fP * targetEnd, \fBConversionFlags\fP flags)"
.PP
References conversionOK, firstByteMark, sourceIllegal, strictConversion, targetExhausted, UNI_MAX_LEGAL_UTF32, UNI_REPLACEMENT_CHAR, UNI_SUR_HIGH_START, and UNI_SUR_LOW_END.
.SS "\fBConversionResult\fP ConvertUTF8toUTF16 (const \fBUTF8\fP ** sourceStart, const \fBUTF8\fP * sourceEnd, \fBUTF16\fP ** targetStart, \fBUTF16\fP * targetEnd, \fBConversionFlags\fP flags)"
.PP
References conversionOK, halfBase, halfMask, halfShift, isLegalUTF8(), offsetsFromUTF8, sourceExhausted, sourceIllegal, strictConversion, targetExhausted, trailingBytesForUTF8, UNI_MAX_BMP, UNI_MAX_UTF16, UNI_REPLACEMENT_CHAR, UNI_SUR_HIGH_START, UNI_SUR_LOW_END, and UNI_SUR_LOW_START.
.SS "\fBConversionResult\fP ConvertUTF8toUTF32 (const \fBUTF8\fP ** sourceStart, const \fBUTF8\fP * sourceEnd, \fBUTF32\fP ** targetStart, \fBUTF32\fP * targetEnd, \fBConversionFlags\fP flags)"
.PP
References conversionOK, isLegalUTF8(), offsetsFromUTF8, sourceExhausted, sourceIllegal, strictConversion, targetExhausted, trailingBytesForUTF8, UNI_MAX_LEGAL_UTF32, UNI_REPLACEMENT_CHAR, UNI_SUR_HIGH_START, and UNI_SUR_LOW_END.
.SS "static \fBANTLR3_BOOLEAN\fP isLegalUTF8 (const \fBUTF8\fP * source, int length)\fC [static]\fP"
.PP
Referenced by ConvertUTF8toUTF16(), ConvertUTF8toUTF32(), and isLegalUTF8Sequence().
.SS "\fBANTLR3_BOOLEAN\fP isLegalUTF8Sequence (const \fBUTF8\fP * source, const \fBUTF8\fP * sourceEnd)"
.PP
References isLegalUTF8(), and trailingBytesForUTF8.
.SH "Variable Documentation"
.PP 
.SS "const \fBUTF8\fP \fBfirstByteMark\fP[7] = { 0x00, 0x00, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC }\fC [static]\fP"
.PP
Referenced by ConvertUTF16toUTF8(), and ConvertUTF32toUTF8().
.SS "const \fBUTF32\fP \fBoffsetsFromUTF8\fP[6]\fC [static]\fP"
.PP
\fBInitial value:\fP
.PP
.nf
 { 0x00000000UL, 0x00003080UL, 0x000E2080UL, 
             0x03C82080UL, 0xFA082080UL, 0x82082080UL }
.fi
.PP
Referenced by antlr3UTF8Consume(), antlr3UTF8LA(), ConvertUTF8toUTF16(), and ConvertUTF8toUTF32().
.SS "const char \fBtrailingBytesForUTF8\fP[256]\fC [static]\fP"
.PP
\fBInitial value:\fP
.PP
.nf
 {
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
    2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2, 3,3,3,3,3,3,3,3,4,4,4,4,5,5,5,5
}
.fi
.PP
Referenced by antlr3UTF8Consume(), antlr3UTF8LA(), ConvertUTF8toUTF16(), ConvertUTF8toUTF32(), and isLegalUTF8Sequence().
.SH "Author"
.PP 
Generated automatically by Doxygen for ANTLR3C from the source code.
