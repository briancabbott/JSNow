.TH "ANTLR3_ARBORETUM_struct" 3 "29 Nov 2010" "Version 3.3" "ANTLR3C" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ANTLR3_ARBORETUM_struct \- 
.SH SYNOPSIS
.br
.PP
\fC#include <antlr3commontree.h>\fP
.PP
.SH "Detailed Description"
.PP 
ANTLR3 Tree factory interface to create lots of trees efficiently rather than creating and freeing lots of little bits of memory. 
.SS "Data Fields"

.in +1c
.ti -1c
.RI "void(* \fBclose\fP )(struct \fBANTLR3_ARBORETUM_struct\fP *factory)"
.br
.RI "\fIPointer to a function the destroys the factory. \fP"
.ti -1c
.RI "\fBpANTLR3_BASE_TREE\fP(* \fBnewFromToken\fP )(struct \fBANTLR3_ARBORETUM_struct\fP *factory, \fBpANTLR3_COMMON_TOKEN\fP token)"
.br
.ti -1c
.RI "\fBpANTLR3_BASE_TREE\fP(* \fBnewFromTree\fP )(struct \fBANTLR3_ARBORETUM_struct\fP *factory, \fBpANTLR3_COMMON_TREE\fP tree)"
.br
.ti -1c
.RI "\fBpANTLR3_BASE_TREE\fP(* \fBnewTree\fP )(struct \fBANTLR3_ARBORETUM_struct\fP *factory)"
.br
.RI "\fIPointer to a function that returns a new tree. \fP"
.ti -1c
.RI "\fBANTLR3_UINT32\fP \fBnextTree\fP"
.br
.RI "\fIThe next token to throw out from the pool, will cause a new pool allocation if this exceeds the available tokenCount. \fP"
.ti -1c
.RI "\fBpANTLR3_STACK\fP \fBnilStack\fP"
.br
.RI "\fIA resuse stack for reclaiming Nil nodes that were used in rewrites and are now dead. \fP"
.ti -1c
.RI "\fBpANTLR3_COMMON_TREE\fP * \fBpools\fP"
.br
.RI "\fIPointers to the array of tokens that this factory has produced so far. \fP"
.ti -1c
.RI "\fBANTLR3_INT32\fP \fBthisPool\fP"
.br
.RI "\fICurrent pool tokens we are allocating from. \fP"
.ti -1c
.RI "\fBANTLR3_COMMON_TREE\fP \fBunTruc\fP"
.br
.RI "\fITrick to initialize tokens and their API quickly, we set up this token when the factory is created, then just copy the memory it uses into the new token. \fP"
.ti -1c
.RI "\fBpANTLR3_VECTOR_FACTORY\fP \fBvFactory\fP"
.br
.RI "\fIPointer to a vector factory that is used to create child list vectors for any child nodes that need them. \fP"
.in -1c
.SH "Field Documentation"
.PP 
.SS "void(* \fBANTLR3_ARBORETUM_struct::close\fP)(struct \fBANTLR3_ARBORETUM_struct\fP *factory)"
.PP
Pointer to a function the destroys the factory. 
.PP
Referenced by antlr3ArboretumNew(), and ctaFree().
.SS "\fBpANTLR3_BASE_TREE\fP(* \fBANTLR3_ARBORETUM_struct::newFromToken\fP)(struct \fBANTLR3_ARBORETUM_struct\fP *factory, \fBpANTLR3_COMMON_TOKEN\fP token)"
.PP
Referenced by antlr3ArboretumNew().
.SS "\fBpANTLR3_BASE_TREE\fP(* \fBANTLR3_ARBORETUM_struct::newFromTree\fP)(struct \fBANTLR3_ARBORETUM_struct\fP *factory, \fBpANTLR3_COMMON_TREE\fP tree)"
.PP
Referenced by antlr3ArboretumNew(), and dupNode().
.SS "\fBpANTLR3_BASE_TREE\fP(* \fBANTLR3_ARBORETUM_struct::newTree\fP)(struct \fBANTLR3_ARBORETUM_struct\fP *factory)"
.PP
Pointer to a function that returns a new tree. 
.PP
Referenced by antlr3ArboretumNew(), newFromToken(), and newFromTree().
.SS "\fBANTLR3_UINT32\fP \fBANTLR3_ARBORETUM_struct::nextTree\fP"
.PP
The next token to throw out from the pool, will cause a new pool allocation if this exceeds the available tokenCount. 
.PP
Referenced by newPool(), and newPoolTree().
.SS "\fBpANTLR3_STACK\fP \fBANTLR3_ARBORETUM_struct::nilStack\fP"
.PP
A resuse stack for reclaiming Nil nodes that were used in rewrites and are now dead. 
.PP
The \fBnilNode()\fP method will eat one of these before creating a new node. 
.PP
Referenced by antlr3ArboretumNew(), factoryClose(), newPoolTree(), and reuse().
.SS "\fBpANTLR3_COMMON_TREE\fP* \fBANTLR3_ARBORETUM_struct::pools\fP"
.PP
Pointers to the array of tokens that this factory has produced so far. 
.PP
Referenced by antlr3ArboretumNew(), factoryClose(), newPool(), and newPoolTree().
.SS "\fBANTLR3_INT32\fP \fBANTLR3_ARBORETUM_struct::thisPool\fP"
.PP
Current pool tokens we are allocating from. 
.PP
Referenced by antlr3ArboretumNew(), factoryClose(), newPool(), and newPoolTree().
.SS "\fBANTLR3_COMMON_TREE\fP \fBANTLR3_ARBORETUM_struct::unTruc\fP"
.PP
Trick to initialize tokens and their API quickly, we set up this token when the factory is created, then just copy the memory it uses into the new token. 
.PP
Referenced by antlr3ArboretumNew(), and newPoolTree().
.SS "\fBpANTLR3_VECTOR_FACTORY\fP \fBANTLR3_ARBORETUM_struct::vFactory\fP"
.PP
Pointer to a vector factory that is used to create child list vectors for any child nodes that need them. 
.PP
This means that we auto track the vectors and auto free them when we close the factory. It also means that all rewriting trees can use the same tree factory and the same vector factory and we do not dup any nodes unless we must do so explicitly because of context such as an empty rewrite stream and ->IMAGINARY[ID] so on. This makes memory tracking much simpler and tempts no errors. 
.PP
Referenced by antlr3ArboretumNew(), and factoryClose().

.SH "Author"
.PP 
Generated automatically by Doxygen for ANTLR3C from the source code.
