.TH "ANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct" 3 "29 Nov 2010" "Version 3.3" "ANTLR3C" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct \- 
.SH SYNOPSIS
.br
.PP
\fC#include <antlr3rewritestreams.h>\fP
.PP
.SH "Detailed Description"
.PP 
A generic list of elements tracked in an alternative to be used in a -> rewrite rule. 

In the C implementation, all tree oriented streams return a pointer to the same type: pANTLR3_BASE_TREE. Anything that has subclassed from this still passes this type, within which there is a super pointer, which points to it's own data and methods. Hence we do not need to implement this as the equivalent of an abstract class, but just fill in the appropriate interface as usual with this model.
.PP
Once you start \fBnext()\fPing, do not try to add more elements. It will break the cursor tracking I believe.
.PP
\fBSee also:\fP
.RS 4
\fBpANTLR3_REWRITE_RULE_NODE_STREAM\fP 
.PP
\fBpANTLR3_REWRITE_RULE_ELEMENT_STREAM\fP 
.PP
\fBpANTLR3_REWRITE_RULE_SUBTREE_STREAM\fP
.RE
.PP
TODO: add mechanism to detect/puke on modification after reading from stream 
.SS "Data Fields"

.in +1c
.ti -1c
.RI "void *(* \fB_next\fP )(struct \fBANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct\fP *stream)"
.br
.ti -1c
.RI "\fBpANTLR3_BASE_TREE_ADAPTOR\fP \fBadaptor\fP"
.br
.RI "\fIPointer to the tree adaptor in use for this stream. \fP"
.ti -1c
.RI "void(* \fBadd\fP )(struct \fBANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct\fP *stream, void *el, void(ANTLR3_CDECL *freePtr)(void *))"
.br
.RI "\fIAdd a new pANTLR3_BASE_TREE to this stream. \fP"
.ti -1c
.RI "\fBANTLR3_UINT32\fP \fBcursor\fP"
.br
.RI "\fICursor 0. \fP"
.ti -1c
.RI "\fBANTLR3_BOOLEAN\fP \fBdirty\fP"
.br
.RI "\fIOnce a node / subtree has been used in a stream, it must be dup'ed from then on. \fP"
.ti -1c
.RI "void *(* \fBdup\fP )(struct \fBANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct\fP *stream, void *el)"
.br
.RI "\fIWhen constructing trees, sometimes we need to dup a token or AST subtree. \fP"
.ti -1c
.RI "void * \fBelementDescription\fP"
.br
.RI "\fIThe element or stream description; usually has name of the token or rule reference that this list tracks. \fP"
.ti -1c
.RI "\fBpANTLR3_VECTOR\fP \fBelements\fP"
.br
.RI "\fIThe list of tokens or subtrees we are tracking. \fP"
.ti -1c
.RI "void(* \fBfree\fP )(struct \fBANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct\fP *stream)"
.br
.ti -1c
.RI "\fBANTLR3_BOOLEAN\fP \fBfreeElements\fP"
.br
.RI "\fIIndicates whether we should free the vector or it was supplied to us. \fP"
.ti -1c
.RI "void *(* \fBgetDescription\fP )(struct \fBANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct\fP *stream)"
.br
.RI "\fIReturns the description string if there is one available (check for NULL). \fP"
.ti -1c
.RI "\fBANTLR3_BOOLEAN\fP(* \fBhasNext\fP )(struct \fBANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct\fP *stream)"
.br
.RI "\fIReturns ANTLR3_TRUE if there is a next element available. \fP"
.ti -1c
.RI "void *(* \fBnext\fP )(struct \fBANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct\fP *stream)"
.br
.RI "\fIReturn the next element in the stream. \fP"
.ti -1c
.RI "\fBpANTLR3_BASE_TREE\fP(* \fBnextNode\fP )(struct \fBANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct\fP *stream)"
.br
.RI "\fITreat next element as a single node even if it's a subtree. \fP"
.ti -1c
.RI "void *(* \fBnextToken\fP )(struct \fBANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct\fP *stream)"
.br
.ti -1c
.RI "\fBpANTLR3_BASE_TREE\fP(* \fBnextTree\fP )(struct \fBANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct\fP *stream)"
.br
.ti -1c
.RI "\fBpANTLR3_BASE_RECOGNIZER\fP \fBrec\fP"
.br
.ti -1c
.RI "void(* \fBreset\fP )(struct \fBANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct\fP *stream)"
.br
.RI "\fIReset the condition of this stream so that it appears we have not consumed any of its elements. \fP"
.ti -1c
.RI "void * \fBsingleElement\fP"
.br
.RI "\fITrack single elements w/o creating a list. \fP"
.ti -1c
.RI "\fBANTLR3_UINT32\fP(* \fBsize\fP )(struct \fBANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct\fP *stream)"
.br
.RI "\fINumber of elements available in the stream. \fP"
.ti -1c
.RI "\fBpANTLR3_BASE_TREE\fP(* \fBtoTree\fP )(struct \fBANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct\fP *stream, void *el)"
.br
.RI "\fIEnsure stream emits trees; tokens must be converted to AST nodes. \fP"
.in -1c
.SH "Field Documentation"
.PP 
.SS "void*(* \fBANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct::_next\fP)(struct \fBANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct\fP *stream)"
.PP
Referenced by antlr3RewriteRuleElementStreamNewAE(), next(), nextNode(), nextNodeNode(), nextNodeToken(), nextToken(), and nextTree().
.SS "\fBpANTLR3_BASE_TREE_ADAPTOR\fP \fBANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct::adaptor\fP"
.PP
Pointer to the tree adaptor in use for this stream. 
.PP
Referenced by add(), antlr3RewriteRuleElementStreamNewAE(), dupTree(), freeNodeRS(), freeRS(), nextNode(), nextNodeToken(), and toTreeNode().
.SS "void(* \fBANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct::add\fP)(struct \fBANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct\fP *stream, void *el, void(ANTLR3_CDECL *freePtr)(void *))"
.PP
Add a new pANTLR3_BASE_TREE to this stream. 
.PP
Referenced by antlr3RewriteRuleElementStreamNewAE(), and antlr3RewriteRuleElementStreamNewAEE().
.SS "\fBANTLR3_UINT32\fP \fBANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct::cursor\fP"
.PP
Cursor 0. 
.PP
.n-1. If singleElement!=NULL, cursor is 0 until you \fBnext()\fP, which bumps it to 1 meaning no more elements. 
.PP
Referenced by _next(), antlr3RewriteRuleElementStreamNewAE(), hasNext(), next(), nextNode(), nextTree(), and reset().
.SS "\fBANTLR3_BOOLEAN\fP \fBANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct::dirty\fP"
.PP
Once a node / subtree has been used in a stream, it must be dup'ed from then on. 
.PP
Streams are reset after sub rules so that the streams can be reused in future sub rules. So, reset must set a dirty bit. If dirty, then \fBnext()\fP always returns a dup. 
.PP
Referenced by antlr3RewriteRuleElementStreamNewAE(), nextNode(), nextTree(), and reset().
.SS "void*(* \fBANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct::dup\fP)(struct \fBANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct\fP *stream, void *el)"
.PP
When constructing trees, sometimes we need to dup a token or AST subtree. 
.PP
Dup'ing a token means just creating another AST node around it. For trees, you must call the \fBadaptor.dupTree()\fP. 
.PP
Referenced by antlr3RewriteRuleNODEStreamNewAE(), antlr3RewriteRuleNODEStreamNewAEE(), antlr3RewriteRuleNODEStreamNewAEV(), antlr3RewriteRuleSubtreeStreamNewAE(), antlr3RewriteRuleSubtreeStreamNewAEE(), antlr3RewriteRuleSubtreeStreamNewAEV(), antlr3RewriteRuleTOKENStreamNewAE(), antlr3RewriteRuleTOKENStreamNewAEE(), antlr3RewriteRuleTOKENStreamNewAEV(), next(), and nextTree().
.SS "void* \fBANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct::elementDescription\fP"
.PP
The element or stream description; usually has name of the token or rule reference that this list tracks. 
.PP
Can include rulename too, but the exception would track that info. 
.PP
Referenced by antlr3RewriteRuleElementStreamNewAE(), and getDescription().
.SS "\fBpANTLR3_VECTOR\fP \fBANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct::elements\fP"
.PP
The list of tokens or subtrees we are tracking. 
.PP
Referenced by _next(), add(), antlr3RewriteRuleElementStreamNewAE(), antlr3RewriteRuleElementStreamNewAEV(), expungeRS(), freeNodeRS(), freeRS(), hasNext(), and size().
.SS "void(* \fBANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct::free\fP)(struct \fBANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct\fP *stream)"
.PP
Referenced by antlr3RewriteRuleElementStreamNewAE(), antlr3RewriteRuleNODEStreamNewAE(), antlr3RewriteRuleNODEStreamNewAEE(), antlr3RewriteRuleNODEStreamNewAEV(), antlr3RewriteRuleSubtreeStreamNewAE(), antlr3RewriteRuleSubtreeStreamNewAEE(), and antlr3RewriteRuleSubtreeStreamNewAEV().
.SS "\fBANTLR3_BOOLEAN\fP \fBANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct::freeElements\fP"
.PP
Indicates whether we should free the vector or it was supplied to us. 
.PP
Referenced by add(), antlr3RewriteRuleElementStreamNewAE(), antlr3RewriteRuleElementStreamNewAEV(), expungeRS(), freeNodeRS(), and freeRS().
.SS "void*(* \fBANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct::getDescription\fP)(struct \fBANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct\fP *stream)"
.PP
Returns the description string if there is one available (check for NULL). 
.PP
Referenced by antlr3RewriteRuleElementStreamNewAE().
.SS "\fBANTLR3_BOOLEAN\fP(* \fBANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct::hasNext\fP)(struct \fBANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct\fP *stream)"
.PP
Returns ANTLR3_TRUE if there is a next element available. 
.PP
Referenced by antlr3RewriteRuleElementStreamNewAE().
.SS "void*(* \fBANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct::next\fP)(struct \fBANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct\fP *stream)"
.PP
Return the next element in the stream. 
.PP
If out of elements, throw an exception unless \fBsize()\fP==1. If size is 1, then return elements[0]. 
.PP
Referenced by antlr3RewriteRuleElementStreamNewAE().
.SS "\fBpANTLR3_BASE_TREE\fP(* \fBANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct::nextNode\fP)(struct \fBANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct\fP *stream)"
.PP
Treat next element as a single node even if it's a subtree. 
.PP
This is used instead of \fBnext()\fP when the result has to be a tree root node. Also prevents us from duplicating recently-added children; e.g., ^(type ID)+ adds ID to type and then 2nd iteration must dup the type node, but ID has been added.
.PP
Referencing to a rule result twice is ok; dup entire tree as we can't be adding trees; e.g., expr expr. 
.PP
Referenced by antlr3RewriteRuleElementStreamNewAE(), antlr3RewriteRuleNODEStreamNewAE(), antlr3RewriteRuleNODEStreamNewAEE(), antlr3RewriteRuleNODEStreamNewAEV(), antlr3RewriteRuleSubtreeStreamNewAE(), antlr3RewriteRuleSubtreeStreamNewAEE(), antlr3RewriteRuleSubtreeStreamNewAEV(), antlr3RewriteRuleTOKENStreamNewAE(), antlr3RewriteRuleTOKENStreamNewAEE(), and antlr3RewriteRuleTOKENStreamNewAEV().
.SS "void*(* \fBANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct::nextToken\fP)(struct \fBANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct\fP *stream)"
.PP
Referenced by antlr3RewriteRuleElementStreamNewAE().
.SS "\fBpANTLR3_BASE_TREE\fP(* \fBANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct::nextTree\fP)(struct \fBANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct\fP *stream)"
.PP
Referenced by antlr3RewriteRuleElementStreamNewAE().
.SS "\fBpANTLR3_BASE_RECOGNIZER\fP \fBANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct::rec\fP"
.PP
Referenced by antlr3RewriteRuleElementStreamNewAE(), freeNodeRS(), and freeRS().
.SS "void(* \fBANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct::reset\fP)(struct \fBANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct\fP *stream)"
.PP
Reset the condition of this stream so that it appears we have not consumed any of its elements. 
.PP
Elements themselves are untouched. 
.PP
Referenced by antlr3RewriteRuleElementStreamNewAE().
.SS "void* \fBANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct::singleElement\fP"
.PP
Track single elements w/o creating a list. 
.PP
Upon 2nd add, alloc list 
.PP
Referenced by _next(), add(), antlr3RewriteRuleElementStreamNewAE(), freeNodeRS(), hasNext(), and size().
.SS "\fBANTLR3_UINT32\fP(* \fBANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct::size\fP)(struct \fBANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct\fP *stream)"
.PP
Number of elements available in the stream. 
.PP
Referenced by _next(), antlr3RewriteRuleElementStreamNewAE(), next(), nextNode(), and nextTree().
.SS "\fBpANTLR3_BASE_TREE\fP(* \fBANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct::toTree\fP)(struct \fBANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct\fP *stream, void *el)"
.PP
Ensure stream emits trees; tokens must be converted to AST nodes. 
.PP
AST nodes can be passed through unmolested. 
.PP
Referenced by _next(), antlr3RewriteRuleElementStreamNewAE(), antlr3RewriteRuleNODEStreamNewAE(), antlr3RewriteRuleNODEStreamNewAEE(), and antlr3RewriteRuleNODEStreamNewAEV().

.SH "Author"
.PP 
Generated automatically by Doxygen for ANTLR3C from the source code.
