.TH "src/antlr3cyclicdfa.c" 3 "29 Nov 2010" "Version 3.3" "ANTLR3C" \" -*- nroff -*-
.ad l
.nh
.SH NAME
src/antlr3cyclicdfa.c \- 
.SH SYNOPSIS
.br
.PP
\fC#include <antlr3defs.h>\fP
.br
\fC#include <antlr3cyclicdfa.h>\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "ANTLR3_API \fBANTLR3_INT32\fP \fBantlr3dfapredict\fP (void *ctx, \fBpANTLR3_BASE_RECOGNIZER\fP rec, \fBpANTLR3_INT_STREAM\fP is, \fBpANTLR3_CYCLIC_DFA\fP cdfa)"
.br
.RI "\fIFrom the input stream, predict what alternative will succeed using this DFA (representing the covering regular approximation to the underlying CFL). \fP"
.ti -1c
.RI "ANTLR3_API \fBANTLR3_INT32\fP \fBantlr3dfaspecialStateTransition\fP (void *ctx, \fBpANTLR3_BASE_RECOGNIZER\fP recognizer, \fBpANTLR3_INT_STREAM\fP is, \fBpANTLR3_CYCLIC_DFA\fP dfa, \fBANTLR3_INT32\fP s)"
.br
.RI "\fIDefault special state implementation. \fP"
.ti -1c
.RI "ANTLR3_API \fBANTLR3_INT32\fP \fBantlr3dfaspecialTransition\fP (void *ctx, \fBpANTLR3_BASE_RECOGNIZER\fP recognizer, \fBpANTLR3_INT_STREAM\fP is, \fBpANTLR3_CYCLIC_DFA\fP dfa, \fBANTLR3_INT32\fP s)"
.br
.ti -1c
.RI "static void \fBnoViableAlt\fP (\fBpANTLR3_BASE_RECOGNIZER\fP rec, \fBpANTLR3_CYCLIC_DFA\fP cdfa, \fBANTLR3_UINT32\fP s)"
.br
.RI "\fISupport functions for traversing cyclic DFA states as laid out in static initialized structures by the code generator. \fP"
.in -1c
.SH "Function Documentation"
.PP 
.SS "ANTLR3_API \fBANTLR3_INT32\fP antlr3dfapredict (void * ctx, \fBpANTLR3_BASE_RECOGNIZER\fP rec, \fBpANTLR3_INT_STREAM\fP is, \fBpANTLR3_CYCLIC_DFA\fP cdfa)"
.PP
From the input stream, predict what alternative will succeed using this DFA (representing the covering regular approximation to the underlying CFL). 
.PP
Return an alternative number 1..n. Throw an exception upon error. 
.PP
References ANTLR3_INT_STREAM_struct::_LA, ANTLR3_CYCLIC_DFA_struct::accept, ANTLR3_TOKEN_EOF, ANTLR3_TRUE, ANTLR3_INT_STREAM_struct::consume, ANTLR3_CYCLIC_DFA_struct::eof, ANTLR3_CYCLIC_DFA_struct::eot, ANTLR3_RECOGNIZER_SHARED_STATE_struct::error, ANTLR3_INT_STREAM_struct::mark, mark(), ANTLR3_CYCLIC_DFA_struct::min, noViableAlt(), ANTLR3_INT_STREAM_struct::rewind, ANTLR3_CYCLIC_DFA_struct::special, ANTLR3_CYCLIC_DFA_struct::specialStateTransition, ANTLR3_BASE_RECOGNIZER_struct::state, and ANTLR3_CYCLIC_DFA_struct::transition.
.SS "ANTLR3_API \fBANTLR3_INT32\fP antlr3dfaspecialStateTransition (void * ctx, \fBpANTLR3_BASE_RECOGNIZER\fP recognizer, \fBpANTLR3_INT_STREAM\fP is, \fBpANTLR3_CYCLIC_DFA\fP dfa, \fBANTLR3_INT32\fP s)"
.PP
Default special state implementation. 
.PP
.SS "ANTLR3_API \fBANTLR3_INT32\fP antlr3dfaspecialTransition (void * ctx, \fBpANTLR3_BASE_RECOGNIZER\fP recognizer, \fBpANTLR3_INT_STREAM\fP is, \fBpANTLR3_CYCLIC_DFA\fP dfa, \fBANTLR3_INT32\fP s)"
.PP
.SS "static void noViableAlt (\fBpANTLR3_BASE_RECOGNIZER\fP rec, \fBpANTLR3_CYCLIC_DFA\fP cdfa, \fBANTLR3_UINT32\fP s)\fC [static]\fP"
.PP
Support functions for traversing cyclic DFA states as laid out in static initialized structures by the code generator. 
.PP
A DFA implemented as a set of transition tables.
.PP
Any state that has a semantic predicate edge is special; those states are generated with if-then-else structures in a ->specialStateTransition() which is generated by cyclicDFA template.
.PP
There are at most 32767 states (16-bit signed short). Could get away with byte sometimes but would have to generate different types and the simulation code too. For a point of reference, the Java lexer's Tokens rule DFA has 326 states roughly. 
.PP
References ANTLR3_NO_VIABLE_ALT_EXCEPTION, ANTLR3_TRUE, ANTLR3_RECOGNIZER_SHARED_STATE_struct::backtracking, ANTLR3_EXCEPTION_struct::decisionNum, ANTLR3_CYCLIC_DFA_struct::decisionNumber, ANTLR3_CYCLIC_DFA_struct::description, ANTLR3_RECOGNIZER_SHARED_STATE_struct::exception, ANTLR3_BASE_RECOGNIZER_struct::exConstruct, ANTLR3_RECOGNIZER_SHARED_STATE_struct::failed, ANTLR3_EXCEPTION_struct::message, ANTLR3_EXCEPTION_struct::state, ANTLR3_BASE_RECOGNIZER_struct::state, and ANTLR3_EXCEPTION_struct::type.
.PP
Referenced by antlr3dfapredict().
.SH "Author"
.PP 
Generated automatically by Doxygen for ANTLR3C from the source code.
