.TH "ANTLR3_TOKEN_FACTORY_struct" 3 "29 Nov 2010" "Version 3.3" "ANTLR3C" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ANTLR3_TOKEN_FACTORY_struct \- 
.SH SYNOPSIS
.br
.PP
\fC#include <antlr3commontoken.h>\fP
.PP
.SH "Detailed Description"
.PP 
ANTLR3 Token factory interface to create lots of tokens efficiently rather than creating and freeing lots of little bits of memory. 
.SS "Data Fields"

.in +1c
.ti -1c
.RI "void(* \fBclose\fP )(struct \fBANTLR3_TOKEN_FACTORY_struct\fP *factory)"
.br
.RI "\fIPointer to a function the destroys the factory. \fP"
.ti -1c
.RI "\fBpANTLR3_INPUT_STREAM\fP \fBinput\fP"
.br
.RI "\fIPointer to an input stream that is using this token factory (may be NULL) which will be assigned to the tokens automatically. \fP"
.ti -1c
.RI "\fBANTLR3_INT32\fP \fBmaxPool\fP"
.br
.RI "\fIMaximum pool count we have available. \fP"
.ti -1c
.RI "\fBpANTLR3_COMMON_TOKEN\fP(* \fBnewToken\fP )(struct \fBANTLR3_TOKEN_FACTORY_struct\fP *factory)"
.br
.RI "\fIPointer to a function that returns a new token. \fP"
.ti -1c
.RI "\fBANTLR3_UINT32\fP \fBnextToken\fP"
.br
.RI "\fIThe next token to throw out from the pool, will cause a new pool allocation if this exceeds the available tokenCount. \fP"
.ti -1c
.RI "\fBpANTLR3_COMMON_TOKEN\fP * \fBpools\fP"
.br
.RI "\fIPointers to the array of tokens that this factory has produced so far. \fP"
.ti -1c
.RI "void(* \fBreset\fP )(struct \fBANTLR3_TOKEN_FACTORY_struct\fP *factory)"
.br
.RI "\fIPointer to a function that resets the factory so you can reuse the pools it has laready allocated. \fP"
.ti -1c
.RI "void(* \fBsetInputStream\fP )(struct \fBANTLR3_TOKEN_FACTORY_struct\fP *factory, \fBpANTLR3_INPUT_STREAM\fP \fBinput\fP)"
.br
.RI "\fIPointer to a function that changes teh curent inptu stream so that new tokens are created with reference to their originating text. \fP"
.ti -1c
.RI "\fBANTLR3_INT32\fP \fBthisPool\fP"
.br
.RI "\fICurrent pool tokens we are allocating from. \fP"
.ti -1c
.RI "\fBANTLR3_COMMON_TOKEN\fP \fBunTruc\fP"
.br
.RI "\fITrick to initialize tokens and their API quickly, we set up this token when the factory is created, then just copy the memory it uses into the new token. \fP"
.in -1c
.SH "Field Documentation"
.PP 
.SS "void(* \fBANTLR3_TOKEN_FACTORY_struct::close\fP)(struct \fBANTLR3_TOKEN_FACTORY_struct\fP *factory)"
.PP
Pointer to a function the destroys the factory. 
.PP
Referenced by antlr3TokenFactoryNew(), ctaFree(), freeBR(), and freeLexer().
.SS "\fBpANTLR3_INPUT_STREAM\fP \fBANTLR3_TOKEN_FACTORY_struct::input\fP"
.PP
Pointer to an input stream that is using this token factory (may be NULL) which will be assigned to the tokens automatically. 
.PP
Referenced by createToken(), newPoolToken(), and setInputStream().
.SS "\fBANTLR3_INT32\fP \fBANTLR3_TOKEN_FACTORY_struct::maxPool\fP"
.PP
Maximum pool count we have available. 
.PP
Referenced by antlr3TokenFactoryNew(), and newPool().
.SS "\fBpANTLR3_COMMON_TOKEN\fP(* \fBANTLR3_TOKEN_FACTORY_struct::newToken\fP)(struct \fBANTLR3_TOKEN_FACTORY_struct\fP *factory)"
.PP
Pointer to a function that returns a new token. 
.PP
Referenced by antlr3TokenFactoryNew(), createToken(), createTokenFromToken(), emit(), and getMissingSymbol().
.SS "\fBANTLR3_UINT32\fP \fBANTLR3_TOKEN_FACTORY_struct::nextToken\fP"
.PP
The next token to throw out from the pool, will cause a new pool allocation if this exceeds the available tokenCount. 
.PP
Referenced by factoryClose(), newPool(), and newPoolToken().
.SS "\fBpANTLR3_COMMON_TOKEN\fP* \fBANTLR3_TOKEN_FACTORY_struct::pools\fP"
.PP
Pointers to the array of tokens that this factory has produced so far. 
.PP
Referenced by antlr3TokenFactoryNew(), factoryClose(), newPool(), and newPoolToken().
.SS "void(* \fBANTLR3_TOKEN_FACTORY_struct::reset\fP)(struct \fBANTLR3_TOKEN_FACTORY_struct\fP *factory)"
.PP
Pointer to a function that resets the factory so you can reuse the pools it has laready allocated. 
.PP
Referenced by antlr3TokenFactoryNew(), and reset().
.SS "void(* \fBANTLR3_TOKEN_FACTORY_struct::setInputStream\fP)(struct \fBANTLR3_TOKEN_FACTORY_struct\fP *factory, \fBpANTLR3_INPUT_STREAM\fP \fBinput\fP)"
.PP
Pointer to a function that changes teh curent inptu stream so that new tokens are created with reference to their originating text. 
.PP
Referenced by antlr3TokenFactoryNew(), and setCharStream().
.SS "\fBANTLR3_INT32\fP \fBANTLR3_TOKEN_FACTORY_struct::thisPool\fP"
.PP
Current pool tokens we are allocating from. 
.PP
Referenced by antlr3TokenFactoryNew(), factoryClose(), factoryReset(), newPool(), and newPoolToken().
.SS "\fBANTLR3_COMMON_TOKEN\fP \fBANTLR3_TOKEN_FACTORY_struct::unTruc\fP"
.PP
Trick to initialize tokens and their API quickly, we set up this token when the factory is created, then just copy the memory it uses into the new token. 
.PP
Referenced by ANTLR3_TREE_ADAPTORNew(), antlr3TokenFactoryNew(), and setInputStream().

.SH "Author"
.PP 
Generated automatically by Doxygen for ANTLR3C from the source code.
