.TH "ANTLR3_BASE_TREE_struct" 3 "29 Nov 2010" "Version 3.3" "ANTLR3C" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ANTLR3_BASE_TREE_struct \- 
.SH SYNOPSIS
.br
.PP
\fC#include <antlr3basetree.h>\fP
.PP
.SH "Detailed Description"
.PP 
A generic tree implementation with no payload. 

You must subclass to actually have any user data. ANTLR v3 uses a list of children approach instead of the child-sibling approach in v2. A flat tree (a list) is an empty node whose children represent the list. An empty (as in it does not have payload itself), but non-null node is called 'nil'. 
.SS "Data Fields"

.in +1c
.ti -1c
.RI "void(* \fBaddChild\fP )(struct \fBANTLR3_BASE_TREE_struct\fP *tree, void *child)"
.br
.ti -1c
.RI "void(* \fBaddChildren\fP )(struct \fBANTLR3_BASE_TREE_struct\fP *tree, \fBpANTLR3_LIST\fP kids)"
.br
.ti -1c
.RI "\fBpANTLR3_VECTOR\fP \fBchildren\fP"
.br
.RI "\fIThe list of all the children that belong to this node. \fP"
.ti -1c
.RI "void(* \fBcreateChildrenList\fP )(struct \fBANTLR3_BASE_TREE_struct\fP *tree)"
.br
.ti -1c
.RI "void *(* \fBdeleteChild\fP )(struct \fBANTLR3_BASE_TREE_struct\fP *tree, \fBANTLR3_UINT32\fP i)"
.br
.ti -1c
.RI "void *(* \fBdupNode\fP )(struct \fBANTLR3_BASE_TREE_struct\fP *\fBdupNode\fP)"
.br
.ti -1c
.RI "void *(* \fBdupTree\fP )(struct \fBANTLR3_BASE_TREE_struct\fP *tree)"
.br
.ti -1c
.RI "void(* \fBfree\fP )(struct \fBANTLR3_BASE_TREE_struct\fP *tree)"
.br
.ti -1c
.RI "void(* \fBfreshenPACIndexes\fP )(struct \fBANTLR3_BASE_TREE_struct\fP *tree, \fBANTLR3_UINT32\fP offset)"
.br
.ti -1c
.RI "void(* \fBfreshenPACIndexesAll\fP )(struct \fBANTLR3_BASE_TREE_struct\fP *tree)"
.br
.ti -1c
.RI "\fBANTLR3_UINT32\fP(* \fBgetCharPositionInLine\fP )(struct \fBANTLR3_BASE_TREE_struct\fP *tree)"
.br
.ti -1c
.RI "void *(* \fBgetChild\fP )(struct \fBANTLR3_BASE_TREE_struct\fP *tree, \fBANTLR3_UINT32\fP i)"
.br
.ti -1c
.RI "\fBANTLR3_UINT32\fP(* \fBgetChildCount\fP )(struct \fBANTLR3_BASE_TREE_struct\fP *tree)"
.br
.ti -1c
.RI "\fBANTLR3_INT32\fP(* \fBgetChildIndex\fP )(struct \fBANTLR3_BASE_TREE_struct\fP *tree)"
.br
.ti -1c
.RI "void *(* \fBgetFirstChildWithType\fP )(struct \fBANTLR3_BASE_TREE_struct\fP *tree, \fBANTLR3_UINT32\fP type)"
.br
.ti -1c
.RI "\fBANTLR3_UINT32\fP(* \fBgetLine\fP )(struct \fBANTLR3_BASE_TREE_struct\fP *tree)"
.br
.ti -1c
.RI "struct \fBANTLR3_BASE_TREE_struct\fP *(* \fBgetParent\fP )(struct \fBANTLR3_BASE_TREE_struct\fP *tree)"
.br
.ti -1c
.RI "\fBpANTLR3_STRING\fP(* \fBgetText\fP )(struct \fBANTLR3_BASE_TREE_struct\fP *tree)"
.br
.ti -1c
.RI "\fBpANTLR3_COMMON_TOKEN\fP(* \fBgetToken\fP )(struct \fBANTLR3_BASE_TREE_struct\fP *tree)"
.br
.RI "\fIA pointer to a function that returns the common token pointer for the payload in the supplied tree. \fP"
.ti -1c
.RI "\fBANTLR3_UINT32\fP(* \fBgetType\fP )(struct \fBANTLR3_BASE_TREE_struct\fP *tree)"
.br
.ti -1c
.RI "\fBANTLR3_BOOLEAN\fP(* \fBisNilNode\fP )(struct \fBANTLR3_BASE_TREE_struct\fP *tree)"
.br
.ti -1c
.RI "void(* \fBreplaceChildren\fP )(struct \fBANTLR3_BASE_TREE_struct\fP *parent, \fBANTLR3_INT32\fP startChildIndex, \fBANTLR3_INT32\fP stopChildIndex, struct \fBANTLR3_BASE_TREE_struct\fP *t)"
.br
.ti -1c
.RI "void(* \fBreuse\fP )(struct \fBANTLR3_BASE_TREE_struct\fP *tree)"
.br
.ti -1c
.RI "\fBANTLR3_MARKER\fP \fBsavedIndex\fP"
.br
.RI "\fIThis is used to store the current child index position while descending and ascending trees as the tree walk progresses. \fP"
.ti -1c
.RI "void(* \fBsetChild\fP )(struct \fBANTLR3_BASE_TREE_struct\fP *tree, \fBANTLR3_UINT32\fP i, void *child)"
.br
.ti -1c
.RI "void(* \fBsetChildIndex\fP )(struct \fBANTLR3_BASE_TREE_struct\fP *tree, \fBANTLR3_INT32\fP)"
.br
.ti -1c
.RI "void(* \fBsetParent\fP )(struct \fBANTLR3_BASE_TREE_struct\fP *tree, struct \fBANTLR3_BASE_TREE_struct\fP *parent)"
.br
.ti -1c
.RI "\fBpANTLR3_STRING_FACTORY\fP \fBstrFactory\fP"
.br
.RI "\fIA string factory to produce strings for toString etc. \fP"
.ti -1c
.RI "void * \fBsuper\fP"
.br
.RI "\fIImplementers of this interface sometimes require a pointer to their selves. \fP"
.ti -1c
.RI "\fBpANTLR3_STRING\fP(* \fBtoString\fP )(struct \fBANTLR3_BASE_TREE_struct\fP *tree)"
.br
.ti -1c
.RI "\fBpANTLR3_STRING\fP(* \fBtoStringTree\fP )(struct \fBANTLR3_BASE_TREE_struct\fP *tree)"
.br
.ti -1c
.RI "void * \fBu\fP"
.br
.RI "\fIGeneric void pointer allows the grammar programmer to attach any structure they like to a tree node, in many cases saving the need to create their own tree and tree adaptors. \fP"
.in -1c
.SH "Field Documentation"
.PP 
.SS "void(* \fBANTLR3_BASE_TREE_struct::addChild\fP)(struct \fBANTLR3_BASE_TREE_struct\fP *tree, void *child)"
.PP
Referenced by addChild(), addChildren(), antlr3BaseTreeNew(), becomeRoot(), dbgAddChild(), and dupTree().
.SS "void(* \fBANTLR3_BASE_TREE_struct::addChildren\fP)(struct \fBANTLR3_BASE_TREE_struct\fP *tree, \fBpANTLR3_LIST\fP kids)"
.PP
Referenced by antlr3BaseTreeNew().
.SS "\fBpANTLR3_VECTOR\fP \fBANTLR3_BASE_TREE_struct::children\fP"
.PP
The list of all the children that belong to this node. 
.PP
They are not part of the node as they belong to the common tree node that implements this. 
.PP
Referenced by addChild(), antlr3BaseTreeNew(), antlr3SetCTAPI(), createChildrenList(), deleteChild(), dupTree(), getChild(), getChildCount(), getFirstChildWithType(), replaceChildren(), reuse(), setChild(), and toStringTree().
.SS "void(* \fBANTLR3_BASE_TREE_struct::createChildrenList\fP)(struct \fBANTLR3_BASE_TREE_struct\fP *tree)"
.PP
Referenced by addChild(), antlr3SetCTAPI(), and setChild().
.SS "void*(* \fBANTLR3_BASE_TREE_struct::deleteChild\fP)(struct \fBANTLR3_BASE_TREE_struct\fP *tree, \fBANTLR3_UINT32\fP i)"
.PP
Referenced by antlr3BaseTreeNew(), and deleteChild().
.SS "void*(* \fBANTLR3_BASE_TREE_struct::dupNode\fP)(struct \fBANTLR3_BASE_TREE_struct\fP *\fBdupNode\fP)"
.PP
Referenced by antlr3SetCTAPI(), dupNode(), dupTree(), dupTreeTT(), and getMissingSymbol().
.SS "void*(* \fBANTLR3_BASE_TREE_struct::dupTree\fP)(struct \fBANTLR3_BASE_TREE_struct\fP *tree)"
.PP
Referenced by antlr3BaseTreeNew(), and dupTree().
.SS "void(* \fBANTLR3_BASE_TREE_struct::free\fP)(struct \fBANTLR3_BASE_TREE_struct\fP *tree)"
.PP
Referenced by addChild(), and antlr3SetCTAPI().
.SS "void(* \fBANTLR3_BASE_TREE_struct::freshenPACIndexes\fP)(struct \fBANTLR3_BASE_TREE_struct\fP *tree, \fBANTLR3_UINT32\fP offset)"
.PP
Referenced by antlr3BaseTreeNew(), freshenPACIndexesAll(), and replaceChildren().
.SS "void(* \fBANTLR3_BASE_TREE_struct::freshenPACIndexesAll\fP)(struct \fBANTLR3_BASE_TREE_struct\fP *tree)"
.PP
Referenced by antlr3BaseTreeNew().
.SS "\fBANTLR3_UINT32\fP(* \fBANTLR3_BASE_TREE_struct::getCharPositionInLine\fP)(struct \fBANTLR3_BASE_TREE_struct\fP *tree)"
.PP
Referenced by antlr3BaseTreeNew(), antlr3SetCTAPI(), displayRecognitionError(), and getCharPositionInLine().
.SS "void*(* \fBANTLR3_BASE_TREE_struct::getChild\fP)(struct \fBANTLR3_BASE_TREE_struct\fP *tree, \fBANTLR3_UINT32\fP i)"
.PP
Referenced by antlr3BaseTreeNew(), becomeRoot(), freshenPACIndexes(), getCharPositionInLine(), getChild(), getLine(), and rulePostProcessing().
.SS "\fBANTLR3_UINT32\fP(* \fBANTLR3_BASE_TREE_struct::getChildCount\fP)(struct \fBANTLR3_BASE_TREE_struct\fP *tree)"
.PP
Referenced by antlr3BaseTreeNew(), becomeRoot(), fillBuffer(), freshenPACIndexes(), getCharPositionInLine(), getChildCount(), getLine(), and rulePostProcessing().
.SS "\fBANTLR3_INT32\fP(* \fBANTLR3_BASE_TREE_struct::getChildIndex\fP)(struct \fBANTLR3_BASE_TREE_struct\fP *tree)"
.PP
Referenced by antlr3SetCTAPI(), dupTreeTT(), and getChildIndex().
.SS "void*(* \fBANTLR3_BASE_TREE_struct::getFirstChildWithType\fP)(struct \fBANTLR3_BASE_TREE_struct\fP *tree, \fBANTLR3_UINT32\fP type)"
.PP
Referenced by antlr3BaseTreeNew().
.SS "\fBANTLR3_UINT32\fP(* \fBANTLR3_BASE_TREE_struct::getLine\fP)(struct \fBANTLR3_BASE_TREE_struct\fP *tree)"
.PP
Referenced by antlr3BaseTreeNew(), antlr3SetCTAPI(), and getLine().
.SS "struct \fBANTLR3_BASE_TREE_struct\fP*(* \fBANTLR3_BASE_TREE_struct::getParent\fP)(struct \fBANTLR3_BASE_TREE_struct\fP *tree)\fC [read]\fP"
.PP
Referenced by antlr3SetCTAPI(), and getParent().
.SS "\fBpANTLR3_STRING\fP(* \fBANTLR3_BASE_TREE_struct::getText\fP)(struct \fBANTLR3_BASE_TREE_struct\fP *tree)"
.PP
Referenced by antlr3SetCTAPI(), getText(), and replaceChildren().
.SS "\fBpANTLR3_COMMON_TOKEN\fP(* \fBANTLR3_BASE_TREE_struct::getToken\fP)(struct \fBANTLR3_BASE_TREE_struct\fP *tree)"
.PP
A pointer to a function that returns the common token pointer for the payload in the supplied tree. 
.PP
Referenced by antlr3SetCTAPI(), displayRecognitionError(), and getMissingSymbol().
.SS "\fBANTLR3_UINT32\fP(* \fBANTLR3_BASE_TREE_struct::getType\fP)(struct \fBANTLR3_BASE_TREE_struct\fP *tree)"
.PP
Referenced by antlr3SetCTAPI(), getFirstChildWithType(), and getType().
.SS "\fBANTLR3_BOOLEAN\fP(* \fBANTLR3_BASE_TREE_struct::isNilNode\fP)(struct \fBANTLR3_BASE_TREE_struct\fP *tree)"
.PP
Referenced by addChild(), antlr3SetCTAPI(), becomeRoot(), freeNodeRS(), isNilNode(), replaceChildren(), rulePostProcessing(), toString(), and toStringTree().
.SS "void(* \fBANTLR3_BASE_TREE_struct::replaceChildren\fP)(struct \fBANTLR3_BASE_TREE_struct\fP *parent, \fBANTLR3_INT32\fP startChildIndex, \fBANTLR3_INT32\fP stopChildIndex, struct \fBANTLR3_BASE_TREE_struct\fP *t)"
.PP
Referenced by antlr3BaseTreeNew(), and replaceChildren().
.SS "void(* \fBANTLR3_BASE_TREE_struct::reuse\fP)(struct \fBANTLR3_BASE_TREE_struct\fP *tree)"
.PP
Referenced by antlr3SetCTAPI(), becomeRoot(), and rulePostProcessing().
.SS "\fBANTLR3_MARKER\fP \fBANTLR3_BASE_TREE_struct::savedIndex\fP"
.PP
This is used to store the current child index position while descending and ascending trees as the tree walk progresses. 
.PP
.SS "void(* \fBANTLR3_BASE_TREE_struct::setChild\fP)(struct \fBANTLR3_BASE_TREE_struct\fP *tree, \fBANTLR3_UINT32\fP i, void *child)"
.PP
Referenced by antlr3BaseTreeNew(), and setChild().
.SS "void(* \fBANTLR3_BASE_TREE_struct::setChildIndex\fP)(struct \fBANTLR3_BASE_TREE_struct\fP *tree, \fBANTLR3_INT32\fP)"
.PP
Referenced by antlr3SetCTAPI(), freshenPACIndexes(), replaceChildren(), rulePostProcessing(), and setChildIndex().
.SS "void(* \fBANTLR3_BASE_TREE_struct::setParent\fP)(struct \fBANTLR3_BASE_TREE_struct\fP *tree, struct \fBANTLR3_BASE_TREE_struct\fP *parent)"
.PP
Referenced by antlr3SetCTAPI(), freshenPACIndexes(), replaceChildren(), rulePostProcessing(), and setParent().
.SS "\fBpANTLR3_STRING_FACTORY\fP \fBANTLR3_BASE_TREE_struct::strFactory\fP"
.PP
A string factory to produce strings for toString etc. 
.PP
Referenced by antlr3ArboretumNew(), antlr3BaseTreeNew(), antlr3CommonTreeNodeStreamNewTree(), newPoolTree(), toString(), and toStringTree().
.SS "void* \fBANTLR3_BASE_TREE_struct::super\fP"
.PP
Implementers of this interface sometimes require a pointer to their selves. 
.PP
Referenced by antlr3SetCTAPI(), createChildrenList(), displayRecognitionError(), dupNode(), getCharPositionInLine(), getChildIndex(), getLine(), getMissingSymbol(), getParent(), getToken(), getTokenStartIndex(), getTokenStopIndex(), getType(), isNilNode(), newFromToken(), newFromTree(), newPoolTree(), reuse(), setChildIndex(), setParent(), setTokenBoundaries(), and toString().
.SS "\fBpANTLR3_STRING\fP(* \fBANTLR3_BASE_TREE_struct::toString\fP)(struct \fBANTLR3_BASE_TREE_struct\fP *tree)"
.PP
Referenced by antlr3SetCTAPI(), getText(), and toStringTree().
.SS "\fBpANTLR3_STRING\fP(* \fBANTLR3_BASE_TREE_struct::toStringTree\fP)(struct \fBANTLR3_BASE_TREE_struct\fP *tree)"
.PP
Referenced by antlr3BaseTreeNew(), displayRecognitionError(), and toStringTree().
.SS "void* \fBANTLR3_BASE_TREE_struct::u\fP"
.PP
Generic void pointer allows the grammar programmer to attach any structure they like to a tree node, in many cases saving the need to create their own tree and tree adaptors. 
.PP
ANTLR does not use this pointer, but will copy it for you and so on. 
.PP
Referenced by antlr3SetCTAPI(), and newFromTree().

.SH "Author"
.PP 
Generated automatically by Doxygen for ANTLR3C from the source code.
