.TH "src/antlr3inputstream.c" 3 "29 Nov 2010" "Version 3.3" "ANTLR3C" \" -*- nroff -*-
.ad l
.nh
.SH NAME
src/antlr3inputstream.c \- 
.SH "Detailed Description"
.PP 
Base functions to initialize and manipulate any input stream. 


.SH SYNOPSIS
.br
.PP
\fC#include <antlr3input.h>\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "static void \fBantlr38BitConsume\fP (\fBpANTLR3_INT_STREAM\fP is)"
.br
.RI "\fIConsume the next character in an 8 bit input stream. \fP"
.ti -1c
.RI "static \fBANTLR3_UINT32\fP \fBantlr38BitGetCharPosition\fP (\fBpANTLR3_INPUT_STREAM\fP input)"
.br
.RI "\fIReturn the current offset in to the current line in the input stream. \fP"
.ti -1c
.RI "static \fBANTLR3_UINT32\fP \fBantlr38BitGetLine\fP (\fBpANTLR3_INPUT_STREAM\fP input)"
.br
.RI "\fIReturn the line number as understood by the 8 bit input stream. \fP"
.ti -1c
.RI "static void * \fBantlr38BitGetLineBuf\fP (\fBpANTLR3_INPUT_STREAM\fP input)"
.br
.RI "\fIReturn a pointer into the input stream that points at the start of the current input line as triggered by the end of line character installed for the stream ('
.br
' unless told differently). \fP"
.ti -1c
.RI "static \fBpANTLR3_STRING\fP \fBantlr38BitGetSourceName\fP (\fBpANTLR3_INT_STREAM\fP is)"
.br
.ti -1c
.RI "static \fBANTLR3_MARKER\fP \fBantlr38BitIndex\fP (\fBpANTLR3_INT_STREAM\fP is)"
.br
.RI "\fICalculate the current index in the output stream. \fP"
.ti -1c
.RI "static \fBANTLR3_UCHAR\fP \fBantlr38BitLA\fP (\fBpANTLR3_INT_STREAM\fP is, \fBANTLR3_INT32\fP la)"
.br
.RI "\fIReturn the input element assuming an 8 bit ascii input. \fP"
.ti -1c
.RI "static \fBANTLR3_UCHAR\fP \fBantlr38BitLA_ucase\fP (\fBpANTLR3_INT_STREAM\fP is, \fBANTLR3_INT32\fP la)"
.br
.RI "\fIReturn the input element assuming an 8 bit input and always return the UPPER CASE character. \fP"
.ti -1c
.RI "static void * \fBantlr38BitLT\fP (\fBpANTLR3_INPUT_STREAM\fP input, \fBANTLR3_INT32\fP lt)"
.br
.RI "\fIReturn the input element assuming an 8 bit ascii input. \fP"
.ti -1c
.RI "static \fBANTLR3_MARKER\fP \fBantlr38BitMark\fP (\fBpANTLR3_INT_STREAM\fP is)"
.br
.RI "\fIMark the current input point in an 8Bit 8 bit stream such as a file stream, where all the input is available in the buffer. \fP"
.ti -1c
.RI "static void \fBantlr38BitRelease\fP (\fBpANTLR3_INT_STREAM\fP is, \fBANTLR3_MARKER\fP mark)"
.br
.RI "\fIRewind the lexer input to the state specified by the supplied mark. \fP"
.ti -1c
.RI "static void \fBantlr38BitReuse\fP (\fBpANTLR3_INPUT_STREAM\fP input, \fBpANTLR3_UINT8\fP inString, \fBANTLR3_UINT32\fP size, \fBpANTLR3_UINT8\fP name)"
.br
.RI "\fIInstall a new source code in to a working input stream so that the input stream can be reused. \fP"
.ti -1c
.RI "static void \fBantlr38BitRewind\fP (\fBpANTLR3_INT_STREAM\fP is, \fBANTLR3_MARKER\fP mark)"
.br
.RI "\fIRewind the lexer input to the state specified by the supplied mark. \fP"
.ti -1c
.RI "static void \fBantlr38BitRewindLast\fP (\fBpANTLR3_INT_STREAM\fP is)"
.br
.RI "\fIRewind the lexer input to the state specified by the last produced mark. \fP"
.ti -1c
.RI "static void \fBantlr38BitSeek\fP (\fBpANTLR3_INT_STREAM\fP is, \fBANTLR3_MARKER\fP seekPoint)"
.br
.RI "\fIRewind the lexer input to the state specified by the supplied mark. \fP"
.ti -1c
.RI "static void \fBantlr38BitSetCharPosition\fP (\fBpANTLR3_INPUT_STREAM\fP input, \fBANTLR3_UINT32\fP position)"
.br
.RI "\fISet the current offset in the current line to be a particular setting. \fP"
.ti -1c
.RI "static void \fBantlr38BitSetLine\fP (\fBpANTLR3_INPUT_STREAM\fP input, \fBANTLR3_UINT32\fP line)"
.br
.RI "\fISet the current line number as understood by the input stream. \fP"
.ti -1c
.RI "static void \fBantlr38BitSetNewLineChar\fP (\fBpANTLR3_INPUT_STREAM\fP input, \fBANTLR3_UINT32\fP newlineChar)"
.br
.RI "\fISet the newline trigger character in the input stream to the supplied parameter. \fP"
.ti -1c
.RI "static void \fBantlr38BitSetUcaseLA\fP (\fBpANTLR3_INPUT_STREAM\fP input, \fBANTLR3_BOOLEAN\fP flag)"
.br
.ti -1c
.RI "void \fBantlr38BitSetupStream\fP (\fBpANTLR3_INPUT_STREAM\fP input)"
.br
.RI "\fICommon function to setup function interface for an 8 bit input stream. \fP"
.ti -1c
.RI "static \fBANTLR3_UINT32\fP \fBantlr38BitSize\fP (\fBpANTLR3_INPUT_STREAM\fP input)"
.br
.RI "\fIReturn the size of the current input stream, as an 8Bit file which in this case is the total input. \fP"
.ti -1c
.RI "static \fBpANTLR3_STRING\fP \fBantlr38BitSubstr\fP (\fBpANTLR3_INPUT_STREAM\fP input, \fBANTLR3_MARKER\fP start, \fBANTLR3_MARKER\fP stop)"
.br
.RI "\fIReturn a substring of the 8 bit input stream in newly allocated memory. \fP"
.ti -1c
.RI "static \fBANTLR3_UCHAR\fP \fBantlr3EBCDICLA\fP (\fBpANTLR3_INT_STREAM\fP is, \fBANTLR3_INT32\fP la)"
.br
.RI "\fIReturn the input element assuming an 8 bit EBCDIC input. \fP"
.ti -1c
.RI "void \fBantlr3EBCDICSetupStream\fP (\fBpANTLR3_INPUT_STREAM\fP input)"
.br
.RI "\fICommon function to setup function interface for a EBCDIC input stream. \fP"
.ti -1c
.RI "void \fBantlr3GenericSetupStream\fP (\fBpANTLR3_INPUT_STREAM\fP input)"
.br
.ti -1c
.RI "static void \fBantlr3InputClose\fP (\fBpANTLR3_INPUT_STREAM\fP input)"
.br
.RI "\fIClose down an input stream and free any memory allocated by it. \fP"
.ti -1c
.RI "static void \fBantlr3InputReset\fP (\fBpANTLR3_INPUT_STREAM\fP input)"
.br
.RI "\fIReset a re-startable input stream to the start. \fP"
.ti -1c
.RI "static void \fBantlr3UTF16Consume\fP (\fBpANTLR3_INT_STREAM\fP is)"
.br
.RI "\fIConsume the next character in a UTF16 input stream. \fP"
.ti -1c
.RI "static void \fBantlr3UTF16ConsumeBE\fP (\fBpANTLR3_INT_STREAM\fP is)"
.br
.RI "\fIConsume the next character in a UTF16 input stream when the input is Big Endian and the machine is not. \fP"
.ti -1c
.RI "static void \fBantlr3UTF16ConsumeLE\fP (\fBpANTLR3_INT_STREAM\fP is)"
.br
.RI "\fIConsume the next character in a UTF16 input stream when the input is Little Endian and the machine is not Note that the UTF16 routines do not do any substantial verification of the input stream as for performance sake, we assume it is validly encoded. \fP"
.ti -1c
.RI "static \fBANTLR3_MARKER\fP \fBantlr3UTF16Index\fP (\fBpANTLR3_INT_STREAM\fP is)"
.br
.RI "\fICalculate the current index in the output stream. \fP"
.ti -1c
.RI "static \fBANTLR3_UCHAR\fP \fBantlr3UTF16LA\fP (\fBpANTLR3_INT_STREAM\fP is, \fBANTLR3_INT32\fP la)"
.br
.RI "\fIReturn the input element assuming an 8 bit ascii input. \fP"
.ti -1c
.RI "static \fBANTLR3_UCHAR\fP \fBantlr3UTF16LABE\fP (\fBpANTLR3_INT_STREAM\fP is, \fBANTLR3_INT32\fP la)"
.br
.RI "\fIReturn the input element assuming a UTF16 input when the input is Little Endian and the machine is not. \fP"
.ti -1c
.RI "static \fBANTLR3_UCHAR\fP \fBantlr3UTF16LALE\fP (\fBpANTLR3_INT_STREAM\fP is, \fBANTLR3_INT32\fP la)"
.br
.RI "\fIReturn the input element assuming a UTF16 input when the input is Little Endian and the machine is not. \fP"
.ti -1c
.RI "static void \fBantlr3UTF16Seek\fP (\fBpANTLR3_INT_STREAM\fP is, \fBANTLR3_MARKER\fP seekPoint)"
.br
.RI "\fIRewind the lexer input to the state specified by the supplied mark. \fP"
.ti -1c
.RI "void \fBantlr3UTF16SetupStream\fP (\fBpANTLR3_INPUT_STREAM\fP input, \fBANTLR3_BOOLEAN\fP machineBigEndian, \fBANTLR3_BOOLEAN\fP inputBigEndian)"
.br
.RI "\fICommon function to setup function interface for a UTF16 or UCS2 input stream. \fP"
.ti -1c
.RI "static \fBpANTLR3_STRING\fP \fBantlr3UTF16Substr\fP (\fBpANTLR3_INPUT_STREAM\fP input, \fBANTLR3_MARKER\fP start, \fBANTLR3_MARKER\fP stop)"
.br
.RI "\fIReturn a substring of the UTF16 input stream in newly allocated memory. \fP"
.ti -1c
.RI "static void \fBantlr3UTF32Consume\fP (\fBpANTLR3_INT_STREAM\fP is)"
.br
.RI "\fIConsume the next character in a UTF32 input stream. \fP"
.ti -1c
.RI "static \fBANTLR3_MARKER\fP \fBantlr3UTF32Index\fP (\fBpANTLR3_INT_STREAM\fP is)"
.br
.RI "\fICalculate the current index in the output stream. \fP"
.ti -1c
.RI "static \fBANTLR3_UCHAR\fP \fBantlr3UTF32LA\fP (\fBpANTLR3_INT_STREAM\fP is, \fBANTLR3_INT32\fP la)"
.br
.RI "\fIReturn the input element assuming a UTF32 input in natural machine byte order. \fP"
.ti -1c
.RI "static \fBANTLR3_UCHAR\fP \fBantlr3UTF32LABE\fP (\fBpANTLR3_INT_STREAM\fP is, \fBANTLR3_INT32\fP la)"
.br
.RI "\fIReturn the input element assuming a UTF32 input in big endian byte order. \fP"
.ti -1c
.RI "static \fBANTLR3_UCHAR\fP \fBantlr3UTF32LALE\fP (\fBpANTLR3_INT_STREAM\fP is, \fBANTLR3_INT32\fP la)"
.br
.RI "\fIReturn the input element assuming a UTF32 input in little endian byte order. \fP"
.ti -1c
.RI "static void \fBantlr3UTF32Seek\fP (\fBpANTLR3_INT_STREAM\fP is, \fBANTLR3_MARKER\fP seekPoint)"
.br
.RI "\fIRewind the lexer input to the state specified by the supplied mark. \fP"
.ti -1c
.RI "void \fBantlr3UTF32SetupStream\fP (\fBpANTLR3_INPUT_STREAM\fP input, \fBANTLR3_BOOLEAN\fP machineBigEndian, \fBANTLR3_BOOLEAN\fP inputBigEndian)"
.br
.RI "\fICommon function to setup function interface for a UTF3 input stream. \fP"
.ti -1c
.RI "static \fBpANTLR3_STRING\fP \fBantlr3UTF32Substr\fP (\fBpANTLR3_INPUT_STREAM\fP input, \fBANTLR3_MARKER\fP start, \fBANTLR3_MARKER\fP stop)"
.br
.RI "\fIReturn a substring of the UTF16 input stream in newly allocated memory. \fP"
.ti -1c
.RI "static void \fBantlr3UTF8Consume\fP (\fBpANTLR3_INT_STREAM\fP is)"
.br
.RI "\fIConsume the next character in a UTF8 input stream. \fP"
.ti -1c
.RI "static \fBANTLR3_UCHAR\fP \fBantlr3UTF8LA\fP (\fBpANTLR3_INT_STREAM\fP is, \fBANTLR3_INT32\fP la)"
.br
.RI "\fIReturn the input element assuming a UTF8 input. \fP"
.ti -1c
.RI "void \fBantlr3UTF8SetupStream\fP (\fBpANTLR3_INPUT_STREAM\fP input)"
.br
.RI "\fICommon function to setup function interface for a UTF8 input stream. \fP"
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "const \fBANTLR3_UCHAR\fP \fBe2a\fP [256]"
.br
.ti -1c
.RI "static const \fBUTF32\fP \fBoffsetsFromUTF8\fP [6]"
.br
.RI "\fIMagic values subtracted from a buffer value during UTF8 conversion. \fP"
.ti -1c
.RI "static const \fBANTLR3_UINT32\fP \fBtrailingBytesForUTF8\fP [256]"
.br
.RI "\fIIndex into the table below with the first byte of a UTF-8 sequence to get the number of trailing bytes that are supposed to follow it. \fP"
.in -1c
.SH "Function Documentation"
.PP 
.SS "static void antlr38BitConsume (\fBpANTLR3_INT_STREAM\fP is)\fC [static]\fP"
.PP
Consume the next character in an 8 bit input stream. 
.PP
\fBParameters:\fP
.RS 4
\fIinput\fP Input stream context pointer 
.RE
.PP

.PP
References ANTLR3_INPUT_STREAM_struct::charPositionInLine, ANTLR3_INPUT_STREAM_struct::currentLine, ANTLR3_INPUT_STREAM_struct::data, ANTLR3_INPUT_STREAM_struct::line, ANTLR3_INPUT_STREAM_struct::newlineChar, ANTLR3_INPUT_STREAM_struct::nextChar, ANTLR3_INPUT_STREAM_struct::sizeBuf, and ANTLR3_INT_STREAM_struct::super.
.PP
Referenced by antlr3GenericSetupStream().
.SS "static \fBANTLR3_UINT32\fP antlr38BitGetCharPosition (\fBpANTLR3_INPUT_STREAM\fP input)\fC [static]\fP"
.PP
Return the current offset in to the current line in the input stream. 
.PP
\fBParameters:\fP
.RS 4
\fIinput\fP Input stream context pointer 
.RE
.PP
\fBReturns:\fP
.RS 4
Current line offset 
.RE
.PP

.PP
References ANTLR3_INPUT_STREAM_struct::charPositionInLine.
.PP
Referenced by antlr3GenericSetupStream().
.SS "static \fBANTLR3_UINT32\fP antlr38BitGetLine (\fBpANTLR3_INPUT_STREAM\fP input)\fC [static]\fP"
.PP
Return the line number as understood by the 8 bit input stream. 
.PP
\fBParameters:\fP
.RS 4
\fIinput\fP Input stream context pointer 
.RE
.PP
\fBReturns:\fP
.RS 4
Line number in input stream that we believe we are working on. 
.RE
.PP

.PP
References ANTLR3_INPUT_STREAM_struct::line.
.PP
Referenced by antlr3GenericSetupStream().
.SS "static void * antlr38BitGetLineBuf (\fBpANTLR3_INPUT_STREAM\fP input)\fC [static]\fP"
.PP
Return a pointer into the input stream that points at the start of the current input line as triggered by the end of line character installed for the stream ('
.br
' unless told differently). 
.PP
\fBParameters:\fP
.RS 4
\fIinput\fP 
.RE
.PP

.PP
References ANTLR3_INPUT_STREAM_struct::currentLine.
.PP
Referenced by antlr3GenericSetupStream().
.SS "static \fBpANTLR3_STRING\fP antlr38BitGetSourceName (\fBpANTLR3_INT_STREAM\fP is)\fC [static]\fP"
.PP
References ANTLR3_INT_STREAM_struct::streamName.
.PP
Referenced by antlr3GenericSetupStream().
.SS "static \fBANTLR3_MARKER\fP antlr38BitIndex (\fBpANTLR3_INT_STREAM\fP is)\fC [static]\fP"
.PP
Calculate the current index in the output stream. 
.PP
\fBParameters:\fP
.RS 4
\fIinput\fP Input stream context pointer 
.RE
.PP

.PP
References ANTLR3_INPUT_STREAM_struct::nextChar, and ANTLR3_INT_STREAM_struct::super.
.PP
Referenced by antlr3GenericSetupStream().
.SS "static \fBANTLR3_UCHAR\fP antlr38BitLA (\fBpANTLR3_INT_STREAM\fP is, \fBANTLR3_INT32\fP la)\fC [static]\fP"
.PP
Return the input element assuming an 8 bit ascii input. 
.PP
\fBParameters:\fP
.RS 4
\fIinput\fP Input stream context pointer 
.br
\fIla\fP 1 based offset of next input stream element
.RE
.PP
\fBReturns:\fP
.RS 4
Next input character in internal ANTLR3 encoding (UTF32) 
.RE
.PP

.PP
References ANTLR3_CHARSTREAM_EOF, ANTLR3_INPUT_STREAM_struct::data, ANTLR3_INPUT_STREAM_struct::nextChar, ANTLR3_INPUT_STREAM_struct::sizeBuf, and ANTLR3_INT_STREAM_struct::super.
.PP
Referenced by antlr38BitSetUcaseLA(), and antlr3GenericSetupStream().
.SS "static \fBANTLR3_UCHAR\fP antlr38BitLA_ucase (\fBpANTLR3_INT_STREAM\fP is, \fBANTLR3_INT32\fP la)\fC [static]\fP"
.PP
Return the input element assuming an 8 bit input and always return the UPPER CASE character. 
.PP
Note that this is 8 bit and so we assume that the toupper function will use the correct locale for 8 bits.
.PP
\fBParameters:\fP
.RS 4
\fIinput\fP Input stream context pointer 
.br
\fIla\fP 1 based offset of next input stream element
.RE
.PP
\fBReturns:\fP
.RS 4
Next input character in internal ANTLR3 encoding (UTF32) 
.RE
.PP

.PP
References ANTLR3_CHARSTREAM_EOF, ANTLR3_INPUT_STREAM_struct::data, ANTLR3_INPUT_STREAM_struct::nextChar, ANTLR3_INPUT_STREAM_struct::sizeBuf, and ANTLR3_INT_STREAM_struct::super.
.PP
Referenced by antlr38BitSetUcaseLA().
.SS "static void * antlr38BitLT (\fBpANTLR3_INPUT_STREAM\fP input, \fBANTLR3_INT32\fP lt)\fC [static]\fP"
.PP
Return the input element assuming an 8 bit ascii input. 
.PP
\fBParameters:\fP
.RS 4
\fIinput\fP Input stream context pointer 
.br
\fIlt\fP 1 based offset of next input stream element
.RE
.PP
\fBReturns:\fP
.RS 4
Next input character in internal ANTLR3 encoding (UTF32) 
.RE
.PP

.PP
References ANTLR3_INT_STREAM_struct::_LA, ANTLR3_FUNC_PTR, and ANTLR3_INPUT_STREAM_struct::istream.
.PP
Referenced by antlr3GenericSetupStream().
.SS "static \fBANTLR3_MARKER\fP antlr38BitMark (\fBpANTLR3_INT_STREAM\fP is)\fC [static]\fP"
.PP
Mark the current input point in an 8Bit 8 bit stream such as a file stream, where all the input is available in the buffer. 
.PP
\fBParameters:\fP
.RS 4
\fIis\fP Input stream context pointer 
.RE
.PP

.PP
References ANTLR3_VECTOR_struct::add, ANTLR3_FREE_FUNC, ANTLR3_MALLOC, ANTLR3_INPUT_STREAM_struct::charPositionInLine, ANTLR3_LEX_STATE_struct::charPositionInLine, ANTLR3_VECTOR_struct::count, ANTLR3_INPUT_STREAM_struct::currentLine, ANTLR3_LEX_STATE_struct::currentLine, ANTLR3_VECTOR_struct::get, ANTLR3_INT_STREAM_struct::lastMarker, ANTLR3_INPUT_STREAM_struct::line, ANTLR3_LEX_STATE_struct::line, ANTLR3_INPUT_STREAM_struct::markDepth, ANTLR3_INPUT_STREAM_struct::markers, ANTLR3_INPUT_STREAM_struct::nextChar, ANTLR3_LEX_STATE_struct::nextChar, and ANTLR3_INT_STREAM_struct::super.
.PP
Referenced by antlr3GenericSetupStream().
.SS "static void antlr38BitRelease (\fBpANTLR3_INT_STREAM\fP is, \fBANTLR3_MARKER\fP mark)\fC [static]\fP"
.PP
Rewind the lexer input to the state specified by the supplied mark. 
.PP
\fBParameters:\fP
.RS 4
\fIinput\fP Input stream context pointer
.RE
.PP
\fBRemarks:\fP
.RS 4
Assumes 8 Bit input stream. 
.RE
.PP

.PP
References ANTLR3_INPUT_STREAM_struct::markDepth, and ANTLR3_INT_STREAM_struct::super.
.PP
Referenced by antlr3GenericSetupStream().
.SS "static void antlr38BitReuse (\fBpANTLR3_INPUT_STREAM\fP input, \fBpANTLR3_UINT8\fP inString, \fBANTLR3_UINT32\fP size, \fBpANTLR3_UINT8\fP name)\fC [static]\fP"
.PP
Install a new source code in to a working input stream so that the input stream can be reused. 
.PP
References ANTLR3_FALSE, ANTLR3_INPUT_STREAM_struct::data, ANTLR3_INPUT_STREAM_struct::fileName, ANTLR3_INPUT_STREAM_struct::isAllocated, ANTLR3_INPUT_STREAM_struct::istream, ANTLR3_STRING_FACTORY_struct::newStr, ANTLR3_INPUT_STREAM_struct::reset, ANTLR3_INPUT_STREAM_struct::sizeBuf, ANTLR3_INT_STREAM_struct::streamName, and ANTLR3_INPUT_STREAM_struct::strFactory.
.PP
Referenced by antlr3GenericSetupStream().
.SS "static void antlr38BitRewind (\fBpANTLR3_INT_STREAM\fP is, \fBANTLR3_MARKER\fP mark)\fC [static]\fP"
.PP
Rewind the lexer input to the state specified by the supplied mark. 
.PP
\fBParameters:\fP
.RS 4
\fIinput\fP Input stream context pointer
.RE
.PP
\fBRemarks:\fP
.RS 4
Assumes 8 Bit input stream. 
.RE
.PP

.PP
References antlr38BitSeek(), ANTLR3_LEX_STATE_struct::charPositionInLine, ANTLR3_INPUT_STREAM_struct::charPositionInLine, ANTLR3_LEX_STATE_struct::currentLine, ANTLR3_INPUT_STREAM_struct::currentLine, ANTLR3_VECTOR_struct::get, ANTLR3_INPUT_STREAM_struct::istream, ANTLR3_LEX_STATE_struct::line, ANTLR3_INPUT_STREAM_struct::line, ANTLR3_INPUT_STREAM_struct::markers, ANTLR3_INPUT_STREAM_struct::nextChar, ANTLR3_LEX_STATE_struct::nextChar, ANTLR3_INT_STREAM_struct::release, and ANTLR3_INT_STREAM_struct::super.
.PP
Referenced by antlr3GenericSetupStream().
.SS "static void antlr38BitRewindLast (\fBpANTLR3_INT_STREAM\fP is)\fC [static]\fP"
.PP
Rewind the lexer input to the state specified by the last produced mark. 
.PP
\fBParameters:\fP
.RS 4
\fIinput\fP Input stream context pointer
.RE
.PP
\fBRemarks:\fP
.RS 4
Assumes 8 Bit input stream. 
.RE
.PP

.PP
References ANTLR3_INT_STREAM_struct::lastMarker, and ANTLR3_INT_STREAM_struct::rewind.
.PP
Referenced by antlr3GenericSetupStream().
.SS "static void antlr38BitSeek (\fBpANTLR3_INT_STREAM\fP is, \fBANTLR3_MARKER\fP seekPoint)\fC [static]\fP"
.PP
Rewind the lexer input to the state specified by the supplied mark. 
.PP
\fBParameters:\fP
.RS 4
\fIinput\fP Input stream context pointer
.RE
.PP
\fBRemarks:\fP
.RS 4
Assumes 8 Bit input stream. 
.RE
.PP

.PP
References ANTLR3_FUNC_PTR, ANTLR3_INT_STREAM_struct::consume, ANTLR3_INPUT_STREAM_struct::nextChar, and ANTLR3_INT_STREAM_struct::super.
.PP
Referenced by antlr38BitRewind(), and antlr3GenericSetupStream().
.SS "static void antlr38BitSetCharPosition (\fBpANTLR3_INPUT_STREAM\fP input, \fBANTLR3_UINT32\fP position)\fC [static]\fP"
.PP
Set the current offset in the current line to be a particular setting. 
.PP
\fBParameters:\fP
.RS 4
\fIinput\fP Input stream context pointer 
.br
\fIposition\fP New setting for current offset.
.RE
.PP
\fBRemarks:\fP
.RS 4
This does not set the actual pointers in the input stream, it is purely for reporting purposes and so on as per \fBantlr38BitSetLine()\fP; 
.RE
.PP

.PP
References ANTLR3_INPUT_STREAM_struct::charPositionInLine.
.PP
Referenced by antlr3GenericSetupStream().
.SS "static void antlr38BitSetLine (\fBpANTLR3_INPUT_STREAM\fP input, \fBANTLR3_UINT32\fP line)\fC [static]\fP"
.PP
Set the current line number as understood by the input stream. 
.PP
\fBParameters:\fP
.RS 4
\fIinput\fP Input stream context pointer 
.br
\fIline\fP Line number to tell the input stream we are on
.RE
.PP
\fBRemarks:\fP
.RS 4
This function does not change any pointers, it just allows the programmer to set the line number according to some external criterion, such as finding a lexed directive like: nnn 'file.c' for instance, such that error reporting and so on in is in sync with some original source format. 
.RE
.PP

.PP
References ANTLR3_INPUT_STREAM_struct::line.
.PP
Referenced by antlr3GenericSetupStream().
.SS "static void antlr38BitSetNewLineChar (\fBpANTLR3_INPUT_STREAM\fP input, \fBANTLR3_UINT32\fP newlineChar)\fC [static]\fP"
.PP
Set the newline trigger character in the input stream to the supplied parameter. 
.PP
\fBParameters:\fP
.RS 4
\fIinput\fP Input stream context pointer 
.br
\fInewlineChar\fP Character to set to be the newline trigger.
.RE
.PP
\fBRemarks:\fP
.RS 4
.IP "\(bu" 2
The supplied newLineChar is in UTF32 encoding (which means ASCII and latin1 etc are the same encodings), but the input stream catered to by this function is 8 bit only, so it is up to the programmer to ensure that the character supplied is valid. 
.PP
.RE
.PP

.PP
References ANTLR3_INPUT_STREAM_struct::newlineChar.
.PP
Referenced by antlr3GenericSetupStream().
.SS "static void antlr38BitSetUcaseLA (\fBpANTLR3_INPUT_STREAM\fP input, \fBANTLR3_BOOLEAN\fP flag)\fC [static]\fP"
.PP
References ANTLR3_INT_STREAM_struct::_LA, antlr38BitLA(), antlr38BitLA_ucase(), and ANTLR3_INPUT_STREAM_struct::istream.
.PP
Referenced by antlr3GenericSetupStream().
.SS "void antlr38BitSetupStream (\fBpANTLR3_INPUT_STREAM\fP input)"
.PP
Common function to setup function interface for an 8 bit input stream. 
.PP
\fBParameters:\fP
.RS 4
\fIinput\fP Input stream context pointer
.RE
.PP
\fBRemarks:\fP
.RS 4
.IP "\(bu" 2
Many of the 8 bit oriented file stream handling functions will be usable by any or at least some, other input streams. Therefore it is perfectly acceptable to call this function to install the 8Bit handler then override just those functions that would not work for the particular input encoding, such as consume for instance. 
.PP
.RE
.PP

.PP
References antlr3StringFactoryNew(), ANTLR3_INPUT_STREAM_struct::encoding, and ANTLR3_INPUT_STREAM_struct::strFactory.
.PP
Referenced by setupInputStream().
.SS "static \fBANTLR3_UINT32\fP antlr38BitSize (\fBpANTLR3_INPUT_STREAM\fP input)\fC [static]\fP"
.PP
Return the size of the current input stream, as an 8Bit file which in this case is the total input. 
.PP
Other implementations may provide more sophisticated implementations to deal with non-recoverable streams and so on.
.PP
\fBParameters:\fP
.RS 4
\fIinput\fP Input stream context pointer 
.RE
.PP

.PP
References ANTLR3_INPUT_STREAM_struct::sizeBuf.
.PP
Referenced by antlr3GenericSetupStream().
.SS "static \fBpANTLR3_STRING\fP antlr38BitSubstr (\fBpANTLR3_INPUT_STREAM\fP input, \fBANTLR3_MARKER\fP start, \fBANTLR3_MARKER\fP stop)\fC [static]\fP"
.PP
Return a substring of the 8 bit input stream in newly allocated memory. 
.PP
\fBParameters:\fP
.RS 4
\fIinput\fP Input stream context pointer 
.br
\fIstart\fP Offset in input stream where the string starts 
.br
\fIstop\fP Offset in the input stream where the string ends. 
.RE
.PP

.PP
References ANTLR3_STRING_FACTORY_struct::newPtr, and ANTLR3_INPUT_STREAM_struct::strFactory.
.PP
Referenced by antlr3GenericSetupStream().
.SS "static \fBANTLR3_UCHAR\fP antlr3EBCDICLA (\fBpANTLR3_INT_STREAM\fP is, \fBANTLR3_INT32\fP la)\fC [static]\fP"
.PP
Return the input element assuming an 8 bit EBCDIC input. 
.PP
\fBParameters:\fP
.RS 4
\fIinput\fP Input stream context pointer 
.br
\fIla\fP 1 based offset of next input stream element
.RE
.PP
\fBReturns:\fP
.RS 4
Next input character in internal ANTLR3 encoding (UTF32) after translation from EBCDIC to ASCII 
.RE
.PP

.PP
References ANTLR3_CHARSTREAM_EOF, ANTLR3_INPUT_STREAM_struct::data, e2a, ANTLR3_INPUT_STREAM_struct::nextChar, ANTLR3_INPUT_STREAM_struct::sizeBuf, and ANTLR3_INT_STREAM_struct::super.
.PP
Referenced by antlr3EBCDICSetupStream().
.SS "void antlr3EBCDICSetupStream (\fBpANTLR3_INPUT_STREAM\fP input)"
.PP
Common function to setup function interface for a EBCDIC input stream. 
.PP
\fBParameters:\fP
.RS 4
\fIinput\fP Input stream context pointer 
.RE
.PP

.PP
References ANTLR3_INT_STREAM_struct::_LA, antlr3EBCDICLA(), antlr3StringFactoryNew(), ANTLR3_INPUT_STREAM_struct::charByteSize, ANTLR3_INPUT_STREAM_struct::encoding, ANTLR3_INPUT_STREAM_struct::istream, and ANTLR3_INPUT_STREAM_struct::strFactory.
.PP
Referenced by setupInputStream().
.SS "void antlr3GenericSetupStream (\fBpANTLR3_INPUT_STREAM\fP input)"
.PP
References ANTLR3_INT_STREAM_struct::_LA, ANTLR3_INPUT_STREAM_struct::_LT, antlr38BitConsume(), antlr38BitGetCharPosition(), antlr38BitGetLine(), antlr38BitGetLineBuf(), antlr38BitGetSourceName(), antlr38BitIndex(), antlr38BitLA(), antlr38BitLT(), antlr38BitMark(), antlr38BitRelease(), antlr38BitReuse(), antlr38BitRewind(), antlr38BitRewindLast(), antlr38BitSeek(), antlr38BitSetCharPosition(), antlr38BitSetLine(), antlr38BitSetNewLineChar(), antlr38BitSetUcaseLA(), antlr38BitSize(), antlr38BitSubstr(), ANTLR3_CHARSTREAM, antlr3InputClose(), antlr3InputReset(), antlr3IntStreamNew(), ANTLR3_INPUT_STREAM_struct::charByteSize, ANTLR3_INPUT_STREAM_struct::close, ANTLR3_INT_STREAM_struct::consume, ANTLR3_INPUT_STREAM_struct::free, ANTLR3_INPUT_STREAM_struct::getCharPositionInLine, ANTLR3_INPUT_STREAM_struct::getLine, ANTLR3_INPUT_STREAM_struct::getLineBuf, ANTLR3_INT_STREAM_struct::getSourceName, ANTLR3_INT_STREAM_struct::index, ANTLR3_INPUT_STREAM_struct::istream, ANTLR3_INT_STREAM_struct::mark, ANTLR3_INPUT_STREAM_struct::markers, ANTLR3_INT_STREAM_struct::release, ANTLR3_INPUT_STREAM_struct::reset, ANTLR3_INPUT_STREAM_struct::reuse, ANTLR3_INT_STREAM_struct::rewind, ANTLR3_INT_STREAM_struct::rewindLast, ANTLR3_INT_STREAM_struct::seek, ANTLR3_INPUT_STREAM_struct::setCharPositionInLine, ANTLR3_INPUT_STREAM_struct::setLine, ANTLR3_INPUT_STREAM_struct::SetNewLineChar, ANTLR3_INPUT_STREAM_struct::setUcaseLA, ANTLR3_INPUT_STREAM_struct::size, ANTLR3_INPUT_STREAM_struct::substr, ANTLR3_INT_STREAM_struct::super, and ANTLR3_INT_STREAM_struct::type.
.PP
Referenced by antlr3CreateFileStream(), and antlr3CreateStringStream().
.SS "static void antlr3InputClose (\fBpANTLR3_INPUT_STREAM\fP input)\fC [static]\fP"
.PP
Close down an input stream and free any memory allocated by it. 
.PP
\fBParameters:\fP
.RS 4
\fIinput\fP Input stream context pointer 
.RE
.PP

.PP
References ANTLR3_FREE, ANTLR3_STRING_FACTORY_struct::close, ANTLR3_INPUT_STREAM_struct::data, ANTLR3_INT_STREAM_struct::free, ANTLR3_INPUT_STREAM_struct::isAllocated, ANTLR3_INPUT_STREAM_struct::istream, ANTLR3_INPUT_STREAM_struct::markers, and ANTLR3_INPUT_STREAM_struct::strFactory.
.PP
Referenced by antlr3GenericSetupStream().
.SS "static void antlr3InputReset (\fBpANTLR3_INPUT_STREAM\fP input)\fC [static]\fP"
.PP
Reset a re-startable input stream to the start. 
.PP
\fBParameters:\fP
.RS 4
\fIinput\fP Input stream context pointer 
.RE
.PP

.PP
References antlr3VectorNew(), ANTLR3_INPUT_STREAM_struct::charPositionInLine, ANTLR3_VECTOR_struct::clear, ANTLR3_INPUT_STREAM_struct::currentLine, ANTLR3_INPUT_STREAM_struct::data, ANTLR3_INPUT_STREAM_struct::line, ANTLR3_INPUT_STREAM_struct::markDepth, ANTLR3_INPUT_STREAM_struct::markers, and ANTLR3_INPUT_STREAM_struct::nextChar.
.PP
Referenced by antlr3GenericSetupStream().
.SS "static void antlr3UTF16Consume (\fBpANTLR3_INT_STREAM\fP is)\fC [static]\fP"
.PP
Consume the next character in a UTF16 input stream. 
.PP
\fBParameters:\fP
.RS 4
\fIinput\fP Input stream context pointer 
.RE
.PP

.PP
References ANTLR3_INPUT_STREAM_struct::charPositionInLine, ANTLR3_INPUT_STREAM_struct::currentLine, ANTLR3_INPUT_STREAM_struct::data, ANTLR3_INPUT_STREAM_struct::line, ANTLR3_INPUT_STREAM_struct::newlineChar, ANTLR3_INPUT_STREAM_struct::nextChar, ANTLR3_INPUT_STREAM_struct::sizeBuf, ANTLR3_INT_STREAM_struct::super, UNI_SUR_HIGH_END, UNI_SUR_HIGH_START, UNI_SUR_LOW_END, and UNI_SUR_LOW_START.
.PP
Referenced by antlr3UTF16SetupStream().
.SS "static void antlr3UTF16ConsumeBE (\fBpANTLR3_INT_STREAM\fP is)\fC [static]\fP"
.PP
Consume the next character in a UTF16 input stream when the input is Big Endian and the machine is not. 
.PP
\fBParameters:\fP
.RS 4
\fIinput\fP Input stream context pointer 
.RE
.PP

.PP
References ANTLR3_INPUT_STREAM_struct::charPositionInLine, ANTLR3_INPUT_STREAM_struct::currentLine, ANTLR3_INPUT_STREAM_struct::data, ANTLR3_INPUT_STREAM_struct::line, ANTLR3_INPUT_STREAM_struct::newlineChar, ANTLR3_INPUT_STREAM_struct::nextChar, ANTLR3_INPUT_STREAM_struct::sizeBuf, ANTLR3_INT_STREAM_struct::super, UNI_SUR_HIGH_END, UNI_SUR_HIGH_START, UNI_SUR_LOW_END, and UNI_SUR_LOW_START.
.PP
Referenced by antlr3UTF16SetupStream().
.SS "static void antlr3UTF16ConsumeLE (\fBpANTLR3_INT_STREAM\fP is)\fC [static]\fP"
.PP
Consume the next character in a UTF16 input stream when the input is Little Endian and the machine is not Note that the UTF16 routines do not do any substantial verification of the input stream as for performance sake, we assume it is validly encoded. 
.PP
So if a low surrogate is found at the curent input position then we just consume it. Surrogate pairs should be seen as Hi, Lo. So if we have a Lo first, then the input stream is fubar but we just ignore that.
.PP
\fBParameters:\fP
.RS 4
\fIinput\fP Input stream context pointer 
.RE
.PP

.PP
References ANTLR3_INPUT_STREAM_struct::charPositionInLine, ANTLR3_INPUT_STREAM_struct::currentLine, ANTLR3_INPUT_STREAM_struct::data, ANTLR3_INPUT_STREAM_struct::line, ANTLR3_INPUT_STREAM_struct::newlineChar, ANTLR3_INPUT_STREAM_struct::nextChar, ANTLR3_INPUT_STREAM_struct::sizeBuf, ANTLR3_INT_STREAM_struct::super, UNI_SUR_HIGH_END, UNI_SUR_HIGH_START, UNI_SUR_LOW_END, and UNI_SUR_LOW_START.
.PP
Referenced by antlr3UTF16SetupStream().
.SS "static \fBANTLR3_MARKER\fP antlr3UTF16Index (\fBpANTLR3_INT_STREAM\fP is)\fC [static]\fP"
.PP
Calculate the current index in the output stream. 
.PP
\fBParameters:\fP
.RS 4
\fIinput\fP Input stream context pointer 
.RE
.PP

.PP
References ANTLR3_INPUT_STREAM_struct::nextChar, and ANTLR3_INT_STREAM_struct::super.
.PP
Referenced by antlr3UTF16SetupStream().
.SS "static \fBANTLR3_UCHAR\fP antlr3UTF16LA (\fBpANTLR3_INT_STREAM\fP is, \fBANTLR3_INT32\fP la)\fC [static]\fP"
.PP
Return the input element assuming an 8 bit ascii input. 
.PP
\fBParameters:\fP
.RS 4
\fIinput\fP Input stream context pointer 
.br
\fIla\fP 1 based offset of next input stream element
.RE
.PP
\fBReturns:\fP
.RS 4
Next input character in internal ANTLR3 encoding (UTF32) 
.RE
.PP

.PP
References ANTLR3_CHARSTREAM_EOF, ANTLR3_INPUT_STREAM_struct::data, halfBase, halfShift, ANTLR3_INPUT_STREAM_struct::nextChar, ANTLR3_INPUT_STREAM_struct::sizeBuf, ANTLR3_INT_STREAM_struct::super, UNI_SUR_HIGH_END, UNI_SUR_HIGH_START, UNI_SUR_LOW_END, and UNI_SUR_LOW_START.
.PP
Referenced by antlr3UTF16SetupStream().
.SS "static \fBANTLR3_UCHAR\fP antlr3UTF16LABE (\fBpANTLR3_INT_STREAM\fP is, \fBANTLR3_INT32\fP la)\fC [static]\fP"
.PP
Return the input element assuming a UTF16 input when the input is Little Endian and the machine is not. 
.PP
\fBParameters:\fP
.RS 4
\fIinput\fP Input stream context pointer 
.br
\fIla\fP 1 based offset of next input stream element
.RE
.PP
\fBReturns:\fP
.RS 4
Next input character in internal ANTLR3 encoding (UTF32) 
.RE
.PP

.PP
References ANTLR3_CHARSTREAM_EOF, ANTLR3_INPUT_STREAM_struct::data, halfBase, halfShift, ANTLR3_INPUT_STREAM_struct::nextChar, ANTLR3_INPUT_STREAM_struct::sizeBuf, ANTLR3_INT_STREAM_struct::super, UNI_SUR_HIGH_END, UNI_SUR_HIGH_START, UNI_SUR_LOW_END, and UNI_SUR_LOW_START.
.PP
Referenced by antlr3UTF16SetupStream().
.SS "static \fBANTLR3_UCHAR\fP antlr3UTF16LALE (\fBpANTLR3_INT_STREAM\fP is, \fBANTLR3_INT32\fP la)\fC [static]\fP"
.PP
Return the input element assuming a UTF16 input when the input is Little Endian and the machine is not. 
.PP
\fBParameters:\fP
.RS 4
\fIinput\fP Input stream context pointer 
.br
\fIla\fP 1 based offset of next input stream element
.RE
.PP
\fBReturns:\fP
.RS 4
Next input character in internal ANTLR3 encoding (UTF32) 
.RE
.PP

.PP
References ANTLR3_CHARSTREAM_EOF, ANTLR3_INPUT_STREAM_struct::data, halfBase, halfShift, ANTLR3_INPUT_STREAM_struct::nextChar, ANTLR3_INPUT_STREAM_struct::sizeBuf, ANTLR3_INT_STREAM_struct::super, UNI_SUR_HIGH_END, UNI_SUR_HIGH_START, UNI_SUR_LOW_END, and UNI_SUR_LOW_START.
.PP
Referenced by antlr3UTF16SetupStream().
.SS "static void antlr3UTF16Seek (\fBpANTLR3_INT_STREAM\fP is, \fBANTLR3_MARKER\fP seekPoint)\fC [static]\fP"
.PP
Rewind the lexer input to the state specified by the supplied mark. 
.PP
\fBParameters:\fP
.RS 4
\fIinput\fP Input stream context pointer
.RE
.PP
\fBRemarks:\fP
.RS 4
Assumes UTF16 input stream. 
.RE
.PP

.PP
References ANTLR3_INT_STREAM_struct::_LA, ANTLR3_CHARSTREAM_EOF, ANTLR3_INT_STREAM_struct::consume, ANTLR3_INPUT_STREAM_struct::nextChar, and ANTLR3_INT_STREAM_struct::super.
.PP
Referenced by antlr3UTF16SetupStream().
.SS "void antlr3UTF16SetupStream (\fBpANTLR3_INPUT_STREAM\fP input, \fBANTLR3_BOOLEAN\fP machineBigEndian, \fBANTLR3_BOOLEAN\fP inputBigEndian)"
.PP
Common function to setup function interface for a UTF16 or UCS2 input stream. 
.PP
\fBParameters:\fP
.RS 4
\fIinput\fP Input stream context pointer
.RE
.PP
\fBRemarks:\fP
.RS 4
.IP "\(bu" 2
Strictly speaking, there is no such thing as a UCS2 input stream as the term tends to confuse the notions of character encoding, unicode and so on. UCS2 is essentially UTF16 without any surrogates and so the standard UTF16 input stream is able to handle it without any special code. 
.PP
.RE
.PP

.PP
References ANTLR3_INT_STREAM_struct::_LA, ANTLR3_FALSE, ANTLR3_TRUE, antlr3StringFactoryNew(), antlr3UTF16Consume(), antlr3UTF16ConsumeBE(), antlr3UTF16ConsumeLE(), antlr3UTF16Index(), antlr3UTF16LA(), antlr3UTF16LABE(), antlr3UTF16LALE(), antlr3UTF16Seek(), antlr3UTF16Substr(), ANTLR3_INPUT_STREAM_struct::charByteSize, ANTLR3_INT_STREAM_struct::consume, ANTLR3_INPUT_STREAM_struct::encoding, ANTLR3_INT_STREAM_struct::index, ANTLR3_INPUT_STREAM_struct::istream, ANTLR3_INT_STREAM_struct::seek, ANTLR3_INPUT_STREAM_struct::strFactory, and ANTLR3_INPUT_STREAM_struct::substr.
.PP
Referenced by setupInputStream().
.SS "static \fBpANTLR3_STRING\fP antlr3UTF16Substr (\fBpANTLR3_INPUT_STREAM\fP input, \fBANTLR3_MARKER\fP start, \fBANTLR3_MARKER\fP stop)\fC [static]\fP"
.PP
Return a substring of the UTF16 input stream in newly allocated memory. 
.PP
\fBParameters:\fP
.RS 4
\fIinput\fP Input stream context pointer 
.br
\fIstart\fP Offset in input stream where the string starts 
.br
\fIstop\fP Offset in the input stream where the string ends. 
.RE
.PP

.PP
References ANTLR3_UINT32_CAST, ANTLR3_STRING_FACTORY_struct::newPtr, and ANTLR3_INPUT_STREAM_struct::strFactory.
.PP
Referenced by antlr3UTF16SetupStream().
.SS "static void antlr3UTF32Consume (\fBpANTLR3_INT_STREAM\fP is)\fC [static]\fP"
.PP
Consume the next character in a UTF32 input stream. 
.PP
\fBParameters:\fP
.RS 4
\fIinput\fP Input stream context pointer 
.RE
.PP

.PP
References ANTLR3_INPUT_STREAM_struct::charPositionInLine, ANTLR3_INPUT_STREAM_struct::currentLine, ANTLR3_INPUT_STREAM_struct::data, ANTLR3_INPUT_STREAM_struct::line, ANTLR3_INPUT_STREAM_struct::newlineChar, ANTLR3_INPUT_STREAM_struct::nextChar, ANTLR3_INPUT_STREAM_struct::sizeBuf, and ANTLR3_INT_STREAM_struct::super.
.PP
Referenced by antlr3UTF32SetupStream().
.SS "static \fBANTLR3_MARKER\fP antlr3UTF32Index (\fBpANTLR3_INT_STREAM\fP is)\fC [static]\fP"
.PP
Calculate the current index in the output stream. 
.PP
\fBParameters:\fP
.RS 4
\fIinput\fP Input stream context pointer 
.RE
.PP

.PP
References ANTLR3_INPUT_STREAM_struct::nextChar, and ANTLR3_INT_STREAM_struct::super.
.PP
Referenced by antlr3UTF32SetupStream().
.SS "static \fBANTLR3_UCHAR\fP antlr3UTF32LA (\fBpANTLR3_INT_STREAM\fP is, \fBANTLR3_INT32\fP la)\fC [static]\fP"
.PP
Return the input element assuming a UTF32 input in natural machine byte order. 
.PP
\fBParameters:\fP
.RS 4
\fIinput\fP Input stream context pointer 
.br
\fIla\fP 1 based offset of next input stream element
.RE
.PP
\fBReturns:\fP
.RS 4
Next input character in internal ANTLR3 encoding (UTF32) 
.RE
.PP

.PP
References ANTLR3_CHARSTREAM_EOF, ANTLR3_INPUT_STREAM_struct::data, ANTLR3_INPUT_STREAM_struct::nextChar, ANTLR3_INPUT_STREAM_struct::sizeBuf, and ANTLR3_INT_STREAM_struct::super.
.PP
Referenced by antlr3UTF32SetupStream().
.SS "static \fBANTLR3_UCHAR\fP antlr3UTF32LABE (\fBpANTLR3_INT_STREAM\fP is, \fBANTLR3_INT32\fP la)\fC [static]\fP"
.PP
Return the input element assuming a UTF32 input in big endian byte order. 
.PP
\fBParameters:\fP
.RS 4
\fIinput\fP Input stream context pointer 
.br
\fIla\fP 1 based offset of next input stream element
.RE
.PP
\fBReturns:\fP
.RS 4
Next input character in internal ANTLR3 encoding (UTF32) 
.RE
.PP
\fBRemarks:\fP
.RS 4
This is the same code as LE version but seprated in case there are better optimisations fo rendinan swap 
.RE
.PP

.PP
References ANTLR3_CHARSTREAM_EOF, ANTLR3_INPUT_STREAM_struct::data, ANTLR3_INPUT_STREAM_struct::nextChar, ANTLR3_INPUT_STREAM_struct::sizeBuf, and ANTLR3_INT_STREAM_struct::super.
.PP
Referenced by antlr3UTF32SetupStream().
.SS "static \fBANTLR3_UCHAR\fP antlr3UTF32LALE (\fBpANTLR3_INT_STREAM\fP is, \fBANTLR3_INT32\fP la)\fC [static]\fP"
.PP
Return the input element assuming a UTF32 input in little endian byte order. 
.PP
\fBParameters:\fP
.RS 4
\fIinput\fP Input stream context pointer 
.br
\fIla\fP 1 based offset of next input stream element
.RE
.PP
\fBReturns:\fP
.RS 4
Next input character in internal ANTLR3 encoding (UTF32) 
.RE
.PP

.PP
References ANTLR3_CHARSTREAM_EOF, ANTLR3_INPUT_STREAM_struct::data, ANTLR3_INPUT_STREAM_struct::nextChar, ANTLR3_INPUT_STREAM_struct::sizeBuf, and ANTLR3_INT_STREAM_struct::super.
.PP
Referenced by antlr3UTF32SetupStream().
.SS "static void antlr3UTF32Seek (\fBpANTLR3_INT_STREAM\fP is, \fBANTLR3_MARKER\fP seekPoint)\fC [static]\fP"
.PP
Rewind the lexer input to the state specified by the supplied mark. 
.PP
\fBParameters:\fP
.RS 4
\fIinput\fP Input stream context pointer
.RE
.PP
\fBRemarks:\fP
.RS 4
Assumes UTF32 input stream. 
.RE
.PP

.PP
References ANTLR3_INT_STREAM_struct::_LA, ANTLR3_CHARSTREAM_EOF, ANTLR3_INT_STREAM_struct::consume, ANTLR3_INPUT_STREAM_struct::nextChar, and ANTLR3_INT_STREAM_struct::super.
.PP
Referenced by antlr3UTF32SetupStream().
.SS "void antlr3UTF32SetupStream (\fBpANTLR3_INPUT_STREAM\fP input, \fBANTLR3_BOOLEAN\fP machineBigEndian, \fBANTLR3_BOOLEAN\fP inputBigEndian)"
.PP
Common function to setup function interface for a UTF3 input stream. 
.PP
\fBParameters:\fP
.RS 4
\fIinput\fP Input stream context pointer 
.RE
.PP

.PP
References ANTLR3_INT_STREAM_struct::_LA, ANTLR3_FALSE, ANTLR3_TRUE, antlr3StringFactoryNew(), antlr3UTF32Consume(), antlr3UTF32Index(), antlr3UTF32LA(), antlr3UTF32LABE(), antlr3UTF32LALE(), antlr3UTF32Seek(), antlr3UTF32Substr(), ANTLR3_INPUT_STREAM_struct::charByteSize, ANTLR3_INT_STREAM_struct::consume, ANTLR3_INPUT_STREAM_struct::encoding, ANTLR3_INT_STREAM_struct::index, ANTLR3_INPUT_STREAM_struct::istream, ANTLR3_INT_STREAM_struct::seek, ANTLR3_INPUT_STREAM_struct::strFactory, and ANTLR3_INPUT_STREAM_struct::substr.
.PP
Referenced by setupInputStream().
.SS "static \fBpANTLR3_STRING\fP antlr3UTF32Substr (\fBpANTLR3_INPUT_STREAM\fP input, \fBANTLR3_MARKER\fP start, \fBANTLR3_MARKER\fP stop)\fC [static]\fP"
.PP
Return a substring of the UTF16 input stream in newly allocated memory. 
.PP
\fBParameters:\fP
.RS 4
\fIinput\fP Input stream context pointer 
.br
\fIstart\fP Offset in input stream where the string starts 
.br
\fIstop\fP Offset in the input stream where the string ends. 
.RE
.PP

.PP
References ANTLR3_UINT32_CAST, ANTLR3_STRING_FACTORY_struct::newPtr, and ANTLR3_INPUT_STREAM_struct::strFactory.
.PP
Referenced by antlr3UTF32SetupStream().
.SS "static void antlr3UTF8Consume (\fBpANTLR3_INT_STREAM\fP is)\fC [static]\fP"
.PP
Consume the next character in a UTF8 input stream. 
.PP
\fBParameters:\fP
.RS 4
\fIinput\fP Input stream context pointer 
.RE
.PP

.PP
References ANTLR3_INPUT_STREAM_struct::charPositionInLine, ANTLR3_INPUT_STREAM_struct::currentLine, ANTLR3_INPUT_STREAM_struct::data, ANTLR3_INPUT_STREAM_struct::line, ANTLR3_INPUT_STREAM_struct::newlineChar, ANTLR3_INPUT_STREAM_struct::nextChar, offsetsFromUTF8, ANTLR3_INPUT_STREAM_struct::sizeBuf, ANTLR3_INT_STREAM_struct::super, and trailingBytesForUTF8.
.PP
Referenced by antlr3UTF8SetupStream().
.SS "static \fBANTLR3_UCHAR\fP antlr3UTF8LA (\fBpANTLR3_INT_STREAM\fP is, \fBANTLR3_INT32\fP la)\fC [static]\fP"
.PP
Return the input element assuming a UTF8 input. 
.PP
\fBParameters:\fP
.RS 4
\fIinput\fP Input stream context pointer 
.br
\fIla\fP 1 based offset of next input stream element
.RE
.PP
\fBReturns:\fP
.RS 4
Next input character in internal ANTLR3 encoding (UTF32) 
.RE
.PP

.PP
References ANTLR3_CHARSTREAM_EOF, ANTLR3_INPUT_STREAM_struct::data, ANTLR3_INPUT_STREAM_struct::nextChar, offsetsFromUTF8, ANTLR3_INPUT_STREAM_struct::sizeBuf, ANTLR3_INT_STREAM_struct::super, and trailingBytesForUTF8.
.PP
Referenced by antlr3UTF8SetupStream().
.SS "void antlr3UTF8SetupStream (\fBpANTLR3_INPUT_STREAM\fP input)"
.PP
Common function to setup function interface for a UTF8 input stream. 
.PP
\fBParameters:\fP
.RS 4
\fIinput\fP Input stream context pointer 
.RE
.PP

.PP
References ANTLR3_INT_STREAM_struct::_LA, antlr3StringFactoryNew(), antlr3UTF8Consume(), antlr3UTF8LA(), ANTLR3_INPUT_STREAM_struct::charByteSize, ANTLR3_INT_STREAM_struct::consume, ANTLR3_INPUT_STREAM_struct::encoding, ANTLR3_INPUT_STREAM_struct::istream, and ANTLR3_INPUT_STREAM_struct::strFactory.
.PP
Referenced by setupInputStream().
.SH "Variable Documentation"
.PP 
.SS "const \fBANTLR3_UCHAR\fP \fBe2a\fP[256]"
.PP
Referenced by antlr3EBCDICLA().
.SS "const \fBUTF32\fP \fBoffsetsFromUTF8\fP[6]\fC [static]\fP"
.PP
\fBInitial value:\fP
.PP
.nf
 
    {   0x00000000UL, 0x00003080UL, 0x000E2080UL, 
    0x03C82080UL, 0xFA082080UL, 0x82082080UL 
    }
.fi
Magic values subtracted from a buffer value during UTF8 conversion. 
.PP
This table contains as many values as there might be trailing bytes in a UTF-8 sequence. 
.SS "const \fBANTLR3_UINT32\fP \fBtrailingBytesForUTF8\fP[256]\fC [static]\fP"
.PP
\fBInitial value:\fP
.PP
.nf
 {
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
    2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2, 3,3,3,3,3,3,3,3,4,4,4,4,5,5,5,5
}
.fi
Index into the table below with the first byte of a UTF-8 sequence to get the number of trailing bytes that are supposed to follow it. 
.PP
Note that *legal* UTF-8 values can't have 4 or 5-bytes. The table is left as-is for anyone who may want to do such conversion, which was allowed in earlier algorithms. 
.SH "Author"
.PP 
Generated automatically by Doxygen for ANTLR3C from the source code.
