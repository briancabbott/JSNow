.TH "ANTLR3_EXCEPTION_struct" 3 "29 Nov 2010" "Version 3.3" "ANTLR3C" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ANTLR3_EXCEPTION_struct \- 
.SH SYNOPSIS
.br
.PP
\fC#include <antlr3exception.h>\fP
.PP
.SH "Detailed Description"
.PP 
Base structure for an ANTLR3 exception tracker. 
.SS "Data Fields"

.in +1c
.ti -1c
.RI "\fBANTLR3_UCHAR\fP \fBc\fP"
.br
.RI "\fIThe current character when an error occurred - for lexers. \fP"
.ti -1c
.RI "\fBANTLR3_INT32\fP \fBcharPositionInLine\fP"
.br
.RI "\fICharacter position in the line where the error occurred. \fP"
.ti -1c
.RI "void * \fBcustom\fP"
.br
.RI "\fIPointer for you, the programmer to add anything you like to an exception. \fP"
.ti -1c
.RI "\fBANTLR3_UINT32\fP \fBdecisionNum\fP"
.br
.RI "\fIdecision number for NVE \fP"
.ti -1c
.RI "\fBANTLR3_UINT32\fP \fBexpecting\fP"
.br
.RI "\fIIndicates the token we were expecting to see next when the error occurred. \fP"
.ti -1c
.RI "\fBpANTLR3_BITSET_LIST\fP \fBexpectingSet\fP"
.br
.RI "\fIIndicates a set of tokens that we were expecting to see one of when the error occurred. \fP"
.ti -1c
.RI "void(* \fBfreeCustom\fP )(void *\fBcustom\fP)"
.br
.RI "\fIPointer to a routine that is called to free the custom exception structure when the exception is destroyed. \fP"
.ti -1c
.RI "void(* \fBfreeEx\fP )(struct \fBANTLR3_EXCEPTION_struct\fP *ex)"
.br
.ti -1c
.RI "\fBANTLR3_BOOLEAN\fP \fBfreeMessage\fP"
.br
.RI "\fIIf set to ANTLR3_TRUE, this indicates that the message element of this structure should be freed by calling \fBANTLR3_FREE()\fP when the exception is destroyed. \fP"
.ti -1c
.RI "\fBANTLR3_MARKER\fP \fBindex\fP"
.br
.RI "\fIIndicates the index of the 'token' we were looking at when the exception occurred. \fP"
.ti -1c
.RI "\fBpANTLR3_INT_STREAM\fP \fBinput\fP"
.br
.RI "\fIPointer to the input stream that this exception occurred in. \fP"
.ti -1c
.RI "\fBANTLR3_UINT32\fP \fBline\fP"
.br
.RI "\fITrack the line at which the error occurred in case this is generated from a lexer. \fP"
.ti -1c
.RI "void * \fBmessage\fP"
.br
.RI "\fIThe printable message that goes with this exception, in your preferred encoding format. \fP"
.ti -1c
.RI "void * \fBname\fP"
.br
.RI "\fIThe string name of the exception. \fP"
.ti -1c
.RI "struct \fBANTLR3_EXCEPTION_struct\fP * \fBnextException\fP"
.br
.RI "\fIPointer to the next exception in the chain (if any). \fP"
.ti -1c
.RI "void * \fBnode\fP"
.br
.RI "\fIIf this is a tree parser exception then the node is set to point to the node that caused the issue. \fP"
.ti -1c
.RI "void(* \fBprint\fP )(struct \fBANTLR3_EXCEPTION_struct\fP *ex)"
.br
.ti -1c
.RI "void * \fBruleName\fP"
.br
.RI "\fIRule name for failed predicate exception. \fP"
.ti -1c
.RI "\fBANTLR3_UINT32\fP \fBstate\fP"
.br
.RI "\fIState for NVE. \fP"
.ti -1c
.RI "\fBpANTLR3_STRING\fP \fBstreamName\fP"
.br
.RI "\fIName of the file/input source for reporting. \fP"
.ti -1c
.RI "void * \fBtoken\fP"
.br
.RI "\fIIndicates what the current token/tree was when the error occurred. \fP"
.ti -1c
.RI "\fBANTLR3_UINT32\fP \fBtype\fP"
.br
.RI "\fISet to one of the exception type defines:. \fP"
.in -1c
.SH "Field Documentation"
.PP 
.SS "\fBANTLR3_UCHAR\fP \fBANTLR3_EXCEPTION_struct::c\fP"
.PP
The current character when an error occurred - for lexers. 
.PP
Referenced by antlr3RecognitionExceptionNew(), and displayRecognitionError().
.SS "\fBANTLR3_INT32\fP \fBANTLR3_EXCEPTION_struct::charPositionInLine\fP"
.PP
Character position in the line where the error occurred. 
.PP
Referenced by antlr3RecognitionExceptionNew(), and displayRecognitionError().
.SS "void* \fBANTLR3_EXCEPTION_struct::custom\fP"
.PP
Pointer for you, the programmer to add anything you like to an exception. 
.PP
Referenced by antlr3ExceptionFree().
.SS "\fBANTLR3_UINT32\fP \fBANTLR3_EXCEPTION_struct::decisionNum\fP"
.PP
decision number for NVE 
.PP
Referenced by noViableAlt().
.SS "\fBANTLR3_UINT32\fP \fBANTLR3_EXCEPTION_struct::expecting\fP"
.PP
Indicates the token we were expecting to see next when the error occurred. 
.PP
Referenced by displayRecognitionError(), mismatch(), mismatchIsUnwantedToken(), and recoverFromMismatchedToken().
.SS "\fBpANTLR3_BITSET_LIST\fP \fBANTLR3_EXCEPTION_struct::expectingSet\fP"
.PP
Indicates a set of tokens that we were expecting to see one of when the error occurred. 
.PP
It is a following bitset list, so you can use load it and use ->toIntList() on it to generate an array of integer tokens that it represents. 
.PP
Referenced by displayRecognitionError().
.SS "void(* \fBANTLR3_EXCEPTION_struct::freeCustom\fP)(void *\fBcustom\fP)"
.PP
Pointer to a routine that is called to free the custom exception structure when the exception is destroyed. 
.PP
Set to NULL if nothing should be done. 
.PP
Referenced by antlr3ExceptionFree().
.SS "void(* \fBANTLR3_EXCEPTION_struct::freeEx\fP)(struct \fBANTLR3_EXCEPTION_struct\fP *ex)"
.PP
Referenced by antlr3ExceptionNew(), and freeBR().
.SS "\fBANTLR3_BOOLEAN\fP \fBANTLR3_EXCEPTION_struct::freeMessage\fP"
.PP
If set to ANTLR3_TRUE, this indicates that the message element of this structure should be freed by calling \fBANTLR3_FREE()\fP when the exception is destroyed. 
.PP
Referenced by antlr3ExceptionFree(), and antlr3ExceptionNew().
.SS "\fBANTLR3_MARKER\fP \fBANTLR3_EXCEPTION_struct::index\fP"
.PP
Indicates the index of the 'token' we were looking at when the exception occurred. 
.PP
Referenced by antlr3RecognitionExceptionNew(), and displayRecognitionError().
.SS "\fBpANTLR3_INT_STREAM\fP \fBANTLR3_EXCEPTION_struct::input\fP"
.PP
Pointer to the input stream that this exception occurred in. 
.PP
Referenced by antlr3RecognitionExceptionNew().
.SS "\fBANTLR3_UINT32\fP \fBANTLR3_EXCEPTION_struct::line\fP"
.PP
Track the line at which the error occurred in case this is generated from a lexer. 
.PP
We need to track this since the unexpected char doesn't carry the line info. 
.PP
Referenced by antlr3RecognitionExceptionNew(), and displayRecognitionError().
.SS "void* \fBANTLR3_EXCEPTION_struct::message\fP"
.PP
The printable message that goes with this exception, in your preferred encoding format. 
.PP
ANTLR just uses ASCII by default but you can ignore these messages or convert them to another format or whatever of course. They are really internal messages that you then decide how to print out in a form that the users of your product will understand, as they are unlikely to know what to do with 'Recognition exception at: [[TOK_GERUND..... ' ;-) 
.PP
Referenced by antlr3ExceptionFree(), antlr3ExceptionNew(), antlr3ExceptionPrint(), antlr3RecognitionExceptionNew(), displayRecognitionError(), noViableAlt(), and recoverFromMismatchedToken().
.SS "void* \fBANTLR3_EXCEPTION_struct::name\fP"
.PP
The string name of the exception. 
.PP
Referenced by antlr3ExceptionNew(), antlr3MTExceptionNew(), antlr3MTNExceptionNew(), displayRecognitionError(), and mismatch().
.SS "struct \fBANTLR3_EXCEPTION_struct\fP* \fBANTLR3_EXCEPTION_struct::nextException\fP\fC [read]\fP"
.PP
Pointer to the next exception in the chain (if any). 
.PP
Referenced by antlr3ExceptionFree(), antlr3ExceptionPrint(), and antlr3RecognitionExceptionNew().
.SS "void* \fBANTLR3_EXCEPTION_struct::node\fP"
.PP
If this is a tree parser exception then the node is set to point to the node that caused the issue. 
.PP
.SS "void(* \fBANTLR3_EXCEPTION_struct::print\fP)(struct \fBANTLR3_EXCEPTION_struct\fP *ex)"
.PP
Referenced by antlr3ExceptionNew().
.SS "void* \fBANTLR3_EXCEPTION_struct::ruleName\fP"
.PP
Rule name for failed predicate exception. 
.PP
.SS "\fBANTLR3_UINT32\fP \fBANTLR3_EXCEPTION_struct::state\fP"
.PP
State for NVE. 
.PP
Referenced by noViableAlt().
.SS "\fBpANTLR3_STRING\fP \fBANTLR3_EXCEPTION_struct::streamName\fP"
.PP
Name of the file/input source for reporting. 
.PP
Note that this may be NULL!! 
.PP
Referenced by antlr3RecognitionExceptionNew(), and displayRecognitionError().
.SS "void* \fBANTLR3_EXCEPTION_struct::token\fP"
.PP
Indicates what the current token/tree was when the error occurred. 
.PP
Since not all input streams will be able to retrieve the nth token, we track it here instead. This is for parsers, and even tree parsers may set this. 
.PP
Referenced by antlr3RecognitionExceptionNew(), displayRecognitionError(), recoverFromMismatchedSet(), and recoverFromMismatchedToken().
.SS "\fBANTLR3_UINT32\fP \fBANTLR3_EXCEPTION_struct::type\fP"
.PP
Set to one of the exception type defines:. 
.PP
.IP "\(bu" 2
\fBANTLR3_RECOGNITION_EXCEPTION\fP
.IP "\(bu" 2
\fBANTLR3_MISMATCHED_TOKEN_EXCEPTION\fP
.IP "\(bu" 2
\fBANTLR3_NO_VIABLE_ALT_EXCEPTION\fP
.IP "\(bu" 2
\fBANTLR3_MISMATCHED_SET_EXCEPTION\fP
.IP "\(bu" 2
\fBANTLR3_EARLY_EXIT_EXCEPTION\fP
.IP "\(bu" 2
\fBANTLR3_FAILED_PREDICATE_EXCEPTION\fP
.IP "\(bu" 2
\fBANTLR3_EARLY_EXIT_EXCEPTION\fP 
.PP

.PP
Referenced by antlr3ExceptionNew(), antlr3ExceptionPrint(), antlr3MTExceptionNew(), antlr3MTNExceptionNew(), displayRecognitionError(), mismatch(), noViableAlt(), recoverFromMismatchedSet(), and recoverFromMismatchedToken().

.SH "Author"
.PP 
Generated automatically by Doxygen for ANTLR3C from the source code.
