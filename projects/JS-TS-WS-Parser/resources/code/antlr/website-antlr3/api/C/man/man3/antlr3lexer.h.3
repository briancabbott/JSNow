.TH "include/antlr3lexer.h" 3 "29 Nov 2010" "Version 3.3" "ANTLR3C" \" -*- nroff -*-
.ad l
.nh
.SH NAME
include/antlr3lexer.h \- 
.SH "Detailed Description"
.PP 
Base interface for any ANTLR3 lexer. 

An ANLTR3 lexer builds from two sets of components:
.PP
.IP "\(bu" 2
The runtime components that provide common functionality such as traversing character streams, building tokens for output and so on.
.IP "\(bu" 2
The generated rules and struutre of the actual lexer, which call upon the runtime components.
.PP
.PP
A lexer class contains a character input stream, a base recognizer interface (which it will normally implement) and a token source interface (which it also implements. The Tokensource interface is called by a token consumer (such as a parser, but in theory it can be anything that wants a set of abstract tokens in place of a raw character stream.
.PP
So then, we set up a lexer in a sequence akin to:
.PP
.IP "\(bu" 2
Create a character stream (something which implements ANTLR3_INPUT_STREAM) and initialize it.
.IP "\(bu" 2
Create a lexer interface and tell it where it its input stream is. This will cause the creation of a base recognizer class, which it will override with its own implementations of some methods. The lexer creator can also then in turn override anything it likes.
.IP "\(bu" 2
The lexer token source interface is then passed to some interface that knows how to use it, byte calling for a next token.
.IP "\(bu" 2
When a next token is called, let ze lexing begin. 
.PP

.SH SYNOPSIS
.br
.PP
\fC#include <antlr3defs.h>\fP
.br
\fC#include <antlr3input.h>\fP
.br
\fC#include <antlr3commontoken.h>\fP
.br
\fC#include <antlr3tokenstream.h>\fP
.br
\fC#include <antlr3baserecognizer.h>\fP
.br

.SS "Data Structures"

.in +1c
.ti -1c
.RI "struct \fBANTLR3_LEXER_struct\fP"
.br
.in -1c
.SS "Defines"

.in +1c
.ti -1c
.RI "#define \fBANTLR3_STRING_TERMINATOR\fP   0xFFFFFFFF"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef struct \fBANTLR3_LEXER_struct\fP \fBANTLR3_LEXER\fP"
.br
.in -1c
.SH "Define Documentation"
.PP 
.SS "#define ANTLR3_STRING_TERMINATOR   0xFFFFFFFF"
.PP
Referenced by matchs().
.SH "Typedef Documentation"
.PP 
.SS "typedef struct \fBANTLR3_LEXER_struct\fP
     \fBANTLR3_LEXER\fP"
.PP
.SH "Author"
.PP 
Generated automatically by Doxygen for ANTLR3C from the source code.
