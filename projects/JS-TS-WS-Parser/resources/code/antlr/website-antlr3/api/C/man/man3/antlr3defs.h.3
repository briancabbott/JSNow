.TH "include/antlr3defs.h" 3 "29 Nov 2010" "Version 3.3" "ANTLR3C" \" -*- nroff -*-
.ad l
.nh
.SH NAME
include/antlr3defs.h \- 
.SH "Detailed Description"
.PP 
Basic type and constant definitions for ANTLR3 Runtime. 


.SH SYNOPSIS
.br
.PP
\fC#include <antlr3errors.h>\fP
.br
\fC#include <antlr3config.h>\fP
.br
\fC#include <stdio.h>\fP
.br
\fC#include <antlr3interfaces.h>\fP
.br
\fC#include <antlr3convertutf.h>\fP
.br

.SS "Defines"

.in +1c
.ti -1c
.RI "#define \fB_stat\fP   stat"
.br
.ti -1c
.RI "#define \fBANTLR3_API\fP"
.br
.ti -1c
.RI "#define \fBANTLR3_API\fP"
.br
.ti -1c
.RI "#define \fBANTLR3_AVERAGE\fP"
.br
.ti -1c
.RI "#define \fBANTLR3_BE\fP   1"
.br
.RI "\fIIndicates Big Endian for encodings where this makes sense. \fP"
.ti -1c
.RI "#define \fBANTLR3_CALLOC\fP(numEl, elSize)   calloc  (numEl, (size_t)(elSize))"
.br
.RI "\fIDefault definition of ANTLR3_CALLOC. \fP"
.ti -1c
.RI "#define \fBANTLR3_CDECL\fP"
.br
.ti -1c
.RI "#define \fBANTLR3_CLOSESOCKET\fP   close"
.br
.ti -1c
.RI "#define \fBANTLR3_ENC_8BIT\fP   4"
.br
.RI "\fIGeneral latin-1 or other 8 bit encoding scheme such as straight ASCII. \fP"
.ti -1c
.RI "#define \fBANTLR3_ENC_EBCDIC\fP   64"
.br
.RI "\fIInput is 8 bit EBCDIC (which we convert to 8 bit ASCII on the fly. \fP"
.ti -1c
.RI "#define \fBANTLR3_ENC_UTF16\fP   16"
.br
.RI "\fIUTF-16 encoding scheme (which also covers UCS2 as that does not have surrogates). \fP"
.ti -1c
.RI "#define \fBANTLR3_ENC_UTF16BE\fP   16 + ANTLR3_BE"
.br
.ti -1c
.RI "#define \fBANTLR3_ENC_UTF16LE\fP   16 + ANTLR3_LE"
.br
.ti -1c
.RI "#define \fBANTLR3_ENC_UTF32\fP   32"
.br
.RI "\fIUTF-32 encoding scheme (basically straight 32 bit). \fP"
.ti -1c
.RI "#define \fBANTLR3_ENC_UTF32BE\fP   32 + ANTLR3_BE"
.br
.ti -1c
.RI "#define \fBANTLR3_ENC_UTF32LE\fP   32 + ANTLR3_LE"
.br
.ti -1c
.RI "#define \fBANTLR3_ENC_UTF8\fP   8"
.br
.RI "\fIUTF-8 encoding scheme. \fP"
.ti -1c
.RI "#define \fBANTLR3_FASTCALL\fP"
.br
.ti -1c
.RI "#define \fBANTLR3_FPRINTF\fP   fprintf"
.br
.RI "\fIDefault definition of fprintf, set this to something other than fprintf before including \fBantlr3.h\fP if your system does not have a fprintf. \fP"
.ti -1c
.RI "#define \fBANTLR3_FREE\fP(ptr)   free    ((void *)(ptr))"
.br
.RI "\fIDefault definition of ANTLR3_FREE. \fP"
.ti -1c
.RI "#define \fBANTLR3_FREE_FUNC\fP   free"
.br
.RI "\fIDefault definition of ANTLR3_FREE_FUNC. \fP"
.ti -1c
.RI "#define \fBANTLR3_FUNC_PTR\fP(ptr)   (void *)((\fBANTLR3_UINT32\fP)(ptr))"
.br
.ti -1c
.RI "#define \fBANTLR3_INLINE\fP   inline"
.br
.ti -1c
.RI "#define \fBANTLR3_LE\fP   2"
.br
.RI "\fIIndicates Little Endian for encoidngs where this makes sense. \fP"
.ti -1c
.RI "#define \fBANTLR3_LIST_SIZE_HINT\fP   63"
.br
.ti -1c
.RI "#define \fBANTLR3_MALLOC\fP(request)   malloc  ((size_t)(request))"
.br
.RI "\fIDefault definition of ANTLR3_MALLOC. \fP"
.ti -1c
.RI "#define \fBANTLR3_MEMCPY\fP(target, source, size)   memcpy((void *)(target), (const void *)(source), (size_t)(size))"
.br
.RI "\fIDefault definition of ANTLR3_MEMCPY. \fP"
.ti -1c
.RI "#define \fBANTLR3_MEMMOVE\fP(target, source, size)   memmove((void *)(target), (const void *)(source), (size_t)(size))"
.br
.RI "\fIDefault definition of ANTLR3_MEMMOVE. \fP"
.ti -1c
.RI "#define \fBANTLR3_MEMSET\fP(target, byte, size)   memset((void *)(target), (int)(byte), (size_t)(size))"
.br
.RI "\fIDefault definition of ANTLR3_MEMSET. \fP"
.ti -1c
.RI "#define \fBANTLR3_PRINTF\fP   printf"
.br
.RI "\fIDefault definition of printf, set this to something other than printf before including \fBantlr3.h\fP if your system does not have a printf. \fP"
.ti -1c
.RI "#define \fBANTLR3_REALLOC\fP(current, request)   realloc ((void *)(current), (size_t)(request))"
.br
.RI "\fIDefault definition of ANTLR3_REALLOC. \fP"
.ti -1c
.RI "#define \fBANTLR3_SIZE_HINT\fP   1025"
.br
.ti -1c
.RI "#define \fBANTLR3_STRDUP\fP(instr)   (\fBpANTLR3_UINT8\fP)(strdup  ((const char *)(instr)))"
.br
.RI "\fIDefault definition of ANTLR3_STRDUP. \fP"
.ti -1c
.RI "#define \fBANTLR3_TRIE_DEPTH\fP   31"
.br
.ti -1c
.RI "#define \fBANTLR3_UINT32_CAST\fP(ptr)   (\fBANTLR3_UINT32\fP)(ptr)"
.br
.ti -1c
.RI "#define \fBANTLR3_UINT64_CAST\fP(ptr)   (\fBANTLR3_UINT64\fP)((\fBANTLR3_UINT32\fP)(ptr))"
.br
.ti -1c
.RI "#define \fBANTLR3_UINT64_LIT\fP(lit)   lit##ULL"
.br
.ti -1c
.RI "#define \fBINVALID_SOCKET\fP   ((\fBSOCKET\fP)-1)"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef uint64_t \fBANTLR3_BITWORD\fP"
.br
.ti -1c
.RI "typedef uint32_t \fBANTLR3_BOOLEAN\fP"
.br
.ti -1c
.RI "typedef int32_t \fBANTLR3_CHAR\fP"
.br
.ti -1c
.RI "typedef FILE * \fBANTLR3_FDSC\fP"
.br
.ti -1c
.RI "typedef struct stat \fBANTLR3_FSTAT_STRUCT\fP"
.br
.ti -1c
.RI "typedef int16_t \fBANTLR3_INT16\fP"
.br
.ti -1c
.RI "typedef int32_t \fBANTLR3_INT32\fP"
.br
.ti -1c
.RI "typedef int64_t \fBANTLR3_INT64\fP"
.br
.ti -1c
.RI "typedef int8_t \fBANTLR3_INT8\fP"
.br
.ti -1c
.RI "typedef \fBANTLR3_UINT32\fP \fBANTLR3_INTKEY\fP"
.br
.ti -1c
.RI "typedef \fBANTLR3_INT32\fP \fBANTLR3_MARKER\fP"
.br
.ti -1c
.RI "typedef size_t \fBANTLR3_SALENT\fP"
.br
.ti -1c
.RI "typedef struct sockaddr_in \fBANTLR3_SOCKADDRT\fP"
.br
.ti -1c
.RI "typedef uint32_t \fBANTLR3_UCHAR\fP"
.br
.ti -1c
.RI "typedef uint16_t \fBANTLR3_UINT16\fP"
.br
.ti -1c
.RI "typedef uint32_t \fBANTLR3_UINT32\fP"
.br
.ti -1c
.RI "typedef uint64_t \fBANTLR3_UINT64\fP"
.br
.ti -1c
.RI "typedef uint8_t \fBANTLR3_UINT8\fP"
.br
.ti -1c
.RI "typedef uint64_t * \fBpANTLR3_BITWORD\fP"
.br
.ti -1c
.RI "typedef uint32_t * \fBpANTLR3_BOOLEAN\fP"
.br
.ti -1c
.RI "typedef int32_t * \fBpANTLR3_CHAR\fP"
.br
.ti -1c
.RI "typedef int16_t * \fBpANTLR3_INT16\fP"
.br
.ti -1c
.RI "typedef int32_t * \fBpANTLR3_INT32\fP"
.br
.ti -1c
.RI "typedef int64_t * \fBpANTLR3_INT64\fP"
.br
.ti -1c
.RI "typedef int8_t * \fBpANTLR3_INT8\fP"
.br
.ti -1c
.RI "typedef struct sockaddr * \fBpANTLR3_SOCKADDRC\fP"
.br
.ti -1c
.RI "typedef struct sockaddr_in * \fBpANTLR3_SOCKADDRT\fP"
.br
.ti -1c
.RI "typedef uint32_t * \fBpANTLR3_UCHAR\fP"
.br
.ti -1c
.RI "typedef uint16_t * \fBpANTLR3_UINT16\fP"
.br
.ti -1c
.RI "typedef uint32_t * \fBpANTLR3_UINT32\fP"
.br
.ti -1c
.RI "typedef uint64_t * \fBpANTLR3_UINT64\fP"
.br
.ti -1c
.RI "typedef uint8_t * \fBpANTLR3_UINT8\fP"
.br
.ti -1c
.RI "typedef int \fBSOCKET\fP"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "ANTLR3_API \fBpANTLR3_BASE_TREE_ADAPTOR\fP \fBANTLR3_TREE_ADAPTORDebugNew\fP (\fBpANTLR3_STRING_FACTORY\fP strFactory, \fBpANTLR3_DEBUG_EVENT_LISTENER\fP debugger)"
.br
.RI "\fIDebugging version of the tree adaptor (not normally called as generated code calls setDebugEventListener instead which changes a normal token stream to a debugging stream and means that a user's instantiation code does not need to be changed just to debug with AW. \fP"
.ti -1c
.RI "ANTLR3_API \fBpANTLR3_BASE_TREE_ADAPTOR\fP \fBANTLR3_TREE_ADAPTORNew\fP (\fBpANTLR3_STRING_FACTORY\fP strFactory)"
.br
.RI "\fICreate a new tree adaptor. \fP"
.ti -1c
.RI "ANTLR3_API \fBpANTLR3_ARBORETUM\fP \fBantlr3ArboretumNew\fP (\fBpANTLR3_STRING_FACTORY\fP factory)"
.br
.ti -1c
.RI "ANTLR3_API \fBpANTLR3_BASE_RECOGNIZER\fP \fBantlr3BaseRecognizerNew\fP (\fBANTLR3_UINT32\fP type, \fBANTLR3_UINT32\fP sizeHint, \fBpANTLR3_RECOGNIZER_SHARED_STATE\fP state)"
.br
.ti -1c
.RI "ANTLR3_API void \fBantlr3BaseTreeAdaptorInit\fP (\fBpANTLR3_BASE_TREE_ADAPTOR\fP adaptor, \fBpANTLR3_DEBUG_EVENT_LISTENER\fP debugger)"
.br
.RI "\fIGiven a pointer to a base tree adaptor structure (which is usually embedded in the super class the implements the tree adaptor used in the parse), initialize its function pointers and so on. \fP"
.ti -1c
.RI "ANTLR3_API \fBpANTLR3_BASE_TREE\fP \fBantlr3BaseTreeNew\fP (\fBpANTLR3_BASE_TREE\fP tree)"
.br
.ti -1c
.RI "ANTLR3_API \fBpANTLR3_BITSET\fP \fBantlr3BitsetCopy\fP (\fBpANTLR3_BITSET_LIST\fP blist)"
.br
.ti -1c
.RI "ANTLR3_API \fBpANTLR3_BITSET\fP \fBantlr3BitsetList\fP (\fBpANTLR3_HASH_TABLE\fP list)"
.br
.ti -1c
.RI "ANTLR3_API \fBpANTLR3_BITSET\fP \fBantlr3BitsetLoad\fP (\fBpANTLR3_BITSET_LIST\fP blist)"
.br
.RI "\fICreates a new bitset with at least one 64 bit bset of bits, but as many 64 bit sets as are required. \fP"
.ti -1c
.RI "ANTLR3_API \fBpANTLR3_BITSET\fP \fBantlr3BitsetNew\fP (\fBANTLR3_UINT32\fP numBits)"
.br
.ti -1c
.RI "ANTLR3_API \fBpANTLR3_BITSET\fP \fBantlr3BitsetOf\fP (\fBANTLR3_INT32\fP bit,...)"
.br
.RI "\fICreates a new bitset with at least one element, but as many elements are required. \fP"
.ti -1c
.RI "ANTLR3_API void \fBantlr3BitsetSetAPI\fP (\fBpANTLR3_BITSET\fP bitset)"
.br
.ti -1c
.RI "ANTLR3_API \fBANTLR3_UCHAR\fP \fBantlr3c8toAntlrc\fP (\fBANTLR3_INT8\fP inc)"
.br
.RI "\fIProvides basic utility functions to convert between the various Unicode character conversions. \fP"
.ti -1c
.RI "ANTLR3_API \fBpANTLR3_COMMON_TOKEN_STREAM\fP \fBantlr3CommonTokenDebugStreamSourceNew\fP (\fBANTLR3_UINT32\fP hint, \fBpANTLR3_TOKEN_SOURCE\fP source, \fBpANTLR3_DEBUG_EVENT_LISTENER\fP debugger)"
.br
.ti -1c
.RI "ANTLR3_API \fBpANTLR3_COMMON_TOKEN\fP \fBantlr3CommonTokenNew\fP (\fBANTLR3_UINT32\fP ttype)"
.br
.ti -1c
.RI "ANTLR3_API \fBpANTLR3_COMMON_TOKEN_STREAM\fP \fBantlr3CommonTokenStreamNew\fP (\fBANTLR3_UINT32\fP hint)"
.br
.ti -1c
.RI "ANTLR3_API \fBpANTLR3_COMMON_TOKEN_STREAM\fP \fBantlr3CommonTokenStreamSourceNew\fP (\fBANTLR3_UINT32\fP hint, \fBpANTLR3_TOKEN_SOURCE\fP source)"
.br
.ti -1c
.RI "ANTLR3_API \fBpANTLR3_COMMON_TREE\fP \fBantlr3CommonTreeNew\fP (void)"
.br
.ti -1c
.RI "ANTLR3_API \fBpANTLR3_COMMON_TREE\fP \fBantlr3CommonTreeNewFromToken\fP (\fBpANTLR3_COMMON_TOKEN\fP tree)"
.br
.ti -1c
.RI "ANTLR3_API \fBpANTLR3_COMMON_TREE\fP \fBantlr3CommonTreeNewFromTree\fP (\fBpANTLR3_COMMON_TREE\fP tree)"
.br
.ti -1c
.RI "ANTLR3_API \fBpANTLR3_COMMON_TREE_NODE_STREAM\fP \fBantlr3CommonTreeNodeStreamNew\fP (\fBpANTLR3_STRING_FACTORY\fP strFactory, \fBANTLR3_UINT32\fP hint)"
.br
.ti -1c
.RI "ANTLR3_API \fBpANTLR3_COMMON_TREE_NODE_STREAM\fP \fBantlr3CommonTreeNodeStreamNewStream\fP (\fBpANTLR3_COMMON_TREE_NODE_STREAM\fP inStream)"
.br
.ti -1c
.RI "ANTLR3_API \fBpANTLR3_COMMON_TREE_NODE_STREAM\fP \fBantlr3CommonTreeNodeStreamNewTree\fP (\fBpANTLR3_BASE_TREE\fP tree, \fBANTLR3_UINT32\fP hint)"
.br
.ti -1c
.RI "ANTLR3_API \fBpANTLR3_DEBUG_EVENT_LISTENER\fP \fBantlr3DebugListenerNew\fP ()"
.br
.RI "\fICreate and initialize a new debug event listener that can be connected to by ANTLRWorks and any other debugger via a socket. \fP"
.ti -1c
.RI "ANTLR3_API \fBANTLR3_INT32\fP \fBantlr3dfapredict\fP (void *ctx, \fBpANTLR3_BASE_RECOGNIZER\fP rec, \fBpANTLR3_INT_STREAM\fP is, \fBpANTLR3_CYCLIC_DFA\fP cdfa)"
.br
.RI "\fIFrom the input stream, predict what alternative will succeed using this DFA (representing the covering regular approximation to the underlying CFL). \fP"
.ti -1c
.RI "ANTLR3_API \fBANTLR3_INT32\fP \fBantlr3dfaspecialStateTransition\fP (void *ctx, \fBpANTLR3_BASE_RECOGNIZER\fP rec, \fBpANTLR3_INT_STREAM\fP is, \fBpANTLR3_CYCLIC_DFA\fP dfa, \fBANTLR3_INT32\fP s)"
.br
.RI "\fIDefault special state implementation. \fP"
.ti -1c
.RI "ANTLR3_API \fBANTLR3_INT32\fP \fBantlr3dfaspecialTransition\fP (void *ctx, \fBpANTLR3_BASE_RECOGNIZER\fP rec, \fBpANTLR3_INT_STREAM\fP is, \fBpANTLR3_CYCLIC_DFA\fP dfa, \fBANTLR3_INT32\fP s)"
.br
.ti -1c
.RI "ANTLR3_API \fBpANTLR3_HASH_ENUM\fP \fBantlr3EnumNew\fP (\fBpANTLR3_HASH_TABLE\fP table)"
.br
.RI "\fICreates an enumeration structure to traverse the hash table. \fP"
.ti -1c
.RI "ANTLR3_API \fBpANTLR3_EXCEPTION\fP \fBantlr3ExceptionNew\fP (\fBANTLR3_UINT32\fP exception, void *name, void *message, \fBANTLR3_BOOLEAN\fP freeMessage)"
.br
.RI "\fICreates a new ANTLR3 exception structure. \fP"
.ti -1c
.RI "ANTLR3_API \fBpANTLR3_INPUT_STREAM\fP \fBantlr3FileStreamNew\fP (\fBpANTLR3_UINT8\fP fileName, \fBANTLR3_UINT32\fP encoding)"
.br
.ti -1c
.RI "ANTLR3_API \fBANTLR3_UINT32\fP \fBantlr3Hash\fP (void *key, \fBANTLR3_UINT32\fP keylen)"
.br
.RI "\fIGiven an input key of arbitrary length, return a hash value of it. \fP"
.ti -1c
.RI "ANTLR3_API \fBpANTLR3_HASH_TABLE\fP \fBantlr3HashTableNew\fP (\fBANTLR3_UINT32\fP sizeHint)"
.br
.ti -1c
.RI "ANTLR3_API \fBpANTLR3_INT_STREAM\fP \fBantlr3IntStreamNew\fP (void)"
.br
.ti -1c
.RI "ANTLR3_API \fBpANTLR3_INT_TRIE\fP \fBantlr3IntTrieNew\fP (\fBANTLR3_UINT32\fP depth)"
.br
.ti -1c
.RI "ANTLR3_API \fBpANTLR3_LEXER\fP \fBantlr3LexerNew\fP (\fBANTLR3_UINT32\fP sizeHint, \fBpANTLR3_RECOGNIZER_SHARED_STATE\fP state)"
.br
.ti -1c
.RI "ANTLR3_API \fBpANTLR3_LEXER\fP \fBantlr3LexerNewStream\fP (\fBANTLR3_UINT32\fP sizeHint, \fBpANTLR3_INPUT_STREAM\fP input, \fBpANTLR3_RECOGNIZER_SHARED_STATE\fP state)"
.br
.ti -1c
.RI "ANTLR3_API \fBpANTLR3_LIST\fP \fBantlr3ListNew\fP (\fBANTLR3_UINT32\fP sizeHint)"
.br
.ti -1c
.RI "ANTLR3_API void \fBantlr3MTExceptionNew\fP (\fBpANTLR3_BASE_RECOGNIZER\fP recognizer)"
.br
.RI "\fICreates a new Mismatched Token Exception and inserts in the recognizer exception stack. \fP"
.ti -1c
.RI "ANTLR3_API void \fBantlr3MTNExceptionNew\fP (\fBpANTLR3_BASE_RECOGNIZER\fP recognizer)"
.br
.RI "\fICreates a new Mismatched Tree Nde Exception and inserts in the recognizer exception stack. \fP"
.ti -1c
.RI "ANTLR3_API \fBpANTLR3_PARSER\fP \fBantlr3ParserNew\fP (\fBANTLR3_UINT32\fP sizeHint, \fBpANTLR3_RECOGNIZER_SHARED_STATE\fP state)"
.br
.ti -1c
.RI "ANTLR3_API \fBpANTLR3_PARSER\fP \fBantlr3ParserNewStream\fP (\fBANTLR3_UINT32\fP sizeHint, \fBpANTLR3_TOKEN_STREAM\fP tstream, \fBpANTLR3_RECOGNIZER_SHARED_STATE\fP state)"
.br
.ti -1c
.RI "ANTLR3_API \fBpANTLR3_PARSER\fP \fBantlr3ParserNewStreamDbg\fP (\fBANTLR3_UINT32\fP sizeHint, \fBpANTLR3_TOKEN_STREAM\fP tstream, \fBpANTLR3_DEBUG_EVENT_LISTENER\fP dbg, \fBpANTLR3_RECOGNIZER_SHARED_STATE\fP state)"
.br
.ti -1c
.RI "ANTLR3_API void \fBantlr3RecognitionExceptionNew\fP (\fBpANTLR3_BASE_RECOGNIZER\fP recognizer)"
.br
.ti -1c
.RI "ANTLR3_API \fBpANTLR3_REWRITE_RULE_NODE_STREAM\fP \fBantlr3RewriteRuleNODEStreamNewAE\fP (\fBpANTLR3_BASE_TREE_ADAPTOR\fP adaptor, \fBpANTLR3_BASE_RECOGNIZER\fP rec, \fBpANTLR3_UINT8\fP description)"
.br
.ti -1c
.RI "ANTLR3_API \fBpANTLR3_REWRITE_RULE_NODE_STREAM\fP \fBantlr3RewriteRuleNODEStreamNewAEE\fP (\fBpANTLR3_BASE_TREE_ADAPTOR\fP adaptor, \fBpANTLR3_BASE_RECOGNIZER\fP rec, \fBpANTLR3_UINT8\fP description, void *oneElement)"
.br
.ti -1c
.RI "ANTLR3_API \fBpANTLR3_REWRITE_RULE_NODE_STREAM\fP \fBantlr3RewriteRuleNODEStreamNewAEV\fP (\fBpANTLR3_BASE_TREE_ADAPTOR\fP adaptor, \fBpANTLR3_BASE_RECOGNIZER\fP rec, \fBpANTLR3_UINT8\fP description, \fBpANTLR3_VECTOR\fP vector)"
.br
.ti -1c
.RI "ANTLR3_API \fBpANTLR3_REWRITE_RULE_SUBTREE_STREAM\fP \fBantlr3RewriteRuleSubtreeStreamNewAE\fP (\fBpANTLR3_BASE_TREE_ADAPTOR\fP adaptor, \fBpANTLR3_BASE_RECOGNIZER\fP rec, \fBpANTLR3_UINT8\fP description)"
.br
.ti -1c
.RI "ANTLR3_API \fBpANTLR3_REWRITE_RULE_SUBTREE_STREAM\fP \fBantlr3RewriteRuleSubtreeStreamNewAEE\fP (\fBpANTLR3_BASE_TREE_ADAPTOR\fP adaptor, \fBpANTLR3_BASE_RECOGNIZER\fP rec, \fBpANTLR3_UINT8\fP description, void *oneElement)"
.br
.ti -1c
.RI "ANTLR3_API \fBpANTLR3_REWRITE_RULE_SUBTREE_STREAM\fP \fBantlr3RewriteRuleSubtreeStreamNewAEV\fP (\fBpANTLR3_BASE_TREE_ADAPTOR\fP adaptor, \fBpANTLR3_BASE_RECOGNIZER\fP rec, \fBpANTLR3_UINT8\fP description, \fBpANTLR3_VECTOR\fP vector)"
.br
.ti -1c
.RI "ANTLR3_API \fBpANTLR3_REWRITE_RULE_TOKEN_STREAM\fP \fBantlr3RewriteRuleTOKENStreamNewAE\fP (\fBpANTLR3_BASE_TREE_ADAPTOR\fP adaptor, \fBpANTLR3_BASE_RECOGNIZER\fP rec, \fBpANTLR3_UINT8\fP description)"
.br
.ti -1c
.RI "ANTLR3_API \fBpANTLR3_REWRITE_RULE_TOKEN_STREAM\fP \fBantlr3RewriteRuleTOKENStreamNewAEE\fP (\fBpANTLR3_BASE_TREE_ADAPTOR\fP adaptor, \fBpANTLR3_BASE_RECOGNIZER\fP rec, \fBpANTLR3_UINT8\fP description, void *oneElement)"
.br
.ti -1c
.RI "ANTLR3_API \fBpANTLR3_REWRITE_RULE_TOKEN_STREAM\fP \fBantlr3RewriteRuleTOKENStreamNewAEV\fP (\fBpANTLR3_BASE_TREE_ADAPTOR\fP adaptor, \fBpANTLR3_BASE_RECOGNIZER\fP rec, \fBpANTLR3_UINT8\fP description, \fBpANTLR3_VECTOR\fP vector)"
.br
.ti -1c
.RI "ANTLR3_API void \fBantlr3SetCTAPI\fP (\fBpANTLR3_COMMON_TREE\fP tree)"
.br
.ti -1c
.RI "ANTLR3_API void \fBantlr3SetTokenAPI\fP (\fBpANTLR3_COMMON_TOKEN\fP token)"
.br
.ti -1c
.RI "ANTLR3_API void \fBantlr3SetVectorApi\fP (\fBpANTLR3_VECTOR\fP vector, \fBANTLR3_UINT32\fP sizeHint)"
.br
.ti -1c
.RI "ANTLR3_API \fBpANTLR3_STACK\fP \fBantlr3StackNew\fP (\fBANTLR3_UINT32\fP sizeHint)"
.br
.ti -1c
.RI "ANTLR3_API \fBpANTLR3_STRING_FACTORY\fP \fBantlr3StringFactoryNew\fP (\fBANTLR3_UINT32\fP encoding)"
.br
.ti -1c
.RI "ANTLR3_API \fBpANTLR3_INPUT_STREAM\fP \fBantlr3StringStreamNew\fP (\fBpANTLR3_UINT8\fP data, \fBANTLR3_UINT32\fP encoding, \fBANTLR3_UINT32\fP size, \fBpANTLR3_UINT8\fP name)"
.br
.ti -1c
.RI "ANTLR3_API \fBpANTLR3_TOKEN_FACTORY\fP \fBantlr3TokenFactoryNew\fP (\fBpANTLR3_INPUT_STREAM\fP input)"
.br
.ti -1c
.RI "ANTLR3_API \fBpANTLR3_TOPO\fP \fBantlr3TopoNew\fP ()"
.br
.RI "\fIAllocate and initialize a new ANTLR3 topological sorter, which can be used to define edges that identify numerical node indexes that depend on other numerical node indexes, which can then be sorted topologically such that any node is sorted after all its dependent nodes. \fP"
.ti -1c
.RI "ANTLR3_API \fBpANTLR3_TREE_NODE_STREAM\fP \fBantlr3TreeNodeStreamNew\fP ()"
.br
.ti -1c
.RI "ANTLR3_API \fBpANTLR3_TREE_PARSER\fP \fBantlr3TreeParserNewStream\fP (\fBANTLR3_UINT32\fP sizeHint, \fBpANTLR3_COMMON_TREE_NODE_STREAM\fP ctnstream, \fBpANTLR3_RECOGNIZER_SHARED_STATE\fP state)"
.br
.ti -1c
.RI "ANTLR3_API \fBpANTLR3_COMMON_TREE_NODE_STREAM\fP \fBantlr3UnbufTreeNodeStreamNew\fP (\fBpANTLR3_STRING_FACTORY\fP strFactory, \fBANTLR3_UINT32\fP hint)"
.br
.ti -1c
.RI "ANTLR3_API \fBpANTLR3_COMMON_TREE_NODE_STREAM\fP \fBantlr3UnbufTreeNodeStreamNewTree\fP (\fBpANTLR3_BASE_TREE\fP tree, \fBANTLR3_UINT32\fP hint)"
.br
.ti -1c
.RI "ANTLR3_API \fBpANTLR3_VECTOR_FACTORY\fP \fBantlr3VectorFactoryNew\fP (\fBANTLR3_UINT32\fP sizeHint)"
.br
.RI "\fIVector factory creation. \fP"
.ti -1c
.RI "ANTLR3_API \fBpANTLR3_VECTOR\fP \fBantlr3VectorNew\fP (\fBANTLR3_UINT32\fP sizeHint)"
.br
.ti -1c
.RI "ANTLR3_API void \fBfillBufferExt\fP (\fBpANTLR3_COMMON_TOKEN_STREAM\fP tokenStream)"
.br
.in -1c
.SH "Define Documentation"
.PP 
.SS "#define _stat   stat"
.PP
Referenced by antlr3Fsize().
.SS "#define ANTLR3_API"
.PP
.SS "#define ANTLR3_API"
.PP
.SS "#define ANTLR3_AVERAGE"
.PP
.SS "#define ANTLR3_BE   1"
.PP
Indicates Big Endian for encodings where this makes sense. 
.PP
.SS "#define ANTLR3_CALLOC(numEl, elSize)   calloc  (numEl, (size_t)(elSize))"
.PP
Default definition of ANTLR3_CALLOC. 
.PP
You can override this before including \fBantlr3.h\fP if you wish to use your own implementation. 
.PP
Referenced by addEdge(), antlr3BaseRecognizerNew(), antlr3CommonTreeNodeStreamNew(), antlr3CommonTreeNodeStreamNewStream(), antlr3CreateFileStream(), antlr3CreateStringStream(), antlr3DebugListenerNew(), antlr3ExceptionNew(), antlr3IntStreamNew(), antlr3IntTrieNew(), antlr3TreeNodeStreamNew(), grow(), intTrieAdd(), newPool(), and newToken().
.SS "#define ANTLR3_CDECL"
.PP
Referenced by addChild(), antlr3VectorSwap(), newRaw8(), and newRawUTF16().
.SS "#define ANTLR3_CLOSESOCKET   close"
.PP
Referenced by handshake().
.SS "#define ANTLR3_ENC_8BIT   4"
.PP
General latin-1 or other 8 bit encoding scheme such as straight ASCII. 
.PP
Referenced by antlr3StringFactoryNew(), setupInputStream(), stringInit8(), and stringInitUTF16().
.SS "#define ANTLR3_ENC_EBCDIC   64"
.PP
Input is 8 bit EBCDIC (which we convert to 8 bit ASCII on the fly. 
.PP
Referenced by antlr3StringFactoryNew(), and setupInputStream().
.SS "#define ANTLR3_ENC_UTF16   16"
.PP
UTF-16 encoding scheme (which also covers UCS2 as that does not have surrogates). 
.PP
Referenced by antlr3StringFactoryNew(), and setupInputStream().
.SS "#define ANTLR3_ENC_UTF16BE   16 + ANTLR3_BE"
.PP
Referenced by antlr3StringFactoryNew(), and setupInputStream().
.SS "#define ANTLR3_ENC_UTF16LE   16 + ANTLR3_LE"
.PP
Referenced by antlr3StringFactoryNew(), and setupInputStream().
.SS "#define ANTLR3_ENC_UTF32   32"
.PP
UTF-32 encoding scheme (basically straight 32 bit). 
.PP
Referenced by antlr3StringFactoryNew(), and setupInputStream().
.SS "#define ANTLR3_ENC_UTF32BE   32 + ANTLR3_BE"
.PP
Referenced by antlr3StringFactoryNew(), and setupInputStream().
.SS "#define ANTLR3_ENC_UTF32LE   32 + ANTLR3_LE"
.PP
Referenced by antlr3StringFactoryNew(), and setupInputStream().
.SS "#define ANTLR3_ENC_UTF8   8"
.PP
UTF-8 encoding scheme. 
.PP
Referenced by antlr3StringFactoryNew(), and setupInputStream().
.SS "#define ANTLR3_FASTCALL"
.PP
.SS "#define ANTLR3_FPRINTF   fprintf"
.PP
Default definition of fprintf, set this to something other than fprintf before including \fBantlr3.h\fP if your system does not have a fprintf. 
.PP
Note that you can define this to be \fC//\fP without harming the runtime. 
.PP
Referenced by addChild(), alreadyParsedRule(), antlr3ExceptionPrint(), antlr3RecognitionExceptionNew(), becomeRoot(), consumeUntil(), consumeUntilSet(), ConvertUTF16toUTF32(), displayRecognitionError(), dupTok(), dupTreeNode(), getChild(), getChildCount(), getText(), match(), matchAny(), memoize(), mismatch(), mTokens(), recover(), recoverFromMismatchedElement(), recoverFromMismatchedSet(), recoverFromMismatchedToken(), replaceChildren(), setText(), setText8(), setType(), and synpred().
.SS "#define ANTLR3_FREE(ptr)   free    ((void *)(ptr))"
.PP
Default definition of ANTLR3_FREE. 
.PP
You can override this before including \fBantlr3.h\fP if you wish to use your own implementation. 
.PP
Referenced by antlr3BaseRecognizerNew(), antlr3BitsetCopy(), antlr3BitsetFree(), antlr3BitsetNew(), antlr3CommonTreeNodeStreamFree(), antlr3CTSFree(), antlr3EnumFree(), antlr3ExceptionFree(), antlr3HashDelete(), antlr3HashDeleteI(), antlr3HashFree(), antlr3HashRemove(), antlr3HashTableNew(), antlr3InputClose(), antlr3IntTrieNew(), antlr3ListFree(), antlr3SetVectorApi(), antlr3StackFree(), antlr3StringFactoryNew(), antlr3TokenStreamFree(), antlr3TreeNodeStreamFree(), antlr3VectorFree(), closeFactory(), closeVectorFactory(), ctaFree(), expungeRS(), factoryClose(), freeBR(), freeIntNode(), freeLexer(), freeParser(), freeStream(), freeTopo(), grow(), intTrieFree(), replaceChildren(), sortVector(), stringFree(), and toUTF8_UTF16().
.SS "#define ANTLR3_FREE_FUNC   free"
.PP
Default definition of ANTLR3_FREE_FUNC. 
.PP
You can override this before including \fBantlr3.h\fP if you wish to use your own implementation. 
.PP
Referenced by antlr38BitMark().
.SS "#define ANTLR3_FUNC_PTR(ptr)   (void *)((\fBANTLR3_UINT32\fP)(ptr))"
.PP
Referenced by antlr38BitLT(), antlr38BitSeek(), antlr3EnumNew(), antlr3IntTrieNew(), antlr3ListNew(), antlr3StackNew(), antlr3VectorNew(), discardTokenType(), getRuleMemoization(), and setTokenTypeChannel().
.SS "#define ANTLR3_INLINE   inline"
.PP
.SS "#define ANTLR3_LE   2"
.PP
Indicates Little Endian for encoidngs where this makes sense. 
.PP
.SS "#define ANTLR3_LIST_SIZE_HINT   63"
.PP
.SS "#define ANTLR3_MALLOC(request)   malloc  ((size_t)(request))"
.PP
Default definition of ANTLR3_MALLOC. 
.PP
You can override this before including \fBantlr3.h\fP if you wish to use your own implementation. 
.PP
Referenced by antlr38BitMark(), ANTLR3_TREE_ADAPTORNew(), antlr3ArboretumNew(), antlr3BaseRecognizerNew(), antlr3BitsetCopy(), antlr3BitsetNew(), antlr3BitsetToIntList(), antlr3CommonTokenStreamNew(), antlr3CommonTreeNew(), antlr3EnumNew(), antlr3HashPut(), antlr3HashPutI(), antlr3HashTableNew(), antlr3LexerNew(), antlr3ListNew(), antlr3ParserNew(), antlr3read8Bit(), antlr3RewriteRuleElementStreamNewAE(), antlr3SetVectorApi(), antlr3StackNew(), antlr3StringFactoryNew(), antlr3TokenFactoryNew(), antlr3TokenStreamNew(), antlr3TopoNew(), antlr3TreeParserNewStream(), antlr3VectorFactoryNew(), antlr3VectorNew(), antlr3VectorResize(), newPool(), newRaw8(), newRawUTF16(), newSize8(), newSizeUTF16(), sortToArray(), sortVector(), to8_UTF16(), and toUTF8_UTF16().
.SS "#define ANTLR3_MEMCPY(target, source, size)   memcpy((void *)(target), (const void *)(source), (size_t)(size))"
.PP
Default definition of ANTLR3_MEMCPY. 
.PP
You can override this before including \fBantlr3.h\fP if you wish to use your own implementation. 
.PP
Referenced by antlr3BitsetClone(), antlr3BitsetCopy(), antlr3VectorResize(), and grow().
.SS "#define ANTLR3_MEMMOVE(target, source, size)   memmove((void *)(target), (const void *)(source), (size_t)(size))"
.PP
Default definition of ANTLR3_MEMMOVE. 
.PP
You can override this before including \fBantlr3.h\fP if you wish to use your own implementation. 
.PP
Referenced by antlr3VectorDel(), antrl3VectorRemove(), append8(), appendUTF16_UTF16(), insert8(), insertUTF16_8(), insertUTF16_UTF16(), newPtr8(), newPtrUTF16_UTF16(), set8(), and setUTF16_UTF16().
.SS "#define ANTLR3_MEMSET(target, byte, size)   memset((void *)(target), (int)(byte), (size_t)(size))"
.PP
Default definition of ANTLR3_MEMSET. 
.PP
You can override this before including \fBantlr3.h\fP if you wish to use your own implementation. 
.SS "#define ANTLR3_PRINTF   printf"
.PP
Default definition of printf, set this to something other than printf before including \fBantlr3.h\fP if your system does not have a printf. 
.PP
Note that you can define this to be \fC//\fP without harming the runtime. 
.PP
Referenced by ack().
.SS "#define ANTLR3_REALLOC(current, request)   realloc ((void *)(current), (size_t)(request))"
.PP
Default definition of ANTLR3_REALLOC. 
.PP
You can override this before including \fBantlr3.h\fP if you wish to use your own implementation. 
.PP
Referenced by addc8(), addcUTF16(), addEdge(), antlr3VectorResize(), append8(), appendUTF16_8(), appendUTF16_UTF16(), insert8(), insertUTF16_8(), insertUTF16_UTF16(), newPool(), set8(), setUTF16_8(), and setUTF16_UTF16().
.SS "#define ANTLR3_SIZE_HINT   1025"
.PP
.SS "#define ANTLR3_STRDUP(instr)   (\fBpANTLR3_UINT8\fP)(strdup  ((const char *)(instr)))"
.PP
Default definition of ANTLR3_STRDUP. 
.PP
You can override this before including \fBantlr3.h\fP if you wish to use your own implementation. 
.PP
Referenced by antlr3HashPut().
.SS "#define ANTLR3_TRIE_DEPTH   31"
.PP
.SS "#define ANTLR3_UINT32_CAST(ptr)   (\fBANTLR3_UINT32\fP)(ptr)"
.PP
Referenced by antlr3UTF16Substr(), antlr3UTF32Substr(), displayRecognitionError(), getUniqueID(), and toUTF8_UTF16().
.SS "#define ANTLR3_UINT64_CAST(ptr)   (\fBANTLR3_UINT64\fP)((\fBANTLR3_UINT32\fP)(ptr))"
.PP
.SS "#define ANTLR3_UINT64_LIT(lit)   lit##ULL"
.PP
.SS "#define INVALID_SOCKET   ((\fBSOCKET\fP)-1)"
.PP
Referenced by handshake().
.SH "Typedef Documentation"
.PP 
.SS "typedef uint64_t \fBANTLR3_BITWORD\fP"
.PP
.SS "typedef uint32_t \fBANTLR3_BOOLEAN\fP"
.PP
.SS "typedef int32_t \fBANTLR3_CHAR\fP"
.PP
.SS "typedef FILE* \fBANTLR3_FDSC\fP"
.PP
.SS "typedef struct stat \fBANTLR3_FSTAT_STRUCT\fP"
.PP
.SS "typedef int16_t \fBANTLR3_INT16\fP"
.PP
.SS "typedef int32_t \fBANTLR3_INT32\fP"
.PP
.SS "typedef int64_t \fBANTLR3_INT64\fP"
.PP
.SS "typedef int8_t \fBANTLR3_INT8\fP"
.PP
.SS "typedef \fBANTLR3_UINT32\fP \fBANTLR3_INTKEY\fP"
.PP
.SS "typedef \fBANTLR3_INT32\fP \fBANTLR3_MARKER\fP"
.PP
.SS "typedef size_t \fBANTLR3_SALENT\fP"
.PP
.SS "typedef struct sockaddr_in \fBANTLR3_SOCKADDRT\fP"
.PP
.SS "typedef uint32_t \fBANTLR3_UCHAR\fP"
.PP
.SS "typedef uint16_t \fBANTLR3_UINT16\fP"
.PP
.SS "typedef uint32_t \fBANTLR3_UINT32\fP"
.PP
.SS "typedef uint64_t \fBANTLR3_UINT64\fP"
.PP
.SS "typedef uint8_t \fBANTLR3_UINT8\fP"
.PP
.SS "typedef uint64_t * \fBpANTLR3_BITWORD\fP"
.PP
.SS "typedef uint32_t * \fBpANTLR3_BOOLEAN\fP"
.PP
.SS "typedef int32_t * \fBpANTLR3_CHAR\fP"
.PP
.SS "typedef int16_t * \fBpANTLR3_INT16\fP"
.PP
.SS "typedef int32_t * \fBpANTLR3_INT32\fP"
.PP
.SS "typedef int64_t * \fBpANTLR3_INT64\fP"
.PP
.SS "typedef int8_t * \fBpANTLR3_INT8\fP"
.PP
.SS "typedef struct sockaddr* \fBpANTLR3_SOCKADDRC\fP"
.PP
.SS "typedef struct sockaddr_in * \fBpANTLR3_SOCKADDRT\fP"
.PP
.SS "typedef uint32_t * \fBpANTLR3_UCHAR\fP"
.PP
.SS "typedef uint16_t * \fBpANTLR3_UINT16\fP"
.PP
.SS "typedef uint32_t * \fBpANTLR3_UINT32\fP"
.PP
.SS "typedef uint64_t * \fBpANTLR3_UINT64\fP"
.PP
.SS "typedef uint8_t * \fBpANTLR3_UINT8\fP"
.PP
.SS "typedef int \fBSOCKET\fP"
.PP
.SH "Function Documentation"
.PP 
.SS "ANTLR3_API \fBpANTLR3_BASE_TREE_ADAPTOR\fP ANTLR3_TREE_ADAPTORDebugNew (\fBpANTLR3_STRING_FACTORY\fP strFactory, \fBpANTLR3_DEBUG_EVENT_LISTENER\fP debugger)"
.PP
Debugging version of the tree adaptor (not normally called as generated code calls setDebugEventListener instead which changes a normal token stream to a debugging stream and means that a user's instantiation code does not need to be changed just to debug with AW. 
.PP
References ANTLR3_TREE_ADAPTORNew(), antlr3BaseTreeAdaptorInit(), ANTLR3_BASE_TREE_ADAPTOR_struct::create, dbgCreate(), dbgSetTokenBoundaries(), and ANTLR3_BASE_TREE_ADAPTOR_struct::setTokenBoundaries.
.SS "ANTLR3_API \fBpANTLR3_BASE_TREE_ADAPTOR\fP ANTLR3_TREE_ADAPTORNew (\fBpANTLR3_STRING_FACTORY\fP strFactory)"
.PP
Create a new tree adaptor. 
.PP
Note that despite the fact that this is creating a new COMMON_TREE adaptor, we return the address of the BASE_TREE interface, as should any other adaptor that wishes to be used as the tree element of a tree parse/build. It needs to be given the address of a valid string factory as we do not know what the originating input stream encoding type was. This way we can rely on just using the original input stream's string factory or one of the correct type which the user supplies us. 
.PP
References ANTLR3_MALLOC, antlr3ArboretumNew(), antlr3BaseTreeAdaptorInit(), antlr3TokenFactoryNew(), ANTLR3_COMMON_TREE_ADAPTOR_struct::arboretum, ANTLR3_COMMON_TREE_ADAPTOR_struct::baseAdaptor, create(), ANTLR3_BASE_TREE_ADAPTOR_struct::create, createToken(), ANTLR3_BASE_TREE_ADAPTOR_struct::createToken, createTokenFromToken(), ANTLR3_BASE_TREE_ADAPTOR_struct::createTokenFromToken, ctaFree(), deleteChild(), ANTLR3_BASE_TREE_ADAPTOR_struct::deleteChild, dupNode(), ANTLR3_BASE_TREE_ADAPTOR_struct::dupNode, errorNode(), ANTLR3_BASE_TREE_ADAPTOR_struct::errorNode, ANTLR3_BASE_TREE_ADAPTOR_struct::free, getChild(), ANTLR3_BASE_TREE_ADAPTOR_struct::getChild, getChildCount(), ANTLR3_BASE_TREE_ADAPTOR_struct::getChildCount, getChildIndex(), ANTLR3_BASE_TREE_ADAPTOR_struct::getChildIndex, getParent(), ANTLR3_BASE_TREE_ADAPTOR_struct::getParent, getText(), ANTLR3_BASE_TREE_ADAPTOR_struct::getText, getTokenStartIndex(), ANTLR3_BASE_TREE_ADAPTOR_struct::getTokenStartIndex, getTokenStopIndex(), ANTLR3_BASE_TREE_ADAPTOR_struct::getTokenStopIndex, getType(), ANTLR3_BASE_TREE_ADAPTOR_struct::getType, replaceChildren(), ANTLR3_BASE_TREE_ADAPTOR_struct::replaceChildren, setChild(), ANTLR3_BASE_TREE_ADAPTOR_struct::setChild, setChildIndex(), ANTLR3_BASE_TREE_ADAPTOR_struct::setChildIndex, setDebugEventListener(), ANTLR3_BASE_TREE_ADAPTOR_struct::setDebugEventListener, setParent(), ANTLR3_BASE_TREE_ADAPTOR_struct::setParent, setTokenBoundaries(), ANTLR3_BASE_TREE_ADAPTOR_struct::setTokenBoundaries, ANTLR3_BASE_TREE_ADAPTOR_struct::strFactory, ANTLR3_COMMON_TOKEN_struct::strFactory, ANTLR3_BASE_TREE_ADAPTOR_struct::super, ANTLR3_BASE_TREE_ADAPTOR_struct::tokenFactory, and ANTLR3_TOKEN_FACTORY_struct::unTruc.
.PP
Referenced by ANTLR3_TREE_ADAPTORDebugNew(), and antlr3CommonTreeNodeStreamNew().
.SS "ANTLR3_API \fBpANTLR3_ARBORETUM\fP antlr3ArboretumNew (\fBpANTLR3_STRING_FACTORY\fP factory)"
.PP
References ANTLR3_MALLOC, antlr3SetCTAPI(), antlr3StackNew(), antlr3VectorFactoryNew(), ANTLR3_COMMON_TREE_struct::baseTree, ANTLR3_ARBORETUM_struct::close, ANTLR3_COMMON_TREE_struct::factory, factoryClose(), ANTLR3_TREE_PARSER_struct::free, newFromToken(), ANTLR3_ARBORETUM_struct::newFromToken, newFromTree(), ANTLR3_ARBORETUM_struct::newFromTree, newPool(), newPoolTree(), ANTLR3_ARBORETUM_struct::newTree, ANTLR3_ARBORETUM_struct::nilStack, ANTLR3_ARBORETUM_struct::pools, ANTLR3_BASE_TREE_struct::strFactory, ANTLR3_ARBORETUM_struct::thisPool, ANTLR3_ARBORETUM_struct::unTruc, and ANTLR3_ARBORETUM_struct::vFactory.
.PP
Referenced by ANTLR3_TREE_ADAPTORNew().
.SS "ANTLR3_API void antlr3BaseTreeAdaptorInit (\fBpANTLR3_BASE_TREE_ADAPTOR\fP adaptor, \fBpANTLR3_DEBUG_EVENT_LISTENER\fP debugger)"
.PP
Given a pointer to a base tree adaptor structure (which is usually embedded in the super class the implements the tree adaptor used in the parse), initialize its function pointers and so on. 
.PP
References ANTLR3_DEBUG_EVENT_LISTENER_struct::adaptor, addChild(), ANTLR3_BASE_TREE_ADAPTOR_struct::addChild, addChildToken(), ANTLR3_BASE_TREE_ADAPTOR_struct::addChildToken, becomeRoot(), ANTLR3_BASE_TREE_ADAPTOR_struct::becomeRoot, becomeRootToken(), ANTLR3_BASE_TREE_ADAPTOR_struct::becomeRootToken, createTypeText(), ANTLR3_BASE_TREE_ADAPTOR_struct::createTypeText, createTypeToken(), ANTLR3_BASE_TREE_ADAPTOR_struct::createTypeToken, createTypeTokenText(), ANTLR3_BASE_TREE_ADAPTOR_struct::createTypeTokenText, dbgAddChild(), dbgAddChildToken(), dbgBecomeRoot(), dbgBecomeRootToken(), dbgCreateTypeText(), dbgCreateTypeToken(), dbgCreateTypeTokenText(), dbgDupTree(), dbgNil(), dupTree(), ANTLR3_BASE_TREE_ADAPTOR_struct::dupTree, dupTreeTT(), ANTLR3_BASE_TREE_ADAPTOR_struct::dupTreeTT, getChild(), ANTLR3_BASE_TREE_ADAPTOR_struct::getChild, getChildCount(), ANTLR3_BASE_TREE_ADAPTOR_struct::getChildCount, getText(), ANTLR3_BASE_TREE_ADAPTOR_struct::getText, getType(), ANTLR3_BASE_TREE_ADAPTOR_struct::getType, getUniqueID(), ANTLR3_BASE_TREE_ADAPTOR_struct::getUniqueID, isNilNode(), ANTLR3_BASE_TREE_ADAPTOR_struct::isNilNode, makeDot(), ANTLR3_BASE_TREE_ADAPTOR_struct::makeDot, nilNode(), ANTLR3_BASE_TREE_ADAPTOR_struct::nilNode, rulePostProcessing(), ANTLR3_BASE_TREE_ADAPTOR_struct::rulePostProcessing, setText(), ANTLR3_BASE_TREE_ADAPTOR_struct::setText, setText8(), ANTLR3_BASE_TREE_ADAPTOR_struct::setText8, setType(), and ANTLR3_BASE_TREE_ADAPTOR_struct::setType.
.PP
Referenced by ANTLR3_TREE_ADAPTORDebugNew(), ANTLR3_TREE_ADAPTORNew(), and setDebugEventListener().
.SS "ANTLR3_API \fBpANTLR3_BASE_TREE\fP antlr3BaseTreeNew (\fBpANTLR3_BASE_TREE\fP tree)"
.PP
References addChild(), ANTLR3_BASE_TREE_struct::addChild, addChildren(), ANTLR3_BASE_TREE_struct::addChildren, ANTLR3_BASE_TREE_struct::children, deleteChild(), ANTLR3_BASE_TREE_struct::deleteChild, dupTree(), ANTLR3_BASE_TREE_struct::dupTree, freshenPACIndexes(), ANTLR3_BASE_TREE_struct::freshenPACIndexes, freshenPACIndexesAll(), ANTLR3_BASE_TREE_struct::freshenPACIndexesAll, getCharPositionInLine(), ANTLR3_BASE_TREE_struct::getCharPositionInLine, getChild(), ANTLR3_BASE_TREE_struct::getChild, getChildCount(), ANTLR3_BASE_TREE_struct::getChildCount, getFirstChildWithType(), ANTLR3_BASE_TREE_struct::getFirstChildWithType, getLine(), ANTLR3_BASE_TREE_struct::getLine, replaceChildren(), ANTLR3_BASE_TREE_struct::replaceChildren, setChild(), ANTLR3_BASE_TREE_struct::setChild, ANTLR3_BASE_TREE_struct::strFactory, toStringTree(), and ANTLR3_BASE_TREE_struct::toStringTree.
.PP
Referenced by antlr3SetCTAPI().
.SS "ANTLR3_API \fBpANTLR3_BITSET\fP antlr3BitsetCopy (\fBpANTLR3_BITSET_LIST\fP blist)"
.PP
References ANTLR3_FREE, ANTLR3_MALLOC, ANTLR3_MEMCPY, ANTLR3_BITSET_LIST_struct::bits, ANTLR3_BITSET_struct::blist, and ANTLR3_BITSET_LIST_struct::length.
.SS "ANTLR3_API \fBpANTLR3_BITSET\fP antlr3BitsetList (\fBpANTLR3_HASH_TABLE\fP list)"
.PP
References ANTLR3_BITSET_struct::add, ANTLR3_SUCCESS, antlr3BitsetNew(), antlr3EnumNew(), ANTLR3_HASH_ENUM_struct::free, and ANTLR3_HASH_ENUM_struct::next.
.PP
Referenced by getTokensList().
.SS "ANTLR3_API \fBpANTLR3_BITSET\fP antlr3BitsetLoad (\fBpANTLR3_BITSET_LIST\fP inBits)"
.PP
Creates a new bitset with at least one 64 bit bset of bits, but as many 64 bit sets as are required. 
.PP
\fBParameters:\fP
.RS 4
\fIbset\fP A variable number of bits to add to the set, ending in -1 (impossible bit).
.RE
.PP
\fBReturns:\fP
.RS 4
A new bit set with all of the specified bitmaps in it and the API initialized.
.RE
.PP
Call as:
.IP "\(bu" 2
pANTLR3_BITSET = antlrBitsetLoad(bset, bset11, ..., -1);
.IP "\(bu" 2
pANTLR3_BITSET = antlrBitsetOf(-1); Create empty bitset
.PP
.PP
\fBRemarks:\fP
.RS 4
Stdargs function - must supply -1 as last paremeter, which is NOT added to the set. 
.RE
.PP

.PP
References antlr3BitsetNew(), ANTLR3_BITSET_LIST_struct::bits, ANTLR3_BITSET_struct::blist, ANTLR3_BITSET_struct::grow, and ANTLR3_BITSET_LIST_struct::length.
.PP
Referenced by combineFollows(), displayRecognitionError(), mismatchIsMissingToken(), and recoverFromMismatchedElement().
.SS "ANTLR3_API \fBpANTLR3_BITSET\fP antlr3BitsetNew (\fBANTLR3_UINT32\fP numBits)"
.PP
References ANTLR3_BITSET_BITS, ANTLR3_BITSET_LOG_BITS, ANTLR3_FREE, ANTLR3_MALLOC, antlr3BitsetSetAPI(), ANTLR3_BITSET_LIST_struct::bits, ANTLR3_BITSET_struct::blist, and ANTLR3_BITSET_LIST_struct::length.
.PP
Referenced by addEdge(), antlr3BitsetClone(), antlr3BitsetList(), antlr3BitsetLoad(), antlr3BitsetOf(), combineFollows(), and sortToArray().
.SS "ANTLR3_API \fBpANTLR3_BITSET\fP antlr3BitsetOf (\fBANTLR3_INT32\fP bit,  ...)"
.PP
Creates a new bitset with at least one element, but as many elements are required. 
.PP
\fBParameters:\fP
.RS 4
\fIbit\fP A variable number of bits to add to the set, ending in -1 (impossible bit).
.RE
.PP
\fBReturns:\fP
.RS 4
A new bit set with all of the specified elements added into it.
.RE
.PP
Call as:
.IP "\(bu" 2
pANTLR3_BITSET = antlrBitsetOf(n, n1, n2, -1);
.IP "\(bu" 2
pANTLR3_BITSET = antlrBitsetOf(-1); Create empty bitset
.PP
.PP
\fBRemarks:\fP
.RS 4
Stdargs function - must supply -1 as last paremeter, which is NOT added to the set. 
.RE
.PP

.PP
References antlr3BitsetAdd(), and antlr3BitsetNew().
.PP
Referenced by getTokensType().
.SS "ANTLR3_API void antlr3BitsetSetAPI (\fBpANTLR3_BITSET\fP bitset)"
.PP
References ANTLR3_BITSET_struct::add, antlr3BitsetAdd(), antlr3BitsetClone(), antlr3BitsetEquals(), antlr3BitsetFree(), antlr3BitsetIsNil(), antlr3BitsetMember(), antlr3BitsetNumBits(), antlr3BitsetOR(), antlr3BitsetORInPlace(), antlr3BitsetRemove(), antlr3BitsetSize(), antlr3BitsetToIntList(), ANTLR3_BITSET_struct::bor, ANTLR3_BITSET_struct::borInPlace, ANTLR3_BITSET_struct::clone, ANTLR3_BITSET_struct::equals, ANTLR3_BITSET_struct::free, grow(), ANTLR3_BITSET_struct::grow, ANTLR3_BITSET_struct::isMember, ANTLR3_BITSET_struct::isNilNode, ANTLR3_BITSET_struct::numBits, ANTLR3_BITSET_struct::remove, ANTLR3_BITSET_struct::size, and ANTLR3_BITSET_struct::toIntList.
.PP
Referenced by antlr3BitsetNew().
.SS "ANTLR3_API \fBANTLR3_UCHAR\fP antlr3c8toAntlrc (\fBANTLR3_INT8\fP inc)"
.PP
Provides basic utility functions to convert between the various Unicode character conversions. 
.PP
There are of course various packages that could be used instead of these functions, but then the Antlr 3 C runtime would be dependant on the particular package. Using ICU for this is a good idea if your project is already dependant on it. Convert 8 bit character to ANTLR char form.
.PP
\fBParameters:\fP
.RS 4
\fIinc\fP Input character to transform from 8 bit form. 
.RE
.PP
\fBReturns:\fP
.RS 4
ANTLR3_UCHAR encoding of the character. 
.RE
.PP

.SS "ANTLR3_API \fBpANTLR3_COMMON_TOKEN_STREAM\fP antlr3CommonTokenDebugStreamSourceNew (\fBANTLR3_UINT32\fP hint, \fBpANTLR3_TOKEN_SOURCE\fP source, \fBpANTLR3_DEBUG_EVENT_LISTENER\fP debugger)"
.PP
References ANTLR3_INT_STREAM_struct::_LA, ANTLR3_TOKEN_STREAM_struct::_LT, ANTLR3_FALSE, antlr3CommonTokenStreamSourceNew(), ANTLR3_INT_STREAM_struct::consume, dbgConsume(), dbgLA(), dbgMark(), dbgRewindLast(), dbgRewindStream(), dbgSeek(), dbgTokLT(), ANTLR3_TOKEN_STREAM_struct::debugger, ANTLR3_TOKEN_STREAM_struct::initialStreamState, ANTLR3_TOKEN_STREAM_struct::istream, ANTLR3_INT_STREAM_struct::mark, ANTLR3_INT_STREAM_struct::rewind, ANTLR3_INT_STREAM_struct::rewindLast, ANTLR3_INT_STREAM_struct::seek, and ANTLR3_COMMON_TOKEN_STREAM_struct::tstream.
.SS "ANTLR3_API \fBpANTLR3_COMMON_TOKEN\fP antlr3CommonTokenNew (\fBANTLR3_UINT32\fP ttype)"
.PP
References newToken(), and ANTLR3_COMMON_TOKEN_struct::setType.
.PP
Referenced by antlr3CommonTreeNodeStreamNew().
.SS "ANTLR3_API \fBpANTLR3_COMMON_TOKEN_STREAM\fP antlr3CommonTokenStreamNew (\fBANTLR3_UINT32\fP hint)"
.PP
References _LA(), ANTLR3_INT_STREAM_struct::_LA, ANTLR3_TOKEN_STREAM_struct::_LT, ANTLR3_MALLOC, ANTLR3_TOKENSTREAM, antlr3IntStreamNew(), antlr3TokenStreamNew(), antlr3VectorNew(), consume(), ANTLR3_INT_STREAM_struct::consume, discardOffChannel(), ANTLR3_COMMON_TOKEN_STREAM_struct::discardOffChannelToks, discardTokenType(), ANTLR3_COMMON_TOKEN_STREAM_struct::discardTokenType, ANTLR3_TOKEN_STREAM_struct::get, getSourceName(), ANTLR3_INT_STREAM_struct::getSourceName, getTokenRange(), ANTLR3_COMMON_TOKEN_STREAM_struct::getTokenRange, getTokens(), ANTLR3_COMMON_TOKEN_STREAM_struct::getTokens, getTokensList(), ANTLR3_COMMON_TOKEN_STREAM_struct::getTokensList, getTokenSource(), ANTLR3_TOKEN_STREAM_struct::getTokenSource, getTokensSet(), ANTLR3_COMMON_TOKEN_STREAM_struct::getTokensSet, getTokensType(), ANTLR3_COMMON_TOKEN_STREAM_struct::getTokensType, ANTLR3_INT_STREAM_struct::index, ANTLR3_TOKEN_STREAM_struct::istream, mark(), ANTLR3_INT_STREAM_struct::mark, ANTLR3_COMMON_TOKEN_STREAM_struct::p, release(), ANTLR3_INT_STREAM_struct::release, reset(), ANTLR3_COMMON_TOKEN_STREAM_struct::reset, ANTLR3_INT_STREAM_struct::rewind, rewindLast(), ANTLR3_INT_STREAM_struct::rewindLast, rewindStream(), seek(), ANTLR3_INT_STREAM_struct::seek, setDebugListener(), ANTLR3_TOKEN_STREAM_struct::setDebugListener, setTokenSource(), ANTLR3_TOKEN_STREAM_struct::setTokenSource, setTokenTypeChannel(), ANTLR3_COMMON_TOKEN_STREAM_struct::setTokenTypeChannel, size(), ANTLR3_INT_STREAM_struct::size, ANTLR3_INT_STREAM_struct::super, ANTLR3_TOKEN_STREAM_struct::super, tindex(), ANTLR3_COMMON_TOKEN_STREAM_struct::tokens, tokLT(), toString(), ANTLR3_TOKEN_STREAM_struct::toString, toStringSS(), ANTLR3_TOKEN_STREAM_struct::toStringSS, toStringTT(), ANTLR3_TOKEN_STREAM_struct::toStringTT, ANTLR3_COMMON_TOKEN_STREAM_struct::tstream, and ANTLR3_INT_STREAM_struct::type.
.PP
Referenced by antlr3CommonTokenStreamSourceNew().
.SS "ANTLR3_API \fBpANTLR3_COMMON_TOKEN_STREAM\fP antlr3CommonTokenStreamSourceNew (\fBANTLR3_UINT32\fP hint, \fBpANTLR3_TOKEN_SOURCE\fP source)"
.PP
References ANTLR3_FALSE, ANTLR3_TOKEN_DEFAULT_CHANNEL, antlr3CommonTokenStreamNew(), antlr3CTSFree(), ANTLR3_COMMON_TOKEN_STREAM_struct::channel, ANTLR3_COMMON_TOKEN_STREAM_struct::channelOverrides, ANTLR3_COMMON_TOKEN_STREAM_struct::discardOffChannel, ANTLR3_COMMON_TOKEN_STREAM_struct::discardSet, ANTLR3_COMMON_TOKEN_STREAM_struct::free, ANTLR3_TOKEN_STREAM_struct::setTokenSource, and ANTLR3_COMMON_TOKEN_STREAM_struct::tstream.
.PP
Referenced by antlr3CommonTokenDebugStreamSourceNew().
.SS "ANTLR3_API \fBpANTLR3_COMMON_TREE\fP antlr3CommonTreeNew (void)"
.PP
References ANTLR3_MALLOC, and antlr3SetCTAPI().
.PP
Referenced by antlr3CommonTreeNewFromToken().
.SS "ANTLR3_API \fBpANTLR3_COMMON_TREE\fP antlr3CommonTreeNewFromToken (\fBpANTLR3_COMMON_TOKEN\fP tree)"
.PP
References antlr3CommonTreeNew(), and ANTLR3_COMMON_TREE_struct::token.
.SS "ANTLR3_API \fBpANTLR3_COMMON_TREE\fP antlr3CommonTreeNewFromTree (\fBpANTLR3_COMMON_TREE\fP tree)"
.PP
.SS "ANTLR3_API \fBpANTLR3_COMMON_TREE_NODE_STREAM\fP antlr3CommonTreeNodeStreamNew (\fBpANTLR3_STRING_FACTORY\fP strFactory, \fBANTLR3_UINT32\fP hint)"
.PP
References _LA(), ANTLR3_INT_STREAM_struct::_LA, _LT(), ANTLR3_TREE_NODE_STREAM_struct::_LT, ANTLR3_COMMON_TREE_NODE_STREAM_struct::adaptor, addNavigationNode(), ANTLR3_COMMON_TREE_NODE_STREAM_struct::addNavigationNode, ANTLR3_CALLOC, ANTLR3_COMMONTREENODE, ANTLR3_FALSE, ANTLR3_TEXT_CHARP, ANTLR3_TOKEN_DOWN, ANTLR3_TOKEN_EOF, ANTLR3_TOKEN_INVALID, ANTLR3_TOKEN_UP, ANTLR3_TREE_ADAPTORNew(), antlr3CommonTokenNew(), antlr3CommonTreeNodeStreamFree(), antlr3IntStreamNew(), antlr3SetCTAPI(), antlr3StackNew(), antlr3TreeNodeStreamNew(), antlr3VectorNew(), ANTLR3_COMMON_TOKEN_struct::chars, consume(), ANTLR3_INT_STREAM_struct::consume, ANTLR3_TREE_NODE_STREAM_struct::ctns, DEFAULT_INITIAL_BUFFER_SIZE, ANTLR3_COMMON_TREE_NODE_STREAM_struct::DOWN, ANTLR3_COMMON_TREE_NODE_STREAM_struct::EOF_NODE, ANTLR3_TREE_NODE_STREAM_struct::free, ANTLR3_BASE_TREE_ADAPTOR_struct::free, ANTLR3_COMMON_TREE_NODE_STREAM_struct::free, ANTLR3_TREE_NODE_STREAM_struct::get, getTreeAdaptor(), ANTLR3_TREE_NODE_STREAM_struct::getTreeAdaptor, getTreeSource(), ANTLR3_TREE_NODE_STREAM_struct::getTreeSource, hasUniqueNavigationNodes(), ANTLR3_COMMON_TREE_NODE_STREAM_struct::hasUniqueNavigationNodes, ANTLR3_INT_STREAM_struct::index, INITIAL_CALL_STACK_SIZE, ANTLR3_COMMON_TREE_NODE_STREAM_struct::INVALID_NODE, ANTLR3_TREE_NODE_STREAM_struct::istream, mark(), ANTLR3_INT_STREAM_struct::mark, ANTLR3_COMMON_TREE_NODE_STREAM_struct::markers, newDownNode(), ANTLR3_COMMON_TREE_NODE_STREAM_struct::newDownNode, newUpNode(), ANTLR3_COMMON_TREE_NODE_STREAM_struct::newUpNode, ANTLR3_COMMON_TREE_NODE_STREAM_struct::nodes, ANTLR3_COMMON_TREE_NODE_STREAM_struct::nodeStack, ANTLR3_COMMON_TREE_NODE_STREAM_struct::p, pop(), ANTLR3_COMMON_TREE_NODE_STREAM_struct::pop, push(), ANTLR3_COMMON_TREE_NODE_STREAM_struct::push, release(), ANTLR3_INT_STREAM_struct::release, reset(), ANTLR3_COMMON_TREE_NODE_STREAM_struct::reset, ANTLR3_INT_STREAM_struct::rewind, rewindLast(), ANTLR3_INT_STREAM_struct::rewindLast, rewindMark(), seek(), ANTLR3_INT_STREAM_struct::seek, setUniqueNavigationNodes(), ANTLR3_TREE_NODE_STREAM_struct::setUniqueNavigationNodes, size(), ANTLR3_INT_STREAM_struct::size, ANTLR3_COMMON_TOKEN_struct::strFactory, ANTLR3_COMMON_TREE_NODE_STREAM_struct::stringFactory, ANTLR3_COMMON_TREE_NODE_STREAM_struct::super, ANTLR3_INT_STREAM_struct::super, ANTLR3_COMMON_TOKEN_struct::textState, tindex(), ANTLR3_COMMON_TREE_NODE_STREAM_struct::tnstream, ANTLR3_COMMON_TREE_struct::token, ANTLR3_COMMON_TOKEN_struct::tokText, toString(), ANTLR3_TREE_NODE_STREAM_struct::toString, toStringSS(), ANTLR3_TREE_NODE_STREAM_struct::toStringSS, toStringWork(), ANTLR3_TREE_NODE_STREAM_struct::toStringWork, ANTLR3_INT_STREAM_struct::type, ANTLR3_COMMON_TREE_NODE_STREAM_struct::uniqueNavigationNodes, and ANTLR3_COMMON_TREE_NODE_STREAM_struct::UP.
.PP
Referenced by antlr3CommonTreeNodeStreamNewTree().
.SS "ANTLR3_API \fBpANTLR3_COMMON_TREE_NODE_STREAM\fP antlr3CommonTreeNodeStreamNewStream (\fBpANTLR3_COMMON_TREE_NODE_STREAM\fP inStream)"
.PP
References _LA(), ANTLR3_INT_STREAM_struct::_LA, _LT(), ANTLR3_TREE_NODE_STREAM_struct::_LT, ANTLR3_COMMON_TREE_NODE_STREAM_struct::adaptor, addNavigationNode(), ANTLR3_COMMON_TREE_NODE_STREAM_struct::addNavigationNode, ANTLR3_CALLOC, ANTLR3_COMMONTREENODE, ANTLR3_FALSE, ANTLR3_TRUE, antlr3CommonTreeNodeStreamFree(), antlr3IntStreamNew(), antlr3SetCTAPI(), antlr3TreeNodeStreamNew(), antlr3VectorNew(), consume(), ANTLR3_INT_STREAM_struct::consume, ANTLR3_TREE_NODE_STREAM_struct::ctns, DEFAULT_INITIAL_BUFFER_SIZE, ANTLR3_COMMON_TREE_NODE_STREAM_struct::DOWN, ANTLR3_COMMON_TREE_NODE_STREAM_struct::EOF_NODE, ANTLR3_TREE_NODE_STREAM_struct::free, ANTLR3_COMMON_TREE_NODE_STREAM_struct::free, ANTLR3_TREE_NODE_STREAM_struct::get, getLookaheadSize(), ANTLR3_COMMON_TREE_NODE_STREAM_struct::getLookaheadSize, getTreeAdaptor(), ANTLR3_TREE_NODE_STREAM_struct::getTreeAdaptor, getTreeSource(), ANTLR3_TREE_NODE_STREAM_struct::getTreeSource, hasUniqueNavigationNodes(), ANTLR3_COMMON_TREE_NODE_STREAM_struct::hasUniqueNavigationNodes, ANTLR3_INT_STREAM_struct::index, ANTLR3_COMMON_TREE_NODE_STREAM_struct::INVALID_NODE, ANTLR3_COMMON_TREE_NODE_STREAM_struct::isRewriter, ANTLR3_TREE_NODE_STREAM_struct::istream, mark(), ANTLR3_INT_STREAM_struct::mark, ANTLR3_COMMON_TREE_NODE_STREAM_struct::markers, newDownNode(), ANTLR3_COMMON_TREE_NODE_STREAM_struct::newDownNode, newUpNode(), ANTLR3_COMMON_TREE_NODE_STREAM_struct::newUpNode, ANTLR3_COMMON_TREE_NODE_STREAM_struct::nodes, ANTLR3_COMMON_TREE_NODE_STREAM_struct::nodeStack, ANTLR3_COMMON_TREE_NODE_STREAM_struct::p, pop(), ANTLR3_COMMON_TREE_NODE_STREAM_struct::pop, push(), ANTLR3_COMMON_TREE_NODE_STREAM_struct::push, release(), ANTLR3_INT_STREAM_struct::release, reset(), ANTLR3_COMMON_TREE_NODE_STREAM_struct::reset, ANTLR3_INT_STREAM_struct::rewind, rewindLast(), ANTLR3_INT_STREAM_struct::rewindLast, rewindMark(), ANTLR3_COMMON_TREE_NODE_STREAM_struct::root, seek(), ANTLR3_INT_STREAM_struct::seek, setUniqueNavigationNodes(), ANTLR3_TREE_NODE_STREAM_struct::setUniqueNavigationNodes, size(), ANTLR3_INT_STREAM_struct::size, ANTLR3_COMMON_TOKEN_struct::strFactory, ANTLR3_COMMON_TREE_NODE_STREAM_struct::stringFactory, ANTLR3_COMMON_TREE_NODE_STREAM_struct::super, ANTLR3_INT_STREAM_struct::super, tindex(), ANTLR3_COMMON_TREE_NODE_STREAM_struct::tnstream, ANTLR3_COMMON_TREE_struct::token, toString(), ANTLR3_TREE_NODE_STREAM_struct::toString, toStringSS(), ANTLR3_TREE_NODE_STREAM_struct::toStringSS, toStringWork(), ANTLR3_TREE_NODE_STREAM_struct::toStringWork, ANTLR3_INT_STREAM_struct::type, ANTLR3_COMMON_TREE_NODE_STREAM_struct::uniqueNavigationNodes, and ANTLR3_COMMON_TREE_NODE_STREAM_struct::UP.
.SS "ANTLR3_API \fBpANTLR3_COMMON_TREE_NODE_STREAM\fP antlr3CommonTreeNodeStreamNewTree (\fBpANTLR3_BASE_TREE\fP tree, \fBANTLR3_UINT32\fP hint)"
.PP
References antlr3CommonTreeNodeStreamNew(), ANTLR3_COMMON_TREE_NODE_STREAM_struct::root, and ANTLR3_BASE_TREE_struct::strFactory.
.SS "ANTLR3_API \fBpANTLR3_DEBUG_EVENT_LISTENER\fP antlr3DebugListenerNew ()"
.PP
Create and initialize a new debug event listener that can be connected to by ANTLRWorks and any other debugger via a socket. 
.PP
References addChild(), ANTLR3_DEBUG_EVENT_LISTENER_struct::addChild, ANTLR3_CALLOC, becomeRoot(), ANTLR3_DEBUG_EVENT_LISTENER_struct::becomeRoot, beginBacktrack(), ANTLR3_DEBUG_EVENT_LISTENER_struct::beginBacktrack, beginResync(), ANTLR3_DEBUG_EVENT_LISTENER_struct::beginResync, commence(), ANTLR3_DEBUG_EVENT_LISTENER_struct::commence, consumeHiddenToken(), ANTLR3_DEBUG_EVENT_LISTENER_struct::consumeHiddenToken, consumeNode(), ANTLR3_DEBUG_EVENT_LISTENER_struct::consumeNode, consumeToken(), ANTLR3_DEBUG_EVENT_LISTENER_struct::consumeToken, createNode(), ANTLR3_DEBUG_EVENT_LISTENER_struct::createNode, createNodeTok(), ANTLR3_DEBUG_EVENT_LISTENER_struct::createNodeTok, DEFAULT_DEBUGGER_PORT, endBacktrack(), ANTLR3_DEBUG_EVENT_LISTENER_struct::endBacktrack, endResync(), ANTLR3_DEBUG_EVENT_LISTENER_struct::endResync, enterAlt(), ANTLR3_DEBUG_EVENT_LISTENER_struct::enterAlt, enterDecision(), ANTLR3_DEBUG_EVENT_LISTENER_struct::enterDecision, enterRule(), ANTLR3_DEBUG_EVENT_LISTENER_struct::enterRule, enterSubRule(), ANTLR3_DEBUG_EVENT_LISTENER_struct::enterSubRule, errorNode(), ANTLR3_DEBUG_EVENT_LISTENER_struct::errorNode, exitDecision(), ANTLR3_DEBUG_EVENT_LISTENER_struct::exitDecision, exitRule(), ANTLR3_DEBUG_EVENT_LISTENER_struct::exitRule, exitSubRule(), ANTLR3_DEBUG_EVENT_LISTENER_struct::exitSubRule, handshake(), ANTLR3_DEBUG_EVENT_LISTENER_struct::handshake, location(), ANTLR3_DEBUG_EVENT_LISTENER_struct::location, LT(), ANTLR3_DEBUG_EVENT_LISTENER_struct::LT, LTT(), ANTLR3_DEBUG_EVENT_LISTENER_struct::LTT, mark(), ANTLR3_DEBUG_EVENT_LISTENER_struct::mark, nilNode(), ANTLR3_DEBUG_EVENT_LISTENER_struct::nilNode, ANTLR3_DEBUG_EVENT_LISTENER_struct::port, ANTLR3_DEBUG_EVENT_LISTENER_struct::PROTOCOL_VERSION, recognitionException(), ANTLR3_DEBUG_EVENT_LISTENER_struct::recognitionException, ANTLR3_DEBUG_EVENT_LISTENER_struct::rewind, rewindLast(), ANTLR3_DEBUG_EVENT_LISTENER_struct::rewindLast, rewindMark(), semanticPredicate(), ANTLR3_DEBUG_EVENT_LISTENER_struct::semanticPredicate, setTokenBoundaries(), ANTLR3_DEBUG_EVENT_LISTENER_struct::setTokenBoundaries, terminate(), and ANTLR3_DEBUG_EVENT_LISTENER_struct::terminate.
.PP
Referenced by antlr3DebugListenerNewPort().
.SS "ANTLR3_API \fBANTLR3_INT32\fP antlr3dfapredict (void * ctx, \fBpANTLR3_BASE_RECOGNIZER\fP rec, \fBpANTLR3_INT_STREAM\fP is, \fBpANTLR3_CYCLIC_DFA\fP cdfa)"
.PP
From the input stream, predict what alternative will succeed using this DFA (representing the covering regular approximation to the underlying CFL). 
.PP
Return an alternative number 1..n. Throw an exception upon error. 
.PP
References ANTLR3_INT_STREAM_struct::_LA, ANTLR3_CYCLIC_DFA_struct::accept, ANTLR3_TOKEN_EOF, ANTLR3_TRUE, ANTLR3_INT_STREAM_struct::consume, ANTLR3_CYCLIC_DFA_struct::eof, ANTLR3_CYCLIC_DFA_struct::eot, ANTLR3_RECOGNIZER_SHARED_STATE_struct::error, ANTLR3_INT_STREAM_struct::mark, mark(), ANTLR3_CYCLIC_DFA_struct::min, noViableAlt(), ANTLR3_INT_STREAM_struct::rewind, ANTLR3_CYCLIC_DFA_struct::special, ANTLR3_CYCLIC_DFA_struct::specialStateTransition, ANTLR3_BASE_RECOGNIZER_struct::state, and ANTLR3_CYCLIC_DFA_struct::transition.
.SS "ANTLR3_API \fBANTLR3_INT32\fP antlr3dfaspecialStateTransition (void * ctx, \fBpANTLR3_BASE_RECOGNIZER\fP rec, \fBpANTLR3_INT_STREAM\fP is, \fBpANTLR3_CYCLIC_DFA\fP dfa, \fBANTLR3_INT32\fP s)"
.PP
Default special state implementation. 
.PP
.SS "ANTLR3_API \fBANTLR3_INT32\fP antlr3dfaspecialTransition (void * ctx, \fBpANTLR3_BASE_RECOGNIZER\fP rec, \fBpANTLR3_INT_STREAM\fP is, \fBpANTLR3_CYCLIC_DFA\fP dfa, \fBANTLR3_INT32\fP s)"
.PP
.SS "ANTLR3_API \fBpANTLR3_HASH_ENUM\fP antlr3EnumNew (\fBpANTLR3_HASH_TABLE\fP table)"
.PP
Creates an enumeration structure to traverse the hash table. 
.PP
\fBParameters:\fP
.RS 4
\fItable\fP Table to enumerate 
.RE
.PP
\fBReturns:\fP
.RS 4
Pointer to enumeration structure. 
.RE
.PP

.PP
References ANTLR3_ERR_NOMEM, ANTLR3_FUNC_PTR, ANTLR3_MALLOC, antlr3EnumFree(), antlr3EnumNext(), antlr3EnumNextEntry(), ANTLR3_HASH_ENUM_struct::bucket, ANTLR3_HASH_TABLE_struct::buckets, ANTLR3_HASH_BUCKET_struct::entries, ANTLR3_HASH_ENUM_struct::entry, ANTLR3_HASH_ENUM_struct::free, ANTLR3_HASH_ENUM_struct::next, and ANTLR3_HASH_ENUM_struct::table.
.PP
Referenced by antlr3BitsetList().
.SS "ANTLR3_API \fBpANTLR3_EXCEPTION\fP antlr3ExceptionNew (\fBANTLR3_UINT32\fP exception, void * name, void * message, \fBANTLR3_BOOLEAN\fP freeMessage)"
.PP
Creates a new ANTLR3 exception structure. 
.PP
\fBParameters:\fP
.RS 4
\fIexception\fP One of the ANTLR3_xxx_EXCEPTION indicators such as \fBANTLR3_RECOGNITION_EXCEPTION\fP
.br
\fImessage\fP Pointer to message string
.br
\fIfreeMessage\fP Set to ANTLR3_TRUE if the message parameter should be freed by a call to \fBANTLR3_FREE()\fP when the exception is destroyed.
.RE
.PP
\fBReturns:\fP
.RS 4
Pointer to newly initialized exception structure, or an ANTLR3_ERR_xx defined value upon failure.
.RE
.PP
An exception is 'thrown' by a recognizer when input is seen that is not predicted by the grammar productions or when some other error condition occurs. In C we do not have the luxury of try and catch blocks, so exceptions are added in the order they occur to a list in the baserecognizer structure. The last one to be thrown is inserted at the head of the list and the one currently installed is pointed to by the newly installed exception.
.PP
\fBRemarks:\fP
.RS 4
After an exception is created, you may add a pointer to your own structure and a pointer to a function to free this structure when the exception is destroyed.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBANTLR3_EXCEPTION\fP 
.RE
.PP

.PP
References ANTLR3_CALLOC, antlr3ExceptionFree(), antlr3ExceptionPrint(), ANTLR3_EXCEPTION_struct::freeEx, ANTLR3_EXCEPTION_struct::freeMessage, ANTLR3_EXCEPTION_struct::message, ANTLR3_EXCEPTION_struct::name, ANTLR3_EXCEPTION_struct::print, and ANTLR3_EXCEPTION_struct::type.
.PP
Referenced by antlr3RecognitionExceptionNew().
.SS "ANTLR3_API \fBpANTLR3_INPUT_STREAM\fP antlr3FileStreamNew (\fBpANTLR3_UINT8\fP fileName, \fBANTLR3_UINT32\fP encoding)"
.PP
References antlr3CreateFileStream(), ANTLR3_INPUT_STREAM_struct::encoding, ANTLR3_INPUT_STREAM_struct::fileName, ANTLR3_INPUT_STREAM_struct::istream, ANTLR3_STRING_FACTORY_struct::newStr8, setupInputStream(), ANTLR3_INT_STREAM_struct::streamName, and ANTLR3_INPUT_STREAM_struct::strFactory.
.SS "ANTLR3_API \fBANTLR3_UINT32\fP antlr3Hash (void * key, \fBANTLR3_UINT32\fP keylen)"
.PP
Given an input key of arbitrary length, return a hash value of it. 
.PP
This can then be used (with suitable modulo) to index other structures. 
.PP
Referenced by antlr3HashGet(), antlr3HashPut(), and antlr3HashRemove().
.SS "ANTLR3_API \fBpANTLR3_HASH_TABLE\fP antlr3HashTableNew (\fBANTLR3_UINT32\fP sizeHint)"
.PP
References ANTLR3_HASH_TABLE_struct::allowDups, ANTLR3_FALSE, ANTLR3_FREE, ANTLR3_MALLOC, ANTLR3_TRUE, antlr3HashDelete(), antlr3HashDeleteI(), antlr3HashFree(), antlr3HashGet(), antlr3HashGetI(), antlr3HashPut(), antlr3HashPutI(), antlr3HashRemove(), antlr3HashRemoveI(), antlr3HashSize(), ANTLR3_HASH_TABLE_struct::buckets, ANTLR3_HASH_TABLE_struct::count, ANTLR3_HASH_TABLE_struct::del, ANTLR3_HASH_TABLE_struct::delI, ANTLR3_HASH_TABLE_struct::doStrdup, ANTLR3_HASH_BUCKET_struct::entries, ANTLR3_HASH_TABLE_struct::free, ANTLR3_HASH_TABLE_struct::get, ANTLR3_HASH_TABLE_struct::getI, ANTLR3_HASH_TABLE_struct::modulo, ANTLR3_HASH_TABLE_struct::put, ANTLR3_HASH_TABLE_struct::putI, ANTLR3_HASH_TABLE_struct::remove, ANTLR3_HASH_TABLE_struct::removeI, and ANTLR3_HASH_TABLE_struct::size.
.PP
Referenced by antlr3ListNew().
.SS "ANTLR3_API \fBpANTLR3_INT_TRIE\fP antlr3IntTrieNew (\fBANTLR3_UINT32\fP depth)"
.PP
References ANTLR3_INT_TRIE_struct::add, ANTLR3_CALLOC, ANTLR3_ERR_NOMEM, ANTLR3_FREE, ANTLR3_FUNC_PTR, ANTLR3_INT_TRIE_NODE_struct::bitNum, ANTLR3_INT_TRIE_struct::count, ANTLR3_INT_TRIE_struct::del, ANTLR3_INT_TRIE_struct::free, ANTLR3_INT_TRIE_struct::get, intTrieAdd(), intTrieDel(), intTrieFree(), intTrieGet(), ANTLR3_INT_TRIE_NODE_struct::leftN, ANTLR3_INT_TRIE_NODE_struct::rightN, and ANTLR3_INT_TRIE_struct::root.
.PP
Referenced by getRuleMemoization(), and reset().
.SS "ANTLR3_API \fBpANTLR3_LEXER\fP antlr3LexerNew (\fBANTLR3_UINT32\fP sizeHint, \fBpANTLR3_RECOGNIZER_SHARED_STATE\fP state)"
.PP
References ANTLR3_MALLOC, ANTLR3_TOKEN_EOF, ANTLR3_TOKEN_INVALID, ANTLR3_TRUE, ANTLR3_TYPE_LEXER, antlr3BaseRecognizerNew(), antlr3SetTokenAPI(), displayRecognitionError(), ANTLR3_BASE_RECOGNIZER_struct::displayRecognitionError, emit(), ANTLR3_LEXER_struct::emit, emitNew(), ANTLR3_LEXER_struct::emitNew, ANTLR3_TOKEN_SOURCE_struct::eofToken, ANTLR3_COMMON_TOKEN_struct::factoryMade, ANTLR3_BASE_RECOGNIZER_struct::free, ANTLR3_LEXER_struct::free, freeLexer(), getCharIndex(), ANTLR3_LEXER_struct::getCharIndex, getCharPositionInLine(), ANTLR3_LEXER_struct::getCharPositionInLine, getCurrentInputSymbol(), ANTLR3_BASE_RECOGNIZER_struct::getCurrentInputSymbol, getLine(), ANTLR3_LEXER_struct::getLine, getMissingSymbol(), ANTLR3_BASE_RECOGNIZER_struct::getMissingSymbol, getText(), ANTLR3_LEXER_struct::getText, matchAny(), ANTLR3_LEXER_struct::matchAny, matchc(), ANTLR3_LEXER_struct::matchc, matchRange(), ANTLR3_LEXER_struct::matchRange, matchs(), ANTLR3_LEXER_struct::matchs, mTokens(), ANTLR3_LEXER_struct::mTokens, nextToken(), ANTLR3_TOKEN_SOURCE_struct::nextToken, popCharStream(), ANTLR3_LEXER_struct::popCharStream, pushCharStream(), ANTLR3_LEXER_struct::pushCharStream, ANTLR3_LEXER_struct::rec, recover(), ANTLR3_LEXER_struct::recover, reportError(), ANTLR3_BASE_RECOGNIZER_struct::reportError, reset(), ANTLR3_BASE_RECOGNIZER_struct::reset, setCharStream(), ANTLR3_LEXER_struct::setCharStream, ANTLR3_COMMON_TOKEN_struct::setType, ANTLR3_TOKEN_SOURCE_struct::skipToken, ANTLR3_BASE_RECOGNIZER_struct::state, ANTLR3_COMMON_TOKEN_struct::strFactory, ANTLR3_TOKEN_SOURCE_struct::strFactory, ANTLR3_TOKEN_SOURCE_struct::super, ANTLR3_BASE_RECOGNIZER_struct::super, ANTLR3_RECOGNIZER_SHARED_STATE_struct::tokFactory, and ANTLR3_RECOGNIZER_SHARED_STATE_struct::tokSource.
.PP
Referenced by antlr3LexerNewStream().
.SS "ANTLR3_API \fBpANTLR3_LEXER\fP antlr3LexerNewStream (\fBANTLR3_UINT32\fP sizeHint, \fBpANTLR3_INPUT_STREAM\fP input, \fBpANTLR3_RECOGNIZER_SHARED_STATE\fP state)"
.PP
References antlr3LexerNew(), and setCharStream().
.SS "ANTLR3_API \fBpANTLR3_LIST\fP antlr3ListNew (\fBANTLR3_UINT32\fP sizeHint)"
.PP
References ANTLR3_LIST_struct::add, ANTLR3_ERR_NOMEM, ANTLR3_FUNC_PTR, ANTLR3_MALLOC, antlr3HashTableNew(), antlr3ListAdd(), antlr3ListDelete(), antlr3ListFree(), antlr3ListGet(), antlr3ListPut(), antlr3ListRemove(), antlr3ListSize(), ANTLR3_LIST_struct::del, ANTLR3_LIST_struct::free, ANTLR3_LIST_struct::get, ANTLR3_LIST_struct::put, ANTLR3_LIST_struct::remove, ANTLR3_LIST_struct::size, and ANTLR3_LIST_struct::table.
.PP
Referenced by discardTokenType(), getTokensSet(), and setTokenTypeChannel().
.SS "ANTLR3_API void antlr3MTNExceptionNew (\fBpANTLR3_BASE_RECOGNIZER\fP recognizer)"
.PP
Creates a new Mismatched Tree Nde Exception and inserts in the recognizer exception stack. 
.PP
\fBParameters:\fP
.RS 4
\fIrecognizer\fP Context pointer for this recognizer 
.RE
.PP

.PP
References ANTLR3_MISMATCHED_TREE_NODE_EXCEPTION, ANTLR3_MISMATCHED_TREE_NODE_NAME, antlr3RecognitionExceptionNew(), ANTLR3_RECOGNIZER_SHARED_STATE_struct::exception, ANTLR3_EXCEPTION_struct::name, ANTLR3_BASE_RECOGNIZER_struct::state, and ANTLR3_EXCEPTION_struct::type.
.PP
Referenced by antlr3TreeParserNewStream().
.SS "ANTLR3_API \fBpANTLR3_PARSER\fP antlr3ParserNew (\fBANTLR3_UINT32\fP sizeHint, \fBpANTLR3_RECOGNIZER_SHARED_STATE\fP state)"
.PP
References ANTLR3_MALLOC, ANTLR3_TYPE_PARSER, antlr3BaseRecognizerNew(), antlr3MTExceptionNew(), ANTLR3_BASE_RECOGNIZER_struct::exConstruct, ANTLR3_PARSER_struct::free, freeParser(), getTokenStream(), ANTLR3_PARSER_struct::getTokenStream, ANTLR3_PARSER_struct::rec, setDebugListener(), ANTLR3_PARSER_struct::setDebugListener, setTokenStream(), ANTLR3_PARSER_struct::setTokenStream, and ANTLR3_BASE_RECOGNIZER_struct::super.
.PP
Referenced by antlr3ParserNewStream().
.SS "ANTLR3_API \fBpANTLR3_PARSER\fP antlr3ParserNewStream (\fBANTLR3_UINT32\fP sizeHint, \fBpANTLR3_TOKEN_STREAM\fP tstream, \fBpANTLR3_RECOGNIZER_SHARED_STATE\fP state)"
.PP
References antlr3ParserNew(), and ANTLR3_PARSER_struct::setTokenStream.
.PP
Referenced by antlr3ParserNewStreamDbg().
.SS "ANTLR3_API \fBpANTLR3_PARSER\fP antlr3ParserNewStreamDbg (\fBANTLR3_UINT32\fP sizeHint, \fBpANTLR3_TOKEN_STREAM\fP tstream, \fBpANTLR3_DEBUG_EVENT_LISTENER\fP dbg, \fBpANTLR3_RECOGNIZER_SHARED_STATE\fP state)"
.PP
References antlr3ParserNewStream(), and ANTLR3_PARSER_struct::setDebugListener.
.SS "ANTLR3_API \fBpANTLR3_REWRITE_RULE_NODE_STREAM\fP antlr3RewriteRuleNODEStreamNewAE (\fBpANTLR3_BASE_TREE_ADAPTOR\fP adaptor, \fBpANTLR3_BASE_RECOGNIZER\fP rec, \fBpANTLR3_UINT8\fP description)"
.PP
References antlr3RewriteRuleElementStreamNewAE(), ANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct::dup, dupTreeNode(), ANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct::free, freeNodeRS(), ANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct::nextNode, nextNodeNode(), ANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct::toTree, and toTreeNode().
.SS "ANTLR3_API \fBpANTLR3_REWRITE_RULE_NODE_STREAM\fP antlr3RewriteRuleNODEStreamNewAEE (\fBpANTLR3_BASE_TREE_ADAPTOR\fP adaptor, \fBpANTLR3_BASE_RECOGNIZER\fP rec, \fBpANTLR3_UINT8\fP description, void * oneElement)"
.PP
References antlr3RewriteRuleElementStreamNewAEE(), ANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct::dup, dupTreeNode(), ANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct::free, freeNodeRS(), ANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct::nextNode, nextNodeNode(), ANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct::toTree, and toTreeNode().
.SS "ANTLR3_API \fBpANTLR3_REWRITE_RULE_NODE_STREAM\fP antlr3RewriteRuleNODEStreamNewAEV (\fBpANTLR3_BASE_TREE_ADAPTOR\fP adaptor, \fBpANTLR3_BASE_RECOGNIZER\fP rec, \fBpANTLR3_UINT8\fP description, \fBpANTLR3_VECTOR\fP vector)"
.PP
References antlr3RewriteRuleElementStreamNewAEV(), ANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct::dup, dupTreeNode(), ANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct::free, freeNodeRS(), ANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct::nextNode, nextNodeNode(), ANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct::toTree, and toTreeNode().
.SS "ANTLR3_API \fBpANTLR3_REWRITE_RULE_SUBTREE_STREAM\fP antlr3RewriteRuleSubtreeStreamNewAE (\fBpANTLR3_BASE_TREE_ADAPTOR\fP adaptor, \fBpANTLR3_BASE_RECOGNIZER\fP rec, \fBpANTLR3_UINT8\fP description)"
.PP
References antlr3RewriteRuleElementStreamNewAE(), ANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct::dup, dupTree(), ANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct::free, freeNodeRS(), nextNode(), and ANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct::nextNode.
.SS "ANTLR3_API \fBpANTLR3_REWRITE_RULE_SUBTREE_STREAM\fP antlr3RewriteRuleSubtreeStreamNewAEE (\fBpANTLR3_BASE_TREE_ADAPTOR\fP adaptor, \fBpANTLR3_BASE_RECOGNIZER\fP rec, \fBpANTLR3_UINT8\fP description, void * oneElement)"
.PP
References antlr3RewriteRuleElementStreamNewAEE(), ANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct::dup, dupTree(), ANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct::free, freeNodeRS(), nextNode(), and ANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct::nextNode.
.SS "ANTLR3_API \fBpANTLR3_REWRITE_RULE_SUBTREE_STREAM\fP antlr3RewriteRuleSubtreeStreamNewAEV (\fBpANTLR3_BASE_TREE_ADAPTOR\fP adaptor, \fBpANTLR3_BASE_RECOGNIZER\fP rec, \fBpANTLR3_UINT8\fP description, \fBpANTLR3_VECTOR\fP vector)"
.PP
References antlr3RewriteRuleElementStreamNewAEV(), ANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct::dup, dupTree(), ANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct::free, freeNodeRS(), nextNode(), and ANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct::nextNode.
.SS "ANTLR3_API \fBpANTLR3_REWRITE_RULE_TOKEN_STREAM\fP antlr3RewriteRuleTOKENStreamNewAE (\fBpANTLR3_BASE_TREE_ADAPTOR\fP adaptor, \fBpANTLR3_BASE_RECOGNIZER\fP rec, \fBpANTLR3_UINT8\fP description)"
.PP
References antlr3RewriteRuleElementStreamNewAE(), ANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct::dup, dupTok(), ANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct::nextNode, and nextNodeToken().
.SS "ANTLR3_API \fBpANTLR3_REWRITE_RULE_TOKEN_STREAM\fP antlr3RewriteRuleTOKENStreamNewAEE (\fBpANTLR3_BASE_TREE_ADAPTOR\fP adaptor, \fBpANTLR3_BASE_RECOGNIZER\fP rec, \fBpANTLR3_UINT8\fP description, void * oneElement)"
.PP
References antlr3RewriteRuleElementStreamNewAEE(), ANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct::dup, dupTok(), ANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct::nextNode, and nextNodeToken().
.SS "ANTLR3_API \fBpANTLR3_REWRITE_RULE_TOKEN_STREAM\fP antlr3RewriteRuleTOKENStreamNewAEV (\fBpANTLR3_BASE_TREE_ADAPTOR\fP adaptor, \fBpANTLR3_BASE_RECOGNIZER\fP rec, \fBpANTLR3_UINT8\fP description, \fBpANTLR3_VECTOR\fP vector)"
.PP
References antlr3RewriteRuleElementStreamNewAEV(), ANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct::dup, dupTok(), ANTLR3_REWRITE_RULE_ELEMENT_STREAM_struct::nextNode, and nextNodeToken().
.SS "ANTLR3_API void antlr3SetCTAPI (\fBpANTLR3_COMMON_TREE\fP tree)"
.PP
References antlr3BaseTreeNew(), ANTLR3_COMMON_TREE_struct::baseTree, ANTLR3_COMMON_TREE_struct::childIndex, ANTLR3_BASE_TREE_struct::children, createChildrenList(), ANTLR3_BASE_TREE_struct::createChildrenList, dupNode(), ANTLR3_BASE_TREE_struct::dupNode, ANTLR3_BASE_TREE_struct::free, getCharPositionInLine(), ANTLR3_BASE_TREE_struct::getCharPositionInLine, getChildIndex(), ANTLR3_BASE_TREE_struct::getChildIndex, getLine(), ANTLR3_BASE_TREE_struct::getLine, getParent(), ANTLR3_BASE_TREE_struct::getParent, getText(), ANTLR3_BASE_TREE_struct::getText, getToken(), ANTLR3_BASE_TREE_struct::getToken, getType(), ANTLR3_BASE_TREE_struct::getType, isNilNode(), ANTLR3_BASE_TREE_struct::isNilNode, ANTLR3_COMMON_TREE_struct::parent, reuse(), ANTLR3_BASE_TREE_struct::reuse, setChildIndex(), ANTLR3_BASE_TREE_struct::setChildIndex, setParent(), ANTLR3_BASE_TREE_struct::setParent, ANTLR3_COMMON_TREE_struct::startIndex, ANTLR3_COMMON_TREE_struct::stopIndex, ANTLR3_BASE_TREE_struct::super, ANTLR3_COMMON_TREE_struct::token, toString(), ANTLR3_BASE_TREE_struct::toString, and ANTLR3_BASE_TREE_struct::u.
.PP
Referenced by antlr3ArboretumNew(), antlr3CommonTreeNew(), antlr3CommonTreeNodeStreamNew(), antlr3CommonTreeNodeStreamNewStream(), and newPoolTree().
.SS "ANTLR3_API void antlr3SetTokenAPI (\fBpANTLR3_COMMON_TOKEN\fP token)"
.PP
References getChannel(), ANTLR3_COMMON_TOKEN_struct::getChannel, getCharPositionInLine(), ANTLR3_COMMON_TOKEN_struct::getCharPositionInLine, getLine(), ANTLR3_COMMON_TOKEN_struct::getLine, getStartIndex(), ANTLR3_COMMON_TOKEN_struct::getStartIndex, getStopIndex(), ANTLR3_COMMON_TOKEN_struct::getStopIndex, getText(), ANTLR3_COMMON_TOKEN_struct::getText, getTokenIndex(), ANTLR3_COMMON_TOKEN_struct::getTokenIndex, getType(), ANTLR3_COMMON_TOKEN_struct::getType, setChannel(), ANTLR3_COMMON_TOKEN_struct::setChannel, setCharPositionInLine(), ANTLR3_COMMON_TOKEN_struct::setCharPositionInLine, setLine(), ANTLR3_COMMON_TOKEN_struct::setLine, setStartIndex(), ANTLR3_COMMON_TOKEN_struct::setStartIndex, setStopIndex(), ANTLR3_COMMON_TOKEN_struct::setStopIndex, setText(), ANTLR3_COMMON_TOKEN_struct::setText, setText8(), ANTLR3_COMMON_TOKEN_struct::setText8, setTokenIndex(), ANTLR3_COMMON_TOKEN_struct::setTokenIndex, setType(), ANTLR3_COMMON_TOKEN_struct::setType, toString(), and ANTLR3_COMMON_TOKEN_struct::toString.
.PP
Referenced by antlr3LexerNew(), antlr3TokenFactoryNew(), newPoolToken(), and newToken().
.SS "ANTLR3_API void antlr3SetVectorApi (\fBpANTLR3_VECTOR\fP vector, \fBANTLR3_UINT32\fP sizeHint)"
.PP
References ANTLR3_VECTOR_struct::add, ANTLR3_FALSE, ANTLR3_FREE, ANTLR3_MALLOC, ANTLR3_VECTOR_INTERNAL_SIZE, antlr3VectorAdd(), antlr3VectorClear(), antlr3VectorDel(), antlr3VectorFree(), antlr3VectorGet(), antlr3VectorSet(), antlr3VectorSize(), antlr3VectorSwap(), antrl3VectorRemove(), ANTLR3_VECTOR_struct::clear, ANTLR3_VECTOR_struct::count, ANTLR3_VECTOR_struct::del, ANTLR3_VECTOR_struct::elements, ANTLR3_VECTOR_struct::elementsSize, ANTLR3_VECTOR_struct::factoryMade, ANTLR3_VECTOR_struct::get, ANTLR3_VECTOR_struct::internal, ANTLR3_VECTOR_struct::remove, ANTLR3_VECTOR_struct::set, ANTLR3_VECTOR_struct::size, and ANTLR3_VECTOR_struct::swap.
.PP
Referenced by antlr3VectorFactoryNew(), antlr3VectorNew(), and newVector().
.SS "ANTLR3_API \fBpANTLR3_STACK\fP antlr3StackNew (\fBANTLR3_UINT32\fP sizeHint)"
.PP
References ANTLR3_ERR_NOMEM, ANTLR3_FUNC_PTR, ANTLR3_MALLOC, antlr3StackFree(), antlr3StackGet(), antlr3StackPeek(), antlr3StackPop(), antlr3StackPush(), antlr3StackSize(), antlr3VectorNew(), ANTLR3_STACK_struct::free, ANTLR3_STACK_struct::get, ANTLR3_STACK_struct::peek, ANTLR3_STACK_struct::pop, ANTLR3_STACK_struct::push, ANTLR3_STACK_struct::size, ANTLR3_STACK_struct::top, and ANTLR3_STACK_struct::vector.
.PP
Referenced by antlr3ArboretumNew(), antlr3CommonTreeNodeStreamNew(), antlr3VectorFactoryNew(), pushCharStream(), and reset().
.SS "ANTLR3_API \fBpANTLR3_STRING_FACTORY\fP antlr3StringFactoryNew (\fBANTLR3_UINT32\fP encoding)"
.PP
References ANTLR3_ENC_8BIT, ANTLR3_ENC_EBCDIC, ANTLR3_ENC_UTF16, ANTLR3_ENC_UTF16BE, ANTLR3_ENC_UTF16LE, ANTLR3_ENC_UTF32, ANTLR3_ENC_UTF32BE, ANTLR3_ENC_UTF32LE, ANTLR3_ENC_UTF8, ANTLR3_FREE, ANTLR3_MALLOC, antlr3VectorNew(), ANTLR3_STRING_FACTORY_struct::close, closeFactory(), destroy(), ANTLR3_STRING_FACTORY_struct::destroy, ANTLR3_STRING_FACTORY_struct::index, ANTLR3_STRING_FACTORY_struct::newPtr, newPtr8(), ANTLR3_STRING_FACTORY_struct::newPtr8, newPtrUTF16_8(), newPtrUTF16_UTF16(), ANTLR3_STRING_FACTORY_struct::newRaw, newRaw8(), newRawUTF16(), ANTLR3_STRING_FACTORY_struct::newSize, newSize8(), newSizeUTF16(), ANTLR3_STRING_FACTORY_struct::newStr, newStr8(), ANTLR3_STRING_FACTORY_struct::newStr8, newStrUTF16_8(), newStrUTF16_UTF16(), ANTLR3_STRING_FACTORY_struct::printable, printable8(), printableUTF16(), and ANTLR3_STRING_FACTORY_struct::strings.
.PP
Referenced by antlr38BitSetupStream(), antlr3EBCDICSetupStream(), antlr3UTF16SetupStream(), antlr3UTF32SetupStream(), and antlr3UTF8SetupStream().
.SS "ANTLR3_API \fBpANTLR3_INPUT_STREAM\fP antlr3StringStreamNew (\fBpANTLR3_UINT8\fP data, \fBANTLR3_UINT32\fP encoding, \fBANTLR3_UINT32\fP size, \fBpANTLR3_UINT8\fP name)"
.PP
References antlr3CreateStringStream(), ANTLR3_INPUT_STREAM_struct::encoding, ANTLR3_INPUT_STREAM_struct::fileName, ANTLR3_INPUT_STREAM_struct::istream, ANTLR3_STRING_FACTORY_struct::newStr8, setupInputStream(), ANTLR3_INPUT_STREAM_struct::sizeBuf, ANTLR3_INT_STREAM_struct::streamName, and ANTLR3_INPUT_STREAM_struct::strFactory.
.SS "ANTLR3_API \fBpANTLR3_TOKEN_FACTORY\fP antlr3TokenFactoryNew (\fBpANTLR3_INPUT_STREAM\fP input)"
.PP
References ANTLR3_MALLOC, ANTLR3_TRUE, antlr3SetTokenAPI(), ANTLR3_TOKEN_FACTORY_struct::close, factoryClose(), ANTLR3_COMMON_TOKEN_struct::factoryMade, factoryReset(), ANTLR3_TOKEN_FACTORY_struct::maxPool, newPool(), newPoolToken(), ANTLR3_TOKEN_FACTORY_struct::newToken, ANTLR3_TOKEN_FACTORY_struct::pools, ANTLR3_TOKEN_FACTORY_struct::reset, setInputStream(), ANTLR3_TOKEN_FACTORY_struct::setInputStream, ANTLR3_TOKEN_FACTORY_struct::thisPool, and ANTLR3_TOKEN_FACTORY_struct::unTruc.
.PP
Referenced by ANTLR3_TREE_ADAPTORNew(), getMissingSymbol(), and setCharStream().
.SS "ANTLR3_API \fBpANTLR3_TOPO\fP antlr3TopoNew ()"
.PP
Allocate and initialize a new ANTLR3 topological sorter, which can be used to define edges that identify numerical node indexes that depend on other numerical node indexes, which can then be sorted topologically such that any node is sorted after all its dependent nodes. 
.PP
Use:
.PP
/verbatim
.PP
pANTLR3_TOPO topo; topo = antlr3NewTopo();
.PP
if (topo == NULL) { out of memory }
.PP
topo->addEdge(topo, 3, 0); // Node 3 depends on node 0 topo->addEdge(topo, 0, 1); // Node - depends on node 1 topo->sortVector(topo, myVector); // Sort the vector in place (node numbers are the vector entry numbers)
.PP
/verbatim 
.PP
References addEdge(), ANTLR3_TOPO_struct::addEdge, ANTLR3_FALSE, ANTLR3_MALLOC, ANTLR3_TOPO_struct::cycle, ANTLR3_TOPO_struct::cycleMark, ANTLR3_TOPO_struct::edges, ANTLR3_TOPO_struct::free, freeTopo(), ANTLR3_TOPO_struct::hasCycle, ANTLR3_TOPO_struct::limit, ANTLR3_TOPO_struct::sorted, sortToArray(), ANTLR3_TOPO_struct::sortToArray, sortVector(), ANTLR3_TOPO_struct::sortVector, and ANTLR3_TOPO_struct::visited.
.SS "ANTLR3_API \fBpANTLR3_TREE_NODE_STREAM\fP antlr3TreeNodeStreamNew ()"
.PP
References ANTLR3_CALLOC, antlr3TreeNodeStreamFree(), ANTLR3_TREE_NODE_STREAM_struct::free, replaceChildren(), and ANTLR3_TREE_NODE_STREAM_struct::replaceChildren.
.PP
Referenced by antlr3CommonTreeNodeStreamNew(), and antlr3CommonTreeNodeStreamNewStream().
.SS "ANTLR3_API \fBpANTLR3_TREE_PARSER\fP antlr3TreeParserNewStream (\fBANTLR3_UINT32\fP sizeHint, \fBpANTLR3_COMMON_TREE_NODE_STREAM\fP ctnstream, \fBpANTLR3_RECOGNIZER_SHARED_STATE\fP state)"
.PP

.PP
Allocate tree parser memory 
.PP
References ANTLR3_MALLOC, ANTLR3_TYPE_PARSER, ANTLR3_TYPE_TREE_PARSER, antlr3BaseRecognizerNew(), antlr3MTNExceptionNew(), ANTLR3_BASE_RECOGNIZER_struct::exConstruct, ANTLR3_TREE_PARSER_struct::free, freeParser(), getCurrentInputSymbol(), ANTLR3_BASE_RECOGNIZER_struct::getCurrentInputSymbol, getMissingSymbol(), ANTLR3_BASE_RECOGNIZER_struct::getMissingSymbol, getTreeNodeStream(), ANTLR3_TREE_PARSER_struct::getTreeNodeStream, mismatch(), ANTLR3_BASE_RECOGNIZER_struct::mismatch, ANTLR3_TREE_PARSER_struct::rec, setTreeNodeStream(), ANTLR3_TREE_PARSER_struct::setTreeNodeStream, ANTLR3_BASE_RECOGNIZER_struct::super, and ANTLR3_BASE_RECOGNIZER_struct::type.
.SS "ANTLR3_API \fBpANTLR3_COMMON_TREE_NODE_STREAM\fP antlr3UnbufTreeNodeStreamNew (\fBpANTLR3_STRING_FACTORY\fP strFactory, \fBANTLR3_UINT32\fP hint)"
.PP
.SS "ANTLR3_API \fBpANTLR3_COMMON_TREE_NODE_STREAM\fP antlr3UnbufTreeNodeStreamNewTree (\fBpANTLR3_BASE_TREE\fP tree, \fBANTLR3_UINT32\fP hint)"
.PP
.SS "ANTLR3_API \fBpANTLR3_VECTOR_FACTORY\fP antlr3VectorFactoryNew (\fBANTLR3_UINT32\fP sizeHint)"
.PP
Vector factory creation. 
.PP
References ANTLR3_MALLOC, ANTLR3_TRUE, ANTLR3_VECTOR_INTERNAL_SIZE, antlr3SetVectorApi(), antlr3StackNew(), ANTLR3_VECTOR_FACTORY_struct::close, closeVectorFactory(), ANTLR3_VECTOR_struct::factoryMade, ANTLR3_VECTOR_FACTORY_struct::freeStack, newPool(), newVector(), ANTLR3_VECTOR_FACTORY_struct::newVector, ANTLR3_VECTOR_FACTORY_struct::pools, returnVector(), ANTLR3_VECTOR_FACTORY_struct::returnVector, ANTLR3_VECTOR_FACTORY_struct::thisPool, and ANTLR3_VECTOR_FACTORY_struct::unTruc.
.PP
Referenced by antlr3ArboretumNew().
.SS "ANTLR3_API \fBpANTLR3_VECTOR\fP antlr3VectorNew (\fBANTLR3_UINT32\fP sizeHint)"
.PP
References ANTLR3_ERR_NOMEM, ANTLR3_FUNC_PTR, ANTLR3_MALLOC, and antlr3SetVectorApi().
.PP
Referenced by antlr3BaseRecognizerNew(), antlr3CommonTokenStreamNew(), antlr3CommonTreeNodeStreamNew(), antlr3CommonTreeNodeStreamNewStream(), antlr3InputReset(), antlr3StackNew(), antlr3StringFactoryNew(), replaceChildren(), and reset().
.SS "ANTLR3_API void fillBufferExt (\fBpANTLR3_COMMON_TOKEN_STREAM\fP tokenStream)"
.PP
.SH "Author"
.PP 
Generated automatically by Doxygen for ANTLR3C from the source code.
