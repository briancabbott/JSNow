.TH "ANTLR3_BASE_TREE_ADAPTOR_struct" 3 "29 Nov 2010" "Version 3.3" "ANTLR3C" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ANTLR3_BASE_TREE_ADAPTOR_struct \- 
.SH SYNOPSIS
.br
.PP
\fC#include <antlr3basetreeadaptor.h>\fP
.PP
.SS "Data Fields"

.in +1c
.ti -1c
.RI "void(* \fBaddChild\fP )(struct \fBANTLR3_BASE_TREE_ADAPTOR_struct\fP *adaptor, void *t, void *child)"
.br
.ti -1c
.RI "void(* \fBaddChildToken\fP )(struct \fBANTLR3_BASE_TREE_ADAPTOR_struct\fP *adaptor, void *t, \fBpANTLR3_COMMON_TOKEN\fP child)"
.br
.ti -1c
.RI "void *(* \fBbecomeRoot\fP )(struct \fBANTLR3_BASE_TREE_ADAPTOR_struct\fP *adaptor, void *newRoot, void *oldRoot)"
.br
.ti -1c
.RI "void *(* \fBbecomeRootToken\fP )(struct \fBANTLR3_BASE_TREE_ADAPTOR_struct\fP *adaptor, void *newRoot, void *oldRoot)"
.br
.ti -1c
.RI "void *(* \fBcreate\fP )(struct \fBANTLR3_BASE_TREE_ADAPTOR_struct\fP *adaptor, \fBpANTLR3_COMMON_TOKEN\fP payload)"
.br
.ti -1c
.RI "\fBpANTLR3_COMMON_TOKEN\fP(* \fBcreateToken\fP )(struct \fBANTLR3_BASE_TREE_ADAPTOR_struct\fP *adaptor, \fBANTLR3_UINT32\fP tokenType, \fBpANTLR3_UINT8\fP text)"
.br
.ti -1c
.RI "\fBpANTLR3_COMMON_TOKEN\fP(* \fBcreateTokenFromToken\fP )(struct \fBANTLR3_BASE_TREE_ADAPTOR_struct\fP *adaptor, \fBpANTLR3_COMMON_TOKEN\fP fromToken)"
.br
.ti -1c
.RI "void *(* \fBcreateTypeText\fP )(struct \fBANTLR3_BASE_TREE_ADAPTOR_struct\fP *adaptor, \fBANTLR3_UINT32\fP tokenType, \fBpANTLR3_UINT8\fP text)"
.br
.ti -1c
.RI "void *(* \fBcreateTypeToken\fP )(struct \fBANTLR3_BASE_TREE_ADAPTOR_struct\fP *adaptor, \fBANTLR3_UINT32\fP tokenType, \fBpANTLR3_COMMON_TOKEN\fP fromToken)"
.br
.ti -1c
.RI "void *(* \fBcreateTypeTokenText\fP )(struct \fBANTLR3_BASE_TREE_ADAPTOR_struct\fP *adaptor, \fBANTLR3_UINT32\fP tokenType, \fBpANTLR3_COMMON_TOKEN\fP fromToken, \fBpANTLR3_UINT8\fP text)"
.br
.ti -1c
.RI "\fBpANTLR3_DEBUG_EVENT_LISTENER\fP \fBdebugger\fP"
.br
.RI "\fIIf set to something other than NULL, then this structure is points to an instance of the debugger interface. \fP"
.ti -1c
.RI "void(* \fBdeleteChild\fP )(struct \fBANTLR3_BASE_TREE_ADAPTOR_struct\fP *adaptor, void *t, \fBANTLR3_UINT32\fP i)"
.br
.ti -1c
.RI "void *(* \fBdupNode\fP )(struct \fBANTLR3_BASE_TREE_ADAPTOR_struct\fP *adaptor, void *treeNode)"
.br
.ti -1c
.RI "void *(* \fBdupTree\fP )(struct \fBANTLR3_BASE_TREE_ADAPTOR_struct\fP *adaptor, void *tree)"
.br
.ti -1c
.RI "void *(* \fBdupTreeTT\fP )(struct \fBANTLR3_BASE_TREE_ADAPTOR_struct\fP *adaptor, void *t, void *tree)"
.br
.ti -1c
.RI "void *(* \fBerrorNode\fP )(struct \fBANTLR3_BASE_TREE_ADAPTOR_struct\fP *adaptor, \fBpANTLR3_TOKEN_STREAM\fP tnstream, \fBpANTLR3_COMMON_TOKEN\fP startToken, \fBpANTLR3_COMMON_TOKEN\fP stopToken, \fBpANTLR3_EXCEPTION\fP e)"
.br
.ti -1c
.RI "void(* \fBfree\fP )(struct \fBANTLR3_BASE_TREE_ADAPTOR_struct\fP *adaptor)"
.br
.ti -1c
.RI "void *(* \fBgetChild\fP )(struct \fBANTLR3_BASE_TREE_ADAPTOR_struct\fP *adaptor, void *t, \fBANTLR3_UINT32\fP i)"
.br
.ti -1c
.RI "\fBANTLR3_UINT32\fP(* \fBgetChildCount\fP )(struct \fBANTLR3_BASE_TREE_ADAPTOR_struct\fP *adaptor, void *)"
.br
.ti -1c
.RI "\fBANTLR3_INT32\fP(* \fBgetChildIndex\fP )(struct \fBANTLR3_BASE_TREE_ADAPTOR_struct\fP *adaptor, void *t)"
.br
.ti -1c
.RI "void *(* \fBgetParent\fP )(struct \fBANTLR3_BASE_TREE_ADAPTOR_struct\fP *adaptor, void *child)"
.br
.ti -1c
.RI "\fBpANTLR3_STRING\fP(* \fBgetText\fP )(struct \fBANTLR3_BASE_TREE_ADAPTOR_struct\fP *adaptor, void *t)"
.br
.ti -1c
.RI "\fBpANTLR3_COMMON_TOKEN\fP(* \fBgetToken\fP )(struct \fBANTLR3_BASE_TREE_ADAPTOR_struct\fP *adaptor, void *t)"
.br
.ti -1c
.RI "\fBANTLR3_MARKER\fP(* \fBgetTokenStartIndex\fP )(struct \fBANTLR3_BASE_TREE_ADAPTOR_struct\fP *adaptor, void *t)"
.br
.ti -1c
.RI "\fBANTLR3_MARKER\fP(* \fBgetTokenStopIndex\fP )(struct \fBANTLR3_BASE_TREE_ADAPTOR_struct\fP *adaptor, void *t)"
.br
.ti -1c
.RI "\fBANTLR3_UINT32\fP(* \fBgetType\fP )(struct \fBANTLR3_BASE_TREE_ADAPTOR_struct\fP *adaptor, void *t)"
.br
.ti -1c
.RI "\fBANTLR3_UINT32\fP(* \fBgetUniqueID\fP )(struct \fBANTLR3_BASE_TREE_ADAPTOR_struct\fP *adaptor, void *)"
.br
.ti -1c
.RI "\fBANTLR3_BOOLEAN\fP(* \fBisNilNode\fP )(struct \fBANTLR3_BASE_TREE_ADAPTOR_struct\fP *adaptor, void *t)"
.br
.ti -1c
.RI "\fBpANTLR3_STRING\fP(* \fBmakeDot\fP )(struct \fBANTLR3_BASE_TREE_ADAPTOR_struct\fP *adaptor, void *theTree)"
.br
.RI "\fIProduce a DOT (see graphviz freeware suite) from a base tree. \fP"
.ti -1c
.RI "void *(* \fBnilNode\fP )(struct \fBANTLR3_BASE_TREE_ADAPTOR_struct\fP *adaptor)"
.br
.ti -1c
.RI "void(* \fBreplaceChildren\fP )(struct \fBANTLR3_BASE_TREE_ADAPTOR_struct\fP *adaptor, void *parent, \fBANTLR3_INT32\fP startChildIndex, \fBANTLR3_INT32\fP stopChildIndex, void *t)"
.br
.RI "\fIReplace from start to stop child index of parent with t, which might be a list. \fP"
.ti -1c
.RI "void *(* \fBrulePostProcessing\fP )(struct \fBANTLR3_BASE_TREE_ADAPTOR_struct\fP *adaptor, void *root)"
.br
.ti -1c
.RI "void(* \fBsetChild\fP )(struct \fBANTLR3_BASE_TREE_ADAPTOR_struct\fP *adaptor, void *t, \fBANTLR3_UINT32\fP i, void *child)"
.br
.ti -1c
.RI "void(* \fBsetChildIndex\fP )(struct \fBANTLR3_BASE_TREE_ADAPTOR_struct\fP *adaptor, void *t, \fBANTLR3_UINT32\fP i)"
.br
.ti -1c
.RI "void(* \fBsetDebugEventListener\fP )(struct \fBANTLR3_BASE_TREE_ADAPTOR_struct\fP *adaptor, \fBpANTLR3_DEBUG_EVENT_LISTENER\fP \fBdebugger\fP)"
.br
.ti -1c
.RI "void(* \fBsetParent\fP )(struct \fBANTLR3_BASE_TREE_ADAPTOR_struct\fP *adaptor, void *child, void *parent)"
.br
.ti -1c
.RI "void(* \fBsetText\fP )(struct \fBANTLR3_BASE_TREE_ADAPTOR_struct\fP *adaptor, \fBpANTLR3_STRING\fP t)"
.br
.ti -1c
.RI "void(* \fBsetText8\fP )(struct \fBANTLR3_BASE_TREE_ADAPTOR_struct\fP *adaptor, \fBpANTLR3_UINT8\fP t)"
.br
.ti -1c
.RI "void(* \fBsetTokenBoundaries\fP )(struct \fBANTLR3_BASE_TREE_ADAPTOR_struct\fP *adaptor, void *t, \fBpANTLR3_COMMON_TOKEN\fP startToken, \fBpANTLR3_COMMON_TOKEN\fP stopToken)"
.br
.ti -1c
.RI "void(* \fBsetType\fP )(struct \fBANTLR3_BASE_TREE_ADAPTOR_struct\fP *adaptor, void *t, \fBANTLR3_UINT32\fP type)"
.br
.ti -1c
.RI "\fBpANTLR3_STRING_FACTORY\fP \fBstrFactory\fP"
.br
.RI "\fIWe need a string factory for creating imaginary tokens, we take this from the stream we are supplied to walk. \fP"
.ti -1c
.RI "void * \fBsuper\fP"
.br
.RI "\fIPointer to any enclosing structure/interface that contains this structure. \fP"
.ti -1c
.RI "\fBpANTLR3_TOKEN_FACTORY\fP \fBtokenFactory\fP"
.br
.in -1c
.SH "Field Documentation"
.PP 
.SS "void(* \fBANTLR3_BASE_TREE_ADAPTOR_struct::addChild\fP)(struct \fBANTLR3_BASE_TREE_ADAPTOR_struct\fP *adaptor, void *t, void *child)"
.PP
Referenced by addChildToken(), antlr3BaseTreeAdaptorInit(), dbgAddChildToken(), and dupTreeTT().
.SS "void(* \fBANTLR3_BASE_TREE_ADAPTOR_struct::addChildToken\fP)(struct \fBANTLR3_BASE_TREE_ADAPTOR_struct\fP *adaptor, void *t, \fBpANTLR3_COMMON_TOKEN\fP child)"
.PP
Referenced by antlr3BaseTreeAdaptorInit().
.SS "void*(* \fBANTLR3_BASE_TREE_ADAPTOR_struct::becomeRoot\fP)(struct \fBANTLR3_BASE_TREE_ADAPTOR_struct\fP *adaptor, void *newRoot, void *oldRoot)"
.PP
Referenced by antlr3BaseTreeAdaptorInit(), becomeRootToken(), and dbgBecomeRootToken().
.SS "void*(* \fBANTLR3_BASE_TREE_ADAPTOR_struct::becomeRootToken\fP)(struct \fBANTLR3_BASE_TREE_ADAPTOR_struct\fP *adaptor, void *newRoot, void *oldRoot)"
.PP
Referenced by antlr3BaseTreeAdaptorInit().
.SS "void*(* \fBANTLR3_BASE_TREE_ADAPTOR_struct::create\fP)(struct \fBANTLR3_BASE_TREE_ADAPTOR_struct\fP *adaptor, \fBpANTLR3_COMMON_TOKEN\fP payload)"
.PP
Referenced by addChildToken(), ANTLR3_TREE_ADAPTORDebugNew(), ANTLR3_TREE_ADAPTORNew(), becomeRootToken(), createTypeText(), createTypeToken(), createTypeTokenText(), dbgAddChildToken(), dbgBecomeRootToken(), dbgNil(), nextNodeToken(), nilNode(), and setDebugEventListener().
.SS "\fBpANTLR3_COMMON_TOKEN\fP(* \fBANTLR3_BASE_TREE_ADAPTOR_struct::createToken\fP)(struct \fBANTLR3_BASE_TREE_ADAPTOR_struct\fP *adaptor, \fBANTLR3_UINT32\fP tokenType, \fBpANTLR3_UINT8\fP text)"
.PP
Referenced by ANTLR3_TREE_ADAPTORNew(), and createTypeText().
.SS "\fBpANTLR3_COMMON_TOKEN\fP(* \fBANTLR3_BASE_TREE_ADAPTOR_struct::createTokenFromToken\fP)(struct \fBANTLR3_BASE_TREE_ADAPTOR_struct\fP *adaptor, \fBpANTLR3_COMMON_TOKEN\fP fromToken)"
.PP
Referenced by ANTLR3_TREE_ADAPTORNew(), createTypeToken(), and createTypeTokenText().
.SS "void*(* \fBANTLR3_BASE_TREE_ADAPTOR_struct::createTypeText\fP)(struct \fBANTLR3_BASE_TREE_ADAPTOR_struct\fP *adaptor, \fBANTLR3_UINT32\fP tokenType, \fBpANTLR3_UINT8\fP text)"
.PP
Referenced by antlr3BaseTreeAdaptorInit(), and errorNode().
.SS "void*(* \fBANTLR3_BASE_TREE_ADAPTOR_struct::createTypeToken\fP)(struct \fBANTLR3_BASE_TREE_ADAPTOR_struct\fP *adaptor, \fBANTLR3_UINT32\fP tokenType, \fBpANTLR3_COMMON_TOKEN\fP fromToken)"
.PP
Referenced by antlr3BaseTreeAdaptorInit().
.SS "void*(* \fBANTLR3_BASE_TREE_ADAPTOR_struct::createTypeTokenText\fP)(struct \fBANTLR3_BASE_TREE_ADAPTOR_struct\fP *adaptor, \fBANTLR3_UINT32\fP tokenType, \fBpANTLR3_COMMON_TOKEN\fP fromToken, \fBpANTLR3_UINT8\fP text)"
.PP
Referenced by antlr3BaseTreeAdaptorInit().
.SS "\fBpANTLR3_DEBUG_EVENT_LISTENER\fP \fBANTLR3_BASE_TREE_ADAPTOR_struct::debugger\fP"
.PP
If set to something other than NULL, then this structure is points to an instance of the debugger interface. 
.PP
In general, the debugger is only referenced internally in recovery/error operations so that it does not cause overhead by having to check this pointer in every function/method 
.PP
Referenced by dbgAddChild(), dbgAddChildToken(), dbgBecomeRoot(), dbgBecomeRootToken(), dbgCreate(), dbgCreateTypeText(), dbgCreateTypeToken(), dbgCreateTypeTokenText(), dbgNil(), dbgSetTokenBoundaries(), and simulateTreeConstruction().
.SS "void(* \fBANTLR3_BASE_TREE_ADAPTOR_struct::deleteChild\fP)(struct \fBANTLR3_BASE_TREE_ADAPTOR_struct\fP *adaptor, void *t, \fBANTLR3_UINT32\fP i)"
.PP
Referenced by ANTLR3_TREE_ADAPTORNew().
.SS "void*(* \fBANTLR3_BASE_TREE_ADAPTOR_struct::dupNode\fP)(struct \fBANTLR3_BASE_TREE_ADAPTOR_struct\fP *adaptor, void *treeNode)"
.PP
Referenced by ANTLR3_TREE_ADAPTORNew(), dupTree(), nextNode(), and toTreeNode().
.SS "void*(* \fBANTLR3_BASE_TREE_ADAPTOR_struct::dupTree\fP)(struct \fBANTLR3_BASE_TREE_ADAPTOR_struct\fP *adaptor, void *tree)"
.PP
Referenced by antlr3BaseTreeAdaptorInit().
.SS "void*(* \fBANTLR3_BASE_TREE_ADAPTOR_struct::dupTreeTT\fP)(struct \fBANTLR3_BASE_TREE_ADAPTOR_struct\fP *adaptor, void *t, void *tree)"
.PP
Referenced by antlr3BaseTreeAdaptorInit(), dbgDupTree(), dupTree(), and dupTreeTT().
.SS "void*(* \fBANTLR3_BASE_TREE_ADAPTOR_struct::errorNode\fP)(struct \fBANTLR3_BASE_TREE_ADAPTOR_struct\fP *adaptor, \fBpANTLR3_TOKEN_STREAM\fP tnstream, \fBpANTLR3_COMMON_TOKEN\fP startToken, \fBpANTLR3_COMMON_TOKEN\fP stopToken, \fBpANTLR3_EXCEPTION\fP e)"
.PP
Referenced by ANTLR3_TREE_ADAPTORNew().
.SS "void(* \fBANTLR3_BASE_TREE_ADAPTOR_struct::free\fP)(struct \fBANTLR3_BASE_TREE_ADAPTOR_struct\fP *adaptor)"
.PP
Referenced by ANTLR3_TREE_ADAPTORNew(), antlr3CommonTreeNodeStreamFree(), and antlr3CommonTreeNodeStreamNew().
.SS "void*(* \fBANTLR3_BASE_TREE_ADAPTOR_struct::getChild\fP)(struct \fBANTLR3_BASE_TREE_ADAPTOR_struct\fP *adaptor, void *t, \fBANTLR3_UINT32\fP i)"
.PP
Referenced by ANTLR3_TREE_ADAPTORNew(), antlr3BaseTreeAdaptorInit(), defineDotEdges(), defineDotNodes(), dupTreeTT(), fillBuffer(), and simulateTreeConstruction().
.SS "\fBANTLR3_UINT32\fP(* \fBANTLR3_BASE_TREE_ADAPTOR_struct::getChildCount\fP)(struct \fBANTLR3_BASE_TREE_ADAPTOR_struct\fP *adaptor, void *)"
.PP
Referenced by ANTLR3_TREE_ADAPTORNew(), antlr3BaseTreeAdaptorInit(), defineDotEdges(), defineDotNodes(), dupTreeTT(), and simulateTreeConstruction().
.SS "\fBANTLR3_INT32\fP(* \fBANTLR3_BASE_TREE_ADAPTOR_struct::getChildIndex\fP)(struct \fBANTLR3_BASE_TREE_ADAPTOR_struct\fP *adaptor, void *t)"
.PP
Referenced by ANTLR3_TREE_ADAPTORNew().
.SS "void*(* \fBANTLR3_BASE_TREE_ADAPTOR_struct::getParent\fP)(struct \fBANTLR3_BASE_TREE_ADAPTOR_struct\fP *adaptor, void *child)"
.PP
Referenced by ANTLR3_TREE_ADAPTORNew().
.SS "\fBpANTLR3_STRING\fP(* \fBANTLR3_BASE_TREE_ADAPTOR_struct::getText\fP)(struct \fBANTLR3_BASE_TREE_ADAPTOR_struct\fP *adaptor, void *t)"
.PP
Referenced by ANTLR3_TREE_ADAPTORNew(), antlr3BaseTreeAdaptorInit(), defineDotEdges(), defineDotNodes(), makeDot(), and serializeNode().
.SS "\fBpANTLR3_COMMON_TOKEN\fP(* \fBANTLR3_BASE_TREE_ADAPTOR_struct::getToken\fP)(struct \fBANTLR3_BASE_TREE_ADAPTOR_struct\fP *adaptor, void *t)"
.PP
Referenced by serializeNode().
.SS "\fBANTLR3_MARKER\fP(* \fBANTLR3_BASE_TREE_ADAPTOR_struct::getTokenStartIndex\fP)(struct \fBANTLR3_BASE_TREE_ADAPTOR_struct\fP *adaptor, void *t)"
.PP
Referenced by ANTLR3_TREE_ADAPTORNew(), and serializeNode().
.SS "\fBANTLR3_MARKER\fP(* \fBANTLR3_BASE_TREE_ADAPTOR_struct::getTokenStopIndex\fP)(struct \fBANTLR3_BASE_TREE_ADAPTOR_struct\fP *adaptor, void *t)"
.PP
Referenced by ANTLR3_TREE_ADAPTORNew().
.SS "\fBANTLR3_UINT32\fP(* \fBANTLR3_BASE_TREE_ADAPTOR_struct::getType\fP)(struct \fBANTLR3_BASE_TREE_ADAPTOR_struct\fP *adaptor, void *t)"
.PP
Referenced by ANTLR3_TREE_ADAPTORNew(), antlr3BaseTreeAdaptorInit(), and serializeNode().
.SS "\fBANTLR3_UINT32\fP(* \fBANTLR3_BASE_TREE_ADAPTOR_struct::getUniqueID\fP)(struct \fBANTLR3_BASE_TREE_ADAPTOR_struct\fP *adaptor, void *)"
.PP
Referenced by antlr3BaseTreeAdaptorInit(), and serializeNode().
.SS "\fBANTLR3_BOOLEAN\fP(* \fBANTLR3_BASE_TREE_ADAPTOR_struct::isNilNode\fP)(struct \fBANTLR3_BASE_TREE_ADAPTOR_struct\fP *adaptor, void *t)"
.PP
Referenced by antlr3BaseTreeAdaptorInit(), and fillBuffer().
.SS "\fBpANTLR3_STRING\fP(* \fBANTLR3_BASE_TREE_ADAPTOR_struct::makeDot\fP)(struct \fBANTLR3_BASE_TREE_ADAPTOR_struct\fP *adaptor, void *theTree)"
.PP
Produce a DOT (see graphviz freeware suite) from a base tree. 
.PP
Referenced by antlr3BaseTreeAdaptorInit().
.SS "void*(* \fBANTLR3_BASE_TREE_ADAPTOR_struct::nilNode\fP)(struct \fBANTLR3_BASE_TREE_ADAPTOR_struct\fP *adaptor)"
.PP
Referenced by antlr3BaseTreeAdaptorInit().
.SS "void(* \fBANTLR3_BASE_TREE_ADAPTOR_struct::replaceChildren\fP)(struct \fBANTLR3_BASE_TREE_ADAPTOR_struct\fP *adaptor, void *parent, \fBANTLR3_INT32\fP startChildIndex, \fBANTLR3_INT32\fP stopChildIndex, void *t)"
.PP
Replace from start to stop child index of parent with t, which might be a list. 
.PP
Number of children may be different after this call.
.PP
If parent is null, don't do anything; must be at root of overall tree. Can't replace whatever points to the parent externally. Do nothing. 
.PP
Referenced by ANTLR3_TREE_ADAPTORNew().
.SS "void*(* \fBANTLR3_BASE_TREE_ADAPTOR_struct::rulePostProcessing\fP)(struct \fBANTLR3_BASE_TREE_ADAPTOR_struct\fP *adaptor, void *root)"
.PP
Referenced by antlr3BaseTreeAdaptorInit().
.SS "void(* \fBANTLR3_BASE_TREE_ADAPTOR_struct::setChild\fP)(struct \fBANTLR3_BASE_TREE_ADAPTOR_struct\fP *adaptor, void *t, \fBANTLR3_UINT32\fP i, void *child)"
.PP
Referenced by ANTLR3_TREE_ADAPTORNew().
.SS "void(* \fBANTLR3_BASE_TREE_ADAPTOR_struct::setChildIndex\fP)(struct \fBANTLR3_BASE_TREE_ADAPTOR_struct\fP *adaptor, void *t, \fBANTLR3_UINT32\fP i)"
.PP
Referenced by ANTLR3_TREE_ADAPTORNew(), and dupTreeTT().
.SS "void(* \fBANTLR3_BASE_TREE_ADAPTOR_struct::setDebugEventListener\fP)(struct \fBANTLR3_BASE_TREE_ADAPTOR_struct\fP *adaptor, \fBpANTLR3_DEBUG_EVENT_LISTENER\fP \fBdebugger\fP)"
.PP
Referenced by ANTLR3_TREE_ADAPTORNew().
.SS "void(* \fBANTLR3_BASE_TREE_ADAPTOR_struct::setParent\fP)(struct \fBANTLR3_BASE_TREE_ADAPTOR_struct\fP *adaptor, void *child, void *parent)"
.PP
Referenced by ANTLR3_TREE_ADAPTORNew(), and dupTreeTT().
.SS "void(* \fBANTLR3_BASE_TREE_ADAPTOR_struct::setText\fP)(struct \fBANTLR3_BASE_TREE_ADAPTOR_struct\fP *adaptor, \fBpANTLR3_STRING\fP t)"
.PP
Referenced by antlr3BaseTreeAdaptorInit().
.SS "void(* \fBANTLR3_BASE_TREE_ADAPTOR_struct::setText8\fP)(struct \fBANTLR3_BASE_TREE_ADAPTOR_struct\fP *adaptor, \fBpANTLR3_UINT8\fP t)"
.PP
Referenced by antlr3BaseTreeAdaptorInit().
.SS "void(* \fBANTLR3_BASE_TREE_ADAPTOR_struct::setTokenBoundaries\fP)(struct \fBANTLR3_BASE_TREE_ADAPTOR_struct\fP *adaptor, void *t, \fBpANTLR3_COMMON_TOKEN\fP startToken, \fBpANTLR3_COMMON_TOKEN\fP stopToken)"
.PP
Referenced by ANTLR3_TREE_ADAPTORDebugNew(), ANTLR3_TREE_ADAPTORNew(), and setDebugEventListener().
.SS "void(* \fBANTLR3_BASE_TREE_ADAPTOR_struct::setType\fP)(struct \fBANTLR3_BASE_TREE_ADAPTOR_struct\fP *adaptor, void *t, \fBANTLR3_UINT32\fP type)"
.PP
Referenced by antlr3BaseTreeAdaptorInit().
.SS "\fBpANTLR3_STRING_FACTORY\fP \fBANTLR3_BASE_TREE_ADAPTOR_struct::strFactory\fP"
.PP
We need a string factory for creating imaginary tokens, we take this from the stream we are supplied to walk. 
.PP
Referenced by ANTLR3_TREE_ADAPTORNew(), createToken(), createTokenFromToken(), and makeDot().
.SS "void* \fBANTLR3_BASE_TREE_ADAPTOR_struct::super\fP"
.PP
Pointer to any enclosing structure/interface that contains this structure. 
.PP
Referenced by add(), ANTLR3_TREE_ADAPTORNew(), create(), ctaFree(), freeNodeRS(), and freeRS().
.SS "\fBpANTLR3_TOKEN_FACTORY\fP \fBANTLR3_BASE_TREE_ADAPTOR_struct::tokenFactory\fP"
.PP
Referenced by ANTLR3_TREE_ADAPTORNew(), createToken(), createTokenFromToken(), and ctaFree().

.SH "Author"
.PP 
Generated automatically by Doxygen for ANTLR3C from the source code.
