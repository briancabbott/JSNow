.TH "src/antlr3encodings.c" 3 "29 Nov 2010" "Version 3.3" "ANTLR3C" \" -*- nroff -*-
.ad l
.nh
.SH NAME
src/antlr3encodings.c \- 
.SH SYNOPSIS
.br
.PP
\fC#include <antlr3.h>\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "ANTLR3_API \fBANTLR3_UCHAR\fP \fBantlr3c8toAntlrc\fP (\fBANTLR3_INT8\fP inc)"
.br
.RI "\fIProvides basic utility functions to convert between the various Unicode character conversions. \fP"
.in -1c
.SH "Function Documentation"
.PP 
.SS "ANTLR3_API \fBANTLR3_UCHAR\fP antlr3c8toAntlrc (\fBANTLR3_INT8\fP inc)"
.PP
Provides basic utility functions to convert between the various Unicode character conversions. 
.PP
There are of course various packages that could be used instead of these functions, but then the Antlr 3 C runtime would be dependant on the particular package. Using ICU for this is a good idea if your project is already dependant on it. Convert 8 bit character to ANTLR char form.
.PP
\fBParameters:\fP
.RS 4
\fIinc\fP Input character to transform from 8 bit form. 
.RE
.PP
\fBReturns:\fP
.RS 4
ANTLR3_UCHAR encoding of the character. 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for ANTLR3C from the source code.
