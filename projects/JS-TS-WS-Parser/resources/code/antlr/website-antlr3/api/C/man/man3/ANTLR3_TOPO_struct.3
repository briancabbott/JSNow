.TH "ANTLR3_TOPO_struct" 3 "29 Nov 2010" "Version 3.3" "ANTLR3C" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ANTLR3_TOPO_struct \- 
.SH SYNOPSIS
.br
.PP
\fC#include <antlr3collections.h>\fP
.PP
.SH "Detailed Description"
.PP 
A topological sort system that given a set of dependencies of a node m on node n, can sort them in dependency order. 

This is a generally useful utility object that does not care what the things are it is sorting. Generally the set to be sorted will be numeric indexes into some other structure such as an ANTLR3_VECTOR. I have provided a sort method that given ANTLR3_VECTOR as an input will sort the vector entries in place, as well as a sort method that just returns an array of the sorted noded indexes, in case you are not sorting ANTLR3_VECTORS but some set of your own device.
.PP
Of the two main algorithms that could be used, I chose to use the depth first search for unvisited nodes as a) This runs in linear time, and b) it is what we used in the ANTLR Tool to perform a topological sort of the input grammar files based on their dependencies. 
.SS "Data Fields"

.in +1c
.ti -1c
.RI "void(* \fBaddEdge\fP )(struct \fBANTLR3_TOPO_struct\fP *topo, \fBANTLR3_UINT32\fP edge, \fBANTLR3_UINT32\fP dependency)"
.br
.RI "\fIA method that adds an edge from one node to another. \fP"
.ti -1c
.RI "\fBpANTLR3_UINT32\fP \fBcycle\fP"
.br
.RI "\fIA vector used to detect cycles in the edge dependecies. \fP"
.ti -1c
.RI "\fBANTLR3_UINT32\fP \fBcycleMark\fP"
.br
.RI "\fIA watermark used to accumulate potential cycles in the cycle array. \fP"
.ti -1c
.RI "\fBpANTLR3_BITSET\fP * \fBedges\fP"
.br
.RI "\fIA vector of vectors of edges, built by calling the addEdge method() to indicate that node number n depends on node number m. \fP"
.ti -1c
.RI "void(* \fBfree\fP )(struct \fBANTLR3_TOPO_struct\fP *topo)"
.br
.RI "\fIA method to free this structure and any associated memory. \fP"
.ti -1c
.RI "\fBANTLR3_BOOLEAN\fP \fBhasCycle\fP"
.br
.RI "\fIA flag that indicates the algorithm found a cycle in the edges such as 9->8->1->9 If this flag is set after you have called one of the sort routines then the detected cycle will be contained in the cycle array and cycleLimit will point to the one after the last entry in the cycle. \fP"
.ti -1c
.RI "\fBANTLR3_UINT32\fP \fBlimit\fP"
.br
.RI "\fIOne more than the largest node index that is contained in edges/sorted. \fP"
.ti -1c
.RI "\fBpANTLR3_UINT32\fP \fBsorted\fP"
.br
.RI "\fIA vector used to build up the sorted output order. \fP"
.ti -1c
.RI "\fBpANTLR3_UINT32\fP(* \fBsortToArray\fP )(struct \fBANTLR3_TOPO_struct\fP *topo)"
.br
.RI "\fIA method that returns a pointer to an array of sorted node indexes. \fP"
.ti -1c
.RI "void(* \fBsortVector\fP )(struct \fBANTLR3_TOPO_struct\fP *topo, \fBpANTLR3_VECTOR\fP v)"
.br
.RI "\fIA method that sorts the supplied ANTLR3_VECTOR in place based on the previously supplied edge data. \fP"
.ti -1c
.RI "\fBpANTLR3_BITSET\fP \fBvisited\fP"
.br
.RI "\fIThe set of visited nodes as determined by a set entry in the bitmap. \fP"
.in -1c
.SH "Field Documentation"
.PP 
.SS "void(* \fBANTLR3_TOPO_struct::addEdge\fP)(struct \fBANTLR3_TOPO_struct\fP *topo, \fBANTLR3_UINT32\fP edge, \fBANTLR3_UINT32\fP dependency)"
.PP
A method that adds an edge from one node to another. 
.PP
An edge of n -> m indicates that node n is dependent on node m. Note that while building these edges, it is perfectly OK to add nodes out of sequence. So, if you have edges:
.PP
3 -> 0 2 -> 1 1 -> 3
.PP
The you can add them in that order and so add node 3 before nodes 2 and 1 
.PP
Referenced by antlr3TopoNew().
.SS "\fBpANTLR3_UINT32\fP \fBANTLR3_TOPO_struct::cycle\fP"
.PP
A vector used to detect cycles in the edge dependecies. 
.PP
It is used as a stack and each time we descend a node to one of its edges we add the node into this stack. If we find a node that we have already visited in the stack, then it means there wasa cycle such as 9->8->1->9 as the only way a node can be on the stack is if we are currently descnding from it as we remove it from the stack as we exit from descending its dependencies 
.PP
Referenced by antlr3TopoNew(), DFS(), freeTopo(), and sortToArray().
.SS "\fBANTLR3_UINT32\fP \fBANTLR3_TOPO_struct::cycleMark\fP"
.PP
A watermark used to accumulate potential cycles in the cycle array. 
.PP
This should be zero when we are done. Check hasCycle after calling one of the sort methods and if it is ANTLR3_TRUE then you can find the cycle in cycle[0]...cycle[cycleMark-1] 
.PP
Referenced by antlr3TopoNew(), and DFS().
.SS "\fBpANTLR3_BITSET\fP* \fBANTLR3_TOPO_struct::edges\fP"
.PP
A vector of vectors of edges, built by calling the addEdge method() to indicate that node number n depends on node number m. 
.PP
Each entry in the vector contains a bitset, which has a bit index set for each node upon which the entry node depends. 
.PP
Referenced by addEdge(), antlr3TopoNew(), DFS(), freeTopo(), and sortToArray().
.SS "void(* \fBANTLR3_TOPO_struct::free\fP)(struct \fBANTLR3_TOPO_struct\fP *topo)"
.PP
A method to free this structure and any associated memory. 
.PP
Referenced by antlr3TopoNew().
.SS "\fBANTLR3_BOOLEAN\fP \fBANTLR3_TOPO_struct::hasCycle\fP"
.PP
A flag that indicates the algorithm found a cycle in the edges such as 9->8->1->9 If this flag is set after you have called one of the sort routines then the detected cycle will be contained in the cycle array and cycleLimit will point to the one after the last entry in the cycle. 
.PP
Referenced by antlr3TopoNew(), DFS(), sortToArray(), and sortVector().
.SS "\fBANTLR3_UINT32\fP \fBANTLR3_TOPO_struct::limit\fP"
.PP
One more than the largest node index that is contained in edges/sorted. 
.PP
Referenced by addEdge(), antlr3TopoNew(), DFS(), freeTopo(), sortToArray(), and sortVector().
.SS "\fBpANTLR3_UINT32\fP \fBANTLR3_TOPO_struct::sorted\fP"
.PP
A vector used to build up the sorted output order. 
.PP
Note that as the vector contains UINT32 then the maximum node index is 'limited' to 2^32, as nodes should be zero based. 
.PP
Referenced by antlr3TopoNew(), DFS(), freeTopo(), sortToArray(), and sortVector().
.SS "\fBpANTLR3_UINT32\fP(* \fBANTLR3_TOPO_struct::sortToArray\fP)(struct \fBANTLR3_TOPO_struct\fP *topo)"
.PP
A method that returns a pointer to an array of sorted node indexes. 
.PP
The array is sorted in topological sorted order. Note that the array is only as large as the largest node index you created an edge for. This means that if you had an input of 32 nodes, but that largest node with an edge was 16, then the returned array will be the sorted order of the first 16 nodes and the last 16 nodes of your array are basically fine as they are as they had no dependencies and do not need any particular sort order.
.PP
NB: If the structure that contains the array is freed, then the sorted array will be freed too so you should use the value of limit to make a long term copy of this array if you do not want to keep the topo structure around as well. 
.PP
Referenced by antlr3TopoNew(), and sortVector().
.SS "void(* \fBANTLR3_TOPO_struct::sortVector\fP)(struct \fBANTLR3_TOPO_struct\fP *topo, \fBpANTLR3_VECTOR\fP v)"
.PP
A method that sorts the supplied ANTLR3_VECTOR in place based on the previously supplied edge data. 
.PP
Referenced by antlr3TopoNew().
.SS "\fBpANTLR3_BITSET\fP \fBANTLR3_TOPO_struct::visited\fP"
.PP
The set of visited nodes as determined by a set entry in the bitmap. 
.PP
Referenced by antlr3TopoNew(), DFS(), freeTopo(), and sortToArray().

.SH "Author"
.PP 
Generated automatically by Doxygen for ANTLR3C from the source code.
