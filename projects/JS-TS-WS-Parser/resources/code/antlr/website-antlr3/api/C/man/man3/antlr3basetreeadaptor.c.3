.TH "src/antlr3basetreeadaptor.c" 3 "29 Nov 2010" "Version 3.3" "ANTLR3C" \" -*- nroff -*-
.ad l
.nh
.SH NAME
src/antlr3basetreeadaptor.c \- 
.SH "Detailed Description"
.PP 
Contains the base functions that all tree adaptors start with. 

this implementation can then be overridden by any higher implementation. 
.SH SYNOPSIS
.br
.PP
\fC#include <antlr3basetreeadaptor.h>\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "static void \fBaddChild\fP (\fBpANTLR3_BASE_TREE_ADAPTOR\fP adaptor, \fBpANTLR3_BASE_TREE\fP t, \fBpANTLR3_BASE_TREE\fP child)"
.br
.RI "\fIAdd a child to the tree t. \fP"
.ti -1c
.RI "static void \fBaddChildToken\fP (\fBpANTLR3_BASE_TREE_ADAPTOR\fP adaptor, \fBpANTLR3_BASE_TREE\fP t, \fBpANTLR3_COMMON_TOKEN\fP child)"
.br
.RI "\fIUse the adaptor implementation to add a child node with the supplied token. \fP"
.ti -1c
.RI "ANTLR3_API void \fBantlr3BaseTreeAdaptorInit\fP (\fBpANTLR3_BASE_TREE_ADAPTOR\fP adaptor, \fBpANTLR3_DEBUG_EVENT_LISTENER\fP debugger)"
.br
.RI "\fIGiven a pointer to a base tree adaptor structure (which is usually embedded in the super class the implements the tree adaptor used in the parse), initialize its function pointers and so on. \fP"
.ti -1c
.RI "static \fBpANTLR3_BASE_TREE\fP \fBbecomeRoot\fP (\fBpANTLR3_BASE_TREE_ADAPTOR\fP adaptor, \fBpANTLR3_BASE_TREE\fP newRootTree, \fBpANTLR3_BASE_TREE\fP oldRootTree)"
.br
.RI "\fIIf oldRoot is a nil root, just copy or move the children to newRoot. \fP"
.ti -1c
.RI "static \fBpANTLR3_BASE_TREE\fP \fBbecomeRootToken\fP (\fBpANTLR3_BASE_TREE_ADAPTOR\fP adaptor, void *newRoot, \fBpANTLR3_BASE_TREE\fP oldRoot)"
.br
.RI "\fIUse the adaptor interface to set a new tree node with the supplied token to the root of the tree. \fP"
.ti -1c
.RI "static \fBpANTLR3_BASE_TREE\fP \fBcreateTypeText\fP (\fBpANTLR3_BASE_TREE_ADAPTOR\fP adaptor, \fBANTLR3_UINT32\fP tokenType, \fBpANTLR3_UINT8\fP text)"
.br
.ti -1c
.RI "static \fBpANTLR3_BASE_TREE\fP \fBcreateTypeToken\fP (\fBpANTLR3_BASE_TREE_ADAPTOR\fP adaptor, \fBANTLR3_UINT32\fP tokenType, \fBpANTLR3_COMMON_TOKEN\fP fromToken)"
.br
.RI "\fIUse the super class supplied \fBcreate()\fP method to create a new node from the supplied token. \fP"
.ti -1c
.RI "static \fBpANTLR3_BASE_TREE\fP \fBcreateTypeTokenText\fP (\fBpANTLR3_BASE_TREE_ADAPTOR\fP adaptor, \fBANTLR3_UINT32\fP tokenType, \fBpANTLR3_COMMON_TOKEN\fP fromToken, \fBpANTLR3_UINT8\fP text)"
.br
.ti -1c
.RI "static void \fBdbgAddChild\fP (\fBpANTLR3_BASE_TREE_ADAPTOR\fP adaptor, \fBpANTLR3_BASE_TREE\fP t, \fBpANTLR3_BASE_TREE\fP child)"
.br
.ti -1c
.RI "static void \fBdbgAddChildToken\fP (\fBpANTLR3_BASE_TREE_ADAPTOR\fP adaptor, \fBpANTLR3_BASE_TREE\fP t, \fBpANTLR3_COMMON_TOKEN\fP child)"
.br
.ti -1c
.RI "static \fBpANTLR3_BASE_TREE\fP \fBdbgBecomeRoot\fP (\fBpANTLR3_BASE_TREE_ADAPTOR\fP adaptor, \fBpANTLR3_BASE_TREE\fP newRoot, \fBpANTLR3_BASE_TREE\fP oldRoot)"
.br
.ti -1c
.RI "static \fBpANTLR3_BASE_TREE\fP \fBdbgBecomeRootToken\fP (\fBpANTLR3_BASE_TREE_ADAPTOR\fP adaptor, void *newRoot, \fBpANTLR3_BASE_TREE\fP oldRoot)"
.br
.ti -1c
.RI "static \fBpANTLR3_BASE_TREE\fP \fBdbgCreateTypeText\fP (\fBpANTLR3_BASE_TREE_ADAPTOR\fP adaptor, \fBANTLR3_UINT32\fP tokenType, \fBpANTLR3_UINT8\fP text)"
.br
.ti -1c
.RI "static \fBpANTLR3_BASE_TREE\fP \fBdbgCreateTypeToken\fP (\fBpANTLR3_BASE_TREE_ADAPTOR\fP adaptor, \fBANTLR3_UINT32\fP tokenType, \fBpANTLR3_COMMON_TOKEN\fP fromToken)"
.br
.ti -1c
.RI "static \fBpANTLR3_BASE_TREE\fP \fBdbgCreateTypeTokenText\fP (\fBpANTLR3_BASE_TREE_ADAPTOR\fP adaptor, \fBANTLR3_UINT32\fP tokenType, \fBpANTLR3_COMMON_TOKEN\fP fromToken, \fBpANTLR3_UINT8\fP text)"
.br
.ti -1c
.RI "static \fBpANTLR3_BASE_TREE\fP \fBdbgDupTree\fP (\fBpANTLR3_BASE_TREE_ADAPTOR\fP adaptor, \fBpANTLR3_BASE_TREE\fP t)"
.br
.ti -1c
.RI "static \fBpANTLR3_BASE_TREE\fP \fBdbgNil\fP (\fBpANTLR3_BASE_TREE_ADAPTOR\fP adaptor)"
.br
.ti -1c
.RI "static void \fBdefineDotEdges\fP (\fBpANTLR3_BASE_TREE_ADAPTOR\fP adaptor, void *t, \fBpANTLR3_STRING\fP dotSpec)"
.br
.ti -1c
.RI "static void \fBdefineDotNodes\fP (\fBpANTLR3_BASE_TREE_ADAPTOR\fP adaptor, void *t, \fBpANTLR3_STRING\fP dotSpec)"
.br
.ti -1c
.RI "static \fBpANTLR3_BASE_TREE\fP \fBdupTree\fP (\fBpANTLR3_BASE_TREE_ADAPTOR\fP adaptor, \fBpANTLR3_BASE_TREE\fP t)"
.br
.RI "\fIReturn a duplicate of the entire tree (implementation provided by the BASE_TREE interface. \fP"
.ti -1c
.RI "static \fBpANTLR3_BASE_TREE\fP \fBdupTreeTT\fP (\fBpANTLR3_BASE_TREE_ADAPTOR\fP adaptor, \fBpANTLR3_BASE_TREE\fP t, \fBpANTLR3_BASE_TREE\fP parent)"
.br
.ti -1c
.RI "static \fBpANTLR3_BASE_TREE\fP \fBgetChild\fP (\fBpANTLR3_BASE_TREE_ADAPTOR\fP adaptor, \fBpANTLR3_BASE_TREE\fP t, \fBANTLR3_UINT32\fP i)"
.br
.ti -1c
.RI "static \fBANTLR3_UINT32\fP \fBgetChildCount\fP (\fBpANTLR3_BASE_TREE_ADAPTOR\fP adaptor, \fBpANTLR3_BASE_TREE\fP t)"
.br
.ti -1c
.RI "static \fBpANTLR3_STRING\fP \fBgetText\fP (\fBpANTLR3_BASE_TREE_ADAPTOR\fP adaptor, \fBpANTLR3_BASE_TREE\fP t)"
.br
.RI "\fIDummy implementation - will be supplied by super class. \fP"
.ti -1c
.RI "static \fBANTLR3_UINT32\fP \fBgetType\fP (\fBpANTLR3_BASE_TREE_ADAPTOR\fP adaptor, \fBpANTLR3_BASE_TREE\fP t)"
.br
.RI "\fIDummy implementation - will be supplied by super class. \fP"
.ti -1c
.RI "static \fBANTLR3_UINT32\fP \fBgetUniqueID\fP (\fBpANTLR3_BASE_TREE_ADAPTOR\fP adaptor, \fBpANTLR3_BASE_TREE\fP node)"
.br
.RI "\fIReturns a uniqueID for the node. \fP"
.ti -1c
.RI "static \fBANTLR3_BOOLEAN\fP \fBisNilNode\fP (\fBpANTLR3_BASE_TREE_ADAPTOR\fP adaptor, \fBpANTLR3_BASE_TREE\fP t)"
.br
.ti -1c
.RI "static \fBpANTLR3_STRING\fP \fBmakeDot\fP (\fBpANTLR3_BASE_TREE_ADAPTOR\fP adaptor, void *theTree)"
.br
.RI "\fIProduce a DOT specification for graphviz. \fP"
.ti -1c
.RI "static \fBpANTLR3_BASE_TREE\fP \fBnilNode\fP (\fBpANTLR3_BASE_TREE_ADAPTOR\fP adaptor)"
.br
.RI "\fICreate and return a nil tree node (no token payload). \fP"
.ti -1c
.RI "static \fBpANTLR3_BASE_TREE\fP \fBrulePostProcessing\fP (\fBpANTLR3_BASE_TREE_ADAPTOR\fP adaptor, \fBpANTLR3_BASE_TREE\fP root)"
.br
.RI "\fITransform ^(nil x) to x. \fP"
.ti -1c
.RI "static void \fBsetText\fP (\fBpANTLR3_BASE_TREE_ADAPTOR\fP adaptor, \fBpANTLR3_STRING\fP t)"
.br
.RI "\fIDummy implementation - will be supplied by super class. \fP"
.ti -1c
.RI "static void \fBsetText8\fP (\fBpANTLR3_BASE_TREE_ADAPTOR\fP adaptor, \fBpANTLR3_UINT8\fP t)"
.br
.RI "\fIDummy implementation - will be supplied by super class. \fP"
.ti -1c
.RI "static void \fBsetType\fP (\fBpANTLR3_BASE_TREE_ADAPTOR\fP adaptor, \fBpANTLR3_BASE_TREE\fP t, \fBANTLR3_UINT32\fP type)"
.br
.RI "\fIDummy implementation - will be supplied by super class. \fP"
.ti -1c
.RI "static void \fBsimulateTreeConstruction\fP (\fBpANTLR3_BASE_TREE_ADAPTOR\fP adaptor, \fBpANTLR3_BASE_TREE\fP tree)"
.br
.RI "\fISends the required debugging events for duplicating a tree to the debugger. \fP"
.in -1c
.SH "Function Documentation"
.PP 
.SS "static void addChild (\fBpANTLR3_BASE_TREE_ADAPTOR\fP adaptor, \fBpANTLR3_BASE_TREE\fP t, \fBpANTLR3_BASE_TREE\fP child)\fC [static]\fP"
.PP
Add a child to the tree t. 
.PP
If child is a flat tree (a list), make all in list children of t. Warning: if t has no children, but child does and child isNilNode then it is ok to move children to t via t.children = child.children; i.e., without copying the array. This is for construction and I'm not sure it's completely general for a tree's addChild method to work this way. Make sure you differentiate between your tree's addChild and this parser tree construction addChild if it's not ok to move children to t with a simple assignment. 
.PP
References ANTLR3_BASE_TREE_struct::addChild.
.SS "static void addChildToken (\fBpANTLR3_BASE_TREE_ADAPTOR\fP adaptor, \fBpANTLR3_BASE_TREE\fP t, \fBpANTLR3_COMMON_TOKEN\fP child)\fC [static]\fP"
.PP
Use the adaptor implementation to add a child node with the supplied token. 
.PP
References ANTLR3_BASE_TREE_ADAPTOR_struct::addChild, and ANTLR3_BASE_TREE_ADAPTOR_struct::create.
.PP
Referenced by antlr3BaseTreeAdaptorInit().
.SS "ANTLR3_API void antlr3BaseTreeAdaptorInit (\fBpANTLR3_BASE_TREE_ADAPTOR\fP adaptor, \fBpANTLR3_DEBUG_EVENT_LISTENER\fP debugger)"
.PP
Given a pointer to a base tree adaptor structure (which is usually embedded in the super class the implements the tree adaptor used in the parse), initialize its function pointers and so on. 
.PP
References ANTLR3_DEBUG_EVENT_LISTENER_struct::adaptor, addChild(), ANTLR3_BASE_TREE_ADAPTOR_struct::addChild, addChildToken(), ANTLR3_BASE_TREE_ADAPTOR_struct::addChildToken, becomeRoot(), ANTLR3_BASE_TREE_ADAPTOR_struct::becomeRoot, becomeRootToken(), ANTLR3_BASE_TREE_ADAPTOR_struct::becomeRootToken, createTypeText(), ANTLR3_BASE_TREE_ADAPTOR_struct::createTypeText, createTypeToken(), ANTLR3_BASE_TREE_ADAPTOR_struct::createTypeToken, createTypeTokenText(), ANTLR3_BASE_TREE_ADAPTOR_struct::createTypeTokenText, dbgAddChild(), dbgAddChildToken(), dbgBecomeRoot(), dbgBecomeRootToken(), dbgCreateTypeText(), dbgCreateTypeToken(), dbgCreateTypeTokenText(), dbgDupTree(), dbgNil(), dupTree(), ANTLR3_BASE_TREE_ADAPTOR_struct::dupTree, dupTreeTT(), ANTLR3_BASE_TREE_ADAPTOR_struct::dupTreeTT, getChild(), ANTLR3_BASE_TREE_ADAPTOR_struct::getChild, getChildCount(), ANTLR3_BASE_TREE_ADAPTOR_struct::getChildCount, getText(), ANTLR3_BASE_TREE_ADAPTOR_struct::getText, getType(), ANTLR3_BASE_TREE_ADAPTOR_struct::getType, getUniqueID(), ANTLR3_BASE_TREE_ADAPTOR_struct::getUniqueID, isNilNode(), ANTLR3_BASE_TREE_ADAPTOR_struct::isNilNode, makeDot(), ANTLR3_BASE_TREE_ADAPTOR_struct::makeDot, nilNode(), ANTLR3_BASE_TREE_ADAPTOR_struct::nilNode, rulePostProcessing(), ANTLR3_BASE_TREE_ADAPTOR_struct::rulePostProcessing, setText(), ANTLR3_BASE_TREE_ADAPTOR_struct::setText, setText8(), ANTLR3_BASE_TREE_ADAPTOR_struct::setText8, setType(), and ANTLR3_BASE_TREE_ADAPTOR_struct::setType.
.PP
Referenced by ANTLR3_TREE_ADAPTORDebugNew(), ANTLR3_TREE_ADAPTORNew(), and setDebugEventListener().
.SS "static \fBpANTLR3_BASE_TREE\fP becomeRoot (\fBpANTLR3_BASE_TREE_ADAPTOR\fP adaptor, \fBpANTLR3_BASE_TREE\fP newRootTree, \fBpANTLR3_BASE_TREE\fP oldRootTree)\fC [static]\fP"
.PP
If oldRoot is a nil root, just copy or move the children to newRoot. 
.PP
If not a nil root, make oldRoot a child of newRoot.
.PP
.PP
.nf
    old=^(nil a b c), new=r yields ^(r a b c)
    old=^(a b c), new=r yields ^(r ^(a b c))
.fi
.PP
.PP
If newRoot is a nil-rooted single child tree, use the single child as the new root node.
.PP
.PP
.nf
    old=^(nil a b c), new=^(nil r) yields ^(r a b c)
    old=^(a b c), new=^(nil r) yields ^(r ^(a b c))
.fi
.PP
.PP
If oldRoot was null, it's ok, just return newRoot (even if isNilNode).
.PP
.PP
.nf
    old=null, new=r yields r
    old=null, new=^(nil r) yields ^(nil r)
.fi
.PP
.PP
Return newRoot. Throw an exception if newRoot is not a simple node or nil root with a single child node--it must be a root node. If newRoot is \fC^(nil x)</endcode> return x as newRoot.\fP
.PP
\fC Be advised that it's ok for newRoot to point at oldRoot's children; i.e., you don't have to copy the list. We are constructing these nodes so we should have this control for efficiency. \fP
.PP
References ANTLR3_BASE_TREE_struct::addChild, ANTLR3_FPRINTF, ANTLR3_BASE_TREE_struct::getChild, ANTLR3_BASE_TREE_struct::getChildCount, ANTLR3_BASE_TREE_struct::isNilNode, and ANTLR3_BASE_TREE_struct::reuse.
.PP
Referenced by antlr3BaseTreeAdaptorInit(), antlr3DebugListenerNew(), and dbgBecomeRoot().
.SS "static \fBpANTLR3_BASE_TREE\fP becomeRootToken (\fBpANTLR3_BASE_TREE_ADAPTOR\fP adaptor, void * newRoot, \fBpANTLR3_BASE_TREE\fP oldRoot)\fC [static]\fP"
.PP
Use the adaptor interface to set a new tree node with the supplied token to the root of the tree. 
.PP
References ANTLR3_BASE_TREE_ADAPTOR_struct::becomeRoot, and ANTLR3_BASE_TREE_ADAPTOR_struct::create.
.PP
Referenced by antlr3BaseTreeAdaptorInit().
.SS "static \fBpANTLR3_BASE_TREE\fP createTypeText (\fBpANTLR3_BASE_TREE_ADAPTOR\fP adaptor, \fBANTLR3_UINT32\fP tokenType, \fBpANTLR3_UINT8\fP text)\fC [static]\fP"
.PP
References ANTLR3_BASE_TREE_ADAPTOR_struct::create, and ANTLR3_BASE_TREE_ADAPTOR_struct::createToken.
.PP
Referenced by antlr3BaseTreeAdaptorInit(), and dbgCreateTypeText().
.SS "static \fBpANTLR3_BASE_TREE\fP createTypeToken (\fBpANTLR3_BASE_TREE_ADAPTOR\fP adaptor, \fBANTLR3_UINT32\fP tokenType, \fBpANTLR3_COMMON_TOKEN\fP fromToken)\fC [static]\fP"
.PP
Use the super class supplied \fBcreate()\fP method to create a new node from the supplied token. 
.PP
References ANTLR3_BASE_TREE_ADAPTOR_struct::create, ANTLR3_BASE_TREE_ADAPTOR_struct::createTokenFromToken, and ANTLR3_COMMON_TOKEN_struct::setType.
.PP
Referenced by antlr3BaseTreeAdaptorInit(), and dbgCreateTypeToken().
.SS "static \fBpANTLR3_BASE_TREE\fP createTypeTokenText (\fBpANTLR3_BASE_TREE_ADAPTOR\fP adaptor, \fBANTLR3_UINT32\fP tokenType, \fBpANTLR3_COMMON_TOKEN\fP fromToken, \fBpANTLR3_UINT8\fP text)\fC [static]\fP"
.PP
References ANTLR3_BASE_TREE_ADAPTOR_struct::create, ANTLR3_BASE_TREE_ADAPTOR_struct::createTokenFromToken, ANTLR3_COMMON_TOKEN_struct::setText8, and ANTLR3_COMMON_TOKEN_struct::setType.
.PP
Referenced by antlr3BaseTreeAdaptorInit(), and dbgCreateTypeTokenText().
.SS "static void dbgAddChild (\fBpANTLR3_BASE_TREE_ADAPTOR\fP adaptor, \fBpANTLR3_BASE_TREE\fP t, \fBpANTLR3_BASE_TREE\fP child)\fC [static]\fP"
.PP
References ANTLR3_DEBUG_EVENT_LISTENER_struct::addChild, ANTLR3_BASE_TREE_struct::addChild, and ANTLR3_BASE_TREE_ADAPTOR_struct::debugger.
.PP
Referenced by antlr3BaseTreeAdaptorInit().
.SS "static void dbgAddChildToken (\fBpANTLR3_BASE_TREE_ADAPTOR\fP adaptor, \fBpANTLR3_BASE_TREE\fP t, \fBpANTLR3_COMMON_TOKEN\fP child)\fC [static]\fP"
.PP
References ANTLR3_DEBUG_EVENT_LISTENER_struct::addChild, ANTLR3_BASE_TREE_ADAPTOR_struct::addChild, ANTLR3_BASE_TREE_ADAPTOR_struct::create, and ANTLR3_BASE_TREE_ADAPTOR_struct::debugger.
.PP
Referenced by antlr3BaseTreeAdaptorInit().
.SS "static \fBpANTLR3_BASE_TREE\fP dbgBecomeRoot (\fBpANTLR3_BASE_TREE_ADAPTOR\fP adaptor, \fBpANTLR3_BASE_TREE\fP newRoot, \fBpANTLR3_BASE_TREE\fP oldRoot)\fC [static]\fP"
.PP
References ANTLR3_DEBUG_EVENT_LISTENER_struct::becomeRoot, becomeRoot(), and ANTLR3_BASE_TREE_ADAPTOR_struct::debugger.
.PP
Referenced by antlr3BaseTreeAdaptorInit().
.SS "static \fBpANTLR3_BASE_TREE\fP dbgBecomeRootToken (\fBpANTLR3_BASE_TREE_ADAPTOR\fP adaptor, void * newRoot, \fBpANTLR3_BASE_TREE\fP oldRoot)\fC [static]\fP"
.PP
References ANTLR3_DEBUG_EVENT_LISTENER_struct::becomeRoot, ANTLR3_BASE_TREE_ADAPTOR_struct::becomeRoot, ANTLR3_BASE_TREE_ADAPTOR_struct::create, and ANTLR3_BASE_TREE_ADAPTOR_struct::debugger.
.PP
Referenced by antlr3BaseTreeAdaptorInit().
.SS "static \fBpANTLR3_BASE_TREE\fP dbgCreateTypeText (\fBpANTLR3_BASE_TREE_ADAPTOR\fP adaptor, \fBANTLR3_UINT32\fP tokenType, \fBpANTLR3_UINT8\fP text)\fC [static]\fP"
.PP
References ANTLR3_DEBUG_EVENT_LISTENER_struct::createNode, createTypeText(), and ANTLR3_BASE_TREE_ADAPTOR_struct::debugger.
.PP
Referenced by antlr3BaseTreeAdaptorInit().
.SS "static \fBpANTLR3_BASE_TREE\fP dbgCreateTypeToken (\fBpANTLR3_BASE_TREE_ADAPTOR\fP adaptor, \fBANTLR3_UINT32\fP tokenType, \fBpANTLR3_COMMON_TOKEN\fP fromToken)\fC [static]\fP"
.PP
References ANTLR3_DEBUG_EVENT_LISTENER_struct::createNode, createTypeToken(), and ANTLR3_BASE_TREE_ADAPTOR_struct::debugger.
.PP
Referenced by antlr3BaseTreeAdaptorInit().
.SS "static \fBpANTLR3_BASE_TREE\fP dbgCreateTypeTokenText (\fBpANTLR3_BASE_TREE_ADAPTOR\fP adaptor, \fBANTLR3_UINT32\fP tokenType, \fBpANTLR3_COMMON_TOKEN\fP fromToken, \fBpANTLR3_UINT8\fP text)\fC [static]\fP"
.PP
References ANTLR3_DEBUG_EVENT_LISTENER_struct::createNode, createTypeTokenText(), and ANTLR3_BASE_TREE_ADAPTOR_struct::debugger.
.PP
Referenced by antlr3BaseTreeAdaptorInit().
.SS "\fBpANTLR3_BASE_TREE\fP dbgDupTree (\fBpANTLR3_BASE_TREE_ADAPTOR\fP adaptor, \fBpANTLR3_BASE_TREE\fP t)\fC [static]\fP"
.PP
References ANTLR3_BASE_TREE_ADAPTOR_struct::dupTreeTT, and simulateTreeConstruction().
.PP
Referenced by antlr3BaseTreeAdaptorInit().
.SS "static \fBpANTLR3_BASE_TREE\fP dbgNil (\fBpANTLR3_BASE_TREE_ADAPTOR\fP adaptor)\fC [static]\fP"
.PP
References ANTLR3_BASE_TREE_ADAPTOR_struct::create, ANTLR3_DEBUG_EVENT_LISTENER_struct::createNode, and ANTLR3_BASE_TREE_ADAPTOR_struct::debugger.
.PP
Referenced by antlr3BaseTreeAdaptorInit().
.SS "static void defineDotEdges (\fBpANTLR3_BASE_TREE_ADAPTOR\fP adaptor, void * t, \fBpANTLR3_STRING\fP dotSpec)\fC [static]\fP"
.PP
References ANTLR3_STRING_struct::addc, ANTLR3_STRING_struct::append8, ANTLR3_STRING_struct::charAt, ANTLR3_BASE_TREE_ADAPTOR_struct::getChild, ANTLR3_BASE_TREE_ADAPTOR_struct::getChildCount, ANTLR3_BASE_TREE_ADAPTOR_struct::getText, and ANTLR3_STRING_struct::len.
.PP
Referenced by makeDot().
.SS "static void defineDotNodes (\fBpANTLR3_BASE_TREE_ADAPTOR\fP adaptor, void * t, \fBpANTLR3_STRING\fP dotSpec)\fC [static]\fP"
.PP
References ANTLR3_STRING_struct::addc, ANTLR3_STRING_struct::append8, ANTLR3_STRING_struct::charAt, ANTLR3_BASE_TREE_ADAPTOR_struct::getChild, ANTLR3_BASE_TREE_ADAPTOR_struct::getChildCount, ANTLR3_BASE_TREE_ADAPTOR_struct::getText, and ANTLR3_STRING_struct::len.
.PP
Referenced by makeDot().
.SS "static \fBpANTLR3_BASE_TREE\fP dupTree (\fBpANTLR3_BASE_TREE_ADAPTOR\fP adaptor, \fBpANTLR3_BASE_TREE\fP t)\fC [static]\fP"
.PP
Return a duplicate of the entire tree (implementation provided by the BASE_TREE interface. 
.PP
) 
.PP
References ANTLR3_BASE_TREE_ADAPTOR_struct::dupTreeTT.
.SS "\fBpANTLR3_BASE_TREE\fP dupTreeTT (\fBpANTLR3_BASE_TREE_ADAPTOR\fP adaptor, \fBpANTLR3_BASE_TREE\fP t, \fBpANTLR3_BASE_TREE\fP parent)\fC [static]\fP"
.PP
References ANTLR3_BASE_TREE_ADAPTOR_struct::addChild, ANTLR3_BASE_TREE_struct::dupNode, ANTLR3_BASE_TREE_ADAPTOR_struct::dupTreeTT, ANTLR3_BASE_TREE_ADAPTOR_struct::getChild, ANTLR3_BASE_TREE_ADAPTOR_struct::getChildCount, ANTLR3_BASE_TREE_struct::getChildIndex, ANTLR3_BASE_TREE_ADAPTOR_struct::setChildIndex, and ANTLR3_BASE_TREE_ADAPTOR_struct::setParent.
.PP
Referenced by antlr3BaseTreeAdaptorInit().
.SS "static \fBpANTLR3_BASE_TREE\fP getChild (\fBpANTLR3_BASE_TREE_ADAPTOR\fP adaptor, \fBpANTLR3_BASE_TREE\fP t, \fBANTLR3_UINT32\fP i)\fC [static]\fP"
.PP
References ANTLR3_FPRINTF.
.SS "static \fBANTLR3_UINT32\fP getChildCount (\fBpANTLR3_BASE_TREE_ADAPTOR\fP adaptor, \fBpANTLR3_BASE_TREE\fP t)\fC [static]\fP"
.PP
References ANTLR3_FPRINTF.
.SS "static \fBpANTLR3_STRING\fP getText (\fBpANTLR3_BASE_TREE_ADAPTOR\fP adaptor, \fBpANTLR3_BASE_TREE\fP t)\fC [static]\fP"
.PP
Dummy implementation - will be supplied by super class. 
.PP
References ANTLR3_FPRINTF.
.PP
Referenced by ANTLR3_TREE_ADAPTORNew(), antlr3BaseTreeAdaptorInit(), antlr3LexerNew(), antlr3SetCTAPI(), and antlr3SetTokenAPI().
.SS "static \fBANTLR3_UINT32\fP getType (\fBpANTLR3_BASE_TREE_ADAPTOR\fP adaptor, \fBpANTLR3_BASE_TREE\fP t)\fC [static]\fP"
.PP
Dummy implementation - will be supplied by super class. 
.PP
Referenced by ANTLR3_TREE_ADAPTORNew(), antlr3BaseTreeAdaptorInit(), antlr3SetCTAPI(), and antlr3SetTokenAPI().
.SS "static \fBANTLR3_UINT32\fP getUniqueID (\fBpANTLR3_BASE_TREE_ADAPTOR\fP adaptor, \fBpANTLR3_BASE_TREE\fP node)\fC [static]\fP"
.PP
Returns a uniqueID for the node. 
.PP
Because this is the C implementation we can just use its address suitably converted/cast to an integer. 
.PP
References ANTLR3_UINT32_CAST.
.PP
Referenced by antlr3BaseTreeAdaptorInit().
.SS "static \fBANTLR3_BOOLEAN\fP isNilNode (\fBpANTLR3_BASE_TREE_ADAPTOR\fP adaptor, \fBpANTLR3_BASE_TREE\fP t)\fC [static]\fP"
.PP
References ANTLR3_BASE_TREE_struct::isNilNode.
.PP
Referenced by antlr3BaseTreeAdaptorInit(), and antlr3SetCTAPI().
.SS "static \fBpANTLR3_STRING\fP makeDot (\fBpANTLR3_BASE_TREE_ADAPTOR\fP adaptor, void * theTree)\fC [static]\fP"
.PP
Produce a DOT specification for graphviz. 
.PP
References ANTLR3_STRING_struct::addc, ANTLR3_STRING_struct::append8, ANTLR3_STRING_struct::charAt, defineDotEdges(), defineDotNodes(), ANTLR3_BASE_TREE_ADAPTOR_struct::getText, ANTLR3_STRING_struct::len, ANTLR3_STRING_FACTORY_struct::newStr8, and ANTLR3_BASE_TREE_ADAPTOR_struct::strFactory.
.PP
Referenced by antlr3BaseTreeAdaptorInit().
.SS "static \fBpANTLR3_BASE_TREE\fP nilNode (\fBpANTLR3_BASE_TREE_ADAPTOR\fP adaptor)\fC [static]\fP"
.PP
Create and return a nil tree node (no token payload). 
.PP
References ANTLR3_BASE_TREE_ADAPTOR_struct::create.
.PP
Referenced by antlr3BaseTreeAdaptorInit(), antlr3DebugListenerNew(), fillBuffer(), and toString().
.SS "static \fBpANTLR3_BASE_TREE\fP rulePostProcessing (\fBpANTLR3_BASE_TREE_ADAPTOR\fP adaptor, \fBpANTLR3_BASE_TREE\fP root)\fC [static]\fP"
.PP
Transform ^(nil x) to x. 
.PP
References ANTLR3_BASE_TREE_struct::getChild, ANTLR3_BASE_TREE_struct::getChildCount, ANTLR3_BASE_TREE_struct::isNilNode, ANTLR3_BASE_TREE_struct::reuse, ANTLR3_BASE_TREE_struct::setChildIndex, and ANTLR3_BASE_TREE_struct::setParent.
.PP
Referenced by antlr3BaseTreeAdaptorInit().
.SS "static void setText (\fBpANTLR3_BASE_TREE_ADAPTOR\fP adaptor, \fBpANTLR3_STRING\fP t)\fC [static]\fP"
.PP
Dummy implementation - will be supplied by super class. 
.PP
References ANTLR3_FPRINTF.
.PP
Referenced by antlr3BaseTreeAdaptorInit(), and antlr3SetTokenAPI().
.SS "static void setText8 (\fBpANTLR3_BASE_TREE_ADAPTOR\fP adaptor, \fBpANTLR3_UINT8\fP t)\fC [static]\fP"
.PP
Dummy implementation - will be supplied by super class. 
.PP
References ANTLR3_FPRINTF.
.PP
Referenced by antlr3BaseTreeAdaptorInit(), and antlr3SetTokenAPI().
.SS "static void setType (\fBpANTLR3_BASE_TREE_ADAPTOR\fP adaptor, \fBpANTLR3_BASE_TREE\fP t, \fBANTLR3_UINT32\fP type)\fC [static]\fP"
.PP
Dummy implementation - will be supplied by super class. 
.PP
References ANTLR3_FPRINTF.
.PP
Referenced by antlr3BaseTreeAdaptorInit(), and antlr3SetTokenAPI().
.SS "static void simulateTreeConstruction (\fBpANTLR3_BASE_TREE_ADAPTOR\fP adaptor, \fBpANTLR3_BASE_TREE\fP tree)\fC [static]\fP"
.PP
Sends the required debugging events for duplicating a tree to the debugger. 
.PP
References ANTLR3_DEBUG_EVENT_LISTENER_struct::addChild, ANTLR3_DEBUG_EVENT_LISTENER_struct::createNode, ANTLR3_BASE_TREE_ADAPTOR_struct::debugger, ANTLR3_BASE_TREE_ADAPTOR_struct::getChild, and ANTLR3_BASE_TREE_ADAPTOR_struct::getChildCount.
.PP
Referenced by dbgDupTree().
.SH "Author"
.PP 
Generated automatically by Doxygen for ANTLR3C from the source code.
