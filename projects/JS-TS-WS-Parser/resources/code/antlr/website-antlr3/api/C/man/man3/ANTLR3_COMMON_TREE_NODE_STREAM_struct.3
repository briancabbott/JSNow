.TH "ANTLR3_COMMON_TREE_NODE_STREAM_struct" 3 "29 Nov 2010" "Version 3.3" "ANTLR3C" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ANTLR3_COMMON_TREE_NODE_STREAM_struct \- 
.SH SYNOPSIS
.br
.PP
\fC#include <antlr3commontreenodestream.h>\fP
.PP
.SS "Data Fields"

.in +1c
.ti -1c
.RI "\fBANTLR3_MARKER\fP \fBabsoluteNodeIndex\fP"
.br
.RI "\fIWhat node index did we just consume? i=0. \fP"
.ti -1c
.RI "\fBpANTLR3_BASE_TREE_ADAPTOR\fP \fBadaptor\fP"
.br
.RI "\fIPointer to tree adaptor interface that manipulates/builds the tree. \fP"
.ti -1c
.RI "void(* \fBaddLookahead\fP )(struct \fBANTLR3_COMMON_TREE_NODE_STREAM_struct\fP *ctns, \fBpANTLR3_BASE_TREE\fP node)"
.br
.ti -1c
.RI "void(* \fBaddNavigationNode\fP )(struct \fBANTLR3_COMMON_TREE_NODE_STREAM_struct\fP *ctns, \fBANTLR3_UINT32\fP ttype)"
.br
.ti -1c
.RI "\fBANTLR3_INT32\fP \fBcurrentChildIndex\fP"
.br
.RI "\fIWhich child are we currently visiting? If -1 we have not visited this node yet; next \fBconsume()\fP request will set currentIndex to 0. \fP"
.ti -1c
.RI "\fBpANTLR3_BASE_TREE\fP \fBcurrentNode\fP"
.br
.RI "\fIWhich node are we currently visiting? \fP"
.ti -1c
.RI "\fBANTLR3_COMMON_TREE\fP \fBDOWN\fP"
.br
.RI "\fIDummy tree node that indicates a descent into a child tree. \fP"
.ti -1c
.RI "\fBANTLR3_COMMON_TREE\fP \fBEOF_NODE\fP"
.br
.RI "\fIDummy tree node that indicates the termination point of the tree. \fP"
.ti -1c
.RI "void(* \fBfill\fP )(struct \fBANTLR3_COMMON_TREE_NODE_STREAM_struct\fP *ctns, \fBANTLR3_INT32\fP k)"
.br
.ti -1c
.RI "void(* \fBfree\fP )(struct \fBANTLR3_COMMON_TREE_NODE_STREAM_struct\fP *ctns)"
.br
.ti -1c
.RI "\fBANTLR3_UINT32\fP(* \fBgetLookaheadSize\fP )(struct \fBANTLR3_COMMON_TREE_NODE_STREAM_struct\fP *ctns)"
.br
.ti -1c
.RI "\fBpANTLR3_BASE_TREE\fP(* \fBhandleRootnode\fP )(struct \fBANTLR3_COMMON_TREE_NODE_STREAM_struct\fP *ctns)"
.br
.ti -1c
.RI "\fBANTLR3_BOOLEAN\fP(* \fBhasNext\fP )(struct \fBANTLR3_COMMON_TREE_NODE_STREAM_struct\fP *ctns)"
.br
.ti -1c
.RI "\fBANTLR3_BOOLEAN\fP(* \fBhasUniqueNavigationNodes\fP )(struct \fBANTLR3_COMMON_TREE_NODE_STREAM_struct\fP *ctns)"
.br
.ti -1c
.RI "\fBANTLR3_UINT32\fP \fBhead\fP"
.br
.RI "\fIlookAhead[head] is the first symbol of lookahead, LT(1). \fP"
.ti -1c
.RI "\fBANTLR3_COMMON_TREE\fP \fBINVALID_NODE\fP"
.br
.RI "\fIDummy node that is returned if we need to indicate an invalid node for any reason. \fP"
.ti -1c
.RI "\fBANTLR3_BOOLEAN\fP \fBisRewriter\fP"
.br
.RI "\fIIndicates whether this node stream was derived from a prior node stream to be used by a rewriting tree parser for instance. \fP"
.ti -1c
.RI "\fBpANTLR3_BASE_TREE\fP * \fBlookAhead\fP"
.br
.RI "\fIBuffer tree node stream for use with LT(i). \fP"
.ti -1c
.RI "\fBANTLR3_UINT32\fP \fBlookAheadLength\fP"
.br
.RI "\fINumber of elements available in the lookahead buffer at any point in time. \fP"
.ti -1c
.RI "\fBpANTLR3_VECTOR\fP \fBmarkers\fP"
.br
.RI "\fICalls to \fBmark()\fP may be nested so we have to track a stack of them. \fP"
.ti -1c
.RI "\fBpANTLR3_BASE_TREE\fP(* \fBnewDownNode\fP )(struct \fBANTLR3_COMMON_TREE_NODE_STREAM_struct\fP *ctns)"
.br
.ti -1c
.RI "\fBpANTLR3_BASE_TREE\fP(* \fBnewUpNode\fP )(struct \fBANTLR3_COMMON_TREE_NODE_STREAM_struct\fP *ctns)"
.br
.ti -1c
.RI "\fBpANTLR3_BASE_TREE\fP(* \fBnext\fP )(struct \fBANTLR3_COMMON_TREE_NODE_STREAM_struct\fP *ctns)"
.br
.ti -1c
.RI "\fBpANTLR3_VECTOR\fP \fBnodes\fP"
.br
.RI "\fIThe complete mapping from stream index to tree node. \fP"
.ti -1c
.RI "\fBpANTLR3_STACK\fP \fBnodeStack\fP"
.br
.RI "\fIAs we walk down the nodes, we must track parent nodes so we know where to go after walking the last child of a node. \fP"
.ti -1c
.RI "\fBANTLR3_INT32\fP \fBp\fP"
.br
.RI "\fIThe current index into the nodes vector of the current tree we are parsing and possibly rewriting. \fP"
.ti -1c
.RI "\fBANTLR3_INT32\fP(* \fBpop\fP )(struct \fBANTLR3_COMMON_TREE_NODE_STREAM_struct\fP *ctns)"
.br
.ti -1c
.RI "\fBpANTLR3_BASE_TREE\fP \fBpreviousNode\fP"
.br
.RI "\fIWhich node did we last visit? Used for LT(-1). \fP"
.ti -1c
.RI "void(* \fBpush\fP )(struct \fBANTLR3_COMMON_TREE_NODE_STREAM_struct\fP *ctns, \fBANTLR3_INT32\fP index)"
.br
.ti -1c
.RI "void(* \fBreset\fP )(struct \fBANTLR3_COMMON_TREE_NODE_STREAM_struct\fP *ctns)"
.br
.ti -1c
.RI "\fBpANTLR3_BASE_TREE\fP \fBroot\fP"
.br
.RI "\fIWhich tree are we navigating ? \fP"
.ti -1c
.RI "\fBpANTLR3_STRING_FACTORY\fP \fBstringFactory\fP"
.br
.RI "\fIString factory for use by anything that wishes to create strings such as a tree representation or some copy of the text etc. \fP"
.ti -1c
.RI "void * \fBsuper\fP"
.br
.RI "\fIAny interface that implements this interface (is a super structure containing this structure), may store the pointer to itself here in the super pointer, which is not used by the common tree node stream. \fP"
.ti -1c
.RI "\fBANTLR3_UINT32\fP \fBtail\fP"
.br
.RI "\fIAdd new lookahead at lookahead[tail]. \fP"
.ti -1c
.RI "\fBpANTLR3_TREE_NODE_STREAM\fP \fBtnstream\fP"
.br
.RI "\fIPointer to the tree node stream interface. \fP"
.ti -1c
.RI "\fBANTLR3_BOOLEAN\fP \fBuniqueNavigationNodes\fP"
.br
.RI "\fIIf set to ANTLR3_TRUE then the navigation nodes UP, DOWN are duplicated rather than reused within the tree. \fP"
.ti -1c
.RI "\fBANTLR3_COMMON_TREE\fP \fBUP\fP"
.br
.RI "\fIDummy tree node that indicates a descent up to a parent tree. \fP"
.ti -1c
.RI "\fBpANTLR3_BASE_TREE\fP(* \fBvisitChild\fP )(struct \fBANTLR3_COMMON_TREE_NODE_STREAM_struct\fP *ctns, \fBANTLR3_UINT32\fP child)"
.br
.ti -1c
.RI "void(* \fBwalkBackToMostRecentNodeWithUnvisitedChildren\fP )(struct \fBANTLR3_COMMON_TREE_NODE_STREAM_struct\fP *ctns)"
.br
.in -1c
.SH "Field Documentation"
.PP 
.SS "\fBANTLR3_MARKER\fP \fBANTLR3_COMMON_TREE_NODE_STREAM_struct::absoluteNodeIndex\fP"
.PP
What node index did we just consume? i=0. 
.PP
.n-1 for n node trees. \fBIntStream.next\fP is hence 1 + this value. Size will be same. 
.SS "\fBpANTLR3_BASE_TREE_ADAPTOR\fP \fBANTLR3_COMMON_TREE_NODE_STREAM_struct::adaptor\fP"
.PP
Pointer to tree adaptor interface that manipulates/builds the tree. 
.PP
Referenced by antlr3CommonTreeNodeStreamFree(), antlr3CommonTreeNodeStreamNew(), antlr3CommonTreeNodeStreamNewStream(), and fillBuffer().
.SS "void(* \fBANTLR3_COMMON_TREE_NODE_STREAM_struct::addLookahead\fP)(struct \fBANTLR3_COMMON_TREE_NODE_STREAM_struct\fP *ctns, \fBpANTLR3_BASE_TREE\fP node)"
.PP
.SS "void(* \fBANTLR3_COMMON_TREE_NODE_STREAM_struct::addNavigationNode\fP)(struct \fBANTLR3_COMMON_TREE_NODE_STREAM_struct\fP *ctns, \fBANTLR3_UINT32\fP ttype)"
.PP
Referenced by antlr3CommonTreeNodeStreamNew(), antlr3CommonTreeNodeStreamNewStream(), and fillBuffer().
.SS "\fBANTLR3_INT32\fP \fBANTLR3_COMMON_TREE_NODE_STREAM_struct::currentChildIndex\fP"
.PP
Which child are we currently visiting? If -1 we have not visited this node yet; next \fBconsume()\fP request will set currentIndex to 0. 
.PP
.SS "\fBpANTLR3_BASE_TREE\fP \fBANTLR3_COMMON_TREE_NODE_STREAM_struct::currentNode\fP"
.PP
Which node are we currently visiting? 
.PP
.SS "\fBANTLR3_COMMON_TREE\fP \fBANTLR3_COMMON_TREE_NODE_STREAM_struct::DOWN\fP"
.PP
Dummy tree node that indicates a descent into a child tree. 
.PP
Initialized by a call to create a new interface. 
.PP
Referenced by antlr3CommonTreeNodeStreamFree(), antlr3CommonTreeNodeStreamNew(), and antlr3CommonTreeNodeStreamNewStream().
.SS "\fBANTLR3_COMMON_TREE\fP \fBANTLR3_COMMON_TREE_NODE_STREAM_struct::EOF_NODE\fP"
.PP
Dummy tree node that indicates the termination point of the tree. 
.PP
Initialized by a call to create a new interface. 
.PP
Referenced by antlr3CommonTreeNodeStreamFree(), antlr3CommonTreeNodeStreamNew(), antlr3CommonTreeNodeStreamNewStream(), and getMissingSymbol().
.SS "void(* \fBANTLR3_COMMON_TREE_NODE_STREAM_struct::fill\fP)(struct \fBANTLR3_COMMON_TREE_NODE_STREAM_struct\fP *ctns, \fBANTLR3_INT32\fP k)"
.PP
.SS "void(* \fBANTLR3_COMMON_TREE_NODE_STREAM_struct::free\fP)(struct \fBANTLR3_COMMON_TREE_NODE_STREAM_struct\fP *ctns)"
.PP
Referenced by antlr3CommonTreeNodeStreamNew(), and antlr3CommonTreeNodeStreamNewStream().
.SS "\fBANTLR3_UINT32\fP(* \fBANTLR3_COMMON_TREE_NODE_STREAM_struct::getLookaheadSize\fP)(struct \fBANTLR3_COMMON_TREE_NODE_STREAM_struct\fP *ctns)"
.PP
Referenced by antlr3CommonTreeNodeStreamNewStream().
.SS "\fBpANTLR3_BASE_TREE\fP(* \fBANTLR3_COMMON_TREE_NODE_STREAM_struct::handleRootnode\fP)(struct \fBANTLR3_COMMON_TREE_NODE_STREAM_struct\fP *ctns)"
.PP
.SS "\fBANTLR3_BOOLEAN\fP(* \fBANTLR3_COMMON_TREE_NODE_STREAM_struct::hasNext\fP)(struct \fBANTLR3_COMMON_TREE_NODE_STREAM_struct\fP *ctns)"
.PP
.SS "\fBANTLR3_BOOLEAN\fP(* \fBANTLR3_COMMON_TREE_NODE_STREAM_struct::hasUniqueNavigationNodes\fP)(struct \fBANTLR3_COMMON_TREE_NODE_STREAM_struct\fP *ctns)"
.PP
Referenced by antlr3CommonTreeNodeStreamNew(), and antlr3CommonTreeNodeStreamNewStream().
.SS "\fBANTLR3_UINT32\fP \fBANTLR3_COMMON_TREE_NODE_STREAM_struct::head\fP"
.PP
lookAhead[head] is the first symbol of lookahead, LT(1). 
.PP
.SS "\fBANTLR3_COMMON_TREE\fP \fBANTLR3_COMMON_TREE_NODE_STREAM_struct::INVALID_NODE\fP"
.PP
Dummy node that is returned if we need to indicate an invalid node for any reason. 
.PP
Referenced by antlr3CommonTreeNodeStreamFree(), antlr3CommonTreeNodeStreamNew(), antlr3CommonTreeNodeStreamNewStream(), and LB().
.SS "\fBANTLR3_BOOLEAN\fP \fBANTLR3_COMMON_TREE_NODE_STREAM_struct::isRewriter\fP"
.PP
Indicates whether this node stream was derived from a prior node stream to be used by a rewriting tree parser for instance. 
.PP
If this flag is set to ANTLR3_TRUE, then when this stream is closed it will not free the root tree as this tree always belongs to the origniating node stream. 
.PP
Referenced by antlr3CommonTreeNodeStreamFree(), antlr3CommonTreeNodeStreamNewStream(), and reset().
.SS "\fBpANTLR3_BASE_TREE\fP* \fBANTLR3_COMMON_TREE_NODE_STREAM_struct::lookAhead\fP"
.PP
Buffer tree node stream for use with LT(i). 
.PP
This list grows to fit new lookahead depths, but \fBconsume()\fP wraps like a circular buffer. 
.SS "\fBANTLR3_UINT32\fP \fBANTLR3_COMMON_TREE_NODE_STREAM_struct::lookAheadLength\fP"
.PP
Number of elements available in the lookahead buffer at any point in time. 
.PP
This is the current size of the array. 
.SS "\fBpANTLR3_VECTOR\fP \fBANTLR3_COMMON_TREE_NODE_STREAM_struct::markers\fP"
.PP
Calls to \fBmark()\fP may be nested so we have to track a stack of them. 
.PP
The marker is an index into this stack. Index 0 is the first marker. This is a List<TreeWalkState> 
.PP
Referenced by antlr3CommonTreeNodeStreamNew(), and antlr3CommonTreeNodeStreamNewStream().
.SS "\fBpANTLR3_BASE_TREE\fP(* \fBANTLR3_COMMON_TREE_NODE_STREAM_struct::newDownNode\fP)(struct \fBANTLR3_COMMON_TREE_NODE_STREAM_struct\fP *ctns)"
.PP
Referenced by antlr3CommonTreeNodeStreamNew(), and antlr3CommonTreeNodeStreamNewStream().
.SS "\fBpANTLR3_BASE_TREE\fP(* \fBANTLR3_COMMON_TREE_NODE_STREAM_struct::newUpNode\fP)(struct \fBANTLR3_COMMON_TREE_NODE_STREAM_struct\fP *ctns)"
.PP
Referenced by antlr3CommonTreeNodeStreamNew(), and antlr3CommonTreeNodeStreamNewStream().
.SS "\fBpANTLR3_BASE_TREE\fP(* \fBANTLR3_COMMON_TREE_NODE_STREAM_struct::next\fP)(struct \fBANTLR3_COMMON_TREE_NODE_STREAM_struct\fP *ctns)"
.PP
.SS "\fBpANTLR3_VECTOR\fP \fBANTLR3_COMMON_TREE_NODE_STREAM_struct::nodes\fP"
.PP
The complete mapping from stream index to tree node. 
.PP
This buffer includes pointers to DOWN, UP, and EOF nodes. It is built upon ctor invocation. The elements are type Object as we don't what the trees look like.
.PP
Load upon first need of the buffer so we can set token types of interest for reverseIndexing. Slows us down a wee bit to do all of the if p==-1 testing everywhere though, though in C you won't really be able to measure this.
.PP
Must be freed when the tree node stream is torn down. 
.PP
Referenced by antlr3CommonTreeNodeStreamFree(), antlr3CommonTreeNodeStreamNew(), antlr3CommonTreeNodeStreamNewStream(), fillBuffer(), and LB().
.SS "\fBpANTLR3_STACK\fP \fBANTLR3_COMMON_TREE_NODE_STREAM_struct::nodeStack\fP"
.PP
As we walk down the nodes, we must track parent nodes so we know where to go after walking the last child of a node. 
.PP
When visiting a child, push current node and current index (current index is first stored in the tree node structure to avoid two stacks. 
.PP
Referenced by antlr3CommonTreeNodeStreamFree(), antlr3CommonTreeNodeStreamNew(), antlr3CommonTreeNodeStreamNewStream(), and reset().
.SS "\fBANTLR3_INT32\fP \fBANTLR3_COMMON_TREE_NODE_STREAM_struct::p\fP"
.PP
The current index into the nodes vector of the current tree we are parsing and possibly rewriting. 
.PP
Referenced by antlr3CommonTreeNodeStreamNew(), antlr3CommonTreeNodeStreamNewStream(), fillBufferRoot(), LB(), and reset().
.SS "\fBANTLR3_INT32\fP(* \fBANTLR3_COMMON_TREE_NODE_STREAM_struct::pop\fP)(struct \fBANTLR3_COMMON_TREE_NODE_STREAM_struct\fP *ctns)"
.PP
Referenced by antlr3CommonTreeNodeStreamNew(), and antlr3CommonTreeNodeStreamNewStream().
.SS "\fBpANTLR3_BASE_TREE\fP \fBANTLR3_COMMON_TREE_NODE_STREAM_struct::previousNode\fP"
.PP
Which node did we last visit? Used for LT(-1). 
.PP
.SS "void(* \fBANTLR3_COMMON_TREE_NODE_STREAM_struct::push\fP)(struct \fBANTLR3_COMMON_TREE_NODE_STREAM_struct\fP *ctns, \fBANTLR3_INT32\fP index)"
.PP
Referenced by antlr3CommonTreeNodeStreamNew(), and antlr3CommonTreeNodeStreamNewStream().
.SS "void(* \fBANTLR3_COMMON_TREE_NODE_STREAM_struct::reset\fP)(struct \fBANTLR3_COMMON_TREE_NODE_STREAM_struct\fP *ctns)"
.PP
Referenced by antlr3CommonTreeNodeStreamNew(), antlr3CommonTreeNodeStreamNewStream(), and setTreeNodeStream().
.SS "\fBpANTLR3_BASE_TREE\fP \fBANTLR3_COMMON_TREE_NODE_STREAM_struct::root\fP"
.PP
Which tree are we navigating ? 
.PP
Referenced by antlr3CommonTreeNodeStreamNewStream(), antlr3CommonTreeNodeStreamNewTree(), and fillBufferRoot().
.SS "\fBpANTLR3_STRING_FACTORY\fP \fBANTLR3_COMMON_TREE_NODE_STREAM_struct::stringFactory\fP"
.PP
String factory for use by anything that wishes to create strings such as a tree representation or some copy of the text etc. 
.PP
Referenced by antlr3CommonTreeNodeStreamNew(), and antlr3CommonTreeNodeStreamNewStream().
.SS "void* \fBANTLR3_COMMON_TREE_NODE_STREAM_struct::super\fP"
.PP
Any interface that implements this interface (is a super structure containing this structure), may store the pointer to itself here in the super pointer, which is not used by the common tree node stream. 
.PP
Referenced by antlr3CommonTreeNodeStreamNew(), and antlr3CommonTreeNodeStreamNewStream().
.SS "\fBANTLR3_UINT32\fP \fBANTLR3_COMMON_TREE_NODE_STREAM_struct::tail\fP"
.PP
Add new lookahead at lookahead[tail]. 
.PP
tail wraps around at the end of the lookahead buffer so tail could be less than head. 
.SS "\fBpANTLR3_TREE_NODE_STREAM\fP \fBANTLR3_COMMON_TREE_NODE_STREAM_struct::tnstream\fP"
.PP
Pointer to the tree node stream interface. 
.PP
Referenced by alreadyParsedRule(), antlr3CommonTreeNodeStreamFree(), antlr3CommonTreeNodeStreamNew(), antlr3CommonTreeNodeStreamNewStream(), antlr3RecognitionExceptionNew(), consumeUntil(), consumeUntilSet(), displayRecognitionError(), match(), matchAny(), memoize(), recover(), recoverFromMismatchedElement(), recoverFromMismatchedSet(), recoverFromMismatchedToken(), reset(), and synpred().
.SS "\fBANTLR3_BOOLEAN\fP \fBANTLR3_COMMON_TREE_NODE_STREAM_struct::uniqueNavigationNodes\fP"
.PP
If set to ANTLR3_TRUE then the navigation nodes UP, DOWN are duplicated rather than reused within the tree. 
.PP
Referenced by antlr3CommonTreeNodeStreamNew(), and antlr3CommonTreeNodeStreamNewStream().
.SS "\fBANTLR3_COMMON_TREE\fP \fBANTLR3_COMMON_TREE_NODE_STREAM_struct::UP\fP"
.PP
Dummy tree node that indicates a descent up to a parent tree. 
.PP
Initialized by a call to create a new interface. 
.PP
Referenced by antlr3CommonTreeNodeStreamFree(), antlr3CommonTreeNodeStreamNew(), and antlr3CommonTreeNodeStreamNewStream().
.SS "\fBpANTLR3_BASE_TREE\fP(* \fBANTLR3_COMMON_TREE_NODE_STREAM_struct::visitChild\fP)(struct \fBANTLR3_COMMON_TREE_NODE_STREAM_struct\fP *ctns, \fBANTLR3_UINT32\fP child)"
.PP
.SS "void(* \fBANTLR3_COMMON_TREE_NODE_STREAM_struct::walkBackToMostRecentNodeWithUnvisitedChildren\fP)(struct \fBANTLR3_COMMON_TREE_NODE_STREAM_struct\fP *ctns)"
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for ANTLR3C from the source code.
