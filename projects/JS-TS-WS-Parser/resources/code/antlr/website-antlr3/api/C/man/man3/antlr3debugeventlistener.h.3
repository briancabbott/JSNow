.TH "include/antlr3debugeventlistener.h" 3 "29 Nov 2010" "Version 3.3" "ANTLR3C" \" -*- nroff -*-
.ad l
.nh
.SH NAME
include/antlr3debugeventlistener.h \- 
.SH "Detailed Description"
.PP 
The definition of all debugging events that a recognizer can trigger. 

\fBRemarks:\fP
.RS 4
From the java implementation by Terence Parr... I did not create a separate AST debugging interface as it would create lots of extra classes and DebugParser has a dbg var defined, which makes it hard to change to ASTDebugEventListener. I looked hard at this issue and it is easier to understand as one monolithic event interface for all possible events. Hopefully, adding ST debugging stuff won't be bad. Leave for future. 4/26/2006. 
.RE
.PP

.SH SYNOPSIS
.br
.PP
\fC#include <antlr3defs.h>\fP
.br
\fC#include <antlr3basetree.h>\fP
.br
\fC#include <antlr3commontoken.h>\fP
.br

.SS "Data Structures"

.in +1c
.ti -1c
.RI "struct \fBANTLR3_DEBUG_EVENT_LISTENER_struct\fP"
.br
.RI "\fIThe ANTLR3 debugging interface for communicating with ANLTR Works. \fP"
.in -1c
.SS "Defines"

.in +1c
.ti -1c
.RI "#define \fBDEFAULT_DEBUGGER_PORT\fP   0xBFCC;"
.br
.RI "\fIDefault debugging port. \fP"
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef struct \fBANTLR3_DEBUG_EVENT_LISTENER_struct\fP \fBANTLR3_DEBUG_EVENT_LISTENER\fP"
.br
.in -1c
.SH "Define Documentation"
.PP 
.SS "#define DEFAULT_DEBUGGER_PORT   0xBFCC;"
.PP
Default debugging port. 
.PP
Referenced by antlr3DebugListenerNew().
.SH "Typedef Documentation"
.PP 
.SS "typedef struct \fBANTLR3_DEBUG_EVENT_LISTENER_struct\fP
	 \fBANTLR3_DEBUG_EVENT_LISTENER\fP"
.PP
.SH "Author"
.PP 
Generated automatically by Doxygen for ANTLR3C from the source code.
