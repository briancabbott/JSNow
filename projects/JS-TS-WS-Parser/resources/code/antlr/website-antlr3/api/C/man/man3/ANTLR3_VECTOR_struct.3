.TH "ANTLR3_VECTOR_struct" 3 "29 Nov 2010" "Version 3.3" "ANTLR3C" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ANTLR3_VECTOR_struct \- 
.SH SYNOPSIS
.br
.PP
\fC#include <antlr3collections.h>\fP
.PP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBvoid\fP (ANTLR3_CDECL *free)(struct \fBANTLR3_VECTOR_struct\fP *vector)"
.br
.in -1c
.SS "Data Fields"

.in +1c
.ti -1c
.RI "\fBANTLR3_UINT32\fP(* \fBadd\fP )(struct \fBANTLR3_VECTOR_struct\fP *vector, void *element, void(ANTLR3_CDECL *freeptr)(void *))"
.br
.ti -1c
.RI "void(* \fBclear\fP )(struct \fBANTLR3_VECTOR_struct\fP *vector)"
.br
.ti -1c
.RI "\fBANTLR3_UINT32\fP \fBcount\fP"
.br
.RI "\fINumber of entries currently in the list;. \fP"
.ti -1c
.RI "void(* \fBdel\fP )(struct \fBANTLR3_VECTOR_struct\fP *vector, \fBANTLR3_UINT32\fP entry)"
.br
.ti -1c
.RI "\fBpANTLR3_VECTOR_ELEMENT\fP \fBelements\fP"
.br
.RI "\fIArray of pointers to vector elements. \fP"
.ti -1c
.RI "\fBANTLR3_UINT32\fP \fBelementsSize\fP"
.br
.RI "\fITotal number of entries in elements at any point in time. \fP"
.ti -1c
.RI "\fBANTLR3_BOOLEAN\fP \fBfactoryMade\fP"
.br
.RI "\fIIndicates if the structure was made by a factory, in which case only the factory can free the memory for the actual vector, though the vector free function is called and will recurse through its entries calling any free pointers for each entry. \fP"
.ti -1c
.RI "void *(* \fBget\fP )(struct \fBANTLR3_VECTOR_struct\fP *vector, \fBANTLR3_UINT32\fP entry)"
.br
.ti -1c
.RI "\fBANTLR3_VECTOR_ELEMENT\fP \fBinternal\fP [ANTLR3_VECTOR_INTERNAL_SIZE]"
.br
.RI "\fIMany times, a vector holds just a few nodes in an AST and it is too much overhead to malloc the space for elements so at the expense of a few bytes of memory, we hold the first few elements internally. \fP"
.ti -1c
.RI "void *(* \fBremove\fP )(struct \fBANTLR3_VECTOR_struct\fP *vector, \fBANTLR3_UINT32\fP entry)"
.br
.ti -1c
.RI "\fBANTLR3_UINT32\fP(* \fBset\fP )(struct \fBANTLR3_VECTOR_struct\fP *vector, \fBANTLR3_UINT32\fP entry, void *element, void(ANTLR3_CDECL *freeptr)(void *), \fBANTLR3_BOOLEAN\fP freeExisting)"
.br
.ti -1c
.RI "\fBANTLR3_UINT32\fP(* \fBsize\fP )(struct \fBANTLR3_VECTOR_struct\fP *vector)"
.br
.ti -1c
.RI "\fBANTLR3_BOOLEAN\fP(* \fBswap\fP )(struct \fBANTLR3_VECTOR_struct\fP *, \fBANTLR3_UINT32\fP entry1, \fBANTLR3_UINT32\fP entry2)"
.br
.in -1c
.SH "Member Function Documentation"
.PP 
.SS "ANTLR3_VECTOR_struct::void (ANTLR3_CDECL * free)"
.PP
.SH "Field Documentation"
.PP 
.SS "\fBANTLR3_UINT32\fP(* \fBANTLR3_VECTOR_struct::add\fP)(struct \fBANTLR3_VECTOR_struct\fP *vector, void *element, void(ANTLR3_CDECL *freeptr)(void *))"
.PP
Referenced by add(), addChild(), antlr38BitMark(), antlr3SetVectorApi(), antlr3StackPush(), fillBuffer(), freeNodeRS(), freeRS(), and replaceChildren().
.SS "void(* \fBANTLR3_VECTOR_struct::clear\fP)(struct \fBANTLR3_VECTOR_struct\fP *vector)"
.PP
Referenced by antlr3InputReset(), antlr3SetVectorApi(), freeNodeRS(), freeRS(), reset(), returnVector(), and reuse().
.SS "\fBANTLR3_UINT32\fP \fBANTLR3_VECTOR_struct::count\fP"
.PP
Number of entries currently in the list;. 
.PP
Referenced by add(), antlr38BitMark(), antlr3RewriteRuleElementStreamNewAE(), antlr3SetVectorApi(), antlr3StackPop(), antlr3StackSize(), antlr3VectorAdd(), antlr3VectorClear(), antlr3VectorDel(), antlr3VectorFree(), antlr3VectorSet(), antlr3VectorSize(), antrl3VectorRemove(), consume(), freeNodeRS(), mismatchIsMissingToken(), size(), and sortVector().
.SS "void(* \fBANTLR3_VECTOR_struct::del\fP)(struct \fBANTLR3_VECTOR_struct\fP *vector, \fBANTLR3_UINT32\fP entry)"
.PP
Referenced by antlr3SetVectorApi(), antlr3StackPop(), and destroy().
.SS "\fBpANTLR3_VECTOR_ELEMENT\fP \fBANTLR3_VECTOR_struct::elements\fP"
.PP
Array of pointers to vector elements. 
.PP
Referenced by antlr3SetVectorApi(), antlr3VectorAdd(), antlr3VectorClear(), antlr3VectorDel(), antlr3VectorFree(), antlr3VectorGet(), antlr3VectorResize(), antlr3VectorSet(), antlr3VectorSwap(), antrl3VectorRemove(), closeVectorFactory(), destroy(), freeNodeRS(), LB(), newVector(), replaceChildren(), and tokLT().
.SS "\fBANTLR3_UINT32\fP \fBANTLR3_VECTOR_struct::elementsSize\fP"
.PP
Total number of entries in elements at any point in time. 
.PP
Referenced by antlr3SetVectorApi(), antlr3VectorAdd(), antlr3VectorFree(), antlr3VectorResize(), antlr3VectorSet(), antlr3VectorSwap(), and closeVectorFactory().
.SS "\fBANTLR3_BOOLEAN\fP \fBANTLR3_VECTOR_struct::factoryMade\fP"
.PP
Indicates if the structure was made by a factory, in which case only the factory can free the memory for the actual vector, though the vector free function is called and will recurse through its entries calling any free pointers for each entry. 
.PP
Referenced by antlr3RewriteRuleElementStreamNewAEV(), antlr3SetVectorApi(), antlr3VectorFactoryNew(), antlr3VectorFree(), closeVectorFactory(), freeNodeRS(), freeRS(), and newVector().
.SS "void*(* \fBANTLR3_VECTOR_struct::get\fP)(struct \fBANTLR3_VECTOR_struct\fP *vector, \fBANTLR3_UINT32\fP entry)"
.PP
Referenced by _next(), addChild(), antlr38BitMark(), antlr38BitRewind(), antlr3SetVectorApi(), antlr3StackGet(), antlr3StackPop(), dupTree(), get(), getChild(), getFirstChildWithType(), LB(), replaceChildren(), and toStringTree().
.SS "\fBANTLR3_VECTOR_ELEMENT\fP \fBANTLR3_VECTOR_struct::internal\fP[ANTLR3_VECTOR_INTERNAL_SIZE]"
.PP
Many times, a vector holds just a few nodes in an AST and it is too much overhead to malloc the space for elements so at the expense of a few bytes of memory, we hold the first few elements internally. 
.PP
It means we must copy them when we grow beyond this initial size, but that is less overhead than the malloc/free callas we would otherwise require. 
.PP
Referenced by antlr3SetVectorApi(), antlr3VectorResize(), and newVector().
.SS "void*(* \fBANTLR3_VECTOR_struct::remove\fP)(struct \fBANTLR3_VECTOR_struct\fP *vector, \fBANTLR3_UINT32\fP entry)"
.PP
Referenced by antlr3RewriteRuleElementStreamNewAE(), antlr3SetVectorApi(), deleteChild(), and replaceChildren().
.SS "\fBANTLR3_UINT32\fP(* \fBANTLR3_VECTOR_struct::set\fP)(struct \fBANTLR3_VECTOR_struct\fP *vector, \fBANTLR3_UINT32\fP entry, void *element, void(ANTLR3_CDECL *freeptr)(void *), \fBANTLR3_BOOLEAN\fP freeExisting)"
.PP
Referenced by antlr3SetVectorApi(), newRaw8(), newRawUTF16(), replaceChildren(), and setChild().
.SS "\fBANTLR3_UINT32\fP(* \fBANTLR3_VECTOR_struct::size\fP)(struct \fBANTLR3_VECTOR_struct\fP *vector)"
.PP
Referenced by addChild(), antlr3SetVectorApi(), dupTree(), getChild(), getChildCount(), getFirstChildWithType(), hasNext(), replaceChildren(), and toStringTree().
.SS "\fBANTLR3_BOOLEAN\fP(* \fBANTLR3_VECTOR_struct::swap\fP)(struct \fBANTLR3_VECTOR_struct\fP *, \fBANTLR3_UINT32\fP entry1, \fBANTLR3_UINT32\fP entry2)"
.PP
Referenced by antlr3SetVectorApi(), and sortVector().

.SH "Author"
.PP 
Generated automatically by Doxygen for ANTLR3C from the source code.
