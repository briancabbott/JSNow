.TH "ANTLR3_INT_TRIE_struct" 3 "29 Nov 2010" "Version 3.3" "ANTLR3C" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ANTLR3_INT_TRIE_struct \- 
.SH SYNOPSIS
.br
.PP
\fC#include <antlr3collections.h>\fP
.PP
.SH "Detailed Description"
.PP 
Structure that defines an ANTLR3_INT_TRIE. 

For this particular implementation, as you might expect, the key is turned into a 'string' by looking at bit(key, depth) of the integer key. Using 64 bit keys gives us a depth limit of 64 (or bit 0..63) and potentially a huge trie. This is the algorithm for a Patricia Trie. Note also that this trie [can] accept multiple entries for the same key and is therefore a kind of elastic bucket patricia trie.
.PP
If you find this code useful, please feel free to 'steal' it for any purpose as covered by the BSD license under which ANTLR is issued. You can cut the code but as the ANTLR library is only about 50K (Windows Vista), you might find it easier to just link the library. Please keep all comments and licenses and so on in any version of this you create of course.
.PP
Jim Idle. 
.SS "Data Fields"

.in +1c
.ti -1c
.RI "\fBANTLR3_BOOLEAN\fP(* \fBadd\fP )(struct \fBANTLR3_INT_TRIE_struct\fP *trie, \fBANTLR3_INTKEY\fP key, \fBANTLR3_UINT32\fP type, \fBANTLR3_INTKEY\fP intVal, void *data, void(ANTLR3_CDECL *freeptr)(void *))"
.br
.ti -1c
.RI "\fBANTLR3_BOOLEAN\fP \fBallowDups\fP"
.br
.ti -1c
.RI "\fBANTLR3_UINT32\fP \fBcount\fP"
.br
.ti -1c
.RI "\fBpANTLR3_INT_TRIE_NODE\fP \fBcurrent\fP"
.br
.ti -1c
.RI "\fBANTLR3_BOOLEAN\fP(* \fBdel\fP )(struct \fBANTLR3_INT_TRIE_struct\fP *trie, \fBANTLR3_INTKEY\fP key)"
.br
.ti -1c
.RI "void(* \fBfree\fP )(struct \fBANTLR3_INT_TRIE_struct\fP *trie)"
.br
.ti -1c
.RI "\fBpANTLR3_TRIE_ENTRY\fP(* \fBget\fP )(struct \fBANTLR3_INT_TRIE_struct\fP *trie, \fBANTLR3_INTKEY\fP key)"
.br
.ti -1c
.RI "\fBpANTLR3_INT_TRIE_NODE\fP \fBroot\fP"
.br
.in -1c
.SH "Field Documentation"
.PP 
.SS "\fBANTLR3_BOOLEAN\fP(* \fBANTLR3_INT_TRIE_struct::add\fP)(struct \fBANTLR3_INT_TRIE_struct\fP *trie, \fBANTLR3_INTKEY\fP key, \fBANTLR3_UINT32\fP type, \fBANTLR3_INTKEY\fP intVal, void *data, void(ANTLR3_CDECL *freeptr)(void *))"
.PP
Referenced by antlr3IntTrieNew(), getRuleMemoization(), and memoize().
.SS "\fBANTLR3_BOOLEAN\fP \fBANTLR3_INT_TRIE_struct::allowDups\fP"
.PP
Referenced by intTrieAdd().
.SS "\fBANTLR3_UINT32\fP \fBANTLR3_INT_TRIE_struct::count\fP"
.PP
Referenced by antlr3IntTrieNew(), intTrieAdd(), and intTrieGet().
.SS "\fBpANTLR3_INT_TRIE_NODE\fP \fBANTLR3_INT_TRIE_struct::current\fP"
.PP
.SS "\fBANTLR3_BOOLEAN\fP(* \fBANTLR3_INT_TRIE_struct::del\fP)(struct \fBANTLR3_INT_TRIE_struct\fP *trie, \fBANTLR3_INTKEY\fP key)"
.PP
Referenced by antlr3IntTrieNew().
.SS "void(* \fBANTLR3_INT_TRIE_struct::free\fP)(struct \fBANTLR3_INT_TRIE_struct\fP *trie)"
.PP
Referenced by antlr3IntTrieNew(), freeBR(), and reset().
.SS "\fBpANTLR3_TRIE_ENTRY\fP(* \fBANTLR3_INT_TRIE_struct::get\fP)(struct \fBANTLR3_INT_TRIE_struct\fP *trie, \fBANTLR3_INTKEY\fP key)"
.PP
Referenced by antlr3IntTrieNew(), getRuleMemoization(), and memoize().
.SS "\fBpANTLR3_INT_TRIE_NODE\fP \fBANTLR3_INT_TRIE_struct::root\fP"
.PP
Referenced by antlr3IntTrieNew(), intTrieAdd(), intTrieDel(), intTrieFree(), and intTrieGet().

.SH "Author"
.PP 
Generated automatically by Doxygen for ANTLR3C from the source code.
