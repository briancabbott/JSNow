.TH "ANTLR3_STRING_struct" 3 "29 Nov 2010" "Version 3.3" "ANTLR3C" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ANTLR3_STRING_struct \- 
.SH SYNOPSIS
.br
.PP
\fC#include <antlr3string.h>\fP
.PP
.SH "Detailed Description"
.PP 
Base string class tracks the allocations and provides simple string tracking functions. 

Mostly you can work directly on the string for things that don't reallocate it, like strchr() etc. Perhaps someone will want to provide implementations for UTF8 and so on. 
.SS "Data Fields"

.in +1c
.ti -1c
.RI "\fBpANTLR3_UINT8\fP(* \fBaddc\fP )(struct \fBANTLR3_STRING_struct\fP *string, \fBANTLR3_UINT32\fP c)"
.br
.RI "\fIPointer to function that adds a single character to the end of the string, in the encoding of the string - 8 bit, UTF16, utf-8 etc. \fP"
.ti -1c
.RI "\fBpANTLR3_UINT8\fP(* \fBaddi\fP )(struct \fBANTLR3_STRING_struct\fP *string, \fBANTLR3_INT32\fP i)"
.br
.RI "\fIPointer to function that adds the stringified representation of an integer to the string. \fP"
.ti -1c
.RI "\fBpANTLR3_UINT8\fP(* \fBappend\fP )(struct \fBANTLR3_STRING_struct\fP *string, const char *newbit)"
.br
.RI "\fIPointer to function adds a raw char * type pointer in the default encoding for this string. \fP"
.ti -1c
.RI "\fBpANTLR3_UINT8\fP(* \fBappend8\fP )(struct \fBANTLR3_STRING_struct\fP *string, const char *newbit)"
.br
.RI "\fIPointer to function adds a raw char * type pointer in the default encoding for this string. \fP"
.ti -1c
.RI "\fBpANTLR3_UINT8\fP(* \fBappendS\fP )(struct \fBANTLR3_STRING_struct\fP *string, struct \fBANTLR3_STRING_struct\fP *newbit)"
.br
.RI "\fIPointer to function appends a copy of the characters contained in another string. \fP"
.ti -1c
.RI "\fBANTLR3_UCHAR\fP(* \fBcharAt\fP )(struct \fBANTLR3_STRING_struct\fP *string, \fBANTLR3_UINT32\fP offset)"
.br
.RI "\fIPointer to a function that returns the character indexed at the supplied offset as a 32 bit character. \fP"
.ti -1c
.RI "\fBpANTLR3_UINT8\fP \fBchars\fP"
.br
.RI "\fIPointer to the current string value (starts at NULL unless the string allocator is told to create it with a pre known size. \fP"
.ti -1c
.RI "\fBANTLR3_UINT32\fP(* \fBcompare\fP )(struct \fBANTLR3_STRING_struct\fP *string, const char *compStr)"
.br
.RI "\fIPointer to a function that compares the text of a string with the supplied character string (which is assumed to be in the same encoding as the string itself) and returns a result a la strcmp(). \fP"
.ti -1c
.RI "\fBANTLR3_UINT32\fP(* \fBcompare8\fP )(struct \fBANTLR3_STRING_struct\fP *string, const char *compStr)"
.br
.RI "\fIPointer to function that compares the text of a string to the supplied 8 bit character string and returns a result a la strcmp(). \fP"
.ti -1c
.RI "\fBANTLR3_UINT32\fP(* \fBcompareS\fP )(struct \fBANTLR3_STRING_struct\fP *string, struct \fBANTLR3_STRING_struct\fP *compStr)"
.br
.RI "\fIPointer to a function that compares the text of a string with the supplied string (which is assumed to be in the same encoding as the string itself) and returns a result a la strcmp(). \fP"
.ti -1c
.RI "\fBANTLR3_UINT8\fP \fBencoding\fP"
.br
.RI "\fIOccasionally it is useful to know what the encoding of the string actually is, hence it is stored here as one the ANTLR3_ENCODING_ values. \fP"
.ti -1c
.RI "\fBpANTLR3_STRING_FACTORY\fP \fBfactory\fP"
.br
.RI "\fIThe factory that created this string. \fP"
.ti -1c
.RI "\fBANTLR3_UINT32\fP \fBindex\fP"
.br
.RI "\fIIndex of string (allocation number) in case someone wants to explicitly release it. \fP"
.ti -1c
.RI "\fBpANTLR3_UINT8\fP(* \fBinsert\fP )(struct \fBANTLR3_STRING_struct\fP *string, \fBANTLR3_UINT32\fP point, const char *newbit)"
.br
.RI "\fIPointer to function that inserts the supplied string at the specified offset in the current string in the default encoding for this string. \fP"
.ti -1c
.RI "\fBpANTLR3_UINT8\fP(* \fBinsert8\fP )(struct \fBANTLR3_STRING_struct\fP *string, \fBANTLR3_UINT32\fP point, const char *newbit)"
.br
.RI "\fIPointer to function that inserts the supplied string at the specified offset in the current string in the default encoding for this string. \fP"
.ti -1c
.RI "\fBpANTLR3_UINT8\fP(* \fBinserti\fP )(struct \fBANTLR3_STRING_struct\fP *string, \fBANTLR3_UINT32\fP point, \fBANTLR3_INT32\fP i)"
.br
.RI "\fIPointer to function that inserts the supplied integer in string form at the specified offset in the current string. \fP"
.ti -1c
.RI "\fBpANTLR3_UINT8\fP(* \fBinsertS\fP )(struct \fBANTLR3_STRING_struct\fP *string, \fBANTLR3_UINT32\fP point, struct \fBANTLR3_STRING_struct\fP *newbit)"
.br
.RI "\fIPointer to function that inserts a copy of the characters in the supplied string at the specified offset in the current string. \fP"
.ti -1c
.RI "\fBANTLR3_UINT32\fP \fBlen\fP"
.br
.RI "\fICurrent length of the string up to and not including, the trailing '' Note that the actual allocation (->size) is always at least one byte more than this to accommodate trailing ''. \fP"
.ti -1c
.RI "\fBpANTLR3_UINT8\fP(* \fBset\fP )(struct \fBANTLR3_STRING_struct\fP *string, const char *\fBchars\fP)"
.br
.RI "\fIPointer to function that sets the string value to a specific string in the default encoding for this string. \fP"
.ti -1c
.RI "\fBpANTLR3_UINT8\fP(* \fBset8\fP )(struct \fBANTLR3_STRING_struct\fP *string, const char *\fBchars\fP)"
.br
.RI "\fIPointer to function that sets the string value to a specific 8 bit string in the default encoding for this string. \fP"
.ti -1c
.RI "\fBpANTLR3_UINT8\fP(* \fBsetS\fP )(struct \fBANTLR3_STRING_struct\fP *string, struct \fBANTLR3_STRING_struct\fP *\fBchars\fP)"
.br
.RI "\fIPointer to function that sets the string value to a copy of the supplied string (strings must be in the same encoding. \fP"
.ti -1c
.RI "\fBANTLR3_UINT32\fP \fBsize\fP"
.br
.RI "\fICurrent size of the string in bytes including the trailing ''. \fP"
.ti -1c
.RI "struct \fBANTLR3_STRING_struct\fP *(* \fBsubString\fP )(struct \fBANTLR3_STRING_struct\fP *string, \fBANTLR3_UINT32\fP startIndex, \fBANTLR3_UINT32\fP endIndex)"
.br
.RI "\fIPointer to a function that returns a substring of the supplied string a la .subString(s,e) in the Java language. \fP"
.ti -1c
.RI "struct \fBANTLR3_STRING_struct\fP *(* \fBto8\fP )(struct \fBANTLR3_STRING_struct\fP *string)"
.br
.RI "\fIPointer to a function that yields an 8 bit string regardless of the encoding of the supplied string. \fP"
.ti -1c
.RI "\fBANTLR3_INT32\fP(* \fBtoInt32\fP )(struct \fBANTLR3_STRING_struct\fP *string)"
.br
.RI "\fIPointer to a function that returns the integer representation of any numeric characters at the beginning of the string. \fP"
.ti -1c
.RI "struct \fBANTLR3_STRING_struct\fP *(* \fBtoUTF8\fP )(struct \fBANTLR3_STRING_struct\fP *string)"
.br
.RI "\fIPointer to a function that yields a UT8 encoded string of the current string, regardless of the current encoding of the string. \fP"
.in -1c
.SH "Field Documentation"
.PP 
.SS "\fBpANTLR3_UINT8\fP(* \fBANTLR3_STRING_struct::addc\fP)(struct \fBANTLR3_STRING_struct\fP *string, \fBANTLR3_UINT32\fP c)"
.PP
Pointer to function that adds a single character to the end of the string, in the encoding of the string - 8 bit, UTF16, utf-8 etc. 
.PP
Input is a single UTF32 (32 bits wide integer) character. 
.PP
Referenced by consumeHiddenToken(), consumeToken(), defineDotEdges(), defineDotNodes(), makeDot(), serializeNode(), serializeText(), serializeToken(), and toString().
.SS "\fBpANTLR3_UINT8\fP(* \fBANTLR3_STRING_struct::addi\fP)(struct \fBANTLR3_STRING_struct\fP *string, \fBANTLR3_INT32\fP i)"
.PP
Pointer to function that adds the stringified representation of an integer to the string. 
.PP
Referenced by serializeNode(), serializeToken(), and toString().
.SS "\fBpANTLR3_UINT8\fP(* \fBANTLR3_STRING_struct::append\fP)(struct \fBANTLR3_STRING_struct\fP *string, const char *newbit)"
.PP
Pointer to function adds a raw char * type pointer in the default encoding for this string. 
.PP
For instance, if this is 8 bit, then this function is the same as append8 but if the encoding is UTF16, then the pointer is assumed to point to UTF16 characters not 8 bit. 
.PP
Referenced by serializeText().
.SS "\fBpANTLR3_UINT8\fP(* \fBANTLR3_STRING_struct::append8\fP)(struct \fBANTLR3_STRING_struct\fP *string, const char *newbit)"
.PP
Pointer to function adds a raw char * type pointer in the default encoding for this string. 
.PP
For instance, if this is a UTF16 string, then this function assumes the pointer points to 8 bit characters that must be converted on the fly. 
.PP
Referenced by defineDotEdges(), defineDotNodes(), getMissingSymbol(), makeDot(), toString(), and toStringTree().
.SS "\fBpANTLR3_UINT8\fP(* \fBANTLR3_STRING_struct::appendS\fP)(struct \fBANTLR3_STRING_struct\fP *string, struct \fBANTLR3_STRING_struct\fP *newbit)"
.PP
Pointer to function appends a copy of the characters contained in another string. 
.PP
Strings must be in the same encoding. 
.PP
Referenced by toString().
.SS "\fBANTLR3_UCHAR\fP(* \fBANTLR3_STRING_struct::charAt\fP)(struct \fBANTLR3_STRING_struct\fP *string, \fBANTLR3_UINT32\fP offset)"
.PP
Pointer to a function that returns the character indexed at the supplied offset as a 32 bit character. 
.PP
Referenced by defineDotEdges(), defineDotNodes(), makeDot(), and serializeText().
.SS "\fBpANTLR3_UINT8\fP \fBANTLR3_STRING_struct::chars\fP"
.PP
Pointer to the current string value (starts at NULL unless the string allocator is told to create it with a pre known size. 
.PP
Referenced by addcUTF16(), append8(), appendS(), appendUTF16_8(), appendUTF16_UTF16(), charAtUTF16(), compare8(), compareS(), compareUTF16_8(), compareUTF16_UTF16(), consumeHiddenToken(), consumeToken(), createTokenFromToken(), displayRecognitionError(), handshake(), insert8(), insertS(), insertUTF16_8(), insertUTF16_UTF16(), newPtr8(), newPtrUTF16_8(), newPtrUTF16_UTF16(), newSize8(), newSizeUTF16(), printable8(), printableUTF16(), replaceChildren(), set8(), setS(), setUTF16_8(), setUTF16_UTF16(), stringFree(), subString8(), subStringUTF16(), to8_UTF16(), toInt32_8(), toInt32_UTF16(), toUTF8_8(), and toUTF8_UTF16().
.SS "\fBANTLR3_UINT32\fP(* \fBANTLR3_STRING_struct::compare\fP)(struct \fBANTLR3_STRING_struct\fP *string, const char *compStr)"
.PP
Pointer to a function that compares the text of a string with the supplied character string (which is assumed to be in the same encoding as the string itself) and returns a result a la strcmp(). 
.PP
.SS "\fBANTLR3_UINT32\fP(* \fBANTLR3_STRING_struct::compare8\fP)(struct \fBANTLR3_STRING_struct\fP *string, const char *compStr)"
.PP
Pointer to function that compares the text of a string to the supplied 8 bit character string and returns a result a la strcmp(). 
.PP
.SS "\fBANTLR3_UINT32\fP(* \fBANTLR3_STRING_struct::compareS\fP)(struct \fBANTLR3_STRING_struct\fP *string, struct \fBANTLR3_STRING_struct\fP *compStr)"
.PP
Pointer to a function that compares the text of a string with the supplied string (which is assumed to be in the same encoding as the string itself) and returns a result a la strcmp(). 
.PP
Referenced by stringInit8(), and stringInitUTF16().
.SS "\fBANTLR3_UINT8\fP \fBANTLR3_STRING_struct::encoding\fP"
.PP
Occasionally it is useful to know what the encoding of the string actually is, hence it is stored here as one the ANTLR3_ENCODING_ values. 
.PP
.SS "\fBpANTLR3_STRING_FACTORY\fP \fBANTLR3_STRING_struct::factory\fP"
.PP
The factory that created this string. 
.PP
Referenced by serializeNode(), serializeToken(), subString8(), subStringUTF16(), to8_UTF16(), toString(), toUTF8_8(), and toUTF8_UTF16().
.SS "\fBANTLR3_UINT32\fP \fBANTLR3_STRING_struct::index\fP"
.PP
Index of string (allocation number) in case someone wants to explicitly release it. 
.PP
.SS "\fBpANTLR3_UINT8\fP(* \fBANTLR3_STRING_struct::insert\fP)(struct \fBANTLR3_STRING_struct\fP *string, \fBANTLR3_UINT32\fP point, const char *newbit)"
.PP
Pointer to function that inserts the supplied string at the specified offset in the current string in the default encoding for this string. 
.PP
For instance, if this is an 8 bit string, then this is the same as insert8, but if this is a UTF16 string, then the pointer must point to UTF16 characters. 
.SS "\fBpANTLR3_UINT8\fP(* \fBANTLR3_STRING_struct::insert8\fP)(struct \fBANTLR3_STRING_struct\fP *string, \fBANTLR3_UINT32\fP point, const char *newbit)"
.PP
Pointer to function that inserts the supplied string at the specified offset in the current string in the default encoding for this string. 
.PP
For instance, if this is a UTF16 string then the pointer is assumed to point at 8 bit characteres that must be converted on the fly. 
.PP
Referenced by consumeHiddenToken(), and consumeToken().
.SS "\fBpANTLR3_UINT8\fP(* \fBANTLR3_STRING_struct::inserti\fP)(struct \fBANTLR3_STRING_struct\fP *string, \fBANTLR3_UINT32\fP point, \fBANTLR3_INT32\fP i)"
.PP
Pointer to function that inserts the supplied integer in string form at the specified offset in the current string. 
.PP
.SS "\fBpANTLR3_UINT8\fP(* \fBANTLR3_STRING_struct::insertS\fP)(struct \fBANTLR3_STRING_struct\fP *string, \fBANTLR3_UINT32\fP point, struct \fBANTLR3_STRING_struct\fP *newbit)"
.PP
Pointer to function that inserts a copy of the characters in the supplied string at the specified offset in the current string. 
.PP
strings must be in the same encoding. 
.SS "\fBANTLR3_UINT32\fP \fBANTLR3_STRING_struct::len\fP"
.PP
Current length of the string up to and not including, the trailing '' Note that the actual allocation (->size) is always at least one byte more than this to accommodate trailing ''. 
.PP
Referenced by addc8(), addcUTF16(), append8(), appendS(), appendUTF16_8(), appendUTF16_UTF16(), charAt8(), charAtUTF16(), createTokenFromToken(), defineDotEdges(), defineDotNodes(), insert8(), insertUTF16_8(), insertUTF16_UTF16(), makeDot(), printable8(), printableUTF16(), serializeText(), subString8(), subStringUTF16(), to8_UTF16(), toUTF8_8(), and toUTF8_UTF16().
.SS "\fBpANTLR3_UINT8\fP(* \fBANTLR3_STRING_struct::set\fP)(struct \fBANTLR3_STRING_struct\fP *string, const char *\fBchars\fP)"
.PP
Pointer to function that sets the string value to a specific string in the default encoding for this string. 
.PP
For instance, if this is 8 bit, then this function is the same as set8 but if the encoding is UTF16, then the pointer is assumed to point to UTF16 characters, not 8 bit. 
.PP
Referenced by serializeNode(), and serializeToken().
.SS "\fBpANTLR3_UINT8\fP(* \fBANTLR3_STRING_struct::set8\fP)(struct \fBANTLR3_STRING_struct\fP *string, const char *\fBchars\fP)"
.PP
Pointer to function that sets the string value to a specific 8 bit string in the default encoding for this string. 
.PP
For instance, if this is an 8 bit string, then this function is the same as set8 but if the encoding is UTF16, then the pointer is assumed to point to 8 bit characters that must be converted to UTF16 characters on the fly. 
.PP
Referenced by setText8().
.SS "\fBpANTLR3_UINT8\fP(* \fBANTLR3_STRING_struct::setS\fP)(struct \fBANTLR3_STRING_struct\fP *string, struct \fBANTLR3_STRING_struct\fP *\fBchars\fP)"
.PP
Pointer to function that sets the string value to a copy of the supplied string (strings must be in the same encoding. 
.PP
.SS "\fBANTLR3_UINT32\fP \fBANTLR3_STRING_struct::size\fP"
.PP
Current size of the string in bytes including the trailing ''. 
.PP
Referenced by addc8(), addcUTF16(), append8(), appendS(), appendUTF16_8(), appendUTF16_UTF16(), insert8(), insertUTF16_8(), insertUTF16_UTF16(), set8(), setUTF16_8(), setUTF16_UTF16(), to8_UTF16(), and toUTF8_UTF16().
.SS "struct \fBANTLR3_STRING_struct\fP*(* \fBANTLR3_STRING_struct::subString\fP)(struct \fBANTLR3_STRING_struct\fP *string, \fBANTLR3_UINT32\fP startIndex, \fBANTLR3_UINT32\fP endIndex)\fC [read]\fP"
.PP
Pointer to a function that returns a substring of the supplied string a la .subString(s,e) in the Java language. 
.PP
.SS "struct \fBANTLR3_STRING_struct\fP*(* \fBANTLR3_STRING_struct::to8\fP)(struct \fBANTLR3_STRING_struct\fP *string)\fC [read]\fP"
.PP
Pointer to a function that yields an 8 bit string regardless of the encoding of the supplied string. 
.PP
This is useful when you want to use the text of a token in some way that requires an 8 bit value, such as the key for a hashtable. The function is required to produce a usable string even if the text given as input has characters that do not fit in 8 bit space, it will replace them with some arbitrary character such as '?' 
.PP
Referenced by displayRecognitionError().
.SS "\fBANTLR3_INT32\fP(* \fBANTLR3_STRING_struct::toInt32\fP)(struct \fBANTLR3_STRING_struct\fP *string)"
.PP
Pointer to a function that returns the integer representation of any numeric characters at the beginning of the string. 
.PP
Referenced by stringInit8(), and stringInitUTF16().
.SS "struct \fBANTLR3_STRING_struct\fP*(* \fBANTLR3_STRING_struct::toUTF8\fP)(struct \fBANTLR3_STRING_struct\fP *string)\fC [read]\fP"
.PP
Pointer to a function that yields a UT8 encoded string of the current string, regardless of the current encoding of the string. 
.PP
Because there is currently no UTF8 handling in the string class, it creates therefore, a string that is useful only for read only applications as it will not contain methods that deal with UTF8 at the moment. 
.PP
Referenced by serializeNode(), serializeToken(), stringInit8(), and stringInitUTF16().

.SH "Author"
.PP 
Generated automatically by Doxygen for ANTLR3C from the source code.
