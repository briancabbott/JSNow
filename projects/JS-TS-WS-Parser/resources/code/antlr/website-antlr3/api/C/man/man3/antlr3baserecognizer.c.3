.TH "src/antlr3baserecognizer.c" 3 "29 Nov 2010" "Version 3.3" "ANTLR3C" \" -*- nroff -*-
.ad l
.nh
.SH NAME
src/antlr3baserecognizer.c \- 
.SH "Detailed Description"
.PP 
Contains the base functions that all recognizers require. 

Any function can be overridden by a lexer/parser/tree parser or by the ANTLR3 programmer. 
.SH SYNOPSIS
.br
.PP
\fC#include <antlr3baserecognizer.h>\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "static \fBANTLR3_BOOLEAN\fP \fBalreadyParsedRule\fP (\fBpANTLR3_BASE_RECOGNIZER\fP recognizer, \fBANTLR3_MARKER\fP ruleIndex)"
.br
.RI "\fIHas this rule already parsed input at the current index in the input stream? Return ANTLR3_TRUE if we have and ANTLR3_FALSE if we have not. \fP"
.ti -1c
.RI "ANTLR3_API \fBpANTLR3_BASE_RECOGNIZER\fP \fBantlr3BaseRecognizerNew\fP (\fBANTLR3_UINT32\fP type, \fBANTLR3_UINT32\fP sizeHint, \fBpANTLR3_RECOGNIZER_SHARED_STATE\fP state)"
.br
.ti -1c
.RI "ANTLR3_API void \fBantlr3MTExceptionNew\fP (\fBpANTLR3_BASE_RECOGNIZER\fP recognizer)"
.br
.RI "\fICreates a new Mismatched Token Exception and inserts in the recognizer exception stack. \fP"
.ti -1c
.RI "ANTLR3_API void \fBantlr3RecognitionExceptionNew\fP (\fBpANTLR3_BASE_RECOGNIZER\fP recognizer)"
.br
.ti -1c
.RI "static void \fBbeginBacktrack\fP (\fBpANTLR3_BASE_RECOGNIZER\fP recognizer, \fBANTLR3_UINT32\fP level)"
.br
.ti -1c
.RI "static void \fBbeginResync\fP (\fBpANTLR3_BASE_RECOGNIZER\fP recognizer)"
.br
.ti -1c
.RI "static \fBpANTLR3_BITSET\fP \fBcombineFollows\fP (\fBpANTLR3_BASE_RECOGNIZER\fP recognizer, \fBANTLR3_BOOLEAN\fP exact)"
.br
.RI "\fICompute the current followset for the input stream. \fP"
.ti -1c
.RI "static \fBpANTLR3_BITSET\fP \fBcomputeCSRuleFollow\fP (\fBpANTLR3_BASE_RECOGNIZER\fP recognizer)"
.br
.RI "\fICompute the context-sensitive FOLLOW set for current rule. \fP"
.ti -1c
.RI "static \fBpANTLR3_BITSET\fP \fBcomputeErrorRecoverySet\fP (\fBpANTLR3_BASE_RECOGNIZER\fP recognizer)"
.br
.RI "\fICompute the error recovery set for the current rule. \fP"
.ti -1c
.RI "static void \fBconsumeUntil\fP (\fBpANTLR3_BASE_RECOGNIZER\fP recognizer, \fBANTLR3_UINT32\fP tokenType)"
.br
.RI "\fIEat tokens from the input stream until we get one of JUST the right type. \fP"
.ti -1c
.RI "static void \fBconsumeUntilSet\fP (\fBpANTLR3_BASE_RECOGNIZER\fP recognizer, \fBpANTLR3_BITSET\fP set)"
.br
.RI "\fIEat tokens from the input stream until we find one that belongs to the supplied set. \fP"
.ti -1c
.RI "static void \fBdisplayRecognitionError\fP (\fBpANTLR3_BASE_RECOGNIZER\fP recognizer, \fBpANTLR3_UINT8\fP *tokenNames)"
.br
.RI "\fIStandard/Example error display method. \fP"
.ti -1c
.RI "static void \fBendBacktrack\fP (\fBpANTLR3_BASE_RECOGNIZER\fP recognizer, \fBANTLR3_UINT32\fP level, \fBANTLR3_BOOLEAN\fP successful)"
.br
.ti -1c
.RI "static void \fBendResync\fP (\fBpANTLR3_BASE_RECOGNIZER\fP recognizer)"
.br
.ti -1c
.RI "static void \fBfreeBR\fP (\fBpANTLR3_BASE_RECOGNIZER\fP recognizer)"
.br
.ti -1c
.RI "static void ANTLR3_CDECL \fBfreeIntTrie\fP (void *trie)"
.br
.ti -1c
.RI "static void * \fBgetCurrentInputSymbol\fP (\fBpANTLR3_BASE_RECOGNIZER\fP recognizer, \fBpANTLR3_INT_STREAM\fP istream)"
.br
.ti -1c
.RI "static void * \fBgetMissingSymbol\fP (\fBpANTLR3_BASE_RECOGNIZER\fP recognizer, \fBpANTLR3_INT_STREAM\fP istream, \fBpANTLR3_EXCEPTION\fP e, \fBANTLR3_UINT32\fP expectedTokenType, \fBpANTLR3_BITSET_LIST\fP follow)"
.br
.ti -1c
.RI "static \fBANTLR3_UINT32\fP \fBgetNumberOfSyntaxErrors\fP (\fBpANTLR3_BASE_RECOGNIZER\fP recognizer)"
.br
.RI "\fIReturn how many syntax errors were detected by this recognizer. \fP"
.ti -1c
.RI "static \fBpANTLR3_STACK\fP \fBgetRuleInvocationStack\fP (\fBpANTLR3_BASE_RECOGNIZER\fP recognizer)"
.br
.RI "\fIReturn the rule invocation stack (how we got here in the parse. \fP"
.ti -1c
.RI "static \fBpANTLR3_STACK\fP \fBgetRuleInvocationStackNamed\fP (\fBpANTLR3_BASE_RECOGNIZER\fP recognizer, \fBpANTLR3_UINT8\fP name)"
.br
.ti -1c
.RI "static \fBANTLR3_MARKER\fP \fBgetRuleMemoization\fP (\fBpANTLR3_BASE_RECOGNIZER\fP recognizer, \fBANTLR3_INTKEY\fP ruleIndex, \fBANTLR3_MARKER\fP ruleParseStart)"
.br
.RI "\fIPointer to a function to return whether the rule has parsed input starting at the supplied start index before. \fP"
.ti -1c
.RI "static void * \fBmatch\fP (\fBpANTLR3_BASE_RECOGNIZER\fP recognizer, \fBANTLR3_UINT32\fP ttype, \fBpANTLR3_BITSET_LIST\fP follow)"
.br
.RI "\fIMatch current input symbol against ttype. \fP"
.ti -1c
.RI "static void \fBmatchAny\fP (\fBpANTLR3_BASE_RECOGNIZER\fP recognizer)"
.br
.RI "\fIConsumes the next token, whatever it is, and resets the recognizer state so that it is not in error. \fP"
.ti -1c
.RI "static void \fBmemoize\fP (\fBpANTLR3_BASE_RECOGNIZER\fP recognizer, \fBANTLR3_MARKER\fP ruleIndex, \fBANTLR3_MARKER\fP ruleParseStart)"
.br
.RI "\fIRecord whether or not this rule parsed the input at this position successfully. \fP"
.ti -1c
.RI "static void \fBmismatch\fP (\fBpANTLR3_BASE_RECOGNIZER\fP recognizer, \fBANTLR3_UINT32\fP ttype, \fBpANTLR3_BITSET_LIST\fP follow)"
.br
.RI "\fIFactor out what to do upon token mismatch so tree parsers can behave differently. \fP"
.ti -1c
.RI "static \fBANTLR3_BOOLEAN\fP \fBmismatchIsMissingToken\fP (\fBpANTLR3_BASE_RECOGNIZER\fP recognizer, \fBpANTLR3_INT_STREAM\fP is, \fBpANTLR3_BITSET_LIST\fP follow)"
.br
.ti -1c
.RI "static \fBANTLR3_BOOLEAN\fP \fBmismatchIsUnwantedToken\fP (\fBpANTLR3_BASE_RECOGNIZER\fP recognizer, \fBpANTLR3_INT_STREAM\fP is, \fBANTLR3_UINT32\fP ttype)"
.br
.ti -1c
.RI "static void \fBrecover\fP (\fBpANTLR3_BASE_RECOGNIZER\fP recognizer)"
.br
.RI "\fIRecover from an error found on the input stream. \fP"
.ti -1c
.RI "static \fBANTLR3_BOOLEAN\fP \fBrecoverFromMismatchedElement\fP (\fBpANTLR3_BASE_RECOGNIZER\fP recognizer, \fBpANTLR3_BITSET_LIST\fP followBits)"
.br
.RI "\fIThis code is factored out from mismatched token and mismatched set recovery. \fP"
.ti -1c
.RI "static void * \fBrecoverFromMismatchedSet\fP (\fBpANTLR3_BASE_RECOGNIZER\fP recognizer, \fBpANTLR3_BITSET_LIST\fP follow)"
.br
.ti -1c
.RI "static void * \fBrecoverFromMismatchedToken\fP (\fBpANTLR3_BASE_RECOGNIZER\fP recognizer, \fBANTLR3_UINT32\fP ttype, \fBpANTLR3_BITSET_LIST\fP follow)"
.br
.RI "\fIAttempt to recover from a single missing or extra token. \fP"
.ti -1c
.RI "static void \fBreportError\fP (\fBpANTLR3_BASE_RECOGNIZER\fP recognizer)"
.br
.RI "\fIReport a recognition problem. \fP"
.ti -1c
.RI "static void \fBreset\fP (\fBpANTLR3_BASE_RECOGNIZER\fP recognizer)"
.br
.ti -1c
.RI "static \fBANTLR3_BOOLEAN\fP \fBsynpred\fP (\fBpANTLR3_BASE_RECOGNIZER\fP recognizer, void *ctx, void(*predicate)(void *ctx))"
.br
.RI "\fIA syntactic predicate. \fP"
.ti -1c
.RI "static \fBpANTLR3_HASH_TABLE\fP \fBtoStrings\fP (\fBpANTLR3_BASE_RECOGNIZER\fP recognizer, \fBpANTLR3_HASH_TABLE\fP tokens)"
.br
.RI "\fIConvenience method for template rewrites - NYI. \fP"
.in -1c
.SH "Author"
.PP 
Generated automatically by Doxygen for ANTLR3C from the source code.
