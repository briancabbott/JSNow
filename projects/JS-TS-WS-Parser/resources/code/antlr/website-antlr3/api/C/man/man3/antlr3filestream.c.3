.TH "src/antlr3filestream.c" 3 "29 Nov 2010" "Version 3.3" "ANTLR3C" \" -*- nroff -*-
.ad l
.nh
.SH NAME
src/antlr3filestream.c \- 
.SH "Detailed Description"
.PP 
The ANTLR3 C filestream is used when the source character stream is a filesystem based input set and all the characters in the filestream can be loaded at once into memory and away the lexer goes. 

A number of initializers are provided in order that various character sets can be supported from input files. The ANTLR3 C runtime expects to deal with UTF32 characters only (the reasons for this are to do with the simplification of C code when using this form of Unicode encoding, though this is not a panacea. More information can be found on this by consulting:
.IP "\(bu" 2
http://www.unicode.org/versions/Unicode4.0.0/ch02.pdf#G11178 Where a well grounded discussion of the encoding formats available may be found. 
.PP

.SH SYNOPSIS
.br
.PP
\fC#include <antlr3.h>\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "static \fBpANTLR3_INPUT_STREAM\fP \fBantlr3CreateFileStream\fP (\fBpANTLR3_UINT8\fP fileName)"
.br
.RI "\fIUse the contents of an operating system file as the input for an input stream. \fP"
.ti -1c
.RI "static \fBpANTLR3_INPUT_STREAM\fP \fBantlr3CreateStringStream\fP (\fBpANTLR3_UINT8\fP data)"
.br
.RI "\fIUse the supplied 'string' as input to the stream. \fP"
.ti -1c
.RI "ANTLR3_API void \fBantlr3Fclose\fP (\fBANTLR3_FDSC\fP fd)"
.br
.RI "\fIClose an operating system file and free any handles etc. \fP"
.ti -1c
.RI "ANTLR3_API \fBpANTLR3_INPUT_STREAM\fP \fBantlr3FileStreamNew\fP (\fBpANTLR3_UINT8\fP fileName, \fBANTLR3_UINT32\fP encoding)"
.br
.ti -1c
.RI "ANTLR3_API \fBANTLR3_FDSC\fP \fBantlr3Fopen\fP (\fBpANTLR3_UINT8\fP filename, const char *mode)"
.br
.RI "\fIOpen an operating system file and return the descriptor We just use the common open() and related functions here. \fP"
.ti -1c
.RI "ANTLR3_API \fBANTLR3_UINT32\fP \fBantlr3Fread\fP (\fBANTLR3_FDSC\fP fdsc, \fBANTLR3_UINT32\fP count, void *data)"
.br
.ti -1c
.RI "ANTLR3_API \fBANTLR3_UINT32\fP \fBantlr3Fsize\fP (\fBpANTLR3_UINT8\fP fileName)"
.br
.ti -1c
.RI "ANTLR3_API \fBANTLR3_UINT32\fP \fBantlr3read8Bit\fP (\fBpANTLR3_INPUT_STREAM\fP input, \fBpANTLR3_UINT8\fP fileName)"
.br
.ti -1c
.RI "ANTLR3_API \fBpANTLR3_INPUT_STREAM\fP \fBantlr3StringStreamNew\fP (\fBpANTLR3_UINT8\fP data, \fBANTLR3_UINT32\fP encoding, \fBANTLR3_UINT32\fP size, \fBpANTLR3_UINT8\fP name)"
.br
.ti -1c
.RI "static void \fBsetupInputStream\fP (\fBpANTLR3_INPUT_STREAM\fP input)"
.br
.RI "\fIDetermine endianess of the input stream and install the API required for the encoding in that format. \fP"
.in -1c
.SH "Function Documentation"
.PP 
.SS "static \fBpANTLR3_INPUT_STREAM\fP antlr3CreateFileStream (\fBpANTLR3_UINT8\fP fileName)\fC [static]\fP"
.PP
Use the contents of an operating system file as the input for an input stream. 
.PP
\fBParameters:\fP
.RS 4
\fIfileName\fP Name of operating system file to read. 
.RE
.PP
\fBReturns:\fP
.RS 4
.IP "\(bu" 2
Pointer to new input stream context upon success
.IP "\(bu" 2
One of the ANTLR3_ERR_ defines on error. 
.PP
.RE
.PP

.PP
References ANTLR3_CALLOC, ANTLR3_SUCCESS, antlr3GenericSetupStream(), antlr3read8Bit(), and ANTLR3_INPUT_STREAM_struct::close.
.PP
Referenced by antlr3FileStreamNew().
.SS "static \fBpANTLR3_INPUT_STREAM\fP antlr3CreateStringStream (\fBpANTLR3_UINT8\fP data)\fC [static]\fP"
.PP
Use the supplied 'string' as input to the stream. 
.PP
\fBParameters:\fP
.RS 4
\fIdata\fP Pointer to the input data 
.RE
.PP
\fBReturns:\fP
.RS 4
.IP "\(bu" 2
Pointer to new input stream context upon success
.IP "\(bu" 2
NULL defines on error. 
.PP
.RE
.PP

.PP
References ANTLR3_CALLOC, ANTLR3_FALSE, antlr3GenericSetupStream(), ANTLR3_INPUT_STREAM_struct::data, and ANTLR3_INPUT_STREAM_struct::isAllocated.
.PP
Referenced by antlr3StringStreamNew().
.SS "ANTLR3_API void antlr3Fclose (\fBANTLR3_FDSC\fP fd)"
.PP
Close an operating system file and free any handles etc. 
.PP
Referenced by antlr3read8Bit().
.SS "ANTLR3_API \fBpANTLR3_INPUT_STREAM\fP antlr3FileStreamNew (\fBpANTLR3_UINT8\fP fileName, \fBANTLR3_UINT32\fP encoding)"
.PP
References antlr3CreateFileStream(), ANTLR3_INPUT_STREAM_struct::encoding, ANTLR3_INPUT_STREAM_struct::fileName, ANTLR3_INPUT_STREAM_struct::istream, ANTLR3_STRING_FACTORY_struct::newStr8, setupInputStream(), ANTLR3_INT_STREAM_struct::streamName, and ANTLR3_INPUT_STREAM_struct::strFactory.
.SS "ANTLR3_API \fBANTLR3_FDSC\fP antlr3Fopen (\fBpANTLR3_UINT8\fP filename, const char * mode)"
.PP
Open an operating system file and return the descriptor We just use the common open() and related functions here. 
.PP
Later we might find better ways on systems such as Windows and OpenVMS for instance. But the idea is to read the while file at once anyway, so it may be irrelevant. 
.PP
Referenced by antlr3read8Bit().
.SS "ANTLR3_API \fBANTLR3_UINT32\fP antlr3Fread (\fBANTLR3_FDSC\fP fdsc, \fBANTLR3_UINT32\fP count, void * data)"
.PP
Referenced by antlr3read8Bit().
.SS "ANTLR3_API \fBANTLR3_UINT32\fP antlr3Fsize (\fBpANTLR3_UINT8\fP fileName)"
.PP
References _stat.
.PP
Referenced by antlr3read8Bit().
.SS "ANTLR3_API \fBANTLR3_UINT32\fP antlr3read8Bit (\fBpANTLR3_INPUT_STREAM\fP input, \fBpANTLR3_UINT8\fP fileName)"
.PP
References ANTLR3_ERR_NOFILE, ANTLR3_ERR_NOMEM, ANTLR3_MALLOC, ANTLR3_SUCCESS, ANTLR3_TRUE, antlr3Fclose(), antlr3Fopen(), antlr3Fread(), antlr3Fsize(), ANTLR3_INPUT_STREAM_struct::data, ANTLR3_INPUT_STREAM_struct::isAllocated, and ANTLR3_INPUT_STREAM_struct::sizeBuf.
.PP
Referenced by antlr3CreateFileStream().
.SS "ANTLR3_API \fBpANTLR3_INPUT_STREAM\fP antlr3StringStreamNew (\fBpANTLR3_UINT8\fP data, \fBANTLR3_UINT32\fP encoding, \fBANTLR3_UINT32\fP size, \fBpANTLR3_UINT8\fP name)"
.PP
References antlr3CreateStringStream(), ANTLR3_INPUT_STREAM_struct::encoding, ANTLR3_INPUT_STREAM_struct::fileName, ANTLR3_INPUT_STREAM_struct::istream, ANTLR3_STRING_FACTORY_struct::newStr8, setupInputStream(), ANTLR3_INPUT_STREAM_struct::sizeBuf, ANTLR3_INT_STREAM_struct::streamName, and ANTLR3_INPUT_STREAM_struct::strFactory.
.SS "static void setupInputStream (\fBpANTLR3_INPUT_STREAM\fP input)\fC [static]\fP"
.PP
Determine endianess of the input stream and install the API required for the encoding in that format. 
.PP
References antlr38BitSetupStream(), ANTLR3_ENC_8BIT, ANTLR3_ENC_EBCDIC, ANTLR3_ENC_UTF16, ANTLR3_ENC_UTF16BE, ANTLR3_ENC_UTF16LE, ANTLR3_ENC_UTF32, ANTLR3_ENC_UTF32BE, ANTLR3_ENC_UTF32LE, ANTLR3_ENC_UTF8, ANTLR3_FALSE, ANTLR3_TRUE, antlr3EBCDICSetupStream(), antlr3UTF16SetupStream(), antlr3UTF32SetupStream(), antlr3UTF8SetupStream(), ANTLR3_INPUT_STREAM_struct::encoding, and ANTLR3_INPUT_STREAM_struct::nextChar.
.PP
Referenced by antlr3FileStreamNew(), and antlr3StringStreamNew().
.SH "Author"
.PP 
Generated automatically by Doxygen for ANTLR3C from the source code.
