.TH "ANTLR3_BASE_RECOGNIZER_struct" 3 "29 Nov 2010" "Version 3.3" "ANTLR3C" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ANTLR3_BASE_RECOGNIZER_struct \- 
.SH SYNOPSIS
.br
.PP
\fC#include <antlr3baserecognizer.h>\fP
.PP
.SH "Detailed Description"
.PP 
Base tracking context structure for all types of recognizers. 
.SS "Data Fields"

.in +1c
.ti -1c
.RI "\fBANTLR3_BOOLEAN\fP(* \fBalreadyParsedRule\fP )(struct \fBANTLR3_BASE_RECOGNIZER_struct\fP *\fBrecognizer\fP, \fBANTLR3_MARKER\fP ruleIndex)"
.br
.RI "\fIPointer to function that determines whether the rule has parsed input at the current index in the input stream. \fP"
.ti -1c
.RI "void(* \fBbeginBacktrack\fP )(struct \fBANTLR3_BASE_RECOGNIZER_struct\fP *\fBrecognizer\fP, \fBANTLR3_UINT32\fP level)"
.br
.RI "\fIPointer to a function that is a hook to listen to token consumption during error recovery. \fP"
.ti -1c
.RI "void(* \fBbeginResync\fP )(struct \fBANTLR3_BASE_RECOGNIZER_struct\fP *\fBrecognizer\fP)"
.br
.RI "\fIPointer to a function that is a hook to listen to token consumption during error recovery. \fP"
.ti -1c
.RI "\fBpANTLR3_BITSET\fP(* \fBcombineFollows\fP )(struct \fBANTLR3_BASE_RECOGNIZER_struct\fP *\fBrecognizer\fP, \fBANTLR3_BOOLEAN\fP exact)"
.br
.RI "\fIPointer to a function to combine follow bitsets. \fP"
.ti -1c
.RI "\fBpANTLR3_BITSET\fP(* \fBcomputeCSRuleFollow\fP )(struct \fBANTLR3_BASE_RECOGNIZER_struct\fP *\fBrecognizer\fP)"
.br
.RI "\fIPointer to a function that computes the context-sensitive FOLLOW set for the current rule. \fP"
.ti -1c
.RI "\fBpANTLR3_BITSET\fP(* \fBcomputeErrorRecoverySet\fP )(struct \fBANTLR3_BASE_RECOGNIZER_struct\fP *\fBrecognizer\fP)"
.br
.RI "\fIPointer to a function to computer the error recovery set for the current rule. \fP"
.ti -1c
.RI "void(* \fBconsumeUntil\fP )(struct \fBANTLR3_BASE_RECOGNIZER_struct\fP *\fBrecognizer\fP, \fBANTLR3_UINT32\fP tokenType)"
.br
.RI "\fIPointer to function that consumes input until the next token matches the given token. \fP"
.ti -1c
.RI "void(* \fBconsumeUntilSet\fP )(struct \fBANTLR3_BASE_RECOGNIZER_struct\fP *\fBrecognizer\fP, \fBpANTLR3_BITSET\fP set)"
.br
.RI "\fIPointer to function that consumes input until the next token matches one in the given set. \fP"
.ti -1c
.RI "\fBpANTLR3_DEBUG_EVENT_LISTENER\fP \fBdebugger\fP"
.br
.RI "\fIIf set to something other than NULL, then this structure is points to an instance of the debugger interface. \fP"
.ti -1c
.RI "void(* \fBdisplayRecognitionError\fP )(struct \fBANTLR3_BASE_RECOGNIZER_struct\fP *\fBrecognizer\fP, \fBpANTLR3_UINT8\fP *tokenNames)"
.br
.RI "\fIPointer to a function that is called to display a recognition error message. \fP"
.ti -1c
.RI "void(* \fBendBacktrack\fP )(struct \fBANTLR3_BASE_RECOGNIZER_struct\fP *\fBrecognizer\fP, \fBANTLR3_UINT32\fP level, \fBANTLR3_BOOLEAN\fP successful)"
.br
.RI "\fIPointer to a function that is a hook to listen to token consumption during error recovery. \fP"
.ti -1c
.RI "void(* \fBendResync\fP )(struct \fBANTLR3_BASE_RECOGNIZER_struct\fP *\fBrecognizer\fP)"
.br
.RI "\fIPointer to a function that is a hook to listen to token consumption during error recovery. \fP"
.ti -1c
.RI "void(* \fBexConstruct\fP )(struct \fBANTLR3_BASE_RECOGNIZER_struct\fP *\fBrecognizer\fP)"
.br
.RI "\fIPointer to a function that can construct a generic exception structure with such information as the input stream can provide. \fP"
.ti -1c
.RI "struct \fBANTLR3_BASE_RECOGNIZER_struct\fP \fBpANTLR3_BITSET_LIST\fP \fBfollow\fP"
.br
.ti -1c
.RI "void(* \fBfree\fP )(struct \fBANTLR3_BASE_RECOGNIZER_struct\fP *\fBrecognizer\fP)"
.br
.RI "\fIPointer to a function that knows how to free the resources of a base recognizer. \fP"
.ti -1c
.RI "void *(* \fBgetCurrentInputSymbol\fP )(struct \fBANTLR3_BASE_RECOGNIZER_struct\fP *\fBrecognizer\fP, \fBpANTLR3_INT_STREAM\fP istream)"
.br
.RI "\fIPointer to a function that returns the current input symbol. \fP"
.ti -1c
.RI "void *(* \fBgetMissingSymbol\fP )(struct \fBANTLR3_BASE_RECOGNIZER_struct\fP *\fBrecognizer\fP, \fBpANTLR3_INT_STREAM\fP istream, \fBpANTLR3_EXCEPTION\fP e, \fBANTLR3_UINT32\fP expectedTokenType, \fBpANTLR3_BITSET_LIST\fP \fBfollow\fP)"
.br
.RI "\fIConjure up a missing token during error recovery. \fP"
.ti -1c
.RI "\fBANTLR3_UINT32\fP(* \fBgetNumberOfSyntaxErrors\fP )(struct \fBANTLR3_BASE_RECOGNIZER_struct\fP *\fBrecognizer\fP)"
.br
.RI "\fIGet number of recognition errors (lexer, parser, tree parser). \fP"
.ti -1c
.RI "\fBpANTLR3_STACK\fP(* \fBgetRuleInvocationStack\fP )(struct \fBANTLR3_BASE_RECOGNIZER_struct\fP *\fBrecognizer\fP)"
.br
.RI "\fIPointer to function that returns an ANTLR3_LIST of the strings that identify the rules in the parser that got you to this point. \fP"
.ti -1c
.RI "\fBpANTLR3_STACK\fP(* \fBgetRuleInvocationStackNamed\fP )(struct \fBANTLR3_BASE_RECOGNIZER_struct\fP *\fBrecognizer\fP, \fBpANTLR3_UINT8\fP name)"
.br
.ti -1c
.RI "\fBANTLR3_MARKER\fP(* \fBgetRuleMemoization\fP )(struct \fBANTLR3_BASE_RECOGNIZER_struct\fP *\fBrecognizer\fP, \fBANTLR3_INTKEY\fP ruleIndex, \fBANTLR3_MARKER\fP ruleParseStart)"
.br
.RI "\fIPointer to a function to return whether the rule has parsed input starting at the supplied start index before. \fP"
.ti -1c
.RI "void *(* \fBmatch\fP )(struct \fBANTLR3_BASE_RECOGNIZER_struct\fP *\fBrecognizer\fP, \fBANTLR3_UINT32\fP ttype, \fBpANTLR3_BITSET_LIST\fP \fBfollow\fP)"
.br
.RI "\fIPointer to a function that matches the current input symbol against the supplied type. \fP"
.ti -1c
.RI "void(* \fBmatchAny\fP )(struct \fBANTLR3_BASE_RECOGNIZER_struct\fP *\fBrecognizer\fP)"
.br
.RI "\fIPointer to a function that matches the next token/char in the input stream regardless of what it actually is. \fP"
.ti -1c
.RI "void(* \fBmemoize\fP )(struct \fBANTLR3_BASE_RECOGNIZER_struct\fP *\fBrecognizer\fP, \fBANTLR3_MARKER\fP ruleIndex, \fBANTLR3_MARKER\fP ruleParseStart)"
.br
.RI "\fIPointer to function that records whether the rule has parsed the input at a current position successfully or not. \fP"
.ti -1c
.RI "void(* \fBmismatch\fP )(struct \fBANTLR3_BASE_RECOGNIZER_struct\fP *\fBrecognizer\fP, \fBANTLR3_UINT32\fP ttype, \fBpANTLR3_BITSET_LIST\fP \fBfollow\fP)"
.br
.RI "\fIPointer to a function that works out what to do when a token mismatch occurs, so that Tree parsers can behave differently to other recognizers. \fP"
.ti -1c
.RI "\fBANTLR3_BOOLEAN\fP(* \fBmismatchIsMissingToken\fP )(struct \fBANTLR3_BASE_RECOGNIZER_struct\fP *\fBrecognizer\fP, \fBpANTLR3_INT_STREAM\fP input, \fBpANTLR3_BITSET_LIST\fP \fBfollow\fP)"
.br
.RI "\fIPointer to a function that decides if the current token is one that can logically follow the one we were looking for, in which case the one we were looking for is probably missing from the input. \fP"
.ti -1c
.RI "\fBANTLR3_BOOLEAN\fP(* \fBmismatchIsUnwantedToken\fP )(struct \fBANTLR3_BASE_RECOGNIZER_struct\fP *\fBrecognizer\fP, \fBpANTLR3_INT_STREAM\fP input, \fBANTLR3_UINT32\fP ttype)"
.br
.RI "\fIPointer to a function that decides if the token ahead of the current one is the one we were loking for, in which case the curernt one is very likely extraneous and can be reported that way. \fP"
.ti -1c
.RI "struct \fBANTLR3_BASE_RECOGNIZER_struct\fP * \fBrecognizer\fP"
.br
.RI "\fIPointer to common routine to handle single token insertion for recovery functions. \fP"
.ti -1c
.RI "void(* \fBrecover\fP )(struct \fBANTLR3_BASE_RECOGNIZER_struct\fP *\fBrecognizer\fP)"
.br
.RI "\fIPointer to a function that recovers from an error found in the input stream. \fP"
.ti -1c
.RI "void *(* \fBrecoverFromMismatchedSet\fP )(struct \fBANTLR3_BASE_RECOGNIZER_struct\fP *\fBrecognizer\fP, \fBpANTLR3_BITSET_LIST\fP \fBfollow\fP)"
.br
.RI "\fIPointer to a function that recovers from a mismatched set in the token stream, in a similar manner to (*recoverFromMismatchedToken). \fP"
.ti -1c
.RI "void *(* \fBrecoverFromMismatchedToken\fP )(struct \fBANTLR3_BASE_RECOGNIZER_struct\fP *\fBrecognizer\fP, \fBANTLR3_UINT32\fP ttype, \fBpANTLR3_BITSET_LIST\fP \fBfollow\fP)"
.br
.RI "\fIPointer to a function that recovers from a mismatched token in the input stream. \fP"
.ti -1c
.RI "void(* \fBreportError\fP )(struct \fBANTLR3_BASE_RECOGNIZER_struct\fP *\fBrecognizer\fP)"
.br
.RI "\fIPointer to a function to call to report a recognition problem. \fP"
.ti -1c
.RI "void(* \fBreset\fP )(struct \fBANTLR3_BASE_RECOGNIZER_struct\fP *\fBrecognizer\fP)"
.br
.RI "\fIReset the recognizer. \fP"
.ti -1c
.RI "\fBpANTLR3_RECOGNIZER_SHARED_STATE\fP \fBstate\fP"
.br
.RI "\fIA pointer to the shared recognizer state, such that multiple recognizers can use the same inputs streams and so on (in the case of grammar inheritance for instance. \fP"
.ti -1c
.RI "void * \fBsuper\fP"
.br
.RI "\fIWhatever super structure is providing this interface needs a pointer to itself so that this can be passed back to it whenever the api functions are called back from here. \fP"
.ti -1c
.RI "\fBANTLR3_BOOLEAN\fP(* \fBsynpred\fP )(struct \fBANTLR3_BASE_RECOGNIZER_struct\fP *\fBrecognizer\fP, void *ctx, void(*predicate)(void *ctx))"
.br
.RI "\fIPointer to a function that returns whether the supplied grammar function will parse the current input stream or not. \fP"
.ti -1c
.RI "\fBpANTLR3_HASH_TABLE\fP(* \fBtoStrings\fP )(struct \fBANTLR3_BASE_RECOGNIZER_struct\fP *\fBrecognizer\fP, \fBpANTLR3_HASH_TABLE\fP)"
.br
.RI "\fIPointer to a function that converts an ANLR3_LIST of tokens to an ANTLR3_LIST of string token names. \fP"
.ti -1c
.RI "\fBANTLR3_UINT32\fP \fBtype\fP"
.br
.RI "\fIIndicates the type of recognizer that we are an instance of. \fP"
.in -1c
.SH "Field Documentation"
.PP 
.SS "\fBANTLR3_BOOLEAN\fP(* \fBANTLR3_BASE_RECOGNIZER_struct::alreadyParsedRule\fP)(struct \fBANTLR3_BASE_RECOGNIZER_struct\fP *\fBrecognizer\fP, \fBANTLR3_MARKER\fP ruleIndex)"
.PP
Pointer to function that determines whether the rule has parsed input at the current index in the input stream. 
.PP
Referenced by antlr3BaseRecognizerNew().
.SS "void(* \fBANTLR3_BASE_RECOGNIZER_struct::beginBacktrack\fP)(struct \fBANTLR3_BASE_RECOGNIZER_struct\fP *\fBrecognizer\fP, \fBANTLR3_UINT32\fP level)"
.PP
Pointer to a function that is a hook to listen to token consumption during error recovery. 
.PP
This is mainly used by the debug parser to send events to the listener. 
.PP
Referenced by antlr3BaseRecognizerNew().
.SS "void(* \fBANTLR3_BASE_RECOGNIZER_struct::beginResync\fP)(struct \fBANTLR3_BASE_RECOGNIZER_struct\fP *\fBrecognizer\fP)"
.PP
Pointer to a function that is a hook to listen to token consumption during error recovery. 
.PP
This is mainly used by the debug parser to send events to the listener. 
.PP
Referenced by antlr3BaseRecognizerNew(), recover(), and recoverFromMismatchedToken().
.SS "\fBpANTLR3_BITSET\fP(* \fBANTLR3_BASE_RECOGNIZER_struct::combineFollows\fP)(struct \fBANTLR3_BASE_RECOGNIZER_struct\fP *\fBrecognizer\fP, \fBANTLR3_BOOLEAN\fP exact)"
.PP
Pointer to a function to combine follow bitsets. 
.PP
\fBSee also:\fP
.RS 4
antlr3CombineFollows() for details. 
.RE
.PP

.PP
Referenced by antlr3BaseRecognizerNew(), computeCSRuleFollow(), and computeErrorRecoverySet().
.SS "\fBpANTLR3_BITSET\fP(* \fBANTLR3_BASE_RECOGNIZER_struct::computeCSRuleFollow\fP)(struct \fBANTLR3_BASE_RECOGNIZER_struct\fP *\fBrecognizer\fP)"
.PP
Pointer to a function that computes the context-sensitive FOLLOW set for the current rule. 
.PP
\fBSee also:\fP
.RS 4
antlr3ComputeCSRuleFollow() for details. 
.RE
.PP

.PP
Referenced by antlr3BaseRecognizerNew(), mismatchIsMissingToken(), and recoverFromMismatchedElement().
.SS "\fBpANTLR3_BITSET\fP(* \fBANTLR3_BASE_RECOGNIZER_struct::computeErrorRecoverySet\fP)(struct \fBANTLR3_BASE_RECOGNIZER_struct\fP *\fBrecognizer\fP)"
.PP
Pointer to a function to computer the error recovery set for the current rule. 
.PP
\fBSee also:\fP
.RS 4
antlr3ComputeErrorRecoverySet() for details. 
.RE
.PP

.PP
Referenced by antlr3BaseRecognizerNew(), and recover().
.SS "void(* \fBANTLR3_BASE_RECOGNIZER_struct::consumeUntil\fP)(struct \fBANTLR3_BASE_RECOGNIZER_struct\fP *\fBrecognizer\fP, \fBANTLR3_UINT32\fP tokenType)"
.PP
Pointer to function that consumes input until the next token matches the given token. 
.PP
Referenced by antlr3BaseRecognizerNew().
.SS "void(* \fBANTLR3_BASE_RECOGNIZER_struct::consumeUntilSet\fP)(struct \fBANTLR3_BASE_RECOGNIZER_struct\fP *\fBrecognizer\fP, \fBpANTLR3_BITSET\fP set)"
.PP
Pointer to function that consumes input until the next token matches one in the given set. 
.PP
Referenced by antlr3BaseRecognizerNew(), and recover().
.SS "\fBpANTLR3_DEBUG_EVENT_LISTENER\fP \fBANTLR3_BASE_RECOGNIZER_struct::debugger\fP"
.PP
If set to something other than NULL, then this structure is points to an instance of the debugger interface. 
.PP
In general, the debugger is only referenced internally in recovery/error operations so that it does not cause overhead by having to check this pointer in every function/method 
.PP
Referenced by antlr3BaseRecognizerNew(), beginBacktrack(), beginResync(), endBacktrack(), endResync(), recoverFromMismatchedToken(), reportError(), and setDebugListener().
.SS "void(* \fBANTLR3_BASE_RECOGNIZER_struct::displayRecognitionError\fP)(struct \fBANTLR3_BASE_RECOGNIZER_struct\fP *\fBrecognizer\fP, \fBpANTLR3_UINT8\fP *tokenNames)"
.PP
Pointer to a function that is called to display a recognition error message. 
.PP
You may override this function independently of (*reportError)() above as that function calls this one to do the actual exception printing. 
.PP
Referenced by antlr3BaseRecognizerNew(), antlr3LexerNew(), and reportError().
.SS "void(* \fBANTLR3_BASE_RECOGNIZER_struct::endBacktrack\fP)(struct \fBANTLR3_BASE_RECOGNIZER_struct\fP *\fBrecognizer\fP, \fBANTLR3_UINT32\fP level, \fBANTLR3_BOOLEAN\fP successful)"
.PP
Pointer to a function that is a hook to listen to token consumption during error recovery. 
.PP
This is mainly used by the debug parser to send events to the listener. 
.PP
Referenced by antlr3BaseRecognizerNew().
.SS "void(* \fBANTLR3_BASE_RECOGNIZER_struct::endResync\fP)(struct \fBANTLR3_BASE_RECOGNIZER_struct\fP *\fBrecognizer\fP)"
.PP
Pointer to a function that is a hook to listen to token consumption during error recovery. 
.PP
This is mainly used by the debug parser to send events to the listener. 
.PP
Referenced by antlr3BaseRecognizerNew(), recover(), and recoverFromMismatchedToken().
.SS "void(* \fBANTLR3_BASE_RECOGNIZER_struct::exConstruct\fP)(struct \fBANTLR3_BASE_RECOGNIZER_struct\fP *\fBrecognizer\fP)"
.PP
Pointer to a function that can construct a generic exception structure with such information as the input stream can provide. 
.PP
Referenced by antlr3BaseRecognizerNew(), antlr3ParserNew(), antlr3TreeParserNewStream(), matchc(), matchRange(), matchs(), mismatch(), noViableAlt(), and setCharStream().
.SS "struct \fBANTLR3_BASE_RECOGNIZER_struct\fP \fBpANTLR3_BITSET_LIST\fP \fBANTLR3_BASE_RECOGNIZER_struct::follow\fP\fC [read]\fP"
.PP
.SS "void(* \fBANTLR3_BASE_RECOGNIZER_struct::free\fP)(struct \fBANTLR3_BASE_RECOGNIZER_struct\fP *\fBrecognizer\fP)"
.PP
Pointer to a function that knows how to free the resources of a base recognizer. 
.PP
Referenced by antlr3BaseRecognizerNew(), antlr3LexerNew(), freeLexer(), and freeParser().
.SS "void*(* \fBANTLR3_BASE_RECOGNIZER_struct::getCurrentInputSymbol\fP)(struct \fBANTLR3_BASE_RECOGNIZER_struct\fP *\fBrecognizer\fP, \fBpANTLR3_INT_STREAM\fP istream)"
.PP
Pointer to a function that returns the current input symbol. 
.PP
The is placed into any label for the associated token ref; e.g., x=ID. Token and tree parsers need to return different objects. Rather than test for input stream type or change the IntStream interface, I use a simple method to ask the recognizer to tell me what the current input symbol is.
.PP
This is ignored for lexers and the lexer implementation of this function should return NULL. 
.PP
Referenced by antlr3BaseRecognizerNew(), antlr3LexerNew(), antlr3TreeParserNewStream(), match(), and recoverFromMismatchedToken().
.SS "void*(* \fBANTLR3_BASE_RECOGNIZER_struct::getMissingSymbol\fP)(struct \fBANTLR3_BASE_RECOGNIZER_struct\fP *\fBrecognizer\fP, \fBpANTLR3_INT_STREAM\fP istream, \fBpANTLR3_EXCEPTION\fP e, \fBANTLR3_UINT32\fP expectedTokenType, \fBpANTLR3_BITSET_LIST\fP \fBfollow\fP)"
.PP
Conjure up a missing token during error recovery. 
.PP
The recognizer attempts to recover from single missing symbols. But, actions might refer to that missing symbol. For example, x=ID {f($x);}. The action clearly assumes that there has been an identifier matched previously and that $x points at that token. If that token is missing, but the next token in the stream is what we want we assume that this token is missing and we keep going. Because we have to return some token to replace the missing token, we have to conjure one up. This method gives the user control over the tokens returned for missing tokens. Mostly, you will want to create something special for identifier tokens. For literals such as '{' and ',', the default action in the parser or tree parser works. It simply creates a CommonToken of the appropriate type. The text will be the token. If you change what tokens must be created by the lexer, override this method to create the appropriate tokens. 
.PP
Referenced by antlr3BaseRecognizerNew(), antlr3LexerNew(), antlr3TreeParserNewStream(), recoverFromMismatchedSet(), and recoverFromMismatchedToken().
.SS "\fBANTLR3_UINT32\fP(* \fBANTLR3_BASE_RECOGNIZER_struct::getNumberOfSyntaxErrors\fP)(struct \fBANTLR3_BASE_RECOGNIZER_struct\fP *\fBrecognizer\fP)"
.PP
Get number of recognition errors (lexer, parser, tree parser). 
.PP
Each recognizer tracks its own number. So parser and lexer each have separate count. Does not count the spurious errors found between an error and next valid token match
.PP
\fBSee also:\fP
.RS 4
\fBreportError()\fP 
.RE
.PP

.PP
Referenced by antlr3BaseRecognizerNew().
.SS "\fBpANTLR3_STACK\fP(* \fBANTLR3_BASE_RECOGNIZER_struct::getRuleInvocationStack\fP)(struct \fBANTLR3_BASE_RECOGNIZER_struct\fP *\fBrecognizer\fP)"
.PP
Pointer to function that returns an ANTLR3_LIST of the strings that identify the rules in the parser that got you to this point. 
.PP
Can be overridden by installing your own function set.
.PP
\fBTodo\fP
.RS 4
Document how to override invocation stack functions. 
.RE
.PP

.PP
Referenced by antlr3BaseRecognizerNew().
.SS "\fBpANTLR3_STACK\fP(* \fBANTLR3_BASE_RECOGNIZER_struct::getRuleInvocationStackNamed\fP)(struct \fBANTLR3_BASE_RECOGNIZER_struct\fP *\fBrecognizer\fP, \fBpANTLR3_UINT8\fP name)"
.PP
Referenced by antlr3BaseRecognizerNew().
.SS "\fBANTLR3_MARKER\fP(* \fBANTLR3_BASE_RECOGNIZER_struct::getRuleMemoization\fP)(struct \fBANTLR3_BASE_RECOGNIZER_struct\fP *\fBrecognizer\fP, \fBANTLR3_INTKEY\fP ruleIndex, \fBANTLR3_MARKER\fP ruleParseStart)"
.PP
Pointer to a function to return whether the rule has parsed input starting at the supplied start index before. 
.PP
If the rule has not parsed input starting from the supplied start index, then it will return ANTLR3_MEMO_RULE_UNKNOWN. If it has parsed from the suppled start point then it will return the point where it last stopped parsing after that start point. 
.PP
Referenced by alreadyParsedRule(), and antlr3BaseRecognizerNew().
.SS "void*(* \fBANTLR3_BASE_RECOGNIZER_struct::match\fP)(struct \fBANTLR3_BASE_RECOGNIZER_struct\fP *\fBrecognizer\fP, \fBANTLR3_UINT32\fP ttype, \fBpANTLR3_BITSET_LIST\fP \fBfollow\fP)"
.PP
Pointer to a function that matches the current input symbol against the supplied type. 
.PP
the function causes an error if a match is not found and the default implementation will also attempt to perform one token insertion or deletion if that is possible with the input stream. You can override the default implementation by installing a pointer to your own function in this interface after the recognizer has initialized. This can perform different recovery options or not recover at all and so on. To ignore recovery altogether, see the comments in the default implementation of this function in \fBantlr3baserecognizer.c\fP
.PP
Note that errors are signalled by setting the error flag below and creating a new exception structure and installing it in the exception pointer below (you can chain these if you like and handle them in some customized way). 
.PP
Referenced by antlr3BaseRecognizerNew().
.SS "void(* \fBANTLR3_BASE_RECOGNIZER_struct::matchAny\fP)(struct \fBANTLR3_BASE_RECOGNIZER_struct\fP *\fBrecognizer\fP)"
.PP
Pointer to a function that matches the next token/char in the input stream regardless of what it actually is. 
.PP
Referenced by antlr3BaseRecognizerNew().
.SS "void(* \fBANTLR3_BASE_RECOGNIZER_struct::memoize\fP)(struct \fBANTLR3_BASE_RECOGNIZER_struct\fP *\fBrecognizer\fP, \fBANTLR3_MARKER\fP ruleIndex, \fBANTLR3_MARKER\fP ruleParseStart)"
.PP
Pointer to function that records whether the rule has parsed the input at a current position successfully or not. 
.PP
Referenced by antlr3BaseRecognizerNew().
.SS "void(* \fBANTLR3_BASE_RECOGNIZER_struct::mismatch\fP)(struct \fBANTLR3_BASE_RECOGNIZER_struct\fP *\fBrecognizer\fP, \fBANTLR3_UINT32\fP ttype, \fBpANTLR3_BITSET_LIST\fP \fBfollow\fP)"
.PP
Pointer to a function that works out what to do when a token mismatch occurs, so that Tree parsers can behave differently to other recognizers. 
.PP
Referenced by antlr3BaseRecognizerNew(), and antlr3TreeParserNewStream().
.SS "\fBANTLR3_BOOLEAN\fP(* \fBANTLR3_BASE_RECOGNIZER_struct::mismatchIsMissingToken\fP)(struct \fBANTLR3_BASE_RECOGNIZER_struct\fP *\fBrecognizer\fP, \fBpANTLR3_INT_STREAM\fP input, \fBpANTLR3_BITSET_LIST\fP \fBfollow\fP)"
.PP
Pointer to a function that decides if the current token is one that can logically follow the one we were looking for, in which case the one we were looking for is probably missing from the input. 
.PP
Referenced by antlr3BaseRecognizerNew(), and recoverFromMismatchedSet().
.SS "\fBANTLR3_BOOLEAN\fP(* \fBANTLR3_BASE_RECOGNIZER_struct::mismatchIsUnwantedToken\fP)(struct \fBANTLR3_BASE_RECOGNIZER_struct\fP *\fBrecognizer\fP, \fBpANTLR3_INT_STREAM\fP input, \fBANTLR3_UINT32\fP ttype)"
.PP
Pointer to a function that decides if the token ahead of the current one is the one we were loking for, in which case the curernt one is very likely extraneous and can be reported that way. 
.PP
Referenced by antlr3BaseRecognizerNew(), and recoverFromMismatchedToken().
.SS "struct \fBANTLR3_BASE_RECOGNIZER_struct\fP* \fBANTLR3_BASE_RECOGNIZER_struct::recognizer\fP\fC [read]\fP"
.PP
Pointer to common routine to handle single token insertion for recovery functions. 
.PP
.SS "void(* \fBANTLR3_BASE_RECOGNIZER_struct::recover\fP)(struct \fBANTLR3_BASE_RECOGNIZER_struct\fP *\fBrecognizer\fP)"
.PP
Pointer to a function that recovers from an error found in the input stream. 
.PP
Generally, this will be a ANTLR3_EXCEPTION_NOVIABLE_ALT but it could also be from a mismatched token that the (*match)() could not recover from. 
.PP
Referenced by antlr3BaseRecognizerNew().
.SS "void*(* \fBANTLR3_BASE_RECOGNIZER_struct::recoverFromMismatchedSet\fP)(struct \fBANTLR3_BASE_RECOGNIZER_struct\fP *\fBrecognizer\fP, \fBpANTLR3_BITSET_LIST\fP \fBfollow\fP)"
.PP
Pointer to a function that recovers from a mismatched set in the token stream, in a similar manner to (*recoverFromMismatchedToken). 
.PP
Referenced by antlr3BaseRecognizerNew().
.SS "void*(* \fBANTLR3_BASE_RECOGNIZER_struct::recoverFromMismatchedToken\fP)(struct \fBANTLR3_BASE_RECOGNIZER_struct\fP *\fBrecognizer\fP, \fBANTLR3_UINT32\fP ttype, \fBpANTLR3_BITSET_LIST\fP \fBfollow\fP)"
.PP
Pointer to a function that recovers from a mismatched token in the input stream. 
.PP
\fBSee also:\fP
.RS 4
antlr3RecoverMismatch() for details. 
.RE
.PP

.PP
Referenced by antlr3BaseRecognizerNew(), match(), and mismatch().
.SS "void(* \fBANTLR3_BASE_RECOGNIZER_struct::reportError\fP)(struct \fBANTLR3_BASE_RECOGNIZER_struct\fP *\fBrecognizer\fP)"
.PP
Pointer to a function to call to report a recognition problem. 
.PP
You may override this function with your own function, but refer to the standard implementation in \fBantlr3baserecognizer.c\fP for guidance. The function should recognize whether error recovery is in force, so that it does not print out more than one error messages for the same error. From the java comments in BaseRecognizer.java:
.PP
This method sets errorRecovery to indicate the parser is recovering not parsing. Once in recovery mode, no errors are generated. To get out of recovery mode, the parser must successfully match a token (after a resync). So it will go:
.PP
1. error occurs 2. enter recovery mode, report error 3. consume until token found in resynch set 4. try to resume parsing 5. next \fBmatch()\fP will reset errorRecovery mode 
.PP
Referenced by antlr3BaseRecognizerNew(), antlr3LexerNew(), nextTokenStr(), recoverFromMismatchedElement(), recoverFromMismatchedSet(), and recoverFromMismatchedToken().
.SS "void(* \fBANTLR3_BASE_RECOGNIZER_struct::reset\fP)(struct \fBANTLR3_BASE_RECOGNIZER_struct\fP *\fBrecognizer\fP)"
.PP
Reset the recognizer. 
.PP
Referenced by antlr3BaseRecognizerNew(), antlr3LexerNew(), setTokenStream(), and setTreeNodeStream().
.SS "\fBpANTLR3_RECOGNIZER_SHARED_STATE\fP \fBANTLR3_BASE_RECOGNIZER_struct::state\fP"
.PP
A pointer to the shared recognizer state, such that multiple recognizers can use the same inputs streams and so on (in the case of grammar inheritance for instance. 
.PP
Referenced by alreadyParsedRule(), antlr3BaseRecognizerNew(), antlr3dfapredict(), antlr3LexerNew(), antlr3MTExceptionNew(), antlr3MTNExceptionNew(), antlr3RecognitionExceptionNew(), antlr3RewriteRuleElementStreamNewAE(), combineFollows(), displayRecognitionError(), emit(), emitNew(), freeBR(), freeLexer(), freeNodeRS(), freeParser(), freeRS(), getMissingSymbol(), getNumberOfSyntaxErrors(), getRuleMemoization(), getText(), match(), matchAny(), matchc(), matchRange(), matchs(), memoize(), mismatch(), mismatchIsMissingToken(), mismatchIsUnwantedToken(), nextToken(), nextTokenStr(), noViableAlt(), popCharStream(), pushCharStream(), recover(), recoverFromMismatchedElement(), recoverFromMismatchedSet(), recoverFromMismatchedToken(), reportError(), reset(), setCharStream(), and synpred().
.SS "void* \fBANTLR3_BASE_RECOGNIZER_struct::super\fP"
.PP
Whatever super structure is providing this interface needs a pointer to itself so that this can be passed back to it whenever the api functions are called back from here. 
.PP
Referenced by alreadyParsedRule(), antlr3LexerNew(), antlr3ParserNew(), antlr3RecognitionExceptionNew(), antlr3TreeParserNewStream(), consumeUntil(), consumeUntilSet(), displayRecognitionError(), match(), matchAny(), memoize(), mismatch(), recover(), recoverFromMismatchedElement(), recoverFromMismatchedSet(), recoverFromMismatchedToken(), reset(), and synpred().
.SS "\fBANTLR3_BOOLEAN\fP(* \fBANTLR3_BASE_RECOGNIZER_struct::synpred\fP)(struct \fBANTLR3_BASE_RECOGNIZER_struct\fP *\fBrecognizer\fP, void *ctx, void(*predicate)(void *ctx))"
.PP
Pointer to a function that returns whether the supplied grammar function will parse the current input stream or not. 
.PP
This is the way that syntactic predicates are evaluated. Unlike java, C is perfectly happy to invoke code via a pointer to a function (hence that's what all the ANTLR3 C interfaces do. 
.PP
Referenced by antlr3BaseRecognizerNew().
.SS "\fBpANTLR3_HASH_TABLE\fP(* \fBANTLR3_BASE_RECOGNIZER_struct::toStrings\fP)(struct \fBANTLR3_BASE_RECOGNIZER_struct\fP *\fBrecognizer\fP, \fBpANTLR3_HASH_TABLE\fP)"
.PP
Pointer to a function that converts an ANLR3_LIST of tokens to an ANTLR3_LIST of string token names. 
.PP
As this is mostly used in string template processing it may not be useful in the C runtime. 
.PP
Referenced by antlr3BaseRecognizerNew().
.SS "\fBANTLR3_UINT32\fP \fBANTLR3_BASE_RECOGNIZER_struct::type\fP"
.PP
Indicates the type of recognizer that we are an instance of. 
.PP
The programmer may set this to anything of course, but the default implementations of the interface only really understand the built in types, so new error handlers etc would probably be required to as well.
.PP
Valid types are:
.PP
.IP "\(bu" 2
\fBANTLR3_TYPE_LEXER\fP
.IP "\(bu" 2
\fBANTLR3_TYPE_PARSER\fP
.IP "\(bu" 2
\fBANTLR3_TYPE_TREE_PARSER\fP 
.PP

.PP
Referenced by alreadyParsedRule(), antlr3BaseRecognizerNew(), antlr3RecognitionExceptionNew(), antlr3TreeParserNewStream(), consumeUntil(), consumeUntilSet(), displayRecognitionError(), match(), matchAny(), memoize(), mismatch(), recover(), recoverFromMismatchedElement(), recoverFromMismatchedSet(), recoverFromMismatchedToken(), and synpred().

.SH "Author"
.PP 
Generated automatically by Doxygen for ANTLR3C from the source code.
