'(paste this into the prompt)

(set env '())
(set global-env '())

(set lookup-helper (lambda (x a b)
    (if (< (len a) 3)
        (lookup-helper x b '(error))
        (if (eq? (at a 0) x)
            (at a 1)
            (lookup-helper x (at a 2) b)))))
(set lookup-env (lambda (x) (lookup-helper x env global-env)))
(set add-env (lambda (k v) (begin (set-global env (list k v env)) v)))
(set add-global-env (lambda (k v) (begin (set-global global-env (list k v global-env)) v)))
(set add-params-helper (lambda (params args e i)
    (if (< i (len params))
        (add-params-helper params args
            (list (at params i) (eval (at args (+ i 1))) e) (+ i 1))
        e)))
(set add-params (lambda (params args e)
    (add-params-helper params args e 0)))
(set begin-helper (lambda (x i r)
    (if (< i (len x))
        (begin-helper x (+ i 1) (eval (at x i)))
        r)))
(set build-list (lambda (a i b)
    (if (< i (len b))
        (begin (set-at a (- i 1) (eval (at b i))) (build-list a (+ i 1) b))
        a)))
(set eval-if (lambda (x)
    (if (null? (eval (at x 1)))
        (if (> (len x) 3)
            (eval (at x 3))
            '())
        (eval (at x 2)))))
(set eval-apply (lambda (f x)
    (if (list? f)
        (begin (set saved-env env)
            (set env (add-params (at f 1) x env))
            (set result (eval (at f 2)))
            (set env saved-env)
            result)
        (f x))))
(set eval (lambda (x)
    (if (number? x) x
    (if (symbol? x) (lookup-env x)
    (if (list? x) (eval-list (at x 0) x)
    (error-or-end-of-input))))))
(set eval-list (lambda (name x)
    (if (eq? name 'set) (add-env (at x 1) (eval (at x 2)))
    (if (eq? name 'set-global) (add-global-env (at x 1) (eval (at x 2)))
    (if (eq? name 'quote) (at x 1)
    (if (eq? name 'begin) (begin-helper x 1 '())
    (if (eq? name 'if) (eval-if x)
    (if (eq? name 'lambda) x
    (eval-apply (eval (at x 0)) x)))))))))
(add-global-env '+ (lambda (args) (+ (eval (at args 1)) (eval (at args 2)))))
(add-global-env '- (lambda (args) (- (eval (at args 1)) (eval (at args 2)))))
(add-global-env '* (lambda (args) (* (eval (at args 1)) (eval (at args 2)))))
(add-global-env '/ (lambda (args) (/ (eval (at args 1)) (eval (at args 2)))))
(add-global-env '= (lambda (args) (= (eval (at args 1)) (eval (at args 2)))))
(add-global-env '/= (lambda (args) (/= (eval (at args 1)) (eval (at args 2)))))
(add-global-env '< (lambda (args) (< (eval (at args 1)) (eval (at args 2)))))
(add-global-env '> (lambda (args) (> (eval (at args 1)) (eval (at args 2)))))
(add-global-env '<= (lambda (args) (<= (eval (at args 1)) (eval (at args 2)))))
(add-global-env '>= (lambda (args) (>= (eval (at args 1)) (eval (at args 2)))))
(add-global-env 'len (lambda (args) (len (eval (at args 1)))))
(add-global-env 'at (lambda (args) (at (eval (at args 1)) (eval (at args 2)))))
(add-global-env 'set-at (lambda (args) (set-at (eval (at args 1)) (eval (at args 2)) (eval (at args 3)))))
(add-global-env 'eq? (lambda (args) (eq? (eval (at args 1)) (eval (at args 2)))))
(add-global-env 'number? (lambda (args) (number? (eval (at args 1)))))
(add-global-env 'list? (lambda (args) (list? (eval (at args 1)))))
(add-global-env 'symbol? (lambda (args) (symbol? (eval (at args 1)))))
(add-global-env 'null? (lambda (args) (null? (eval (at args 1)))))
(add-global-env 'list (lambda (args) (build-list (make-list (- (len args) 1)) 1 args)))
(add-global-env 'make-list (lambda (args) (make-list (eval (at args 1)))))
(add-global-env 'read read)
(add-global-env 'print (lambda (args) (print (eval (at args 1)))))
(set repl (lambda () (begin (print (eval (read))) (repl))))
(repl)
