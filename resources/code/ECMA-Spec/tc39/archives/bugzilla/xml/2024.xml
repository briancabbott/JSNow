<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.ecmascript.org/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.4+"
          urlbase="https://bugs.ecmascript.org/"
          
          maintainer="dherman@mozilla.com"
>

    <bug>
          <bug_id>2024</bug_id>
          
          <creation_ts>2013-10-01 05:43:00 -0700</creation_ts>
          <short_desc>22.2.3.26, %TypedArray%.prototype.sort: Invalid assertion in step 7</short_desc>
          <delta_ts>2013-10-29 09:44:36 -0700</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>Draft for 6th Edition</product>
          <component>technical issue</component>
          <version>Rev 19: September 27, 2013 Draft</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>Normal</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>---</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="André Bargull">andrebargull</reporter>
          <assigned_to name="Allen Wirfs-Brock">allen</assigned_to>
          
          

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>5760</commentid>
    <comment_count>0</comment_count>
    <who name="André Bargull">andrebargull</who>
    <bug_when>2013-10-01 05:43:09 -0700</bug_when>
    <thetext>Second attempt after bug 1939 to show the assertion in step 7 of SortCompare can be violated in obscure ways.

test case:
---
ta = new (class extends Int8Array {
  get length() { return 5 }
  static [Symbol.create]() {
    return Object.setPrototypeOf(Int8Array[Symbol.create].call(Int8Array), this.prototype);
  }
})(0);

ta.sort();
---

(1) %TypedArray%.prototype.sort() uses Get() to retrieve the &quot;length&quot; property instead of [[ArrayLength]], therefore subclasses can provide a different length than [[ArrayLength]].

(2) IntegerIndexedElementGet() returns `undefined` for out-of-bounds integer indexed properties. 

By combining (1) and (2) it&apos;s possible to get `undefined` values in SortCompare, so the assertion in step 7 fails.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>5807</commentid>
    <comment_count>1</comment_count>
    <who name="Allen Wirfs-Brock">allen</who>
    <bug_when>2013-10-02 15:26:28 -0700</bug_when>
    <thetext>fixed fixed Typed Array sort to use the [[ArrayLength]] internal property and change the description of all other TypedArray methods that share specs with Array prototype methods to say that they also use [[ArrayLength]] 

fixed in rev20 editor&apos;s draft</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>6025</commentid>
    <comment_count>2</comment_count>
    <who name="Allen Wirfs-Brock">allen</who>
    <bug_when>2013-10-29 09:44:36 -0700</bug_when>
    <thetext>fixed in rev20 draft, Oct. 28, 2013</thetext>
  </long_desc>
      
      

    </bug>

</bugzilla>