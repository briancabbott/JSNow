<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.ecmascript.org/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.4+"
          urlbase="https://bugs.ecmascript.org/"
          
          maintainer="dherman@mozilla.com"
>

    <bug>
          <bug_id>2662</bug_id>
          
          <creation_ts>2014-04-16 10:01:00 -0700</creation_ts>
          <short_desc>21.2.5.10 Significant issues with RegExp.prototype.split</short_desc>
          <delta_ts>2014-12-07 14:35:06 -0800</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>Draft for 6th Edition</product>
          <component>technical issue</component>
          <version>Rev 23: April 5, 2014 Draft</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>FIXED</resolution>
          
          <see_also>https://bugs.ecmascript.org/show_bug.cgi?id=3149</see_also>
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>Normal</priority>
          <bug_severity>major</bug_severity>
          <target_milestone>---</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Allen Wirfs-Brock">allen</reporter>
          <assigned_to name="Allen Wirfs-Brock">allen</assigned_to>
          <cc>claude.pache</cc>
          

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>7750</commentid>
    <comment_count>0</comment_count>
    <who name="Allen Wirfs-Brock">allen</who>
    <bug_when>2014-04-16 10:01:38 -0700</bug_when>
    <thetext>The algorithm  as currently written does not correctly deal with full unicode regular expressions.  In particular it needs to translate endIndex values from from code point offsets to code units offsets as is done by RegExpBuiltinExec (RegExpExec in rev23).

More generally, the algorithm is not usable by subclass that over-ride exec to change the matching semantics. This algorithm is the last place that the RegExp matcher is directly used without going through exec.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>9861</commentid>
    <comment_count>1</comment_count>
    <who name="Claude Pache">claude.pache</who>
    <bug_when>2014-08-25 05:51:34 -0700</bug_when>
    <thetext>&gt; More generally, the algorithm is not usable by subclass that over-ride exec
&gt; to change the matching semantics. This algorithm is the last place that the
&gt; RegExp matcher is directly used without going through exec.

An issue I see here is, if one want to use `exec`, one should run it as if the global flag is set to true, and the sticky flag is set to false.

In order to work around the state of the global flag, one can run the `exec` method against a substring of the original string. That is, whenever it is said:

    Let z be the result of calling the matcher with arguments S and q.

one can say, approximatively:

    Let T = S.substring(q).
    Let rx.lastIndex = 0.
    Let result = rx.exec(T).

Moreover, if the sticky flag is on, one can add additional logic in order to try to match at positions q+1, q+2, etc. in case of failure.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>9863</commentid>
    <comment_count>2</comment_count>
    <who name="Claude Pache">claude.pache</who>
    <bug_when>2014-08-25 06:17:44 -0700</bug_when>
    <thetext>(In reply to Claude Pache from comment #1)
I&apos;ve just realised that RegExpBuiltinExec (Section 21.2.5.2.2) uses Get(..) in order to obtain the value of the global and sticky flags, instead of taking the original values stored in [[OriginalFlags]]. Instead of the workaround of Comment #1, one could try to play with the values of these properties. However there is currently no natural manner to do it.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>10641</commentid>
    <comment_count>3</comment_count>
    <who name="Allen Wirfs-Brock">allen</who>
    <bug_when>2014-11-16 10:39:59 -0800</bug_when>
    <thetext>fixed in rev29 editor&apos;s draft.

The algorithm now uses &apos;exec&apos; instead of directly calling the matcher procedure. However, to preserve the legacy observable side-effects (of lack of) on the this RegExp a &apos;exec&apos; is applied to a clone of this value.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>10899</commentid>
    <comment_count>4</comment_count>
    <who name="Allen Wirfs-Brock">allen</who>
    <bug_when>2014-12-07 14:35:06 -0800</bug_when>
    <thetext>fixed in rev29</thetext>
  </long_desc>
      
      

    </bug>

</bugzilla>