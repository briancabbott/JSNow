<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.ecmascript.org/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.4+"
          urlbase="https://bugs.ecmascript.org/"
          
          maintainer="dherman@mozilla.com"
>

    <bug>
          <bug_id>3626</bug_id>
          
          <creation_ts>2015-01-23 14:27:00 -0800</creation_ts>
          <short_desc>14.4.12 EvaluateBody: Allow &quot;new function*&quot; to reference `this`</short_desc>
          <delta_ts>2015-02-14 08:08:34 -0800</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>Draft for 6th Edition</product>
          <component>technical issue</component>
          <version>Rev 31: January 15, 2015 Draft</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>INVALID</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>Normal</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>---</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="André Bargull">andrebargull</reporter>
          <assigned_to name="Allen Wirfs-Brock">allen</assigned_to>
          
          

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>11637</commentid>
    <comment_count>0</comment_count>
    <who name="André Bargull">andrebargull</who>
    <bug_when>2015-01-23 14:27:29 -0800</bug_when>
    <thetext>14.4.12 Runtime Semantics: EvaluateBody

Add BindThisValue when a generator function is new&apos;ed, so the following example works again.

---
function* g() { print(this) }
var it = new g();
it.next();
---</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>12611</commentid>
    <comment_count>1</comment_count>
    <who name="Allen Wirfs-Brock">allen</who>
    <bug_when>2015-02-13 16:58:46 -0800</bug_when>
    <thetext>The note in 14.4.12 says:
NOTE	If the generator was invoked using [[Call]], the this binding will have already been initialized in the normal manner. If the generator was invoked using [[Construct]], the this bind is not initialized and any references to this within the FunctionBody will produce a ReferenceError exception.


There are two reasons for this behavior:

1) generator methods need &apos;this&apos; to refer to the object the method was invoked upon, not the resulting generator instance.  for example:

   class Foo {
       *ownName() {
           yield* Object.getOwnPropertyNames(this);
        }
    }

It would be confusing if  generator methods bound &apos;this&apos; one way and generator function declarations did something difference. 

2) Within the body of a generator function (or anything called from the generator body you can&apos;t do anything interesting with the generator object the body is operating upon. In particular, invoking &apos;next&apos;, &apos;return&apos;, or &apos;throw&apos; on the active generator from within the body throws (see 25.3.3.2) and those are really the only useful things you can do with a generator object. Making &apos;this&apos; be a reference to the active generator object would just be an invitation to try to do things that can&apos;t be done.

Finally, if you really want to print or otherwise get access to the active generator object, it&apos;s easy enough to accomplish:

function; g() {
  let thisGenerator = function*() { print(thisGenerator) }();
  return thisGenerator
}</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>12628</commentid>
    <comment_count>2</comment_count>
    <who name="André Bargull">andrebargull</who>
    <bug_when>2015-02-14 07:02:38 -0800</bug_when>
    <thetext>(In reply to Allen Wirfs-Brock from comment #1)
&gt; There are two reasons for this behavior:
&gt; 
&gt; 1) generator methods need &apos;this&apos; to refer to the object the method was
&gt; invoked upon, not the resulting generator instance.  for example:
&gt; 
&gt; [...]
&gt; 
&gt; It would be confusing if  generator methods bound &apos;this&apos; one way and
&gt; generator function declarations did something difference. 
&gt; 

Accessing `this` in new&apos;ed generator methods and generator function declarations currently results in a ReferenceError. So I don&apos;t understand what you mean be &quot;did something different&quot;. 


&gt; 2) Within the body of a generator function (or anything called from the
&gt; generator body you can&apos;t do anything interesting with the generator object
&gt; the body is operating upon. In particular, invoking &apos;next&apos;, &apos;return&apos;, or
&gt; &apos;throw&apos; on the active generator from within the body throws (see 25.3.3.2)
&gt; and those are really the only useful things you can do with a generator
&gt; object. Making &apos;this&apos; be a reference to the active generator object would
&gt; just be an invitation to try to do things that can&apos;t be done.
&gt; 
&gt; Finally, if you really want to print or otherwise get access to the active
&gt; generator object, it&apos;s easy enough to accomplish:
&gt; 
&gt; function; g() {
&gt;   let thisGenerator = function*() { print(thisGenerator) }();
&gt;   return thisGenerator
&gt; }

FWIW, this use case was once mentioned in [1]. If `this` stays to be non-functional in new&apos;ed generator functions, I&apos;d almost like to propose to forbid `new` on generators. But then we&apos;re back to bug 1489 which I don&apos;t want to re-open right now. 

[1] https://esdiscuss.org/topic/retrieving-generator-references</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>12649</commentid>
    <comment_count>3</comment_count>
    <who name="Allen Wirfs-Brock">allen</who>
    <bug_when>2015-02-14 08:08:34 -0800</bug_when>
    <thetext>(In reply to André Bargull from comment #2)
&gt; (In reply to Allen Wirfs-Brock from comment #1)

&gt; &gt; 
&gt; &gt; It would be confusing if  generator methods bound &apos;this&apos; one way and
&gt; &gt; generator function declarations did something difference. 
&gt; &gt; 
&gt; 
&gt; Accessing `this` in new&apos;ed generator methods and generator function
&gt; declarations currently results in a ReferenceError. So I don&apos;t understand
&gt; what you mean be &quot;did something different&quot;. 

I meant have different non-error behavior.  

&gt; 
&gt; ...

&gt; FWIW, this use case was once mentioned in [1]. If `this` stays to be
&gt; non-functional in new&apos;ed generator functions, I&apos;d almost like to propose to
&gt; forbid `new` on generators. But then we&apos;re back to bug 1489 which I don&apos;t
&gt; want to re-open right now. 

I agree, on both points.

I think meta properties may be a solution to some of the issues that have been raised:

function.startValue  value passed into a generator by first nest
function.generator   the current generator object instance</thetext>
  </long_desc>
      
      

    </bug>

</bugzilla>