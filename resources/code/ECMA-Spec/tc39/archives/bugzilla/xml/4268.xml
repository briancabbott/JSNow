<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.ecmascript.org/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.4+"
          urlbase="https://bugs.ecmascript.org/"
          
          maintainer="dherman@mozilla.com"
>

    <bug>
          <bug_id>4268</bug_id>
          
          <creation_ts>2015-04-08 07:51:00 -0700</creation_ts>
          <short_desc>Presence of iterator.close checked too late</short_desc>
          <delta_ts>2015-05-19 18:25:02 -0700</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>Draft for 7th Edition</product>
          <component>Deferred from 6th edition</component>
          <version>unspecified</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>CONFIRMED</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>Normal</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>---</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Andreas Rossberg">rossberg</reporter>
          <assigned_to name="Allen Wirfs-Brock">allen</assigned_to>
          <cc>claude.pache</cc>
          

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>14158</commentid>
    <comment_count>0</comment_count>
    <who name="Andreas Rossberg">rossberg</who>
    <bug_when>2015-04-08 07:51:16 -0700</bug_when>
    <thetext>IIRC, we decided that the presence of a .close method on an iterator should be checked upon _entry_ into a loop. The current spec checks it upon abnormal _exit_ from the loop, by invoking IteratorClose (e.g. for-of loops in 13.6.4.13, but also elsewhere).

Because it is usually impossible to tell upfront that a .close method cannot be added during iteration, this requires that virtually _every_ iterator loop has to be executed inside an implicit try-finally, which is a significant overhead, even for the vast majority of cases that don&apos;t care about .close. In the interest of competitive performance, especially for for-of loops, we should change that semantics the way we discussed.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>14160</commentid>
    <comment_count>1</comment_count>
    <who name="Allen Wirfs-Brock">allen</who>
    <bug_when>2015-04-08 08:10:47 -0700</bug_when>
    <thetext>(In reply to Andreas Rossberg from comment #0)
&gt; IIRC, we decided that the presence of a .close method on an iterator should
&gt; be checked upon _entry_ into a loop.

We did? Where is that documented? Are you sure there weren&apos;t subsequent discussions?

The current spec checks it upon
&gt; abnormal _exit_ from the loop, by invoking IteratorClose (e.g. for-of loops
&gt; in 13.6.4.13, but also elsewhere).
&gt; 
&gt; Because it is usually impossible to tell upfront that a .close method cannot
&gt; be added during iteration, this requires that virtually _every_ iterator
&gt; loop has to be executed inside an implicit try-finally, which is a
&gt; significant overhead, even for the vast majority of cases that don&apos;t care
&gt; about .close. In the interest of competitive performance, especially for
&gt; for-of loops, we should change that semantics the way we discussed.

It&apos;s also impossible to tell whether a .close method isn&apos;t deleted during iteration. 

Perhaps it&apos;s time to implement low cost if not triggers try blocks?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>14161</commentid>
    <comment_count>2</comment_count>
    <who name="Andreas Rossberg">rossberg</who>
    <bug_when>2015-04-08 14:35:02 -0700</bug_when>
    <thetext>(In reply to Allen Wirfs-Brock from comment #1)
&gt; (In reply to Andreas Rossberg from comment #0)
&gt; &gt; IIRC, we decided that the presence of a .close method on an iterator should
&gt; &gt; be checked upon _entry_ into a loop.
&gt; 
&gt; We did? Where is that documented? Are you sure there weren&apos;t subsequent
&gt; discussions?

I&apos;m not aware of any subsequent discussions, but I might well have missed some. I do remember that checking for it early was the anodyne put on the table that convinced me to not block the feature. I regret not having ensured that this is recorded explicitly.

&gt; The current spec checks it upon
&gt; &gt; abnormal _exit_ from the loop, by invoking IteratorClose (e.g. for-of loops
&gt; &gt; in 13.6.4.13, but also elsewhere).
&gt; &gt; 
&gt; &gt; Because it is usually impossible to tell upfront that a .close method cannot
&gt; &gt; be added during iteration, this requires that virtually _every_ iterator
&gt; &gt; loop has to be executed inside an implicit try-finally, which is a
&gt; &gt; significant overhead, even for the vast majority of cases that don&apos;t care
&gt; &gt; about .close. In the interest of competitive performance, especially for
&gt; &gt; for-of loops, we should change that semantics the way we discussed.
&gt; 
&gt; It&apos;s also impossible to tell whether a .close method isn&apos;t deleted during
&gt; iteration. 

Sure, but that doesn&apos;t matter -- in the few cases where .close is present initially it&apos;s fine to go on a slower path. What counts is that the extra cost of dealing with .close is not imposed on all the other uses.

&gt; Perhaps it&apos;s time to implement low cost if not triggers try blocks?

We have recently done so in Turbofan. But try-finally is still not free, and I doubt it can ever be in JS. OTOH, a late added .close is an edge case of absolutely zero practical value, wouldn&apos;t you agree?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>14427</commentid>
    <comment_count>3</comment_count>
    <who name="Allen Wirfs-Brock">allen</who>
    <bug_when>2015-05-19 18:25:02 -0700</bug_when>
    <thetext>deferred for ES7 discussion</thetext>
  </long_desc>
      
      

    </bug>

</bugzilla>