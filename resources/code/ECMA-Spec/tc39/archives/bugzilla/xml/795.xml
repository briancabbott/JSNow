<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.ecmascript.org/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.4+"
          urlbase="https://bugs.ecmascript.org/"
          
          maintainer="dherman@mozilla.com"
>

    <bug>
          <bug_id>795</bug_id>
          
          <creation_ts>2012-10-15 13:06:00 -0700</creation_ts>
          <short_desc>11.2.6: semantics of X are like Y but different</short_desc>
          <delta_ts>2012-10-26 15:34:25 -0700</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>Draft for 6th Edition</product>
          <component>editorial issue</component>
          <version>Rev 10: September 27, 2012 Draft</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>Normal</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>---</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Michael Dyck">jmdyck</reporter>
          <assigned_to name="Allen Wirfs-Brock">allen</assigned_to>
          
          

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>1934</commentid>
    <comment_count>0</comment_count>
    <who name="Michael Dyck">jmdyck</who>
    <bug_when>2012-10-15 13:06:56 -0700</bug_when>
    <thetext>In 11.2.6 &quot;Tagged Templates&quot;,
under &quot;Runtime Semantics&quot;,
it says:
    The runtime semantics of production:
        CallExpression : CallExpression TemplateLiteral
    is identical to that of
        MemberExpression: MemberExpression TemplateLiteral
    but with evaluation of CallExpression substituted for the evaluation of
    MemberExpression.

Given that the semantics in question is one simple 3-step algorithm,
it might be better to just state it in full (under &quot;Runtime Semantics:
Evaluation&quot;).

Note that the latter approach is used in two other places where the semantics differ by a single &apos;CallExpression&apos; vs &apos;MemberExpression&apos;:
    11.2 Left-Hand-Side Expressions / Static Semantics: Contains
    11.2.3 Function Calls / Runtime Semantics: Evaluation

(On the other hand, the former approach is still used by:
    11.2.1 Property Accessors / Runtime Semantics: Evaluation
but there the semantics are a 10-step algorithm.)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2045</commentid>
    <comment_count>1</comment_count>
    <who name="Allen Wirfs-Brock">allen</who>
    <bug_when>2012-10-25 15:06:35 -0700</bug_when>
    <thetext>corrected in rev 11 editor&apos;s draft</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2161</commentid>
    <comment_count>2</comment_count>
    <who name="Allen Wirfs-Brock">allen</who>
    <bug_when>2012-10-26 15:34:25 -0700</bug_when>
    <thetext>in October 26, 2012 release draft</thetext>
  </long_desc>
      
      

    </bug>

</bugzilla>