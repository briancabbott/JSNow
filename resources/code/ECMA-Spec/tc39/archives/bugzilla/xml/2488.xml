<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.ecmascript.org/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.4+"
          urlbase="https://bugs.ecmascript.org/"
          
          maintainer="dherman@mozilla.com"
>

    <bug>
          <bug_id>2488</bug_id>
          
          <creation_ts>2014-01-30 10:14:00 -0800</creation_ts>
          <short_desc>6.1.7.3, 9.4.3: String exotic objects can violate [[GetOwnProperty]] invariant</short_desc>
          <delta_ts>2014-07-18 14:34:08 -0700</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>Draft for 6th Edition</product>
          <component>technical issue</component>
          <version>Rev 22: January 20, 2014 Draft</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>FIXED</resolution>
          
          <see_also>http://code.google.com/p/google-caja/issues/detail?id=1883</see_also>
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>Normal</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>---</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="André Bargull">andrebargull</reporter>
          <assigned_to name="Allen Wirfs-Brock">allen</assigned_to>
          <cc>erights</cc>
    
    <cc>tomvc.be</cc>
          

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>7165</commentid>
    <comment_count>0</comment_count>
    <who name="André Bargull">andrebargull</who>
    <bug_when>2014-01-30 10:14:16 -0800</bug_when>
    <thetext>6.1.7.3 Invariants of the Essential Internal Methods, [[GetOwnProperty]] (P):

&gt; If the target is non-extensible and P is non-existent,
&gt; then all future calls to [[GetOwnProperty]] (P) must
&gt; describe P as non-existent (i.e. [[GetOwnProperty]] (P)
&gt; must return undefined)

This invariant can be violated by String exotic objects when an uninitialised string object is made non-extensible and then later initialised.


Test case:
---
// Create uninitialised string object and define its &quot;length&quot; property
let str = String[Symbol.create]();
Reflect.defineProperty(str, &quot;length&quot;, {value: 1, writable: false, enumerable: false, configurable: false});

// Make string object non-extensible, observe &quot;0&quot; property
Reflect.preventExtensions(str);
let observedDesc = Reflect.getOwnPropertyDescriptor(str, &quot;0&quot;);
print(`IsExtensible(str) = ${Reflect.isExtensible(str)}`);
print(`(1) str.[[GetOwnProperty]](&quot;0&quot;) = ${JSON.stringify(observedDesc)}`);

// Initialise string object and retrieve &quot;0&quot; property
String.call(str, &quot;A&quot;);
let currentDesc = Reflect.getOwnPropertyDescriptor(str, &quot;0&quot;);
print(`(2) str.[[GetOwnProperty]](&quot;0&quot;) = ${JSON.stringify(currentDesc)}`);
---

Output:
---
IsExtensible(str) = false
(1) str.[[GetOwnProperty]](&quot;0&quot;) = undefined
(2) str.[[GetOwnProperty]](&quot;0&quot;) = {&quot;value&quot;:&quot;A&quot;,&quot;writable&quot;:false,&quot;enumerable&quot;:true,&quot;configurable&quot;:false}
---

Expected:
Second [[GetOwnProperty]] also needs to report `undefined` to fulfil the [[GetOwnProperty]] invariant.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7167</commentid>
    <comment_count>1</comment_count>
    <who name="Allen Wirfs-Brock">allen</who>
    <bug_when>2014-01-30 10:38:08 -0800</bug_when>
    <thetext>Cool, I think this means the I need to tweak the exotic array internal methods to ensure that the invariant is maintained.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7501</commentid>
    <comment_count>2</comment_count>
    <who name="Allen Wirfs-Brock">allen</who>
    <bug_when>2014-04-06 10:21:55 -0700</bug_when>
    <thetext>or, just tweak the String constructor to throw if an uninitialized string is non-extensible.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>9228</commentid>
    <comment_count>3</comment_count>
    <who name="Allen Wirfs-Brock">allen</who>
    <bug_when>2014-07-16 16:34:36 -0700</bug_when>
    <thetext>fixed in rev26 editor&apos;s draft</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>9278</commentid>
    <comment_count>4</comment_count>
    <who name="Allen Wirfs-Brock">allen</who>
    <bug_when>2014-07-18 14:34:08 -0700</bug_when>
    <thetext>in rev26</thetext>
  </long_desc>
      
      

    </bug>

</bugzilla>