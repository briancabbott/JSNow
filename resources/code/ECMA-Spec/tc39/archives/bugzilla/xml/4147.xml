<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.ecmascript.org/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.4+"
          urlbase="https://bugs.ecmascript.org/"
          
          maintainer="dherman@mozilla.com"
>

    <bug>
          <bug_id>4147</bug_id>
          
          <creation_ts>2015-03-08 23:01:00 -0700</creation_ts>
          <short_desc>22.1.3.1 Array.concat: isConcatSpreadable should use iterator if possible</short_desc>
          <delta_ts>2015-03-19 17:10:36 -0700</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>Draft for 6th Edition</product>
          <component>technical issue</component>
          <version>Rev 35: March 4, 2015 Release Candidate 2</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>WONTFIX</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>Normal</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>---</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Leon Arnott">leonarnott</reporter>
          <assigned_to name="Allen Wirfs-Brock">allen</assigned_to>
          
          

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>13653</commentid>
    <comment_count>0</comment_count>
    <who name="Leon Arnott">leonarnott</who>
    <bug_when>2015-03-08 23:01:07 -0700</bug_when>
    <thetext>@@isConcatSpreadable&apos;s name implies that it is semantically similar to the spread operator, which uses the spread source&apos;s iterator. However, Array.prototype.concat, when invoking the @@isConcatSpreadable algorithm, always does a manual numeric property read from the source.

I propose that the behaviour of Array.prototype.concat with respect to @@isConcatSpreadable should be aligned with Array.from - if no iterator is present on the source, then the current algorithm is used, but if the iterator is available, then it is used instead.

As far as I know, @@isConcatSpreadable only exists for back-compat purposes, and there&apos;s no compatibility issues with Array, as Array.prototype[@@iterator] behaves the same as the current algorithm.

...

Alternatively, some may argue that setting @@isConcatSpreadable on a bare array-like object with no iterator might as well be unsupported, since relying on @@isConcatSpreadable instead of spreads is dubious, and the difficulties that arise can be alleviated by setting the object&apos;s iterator to Array.prototype[@@iterator]. If this sounds more appealing, then the .concat behaviour should instead be aligned with the spread operator - in which case no array-like manual property read shall occur at all, instead resulting in a TypeError.

[Original discussion](https://twitter.com/webbedspace/status/574721788946464768).</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>13684</commentid>
    <comment_count>1</comment_count>
    <who name="Allen Wirfs-Brock">allen</who>
    <bug_when>2015-03-10 13:38:46 -0700</bug_when>
    <thetext>ES6 didn&apos;t update any of the existing array methods to use iterators instead of (or as an alternative to) direct indexed accesses.  concat is just one of those existing methods and I don&apos;t think it would make sense at this point to consider treating it differently from the other legacy Array methods.

Array.from is a completely new method in ES6 so it followed new rules.

You might consider proposing for ES7 that all the Array methods should be be adapted to work with Iterables.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>13918</commentid>
    <comment_count>2</comment_count>
    <who name="Leon Arnott">leonarnott</who>
    <bug_when>2015-03-19 17:10:36 -0700</bug_when>
    <thetext>(In reply to Allen Wirfs-Brock from comment #1)
&gt; ES6 didn&apos;t update any of the existing array methods to use iterators instead
&gt; of (or as an alternative to) direct indexed accesses.  concat is just one of
&gt; those existing methods and I don&apos;t think it would make sense at this point
&gt; to consider treating it differently from the other legacy Array methods.
&gt; 
&gt; Array.from is a completely new method in ES6 so it followed new rules.
&gt; 
&gt; You might consider proposing for ES7 that all the Array methods should be be
&gt; adapted to work with Iterables.

My main motivation for proposing this was to make it possible to attach Symbol.isConcatSpreadable to subclasses of sets, generator functions&apos; prototypes, etc. and have it work &quot;as expected&quot;. Not saying that&apos;s at all useful when compared to just using the &quot;real&quot; spread operator, merely that it&apos;s more intuitive in contrast to the present behaviour. Deferring(?) this to ES7 may result in a compatibility issue (but, the likelihood of people actually using Symbol.isConcatSpreadable for non-legacy purposes seems low, so I guess, in the field of back-compat bets, this would be surer than most).</thetext>
  </long_desc>
      
      

    </bug>

</bugzilla>