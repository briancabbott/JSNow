<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.ecmascript.org/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.4+"
          urlbase="https://bugs.ecmascript.org/"
          
          maintainer="dherman@mozilla.com"
>

    <bug>
          <bug_id>4159</bug_id>
          
          <creation_ts>2015-03-12 15:57:00 -0700</creation_ts>
          <short_desc>21.2.5.* RegExp algorithm: in several places, in case of unicode-matching, index should be conditionally incremented by more than 1</short_desc>
          <delta_ts>2015-03-17 16:57:06 -0700</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>Draft for 6th Edition</product>
          <component>technical issue</component>
          <version>Rev 35: March 4, 2015 Release Candidate 2</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>Normal</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>---</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Claude Pache">claude.pache</reporter>
          <assigned_to name="Allen Wirfs-Brock">allen</assigned_to>
          
          

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>13717</commentid>
    <comment_count>0</comment_count>
    <who name="Claude Pache">claude.pache</who>
    <bug_when>2015-03-12 15:57:10 -0700</bug_when>
    <thetext>Let&apos;s take for example 21.5.2.2 RegExpBuiltinExec, step 15.c.ii:

    ii. Let lastIndex = lastIndex + 1.

If fullUnicode (step 13) is true, one should test whether the current code unit is a high surrogate and the following one a low surrogate, in which case one should advance by 2 instead of 1.

This is correctly implemented in 21.2.5.11 RegExp.prototype[@@split], steps 24.e.i-ii and 24.f.iii.1-2, but not in others algorithms of section 21.2.5.

Here is a proposed patch:



NextStringIndex(string, index, unicode)
------------------------------------
This abstract operation returns index + 1, or index + 2 if unicode is true and there is a matching pair of surrogates in `string` at position `index`.

1.  Assert `string` is a String.
2.  Assert `index` is an integer between 0 and 2^53-1.
3.  Assert `unicode` is a Boolean.
4.  Let `length` be the number of code units in `string`.
5.  If `boolean` is false, return `index` + 1.
6.  If `index` + 1 &gt;= `length`, return `index` + 1.
7.  Let `first` be the code unit value at index `index` in `string`.
8.  If `first` &lt; 0xD800 or `first` &gt; 0xDBFF, return `index` + 1.
9.  Let `second` be the code unit value at index `index` + 1 in `string`.
10. If `second` &lt; 0xDC00 or `second` &gt; 0xDFFF, return `index` + 1.
11. Return `index` + 2.




21.2.5.2.2 RegExpBuiltinExec
----------------------------
Replace step 15.c.ii with:

   ii.  Let lastIndex be NextStringIndex(S, lastIndex, fullUnicode).



21.2.5.6 RegExp.prototype[@@match]
----------------------------------
Current step 8 becomes:

    8.  Else, global is true,
        a.  Let unicodeMatching be ToBoolean(Get(rx, &quot;unicode&quot;)).
        b.  ReturnIfAbrupt(unicodeMatching).
        c.  (proceed with current step a)

Current steps 8.e.iv.5.c-d become:

    c.  Let nextIndex be NextStringIndex(S, thisIndex, unicodeMatching).
    d.  Let setStatus be Set(rx, &quot;lastIndex&quot;, nextIndex, true).
    e.  ReturnIfAbrupt(setStatus).


21.2.5.6 RegExp.prototype[@@replace]
----------------------------------
Current step 10 becomes:

    10.  If global is true,
        a.  Let unicodeMatching be ToBoolean(Get(rx, &quot;unicode&quot;)).
        b.  ReturnIfAbrupt(unicodeMatching).
        c.  (proceed with current step a)

Current steps 13.d.iii.3.c-d become:

    c.  Let nextIndex be NextStringIndex(S, thisIndex, unicodeMatching).
    d.  Let setStatus be Set(rx, &quot;lastIndex&quot;, nextIndex, true).
    e.  ReturnIfAbrupt(setStatus).

    

21.2.5.11 RegExp.prototype [@@split]
------------------------------------
Using the NextStringIndex abstract operations, step 24.e can be rewritten:

    e.  If z is null, let q be NextStringIndex(S, q, unicodeMatching).

and step 24.f.iii:

    iii. If e = p, let q be NextStringIndex(S, q, unicodeMatching).</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>13719</commentid>
    <comment_count>1</comment_count>
    <who name="Allen Wirfs-Brock">allen</who>
    <bug_when>2015-03-13 09:07:24 -0700</bug_when>
    <thetext>fixed in rev36 editor&apos;s draft</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>13824</commentid>
    <comment_count>2</comment_count>
    <who name="Allen Wirfs-Brock">allen</who>
    <bug_when>2015-03-17 16:57:06 -0700</bug_when>
    <thetext>in rev36</thetext>
  </long_desc>
      
      

    </bug>

</bugzilla>