<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.ecmascript.org/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.4+"
          urlbase="https://bugs.ecmascript.org/"
          
          maintainer="dherman@mozilla.com"
>

    <bug>
          <bug_id>2491</bug_id>
          
          <creation_ts>2014-02-02 12:47:00 -0800</creation_ts>
          <short_desc>Changes to default constructor breaks &quot;existing&quot; code</short_desc>
          <delta_ts>2015-07-10 08:35:05 -0700</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>Draft for 6th Edition</product>
          <component>technical issue</component>
          <version>Rev 21: November 8, 2013 Draft</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>Normal</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>---</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Erik Arvidsson">arv</reporter>
          <assigned_to name="Allen Wirfs-Brock">allen</assigned_to>
          <cc>claude.pache</cc>
    
    <cc>erik.arvidsson</cc>
          

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>7169</commentid>
    <comment_count>0</comment_count>
    <who name="Erik Arvidsson">arv</who>
    <bug_when>2014-02-02 12:47:38 -0800</bug_when>
    <thetext>The change to add a return to the default constructor broke some tests we have.

Before

construct(..args) {
  super(...args);
}

Now

construct(..args) {
  return super(...args);
}

The problem arises when we extend an old school &quot;class&quot; where the code does not explicitly set constructor.

function B() {}
B.prototype = { ... }
class C extends B {}
new C() instanceof C  // false

The reason why this fails is that `B.prototype.constructor === Object` so `new C()` returns `Object()`.

The work around is to set `B.prototype.constructor = B` but I feel like the problem, adding return added solved, is smaller than the problem it introduces.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7281</commentid>
    <comment_count>1</comment_count>
    <who name="Allen Wirfs-Brock">allen</who>
    <bug_when>2014-02-12 16:58:15 -0800</bug_when>
    <thetext>fixed in rev23 editor&apos;s draft

reverted back to the &quot;before&quot; definition</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7579</commentid>
    <comment_count>2</comment_count>
    <who name="Allen Wirfs-Brock">allen</who>
    <bug_when>2014-04-06 11:30:56 -0700</bug_when>
    <thetext>fixed in rev23 draft</thetext>
  </long_desc>
      
      

    </bug>

</bugzilla>