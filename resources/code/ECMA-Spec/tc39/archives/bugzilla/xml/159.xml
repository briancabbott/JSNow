<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.ecmascript.org/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.4+"
          urlbase="https://bugs.ecmascript.org/"
          
          maintainer="dherman@mozilla.com"
>

    <bug>
          <bug_id>159</bug_id>
          
          <creation_ts>2011-07-20 17:16:00 -0700</creation_ts>
          <short_desc>assertion in 10.2.1.1.3 step 2 is incorrect</short_desc>
          <delta_ts>2014-12-23 20:23:27 -0800</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>Draft for 6th Edition</product>
          <component>technical issue</component>
          <version>Initial draft July 12, 2011</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>---</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>---</target_milestone>
          <dependson>79</dependson>
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Allen Wirfs-Brock">allen</reporter>
          <assigned_to name="Allen Wirfs-Brock">allen</assigned_to>
          
          

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>357</commentid>
    <comment_count>0</comment_count>
    <who name="Allen Wirfs-Brock">allen</who>
    <bug_when>2011-07-20 17:16:07 -0700</bug_when>
    <thetext>+++ This bug was initially created as a clone of Bug #79 +++

from: https://mail.mozilla.org/pipermail/es5-discuss/2010-November/003839.html 

In answering some questions about how SpiderMonkey implements assignment in the face of crazy concerns like those raised in the &quot;Assigning to globals in strict mode&quot; thread, I wrote this example to demonstrate the precise semantics specified and implemented:

   var x = &quot;global&quot;;
   function fun(s) { eval(s); return function(s) { return eval(s); }; }
   var closure = fun(&quot;var x = &apos;local&apos;; x = (delete x, &apos;overwrite&apos;);&quot;);
   assert(x === &quot;global&quot;);
   assert(closure(&quot;x&quot;) === &quot;overwrite&quot;);

When I went to verify our behavior/implementation conforms to ES5, I discovered that ES5 asserts this situation to be impossible!

eval calls CreateMutableBinding for x.  The binding is configurable because it is introduced by eval code.  The assignment to x starts by evaluating x to a Reference rx whose base is the lexical environment for the call to fun and whose name is &quot;x&quot;.  Next we evaluate the right-hand side, along the way calling DeleteBinding for x and successfully removing that binding because it was configurable.  The assignment algorithm completes by calling PutValue(rx, &quot;overwrite&quot;).  Step 5 of PutValue calls SetMutableBinding on the lexical environment.  Step 2 of SetMutableBinding asserts that a binding for x already exists -- but it doesn&apos;t because we deleted it!

ES5 can&apos;t assert the binding exists.  SpiderMonkey, when it assigns to a deleted binding, appears to reintroduce a configurable, mutable binding:

   [jwalden at find-waldo-now src]$ dbg/js
   js&gt; var x = &quot;global&quot;;
   js&gt; function foo(s) { eval(s); return function(s) { return eval(s); }; }
   js&gt; var closure = foo(&quot;var x = &apos;local&apos;; &quot; +
                         &quot;x = (delete x, &apos;overwrite&apos;); &quot; +
                         &quot;print(x); &quot; +
                         &quot;delete x; &quot; +
                         &quot;print(x); &quot; +
                         &quot;eval(&apos;var x = \&quot;local2\&quot;;&apos;); &quot; +
                         &quot;print(x);&quot;)
   overwrite
   global
   local2

Thus I *think* the right change (awful as it is) is to replace step 2 with:

2. If envRec does not have a binding for N, call CreateMutableBinding(N, true).

and perhaps add a note to the end of the algorithm explaining how this can occur.  But I could well be missing something here -- please poke holes in my suggestion.  :-)

Jeff</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>10989</commentid>
    <comment_count>1</comment_count>
    <who name="Allen Wirfs-Brock">allen</who>
    <bug_when>2014-12-10 16:53:18 -0800</bug_when>
    <thetext>fixed in rev30 editor&apos;s draft.

See 8.1.1.1.5

Created a replacement binding as suggested.  It would probably be a better fix to re-resolve the identifier using the scope chain.  However, in the specification, the current scope chain isn&apos;t available within SetMutableBinding.  It would take more rework than is probably justified to make the scope chain available.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>11165</commentid>
    <comment_count>2</comment_count>
    <who name="Allen Wirfs-Brock">allen</who>
    <bug_when>2014-12-23 20:23:27 -0800</bug_when>
    <thetext>fixed in rev30</thetext>
  </long_desc>
      
      

    </bug>

</bugzilla>