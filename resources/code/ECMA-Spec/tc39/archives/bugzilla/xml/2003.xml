<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.ecmascript.org/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.4+"
          urlbase="https://bugs.ecmascript.org/"
          
          maintainer="dherman@mozilla.com"
>

    <bug>
          <bug_id>2003</bug_id>
          
          <creation_ts>2013-09-30 06:00:00 -0700</creation_ts>
          <short_desc>23.1.5.2.2 Flatten map and set &quot;next&quot; iterator method specifications</short_desc>
          <delta_ts>2013-10-29 09:46:00 -0700</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>Draft for 6th Edition</product>
          <component>technical issue</component>
          <version>Rev 19: September 27, 2013 Draft</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>Normal</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>---</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Andy Wingo">wingo</reporter>
          <assigned_to name="Allen Wirfs-Brock">allen</assigned_to>
          <cc>jorendorff</cc>
          

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>5678</commentid>
    <comment_count>0</comment_count>
    <who name="Andy Wingo">wingo</who>
    <bug_when>2013-09-30 06:00:09 -0700</bug_when>
    <thetext>Currently the Set and Map iterator next methods are specified using &quot;loop&quot; language, but they are not generators: they are prototype methods.  It would be much more clear if they were written as the ArrayIterator specification is.

Currently they are missing a bit that when they are finished, to set the nextIndex to +Infinity in order to prevent the iterators from coming back to life.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>5679</commentid>
    <comment_count>1</comment_count>
    <who name="Andy Wingo">wingo</who>
    <bug_when>2013-09-30 07:32:33 -0700</bug_when>
    <thetext>So there are two issues here.  Regarding the loop, I misinterpreted the language to imply that the loop was a generator loop and not just a normal part of a method specification.  The spec is not ambiguous there, though it could be clearer.

For the second, that iterators can come back to life -- I thought the spec was an unintentional thing.  If that is not the case, two points:

 * Calling next on an iterator that is already at the last insertion position should not advance the insertion position.  This way you can:

  var o = Map();
  var i = o[@@iterator]();
  i.next() // { value: undefined, done: true }
  o.put(&apos;foo&apos;, &apos;bar&apos;);
  i.next() // { value: &apos;foo&apos;, done: false }
  i.next() // { value: undefined, done: true }

 * The behavior of the map iterator should be consistent with the array iterator.  If the map iterator can come back to life, then the same with the array iterator.

I tend to think that iterators should stay done once they are done for the first time, but YMMV.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>5680</commentid>
    <comment_count>2</comment_count>
    <who name="Jason Orendorff">jorendorff</who>
    <bug_when>2013-09-30 07:36:51 -0700</bug_when>
    <thetext>(In reply to comment #1)
&gt;  * The behavior of the map iterator should be consistent with the array
&gt; iterator.  If the map iterator can come back to life, then the same with the
&gt; array iterator.

This point is very compelling. They should be consistent.

Permanently closing the iterator seems best.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>5733</commentid>
    <comment_count>3</comment_count>
    <who name="Allen Wirfs-Brock">allen</who>
    <bug_when>2013-09-30 15:57:55 -0700</bug_when>
    <thetext>It&apos;s unintentional that they can come back to life.  I&apos;ll change that.

The loop is simply an incidental artifact of the specification&apos;s linear data structure and is needed to skip over deleted elements. Most of the Map/set algorithms have some sort of loop, like this.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>5737</commentid>
    <comment_count>4</comment_count>
    <who name="Allen Wirfs-Brock">allen</who>
    <bug_when>2013-09-30 17:48:25 -0700</bug_when>
    <thetext>fixed in rev20 editor&apos;s draft</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>6119</commentid>
    <comment_count>5</comment_count>
    <who name="Allen Wirfs-Brock">allen</who>
    <bug_when>2013-10-29 09:46:00 -0700</bug_when>
    <thetext>fixed in rev20 draft, Oct. 28, 2013</thetext>
  </long_desc>
      
      

    </bug>

</bugzilla>