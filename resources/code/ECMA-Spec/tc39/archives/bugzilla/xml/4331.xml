<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.ecmascript.org/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.4+"
          urlbase="https://bugs.ecmascript.org/"
          
          maintainer="dherman@mozilla.com"
>

    <bug>
          <bug_id>4331</bug_id>
          
          <creation_ts>2015-04-22 10:14:00 -0700</creation_ts>
          <short_desc>9.1.9 [[Set]]: super.prop assignment can silently overwrite non-writable properties</short_desc>
          <delta_ts>2015-10-02 13:14:01 -0700</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>Draft for 6th Edition</product>
          <component>technical issue</component>
          <version>Rev 38: April 14, 2015 Final Draft</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>Normal</priority>
          <bug_severity>critical</bug_severity>
          <target_milestone>---</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Allen Wirfs-Brock">allen</reporter>
          <assigned_to name="Allen Wirfs-Brock">allen</assigned_to>
          <cc>jorendorff</cc>
          

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>14317</commentid>
    <comment_count>0</comment_count>
    <who name="Allen Wirfs-Brock">allen</who>
    <bug_when>2015-04-22 10:14:16 -0700</bug_when>
    <thetext>see https://esdiscuss.org/topic/super-prop-assignment-can-silently-overwrite-non-writable-properties 

If Receiver is different from the object [[Set]] is invoked upon and the property to set already exits as an own property of Receiver, the current algorithm can over-write a non-writable property or turn an accesor property into a data property.  

It should fail (return false) in the situation where it currently does either of these.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>14318</commentid>
    <comment_count>1</comment_count>
    <who name="Allen Wirfs-Brock">allen</who>
    <bug_when>2015-04-22 10:16:51 -0700</bug_when>
    <thetext>fixed in rev29 publication draft.

Step 5.e has been updated to read:

5.e.   If existingDescriptor is not undefined, then
  i.	   If IsAccessorDescriptor(existingDescriptor) is true, return false.
  ii.	   If existingDescriptor.[[Writable]] is false, return false.
  iii.	   Let valueDesc be the PropertyDescriptor{[[Value]]: V}.
  iv.	   Return Receiver.[[DefineOwnProperty]](P, valueDesc).

the above steps 5.e.i and 5.e.11 are new</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>14360</commentid>
    <comment_count>2</comment_count>
    <who name="Allen Wirfs-Brock">allen</who>
    <bug_when>2015-04-29 14:32:49 -0700</bug_when>
    <thetext>(In reply to Allen Wirfs-Brock from comment #1)
&gt; fixed in rev29 publication draft.
&gt; 

Make that:

fixed in rev39 publication draft.</thetext>
  </long_desc>
      
      

    </bug>

</bugzilla>