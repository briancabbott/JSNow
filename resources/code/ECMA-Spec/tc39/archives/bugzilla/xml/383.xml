<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.ecmascript.org/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.4+"
          urlbase="https://bugs.ecmascript.org/"
          
          maintainer="dherman@mozilla.com"
>

    <bug>
          <bug_id>383</bug_id>
          
          <creation_ts>2012-06-11 06:42:00 -0700</creation_ts>
          <short_desc>Array.from (15.4.3.3) additional note describes Array.of</short_desc>
          <delta_ts>2012-06-14 22:44:46 -0700</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>Draft for 6th Edition</product>
          <component>technical issue</component>
          <version>Rev 7: May 4, 2012 Draft</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>INVALID</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>Normal</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>---</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Rick Waldron">waldron.rick</reporter>
          <assigned_to name="Allen Wirfs-Brock">allen</assigned_to>
          <cc>waldron.rick</cc>
          

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>974</commentid>
    <comment_count>0</comment_count>
    <who name="Rick Waldron">waldron.rick</who>
    <bug_when>2012-06-11 06:42:23 -0700</bug_when>
    <thetext>Currently, the NOTE reads 


  NOTE	The from function is an intentionally generic factory method; it does   not require that its this value be the Array constructor. Therefore it can be transferred to or herited by any other constructors that may be called with a single numeric argument.


It should be updated to:



  NOTE	The from function is an intentionally generic factory method; it does not require that its this value be the Array constructor. Therefore it can be transferred to or inherited by any other constructors that may be called with a single arrayLike argument.



The difference is in the type of argument (single numeric =&gt; arrayLike) it should accept and a minor typo fix.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>980</commentid>
    <comment_count>1</comment_count>
    <who name="Allen Wirfs-Brock">allen</who>
    <bug_when>2012-06-14 17:29:52 -0700</bug_when>
    <thetext>No, numeric is actually correct.  If this method is going to be invoked as a method of a constructor named Collection, eg: 

   let c = Collection.of(1,2,3)

then the dependency is upon being able to say:

     new Collection(3)  /* allocate a Collection with 3 elements */

That is because the semantics is roughly:

function of(...items) {
   let result = new this(items.length);
   for (i=0; i&lt;item.length; ++i) result[i]=items[i];
   return result;
}

I did fix the type...</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>983</commentid>
    <comment_count>2</comment_count>
    <who name="Rick Waldron">waldron.rick</who>
    <bug_when>2012-06-14 18:42:41 -0700</bug_when>
    <thetext>I&apos;m not disputing that for Array.of, I&apos;m pointing out that it says the same thing under Array.from</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>984</commentid>
    <comment_count>3</comment_count>
    <who name="Allen Wirfs-Brock">allen</who>
    <bug_when>2012-06-14 19:33:34 -0700</bug_when>
    <thetext>It applies to both of them.  The only real difference is that |of| works with a rest parameter while |from| works with a caller supplied array-like object.  But they are both processed in exactly the same way. 

They both do the equivalent of
   new this(len)

The NOTE is referring to the fact that the this value (the constructor that |from| or |of| is invoked on needs to support a |new| call like above.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>985</commentid>
    <comment_count>4</comment_count>
    <who name="Rick Waldron">waldron.rick</who>
    <bug_when>2012-06-14 21:35:48 -0700</bug_when>
    <thetext>I&apos;ve read through both of them, and I wrote the original document that David Herman linked to in the strawman proposal, I dont understand why there is a note referring to a call like this:

Array.from( 1 )

What would this produce?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>986</commentid>
    <comment_count>5</comment_count>
    <who name="Allen Wirfs-Brock">allen</who>
    <bug_when>2012-06-14 22:39:10 -0700</bug_when>
    <thetext>(In reply to comment #4)
&gt; I&apos;ve read through both of them, and I wrote the original document that David
&gt; Herman linked to in the strawman proposal, I dont understand why there is a
&gt; note referring to a call like this:
&gt; 
&gt; Array.from( 1 )

that&apos;s not what the note is referring to it is referring to a call like:
  new Array(0)
which the function makes internally in step 7.a
&gt; 
&gt; What would this produce?

An empty Array, essentially the same as:

      Array.from([])

Array.from takes one argument.  Step 1 coerces the argument to an object by calling ToObject.  ToObject(1) produces a Number wrapper objects.  Step 3 accesses the value of the wrapper objects &quot;length&quot; property.  It doesn&apos;t have one so, lenValue is undefined. ToInteger(undefined) returns 0, so len is 0 after step 4.  Step 7.a performs essentially new Array(len) and produces a length array.  Step 11 does nothing because len is 0. Step 12 (redundantly in this case) updates the length of the array to 0 and finally step 14 returns the 0-length array as the value of Array.from.

This is all  normal procedure for processing &quot;array-like&quot; objects in the built-ins.  Because ToInteger(undefined) always yields 0 any object is effectively a 0-length array-like object.

For example:
   [].forEach.call(1, function() {console.log(&apos;called&apos;)});

output nothing because 1 is converted into an array-like object of length 0.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>987</commentid>
    <comment_count>6</comment_count>
    <who name="Rick Waldron">waldron.rick</who>
    <bug_when>2012-06-14 22:44:46 -0700</bug_when>
    <thetext>Thanks - I understand the steps in the specification, but it&apos;s clear now that I misunderstood the &quot;NOTE: ...&quot; section, where it said &quot;may be called with a single numeric argument.&quot;

Sorry for the noise</thetext>
  </long_desc>
      
      

    </bug>

</bugzilla>