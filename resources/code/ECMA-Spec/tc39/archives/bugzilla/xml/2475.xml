<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.ecmascript.org/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.4+"
          urlbase="https://bugs.ecmascript.org/"
          
          maintainer="dherman@mozilla.com"
>

    <bug>
          <bug_id>2475</bug_id>
          
          <creation_ts>2014-01-28 07:32:00 -0800</creation_ts>
          <short_desc>19.2.3.5 Function.prototype.toMethod: Explicitly exclude built-in function objects?</short_desc>
          <delta_ts>2014-04-06 11:29:29 -0700</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>Draft for 6th Edition</product>
          <component>technical issue</component>
          <version>Rev 22: January 20, 2014 Draft</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>FIXED</resolution>
          
          <see_also>https://bugs.ecmascript.org/show_bug.cgi?id=2550</see_also>
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>Normal</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>---</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="André Bargull">andrebargull</reporter>
          <assigned_to name="Allen Wirfs-Brock">allen</assigned_to>
          
          

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>7140</commentid>
    <comment_count>0</comment_count>
    <who name="André Bargull">andrebargull</who>
    <bug_when>2014-01-28 07:32:55 -0800</bug_when>
    <thetext>19.2.3.5 Function.prototype.toMethod (superBinding, methodName = undefined), step 1:

&gt; If func is not an ECMAScript function object, then throw a TypeError exception.


But built-in function objects may be implemented as ECMAScript function objects (cf. 9.3), so it may make sense to explicitly exclude built-in function objects from Function.prototype.toMethod() to ensure consistent behaviour across implementations.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7151</commentid>
    <comment_count>1</comment_count>
    <who name="Allen Wirfs-Brock">allen</who>
    <bug_when>2014-01-28 08:30:12 -0800</bug_when>
    <thetext>The ECMAScript function requirement is there because we don&apos;t know anything about non-ECMASript functions and if or how they might represent super bindings.

toMethod should work fine with built-ins that are ES function objects. Bot note that currently no built-ins are specified to use super because super is a mechanism of the ES language and we don&apos;t know whether a compatable mechanism is available for non-ES functions.

What we probably could do is treat non-ES functions just like ES-functions that don&apos;t have a super or name binding.  Basically just structurally clone them.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7152</commentid>
    <comment_count>2</comment_count>
    <who name="André Bargull">andrebargull</who>
    <bug_when>2014-01-28 08:49:50 -0800</bug_when>
    <thetext>(In reply to comment #1)
&gt; toMethod should work fine with built-ins that are ES function objects.

I&apos;m mainly concerned about cases where toMethod() works in one ECMAScript implementation and not in a different one depending on how implementations define their built-in function objects. This just calls for trouble. 

&gt; 
&gt; What we probably could do is treat non-ES functions just like ES-functions that
&gt; don&apos;t have a super or name binding.  Basically just structurally clone them.

Hmm, I&apos;m not sure whether that works in general resp. is an acceptable solution for implementors. It should possibly be discussed at the f2f.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7306</commentid>
    <comment_count>3</comment_count>
    <who name="Allen Wirfs-Brock">allen</who>
    <bug_when>2014-02-14 12:47:39 -0800</bug_when>
    <thetext>fixed in rev23 editor&apos;s draft

updated to explicitly allow with exotic built-in function objects.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7517</commentid>
    <comment_count>4</comment_count>
    <who name="Allen Wirfs-Brock">allen</who>
    <bug_when>2014-04-06 11:29:29 -0700</bug_when>
    <thetext>fixed in rev23 draft</thetext>
  </long_desc>
      
      

    </bug>

</bugzilla>