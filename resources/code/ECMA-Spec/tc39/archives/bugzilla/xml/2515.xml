<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.ecmascript.org/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.4+"
          urlbase="https://bugs.ecmascript.org/"
          
          maintainer="dherman@mozilla.com"
>

    <bug>
          <bug_id>2515</bug_id>
          
          <creation_ts>2014-02-07 16:05:00 -0800</creation_ts>
          <short_desc>Resource leak for Promise.race([])</short_desc>
          <delta_ts>2014-11-30 10:12:34 -0800</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>Draft for 6th Edition</product>
          <component>technical issue</component>
          <version>Rev 22: January 20, 2014 Draft</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>INVALID</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>Normal</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>---</target_milestone>
          
          
          <everconfirmed>0</everconfirmed>
          <reporter name="C. Scott Ananian">ecmascript</reporter>
          <assigned_to name="Allen Wirfs-Brock">allen</assigned_to>
          <cc>d</cc>
    
    <cc>ljharb</cc>
          

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>7214</commentid>
    <comment_count>0</comment_count>
    <who name="C. Scott Ananian">ecmascript</who>
    <bug_when>2014-02-07 16:05:57 -0800</bug_when>
    <thetext>It seems rather suboptimal to have Promise.race() hang forever when given an iterable with no items (likely leaking the returns promise and any promises chained to that, since they will always be &apos;pending&apos;).

If given an iterable with no items, it would be better to reject with a TypeError (as Array.prototype.reduce does in a similar situation).  You might also resolve with &apos;undefined&apos;, I suppose.  Either way the promise is resolved and the chained promises can be resolved and then disposed.

(If Promise.race() continues to take only an immediate array, not a promise for an array (see issue 2514), then the TypeError could be thrown synchronously.  I think it would be more consistent to allow Promise.race() to accept a promise and to always throw the TypeError asynchronously.)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7218</commentid>
    <comment_count>1</comment_count>
    <who name="Domenic Denicola">d</who>
    <bug_when>2014-02-08 12:10:30 -0800</bug_when>
    <thetext>This is intentional and has been discussed before.

https://github.com/domenic/promises-unwrapping/issues/75</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7220</commentid>
    <comment_count>2</comment_count>
    <who name="C. Scott Ananian">ecmascript</who>
    <bug_when>2014-02-08 13:12:42 -0800</bug_when>
    <thetext>I&apos;ve added my two cents over in https://github.com/domenic/promises-unwrapping/issues/75 but to briefly recap here:

I strongly disagree with writing a resource leak into the spec.  I think Promise.race() should throw TypeError.  But if you want to make it hang forever for reasons of &quot;algebraic consistency&quot; then I think the spec needs to be updated to allow promises chained after a Promise.race([]) to be disposed.

I think the simplest way of doing that is to add a new &apos;forever-pending&apos; value for [[PromiseStatus]].  We can then observe this status and avoid creating references to uncallable handlers in the implementation of Promise.prototype.then.  A rough draft of how this might be done:

25.4.4.4 Promise.race:
add between steps 5 and 6, &quot;let seen be false&quot;
step 6c of Promise.race, &quot;if next is false, then: (1) if seen is false, return NewForeverPendingPromise(C). (2) return promiseCapability.[[Promise]].&quot;
add step 6j, &quot;set seen to true&quot;

25.4.5.3 Promise.prototype.then ( onFulfilled , onRejected )
add between steps 19 and 20, &quot;Else if the value of promise&apos;s [[PromiseStatus]] internal slot is &quot;forever-pending&quot;, return NewForeverPendingPromise(C)&quot;

25.4.6 Properties of Promise Instances
add &quot;forever-pending&quot; to list of acceptable values of [[PromiseStatus]]
add &quot;or not &apos;forever-pending&apos;&quot; to the end of the description of [[PromiseResult]]

Add new helper, &quot;NewForeverPendingPromise(C)&quot; with the following definition:
1. Let promiseCapability be NewPromiseCapability(C).
2. ReturnIfAbrupt(promiseCapability).
3. Let promise be promiceCapability.[[Promise]]
3. If promise does not have a [[PromiseStatus]] internal slot, or its value is not undefined, then throw a TypeError exception.
4. Set promise&apos;s [[PromiseStatus]] internal slot to &quot;forever-pending&quot;.
5. Return promise.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7221</commentid>
    <comment_count>3</comment_count>
    <who name="C. Scott Ananian">ecmascript</who>
    <bug_when>2014-02-08 13:14:53 -0800</bug_when>
    <thetext>Reopening and retitling bug to describe how to avoid the resource leak if the infinite hang is actually desired.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7223</commentid>
    <comment_count>4</comment_count>
    <who name="C. Scott Ananian">ecmascript</who>
    <bug_when>2014-02-08 14:02:22 -0800</bug_when>
    <thetext>The algorithm in comment 2 is not quite right.  For example:

class TimeoutPromise extends Promise {
    constructor(resolver) {
      super((resolve, reject) =&gt; {
        setTimeout(() =&gt; reject(new TimeoutError()), TIMEOUT);
        return resolver(resolve, reject);
      });
    }
}
TimeoutPromise.race([]); // this should actually reject

The easiest solution is to only return a new NewForeverPendingPromise if C is %Promise%.

But a better solution is to probably use weak references carefully such that the only strong references to a promise P are held by its resolve and reject functions.  For example, all references in a PromiseCapability (held by PromiseReaction, etc) would be weak.  If done carefully, a &quot;forever pending&quot; promise would magically become gc&apos;able when it is no longer possible to resolve or reject it, as in Promise.race([]), and disposing that promise would then eliminate the references to the resolution functions of other promises chained with `then`.  That is, the goal would be that after:

var p = Promise.race([]).then(function(){...}).then(function(){...});

only 1 promise (and none of the anonymous onFulfill functions) should be live.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7224</commentid>
    <comment_count>5</comment_count>
    <who name="C. Scott Ananian">ecmascript</who>
    <bug_when>2014-02-08 14:44:13 -0800</bug_when>
    <thetext>Hm.  I think I&apos;m about to eat my words.

I drew a little diagram of where all the strong references are, and I think

var p = Promise.race([]).then(function(){...}).then(function(){...});

already works as I wanted, according to the spec.  The two cases are:

var p = new Promise(function(f, r) { ... }); // case 1

In case 1, f and r hold the only references to p, exactly how we&apos;d like.

var p2 = p1.then(f, r); // case 2

In case 2 we create a number of objects:
1) pc, a PromiseCapability for p2
2) pr1, a rejection PromiseReaction, which holds pc and r
3) prh, a Promise Resolution Handler, which holds p1, f, and r
4) pr2, a resolution PromiseReaction, which holds pc and prh

And then p1 is made to hold pr1 and pr2.

So if p1 becomes unreachable (and its resolution functions are unreachable, as in the case of the result of Promise.race([])), then pr1 and pr2 are also unreachable, which makes pc, prh, f, and r unreachable.  Assuming that no one has stolen copies of pc&apos;s [[Resolve]] and [[Reject]] functions, then p2 is unreachable as well, just as we want.

So p2 ultimately isn&apos;t holding any sort of reference to p1, and unresolvable promises ultimately become unreachable.  QED.

I still think that Promise.race([]) is a debugging nightmare.  But at least it&apos;s not a resource leak.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7225</commentid>
    <comment_count>6</comment_count>
    <who name="Domenic Denicola">d</who>
    <bug_when>2014-02-08 15:32:38 -0800</bug_when>
    <thetext>I would still caution you against taking the spec&apos;s descriptions of the data structures in play as having any actual impact on what strong references are present in the system. Only the observable semantics matter, not the exact algorithmic steps given in the spec.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7286</commentid>
    <comment_count>7</comment_count>
    <who name="C. Scott Ananian">ecmascript</who>
    <bug_when>2014-02-12 20:17:50 -0800</bug_when>
    <thetext>I don&apos;t like the API as a developer, but I&apos;m convinced there isn&apos;t an inherent resource leak here.  Resolving as invalid.</thetext>
  </long_desc>
      
      

    </bug>

</bugzilla>