<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.ecmascript.org/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.4+"
          urlbase="https://bugs.ecmascript.org/"
          
          maintainer="dherman@mozilla.com"
>

    <bug>
          <bug_id>3204</bug_id>
          
          <creation_ts>2014-08-30 06:28:00 -0700</creation_ts>
          <short_desc>B.3.3  Block-Level Function Declarations: Missing variable binding when parameter with same name as function is present</short_desc>
          <delta_ts>2014-10-14 15:17:44 -0700</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>Draft for 6th Edition</product>
          <component>technical issue</component>
          <version>Rev 27: August 24, 2014 Draft</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>Normal</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>---</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="André Bargull">andrebargull</reporter>
          <assigned_to name="Allen Wirfs-Brock">allen</assigned_to>
          
          

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>10065</commentid>
    <comment_count>0</comment_count>
    <who name="André Bargull">andrebargull</who>
    <bug_when>2014-08-30 06:28:22 -0700</bug_when>
    <thetext>B.3.3  Block-Level Function Declarations Web Legacy Compatibility Semantics 

The resolution for bug 3047 is incorrect, excluding parameterNames in step 2.a.ii leads to an assertion in this code:
---
function f(g=0) { { function g(){} } } f()
---

When step 2.b.5 calls SetMutableBinding, no binding is present, so the assertion in SetMutableBinding fails.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>10092</commentid>
    <comment_count>1</comment_count>
    <who name="Allen Wirfs-Brock">allen</who>
    <bug_when>2014-08-30 16:42:05 -0700</bug_when>
    <thetext>(In reply to André Bargull from comment #0)

&gt; ---
&gt; function f(g=0) { { function g(){} } } f()
&gt; ---

Note that your use of f and g in the test case is reversed form the usage in B.3.3.  the test would be easier to related to the algorithm if you wrote it as:

function g(f=0) { { function f(){} } } g()</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>10093</commentid>
    <comment_count>2</comment_count>
    <who name="Allen Wirfs-Brock">allen</who>
    <bug_when>2014-08-30 16:49:08 -0700</bug_when>
    <thetext>fixed in rev28 editor&apos;s draft.

If an otherwise eligible inner function has the same name is a formal parameter then we should be doing this hack at all, as that case does have interoperable legacy web semantics.

So, the fix is to back out the change done for bug 3027 and to add an additional predicate to step 2: &quot;and F is not an element of BoundNames of FormalParameters of g&quot;</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>10382</commentid>
    <comment_count>3</comment_count>
    <who name="Allen Wirfs-Brock">allen</who>
    <bug_when>2014-10-14 15:17:44 -0700</bug_when>
    <thetext>fixed in rev28</thetext>
  </long_desc>
      
      

    </bug>

</bugzilla>