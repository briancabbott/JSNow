<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.ecmascript.org/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.4+"
          urlbase="https://bugs.ecmascript.org/"
          
          maintainer="dherman@mozilla.com"
>

    <bug>
          <bug_id>2982</bug_id>
          
          <creation_ts>2014-06-10 08:27:00 -0700</creation_ts>
          <short_desc>Ch.12, cumulative bugs &amp; suggestions</short_desc>
          <delta_ts>2015-02-15 16:07:50 -0800</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>Draft for 6th Edition</product>
          <component>technical issue</component>
          <version>Rev 23: April 5, 2014 Draft</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>FIXED</resolution>
          
          <see_also>https://bugs.ecmascript.org/show_bug.cgi?id=3148</see_also>
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>Normal</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>---</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Andreas Rossberg">rossberg</reporter>
          <assigned_to name="Allen Wirfs-Brock">allen</assigned_to>
          
          

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>8873</commentid>
    <comment_count>0</comment_count>
    <who name="Andreas Rossberg">rossberg</who>
    <bug_when>2014-06-10 08:27:35 -0700</bug_when>
    <thetext>Ch.12, cumulative bugs &amp; suggestions

[Note: this is against Rev. 23, some things might have been fixed or changed already.]


TECHNICAL ISSUES

12.2.2.1: the actual algorithm seems to be gone amiss

12.2.5.3: there seem to be several cases missing for this algorithm
12.2.5.9, 1st case: call to DefineProperty seems bogus in step 6, already happened at this point
12.2.5.9, 3rd case: shouldn&apos;t setting [[MethodName]] be skipped if propKey is a symbol?

12.3.1.1: there seem to be some cases missing for MemberExpression and CallExpression
12.3.3.1: this doesn&apos;t handle tail calls, which it should. Why not simply say that &quot;new NewExpression&quot; is evaluated as &quot;new NewExpression()&quot;?
12.3.4.1, 1st case, step 2.a: &quot;check if direct eval&quot; -- is this a todo?

12.5.4.1, 2nd bullet: this formulation doesn&apos;t really make sense to me; whatever phrase you can derive via CoverParenthesizedEAAPL will always have outermost parentheses, so the previous rule would never apply to it.

12.5.6.1, step 2.b: wrong level, this should be step 3

12.14.1, 1st case, 1st bullet: this seems to disallow parentheses around LHS array or object patterns, which seem unfortunate. Is that intentional?
12.14.1, 1st case 3rd bullet: &quot;can be statically determined&quot; is far too vague here. Consider &quot;const x = 0; with ({__proto__: null}) x = 1;&quot; -- it is possible (and in this case even fairly easy) to statically determine the condition. Or &quot;const x = 0; { eval(&quot;&quot;); x = 1}&quot;. But those are clearly not cases that you want to require an error for. The spec needs to be more specific, probably by explicitly ruling out cases with intervening object environments, or scopes with sloppy eval.
12.14.1, 2nd case 1st bullet: dito
12.14.5.1, 3rd case, 3rd bullet: dito
12.14.5.2, &apos;AssignmentProperty: IdentifierReference Initializer_opt&apos; case, step 4.b: the call to ToObject seems bogus here
12.14.5.3, AssignmentElement case: steps 1-6 as well as 8 need to be substeps of 1.
12.14.5.3, AssignmentRestElement case: this algorithm is not sufficiently recursive; it needs to allow the case where DestructuringAssignmentTarget is itself an object or array literal
..., step 5.d: this should be step 5.c.i
12.14.5.4, step 1: &quot;name&quot; -&gt; &quot;propertyName&quot;


SUGGESTIONS

12.1.1, Identifier :: IdentifierName but not ...: why not combine the first two bullets?

12.2.3: Literal/ValueLiteral nonterminal distinction seems redundant, drop?
12.2.3.1: Perhaps rename CheckObjectCoercible -- the current name suggests a predicate or check that should return either Bool or nothing.

12.2.4.1.2, case for SpreadElement: ...AssignmentExpression, step 4: seems redundant (subsumed by step 5)
12.2.4.1.3, 1st production: perhaps assert that the Put in step 3 can&apos;t fail?
12.2.4.1.3, 2nd production: likewise step 4 here
12.2.4.1.3, 3rd production: and step 5 here
12.2.4.2.2: it would seem more modular and extensible to fold the type-check into BindingInitialization itself
12.2.4.2.4: fold steps 3-4 into GetIterator?

12.3.4.2: perhaps fold type check in step 5 into the IsCallable predicate?
12.3.5.2, 2nd case: for consistency with ordinary property access, why not describe the 2nd case via desugaring into the first?
12.3.6.1, 3rd case: perhaps fold type check in step 5 into GetIterator?
12.3.6.1, 4th case, step 6: this seems like a very convoluted way of saying &quot;append arg to list and return the result&quot; :)

12.9.4: perhaps fold type check in step 1 into GetMethod?


TYPOS &amp; FORMATTING

12.1.1, IdentifierReference: Identifier, bullet: formatting after &quot;Identifier&quot;
12.1.2: &quot;This is the case for var statements [+and] formal parameters&quot;
12.1.3, first rule: &quot;IdentifierName&quot; -&gt; &quot;Identifier&quot;
12.1.4: formatting of &quot;StringValue&quot;
12.2.0: weird section numbering?
12.2.2: &quot;See 12.1 for ...&quot; - wrong xref?
12.2.5.1, 1st bullet: formatting of PropertyNameList
12.2.5.6: formatting of &quot;PropName&quot;
12.2.7.2, Note: &quot;In that case [-use] other ... means must be used&quot;
12.3.2, 1st grammar: formatting</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>9740</commentid>
    <comment_count>1</comment_count>
    <who name="Allen Wirfs-Brock">allen</who>
    <bug_when>2014-08-09 09:16:37 -0700</bug_when>
    <thetext>12.2.5.3, 12.3.1.1: only cases where the default algorithm in 5.3 doesn&apos;t apply, need explicit algorithms.  Are there specific productions that you think need to this?

12.2.5.9 #2: no [[MethodName]] can be a symbol. 

12.3.4.1: yes</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>9855</commentid>
    <comment_count>2</comment_count>
    <who name="Allen Wirfs-Brock">allen</who>
    <bug_when>2014-08-24 10:17:06 -0700</bug_when>
    <thetext>Bug 3148 created for  &quot;can be statically determined&quot; items</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>9858</commentid>
    <comment_count>3</comment_count>
    <who name="Allen Wirfs-Brock">allen</who>
    <bug_when>2014-08-24 11:26:13 -0700</bug_when>
    <thetext>Re: suggestion 12.9.4.  For retty much every other use of GetMethod we already know that the first argument is an object.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>12746</commentid>
    <comment_count>4</comment_count>
    <who name="Allen Wirfs-Brock">allen</who>
    <bug_when>2015-02-15 16:07:50 -0800</bug_when>
    <thetext>I think everything here has been addressed in rev26 or rev27 or are otherwise stale.</thetext>
  </long_desc>
      
      

    </bug>

</bugzilla>