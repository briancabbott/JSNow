<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.ecmascript.org/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.4+"
          urlbase="https://bugs.ecmascript.org/"
          
          maintainer="dherman@mozilla.com"
>

    <bug>
          <bug_id>1269</bug_id>
          
          <creation_ts>2013-03-08 11:25:00 -0800</creation_ts>
          <short_desc>8.4.4.9 should (new Symbol).toString() work?</short_desc>
          <delta_ts>2013-07-15 17:03:56 -0700</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>Draft for 6th Edition</product>
          <component>technical issue</component>
          <version>Rev 13: December 21, 2012 Draft</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>Normal</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>---</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Allen Wirfs-Brock">allen</reporter>
          <assigned_to name="Allen Wirfs-Brock">allen</assigned_to>
          <cc>tomvc.be</cc>
          

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>3312</commentid>
    <comment_count>0</comment_count>
    <who name="Allen Wirfs-Brock">allen</who>
    <bug_when>2013-03-08 11:25:23 -0800</bug_when>
    <thetext>tomvc says:

In the introduction, it&apos;s mentioned that &quot;Symbol exotic objects are unique in that they are always immutable and never observably reference any other object.&quot;

Yet, as currently specified, evaluating aSymbol.toString yields a reference to the global Object.prototype.toString function (which is mutable by default).

Shouldn&apos;t aSymbol.toString just be undefined?

I notice that Object.prototype.toString special-cases Symbols anyway, so Object.prototype.toString.call(aSymbol) continues to work fine.

In case aSymbol.toString should continue to return Object.prototype.toString, I would advise to modify [[HasProperty]] for Symbols to answer &apos;true&apos; for the string &quot;toString&quot;, and [[Delete]] to answer &apos;false&apos;, so that [[Get]],[[HasProperty]] and [[Delete]] remain internally consistent.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>4340</commentid>
    <comment_count>1</comment_count>
    <who name="Allen Wirfs-Brock">allen</who>
    <bug_when>2013-06-30 13:43:59 -0700</bug_when>
    <thetext>fixed in rev16 editor&apos;s draft</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>4460</commentid>
    <comment_count>2</comment_count>
    <who name="Allen Wirfs-Brock">allen</who>
    <bug_when>2013-07-15 17:03:56 -0700</bug_when>
    <thetext>fixed in rev16 draft.  July 15, 2013</thetext>
  </long_desc>
      
      

    </bug>

</bugzilla>