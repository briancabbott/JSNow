<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.ecmascript.org/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.4+"
          urlbase="https://bugs.ecmascript.org/"
          
          maintainer="dherman@mozilla.com"
>

    <bug>
          <bug_id>3297</bug_id>
          
          <creation_ts>2014-10-23 21:25:00 -0700</creation_ts>
          <short_desc>Proposal of explicit inheritance way of [[CreateAction]].</short_desc>
          <delta_ts>2015-02-13 14:43:01 -0800</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>Draft for 6th Edition</product>
          <component>new feature</component>
          <version>Rev 28: October 14, 2014 Draft</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>INVALID</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>Normal</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>---</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter>oao.hikaru.oao</reporter>
          <assigned_to name="Allen Wirfs-Brock">allen</assigned_to>
          
          

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>10536</commentid>
    <comment_count>0</comment_count>
    <who name="">oao.hikaru.oao</who>
    <bug_when>2014-10-23 21:25:18 -0700</bug_when>
    <thetext>So that it can use &quot;super&quot; keyword fully without using the class syntax by &quot;Function.prototype.toMethod&quot;, I want to inherit [[CreateAction]] without using the &quot;extends&quot; keyword.

Function.prototype.toSubConstructor(superF)

When the toSubConstructor method is called on an object func with argument superF the following steps are taken:

1. Let newF be a new ECMAScript function object that has all of the same internal methods and internal slots as func.
2. If superF has a [[CreateAction]] internal slot, then
a. Set the value of newF’s [[CreateAction]] internal slot to have the same value as superF’s [[CreateAction]] internal slot.
3. Return newF.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>11515</commentid>
    <comment_count>1</comment_count>
    <who name="Allen Wirfs-Brock">allen</who>
    <bug_when>2015-01-16 11:16:33 -0800</bug_when>
    <thetext>note, a class declaration of the form:

class F extends superF {
   constructor() {
     //body
   }
}

is mostly equivalent to 

function F() {
   //body
}
F.__proto__ = superF
F.prototype.__proto__ = superF.prototype

so you can just use that form of class syntax to define such functions.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>12591</commentid>
    <comment_count>2</comment_count>
    <who name="Allen Wirfs-Brock">allen</who>
    <bug_when>2015-02-13 14:43:01 -0800</bug_when>
    <thetext>both [[ClassAction]] and toMethod  are gone from the ES6 spec. 

so, the particulars of this suggest really aren&apos;t applicable any longer</thetext>
  </long_desc>
      
      

    </bug>

</bugzilla>