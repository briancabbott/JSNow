<!doctype html>
<meta charset="utf8">
<link rel="stylesheet" href="./spec.css">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/8.4/styles/github.min.css">
<script src="./spec.js"></script>
<pre class="metadata">
title: Private Fields in `in`
stage: 4
contributors: Jordan Harband
</pre>

<style>
#sec-placeholder, [href="#sec-placeholder"] {
  display: none;
}
</style>
<script>
  Array.from(document.querySelectorAll('ol.toc li'), function (node) {
    if (node.querySelector(':scope > [href="#sec-placeholder"]')) {
      node.style.display = 'none';
    }
  });
</script>

<emu-clause id="sec-placeholder"><h1>Placeholder to ensure correct clause numbering</h1></emu-clause>
<emu-clause id="sec-placeholder"><h1>Placeholder to ensure correct clause numbering</h1></emu-clause>
<emu-clause id="sec-placeholder"><h1>Placeholder to ensure correct clause numbering</h1></emu-clause>
<emu-clause id="sec-placeholder"><h1>Placeholder to ensure correct clause numbering</h1></emu-clause>
<emu-clause id="sec-placeholder"><h1>Placeholder to ensure correct clause numbering</h1></emu-clause>
<emu-clause id="sec-placeholder"><h1>Placeholder to ensure correct clause numbering</h1></emu-clause>
<emu-clause id="sec-placeholder"><h1>Placeholder to ensure correct clause numbering</h1></emu-clause>
<emu-clause id="sec-placeholder"><h1>Placeholder to ensure correct clause numbering</h1></emu-clause>
<emu-clause id="sec-placeholder"><h1>Placeholder to ensure correct clause numbering</h1></emu-clause>
<emu-clause id="sec-placeholder"><h1>Placeholder to ensure correct clause numbering</h1></emu-clause>
<emu-clause id="sec-placeholder"><h1>Placeholder to ensure correct clause numbering</h1></emu-clause>

<emu-clause id="sec-ecmascript-language-expressions">
  <h1>ECMAScript Language: Expressions</h1>
  ...
  <emu-clause id="sec-placeholder"><h1>Placeholder to ensure correct clause numbering</h1></emu-clause>
  <emu-clause id="sec-placeholder"><h1>Placeholder to ensure correct clause numbering</h1></emu-clause>
  <emu-clause id="sec-placeholder"><h1>Placeholder to ensure correct clause numbering</h1></emu-clause>
  <emu-clause id="sec-placeholder"><h1>Placeholder to ensure correct clause numbering</h1></emu-clause>
  <emu-clause id="sec-placeholder"><h1>Placeholder to ensure correct clause numbering</h1></emu-clause>
  <emu-clause id="sec-placeholder"><h1>Placeholder to ensure correct clause numbering</h1></emu-clause>
  <emu-clause id="sec-placeholder"><h1>Placeholder to ensure correct clause numbering</h1></emu-clause>
  <emu-clause id="sec-placeholder"><h1>Placeholder to ensure correct clause numbering</h1></emu-clause>
  <emu-clause id="sec-placeholder"><h1>Placeholder to ensure correct clause numbering</h1></emu-clause>
  <emu-clause id="sec-relational-operators">
    <h1><a href="https://tc39.es/ecma262/#sec-relational-operators">Relational Operators</a></h1>
    <emu-note>
      <p>The result of evaluating a relational operator is always of type Boolean, reflecting whether the relationship named by the operator holds between its two operands.</p>
    </emu-note>
    <h2>Syntax</h2>
    <emu-grammar type="definition">
      RelationalExpression[In, Yield, Await] :
        ShiftExpression[?Yield, ?Await]
        RelationalExpression[?In, ?Yield, ?Await] `&lt;` ShiftExpression[?Yield, ?Await]
        RelationalExpression[?In, ?Yield, ?Await] `&gt;` ShiftExpression[?Yield, ?Await]
        RelationalExpression[?In, ?Yield, ?Await] `&lt;=` ShiftExpression[?Yield, ?Await]
        RelationalExpression[?In, ?Yield, ?Await] `&gt;=` ShiftExpression[?Yield, ?Await]
        RelationalExpression[?In, ?Yield, ?Await] `instanceof` ShiftExpression[?Yield, ?Await]
        [+In] RelationalExpression[+In, ?Yield, ?Await] `in` ShiftExpression[?Yield, ?Await]
        <ins>[+In] PrivateIdentifier `in` ShiftExpression[?Yield, ?Await]</ins>
    </emu-grammar>
    <emu-note>
      <p>The <sub>[In]</sub> grammar parameter is needed to avoid confusing the `in` operator in a relational expression with the `in` operator in a `for` statement.</p>
    </emu-note>

    <emu-clause id="sec-relational-operators-static-semantics-isfunctiondefinition">
      <h1>Static Semantics: IsFunctionDefinition</h1>
      <emu-see-also-para op="IsFunctionDefinition"></emu-see-also-para>
      <emu-grammar>
        RelationalExpression :
          RelationalExpression `&lt;` ShiftExpression
          RelationalExpression `&gt;` ShiftExpression
          RelationalExpression `&lt;=` ShiftExpression
          RelationalExpression `&gt;=` ShiftExpression
          RelationalExpression `instanceof` ShiftExpression
          RelationalExpression `in` ShiftExpression
          <ins>PrivateIdentifier `in` ShiftExpression</ins>
      </emu-grammar>
      <emu-alg>
        1. Return *false*.
      </emu-alg>
    </emu-clause>

    <emu-clause oldids="sec-relational-operators-static-semantics-isvalidsimpleassignmenttarget" id="sec-relational-operators-static-semantics-assignmenttargettype">
      <h1>Static Semantics: AssignmentTargetType</h1>
      <emu-see-also-para op="AssignmentTargetType"></emu-see-also-para>
      <emu-grammar>
        RelationalExpression :
          RelationalExpression `&lt;` ShiftExpression
          RelationalExpression `&gt;` ShiftExpression
          RelationalExpression `&lt;=` ShiftExpression
          RelationalExpression `&gt;=` ShiftExpression
          RelationalExpression `instanceof` ShiftExpression
          RelationalExpression `in` ShiftExpression
          <ins>PrivateIdentifier `in` ShiftExpression</ins>
      </emu-grammar>
      <emu-alg>
        1. Return ~invalid~.
      </emu-alg>
    </emu-clause>
    ...
    <emu-clause id="sec-relational-operators-runtime-semantics-evaluation">
      <h1><a href="https://tc39.es/ecma262/#sec-relational-operators-runtime-semantics-evaluation">Runtime Semantics: Evaluation</a></h1>
      <ins class="block">
        <emu-grammar>RelationalExpression : PrivateIdentifier `in` ShiftExpression</emu-grammar>
        <emu-alg>
          1. Let _privateIdentifier_ be the StringValue of |PrivateIdentifier|.
          1. Let _rref_ be the result of evaluating |ShiftExpression|.
          1. Let _rval_ be ? GetValue(_rref_).
          1. If Type(_rval_) is not Object, throw a *TypeError* exception.
          1. Let _env_ be the running execution context's PrivateEnvironment.
          1. Let _privateNameBinding_ be ? ResolveBinding(_privateIdentifier_, _env_).
          1. Let _privateName_ be ? GetValue(_privateNameBinding_).
          1. Assert: _privateName_ is a Private Name.
          1. If _privateName_.[[Kind]] is *"field"*,
            1. If ! PrivateFieldFind(_privateName_, _rval_) is not ~empty~, then return *true*.
          1. Else,
            1. Assert: _privateName_.[[Kind]] is *"method"* or *"accessor"*.
            1. If PrivateBrandCheck(_rval_, _privateName_) is not an abrupt completion, then return *true*.
          1. Return *false*.
        </emu-alg>
      </ins>
    </emu-clause>
    ...
    <emu-clause id="sec-placeholder"><h1>Placeholder to ensure correct clause numbering</h1></emu-clause>

    <emu-clause id="sec-all-private-identifiers-valid">
      <h1><a href="https://tc39.es/proposal-class-fields/#sec-all-private-identifiers-valid">Static Semantics: AllPrivateIdentifiersValid</a></h1>
      <ins class="block">
        <p>AllPrivateIdentifiersValid is an abstract operation which takes _names_ as an argument.</p>
        <emu-grammar>RelationalExpression : PrivateIdentifier `in` ShiftExpression</emu-grammar>
        <emu-alg>
          1. If StringValue of |PrivateIdentifier| is in _names_, return *true*.
          1. Return *false*.
        </emu-alg>
      </ins>
    </emu-clause>
  </emu-clause>
</emu-clause>

<emu-clause id="sec-placeholder"><h1>Placeholder to ensure correct clause numbering</h1></emu-clause>

<emu-clause id="sec-ecmascript-language-functions-and-classes" >
  <h1>ECMAScript Language: Functions and Classes</h1>
  ...
  <emu-clause id="sec-placeholder"><h1>Placeholder to ensure correct clause numbering</h1></emu-clause>
  <emu-clause id="sec-placeholder"><h1>Placeholder to ensure correct clause numbering</h1></emu-clause>
  <emu-clause id="sec-placeholder"><h1>Placeholder to ensure correct clause numbering</h1></emu-clause>
  <emu-clause id="sec-placeholder"><h1>Placeholder to ensure correct clause numbering</h1></emu-clause>
  <emu-clause id="sec-placeholder"><h1>Placeholder to ensure correct clause numbering</h1></emu-clause>
  <emu-clause id="sec-placeholder"><h1>Placeholder to ensure correct clause numbering</h1></emu-clause>
  <emu-clause id="sec-placeholder"><h1>Placeholder to ensure correct clause numbering</h1></emu-clause>
  <emu-clause id="sec-placeholder"><h1>Placeholder to ensure correct clause numbering</h1></emu-clause>

  <emu-clause id="sec-tail-position-calls">
    <h1>Tail Position Calls</h1>
    ...
    <emu-clause id="sec-placeholder"><h1>Placeholder to ensure correct clause numbering</h1></emu-clause>
    <emu-clause id="sec-static-semantics-hascallintailposition">
      <h1>Static Semantics: HasCallInTailPosition</h1>
      ...
      <emu-clause id="sec-expression-rules">
        <h1>Expression Rules</h1>
        <emu-note>
          <p>A potential tail position call that is immediately followed by return GetValue of the call result is also a possible tail position call. Function calls cannot return reference values, so such a GetValue operation will always return the same value as the actual function call result.</p>
        </emu-note>
        <emu-grammar>
          AssignmentExpression :
            YieldExpression
            ArrowFunction
            AsyncArrowFunction
            LeftHandSideExpression `=` AssignmentExpression
            LeftHandSideExpression AssignmentOperator AssignmentExpression

          BitwiseANDExpression : BitwiseANDExpression `&amp;` EqualityExpression

          BitwiseXORExpression : BitwiseXORExpression `^` BitwiseANDExpression

          BitwiseORExpression : BitwiseORExpression `|` BitwiseXORExpression

          EqualityExpression :
            EqualityExpression `==` RelationalExpression
            EqualityExpression `!=` RelationalExpression
            EqualityExpression `===` RelationalExpression
            EqualityExpression `!==` RelationalExpression

          RelationalExpression :
            RelationalExpression `&lt;` ShiftExpression
            RelationalExpression `&gt;` ShiftExpression
            RelationalExpression `&lt;=` ShiftExpression
            RelationalExpression `&gt;=` ShiftExpression
            RelationalExpression `instanceof` ShiftExpression
            RelationalExpression `in` ShiftExpression
            <ins>PrivateIdentifier `in` ShiftExpression</ins>

          ShiftExpression :
            ShiftExpression `&lt;&lt;` AdditiveExpression
            ShiftExpression `&gt;&gt;` AdditiveExpression
            ShiftExpression `&gt;&gt;&gt;` AdditiveExpression

          AdditiveExpression :
            AdditiveExpression `+` MultiplicativeExpression
            AdditiveExpression `-` MultiplicativeExpression

          MultiplicativeExpression :
            MultiplicativeExpression MultiplicativeOperator ExponentiationExpression

          ExponentiationExpression :
            UpdateExpression `**` ExponentiationExpression

          UpdateExpression :
            LeftHandSideExpression `++`
            LeftHandSideExpression `--`
            `++` UnaryExpression
            `--` UnaryExpression

          UnaryExpression :
            `delete` UnaryExpression
            `void` UnaryExpression
            `typeof` UnaryExpression
            `+` UnaryExpression
            `-` UnaryExpression
            `~` UnaryExpression
            `!` UnaryExpression
            AwaitExpression

          CallExpression :
            SuperCall
            CallExpression `[` Expression `]`
            CallExpression `.` IdentifierName

          NewExpression : `new` NewExpression

          MemberExpression :
            MemberExpression `[` Expression `]`
            MemberExpression `.` IdentifierName
            SuperProperty
            MetaProperty
            `new` MemberExpression Arguments

          PrimaryExpression :
            `this`
            IdentifierReference
            Literal
            ArrayLiteral
            ObjectLiteral
            FunctionExpression
            ClassExpression
            GeneratorExpression
            AsyncFunctionExpression
            AsyncGeneratorExpression
            RegularExpressionLiteral
            TemplateLiteral
        </emu-grammar>
        <emu-alg>
          1. Return *false*.
        </emu-alg>
        <emu-grammar>
          Expression :
            AssignmentExpression
            Expression `,` AssignmentExpression
        </emu-grammar>
        <emu-alg>
          1. Return HasCallInTailPosition of |AssignmentExpression| with argument _call_.
        </emu-alg>
        <emu-grammar>ConditionalExpression : ShortCircuitExpression `?` AssignmentExpression `:` AssignmentExpression</emu-grammar>
        <emu-alg>
          1. Let _has_ be HasCallInTailPosition of the first |AssignmentExpression| with argument _call_.
          1. If _has_ is *true*, return *true*.
          1. Return HasCallInTailPosition of the second |AssignmentExpression| with argument _call_.
        </emu-alg>
        <emu-grammar>LogicalANDExpression : LogicalANDExpression `&amp;&amp;` BitwiseORExpression</emu-grammar>
        <emu-alg>
          1. Return HasCallInTailPosition of |BitwiseORExpression| with argument _call_.
        </emu-alg>
        <emu-grammar>LogicalORExpression : LogicalORExpression `||` LogicalANDExpression</emu-grammar>
        <emu-alg>
          1. Return HasCallInTailPosition of |LogicalANDExpression| with argument _call_.
        </emu-alg>
        <emu-grammar>CoalesceExpression : CoalesceExpressionHead `??` BitwiseORExpression</emu-grammar>
        <emu-alg>
          1. Return HasCallInTailPosition of |BitwiseORExpression| with argument _call_.
        </emu-alg>
        <emu-grammar>
          CallExpression :
            CoverCallExpressionAndAsyncArrowHead
            CallExpression Arguments
            CallExpression TemplateLiteral
        </emu-grammar>
        <emu-alg>
          1. If this |CallExpression| is _call_, return *true*.
          1. Return *false*.
        </emu-alg>
        <emu-grammar>
          OptionalExpression :
            MemberExpression OptionalChain
            CallExpression OptionalChain
            OptionalExpression OptionalChain
        </emu-grammar>
        <emu-alg>
          1. Return HasCallInTailPosition of |OptionalChain| with argument _call_.
        </emu-alg>
        <emu-grammar>
          OptionalChain :
            `?.` `[` Expression `]`
            `?.` IdentifierName
            OptionalChain `[` Expression `]`
            OptionalChain `.` IdentifierName
        </emu-grammar>
        <emu-alg>
          1. Return *false*.
        </emu-alg>
        <emu-grammar>
          OptionalChain :
            `?.` Arguments
            OptionalChain Arguments
        </emu-grammar>
        <emu-alg>
          1. If this |OptionalChain| is _call_, return *true*.
          1. Return *false*.
        </emu-alg>
        <emu-grammar>
          MemberExpression :
            MemberExpression TemplateLiteral
        </emu-grammar>
        <emu-alg>
          1. If this |MemberExpression| is _call_, return *true*.
          1. Return *false*.
        </emu-alg>
        <emu-grammar>PrimaryExpression : CoverParenthesizedExpressionAndArrowParameterList</emu-grammar>
        <emu-alg>
          1. Let _expr_ be CoveredParenthesizedExpression of |CoverParenthesizedExpressionAndArrowParameterList|.
          1. Return HasCallInTailPosition of _expr_ with argument _call_.
        </emu-alg>
        <emu-grammar>
          ParenthesizedExpression :
            `(` Expression `)`
        </emu-grammar>
        <emu-alg>
          1. Return HasCallInTailPosition of |Expression| with argument _call_.
        </emu-alg>
      </emu-clause>
    </emu-clause>
  </emu-clause>
</emu-clause>


<emu-annex id="sec-grammar-summary">
  <h1>Grammar Summary</h1>
  <emu-annex id="sec-placeholder"><h1>Placeholder to ensure correct annex numbering</h1></emu-annex>
  ...
  <emu-annex id="sec-expressions">
    <h1>Expressions</h1>
  ...
    <emu-prodref name="RelationalExpression"></emu-prodref>
  </emu-annex>
</emu-annex>
